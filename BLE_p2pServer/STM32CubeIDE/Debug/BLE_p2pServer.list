
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b470  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1006b530  1006b530  0002c530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  1006b534  1006b534  0002c534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000020ec  1006b538  1006b538  0002c538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1006d624  1006d624  0002e624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000003d4  20001318  1006d62c  0002f318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  00030004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  00030004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  00030004  2**2
                  ALLOC
 10 .bss          00001184  20000194  20000194  00030004  2**2
                  ALLOC
 11 .noinit       00002414  200016ec  1006da00  0002f6ec  2**2
                  ALLOC
 12 .ota_region_end 00000000  1006da00  1006da00  0002f6ec  2**0
                  CONTENTS
 13 .heap         00000000  20003b00  20003b00  0002f6ec  2**0
                  CONTENTS
 14 .stack        00000c00  2000f400  2000f400  00030400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  0002f6ec  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  0002f6ec  2**0
                  CONTENTS, READONLY
 17 .debug_info   0002d50a  00000000  00000000  0002f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000075c8  00000000  00000000  0005cc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003080  00000000  00000000  000641f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000245c  00000000  00000000  00067270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00026093  00000000  00000000  000696cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00030850  00000000  00000000  0008f75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000cd95d  00000000  00000000  000bffaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      0000023b  00000000  00000000  0018d90c  2**0
                  CONTENTS, READONLY
 25 .arm_vfe_header 00000004  00000000  00000000  0018db48  2**2
                  CONTENTS, READONLY
 26 .debug_frame  0000cb6c  00000000  00000000  0018db4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000149  00000000  00000000  0019a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 000003eb  00000000  00000000  0019a801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <strcmp>:
1004021c:	7802      	ldrb	r2, [r0, #0]
1004021e:	780b      	ldrb	r3, [r1, #0]
10040220:	2a00      	cmp	r2, #0
10040222:	d003      	beq.n	1004022c <strcmp+0x10>
10040224:	3001      	adds	r0, #1
10040226:	3101      	adds	r1, #1
10040228:	429a      	cmp	r2, r3
1004022a:	d0f7      	beq.n	1004021c <strcmp>
1004022c:	1ad0      	subs	r0, r2, r3
1004022e:	4770      	bx	lr

10040230 <strlen>:
10040230:	2300      	movs	r3, #0
10040232:	5cc2      	ldrb	r2, [r0, r3]
10040234:	3301      	adds	r3, #1
10040236:	2a00      	cmp	r2, #0
10040238:	d1fb      	bne.n	10040232 <strlen+0x2>
1004023a:	1e58      	subs	r0, r3, #1
1004023c:	4770      	bx	lr
	...

10040240 <__gnu_thumb1_case_uqi>:
10040240:	b402      	push	{r1}
10040242:	4671      	mov	r1, lr
10040244:	0849      	lsrs	r1, r1, #1
10040246:	0049      	lsls	r1, r1, #1
10040248:	5c09      	ldrb	r1, [r1, r0]
1004024a:	0049      	lsls	r1, r1, #1
1004024c:	448e      	add	lr, r1
1004024e:	bc02      	pop	{r1}
10040250:	4770      	bx	lr
10040252:	46c0      	nop			@ (mov r8, r8)

10040254 <__gnu_thumb1_case_shi>:
10040254:	b403      	push	{r0, r1}
10040256:	4671      	mov	r1, lr
10040258:	0849      	lsrs	r1, r1, #1
1004025a:	0040      	lsls	r0, r0, #1
1004025c:	0049      	lsls	r1, r1, #1
1004025e:	5e09      	ldrsh	r1, [r1, r0]
10040260:	0049      	lsls	r1, r1, #1
10040262:	448e      	add	lr, r1
10040264:	bc03      	pop	{r0, r1}
10040266:	4770      	bx	lr

10040268 <__udivsi3>:
10040268:	2200      	movs	r2, #0
1004026a:	0843      	lsrs	r3, r0, #1
1004026c:	428b      	cmp	r3, r1
1004026e:	d374      	bcc.n	1004035a <__udivsi3+0xf2>
10040270:	0903      	lsrs	r3, r0, #4
10040272:	428b      	cmp	r3, r1
10040274:	d35f      	bcc.n	10040336 <__udivsi3+0xce>
10040276:	0a03      	lsrs	r3, r0, #8
10040278:	428b      	cmp	r3, r1
1004027a:	d344      	bcc.n	10040306 <__udivsi3+0x9e>
1004027c:	0b03      	lsrs	r3, r0, #12
1004027e:	428b      	cmp	r3, r1
10040280:	d328      	bcc.n	100402d4 <__udivsi3+0x6c>
10040282:	0c03      	lsrs	r3, r0, #16
10040284:	428b      	cmp	r3, r1
10040286:	d30d      	bcc.n	100402a4 <__udivsi3+0x3c>
10040288:	22ff      	movs	r2, #255	@ 0xff
1004028a:	0209      	lsls	r1, r1, #8
1004028c:	ba12      	rev	r2, r2
1004028e:	0c03      	lsrs	r3, r0, #16
10040290:	428b      	cmp	r3, r1
10040292:	d302      	bcc.n	1004029a <__udivsi3+0x32>
10040294:	1212      	asrs	r2, r2, #8
10040296:	0209      	lsls	r1, r1, #8
10040298:	d065      	beq.n	10040366 <__udivsi3+0xfe>
1004029a:	0b03      	lsrs	r3, r0, #12
1004029c:	428b      	cmp	r3, r1
1004029e:	d319      	bcc.n	100402d4 <__udivsi3+0x6c>
100402a0:	e000      	b.n	100402a4 <__udivsi3+0x3c>
100402a2:	0a09      	lsrs	r1, r1, #8
100402a4:	0bc3      	lsrs	r3, r0, #15
100402a6:	428b      	cmp	r3, r1
100402a8:	d301      	bcc.n	100402ae <__udivsi3+0x46>
100402aa:	03cb      	lsls	r3, r1, #15
100402ac:	1ac0      	subs	r0, r0, r3
100402ae:	4152      	adcs	r2, r2
100402b0:	0b83      	lsrs	r3, r0, #14
100402b2:	428b      	cmp	r3, r1
100402b4:	d301      	bcc.n	100402ba <__udivsi3+0x52>
100402b6:	038b      	lsls	r3, r1, #14
100402b8:	1ac0      	subs	r0, r0, r3
100402ba:	4152      	adcs	r2, r2
100402bc:	0b43      	lsrs	r3, r0, #13
100402be:	428b      	cmp	r3, r1
100402c0:	d301      	bcc.n	100402c6 <__udivsi3+0x5e>
100402c2:	034b      	lsls	r3, r1, #13
100402c4:	1ac0      	subs	r0, r0, r3
100402c6:	4152      	adcs	r2, r2
100402c8:	0b03      	lsrs	r3, r0, #12
100402ca:	428b      	cmp	r3, r1
100402cc:	d301      	bcc.n	100402d2 <__udivsi3+0x6a>
100402ce:	030b      	lsls	r3, r1, #12
100402d0:	1ac0      	subs	r0, r0, r3
100402d2:	4152      	adcs	r2, r2
100402d4:	0ac3      	lsrs	r3, r0, #11
100402d6:	428b      	cmp	r3, r1
100402d8:	d301      	bcc.n	100402de <__udivsi3+0x76>
100402da:	02cb      	lsls	r3, r1, #11
100402dc:	1ac0      	subs	r0, r0, r3
100402de:	4152      	adcs	r2, r2
100402e0:	0a83      	lsrs	r3, r0, #10
100402e2:	428b      	cmp	r3, r1
100402e4:	d301      	bcc.n	100402ea <__udivsi3+0x82>
100402e6:	028b      	lsls	r3, r1, #10
100402e8:	1ac0      	subs	r0, r0, r3
100402ea:	4152      	adcs	r2, r2
100402ec:	0a43      	lsrs	r3, r0, #9
100402ee:	428b      	cmp	r3, r1
100402f0:	d301      	bcc.n	100402f6 <__udivsi3+0x8e>
100402f2:	024b      	lsls	r3, r1, #9
100402f4:	1ac0      	subs	r0, r0, r3
100402f6:	4152      	adcs	r2, r2
100402f8:	0a03      	lsrs	r3, r0, #8
100402fa:	428b      	cmp	r3, r1
100402fc:	d301      	bcc.n	10040302 <__udivsi3+0x9a>
100402fe:	020b      	lsls	r3, r1, #8
10040300:	1ac0      	subs	r0, r0, r3
10040302:	4152      	adcs	r2, r2
10040304:	d2cd      	bcs.n	100402a2 <__udivsi3+0x3a>
10040306:	09c3      	lsrs	r3, r0, #7
10040308:	428b      	cmp	r3, r1
1004030a:	d301      	bcc.n	10040310 <__udivsi3+0xa8>
1004030c:	01cb      	lsls	r3, r1, #7
1004030e:	1ac0      	subs	r0, r0, r3
10040310:	4152      	adcs	r2, r2
10040312:	0983      	lsrs	r3, r0, #6
10040314:	428b      	cmp	r3, r1
10040316:	d301      	bcc.n	1004031c <__udivsi3+0xb4>
10040318:	018b      	lsls	r3, r1, #6
1004031a:	1ac0      	subs	r0, r0, r3
1004031c:	4152      	adcs	r2, r2
1004031e:	0943      	lsrs	r3, r0, #5
10040320:	428b      	cmp	r3, r1
10040322:	d301      	bcc.n	10040328 <__udivsi3+0xc0>
10040324:	014b      	lsls	r3, r1, #5
10040326:	1ac0      	subs	r0, r0, r3
10040328:	4152      	adcs	r2, r2
1004032a:	0903      	lsrs	r3, r0, #4
1004032c:	428b      	cmp	r3, r1
1004032e:	d301      	bcc.n	10040334 <__udivsi3+0xcc>
10040330:	010b      	lsls	r3, r1, #4
10040332:	1ac0      	subs	r0, r0, r3
10040334:	4152      	adcs	r2, r2
10040336:	08c3      	lsrs	r3, r0, #3
10040338:	428b      	cmp	r3, r1
1004033a:	d301      	bcc.n	10040340 <__udivsi3+0xd8>
1004033c:	00cb      	lsls	r3, r1, #3
1004033e:	1ac0      	subs	r0, r0, r3
10040340:	4152      	adcs	r2, r2
10040342:	0883      	lsrs	r3, r0, #2
10040344:	428b      	cmp	r3, r1
10040346:	d301      	bcc.n	1004034c <__udivsi3+0xe4>
10040348:	008b      	lsls	r3, r1, #2
1004034a:	1ac0      	subs	r0, r0, r3
1004034c:	4152      	adcs	r2, r2
1004034e:	0843      	lsrs	r3, r0, #1
10040350:	428b      	cmp	r3, r1
10040352:	d301      	bcc.n	10040358 <__udivsi3+0xf0>
10040354:	004b      	lsls	r3, r1, #1
10040356:	1ac0      	subs	r0, r0, r3
10040358:	4152      	adcs	r2, r2
1004035a:	1a41      	subs	r1, r0, r1
1004035c:	d200      	bcs.n	10040360 <__udivsi3+0xf8>
1004035e:	4601      	mov	r1, r0
10040360:	4152      	adcs	r2, r2
10040362:	4610      	mov	r0, r2
10040364:	4770      	bx	lr
10040366:	e7ff      	b.n	10040368 <__udivsi3+0x100>
10040368:	b501      	push	{r0, lr}
1004036a:	2000      	movs	r0, #0
1004036c:	f000 f8f0 	bl	10040550 <__aeabi_idiv0>
10040370:	bd02      	pop	{r1, pc}
10040372:	46c0      	nop			@ (mov r8, r8)

10040374 <__aeabi_uidivmod>:
10040374:	2900      	cmp	r1, #0
10040376:	d0f7      	beq.n	10040368 <__udivsi3+0x100>
10040378:	e776      	b.n	10040268 <__udivsi3>
1004037a:	4770      	bx	lr

1004037c <__divsi3>:
1004037c:	4603      	mov	r3, r0
1004037e:	430b      	orrs	r3, r1
10040380:	d47f      	bmi.n	10040482 <__divsi3+0x106>
10040382:	2200      	movs	r2, #0
10040384:	0843      	lsrs	r3, r0, #1
10040386:	428b      	cmp	r3, r1
10040388:	d374      	bcc.n	10040474 <__divsi3+0xf8>
1004038a:	0903      	lsrs	r3, r0, #4
1004038c:	428b      	cmp	r3, r1
1004038e:	d35f      	bcc.n	10040450 <__divsi3+0xd4>
10040390:	0a03      	lsrs	r3, r0, #8
10040392:	428b      	cmp	r3, r1
10040394:	d344      	bcc.n	10040420 <__divsi3+0xa4>
10040396:	0b03      	lsrs	r3, r0, #12
10040398:	428b      	cmp	r3, r1
1004039a:	d328      	bcc.n	100403ee <__divsi3+0x72>
1004039c:	0c03      	lsrs	r3, r0, #16
1004039e:	428b      	cmp	r3, r1
100403a0:	d30d      	bcc.n	100403be <__divsi3+0x42>
100403a2:	22ff      	movs	r2, #255	@ 0xff
100403a4:	0209      	lsls	r1, r1, #8
100403a6:	ba12      	rev	r2, r2
100403a8:	0c03      	lsrs	r3, r0, #16
100403aa:	428b      	cmp	r3, r1
100403ac:	d302      	bcc.n	100403b4 <__divsi3+0x38>
100403ae:	1212      	asrs	r2, r2, #8
100403b0:	0209      	lsls	r1, r1, #8
100403b2:	d065      	beq.n	10040480 <__divsi3+0x104>
100403b4:	0b03      	lsrs	r3, r0, #12
100403b6:	428b      	cmp	r3, r1
100403b8:	d319      	bcc.n	100403ee <__divsi3+0x72>
100403ba:	e000      	b.n	100403be <__divsi3+0x42>
100403bc:	0a09      	lsrs	r1, r1, #8
100403be:	0bc3      	lsrs	r3, r0, #15
100403c0:	428b      	cmp	r3, r1
100403c2:	d301      	bcc.n	100403c8 <__divsi3+0x4c>
100403c4:	03cb      	lsls	r3, r1, #15
100403c6:	1ac0      	subs	r0, r0, r3
100403c8:	4152      	adcs	r2, r2
100403ca:	0b83      	lsrs	r3, r0, #14
100403cc:	428b      	cmp	r3, r1
100403ce:	d301      	bcc.n	100403d4 <__divsi3+0x58>
100403d0:	038b      	lsls	r3, r1, #14
100403d2:	1ac0      	subs	r0, r0, r3
100403d4:	4152      	adcs	r2, r2
100403d6:	0b43      	lsrs	r3, r0, #13
100403d8:	428b      	cmp	r3, r1
100403da:	d301      	bcc.n	100403e0 <__divsi3+0x64>
100403dc:	034b      	lsls	r3, r1, #13
100403de:	1ac0      	subs	r0, r0, r3
100403e0:	4152      	adcs	r2, r2
100403e2:	0b03      	lsrs	r3, r0, #12
100403e4:	428b      	cmp	r3, r1
100403e6:	d301      	bcc.n	100403ec <__divsi3+0x70>
100403e8:	030b      	lsls	r3, r1, #12
100403ea:	1ac0      	subs	r0, r0, r3
100403ec:	4152      	adcs	r2, r2
100403ee:	0ac3      	lsrs	r3, r0, #11
100403f0:	428b      	cmp	r3, r1
100403f2:	d301      	bcc.n	100403f8 <__divsi3+0x7c>
100403f4:	02cb      	lsls	r3, r1, #11
100403f6:	1ac0      	subs	r0, r0, r3
100403f8:	4152      	adcs	r2, r2
100403fa:	0a83      	lsrs	r3, r0, #10
100403fc:	428b      	cmp	r3, r1
100403fe:	d301      	bcc.n	10040404 <__divsi3+0x88>
10040400:	028b      	lsls	r3, r1, #10
10040402:	1ac0      	subs	r0, r0, r3
10040404:	4152      	adcs	r2, r2
10040406:	0a43      	lsrs	r3, r0, #9
10040408:	428b      	cmp	r3, r1
1004040a:	d301      	bcc.n	10040410 <__divsi3+0x94>
1004040c:	024b      	lsls	r3, r1, #9
1004040e:	1ac0      	subs	r0, r0, r3
10040410:	4152      	adcs	r2, r2
10040412:	0a03      	lsrs	r3, r0, #8
10040414:	428b      	cmp	r3, r1
10040416:	d301      	bcc.n	1004041c <__divsi3+0xa0>
10040418:	020b      	lsls	r3, r1, #8
1004041a:	1ac0      	subs	r0, r0, r3
1004041c:	4152      	adcs	r2, r2
1004041e:	d2cd      	bcs.n	100403bc <__divsi3+0x40>
10040420:	09c3      	lsrs	r3, r0, #7
10040422:	428b      	cmp	r3, r1
10040424:	d301      	bcc.n	1004042a <__divsi3+0xae>
10040426:	01cb      	lsls	r3, r1, #7
10040428:	1ac0      	subs	r0, r0, r3
1004042a:	4152      	adcs	r2, r2
1004042c:	0983      	lsrs	r3, r0, #6
1004042e:	428b      	cmp	r3, r1
10040430:	d301      	bcc.n	10040436 <__divsi3+0xba>
10040432:	018b      	lsls	r3, r1, #6
10040434:	1ac0      	subs	r0, r0, r3
10040436:	4152      	adcs	r2, r2
10040438:	0943      	lsrs	r3, r0, #5
1004043a:	428b      	cmp	r3, r1
1004043c:	d301      	bcc.n	10040442 <__divsi3+0xc6>
1004043e:	014b      	lsls	r3, r1, #5
10040440:	1ac0      	subs	r0, r0, r3
10040442:	4152      	adcs	r2, r2
10040444:	0903      	lsrs	r3, r0, #4
10040446:	428b      	cmp	r3, r1
10040448:	d301      	bcc.n	1004044e <__divsi3+0xd2>
1004044a:	010b      	lsls	r3, r1, #4
1004044c:	1ac0      	subs	r0, r0, r3
1004044e:	4152      	adcs	r2, r2
10040450:	08c3      	lsrs	r3, r0, #3
10040452:	428b      	cmp	r3, r1
10040454:	d301      	bcc.n	1004045a <__divsi3+0xde>
10040456:	00cb      	lsls	r3, r1, #3
10040458:	1ac0      	subs	r0, r0, r3
1004045a:	4152      	adcs	r2, r2
1004045c:	0883      	lsrs	r3, r0, #2
1004045e:	428b      	cmp	r3, r1
10040460:	d301      	bcc.n	10040466 <__divsi3+0xea>
10040462:	008b      	lsls	r3, r1, #2
10040464:	1ac0      	subs	r0, r0, r3
10040466:	4152      	adcs	r2, r2
10040468:	0843      	lsrs	r3, r0, #1
1004046a:	428b      	cmp	r3, r1
1004046c:	d301      	bcc.n	10040472 <__divsi3+0xf6>
1004046e:	004b      	lsls	r3, r1, #1
10040470:	1ac0      	subs	r0, r0, r3
10040472:	4152      	adcs	r2, r2
10040474:	1a41      	subs	r1, r0, r1
10040476:	d200      	bcs.n	1004047a <__divsi3+0xfe>
10040478:	4601      	mov	r1, r0
1004047a:	4152      	adcs	r2, r2
1004047c:	4610      	mov	r0, r2
1004047e:	4770      	bx	lr
10040480:	e05d      	b.n	1004053e <__divsi3+0x1c2>
10040482:	0fca      	lsrs	r2, r1, #31
10040484:	d000      	beq.n	10040488 <__divsi3+0x10c>
10040486:	4249      	negs	r1, r1
10040488:	1003      	asrs	r3, r0, #32
1004048a:	d300      	bcc.n	1004048e <__divsi3+0x112>
1004048c:	4240      	negs	r0, r0
1004048e:	4053      	eors	r3, r2
10040490:	2200      	movs	r2, #0
10040492:	469c      	mov	ip, r3
10040494:	0903      	lsrs	r3, r0, #4
10040496:	428b      	cmp	r3, r1
10040498:	d32d      	bcc.n	100404f6 <__divsi3+0x17a>
1004049a:	0a03      	lsrs	r3, r0, #8
1004049c:	428b      	cmp	r3, r1
1004049e:	d312      	bcc.n	100404c6 <__divsi3+0x14a>
100404a0:	22fc      	movs	r2, #252	@ 0xfc
100404a2:	0189      	lsls	r1, r1, #6
100404a4:	ba12      	rev	r2, r2
100404a6:	0a03      	lsrs	r3, r0, #8
100404a8:	428b      	cmp	r3, r1
100404aa:	d30c      	bcc.n	100404c6 <__divsi3+0x14a>
100404ac:	0189      	lsls	r1, r1, #6
100404ae:	1192      	asrs	r2, r2, #6
100404b0:	428b      	cmp	r3, r1
100404b2:	d308      	bcc.n	100404c6 <__divsi3+0x14a>
100404b4:	0189      	lsls	r1, r1, #6
100404b6:	1192      	asrs	r2, r2, #6
100404b8:	428b      	cmp	r3, r1
100404ba:	d304      	bcc.n	100404c6 <__divsi3+0x14a>
100404bc:	0189      	lsls	r1, r1, #6
100404be:	d03a      	beq.n	10040536 <__divsi3+0x1ba>
100404c0:	1192      	asrs	r2, r2, #6
100404c2:	e000      	b.n	100404c6 <__divsi3+0x14a>
100404c4:	0989      	lsrs	r1, r1, #6
100404c6:	09c3      	lsrs	r3, r0, #7
100404c8:	428b      	cmp	r3, r1
100404ca:	d301      	bcc.n	100404d0 <__divsi3+0x154>
100404cc:	01cb      	lsls	r3, r1, #7
100404ce:	1ac0      	subs	r0, r0, r3
100404d0:	4152      	adcs	r2, r2
100404d2:	0983      	lsrs	r3, r0, #6
100404d4:	428b      	cmp	r3, r1
100404d6:	d301      	bcc.n	100404dc <__divsi3+0x160>
100404d8:	018b      	lsls	r3, r1, #6
100404da:	1ac0      	subs	r0, r0, r3
100404dc:	4152      	adcs	r2, r2
100404de:	0943      	lsrs	r3, r0, #5
100404e0:	428b      	cmp	r3, r1
100404e2:	d301      	bcc.n	100404e8 <__divsi3+0x16c>
100404e4:	014b      	lsls	r3, r1, #5
100404e6:	1ac0      	subs	r0, r0, r3
100404e8:	4152      	adcs	r2, r2
100404ea:	0903      	lsrs	r3, r0, #4
100404ec:	428b      	cmp	r3, r1
100404ee:	d301      	bcc.n	100404f4 <__divsi3+0x178>
100404f0:	010b      	lsls	r3, r1, #4
100404f2:	1ac0      	subs	r0, r0, r3
100404f4:	4152      	adcs	r2, r2
100404f6:	08c3      	lsrs	r3, r0, #3
100404f8:	428b      	cmp	r3, r1
100404fa:	d301      	bcc.n	10040500 <__divsi3+0x184>
100404fc:	00cb      	lsls	r3, r1, #3
100404fe:	1ac0      	subs	r0, r0, r3
10040500:	4152      	adcs	r2, r2
10040502:	0883      	lsrs	r3, r0, #2
10040504:	428b      	cmp	r3, r1
10040506:	d301      	bcc.n	1004050c <__divsi3+0x190>
10040508:	008b      	lsls	r3, r1, #2
1004050a:	1ac0      	subs	r0, r0, r3
1004050c:	4152      	adcs	r2, r2
1004050e:	d2d9      	bcs.n	100404c4 <__divsi3+0x148>
10040510:	0843      	lsrs	r3, r0, #1
10040512:	428b      	cmp	r3, r1
10040514:	d301      	bcc.n	1004051a <__divsi3+0x19e>
10040516:	004b      	lsls	r3, r1, #1
10040518:	1ac0      	subs	r0, r0, r3
1004051a:	4152      	adcs	r2, r2
1004051c:	1a41      	subs	r1, r0, r1
1004051e:	d200      	bcs.n	10040522 <__divsi3+0x1a6>
10040520:	4601      	mov	r1, r0
10040522:	4663      	mov	r3, ip
10040524:	4152      	adcs	r2, r2
10040526:	105b      	asrs	r3, r3, #1
10040528:	4610      	mov	r0, r2
1004052a:	d301      	bcc.n	10040530 <__divsi3+0x1b4>
1004052c:	4240      	negs	r0, r0
1004052e:	2b00      	cmp	r3, #0
10040530:	d500      	bpl.n	10040534 <__divsi3+0x1b8>
10040532:	4249      	negs	r1, r1
10040534:	4770      	bx	lr
10040536:	4663      	mov	r3, ip
10040538:	105b      	asrs	r3, r3, #1
1004053a:	d300      	bcc.n	1004053e <__divsi3+0x1c2>
1004053c:	4240      	negs	r0, r0
1004053e:	b501      	push	{r0, lr}
10040540:	2000      	movs	r0, #0
10040542:	f000 f805 	bl	10040550 <__aeabi_idiv0>
10040546:	bd02      	pop	{r1, pc}

10040548 <__aeabi_idivmod>:
10040548:	2900      	cmp	r1, #0
1004054a:	d0f8      	beq.n	1004053e <__divsi3+0x1c2>
1004054c:	e716      	b.n	1004037c <__divsi3>
1004054e:	4770      	bx	lr

10040550 <__aeabi_idiv0>:
10040550:	4770      	bx	lr
10040552:	46c0      	nop			@ (mov r8, r8)

10040554 <__aeabi_llsl>:
10040554:	4091      	lsls	r1, r2
10040556:	0003      	movs	r3, r0
10040558:	4090      	lsls	r0, r2
1004055a:	469c      	mov	ip, r3
1004055c:	3a20      	subs	r2, #32
1004055e:	4093      	lsls	r3, r2
10040560:	4319      	orrs	r1, r3
10040562:	4252      	negs	r2, r2
10040564:	4663      	mov	r3, ip
10040566:	40d3      	lsrs	r3, r2
10040568:	4319      	orrs	r1, r3
1004056a:	4770      	bx	lr

1004056c <__aeabi_cdrcmple>:
1004056c:	4684      	mov	ip, r0
1004056e:	0010      	movs	r0, r2
10040570:	4662      	mov	r2, ip
10040572:	468c      	mov	ip, r1
10040574:	0019      	movs	r1, r3
10040576:	4663      	mov	r3, ip
10040578:	e000      	b.n	1004057c <__aeabi_cdcmpeq>
1004057a:	46c0      	nop			@ (mov r8, r8)

1004057c <__aeabi_cdcmpeq>:
1004057c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004057e:	f001 f96b 	bl	10041858 <__ledf2>
10040582:	2800      	cmp	r0, #0
10040584:	d401      	bmi.n	1004058a <__aeabi_cdcmpeq+0xe>
10040586:	2100      	movs	r1, #0
10040588:	42c8      	cmn	r0, r1
1004058a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1004058c <__aeabi_dcmpeq>:
1004058c:	b510      	push	{r4, lr}
1004058e:	f001 f8af 	bl	100416f0 <__eqdf2>
10040592:	4240      	negs	r0, r0
10040594:	3001      	adds	r0, #1
10040596:	bd10      	pop	{r4, pc}

10040598 <__aeabi_dcmplt>:
10040598:	b510      	push	{r4, lr}
1004059a:	f001 f95d 	bl	10041858 <__ledf2>
1004059e:	2800      	cmp	r0, #0
100405a0:	db01      	blt.n	100405a6 <__aeabi_dcmplt+0xe>
100405a2:	2000      	movs	r0, #0
100405a4:	bd10      	pop	{r4, pc}
100405a6:	2001      	movs	r0, #1
100405a8:	bd10      	pop	{r4, pc}
100405aa:	46c0      	nop			@ (mov r8, r8)

100405ac <__aeabi_dcmple>:
100405ac:	b510      	push	{r4, lr}
100405ae:	f001 f953 	bl	10041858 <__ledf2>
100405b2:	2800      	cmp	r0, #0
100405b4:	dd01      	ble.n	100405ba <__aeabi_dcmple+0xe>
100405b6:	2000      	movs	r0, #0
100405b8:	bd10      	pop	{r4, pc}
100405ba:	2001      	movs	r0, #1
100405bc:	bd10      	pop	{r4, pc}
100405be:	46c0      	nop			@ (mov r8, r8)

100405c0 <__aeabi_dcmpgt>:
100405c0:	b510      	push	{r4, lr}
100405c2:	f001 f8d9 	bl	10041778 <__gedf2>
100405c6:	2800      	cmp	r0, #0
100405c8:	dc01      	bgt.n	100405ce <__aeabi_dcmpgt+0xe>
100405ca:	2000      	movs	r0, #0
100405cc:	bd10      	pop	{r4, pc}
100405ce:	2001      	movs	r0, #1
100405d0:	bd10      	pop	{r4, pc}
100405d2:	46c0      	nop			@ (mov r8, r8)

100405d4 <__aeabi_dcmpge>:
100405d4:	b510      	push	{r4, lr}
100405d6:	f001 f8cf 	bl	10041778 <__gedf2>
100405da:	2800      	cmp	r0, #0
100405dc:	da01      	bge.n	100405e2 <__aeabi_dcmpge+0xe>
100405de:	2000      	movs	r0, #0
100405e0:	bd10      	pop	{r4, pc}
100405e2:	2001      	movs	r0, #1
100405e4:	bd10      	pop	{r4, pc}
100405e6:	46c0      	nop			@ (mov r8, r8)

100405e8 <__clzsi2>:
100405e8:	211c      	movs	r1, #28
100405ea:	2301      	movs	r3, #1
100405ec:	041b      	lsls	r3, r3, #16
100405ee:	4298      	cmp	r0, r3
100405f0:	d301      	bcc.n	100405f6 <__clzsi2+0xe>
100405f2:	0c00      	lsrs	r0, r0, #16
100405f4:	3910      	subs	r1, #16
100405f6:	0a1b      	lsrs	r3, r3, #8
100405f8:	4298      	cmp	r0, r3
100405fa:	d301      	bcc.n	10040600 <__clzsi2+0x18>
100405fc:	0a00      	lsrs	r0, r0, #8
100405fe:	3908      	subs	r1, #8
10040600:	091b      	lsrs	r3, r3, #4
10040602:	4298      	cmp	r0, r3
10040604:	d301      	bcc.n	1004060a <__clzsi2+0x22>
10040606:	0900      	lsrs	r0, r0, #4
10040608:	3904      	subs	r1, #4
1004060a:	a202      	add	r2, pc, #8	@ (adr r2, 10040614 <__clzsi2+0x2c>)
1004060c:	5c10      	ldrb	r0, [r2, r0]
1004060e:	1840      	adds	r0, r0, r1
10040610:	4770      	bx	lr
10040612:	46c0      	nop			@ (mov r8, r8)
10040614:	02020304 	.word	0x02020304
10040618:	01010101 	.word	0x01010101
	...

10040624 <__aeabi_uldivmod>:
10040624:	2b00      	cmp	r3, #0
10040626:	d111      	bne.n	1004064c <__aeabi_uldivmod+0x28>
10040628:	2a00      	cmp	r2, #0
1004062a:	d10f      	bne.n	1004064c <__aeabi_uldivmod+0x28>
1004062c:	2900      	cmp	r1, #0
1004062e:	d100      	bne.n	10040632 <__aeabi_uldivmod+0xe>
10040630:	2800      	cmp	r0, #0
10040632:	d002      	beq.n	1004063a <__aeabi_uldivmod+0x16>
10040634:	2100      	movs	r1, #0
10040636:	43c9      	mvns	r1, r1
10040638:	0008      	movs	r0, r1
1004063a:	b407      	push	{r0, r1, r2}
1004063c:	4802      	ldr	r0, [pc, #8]	@ (10040648 <__aeabi_uldivmod+0x24>)
1004063e:	a102      	add	r1, pc, #8	@ (adr r1, 10040648 <__aeabi_uldivmod+0x24>)
10040640:	1840      	adds	r0, r0, r1
10040642:	9002      	str	r0, [sp, #8]
10040644:	bd03      	pop	{r0, r1, pc}
10040646:	46c0      	nop			@ (mov r8, r8)
10040648:	ffffff09 	.word	0xffffff09
1004064c:	b403      	push	{r0, r1}
1004064e:	4668      	mov	r0, sp
10040650:	b501      	push	{r0, lr}
10040652:	9802      	ldr	r0, [sp, #8]
10040654:	f000 f8a2 	bl	1004079c <__udivmoddi4>
10040658:	9b01      	ldr	r3, [sp, #4]
1004065a:	469e      	mov	lr, r3
1004065c:	b002      	add	sp, #8
1004065e:	bc0c      	pop	{r2, r3}
10040660:	4770      	bx	lr
10040662:	46c0      	nop			@ (mov r8, r8)

10040664 <__aeabi_lmul>:
10040664:	b5f0      	push	{r4, r5, r6, r7, lr}
10040666:	46ce      	mov	lr, r9
10040668:	4699      	mov	r9, r3
1004066a:	0c03      	lsrs	r3, r0, #16
1004066c:	469c      	mov	ip, r3
1004066e:	0413      	lsls	r3, r2, #16
10040670:	4647      	mov	r7, r8
10040672:	0c1b      	lsrs	r3, r3, #16
10040674:	001d      	movs	r5, r3
10040676:	000e      	movs	r6, r1
10040678:	4661      	mov	r1, ip
1004067a:	0404      	lsls	r4, r0, #16
1004067c:	0c24      	lsrs	r4, r4, #16
1004067e:	b580      	push	{r7, lr}
10040680:	0007      	movs	r7, r0
10040682:	0c10      	lsrs	r0, r2, #16
10040684:	434b      	muls	r3, r1
10040686:	4365      	muls	r5, r4
10040688:	4341      	muls	r1, r0
1004068a:	4360      	muls	r0, r4
1004068c:	0c2c      	lsrs	r4, r5, #16
1004068e:	18c0      	adds	r0, r0, r3
10040690:	1824      	adds	r4, r4, r0
10040692:	468c      	mov	ip, r1
10040694:	42a3      	cmp	r3, r4
10040696:	d903      	bls.n	100406a0 <__aeabi_lmul+0x3c>
10040698:	2380      	movs	r3, #128	@ 0x80
1004069a:	025b      	lsls	r3, r3, #9
1004069c:	4698      	mov	r8, r3
1004069e:	44c4      	add	ip, r8
100406a0:	4649      	mov	r1, r9
100406a2:	4379      	muls	r1, r7
100406a4:	4356      	muls	r6, r2
100406a6:	0c23      	lsrs	r3, r4, #16
100406a8:	042d      	lsls	r5, r5, #16
100406aa:	0c2d      	lsrs	r5, r5, #16
100406ac:	1989      	adds	r1, r1, r6
100406ae:	4463      	add	r3, ip
100406b0:	0424      	lsls	r4, r4, #16
100406b2:	1960      	adds	r0, r4, r5
100406b4:	18c9      	adds	r1, r1, r3
100406b6:	bcc0      	pop	{r6, r7}
100406b8:	46b9      	mov	r9, r7
100406ba:	46b0      	mov	r8, r6
100406bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100406be:	46c0      	nop			@ (mov r8, r8)

100406c0 <__aeabi_d2uiz>:
100406c0:	b570      	push	{r4, r5, r6, lr}
100406c2:	2200      	movs	r2, #0
100406c4:	4b0c      	ldr	r3, [pc, #48]	@ (100406f8 <__aeabi_d2uiz+0x38>)
100406c6:	0004      	movs	r4, r0
100406c8:	000d      	movs	r5, r1
100406ca:	f7ff ff83 	bl	100405d4 <__aeabi_dcmpge>
100406ce:	2800      	cmp	r0, #0
100406d0:	d104      	bne.n	100406dc <__aeabi_d2uiz+0x1c>
100406d2:	0020      	movs	r0, r4
100406d4:	0029      	movs	r1, r5
100406d6:	f002 f83f 	bl	10042758 <__aeabi_d2iz>
100406da:	bd70      	pop	{r4, r5, r6, pc}
100406dc:	4b06      	ldr	r3, [pc, #24]	@ (100406f8 <__aeabi_d2uiz+0x38>)
100406de:	2200      	movs	r2, #0
100406e0:	0020      	movs	r0, r4
100406e2:	0029      	movs	r1, r5
100406e4:	f001 fc0c 	bl	10041f00 <__aeabi_dsub>
100406e8:	f002 f836 	bl	10042758 <__aeabi_d2iz>
100406ec:	2380      	movs	r3, #128	@ 0x80
100406ee:	061b      	lsls	r3, r3, #24
100406f0:	469c      	mov	ip, r3
100406f2:	4460      	add	r0, ip
100406f4:	e7f1      	b.n	100406da <__aeabi_d2uiz+0x1a>
100406f6:	46c0      	nop			@ (mov r8, r8)
100406f8:	41e00000 	.word	0x41e00000

100406fc <__aeabi_d2lz>:
100406fc:	b570      	push	{r4, r5, r6, lr}
100406fe:	2200      	movs	r2, #0
10040700:	2300      	movs	r3, #0
10040702:	0004      	movs	r4, r0
10040704:	000d      	movs	r5, r1
10040706:	f7ff ff47 	bl	10040598 <__aeabi_dcmplt>
1004070a:	2800      	cmp	r0, #0
1004070c:	d108      	bne.n	10040720 <__aeabi_d2lz+0x24>
1004070e:	0020      	movs	r0, r4
10040710:	0029      	movs	r1, r5
10040712:	f000 f80f 	bl	10040734 <__aeabi_d2ulz>
10040716:	0002      	movs	r2, r0
10040718:	000b      	movs	r3, r1
1004071a:	0010      	movs	r0, r2
1004071c:	0019      	movs	r1, r3
1004071e:	bd70      	pop	{r4, r5, r6, pc}
10040720:	2380      	movs	r3, #128	@ 0x80
10040722:	061b      	lsls	r3, r3, #24
10040724:	18e9      	adds	r1, r5, r3
10040726:	0020      	movs	r0, r4
10040728:	f000 f804 	bl	10040734 <__aeabi_d2ulz>
1004072c:	2300      	movs	r3, #0
1004072e:	4242      	negs	r2, r0
10040730:	418b      	sbcs	r3, r1
10040732:	e7f2      	b.n	1004071a <__aeabi_d2lz+0x1e>

10040734 <__aeabi_d2ulz>:
10040734:	b570      	push	{r4, r5, r6, lr}
10040736:	2200      	movs	r2, #0
10040738:	4b0b      	ldr	r3, [pc, #44]	@ (10040768 <__aeabi_d2ulz+0x34>)
1004073a:	000d      	movs	r5, r1
1004073c:	0004      	movs	r4, r0
1004073e:	f001 f8f9 	bl	10041934 <__aeabi_dmul>
10040742:	f7ff ffbd 	bl	100406c0 <__aeabi_d2uiz>
10040746:	0006      	movs	r6, r0
10040748:	f002 f870 	bl	1004282c <__aeabi_ui2d>
1004074c:	2200      	movs	r2, #0
1004074e:	4b07      	ldr	r3, [pc, #28]	@ (1004076c <__aeabi_d2ulz+0x38>)
10040750:	f001 f8f0 	bl	10041934 <__aeabi_dmul>
10040754:	0002      	movs	r2, r0
10040756:	000b      	movs	r3, r1
10040758:	0020      	movs	r0, r4
1004075a:	0029      	movs	r1, r5
1004075c:	f001 fbd0 	bl	10041f00 <__aeabi_dsub>
10040760:	f7ff ffae 	bl	100406c0 <__aeabi_d2uiz>
10040764:	0031      	movs	r1, r6
10040766:	bd70      	pop	{r4, r5, r6, pc}
10040768:	3df00000 	.word	0x3df00000
1004076c:	41f00000 	.word	0x41f00000

10040770 <__aeabi_l2d>:
10040770:	b570      	push	{r4, r5, r6, lr}
10040772:	0006      	movs	r6, r0
10040774:	0008      	movs	r0, r1
10040776:	f002 f82b 	bl	100427d0 <__aeabi_i2d>
1004077a:	2200      	movs	r2, #0
1004077c:	4b06      	ldr	r3, [pc, #24]	@ (10040798 <__aeabi_l2d+0x28>)
1004077e:	f001 f8d9 	bl	10041934 <__aeabi_dmul>
10040782:	000d      	movs	r5, r1
10040784:	0004      	movs	r4, r0
10040786:	0030      	movs	r0, r6
10040788:	f002 f850 	bl	1004282c <__aeabi_ui2d>
1004078c:	002b      	movs	r3, r5
1004078e:	0022      	movs	r2, r4
10040790:	f000 f8d0 	bl	10040934 <__aeabi_dadd>
10040794:	bd70      	pop	{r4, r5, r6, pc}
10040796:	46c0      	nop			@ (mov r8, r8)
10040798:	41f00000 	.word	0x41f00000

1004079c <__udivmoddi4>:
1004079c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004079e:	4657      	mov	r7, sl
100407a0:	464e      	mov	r6, r9
100407a2:	4645      	mov	r5, r8
100407a4:	46de      	mov	lr, fp
100407a6:	b5e0      	push	{r5, r6, r7, lr}
100407a8:	0004      	movs	r4, r0
100407aa:	000d      	movs	r5, r1
100407ac:	4692      	mov	sl, r2
100407ae:	4699      	mov	r9, r3
100407b0:	b083      	sub	sp, #12
100407b2:	428b      	cmp	r3, r1
100407b4:	d830      	bhi.n	10040818 <__udivmoddi4+0x7c>
100407b6:	d02d      	beq.n	10040814 <__udivmoddi4+0x78>
100407b8:	4649      	mov	r1, r9
100407ba:	4650      	mov	r0, sl
100407bc:	f002 f8dc 	bl	10042978 <__clzdi2>
100407c0:	0029      	movs	r1, r5
100407c2:	0006      	movs	r6, r0
100407c4:	0020      	movs	r0, r4
100407c6:	f002 f8d7 	bl	10042978 <__clzdi2>
100407ca:	1a33      	subs	r3, r6, r0
100407cc:	4698      	mov	r8, r3
100407ce:	3b20      	subs	r3, #32
100407d0:	d434      	bmi.n	1004083c <__udivmoddi4+0xa0>
100407d2:	469b      	mov	fp, r3
100407d4:	4653      	mov	r3, sl
100407d6:	465a      	mov	r2, fp
100407d8:	4093      	lsls	r3, r2
100407da:	4642      	mov	r2, r8
100407dc:	001f      	movs	r7, r3
100407de:	4653      	mov	r3, sl
100407e0:	4093      	lsls	r3, r2
100407e2:	001e      	movs	r6, r3
100407e4:	42af      	cmp	r7, r5
100407e6:	d83b      	bhi.n	10040860 <__udivmoddi4+0xc4>
100407e8:	42af      	cmp	r7, r5
100407ea:	d100      	bne.n	100407ee <__udivmoddi4+0x52>
100407ec:	e079      	b.n	100408e2 <__udivmoddi4+0x146>
100407ee:	465b      	mov	r3, fp
100407f0:	1ba4      	subs	r4, r4, r6
100407f2:	41bd      	sbcs	r5, r7
100407f4:	2b00      	cmp	r3, #0
100407f6:	da00      	bge.n	100407fa <__udivmoddi4+0x5e>
100407f8:	e076      	b.n	100408e8 <__udivmoddi4+0x14c>
100407fa:	2200      	movs	r2, #0
100407fc:	2300      	movs	r3, #0
100407fe:	9200      	str	r2, [sp, #0]
10040800:	9301      	str	r3, [sp, #4]
10040802:	2301      	movs	r3, #1
10040804:	465a      	mov	r2, fp
10040806:	4093      	lsls	r3, r2
10040808:	9301      	str	r3, [sp, #4]
1004080a:	2301      	movs	r3, #1
1004080c:	4642      	mov	r2, r8
1004080e:	4093      	lsls	r3, r2
10040810:	9300      	str	r3, [sp, #0]
10040812:	e029      	b.n	10040868 <__udivmoddi4+0xcc>
10040814:	4282      	cmp	r2, r0
10040816:	d9cf      	bls.n	100407b8 <__udivmoddi4+0x1c>
10040818:	2200      	movs	r2, #0
1004081a:	2300      	movs	r3, #0
1004081c:	9200      	str	r2, [sp, #0]
1004081e:	9301      	str	r3, [sp, #4]
10040820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10040822:	2b00      	cmp	r3, #0
10040824:	d001      	beq.n	1004082a <__udivmoddi4+0x8e>
10040826:	601c      	str	r4, [r3, #0]
10040828:	605d      	str	r5, [r3, #4]
1004082a:	9800      	ldr	r0, [sp, #0]
1004082c:	9901      	ldr	r1, [sp, #4]
1004082e:	b003      	add	sp, #12
10040830:	bcf0      	pop	{r4, r5, r6, r7}
10040832:	46bb      	mov	fp, r7
10040834:	46b2      	mov	sl, r6
10040836:	46a9      	mov	r9, r5
10040838:	46a0      	mov	r8, r4
1004083a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004083c:	4642      	mov	r2, r8
1004083e:	469b      	mov	fp, r3
10040840:	2320      	movs	r3, #32
10040842:	1a9b      	subs	r3, r3, r2
10040844:	4652      	mov	r2, sl
10040846:	40da      	lsrs	r2, r3
10040848:	4641      	mov	r1, r8
1004084a:	0013      	movs	r3, r2
1004084c:	464a      	mov	r2, r9
1004084e:	408a      	lsls	r2, r1
10040850:	0017      	movs	r7, r2
10040852:	4642      	mov	r2, r8
10040854:	431f      	orrs	r7, r3
10040856:	4653      	mov	r3, sl
10040858:	4093      	lsls	r3, r2
1004085a:	001e      	movs	r6, r3
1004085c:	42af      	cmp	r7, r5
1004085e:	d9c3      	bls.n	100407e8 <__udivmoddi4+0x4c>
10040860:	2200      	movs	r2, #0
10040862:	2300      	movs	r3, #0
10040864:	9200      	str	r2, [sp, #0]
10040866:	9301      	str	r3, [sp, #4]
10040868:	4643      	mov	r3, r8
1004086a:	2b00      	cmp	r3, #0
1004086c:	d0d8      	beq.n	10040820 <__udivmoddi4+0x84>
1004086e:	07fb      	lsls	r3, r7, #31
10040870:	0872      	lsrs	r2, r6, #1
10040872:	431a      	orrs	r2, r3
10040874:	4646      	mov	r6, r8
10040876:	087b      	lsrs	r3, r7, #1
10040878:	e00e      	b.n	10040898 <__udivmoddi4+0xfc>
1004087a:	42ab      	cmp	r3, r5
1004087c:	d101      	bne.n	10040882 <__udivmoddi4+0xe6>
1004087e:	42a2      	cmp	r2, r4
10040880:	d80c      	bhi.n	1004089c <__udivmoddi4+0x100>
10040882:	1aa4      	subs	r4, r4, r2
10040884:	419d      	sbcs	r5, r3
10040886:	2001      	movs	r0, #1
10040888:	1924      	adds	r4, r4, r4
1004088a:	416d      	adcs	r5, r5
1004088c:	2100      	movs	r1, #0
1004088e:	3e01      	subs	r6, #1
10040890:	1824      	adds	r4, r4, r0
10040892:	414d      	adcs	r5, r1
10040894:	2e00      	cmp	r6, #0
10040896:	d006      	beq.n	100408a6 <__udivmoddi4+0x10a>
10040898:	42ab      	cmp	r3, r5
1004089a:	d9ee      	bls.n	1004087a <__udivmoddi4+0xde>
1004089c:	3e01      	subs	r6, #1
1004089e:	1924      	adds	r4, r4, r4
100408a0:	416d      	adcs	r5, r5
100408a2:	2e00      	cmp	r6, #0
100408a4:	d1f8      	bne.n	10040898 <__udivmoddi4+0xfc>
100408a6:	9800      	ldr	r0, [sp, #0]
100408a8:	9901      	ldr	r1, [sp, #4]
100408aa:	465b      	mov	r3, fp
100408ac:	1900      	adds	r0, r0, r4
100408ae:	4169      	adcs	r1, r5
100408b0:	2b00      	cmp	r3, #0
100408b2:	db24      	blt.n	100408fe <__udivmoddi4+0x162>
100408b4:	002b      	movs	r3, r5
100408b6:	465a      	mov	r2, fp
100408b8:	4644      	mov	r4, r8
100408ba:	40d3      	lsrs	r3, r2
100408bc:	002a      	movs	r2, r5
100408be:	40e2      	lsrs	r2, r4
100408c0:	001c      	movs	r4, r3
100408c2:	465b      	mov	r3, fp
100408c4:	0015      	movs	r5, r2
100408c6:	2b00      	cmp	r3, #0
100408c8:	db2a      	blt.n	10040920 <__udivmoddi4+0x184>
100408ca:	0026      	movs	r6, r4
100408cc:	409e      	lsls	r6, r3
100408ce:	0033      	movs	r3, r6
100408d0:	0026      	movs	r6, r4
100408d2:	4647      	mov	r7, r8
100408d4:	40be      	lsls	r6, r7
100408d6:	0032      	movs	r2, r6
100408d8:	1a80      	subs	r0, r0, r2
100408da:	4199      	sbcs	r1, r3
100408dc:	9000      	str	r0, [sp, #0]
100408de:	9101      	str	r1, [sp, #4]
100408e0:	e79e      	b.n	10040820 <__udivmoddi4+0x84>
100408e2:	42a3      	cmp	r3, r4
100408e4:	d8bc      	bhi.n	10040860 <__udivmoddi4+0xc4>
100408e6:	e782      	b.n	100407ee <__udivmoddi4+0x52>
100408e8:	4642      	mov	r2, r8
100408ea:	2320      	movs	r3, #32
100408ec:	2100      	movs	r1, #0
100408ee:	1a9b      	subs	r3, r3, r2
100408f0:	2200      	movs	r2, #0
100408f2:	9100      	str	r1, [sp, #0]
100408f4:	9201      	str	r2, [sp, #4]
100408f6:	2201      	movs	r2, #1
100408f8:	40da      	lsrs	r2, r3
100408fa:	9201      	str	r2, [sp, #4]
100408fc:	e785      	b.n	1004080a <__udivmoddi4+0x6e>
100408fe:	4642      	mov	r2, r8
10040900:	2320      	movs	r3, #32
10040902:	1a9b      	subs	r3, r3, r2
10040904:	002a      	movs	r2, r5
10040906:	4646      	mov	r6, r8
10040908:	409a      	lsls	r2, r3
1004090a:	0023      	movs	r3, r4
1004090c:	40f3      	lsrs	r3, r6
1004090e:	4644      	mov	r4, r8
10040910:	4313      	orrs	r3, r2
10040912:	002a      	movs	r2, r5
10040914:	40e2      	lsrs	r2, r4
10040916:	001c      	movs	r4, r3
10040918:	465b      	mov	r3, fp
1004091a:	0015      	movs	r5, r2
1004091c:	2b00      	cmp	r3, #0
1004091e:	dad4      	bge.n	100408ca <__udivmoddi4+0x12e>
10040920:	4642      	mov	r2, r8
10040922:	002f      	movs	r7, r5
10040924:	2320      	movs	r3, #32
10040926:	0026      	movs	r6, r4
10040928:	4097      	lsls	r7, r2
1004092a:	1a9b      	subs	r3, r3, r2
1004092c:	40de      	lsrs	r6, r3
1004092e:	003b      	movs	r3, r7
10040930:	4333      	orrs	r3, r6
10040932:	e7cd      	b.n	100408d0 <__udivmoddi4+0x134>

10040934 <__aeabi_dadd>:
10040934:	b5f0      	push	{r4, r5, r6, r7, lr}
10040936:	464f      	mov	r7, r9
10040938:	4646      	mov	r6, r8
1004093a:	46d6      	mov	lr, sl
1004093c:	b5c0      	push	{r6, r7, lr}
1004093e:	b082      	sub	sp, #8
10040940:	9000      	str	r0, [sp, #0]
10040942:	9101      	str	r1, [sp, #4]
10040944:	030e      	lsls	r6, r1, #12
10040946:	004c      	lsls	r4, r1, #1
10040948:	0fcd      	lsrs	r5, r1, #31
1004094a:	0a71      	lsrs	r1, r6, #9
1004094c:	9e00      	ldr	r6, [sp, #0]
1004094e:	005f      	lsls	r7, r3, #1
10040950:	0f76      	lsrs	r6, r6, #29
10040952:	430e      	orrs	r6, r1
10040954:	9900      	ldr	r1, [sp, #0]
10040956:	9200      	str	r2, [sp, #0]
10040958:	9301      	str	r3, [sp, #4]
1004095a:	00c9      	lsls	r1, r1, #3
1004095c:	4689      	mov	r9, r1
1004095e:	0319      	lsls	r1, r3, #12
10040960:	0d7b      	lsrs	r3, r7, #21
10040962:	4698      	mov	r8, r3
10040964:	9b01      	ldr	r3, [sp, #4]
10040966:	0a49      	lsrs	r1, r1, #9
10040968:	0fdb      	lsrs	r3, r3, #31
1004096a:	469c      	mov	ip, r3
1004096c:	9b00      	ldr	r3, [sp, #0]
1004096e:	9a00      	ldr	r2, [sp, #0]
10040970:	0f5b      	lsrs	r3, r3, #29
10040972:	430b      	orrs	r3, r1
10040974:	4641      	mov	r1, r8
10040976:	0d64      	lsrs	r4, r4, #21
10040978:	00d2      	lsls	r2, r2, #3
1004097a:	1a61      	subs	r1, r4, r1
1004097c:	4565      	cmp	r5, ip
1004097e:	d100      	bne.n	10040982 <__aeabi_dadd+0x4e>
10040980:	e0a6      	b.n	10040ad0 <__aeabi_dadd+0x19c>
10040982:	2900      	cmp	r1, #0
10040984:	dd72      	ble.n	10040a6c <__aeabi_dadd+0x138>
10040986:	4647      	mov	r7, r8
10040988:	2f00      	cmp	r7, #0
1004098a:	d100      	bne.n	1004098e <__aeabi_dadd+0x5a>
1004098c:	e0dd      	b.n	10040b4a <__aeabi_dadd+0x216>
1004098e:	4fcc      	ldr	r7, [pc, #816]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040990:	42bc      	cmp	r4, r7
10040992:	d100      	bne.n	10040996 <__aeabi_dadd+0x62>
10040994:	e19a      	b.n	10040ccc <__aeabi_dadd+0x398>
10040996:	2701      	movs	r7, #1
10040998:	2938      	cmp	r1, #56	@ 0x38
1004099a:	dc17      	bgt.n	100409cc <__aeabi_dadd+0x98>
1004099c:	2780      	movs	r7, #128	@ 0x80
1004099e:	043f      	lsls	r7, r7, #16
100409a0:	433b      	orrs	r3, r7
100409a2:	291f      	cmp	r1, #31
100409a4:	dd00      	ble.n	100409a8 <__aeabi_dadd+0x74>
100409a6:	e1dd      	b.n	10040d64 <__aeabi_dadd+0x430>
100409a8:	2720      	movs	r7, #32
100409aa:	1a78      	subs	r0, r7, r1
100409ac:	001f      	movs	r7, r3
100409ae:	4087      	lsls	r7, r0
100409b0:	46ba      	mov	sl, r7
100409b2:	0017      	movs	r7, r2
100409b4:	40cf      	lsrs	r7, r1
100409b6:	4684      	mov	ip, r0
100409b8:	0038      	movs	r0, r7
100409ba:	4657      	mov	r7, sl
100409bc:	4307      	orrs	r7, r0
100409be:	4660      	mov	r0, ip
100409c0:	4082      	lsls	r2, r0
100409c2:	40cb      	lsrs	r3, r1
100409c4:	1e50      	subs	r0, r2, #1
100409c6:	4182      	sbcs	r2, r0
100409c8:	1af6      	subs	r6, r6, r3
100409ca:	4317      	orrs	r7, r2
100409cc:	464b      	mov	r3, r9
100409ce:	1bdf      	subs	r7, r3, r7
100409d0:	45b9      	cmp	r9, r7
100409d2:	4180      	sbcs	r0, r0
100409d4:	4240      	negs	r0, r0
100409d6:	1a36      	subs	r6, r6, r0
100409d8:	0233      	lsls	r3, r6, #8
100409da:	d400      	bmi.n	100409de <__aeabi_dadd+0xaa>
100409dc:	e0ff      	b.n	10040bde <__aeabi_dadd+0x2aa>
100409de:	0276      	lsls	r6, r6, #9
100409e0:	0a76      	lsrs	r6, r6, #9
100409e2:	2e00      	cmp	r6, #0
100409e4:	d100      	bne.n	100409e8 <__aeabi_dadd+0xb4>
100409e6:	e13c      	b.n	10040c62 <__aeabi_dadd+0x32e>
100409e8:	0030      	movs	r0, r6
100409ea:	f7ff fdfd 	bl	100405e8 <__clzsi2>
100409ee:	0003      	movs	r3, r0
100409f0:	3b08      	subs	r3, #8
100409f2:	2120      	movs	r1, #32
100409f4:	0038      	movs	r0, r7
100409f6:	1aca      	subs	r2, r1, r3
100409f8:	40d0      	lsrs	r0, r2
100409fa:	409e      	lsls	r6, r3
100409fc:	0002      	movs	r2, r0
100409fe:	409f      	lsls	r7, r3
10040a00:	4332      	orrs	r2, r6
10040a02:	429c      	cmp	r4, r3
10040a04:	dd00      	ble.n	10040a08 <__aeabi_dadd+0xd4>
10040a06:	e1a6      	b.n	10040d56 <__aeabi_dadd+0x422>
10040a08:	1b18      	subs	r0, r3, r4
10040a0a:	3001      	adds	r0, #1
10040a0c:	1a09      	subs	r1, r1, r0
10040a0e:	003e      	movs	r6, r7
10040a10:	408f      	lsls	r7, r1
10040a12:	40c6      	lsrs	r6, r0
10040a14:	1e7b      	subs	r3, r7, #1
10040a16:	419f      	sbcs	r7, r3
10040a18:	0013      	movs	r3, r2
10040a1a:	408b      	lsls	r3, r1
10040a1c:	4337      	orrs	r7, r6
10040a1e:	431f      	orrs	r7, r3
10040a20:	40c2      	lsrs	r2, r0
10040a22:	003b      	movs	r3, r7
10040a24:	0016      	movs	r6, r2
10040a26:	2400      	movs	r4, #0
10040a28:	4313      	orrs	r3, r2
10040a2a:	d100      	bne.n	10040a2e <__aeabi_dadd+0xfa>
10040a2c:	e1df      	b.n	10040dee <__aeabi_dadd+0x4ba>
10040a2e:	077b      	lsls	r3, r7, #29
10040a30:	d100      	bne.n	10040a34 <__aeabi_dadd+0x100>
10040a32:	e332      	b.n	1004109a <__aeabi_dadd+0x766>
10040a34:	230f      	movs	r3, #15
10040a36:	003a      	movs	r2, r7
10040a38:	403b      	ands	r3, r7
10040a3a:	2b04      	cmp	r3, #4
10040a3c:	d004      	beq.n	10040a48 <__aeabi_dadd+0x114>
10040a3e:	1d3a      	adds	r2, r7, #4
10040a40:	42ba      	cmp	r2, r7
10040a42:	41bf      	sbcs	r7, r7
10040a44:	427f      	negs	r7, r7
10040a46:	19f6      	adds	r6, r6, r7
10040a48:	0233      	lsls	r3, r6, #8
10040a4a:	d400      	bmi.n	10040a4e <__aeabi_dadd+0x11a>
10040a4c:	e323      	b.n	10041096 <__aeabi_dadd+0x762>
10040a4e:	4b9c      	ldr	r3, [pc, #624]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040a50:	3401      	adds	r4, #1
10040a52:	429c      	cmp	r4, r3
10040a54:	d100      	bne.n	10040a58 <__aeabi_dadd+0x124>
10040a56:	e0b4      	b.n	10040bc2 <__aeabi_dadd+0x28e>
10040a58:	4b9a      	ldr	r3, [pc, #616]	@ (10040cc4 <__aeabi_dadd+0x390>)
10040a5a:	0564      	lsls	r4, r4, #21
10040a5c:	401e      	ands	r6, r3
10040a5e:	0d64      	lsrs	r4, r4, #21
10040a60:	0777      	lsls	r7, r6, #29
10040a62:	08d2      	lsrs	r2, r2, #3
10040a64:	0276      	lsls	r6, r6, #9
10040a66:	4317      	orrs	r7, r2
10040a68:	0b36      	lsrs	r6, r6, #12
10040a6a:	e0ac      	b.n	10040bc6 <__aeabi_dadd+0x292>
10040a6c:	2900      	cmp	r1, #0
10040a6e:	d100      	bne.n	10040a72 <__aeabi_dadd+0x13e>
10040a70:	e07e      	b.n	10040b70 <__aeabi_dadd+0x23c>
10040a72:	4641      	mov	r1, r8
10040a74:	1b09      	subs	r1, r1, r4
10040a76:	2c00      	cmp	r4, #0
10040a78:	d000      	beq.n	10040a7c <__aeabi_dadd+0x148>
10040a7a:	e160      	b.n	10040d3e <__aeabi_dadd+0x40a>
10040a7c:	0034      	movs	r4, r6
10040a7e:	4648      	mov	r0, r9
10040a80:	4304      	orrs	r4, r0
10040a82:	d100      	bne.n	10040a86 <__aeabi_dadd+0x152>
10040a84:	e1c9      	b.n	10040e1a <__aeabi_dadd+0x4e6>
10040a86:	1e4c      	subs	r4, r1, #1
10040a88:	2901      	cmp	r1, #1
10040a8a:	d100      	bne.n	10040a8e <__aeabi_dadd+0x15a>
10040a8c:	e22e      	b.n	10040eec <__aeabi_dadd+0x5b8>
10040a8e:	4d8c      	ldr	r5, [pc, #560]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040a90:	42a9      	cmp	r1, r5
10040a92:	d100      	bne.n	10040a96 <__aeabi_dadd+0x162>
10040a94:	e224      	b.n	10040ee0 <__aeabi_dadd+0x5ac>
10040a96:	2701      	movs	r7, #1
10040a98:	2c38      	cmp	r4, #56	@ 0x38
10040a9a:	dc11      	bgt.n	10040ac0 <__aeabi_dadd+0x18c>
10040a9c:	0021      	movs	r1, r4
10040a9e:	291f      	cmp	r1, #31
10040aa0:	dd00      	ble.n	10040aa4 <__aeabi_dadd+0x170>
10040aa2:	e20b      	b.n	10040ebc <__aeabi_dadd+0x588>
10040aa4:	2420      	movs	r4, #32
10040aa6:	0037      	movs	r7, r6
10040aa8:	4648      	mov	r0, r9
10040aaa:	1a64      	subs	r4, r4, r1
10040aac:	40a7      	lsls	r7, r4
10040aae:	40c8      	lsrs	r0, r1
10040ab0:	4307      	orrs	r7, r0
10040ab2:	4648      	mov	r0, r9
10040ab4:	40a0      	lsls	r0, r4
10040ab6:	40ce      	lsrs	r6, r1
10040ab8:	1e44      	subs	r4, r0, #1
10040aba:	41a0      	sbcs	r0, r4
10040abc:	1b9b      	subs	r3, r3, r6
10040abe:	4307      	orrs	r7, r0
10040ac0:	1bd7      	subs	r7, r2, r7
10040ac2:	42ba      	cmp	r2, r7
10040ac4:	4192      	sbcs	r2, r2
10040ac6:	4252      	negs	r2, r2
10040ac8:	4665      	mov	r5, ip
10040aca:	4644      	mov	r4, r8
10040acc:	1a9e      	subs	r6, r3, r2
10040ace:	e783      	b.n	100409d8 <__aeabi_dadd+0xa4>
10040ad0:	2900      	cmp	r1, #0
10040ad2:	dc00      	bgt.n	10040ad6 <__aeabi_dadd+0x1a2>
10040ad4:	e09c      	b.n	10040c10 <__aeabi_dadd+0x2dc>
10040ad6:	4647      	mov	r7, r8
10040ad8:	2f00      	cmp	r7, #0
10040ada:	d167      	bne.n	10040bac <__aeabi_dadd+0x278>
10040adc:	001f      	movs	r7, r3
10040ade:	4317      	orrs	r7, r2
10040ae0:	d100      	bne.n	10040ae4 <__aeabi_dadd+0x1b0>
10040ae2:	e0e4      	b.n	10040cae <__aeabi_dadd+0x37a>
10040ae4:	1e48      	subs	r0, r1, #1
10040ae6:	2901      	cmp	r1, #1
10040ae8:	d100      	bne.n	10040aec <__aeabi_dadd+0x1b8>
10040aea:	e19b      	b.n	10040e24 <__aeabi_dadd+0x4f0>
10040aec:	4f74      	ldr	r7, [pc, #464]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040aee:	42b9      	cmp	r1, r7
10040af0:	d100      	bne.n	10040af4 <__aeabi_dadd+0x1c0>
10040af2:	e0eb      	b.n	10040ccc <__aeabi_dadd+0x398>
10040af4:	2701      	movs	r7, #1
10040af6:	0001      	movs	r1, r0
10040af8:	2838      	cmp	r0, #56	@ 0x38
10040afa:	dc11      	bgt.n	10040b20 <__aeabi_dadd+0x1ec>
10040afc:	291f      	cmp	r1, #31
10040afe:	dd00      	ble.n	10040b02 <__aeabi_dadd+0x1ce>
10040b00:	e1c7      	b.n	10040e92 <__aeabi_dadd+0x55e>
10040b02:	2720      	movs	r7, #32
10040b04:	1a78      	subs	r0, r7, r1
10040b06:	001f      	movs	r7, r3
10040b08:	4684      	mov	ip, r0
10040b0a:	4087      	lsls	r7, r0
10040b0c:	0010      	movs	r0, r2
10040b0e:	40c8      	lsrs	r0, r1
10040b10:	4307      	orrs	r7, r0
10040b12:	4660      	mov	r0, ip
10040b14:	4082      	lsls	r2, r0
10040b16:	40cb      	lsrs	r3, r1
10040b18:	1e50      	subs	r0, r2, #1
10040b1a:	4182      	sbcs	r2, r0
10040b1c:	18f6      	adds	r6, r6, r3
10040b1e:	4317      	orrs	r7, r2
10040b20:	444f      	add	r7, r9
10040b22:	454f      	cmp	r7, r9
10040b24:	4180      	sbcs	r0, r0
10040b26:	4240      	negs	r0, r0
10040b28:	1836      	adds	r6, r6, r0
10040b2a:	0233      	lsls	r3, r6, #8
10040b2c:	d557      	bpl.n	10040bde <__aeabi_dadd+0x2aa>
10040b2e:	4b64      	ldr	r3, [pc, #400]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040b30:	3401      	adds	r4, #1
10040b32:	429c      	cmp	r4, r3
10040b34:	d045      	beq.n	10040bc2 <__aeabi_dadd+0x28e>
10040b36:	2101      	movs	r1, #1
10040b38:	4b62      	ldr	r3, [pc, #392]	@ (10040cc4 <__aeabi_dadd+0x390>)
10040b3a:	087a      	lsrs	r2, r7, #1
10040b3c:	401e      	ands	r6, r3
10040b3e:	4039      	ands	r1, r7
10040b40:	430a      	orrs	r2, r1
10040b42:	07f7      	lsls	r7, r6, #31
10040b44:	4317      	orrs	r7, r2
10040b46:	0876      	lsrs	r6, r6, #1
10040b48:	e771      	b.n	10040a2e <__aeabi_dadd+0xfa>
10040b4a:	001f      	movs	r7, r3
10040b4c:	4317      	orrs	r7, r2
10040b4e:	d100      	bne.n	10040b52 <__aeabi_dadd+0x21e>
10040b50:	e0ad      	b.n	10040cae <__aeabi_dadd+0x37a>
10040b52:	1e4f      	subs	r7, r1, #1
10040b54:	46bc      	mov	ip, r7
10040b56:	2901      	cmp	r1, #1
10040b58:	d100      	bne.n	10040b5c <__aeabi_dadd+0x228>
10040b5a:	e182      	b.n	10040e62 <__aeabi_dadd+0x52e>
10040b5c:	4f58      	ldr	r7, [pc, #352]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040b5e:	42b9      	cmp	r1, r7
10040b60:	d100      	bne.n	10040b64 <__aeabi_dadd+0x230>
10040b62:	e190      	b.n	10040e86 <__aeabi_dadd+0x552>
10040b64:	4661      	mov	r1, ip
10040b66:	2701      	movs	r7, #1
10040b68:	2938      	cmp	r1, #56	@ 0x38
10040b6a:	dd00      	ble.n	10040b6e <__aeabi_dadd+0x23a>
10040b6c:	e72e      	b.n	100409cc <__aeabi_dadd+0x98>
10040b6e:	e718      	b.n	100409a2 <__aeabi_dadd+0x6e>
10040b70:	4f55      	ldr	r7, [pc, #340]	@ (10040cc8 <__aeabi_dadd+0x394>)
10040b72:	1c61      	adds	r1, r4, #1
10040b74:	4239      	tst	r1, r7
10040b76:	d000      	beq.n	10040b7a <__aeabi_dadd+0x246>
10040b78:	e0d0      	b.n	10040d1c <__aeabi_dadd+0x3e8>
10040b7a:	0031      	movs	r1, r6
10040b7c:	4648      	mov	r0, r9
10040b7e:	001f      	movs	r7, r3
10040b80:	4301      	orrs	r1, r0
10040b82:	4317      	orrs	r7, r2
10040b84:	2c00      	cmp	r4, #0
10040b86:	d000      	beq.n	10040b8a <__aeabi_dadd+0x256>
10040b88:	e13d      	b.n	10040e06 <__aeabi_dadd+0x4d2>
10040b8a:	2900      	cmp	r1, #0
10040b8c:	d100      	bne.n	10040b90 <__aeabi_dadd+0x25c>
10040b8e:	e1bc      	b.n	10040f0a <__aeabi_dadd+0x5d6>
10040b90:	2f00      	cmp	r7, #0
10040b92:	d000      	beq.n	10040b96 <__aeabi_dadd+0x262>
10040b94:	e1bf      	b.n	10040f16 <__aeabi_dadd+0x5e2>
10040b96:	464b      	mov	r3, r9
10040b98:	2100      	movs	r1, #0
10040b9a:	08d8      	lsrs	r0, r3, #3
10040b9c:	0777      	lsls	r7, r6, #29
10040b9e:	4307      	orrs	r7, r0
10040ba0:	08f0      	lsrs	r0, r6, #3
10040ba2:	0306      	lsls	r6, r0, #12
10040ba4:	054c      	lsls	r4, r1, #21
10040ba6:	0b36      	lsrs	r6, r6, #12
10040ba8:	0d64      	lsrs	r4, r4, #21
10040baa:	e00c      	b.n	10040bc6 <__aeabi_dadd+0x292>
10040bac:	4f44      	ldr	r7, [pc, #272]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040bae:	42bc      	cmp	r4, r7
10040bb0:	d100      	bne.n	10040bb4 <__aeabi_dadd+0x280>
10040bb2:	e08b      	b.n	10040ccc <__aeabi_dadd+0x398>
10040bb4:	2701      	movs	r7, #1
10040bb6:	2938      	cmp	r1, #56	@ 0x38
10040bb8:	dcb2      	bgt.n	10040b20 <__aeabi_dadd+0x1ec>
10040bba:	2780      	movs	r7, #128	@ 0x80
10040bbc:	043f      	lsls	r7, r7, #16
10040bbe:	433b      	orrs	r3, r7
10040bc0:	e79c      	b.n	10040afc <__aeabi_dadd+0x1c8>
10040bc2:	2600      	movs	r6, #0
10040bc4:	2700      	movs	r7, #0
10040bc6:	0524      	lsls	r4, r4, #20
10040bc8:	4334      	orrs	r4, r6
10040bca:	07ed      	lsls	r5, r5, #31
10040bcc:	432c      	orrs	r4, r5
10040bce:	0038      	movs	r0, r7
10040bd0:	0021      	movs	r1, r4
10040bd2:	b002      	add	sp, #8
10040bd4:	bce0      	pop	{r5, r6, r7}
10040bd6:	46ba      	mov	sl, r7
10040bd8:	46b1      	mov	r9, r6
10040bda:	46a8      	mov	r8, r5
10040bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040bde:	077b      	lsls	r3, r7, #29
10040be0:	d004      	beq.n	10040bec <__aeabi_dadd+0x2b8>
10040be2:	230f      	movs	r3, #15
10040be4:	403b      	ands	r3, r7
10040be6:	2b04      	cmp	r3, #4
10040be8:	d000      	beq.n	10040bec <__aeabi_dadd+0x2b8>
10040bea:	e728      	b.n	10040a3e <__aeabi_dadd+0x10a>
10040bec:	08f8      	lsrs	r0, r7, #3
10040bee:	4b34      	ldr	r3, [pc, #208]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040bf0:	0777      	lsls	r7, r6, #29
10040bf2:	4307      	orrs	r7, r0
10040bf4:	08f0      	lsrs	r0, r6, #3
10040bf6:	429c      	cmp	r4, r3
10040bf8:	d000      	beq.n	10040bfc <__aeabi_dadd+0x2c8>
10040bfa:	e24a      	b.n	10041092 <__aeabi_dadd+0x75e>
10040bfc:	003b      	movs	r3, r7
10040bfe:	4303      	orrs	r3, r0
10040c00:	d059      	beq.n	10040cb6 <__aeabi_dadd+0x382>
10040c02:	2680      	movs	r6, #128	@ 0x80
10040c04:	0336      	lsls	r6, r6, #12
10040c06:	4306      	orrs	r6, r0
10040c08:	0336      	lsls	r6, r6, #12
10040c0a:	4c2d      	ldr	r4, [pc, #180]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040c0c:	0b36      	lsrs	r6, r6, #12
10040c0e:	e7da      	b.n	10040bc6 <__aeabi_dadd+0x292>
10040c10:	2900      	cmp	r1, #0
10040c12:	d061      	beq.n	10040cd8 <__aeabi_dadd+0x3a4>
10040c14:	4641      	mov	r1, r8
10040c16:	1b09      	subs	r1, r1, r4
10040c18:	2c00      	cmp	r4, #0
10040c1a:	d100      	bne.n	10040c1e <__aeabi_dadd+0x2ea>
10040c1c:	e0b9      	b.n	10040d92 <__aeabi_dadd+0x45e>
10040c1e:	4c28      	ldr	r4, [pc, #160]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040c20:	45a0      	cmp	r8, r4
10040c22:	d100      	bne.n	10040c26 <__aeabi_dadd+0x2f2>
10040c24:	e1a5      	b.n	10040f72 <__aeabi_dadd+0x63e>
10040c26:	2701      	movs	r7, #1
10040c28:	2938      	cmp	r1, #56	@ 0x38
10040c2a:	dc13      	bgt.n	10040c54 <__aeabi_dadd+0x320>
10040c2c:	2480      	movs	r4, #128	@ 0x80
10040c2e:	0424      	lsls	r4, r4, #16
10040c30:	4326      	orrs	r6, r4
10040c32:	291f      	cmp	r1, #31
10040c34:	dd00      	ble.n	10040c38 <__aeabi_dadd+0x304>
10040c36:	e1c8      	b.n	10040fca <__aeabi_dadd+0x696>
10040c38:	2420      	movs	r4, #32
10040c3a:	0037      	movs	r7, r6
10040c3c:	4648      	mov	r0, r9
10040c3e:	1a64      	subs	r4, r4, r1
10040c40:	40a7      	lsls	r7, r4
10040c42:	40c8      	lsrs	r0, r1
10040c44:	4307      	orrs	r7, r0
10040c46:	4648      	mov	r0, r9
10040c48:	40a0      	lsls	r0, r4
10040c4a:	40ce      	lsrs	r6, r1
10040c4c:	1e44      	subs	r4, r0, #1
10040c4e:	41a0      	sbcs	r0, r4
10040c50:	199b      	adds	r3, r3, r6
10040c52:	4307      	orrs	r7, r0
10040c54:	18bf      	adds	r7, r7, r2
10040c56:	4297      	cmp	r7, r2
10040c58:	4192      	sbcs	r2, r2
10040c5a:	4252      	negs	r2, r2
10040c5c:	4644      	mov	r4, r8
10040c5e:	18d6      	adds	r6, r2, r3
10040c60:	e763      	b.n	10040b2a <__aeabi_dadd+0x1f6>
10040c62:	0038      	movs	r0, r7
10040c64:	f7ff fcc0 	bl	100405e8 <__clzsi2>
10040c68:	0003      	movs	r3, r0
10040c6a:	3318      	adds	r3, #24
10040c6c:	2b1f      	cmp	r3, #31
10040c6e:	dc00      	bgt.n	10040c72 <__aeabi_dadd+0x33e>
10040c70:	e6bf      	b.n	100409f2 <__aeabi_dadd+0xbe>
10040c72:	003a      	movs	r2, r7
10040c74:	3808      	subs	r0, #8
10040c76:	4082      	lsls	r2, r0
10040c78:	429c      	cmp	r4, r3
10040c7a:	dd00      	ble.n	10040c7e <__aeabi_dadd+0x34a>
10040c7c:	e083      	b.n	10040d86 <__aeabi_dadd+0x452>
10040c7e:	1b1b      	subs	r3, r3, r4
10040c80:	1c58      	adds	r0, r3, #1
10040c82:	281f      	cmp	r0, #31
10040c84:	dc00      	bgt.n	10040c88 <__aeabi_dadd+0x354>
10040c86:	e1b4      	b.n	10040ff2 <__aeabi_dadd+0x6be>
10040c88:	0017      	movs	r7, r2
10040c8a:	3b1f      	subs	r3, #31
10040c8c:	40df      	lsrs	r7, r3
10040c8e:	2820      	cmp	r0, #32
10040c90:	d005      	beq.n	10040c9e <__aeabi_dadd+0x36a>
10040c92:	2340      	movs	r3, #64	@ 0x40
10040c94:	1a1b      	subs	r3, r3, r0
10040c96:	409a      	lsls	r2, r3
10040c98:	1e53      	subs	r3, r2, #1
10040c9a:	419a      	sbcs	r2, r3
10040c9c:	4317      	orrs	r7, r2
10040c9e:	2400      	movs	r4, #0
10040ca0:	2f00      	cmp	r7, #0
10040ca2:	d00a      	beq.n	10040cba <__aeabi_dadd+0x386>
10040ca4:	077b      	lsls	r3, r7, #29
10040ca6:	d000      	beq.n	10040caa <__aeabi_dadd+0x376>
10040ca8:	e6c4      	b.n	10040a34 <__aeabi_dadd+0x100>
10040caa:	0026      	movs	r6, r4
10040cac:	e79e      	b.n	10040bec <__aeabi_dadd+0x2b8>
10040cae:	464b      	mov	r3, r9
10040cb0:	000c      	movs	r4, r1
10040cb2:	08d8      	lsrs	r0, r3, #3
10040cb4:	e79b      	b.n	10040bee <__aeabi_dadd+0x2ba>
10040cb6:	2700      	movs	r7, #0
10040cb8:	4c01      	ldr	r4, [pc, #4]	@ (10040cc0 <__aeabi_dadd+0x38c>)
10040cba:	2600      	movs	r6, #0
10040cbc:	e783      	b.n	10040bc6 <__aeabi_dadd+0x292>
10040cbe:	46c0      	nop			@ (mov r8, r8)
10040cc0:	000007ff 	.word	0x000007ff
10040cc4:	ff7fffff 	.word	0xff7fffff
10040cc8:	000007fe 	.word	0x000007fe
10040ccc:	464b      	mov	r3, r9
10040cce:	0777      	lsls	r7, r6, #29
10040cd0:	08d8      	lsrs	r0, r3, #3
10040cd2:	4307      	orrs	r7, r0
10040cd4:	08f0      	lsrs	r0, r6, #3
10040cd6:	e791      	b.n	10040bfc <__aeabi_dadd+0x2c8>
10040cd8:	4fcd      	ldr	r7, [pc, #820]	@ (10041010 <__aeabi_dadd+0x6dc>)
10040cda:	1c61      	adds	r1, r4, #1
10040cdc:	4239      	tst	r1, r7
10040cde:	d16b      	bne.n	10040db8 <__aeabi_dadd+0x484>
10040ce0:	0031      	movs	r1, r6
10040ce2:	4648      	mov	r0, r9
10040ce4:	4301      	orrs	r1, r0
10040ce6:	2c00      	cmp	r4, #0
10040ce8:	d000      	beq.n	10040cec <__aeabi_dadd+0x3b8>
10040cea:	e14b      	b.n	10040f84 <__aeabi_dadd+0x650>
10040cec:	001f      	movs	r7, r3
10040cee:	4317      	orrs	r7, r2
10040cf0:	2900      	cmp	r1, #0
10040cf2:	d100      	bne.n	10040cf6 <__aeabi_dadd+0x3c2>
10040cf4:	e181      	b.n	10040ffa <__aeabi_dadd+0x6c6>
10040cf6:	2f00      	cmp	r7, #0
10040cf8:	d100      	bne.n	10040cfc <__aeabi_dadd+0x3c8>
10040cfa:	e74c      	b.n	10040b96 <__aeabi_dadd+0x262>
10040cfc:	444a      	add	r2, r9
10040cfe:	454a      	cmp	r2, r9
10040d00:	4180      	sbcs	r0, r0
10040d02:	18f6      	adds	r6, r6, r3
10040d04:	4240      	negs	r0, r0
10040d06:	1836      	adds	r6, r6, r0
10040d08:	0233      	lsls	r3, r6, #8
10040d0a:	d500      	bpl.n	10040d0e <__aeabi_dadd+0x3da>
10040d0c:	e1b0      	b.n	10041070 <__aeabi_dadd+0x73c>
10040d0e:	0017      	movs	r7, r2
10040d10:	4691      	mov	r9, r2
10040d12:	4337      	orrs	r7, r6
10040d14:	d000      	beq.n	10040d18 <__aeabi_dadd+0x3e4>
10040d16:	e73e      	b.n	10040b96 <__aeabi_dadd+0x262>
10040d18:	2600      	movs	r6, #0
10040d1a:	e754      	b.n	10040bc6 <__aeabi_dadd+0x292>
10040d1c:	4649      	mov	r1, r9
10040d1e:	1a89      	subs	r1, r1, r2
10040d20:	4688      	mov	r8, r1
10040d22:	45c1      	cmp	r9, r8
10040d24:	41bf      	sbcs	r7, r7
10040d26:	1af1      	subs	r1, r6, r3
10040d28:	427f      	negs	r7, r7
10040d2a:	1bc9      	subs	r1, r1, r7
10040d2c:	020f      	lsls	r7, r1, #8
10040d2e:	d461      	bmi.n	10040df4 <__aeabi_dadd+0x4c0>
10040d30:	4647      	mov	r7, r8
10040d32:	430f      	orrs	r7, r1
10040d34:	d100      	bne.n	10040d38 <__aeabi_dadd+0x404>
10040d36:	e0bd      	b.n	10040eb4 <__aeabi_dadd+0x580>
10040d38:	000e      	movs	r6, r1
10040d3a:	4647      	mov	r7, r8
10040d3c:	e651      	b.n	100409e2 <__aeabi_dadd+0xae>
10040d3e:	4cb5      	ldr	r4, [pc, #724]	@ (10041014 <__aeabi_dadd+0x6e0>)
10040d40:	45a0      	cmp	r8, r4
10040d42:	d100      	bne.n	10040d46 <__aeabi_dadd+0x412>
10040d44:	e100      	b.n	10040f48 <__aeabi_dadd+0x614>
10040d46:	2701      	movs	r7, #1
10040d48:	2938      	cmp	r1, #56	@ 0x38
10040d4a:	dd00      	ble.n	10040d4e <__aeabi_dadd+0x41a>
10040d4c:	e6b8      	b.n	10040ac0 <__aeabi_dadd+0x18c>
10040d4e:	2480      	movs	r4, #128	@ 0x80
10040d50:	0424      	lsls	r4, r4, #16
10040d52:	4326      	orrs	r6, r4
10040d54:	e6a3      	b.n	10040a9e <__aeabi_dadd+0x16a>
10040d56:	4eb0      	ldr	r6, [pc, #704]	@ (10041018 <__aeabi_dadd+0x6e4>)
10040d58:	1ae4      	subs	r4, r4, r3
10040d5a:	4016      	ands	r6, r2
10040d5c:	077b      	lsls	r3, r7, #29
10040d5e:	d000      	beq.n	10040d62 <__aeabi_dadd+0x42e>
10040d60:	e73f      	b.n	10040be2 <__aeabi_dadd+0x2ae>
10040d62:	e743      	b.n	10040bec <__aeabi_dadd+0x2b8>
10040d64:	000f      	movs	r7, r1
10040d66:	0018      	movs	r0, r3
10040d68:	3f20      	subs	r7, #32
10040d6a:	40f8      	lsrs	r0, r7
10040d6c:	4684      	mov	ip, r0
10040d6e:	2920      	cmp	r1, #32
10040d70:	d003      	beq.n	10040d7a <__aeabi_dadd+0x446>
10040d72:	2740      	movs	r7, #64	@ 0x40
10040d74:	1a79      	subs	r1, r7, r1
10040d76:	408b      	lsls	r3, r1
10040d78:	431a      	orrs	r2, r3
10040d7a:	1e53      	subs	r3, r2, #1
10040d7c:	419a      	sbcs	r2, r3
10040d7e:	4663      	mov	r3, ip
10040d80:	0017      	movs	r7, r2
10040d82:	431f      	orrs	r7, r3
10040d84:	e622      	b.n	100409cc <__aeabi_dadd+0x98>
10040d86:	48a4      	ldr	r0, [pc, #656]	@ (10041018 <__aeabi_dadd+0x6e4>)
10040d88:	1ae1      	subs	r1, r4, r3
10040d8a:	4010      	ands	r0, r2
10040d8c:	0747      	lsls	r7, r0, #29
10040d8e:	08c0      	lsrs	r0, r0, #3
10040d90:	e707      	b.n	10040ba2 <__aeabi_dadd+0x26e>
10040d92:	0034      	movs	r4, r6
10040d94:	4648      	mov	r0, r9
10040d96:	4304      	orrs	r4, r0
10040d98:	d100      	bne.n	10040d9c <__aeabi_dadd+0x468>
10040d9a:	e0fa      	b.n	10040f92 <__aeabi_dadd+0x65e>
10040d9c:	1e4c      	subs	r4, r1, #1
10040d9e:	2901      	cmp	r1, #1
10040da0:	d100      	bne.n	10040da4 <__aeabi_dadd+0x470>
10040da2:	e0d7      	b.n	10040f54 <__aeabi_dadd+0x620>
10040da4:	4f9b      	ldr	r7, [pc, #620]	@ (10041014 <__aeabi_dadd+0x6e0>)
10040da6:	42b9      	cmp	r1, r7
10040da8:	d100      	bne.n	10040dac <__aeabi_dadd+0x478>
10040daa:	e0e2      	b.n	10040f72 <__aeabi_dadd+0x63e>
10040dac:	2701      	movs	r7, #1
10040dae:	2c38      	cmp	r4, #56	@ 0x38
10040db0:	dd00      	ble.n	10040db4 <__aeabi_dadd+0x480>
10040db2:	e74f      	b.n	10040c54 <__aeabi_dadd+0x320>
10040db4:	0021      	movs	r1, r4
10040db6:	e73c      	b.n	10040c32 <__aeabi_dadd+0x2fe>
10040db8:	4c96      	ldr	r4, [pc, #600]	@ (10041014 <__aeabi_dadd+0x6e0>)
10040dba:	42a1      	cmp	r1, r4
10040dbc:	d100      	bne.n	10040dc0 <__aeabi_dadd+0x48c>
10040dbe:	e0dd      	b.n	10040f7c <__aeabi_dadd+0x648>
10040dc0:	444a      	add	r2, r9
10040dc2:	454a      	cmp	r2, r9
10040dc4:	4180      	sbcs	r0, r0
10040dc6:	18f3      	adds	r3, r6, r3
10040dc8:	4240      	negs	r0, r0
10040dca:	1818      	adds	r0, r3, r0
10040dcc:	07c7      	lsls	r7, r0, #31
10040dce:	0852      	lsrs	r2, r2, #1
10040dd0:	4317      	orrs	r7, r2
10040dd2:	0846      	lsrs	r6, r0, #1
10040dd4:	0752      	lsls	r2, r2, #29
10040dd6:	d005      	beq.n	10040de4 <__aeabi_dadd+0x4b0>
10040dd8:	220f      	movs	r2, #15
10040dda:	000c      	movs	r4, r1
10040ddc:	403a      	ands	r2, r7
10040dde:	2a04      	cmp	r2, #4
10040de0:	d000      	beq.n	10040de4 <__aeabi_dadd+0x4b0>
10040de2:	e62c      	b.n	10040a3e <__aeabi_dadd+0x10a>
10040de4:	0776      	lsls	r6, r6, #29
10040de6:	08ff      	lsrs	r7, r7, #3
10040de8:	4337      	orrs	r7, r6
10040dea:	0900      	lsrs	r0, r0, #4
10040dec:	e6d9      	b.n	10040ba2 <__aeabi_dadd+0x26e>
10040dee:	2700      	movs	r7, #0
10040df0:	2600      	movs	r6, #0
10040df2:	e6e8      	b.n	10040bc6 <__aeabi_dadd+0x292>
10040df4:	4649      	mov	r1, r9
10040df6:	1a57      	subs	r7, r2, r1
10040df8:	42ba      	cmp	r2, r7
10040dfa:	4192      	sbcs	r2, r2
10040dfc:	1b9e      	subs	r6, r3, r6
10040dfe:	4252      	negs	r2, r2
10040e00:	4665      	mov	r5, ip
10040e02:	1ab6      	subs	r6, r6, r2
10040e04:	e5ed      	b.n	100409e2 <__aeabi_dadd+0xae>
10040e06:	2900      	cmp	r1, #0
10040e08:	d000      	beq.n	10040e0c <__aeabi_dadd+0x4d8>
10040e0a:	e0c6      	b.n	10040f9a <__aeabi_dadd+0x666>
10040e0c:	2f00      	cmp	r7, #0
10040e0e:	d167      	bne.n	10040ee0 <__aeabi_dadd+0x5ac>
10040e10:	2680      	movs	r6, #128	@ 0x80
10040e12:	2500      	movs	r5, #0
10040e14:	4c7f      	ldr	r4, [pc, #508]	@ (10041014 <__aeabi_dadd+0x6e0>)
10040e16:	0336      	lsls	r6, r6, #12
10040e18:	e6d5      	b.n	10040bc6 <__aeabi_dadd+0x292>
10040e1a:	4665      	mov	r5, ip
10040e1c:	000c      	movs	r4, r1
10040e1e:	001e      	movs	r6, r3
10040e20:	08d0      	lsrs	r0, r2, #3
10040e22:	e6e4      	b.n	10040bee <__aeabi_dadd+0x2ba>
10040e24:	444a      	add	r2, r9
10040e26:	454a      	cmp	r2, r9
10040e28:	4180      	sbcs	r0, r0
10040e2a:	18f3      	adds	r3, r6, r3
10040e2c:	4240      	negs	r0, r0
10040e2e:	1818      	adds	r0, r3, r0
10040e30:	0011      	movs	r1, r2
10040e32:	0203      	lsls	r3, r0, #8
10040e34:	d400      	bmi.n	10040e38 <__aeabi_dadd+0x504>
10040e36:	e096      	b.n	10040f66 <__aeabi_dadd+0x632>
10040e38:	4b77      	ldr	r3, [pc, #476]	@ (10041018 <__aeabi_dadd+0x6e4>)
10040e3a:	0849      	lsrs	r1, r1, #1
10040e3c:	4018      	ands	r0, r3
10040e3e:	07c3      	lsls	r3, r0, #31
10040e40:	430b      	orrs	r3, r1
10040e42:	0844      	lsrs	r4, r0, #1
10040e44:	0749      	lsls	r1, r1, #29
10040e46:	d100      	bne.n	10040e4a <__aeabi_dadd+0x516>
10040e48:	e129      	b.n	1004109e <__aeabi_dadd+0x76a>
10040e4a:	220f      	movs	r2, #15
10040e4c:	401a      	ands	r2, r3
10040e4e:	2a04      	cmp	r2, #4
10040e50:	d100      	bne.n	10040e54 <__aeabi_dadd+0x520>
10040e52:	e0ea      	b.n	1004102a <__aeabi_dadd+0x6f6>
10040e54:	1d1f      	adds	r7, r3, #4
10040e56:	429f      	cmp	r7, r3
10040e58:	41b6      	sbcs	r6, r6
10040e5a:	4276      	negs	r6, r6
10040e5c:	1936      	adds	r6, r6, r4
10040e5e:	2402      	movs	r4, #2
10040e60:	e6c4      	b.n	10040bec <__aeabi_dadd+0x2b8>
10040e62:	4649      	mov	r1, r9
10040e64:	1a8f      	subs	r7, r1, r2
10040e66:	45b9      	cmp	r9, r7
10040e68:	4180      	sbcs	r0, r0
10040e6a:	1af6      	subs	r6, r6, r3
10040e6c:	4240      	negs	r0, r0
10040e6e:	1a36      	subs	r6, r6, r0
10040e70:	0233      	lsls	r3, r6, #8
10040e72:	d406      	bmi.n	10040e82 <__aeabi_dadd+0x54e>
10040e74:	0773      	lsls	r3, r6, #29
10040e76:	08ff      	lsrs	r7, r7, #3
10040e78:	2101      	movs	r1, #1
10040e7a:	431f      	orrs	r7, r3
10040e7c:	08f0      	lsrs	r0, r6, #3
10040e7e:	e690      	b.n	10040ba2 <__aeabi_dadd+0x26e>
10040e80:	4665      	mov	r5, ip
10040e82:	2401      	movs	r4, #1
10040e84:	e5ab      	b.n	100409de <__aeabi_dadd+0xaa>
10040e86:	464b      	mov	r3, r9
10040e88:	0777      	lsls	r7, r6, #29
10040e8a:	08d8      	lsrs	r0, r3, #3
10040e8c:	4307      	orrs	r7, r0
10040e8e:	08f0      	lsrs	r0, r6, #3
10040e90:	e6b4      	b.n	10040bfc <__aeabi_dadd+0x2c8>
10040e92:	000f      	movs	r7, r1
10040e94:	0018      	movs	r0, r3
10040e96:	3f20      	subs	r7, #32
10040e98:	40f8      	lsrs	r0, r7
10040e9a:	4684      	mov	ip, r0
10040e9c:	2920      	cmp	r1, #32
10040e9e:	d003      	beq.n	10040ea8 <__aeabi_dadd+0x574>
10040ea0:	2740      	movs	r7, #64	@ 0x40
10040ea2:	1a79      	subs	r1, r7, r1
10040ea4:	408b      	lsls	r3, r1
10040ea6:	431a      	orrs	r2, r3
10040ea8:	1e53      	subs	r3, r2, #1
10040eaa:	419a      	sbcs	r2, r3
10040eac:	4663      	mov	r3, ip
10040eae:	0017      	movs	r7, r2
10040eb0:	431f      	orrs	r7, r3
10040eb2:	e635      	b.n	10040b20 <__aeabi_dadd+0x1ec>
10040eb4:	2500      	movs	r5, #0
10040eb6:	2400      	movs	r4, #0
10040eb8:	2600      	movs	r6, #0
10040eba:	e684      	b.n	10040bc6 <__aeabi_dadd+0x292>
10040ebc:	000c      	movs	r4, r1
10040ebe:	0035      	movs	r5, r6
10040ec0:	3c20      	subs	r4, #32
10040ec2:	40e5      	lsrs	r5, r4
10040ec4:	2920      	cmp	r1, #32
10040ec6:	d005      	beq.n	10040ed4 <__aeabi_dadd+0x5a0>
10040ec8:	2440      	movs	r4, #64	@ 0x40
10040eca:	1a61      	subs	r1, r4, r1
10040ecc:	408e      	lsls	r6, r1
10040ece:	4649      	mov	r1, r9
10040ed0:	4331      	orrs	r1, r6
10040ed2:	4689      	mov	r9, r1
10040ed4:	4648      	mov	r0, r9
10040ed6:	1e41      	subs	r1, r0, #1
10040ed8:	4188      	sbcs	r0, r1
10040eda:	0007      	movs	r7, r0
10040edc:	432f      	orrs	r7, r5
10040ede:	e5ef      	b.n	10040ac0 <__aeabi_dadd+0x18c>
10040ee0:	08d2      	lsrs	r2, r2, #3
10040ee2:	075f      	lsls	r7, r3, #29
10040ee4:	4665      	mov	r5, ip
10040ee6:	4317      	orrs	r7, r2
10040ee8:	08d8      	lsrs	r0, r3, #3
10040eea:	e687      	b.n	10040bfc <__aeabi_dadd+0x2c8>
10040eec:	1a17      	subs	r7, r2, r0
10040eee:	42ba      	cmp	r2, r7
10040ef0:	4192      	sbcs	r2, r2
10040ef2:	1b9e      	subs	r6, r3, r6
10040ef4:	4252      	negs	r2, r2
10040ef6:	1ab6      	subs	r6, r6, r2
10040ef8:	0233      	lsls	r3, r6, #8
10040efa:	d4c1      	bmi.n	10040e80 <__aeabi_dadd+0x54c>
10040efc:	0773      	lsls	r3, r6, #29
10040efe:	08ff      	lsrs	r7, r7, #3
10040f00:	4665      	mov	r5, ip
10040f02:	2101      	movs	r1, #1
10040f04:	431f      	orrs	r7, r3
10040f06:	08f0      	lsrs	r0, r6, #3
10040f08:	e64b      	b.n	10040ba2 <__aeabi_dadd+0x26e>
10040f0a:	2f00      	cmp	r7, #0
10040f0c:	d07b      	beq.n	10041006 <__aeabi_dadd+0x6d2>
10040f0e:	4665      	mov	r5, ip
10040f10:	001e      	movs	r6, r3
10040f12:	4691      	mov	r9, r2
10040f14:	e63f      	b.n	10040b96 <__aeabi_dadd+0x262>
10040f16:	1a81      	subs	r1, r0, r2
10040f18:	4688      	mov	r8, r1
10040f1a:	45c1      	cmp	r9, r8
10040f1c:	41a4      	sbcs	r4, r4
10040f1e:	1af1      	subs	r1, r6, r3
10040f20:	4264      	negs	r4, r4
10040f22:	1b09      	subs	r1, r1, r4
10040f24:	2480      	movs	r4, #128	@ 0x80
10040f26:	0424      	lsls	r4, r4, #16
10040f28:	4221      	tst	r1, r4
10040f2a:	d077      	beq.n	1004101c <__aeabi_dadd+0x6e8>
10040f2c:	1a10      	subs	r0, r2, r0
10040f2e:	4282      	cmp	r2, r0
10040f30:	4192      	sbcs	r2, r2
10040f32:	0007      	movs	r7, r0
10040f34:	1b9e      	subs	r6, r3, r6
10040f36:	4252      	negs	r2, r2
10040f38:	1ab6      	subs	r6, r6, r2
10040f3a:	4337      	orrs	r7, r6
10040f3c:	d000      	beq.n	10040f40 <__aeabi_dadd+0x60c>
10040f3e:	e0a0      	b.n	10041082 <__aeabi_dadd+0x74e>
10040f40:	4665      	mov	r5, ip
10040f42:	2400      	movs	r4, #0
10040f44:	2600      	movs	r6, #0
10040f46:	e63e      	b.n	10040bc6 <__aeabi_dadd+0x292>
10040f48:	075f      	lsls	r7, r3, #29
10040f4a:	08d2      	lsrs	r2, r2, #3
10040f4c:	4665      	mov	r5, ip
10040f4e:	4317      	orrs	r7, r2
10040f50:	08d8      	lsrs	r0, r3, #3
10040f52:	e653      	b.n	10040bfc <__aeabi_dadd+0x2c8>
10040f54:	1881      	adds	r1, r0, r2
10040f56:	4291      	cmp	r1, r2
10040f58:	4192      	sbcs	r2, r2
10040f5a:	18f0      	adds	r0, r6, r3
10040f5c:	4252      	negs	r2, r2
10040f5e:	1880      	adds	r0, r0, r2
10040f60:	0203      	lsls	r3, r0, #8
10040f62:	d500      	bpl.n	10040f66 <__aeabi_dadd+0x632>
10040f64:	e768      	b.n	10040e38 <__aeabi_dadd+0x504>
10040f66:	0747      	lsls	r7, r0, #29
10040f68:	08c9      	lsrs	r1, r1, #3
10040f6a:	430f      	orrs	r7, r1
10040f6c:	08c0      	lsrs	r0, r0, #3
10040f6e:	2101      	movs	r1, #1
10040f70:	e617      	b.n	10040ba2 <__aeabi_dadd+0x26e>
10040f72:	08d2      	lsrs	r2, r2, #3
10040f74:	075f      	lsls	r7, r3, #29
10040f76:	4317      	orrs	r7, r2
10040f78:	08d8      	lsrs	r0, r3, #3
10040f7a:	e63f      	b.n	10040bfc <__aeabi_dadd+0x2c8>
10040f7c:	000c      	movs	r4, r1
10040f7e:	2600      	movs	r6, #0
10040f80:	2700      	movs	r7, #0
10040f82:	e620      	b.n	10040bc6 <__aeabi_dadd+0x292>
10040f84:	2900      	cmp	r1, #0
10040f86:	d156      	bne.n	10041036 <__aeabi_dadd+0x702>
10040f88:	075f      	lsls	r7, r3, #29
10040f8a:	08d2      	lsrs	r2, r2, #3
10040f8c:	4317      	orrs	r7, r2
10040f8e:	08d8      	lsrs	r0, r3, #3
10040f90:	e634      	b.n	10040bfc <__aeabi_dadd+0x2c8>
10040f92:	000c      	movs	r4, r1
10040f94:	001e      	movs	r6, r3
10040f96:	08d0      	lsrs	r0, r2, #3
10040f98:	e629      	b.n	10040bee <__aeabi_dadd+0x2ba>
10040f9a:	08c1      	lsrs	r1, r0, #3
10040f9c:	0770      	lsls	r0, r6, #29
10040f9e:	4301      	orrs	r1, r0
10040fa0:	08f0      	lsrs	r0, r6, #3
10040fa2:	2f00      	cmp	r7, #0
10040fa4:	d062      	beq.n	1004106c <__aeabi_dadd+0x738>
10040fa6:	2480      	movs	r4, #128	@ 0x80
10040fa8:	0324      	lsls	r4, r4, #12
10040faa:	4220      	tst	r0, r4
10040fac:	d007      	beq.n	10040fbe <__aeabi_dadd+0x68a>
10040fae:	08de      	lsrs	r6, r3, #3
10040fb0:	4226      	tst	r6, r4
10040fb2:	d104      	bne.n	10040fbe <__aeabi_dadd+0x68a>
10040fb4:	4665      	mov	r5, ip
10040fb6:	0030      	movs	r0, r6
10040fb8:	08d1      	lsrs	r1, r2, #3
10040fba:	075b      	lsls	r3, r3, #29
10040fbc:	4319      	orrs	r1, r3
10040fbe:	0f4f      	lsrs	r7, r1, #29
10040fc0:	00c9      	lsls	r1, r1, #3
10040fc2:	08c9      	lsrs	r1, r1, #3
10040fc4:	077f      	lsls	r7, r7, #29
10040fc6:	430f      	orrs	r7, r1
10040fc8:	e618      	b.n	10040bfc <__aeabi_dadd+0x2c8>
10040fca:	000c      	movs	r4, r1
10040fcc:	0030      	movs	r0, r6
10040fce:	3c20      	subs	r4, #32
10040fd0:	40e0      	lsrs	r0, r4
10040fd2:	4684      	mov	ip, r0
10040fd4:	2920      	cmp	r1, #32
10040fd6:	d005      	beq.n	10040fe4 <__aeabi_dadd+0x6b0>
10040fd8:	2440      	movs	r4, #64	@ 0x40
10040fda:	1a61      	subs	r1, r4, r1
10040fdc:	408e      	lsls	r6, r1
10040fde:	4649      	mov	r1, r9
10040fe0:	4331      	orrs	r1, r6
10040fe2:	4689      	mov	r9, r1
10040fe4:	4648      	mov	r0, r9
10040fe6:	1e41      	subs	r1, r0, #1
10040fe8:	4188      	sbcs	r0, r1
10040fea:	4661      	mov	r1, ip
10040fec:	0007      	movs	r7, r0
10040fee:	430f      	orrs	r7, r1
10040ff0:	e630      	b.n	10040c54 <__aeabi_dadd+0x320>
10040ff2:	2120      	movs	r1, #32
10040ff4:	2700      	movs	r7, #0
10040ff6:	1a09      	subs	r1, r1, r0
10040ff8:	e50e      	b.n	10040a18 <__aeabi_dadd+0xe4>
10040ffa:	001e      	movs	r6, r3
10040ffc:	2f00      	cmp	r7, #0
10040ffe:	d000      	beq.n	10041002 <__aeabi_dadd+0x6ce>
10041000:	e522      	b.n	10040a48 <__aeabi_dadd+0x114>
10041002:	2400      	movs	r4, #0
10041004:	e758      	b.n	10040eb8 <__aeabi_dadd+0x584>
10041006:	2500      	movs	r5, #0
10041008:	2400      	movs	r4, #0
1004100a:	2600      	movs	r6, #0
1004100c:	e5db      	b.n	10040bc6 <__aeabi_dadd+0x292>
1004100e:	46c0      	nop			@ (mov r8, r8)
10041010:	000007fe 	.word	0x000007fe
10041014:	000007ff 	.word	0x000007ff
10041018:	ff7fffff 	.word	0xff7fffff
1004101c:	4647      	mov	r7, r8
1004101e:	430f      	orrs	r7, r1
10041020:	d100      	bne.n	10041024 <__aeabi_dadd+0x6f0>
10041022:	e747      	b.n	10040eb4 <__aeabi_dadd+0x580>
10041024:	000e      	movs	r6, r1
10041026:	46c1      	mov	r9, r8
10041028:	e5b5      	b.n	10040b96 <__aeabi_dadd+0x262>
1004102a:	08df      	lsrs	r7, r3, #3
1004102c:	0764      	lsls	r4, r4, #29
1004102e:	2102      	movs	r1, #2
10041030:	4327      	orrs	r7, r4
10041032:	0900      	lsrs	r0, r0, #4
10041034:	e5b5      	b.n	10040ba2 <__aeabi_dadd+0x26e>
10041036:	0019      	movs	r1, r3
10041038:	08c0      	lsrs	r0, r0, #3
1004103a:	0777      	lsls	r7, r6, #29
1004103c:	4307      	orrs	r7, r0
1004103e:	4311      	orrs	r1, r2
10041040:	08f0      	lsrs	r0, r6, #3
10041042:	2900      	cmp	r1, #0
10041044:	d100      	bne.n	10041048 <__aeabi_dadd+0x714>
10041046:	e5d9      	b.n	10040bfc <__aeabi_dadd+0x2c8>
10041048:	2180      	movs	r1, #128	@ 0x80
1004104a:	0309      	lsls	r1, r1, #12
1004104c:	4208      	tst	r0, r1
1004104e:	d007      	beq.n	10041060 <__aeabi_dadd+0x72c>
10041050:	08dc      	lsrs	r4, r3, #3
10041052:	420c      	tst	r4, r1
10041054:	d104      	bne.n	10041060 <__aeabi_dadd+0x72c>
10041056:	08d2      	lsrs	r2, r2, #3
10041058:	075b      	lsls	r3, r3, #29
1004105a:	431a      	orrs	r2, r3
1004105c:	0017      	movs	r7, r2
1004105e:	0020      	movs	r0, r4
10041060:	0f7b      	lsrs	r3, r7, #29
10041062:	00ff      	lsls	r7, r7, #3
10041064:	08ff      	lsrs	r7, r7, #3
10041066:	075b      	lsls	r3, r3, #29
10041068:	431f      	orrs	r7, r3
1004106a:	e5c7      	b.n	10040bfc <__aeabi_dadd+0x2c8>
1004106c:	000f      	movs	r7, r1
1004106e:	e5c5      	b.n	10040bfc <__aeabi_dadd+0x2c8>
10041070:	4b12      	ldr	r3, [pc, #72]	@ (100410bc <__aeabi_dadd+0x788>)
10041072:	08d2      	lsrs	r2, r2, #3
10041074:	4033      	ands	r3, r6
10041076:	075f      	lsls	r7, r3, #29
10041078:	025b      	lsls	r3, r3, #9
1004107a:	2401      	movs	r4, #1
1004107c:	4317      	orrs	r7, r2
1004107e:	0b1e      	lsrs	r6, r3, #12
10041080:	e5a1      	b.n	10040bc6 <__aeabi_dadd+0x292>
10041082:	4226      	tst	r6, r4
10041084:	d012      	beq.n	100410ac <__aeabi_dadd+0x778>
10041086:	4b0d      	ldr	r3, [pc, #52]	@ (100410bc <__aeabi_dadd+0x788>)
10041088:	4665      	mov	r5, ip
1004108a:	0002      	movs	r2, r0
1004108c:	2401      	movs	r4, #1
1004108e:	401e      	ands	r6, r3
10041090:	e4e6      	b.n	10040a60 <__aeabi_dadd+0x12c>
10041092:	0021      	movs	r1, r4
10041094:	e585      	b.n	10040ba2 <__aeabi_dadd+0x26e>
10041096:	0017      	movs	r7, r2
10041098:	e5a8      	b.n	10040bec <__aeabi_dadd+0x2b8>
1004109a:	003a      	movs	r2, r7
1004109c:	e4d4      	b.n	10040a48 <__aeabi_dadd+0x114>
1004109e:	08db      	lsrs	r3, r3, #3
100410a0:	0764      	lsls	r4, r4, #29
100410a2:	431c      	orrs	r4, r3
100410a4:	0027      	movs	r7, r4
100410a6:	2102      	movs	r1, #2
100410a8:	0900      	lsrs	r0, r0, #4
100410aa:	e57a      	b.n	10040ba2 <__aeabi_dadd+0x26e>
100410ac:	08c0      	lsrs	r0, r0, #3
100410ae:	0777      	lsls	r7, r6, #29
100410b0:	4307      	orrs	r7, r0
100410b2:	4665      	mov	r5, ip
100410b4:	2100      	movs	r1, #0
100410b6:	08f0      	lsrs	r0, r6, #3
100410b8:	e573      	b.n	10040ba2 <__aeabi_dadd+0x26e>
100410ba:	46c0      	nop			@ (mov r8, r8)
100410bc:	ff7fffff 	.word	0xff7fffff

100410c0 <__aeabi_ddiv>:
100410c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100410c2:	46de      	mov	lr, fp
100410c4:	4645      	mov	r5, r8
100410c6:	4657      	mov	r7, sl
100410c8:	464e      	mov	r6, r9
100410ca:	b5e0      	push	{r5, r6, r7, lr}
100410cc:	b087      	sub	sp, #28
100410ce:	9200      	str	r2, [sp, #0]
100410d0:	9301      	str	r3, [sp, #4]
100410d2:	030b      	lsls	r3, r1, #12
100410d4:	0b1b      	lsrs	r3, r3, #12
100410d6:	469b      	mov	fp, r3
100410d8:	0fca      	lsrs	r2, r1, #31
100410da:	004b      	lsls	r3, r1, #1
100410dc:	0004      	movs	r4, r0
100410de:	4680      	mov	r8, r0
100410e0:	0d5b      	lsrs	r3, r3, #21
100410e2:	9202      	str	r2, [sp, #8]
100410e4:	d100      	bne.n	100410e8 <__aeabi_ddiv+0x28>
100410e6:	e098      	b.n	1004121a <__aeabi_ddiv+0x15a>
100410e8:	4a7c      	ldr	r2, [pc, #496]	@ (100412dc <__aeabi_ddiv+0x21c>)
100410ea:	4293      	cmp	r3, r2
100410ec:	d037      	beq.n	1004115e <__aeabi_ddiv+0x9e>
100410ee:	4659      	mov	r1, fp
100410f0:	0f42      	lsrs	r2, r0, #29
100410f2:	00c9      	lsls	r1, r1, #3
100410f4:	430a      	orrs	r2, r1
100410f6:	2180      	movs	r1, #128	@ 0x80
100410f8:	0409      	lsls	r1, r1, #16
100410fa:	4311      	orrs	r1, r2
100410fc:	00c2      	lsls	r2, r0, #3
100410fe:	4690      	mov	r8, r2
10041100:	4a77      	ldr	r2, [pc, #476]	@ (100412e0 <__aeabi_ddiv+0x220>)
10041102:	4689      	mov	r9, r1
10041104:	4692      	mov	sl, r2
10041106:	449a      	add	sl, r3
10041108:	2300      	movs	r3, #0
1004110a:	2400      	movs	r4, #0
1004110c:	9303      	str	r3, [sp, #12]
1004110e:	9e00      	ldr	r6, [sp, #0]
10041110:	9f01      	ldr	r7, [sp, #4]
10041112:	033b      	lsls	r3, r7, #12
10041114:	0b1b      	lsrs	r3, r3, #12
10041116:	469b      	mov	fp, r3
10041118:	007b      	lsls	r3, r7, #1
1004111a:	0030      	movs	r0, r6
1004111c:	0d5b      	lsrs	r3, r3, #21
1004111e:	0ffd      	lsrs	r5, r7, #31
10041120:	2b00      	cmp	r3, #0
10041122:	d059      	beq.n	100411d8 <__aeabi_ddiv+0x118>
10041124:	4a6d      	ldr	r2, [pc, #436]	@ (100412dc <__aeabi_ddiv+0x21c>)
10041126:	4293      	cmp	r3, r2
10041128:	d048      	beq.n	100411bc <__aeabi_ddiv+0xfc>
1004112a:	4659      	mov	r1, fp
1004112c:	0f72      	lsrs	r2, r6, #29
1004112e:	00c9      	lsls	r1, r1, #3
10041130:	430a      	orrs	r2, r1
10041132:	2180      	movs	r1, #128	@ 0x80
10041134:	0409      	lsls	r1, r1, #16
10041136:	4311      	orrs	r1, r2
10041138:	468b      	mov	fp, r1
1004113a:	4969      	ldr	r1, [pc, #420]	@ (100412e0 <__aeabi_ddiv+0x220>)
1004113c:	00f2      	lsls	r2, r6, #3
1004113e:	468c      	mov	ip, r1
10041140:	4651      	mov	r1, sl
10041142:	4463      	add	r3, ip
10041144:	1acb      	subs	r3, r1, r3
10041146:	469a      	mov	sl, r3
10041148:	2100      	movs	r1, #0
1004114a:	9e02      	ldr	r6, [sp, #8]
1004114c:	406e      	eors	r6, r5
1004114e:	b2f6      	uxtb	r6, r6
10041150:	2c0f      	cmp	r4, #15
10041152:	d900      	bls.n	10041156 <__aeabi_ddiv+0x96>
10041154:	e0ce      	b.n	100412f4 <__aeabi_ddiv+0x234>
10041156:	4b63      	ldr	r3, [pc, #396]	@ (100412e4 <__aeabi_ddiv+0x224>)
10041158:	00a4      	lsls	r4, r4, #2
1004115a:	591b      	ldr	r3, [r3, r4]
1004115c:	469f      	mov	pc, r3
1004115e:	465a      	mov	r2, fp
10041160:	4302      	orrs	r2, r0
10041162:	4691      	mov	r9, r2
10041164:	d000      	beq.n	10041168 <__aeabi_ddiv+0xa8>
10041166:	e090      	b.n	1004128a <__aeabi_ddiv+0x1ca>
10041168:	469a      	mov	sl, r3
1004116a:	2302      	movs	r3, #2
1004116c:	4690      	mov	r8, r2
1004116e:	2408      	movs	r4, #8
10041170:	9303      	str	r3, [sp, #12]
10041172:	e7cc      	b.n	1004110e <__aeabi_ddiv+0x4e>
10041174:	46cb      	mov	fp, r9
10041176:	4642      	mov	r2, r8
10041178:	9d02      	ldr	r5, [sp, #8]
1004117a:	9903      	ldr	r1, [sp, #12]
1004117c:	2902      	cmp	r1, #2
1004117e:	d100      	bne.n	10041182 <__aeabi_ddiv+0xc2>
10041180:	e1de      	b.n	10041540 <__aeabi_ddiv+0x480>
10041182:	2903      	cmp	r1, #3
10041184:	d100      	bne.n	10041188 <__aeabi_ddiv+0xc8>
10041186:	e08d      	b.n	100412a4 <__aeabi_ddiv+0x1e4>
10041188:	2901      	cmp	r1, #1
1004118a:	d000      	beq.n	1004118e <__aeabi_ddiv+0xce>
1004118c:	e179      	b.n	10041482 <__aeabi_ddiv+0x3c2>
1004118e:	002e      	movs	r6, r5
10041190:	2200      	movs	r2, #0
10041192:	2300      	movs	r3, #0
10041194:	2400      	movs	r4, #0
10041196:	4690      	mov	r8, r2
10041198:	051b      	lsls	r3, r3, #20
1004119a:	4323      	orrs	r3, r4
1004119c:	07f6      	lsls	r6, r6, #31
1004119e:	4333      	orrs	r3, r6
100411a0:	4640      	mov	r0, r8
100411a2:	0019      	movs	r1, r3
100411a4:	b007      	add	sp, #28
100411a6:	bcf0      	pop	{r4, r5, r6, r7}
100411a8:	46bb      	mov	fp, r7
100411aa:	46b2      	mov	sl, r6
100411ac:	46a9      	mov	r9, r5
100411ae:	46a0      	mov	r8, r4
100411b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100411b2:	2200      	movs	r2, #0
100411b4:	2400      	movs	r4, #0
100411b6:	4690      	mov	r8, r2
100411b8:	4b48      	ldr	r3, [pc, #288]	@ (100412dc <__aeabi_ddiv+0x21c>)
100411ba:	e7ed      	b.n	10041198 <__aeabi_ddiv+0xd8>
100411bc:	465a      	mov	r2, fp
100411be:	9b00      	ldr	r3, [sp, #0]
100411c0:	431a      	orrs	r2, r3
100411c2:	4b49      	ldr	r3, [pc, #292]	@ (100412e8 <__aeabi_ddiv+0x228>)
100411c4:	469c      	mov	ip, r3
100411c6:	44e2      	add	sl, ip
100411c8:	2a00      	cmp	r2, #0
100411ca:	d159      	bne.n	10041280 <__aeabi_ddiv+0x1c0>
100411cc:	2302      	movs	r3, #2
100411ce:	431c      	orrs	r4, r3
100411d0:	2300      	movs	r3, #0
100411d2:	2102      	movs	r1, #2
100411d4:	469b      	mov	fp, r3
100411d6:	e7b8      	b.n	1004114a <__aeabi_ddiv+0x8a>
100411d8:	465a      	mov	r2, fp
100411da:	9b00      	ldr	r3, [sp, #0]
100411dc:	431a      	orrs	r2, r3
100411de:	d049      	beq.n	10041274 <__aeabi_ddiv+0x1b4>
100411e0:	465b      	mov	r3, fp
100411e2:	2b00      	cmp	r3, #0
100411e4:	d100      	bne.n	100411e8 <__aeabi_ddiv+0x128>
100411e6:	e19c      	b.n	10041522 <__aeabi_ddiv+0x462>
100411e8:	4658      	mov	r0, fp
100411ea:	f7ff f9fd 	bl	100405e8 <__clzsi2>
100411ee:	0002      	movs	r2, r0
100411f0:	0003      	movs	r3, r0
100411f2:	3a0b      	subs	r2, #11
100411f4:	271d      	movs	r7, #29
100411f6:	9e00      	ldr	r6, [sp, #0]
100411f8:	1aba      	subs	r2, r7, r2
100411fa:	0019      	movs	r1, r3
100411fc:	4658      	mov	r0, fp
100411fe:	40d6      	lsrs	r6, r2
10041200:	3908      	subs	r1, #8
10041202:	4088      	lsls	r0, r1
10041204:	0032      	movs	r2, r6
10041206:	4302      	orrs	r2, r0
10041208:	4693      	mov	fp, r2
1004120a:	9a00      	ldr	r2, [sp, #0]
1004120c:	408a      	lsls	r2, r1
1004120e:	4937      	ldr	r1, [pc, #220]	@ (100412ec <__aeabi_ddiv+0x22c>)
10041210:	4453      	add	r3, sl
10041212:	468a      	mov	sl, r1
10041214:	2100      	movs	r1, #0
10041216:	449a      	add	sl, r3
10041218:	e797      	b.n	1004114a <__aeabi_ddiv+0x8a>
1004121a:	465b      	mov	r3, fp
1004121c:	4303      	orrs	r3, r0
1004121e:	4699      	mov	r9, r3
10041220:	d021      	beq.n	10041266 <__aeabi_ddiv+0x1a6>
10041222:	465b      	mov	r3, fp
10041224:	2b00      	cmp	r3, #0
10041226:	d100      	bne.n	1004122a <__aeabi_ddiv+0x16a>
10041228:	e169      	b.n	100414fe <__aeabi_ddiv+0x43e>
1004122a:	4658      	mov	r0, fp
1004122c:	f7ff f9dc 	bl	100405e8 <__clzsi2>
10041230:	230b      	movs	r3, #11
10041232:	425b      	negs	r3, r3
10041234:	469c      	mov	ip, r3
10041236:	0002      	movs	r2, r0
10041238:	4484      	add	ip, r0
1004123a:	4666      	mov	r6, ip
1004123c:	231d      	movs	r3, #29
1004123e:	1b9b      	subs	r3, r3, r6
10041240:	0026      	movs	r6, r4
10041242:	0011      	movs	r1, r2
10041244:	4658      	mov	r0, fp
10041246:	40de      	lsrs	r6, r3
10041248:	3908      	subs	r1, #8
1004124a:	4088      	lsls	r0, r1
1004124c:	0033      	movs	r3, r6
1004124e:	4303      	orrs	r3, r0
10041250:	4699      	mov	r9, r3
10041252:	0023      	movs	r3, r4
10041254:	408b      	lsls	r3, r1
10041256:	4698      	mov	r8, r3
10041258:	4b25      	ldr	r3, [pc, #148]	@ (100412f0 <__aeabi_ddiv+0x230>)
1004125a:	2400      	movs	r4, #0
1004125c:	1a9b      	subs	r3, r3, r2
1004125e:	469a      	mov	sl, r3
10041260:	2300      	movs	r3, #0
10041262:	9303      	str	r3, [sp, #12]
10041264:	e753      	b.n	1004110e <__aeabi_ddiv+0x4e>
10041266:	2300      	movs	r3, #0
10041268:	4698      	mov	r8, r3
1004126a:	469a      	mov	sl, r3
1004126c:	3301      	adds	r3, #1
1004126e:	2404      	movs	r4, #4
10041270:	9303      	str	r3, [sp, #12]
10041272:	e74c      	b.n	1004110e <__aeabi_ddiv+0x4e>
10041274:	2301      	movs	r3, #1
10041276:	431c      	orrs	r4, r3
10041278:	2300      	movs	r3, #0
1004127a:	2101      	movs	r1, #1
1004127c:	469b      	mov	fp, r3
1004127e:	e764      	b.n	1004114a <__aeabi_ddiv+0x8a>
10041280:	2303      	movs	r3, #3
10041282:	0032      	movs	r2, r6
10041284:	2103      	movs	r1, #3
10041286:	431c      	orrs	r4, r3
10041288:	e75f      	b.n	1004114a <__aeabi_ddiv+0x8a>
1004128a:	469a      	mov	sl, r3
1004128c:	2303      	movs	r3, #3
1004128e:	46d9      	mov	r9, fp
10041290:	240c      	movs	r4, #12
10041292:	9303      	str	r3, [sp, #12]
10041294:	e73b      	b.n	1004110e <__aeabi_ddiv+0x4e>
10041296:	2300      	movs	r3, #0
10041298:	2480      	movs	r4, #128	@ 0x80
1004129a:	4698      	mov	r8, r3
1004129c:	2600      	movs	r6, #0
1004129e:	4b0f      	ldr	r3, [pc, #60]	@ (100412dc <__aeabi_ddiv+0x21c>)
100412a0:	0324      	lsls	r4, r4, #12
100412a2:	e779      	b.n	10041198 <__aeabi_ddiv+0xd8>
100412a4:	2480      	movs	r4, #128	@ 0x80
100412a6:	465b      	mov	r3, fp
100412a8:	0324      	lsls	r4, r4, #12
100412aa:	431c      	orrs	r4, r3
100412ac:	0324      	lsls	r4, r4, #12
100412ae:	002e      	movs	r6, r5
100412b0:	4690      	mov	r8, r2
100412b2:	4b0a      	ldr	r3, [pc, #40]	@ (100412dc <__aeabi_ddiv+0x21c>)
100412b4:	0b24      	lsrs	r4, r4, #12
100412b6:	e76f      	b.n	10041198 <__aeabi_ddiv+0xd8>
100412b8:	2480      	movs	r4, #128	@ 0x80
100412ba:	464b      	mov	r3, r9
100412bc:	0324      	lsls	r4, r4, #12
100412be:	4223      	tst	r3, r4
100412c0:	d002      	beq.n	100412c8 <__aeabi_ddiv+0x208>
100412c2:	465b      	mov	r3, fp
100412c4:	4223      	tst	r3, r4
100412c6:	d0f0      	beq.n	100412aa <__aeabi_ddiv+0x1ea>
100412c8:	2480      	movs	r4, #128	@ 0x80
100412ca:	464b      	mov	r3, r9
100412cc:	0324      	lsls	r4, r4, #12
100412ce:	431c      	orrs	r4, r3
100412d0:	0324      	lsls	r4, r4, #12
100412d2:	9e02      	ldr	r6, [sp, #8]
100412d4:	4b01      	ldr	r3, [pc, #4]	@ (100412dc <__aeabi_ddiv+0x21c>)
100412d6:	0b24      	lsrs	r4, r4, #12
100412d8:	e75e      	b.n	10041198 <__aeabi_ddiv+0xd8>
100412da:	46c0      	nop			@ (mov r8, r8)
100412dc:	000007ff 	.word	0x000007ff
100412e0:	fffffc01 	.word	0xfffffc01
100412e4:	1006c990 	.word	0x1006c990
100412e8:	fffff801 	.word	0xfffff801
100412ec:	000003f3 	.word	0x000003f3
100412f0:	fffffc0d 	.word	0xfffffc0d
100412f4:	45cb      	cmp	fp, r9
100412f6:	d200      	bcs.n	100412fa <__aeabi_ddiv+0x23a>
100412f8:	e0f8      	b.n	100414ec <__aeabi_ddiv+0x42c>
100412fa:	d100      	bne.n	100412fe <__aeabi_ddiv+0x23e>
100412fc:	e0f3      	b.n	100414e6 <__aeabi_ddiv+0x426>
100412fe:	2301      	movs	r3, #1
10041300:	425b      	negs	r3, r3
10041302:	469c      	mov	ip, r3
10041304:	4644      	mov	r4, r8
10041306:	4648      	mov	r0, r9
10041308:	2500      	movs	r5, #0
1004130a:	44e2      	add	sl, ip
1004130c:	465b      	mov	r3, fp
1004130e:	0e17      	lsrs	r7, r2, #24
10041310:	021b      	lsls	r3, r3, #8
10041312:	431f      	orrs	r7, r3
10041314:	0c19      	lsrs	r1, r3, #16
10041316:	043b      	lsls	r3, r7, #16
10041318:	0212      	lsls	r2, r2, #8
1004131a:	9700      	str	r7, [sp, #0]
1004131c:	0c1f      	lsrs	r7, r3, #16
1004131e:	4691      	mov	r9, r2
10041320:	9102      	str	r1, [sp, #8]
10041322:	9703      	str	r7, [sp, #12]
10041324:	f7ff f826 	bl	10040374 <__aeabi_uidivmod>
10041328:	0002      	movs	r2, r0
1004132a:	437a      	muls	r2, r7
1004132c:	040b      	lsls	r3, r1, #16
1004132e:	0c21      	lsrs	r1, r4, #16
10041330:	4680      	mov	r8, r0
10041332:	4319      	orrs	r1, r3
10041334:	428a      	cmp	r2, r1
10041336:	d909      	bls.n	1004134c <__aeabi_ddiv+0x28c>
10041338:	9f00      	ldr	r7, [sp, #0]
1004133a:	2301      	movs	r3, #1
1004133c:	46bc      	mov	ip, r7
1004133e:	425b      	negs	r3, r3
10041340:	4461      	add	r1, ip
10041342:	469c      	mov	ip, r3
10041344:	44e0      	add	r8, ip
10041346:	428f      	cmp	r7, r1
10041348:	d800      	bhi.n	1004134c <__aeabi_ddiv+0x28c>
1004134a:	e15c      	b.n	10041606 <__aeabi_ddiv+0x546>
1004134c:	1a88      	subs	r0, r1, r2
1004134e:	9902      	ldr	r1, [sp, #8]
10041350:	f7ff f810 	bl	10040374 <__aeabi_uidivmod>
10041354:	9a03      	ldr	r2, [sp, #12]
10041356:	0424      	lsls	r4, r4, #16
10041358:	4342      	muls	r2, r0
1004135a:	0409      	lsls	r1, r1, #16
1004135c:	0c24      	lsrs	r4, r4, #16
1004135e:	0003      	movs	r3, r0
10041360:	430c      	orrs	r4, r1
10041362:	42a2      	cmp	r2, r4
10041364:	d906      	bls.n	10041374 <__aeabi_ddiv+0x2b4>
10041366:	9900      	ldr	r1, [sp, #0]
10041368:	3b01      	subs	r3, #1
1004136a:	468c      	mov	ip, r1
1004136c:	4464      	add	r4, ip
1004136e:	42a1      	cmp	r1, r4
10041370:	d800      	bhi.n	10041374 <__aeabi_ddiv+0x2b4>
10041372:	e142      	b.n	100415fa <__aeabi_ddiv+0x53a>
10041374:	1aa0      	subs	r0, r4, r2
10041376:	4642      	mov	r2, r8
10041378:	0412      	lsls	r2, r2, #16
1004137a:	431a      	orrs	r2, r3
1004137c:	4693      	mov	fp, r2
1004137e:	464b      	mov	r3, r9
10041380:	4659      	mov	r1, fp
10041382:	0c1b      	lsrs	r3, r3, #16
10041384:	001f      	movs	r7, r3
10041386:	9304      	str	r3, [sp, #16]
10041388:	040b      	lsls	r3, r1, #16
1004138a:	4649      	mov	r1, r9
1004138c:	0409      	lsls	r1, r1, #16
1004138e:	0c09      	lsrs	r1, r1, #16
10041390:	000c      	movs	r4, r1
10041392:	0c1b      	lsrs	r3, r3, #16
10041394:	435c      	muls	r4, r3
10041396:	0c12      	lsrs	r2, r2, #16
10041398:	437b      	muls	r3, r7
1004139a:	4688      	mov	r8, r1
1004139c:	4351      	muls	r1, r2
1004139e:	437a      	muls	r2, r7
100413a0:	0c27      	lsrs	r7, r4, #16
100413a2:	46bc      	mov	ip, r7
100413a4:	185b      	adds	r3, r3, r1
100413a6:	4463      	add	r3, ip
100413a8:	4299      	cmp	r1, r3
100413aa:	d903      	bls.n	100413b4 <__aeabi_ddiv+0x2f4>
100413ac:	2180      	movs	r1, #128	@ 0x80
100413ae:	0249      	lsls	r1, r1, #9
100413b0:	468c      	mov	ip, r1
100413b2:	4462      	add	r2, ip
100413b4:	0c19      	lsrs	r1, r3, #16
100413b6:	0424      	lsls	r4, r4, #16
100413b8:	041b      	lsls	r3, r3, #16
100413ba:	0c24      	lsrs	r4, r4, #16
100413bc:	188a      	adds	r2, r1, r2
100413be:	191c      	adds	r4, r3, r4
100413c0:	4290      	cmp	r0, r2
100413c2:	d302      	bcc.n	100413ca <__aeabi_ddiv+0x30a>
100413c4:	d116      	bne.n	100413f4 <__aeabi_ddiv+0x334>
100413c6:	42a5      	cmp	r5, r4
100413c8:	d214      	bcs.n	100413f4 <__aeabi_ddiv+0x334>
100413ca:	465b      	mov	r3, fp
100413cc:	9f00      	ldr	r7, [sp, #0]
100413ce:	3b01      	subs	r3, #1
100413d0:	444d      	add	r5, r9
100413d2:	9305      	str	r3, [sp, #20]
100413d4:	454d      	cmp	r5, r9
100413d6:	419b      	sbcs	r3, r3
100413d8:	46bc      	mov	ip, r7
100413da:	425b      	negs	r3, r3
100413dc:	4463      	add	r3, ip
100413de:	18c0      	adds	r0, r0, r3
100413e0:	4287      	cmp	r7, r0
100413e2:	d300      	bcc.n	100413e6 <__aeabi_ddiv+0x326>
100413e4:	e102      	b.n	100415ec <__aeabi_ddiv+0x52c>
100413e6:	4282      	cmp	r2, r0
100413e8:	d900      	bls.n	100413ec <__aeabi_ddiv+0x32c>
100413ea:	e129      	b.n	10041640 <__aeabi_ddiv+0x580>
100413ec:	d100      	bne.n	100413f0 <__aeabi_ddiv+0x330>
100413ee:	e124      	b.n	1004163a <__aeabi_ddiv+0x57a>
100413f0:	9b05      	ldr	r3, [sp, #20]
100413f2:	469b      	mov	fp, r3
100413f4:	1b2c      	subs	r4, r5, r4
100413f6:	42a5      	cmp	r5, r4
100413f8:	41ad      	sbcs	r5, r5
100413fa:	9b00      	ldr	r3, [sp, #0]
100413fc:	1a80      	subs	r0, r0, r2
100413fe:	426d      	negs	r5, r5
10041400:	1b40      	subs	r0, r0, r5
10041402:	4283      	cmp	r3, r0
10041404:	d100      	bne.n	10041408 <__aeabi_ddiv+0x348>
10041406:	e10f      	b.n	10041628 <__aeabi_ddiv+0x568>
10041408:	9902      	ldr	r1, [sp, #8]
1004140a:	f7fe ffb3 	bl	10040374 <__aeabi_uidivmod>
1004140e:	9a03      	ldr	r2, [sp, #12]
10041410:	040b      	lsls	r3, r1, #16
10041412:	4342      	muls	r2, r0
10041414:	0c21      	lsrs	r1, r4, #16
10041416:	0005      	movs	r5, r0
10041418:	4319      	orrs	r1, r3
1004141a:	428a      	cmp	r2, r1
1004141c:	d900      	bls.n	10041420 <__aeabi_ddiv+0x360>
1004141e:	e0cb      	b.n	100415b8 <__aeabi_ddiv+0x4f8>
10041420:	1a88      	subs	r0, r1, r2
10041422:	9902      	ldr	r1, [sp, #8]
10041424:	f7fe ffa6 	bl	10040374 <__aeabi_uidivmod>
10041428:	9a03      	ldr	r2, [sp, #12]
1004142a:	0424      	lsls	r4, r4, #16
1004142c:	4342      	muls	r2, r0
1004142e:	0409      	lsls	r1, r1, #16
10041430:	0c24      	lsrs	r4, r4, #16
10041432:	0003      	movs	r3, r0
10041434:	430c      	orrs	r4, r1
10041436:	42a2      	cmp	r2, r4
10041438:	d900      	bls.n	1004143c <__aeabi_ddiv+0x37c>
1004143a:	e0ca      	b.n	100415d2 <__aeabi_ddiv+0x512>
1004143c:	4641      	mov	r1, r8
1004143e:	1aa4      	subs	r4, r4, r2
10041440:	042a      	lsls	r2, r5, #16
10041442:	431a      	orrs	r2, r3
10041444:	9f04      	ldr	r7, [sp, #16]
10041446:	0413      	lsls	r3, r2, #16
10041448:	0c1b      	lsrs	r3, r3, #16
1004144a:	4359      	muls	r1, r3
1004144c:	4640      	mov	r0, r8
1004144e:	437b      	muls	r3, r7
10041450:	469c      	mov	ip, r3
10041452:	0c15      	lsrs	r5, r2, #16
10041454:	4368      	muls	r0, r5
10041456:	0c0b      	lsrs	r3, r1, #16
10041458:	4484      	add	ip, r0
1004145a:	4463      	add	r3, ip
1004145c:	437d      	muls	r5, r7
1004145e:	4298      	cmp	r0, r3
10041460:	d903      	bls.n	1004146a <__aeabi_ddiv+0x3aa>
10041462:	2080      	movs	r0, #128	@ 0x80
10041464:	0240      	lsls	r0, r0, #9
10041466:	4684      	mov	ip, r0
10041468:	4465      	add	r5, ip
1004146a:	0c18      	lsrs	r0, r3, #16
1004146c:	0409      	lsls	r1, r1, #16
1004146e:	041b      	lsls	r3, r3, #16
10041470:	0c09      	lsrs	r1, r1, #16
10041472:	1940      	adds	r0, r0, r5
10041474:	185b      	adds	r3, r3, r1
10041476:	4284      	cmp	r4, r0
10041478:	d327      	bcc.n	100414ca <__aeabi_ddiv+0x40a>
1004147a:	d023      	beq.n	100414c4 <__aeabi_ddiv+0x404>
1004147c:	2301      	movs	r3, #1
1004147e:	0035      	movs	r5, r6
10041480:	431a      	orrs	r2, r3
10041482:	4b94      	ldr	r3, [pc, #592]	@ (100416d4 <__aeabi_ddiv+0x614>)
10041484:	4453      	add	r3, sl
10041486:	2b00      	cmp	r3, #0
10041488:	dd60      	ble.n	1004154c <__aeabi_ddiv+0x48c>
1004148a:	0751      	lsls	r1, r2, #29
1004148c:	d000      	beq.n	10041490 <__aeabi_ddiv+0x3d0>
1004148e:	e086      	b.n	1004159e <__aeabi_ddiv+0x4de>
10041490:	002e      	movs	r6, r5
10041492:	08d1      	lsrs	r1, r2, #3
10041494:	465a      	mov	r2, fp
10041496:	01d2      	lsls	r2, r2, #7
10041498:	d506      	bpl.n	100414a8 <__aeabi_ddiv+0x3e8>
1004149a:	465a      	mov	r2, fp
1004149c:	4b8e      	ldr	r3, [pc, #568]	@ (100416d8 <__aeabi_ddiv+0x618>)
1004149e:	401a      	ands	r2, r3
100414a0:	2380      	movs	r3, #128	@ 0x80
100414a2:	4693      	mov	fp, r2
100414a4:	00db      	lsls	r3, r3, #3
100414a6:	4453      	add	r3, sl
100414a8:	4a8c      	ldr	r2, [pc, #560]	@ (100416dc <__aeabi_ddiv+0x61c>)
100414aa:	4293      	cmp	r3, r2
100414ac:	dd00      	ble.n	100414b0 <__aeabi_ddiv+0x3f0>
100414ae:	e680      	b.n	100411b2 <__aeabi_ddiv+0xf2>
100414b0:	465a      	mov	r2, fp
100414b2:	0752      	lsls	r2, r2, #29
100414b4:	430a      	orrs	r2, r1
100414b6:	4690      	mov	r8, r2
100414b8:	465a      	mov	r2, fp
100414ba:	055b      	lsls	r3, r3, #21
100414bc:	0254      	lsls	r4, r2, #9
100414be:	0b24      	lsrs	r4, r4, #12
100414c0:	0d5b      	lsrs	r3, r3, #21
100414c2:	e669      	b.n	10041198 <__aeabi_ddiv+0xd8>
100414c4:	0035      	movs	r5, r6
100414c6:	2b00      	cmp	r3, #0
100414c8:	d0db      	beq.n	10041482 <__aeabi_ddiv+0x3c2>
100414ca:	9d00      	ldr	r5, [sp, #0]
100414cc:	1e51      	subs	r1, r2, #1
100414ce:	46ac      	mov	ip, r5
100414d0:	4464      	add	r4, ip
100414d2:	42ac      	cmp	r4, r5
100414d4:	d200      	bcs.n	100414d8 <__aeabi_ddiv+0x418>
100414d6:	e09e      	b.n	10041616 <__aeabi_ddiv+0x556>
100414d8:	4284      	cmp	r4, r0
100414da:	d200      	bcs.n	100414de <__aeabi_ddiv+0x41e>
100414dc:	e0e1      	b.n	100416a2 <__aeabi_ddiv+0x5e2>
100414de:	d100      	bne.n	100414e2 <__aeabi_ddiv+0x422>
100414e0:	e0ee      	b.n	100416c0 <__aeabi_ddiv+0x600>
100414e2:	000a      	movs	r2, r1
100414e4:	e7ca      	b.n	1004147c <__aeabi_ddiv+0x3bc>
100414e6:	4542      	cmp	r2, r8
100414e8:	d900      	bls.n	100414ec <__aeabi_ddiv+0x42c>
100414ea:	e708      	b.n	100412fe <__aeabi_ddiv+0x23e>
100414ec:	464b      	mov	r3, r9
100414ee:	07dc      	lsls	r4, r3, #31
100414f0:	0858      	lsrs	r0, r3, #1
100414f2:	4643      	mov	r3, r8
100414f4:	085b      	lsrs	r3, r3, #1
100414f6:	431c      	orrs	r4, r3
100414f8:	4643      	mov	r3, r8
100414fa:	07dd      	lsls	r5, r3, #31
100414fc:	e706      	b.n	1004130c <__aeabi_ddiv+0x24c>
100414fe:	f7ff f873 	bl	100405e8 <__clzsi2>
10041502:	2315      	movs	r3, #21
10041504:	469c      	mov	ip, r3
10041506:	4484      	add	ip, r0
10041508:	0002      	movs	r2, r0
1004150a:	4663      	mov	r3, ip
1004150c:	3220      	adds	r2, #32
1004150e:	2b1c      	cmp	r3, #28
10041510:	dc00      	bgt.n	10041514 <__aeabi_ddiv+0x454>
10041512:	e692      	b.n	1004123a <__aeabi_ddiv+0x17a>
10041514:	0023      	movs	r3, r4
10041516:	3808      	subs	r0, #8
10041518:	4083      	lsls	r3, r0
1004151a:	4699      	mov	r9, r3
1004151c:	2300      	movs	r3, #0
1004151e:	4698      	mov	r8, r3
10041520:	e69a      	b.n	10041258 <__aeabi_ddiv+0x198>
10041522:	f7ff f861 	bl	100405e8 <__clzsi2>
10041526:	0002      	movs	r2, r0
10041528:	0003      	movs	r3, r0
1004152a:	3215      	adds	r2, #21
1004152c:	3320      	adds	r3, #32
1004152e:	2a1c      	cmp	r2, #28
10041530:	dc00      	bgt.n	10041534 <__aeabi_ddiv+0x474>
10041532:	e65f      	b.n	100411f4 <__aeabi_ddiv+0x134>
10041534:	9900      	ldr	r1, [sp, #0]
10041536:	3808      	subs	r0, #8
10041538:	4081      	lsls	r1, r0
1004153a:	2200      	movs	r2, #0
1004153c:	468b      	mov	fp, r1
1004153e:	e666      	b.n	1004120e <__aeabi_ddiv+0x14e>
10041540:	2200      	movs	r2, #0
10041542:	002e      	movs	r6, r5
10041544:	2400      	movs	r4, #0
10041546:	4690      	mov	r8, r2
10041548:	4b65      	ldr	r3, [pc, #404]	@ (100416e0 <__aeabi_ddiv+0x620>)
1004154a:	e625      	b.n	10041198 <__aeabi_ddiv+0xd8>
1004154c:	002e      	movs	r6, r5
1004154e:	2101      	movs	r1, #1
10041550:	1ac9      	subs	r1, r1, r3
10041552:	2938      	cmp	r1, #56	@ 0x38
10041554:	dd00      	ble.n	10041558 <__aeabi_ddiv+0x498>
10041556:	e61b      	b.n	10041190 <__aeabi_ddiv+0xd0>
10041558:	291f      	cmp	r1, #31
1004155a:	dc7e      	bgt.n	1004165a <__aeabi_ddiv+0x59a>
1004155c:	4861      	ldr	r0, [pc, #388]	@ (100416e4 <__aeabi_ddiv+0x624>)
1004155e:	0014      	movs	r4, r2
10041560:	4450      	add	r0, sl
10041562:	465b      	mov	r3, fp
10041564:	4082      	lsls	r2, r0
10041566:	4083      	lsls	r3, r0
10041568:	40cc      	lsrs	r4, r1
1004156a:	1e50      	subs	r0, r2, #1
1004156c:	4182      	sbcs	r2, r0
1004156e:	4323      	orrs	r3, r4
10041570:	431a      	orrs	r2, r3
10041572:	465b      	mov	r3, fp
10041574:	40cb      	lsrs	r3, r1
10041576:	0751      	lsls	r1, r2, #29
10041578:	d009      	beq.n	1004158e <__aeabi_ddiv+0x4ce>
1004157a:	210f      	movs	r1, #15
1004157c:	4011      	ands	r1, r2
1004157e:	2904      	cmp	r1, #4
10041580:	d005      	beq.n	1004158e <__aeabi_ddiv+0x4ce>
10041582:	1d11      	adds	r1, r2, #4
10041584:	4291      	cmp	r1, r2
10041586:	4192      	sbcs	r2, r2
10041588:	4252      	negs	r2, r2
1004158a:	189b      	adds	r3, r3, r2
1004158c:	000a      	movs	r2, r1
1004158e:	0219      	lsls	r1, r3, #8
10041590:	d400      	bmi.n	10041594 <__aeabi_ddiv+0x4d4>
10041592:	e09b      	b.n	100416cc <__aeabi_ddiv+0x60c>
10041594:	2200      	movs	r2, #0
10041596:	2301      	movs	r3, #1
10041598:	2400      	movs	r4, #0
1004159a:	4690      	mov	r8, r2
1004159c:	e5fc      	b.n	10041198 <__aeabi_ddiv+0xd8>
1004159e:	210f      	movs	r1, #15
100415a0:	4011      	ands	r1, r2
100415a2:	2904      	cmp	r1, #4
100415a4:	d100      	bne.n	100415a8 <__aeabi_ddiv+0x4e8>
100415a6:	e773      	b.n	10041490 <__aeabi_ddiv+0x3d0>
100415a8:	1d11      	adds	r1, r2, #4
100415aa:	4291      	cmp	r1, r2
100415ac:	4192      	sbcs	r2, r2
100415ae:	4252      	negs	r2, r2
100415b0:	002e      	movs	r6, r5
100415b2:	08c9      	lsrs	r1, r1, #3
100415b4:	4493      	add	fp, r2
100415b6:	e76d      	b.n	10041494 <__aeabi_ddiv+0x3d4>
100415b8:	9b00      	ldr	r3, [sp, #0]
100415ba:	3d01      	subs	r5, #1
100415bc:	469c      	mov	ip, r3
100415be:	4461      	add	r1, ip
100415c0:	428b      	cmp	r3, r1
100415c2:	d900      	bls.n	100415c6 <__aeabi_ddiv+0x506>
100415c4:	e72c      	b.n	10041420 <__aeabi_ddiv+0x360>
100415c6:	428a      	cmp	r2, r1
100415c8:	d800      	bhi.n	100415cc <__aeabi_ddiv+0x50c>
100415ca:	e729      	b.n	10041420 <__aeabi_ddiv+0x360>
100415cc:	1e85      	subs	r5, r0, #2
100415ce:	4461      	add	r1, ip
100415d0:	e726      	b.n	10041420 <__aeabi_ddiv+0x360>
100415d2:	9900      	ldr	r1, [sp, #0]
100415d4:	3b01      	subs	r3, #1
100415d6:	468c      	mov	ip, r1
100415d8:	4464      	add	r4, ip
100415da:	42a1      	cmp	r1, r4
100415dc:	d900      	bls.n	100415e0 <__aeabi_ddiv+0x520>
100415de:	e72d      	b.n	1004143c <__aeabi_ddiv+0x37c>
100415e0:	42a2      	cmp	r2, r4
100415e2:	d800      	bhi.n	100415e6 <__aeabi_ddiv+0x526>
100415e4:	e72a      	b.n	1004143c <__aeabi_ddiv+0x37c>
100415e6:	1e83      	subs	r3, r0, #2
100415e8:	4464      	add	r4, ip
100415ea:	e727      	b.n	1004143c <__aeabi_ddiv+0x37c>
100415ec:	4287      	cmp	r7, r0
100415ee:	d000      	beq.n	100415f2 <__aeabi_ddiv+0x532>
100415f0:	e6fe      	b.n	100413f0 <__aeabi_ddiv+0x330>
100415f2:	45a9      	cmp	r9, r5
100415f4:	d900      	bls.n	100415f8 <__aeabi_ddiv+0x538>
100415f6:	e6fb      	b.n	100413f0 <__aeabi_ddiv+0x330>
100415f8:	e6f5      	b.n	100413e6 <__aeabi_ddiv+0x326>
100415fa:	42a2      	cmp	r2, r4
100415fc:	d800      	bhi.n	10041600 <__aeabi_ddiv+0x540>
100415fe:	e6b9      	b.n	10041374 <__aeabi_ddiv+0x2b4>
10041600:	1e83      	subs	r3, r0, #2
10041602:	4464      	add	r4, ip
10041604:	e6b6      	b.n	10041374 <__aeabi_ddiv+0x2b4>
10041606:	428a      	cmp	r2, r1
10041608:	d800      	bhi.n	1004160c <__aeabi_ddiv+0x54c>
1004160a:	e69f      	b.n	1004134c <__aeabi_ddiv+0x28c>
1004160c:	46bc      	mov	ip, r7
1004160e:	1e83      	subs	r3, r0, #2
10041610:	4698      	mov	r8, r3
10041612:	4461      	add	r1, ip
10041614:	e69a      	b.n	1004134c <__aeabi_ddiv+0x28c>
10041616:	000a      	movs	r2, r1
10041618:	4284      	cmp	r4, r0
1004161a:	d000      	beq.n	1004161e <__aeabi_ddiv+0x55e>
1004161c:	e72e      	b.n	1004147c <__aeabi_ddiv+0x3bc>
1004161e:	454b      	cmp	r3, r9
10041620:	d000      	beq.n	10041624 <__aeabi_ddiv+0x564>
10041622:	e72b      	b.n	1004147c <__aeabi_ddiv+0x3bc>
10041624:	0035      	movs	r5, r6
10041626:	e72c      	b.n	10041482 <__aeabi_ddiv+0x3c2>
10041628:	4b2a      	ldr	r3, [pc, #168]	@ (100416d4 <__aeabi_ddiv+0x614>)
1004162a:	4a2f      	ldr	r2, [pc, #188]	@ (100416e8 <__aeabi_ddiv+0x628>)
1004162c:	4453      	add	r3, sl
1004162e:	4592      	cmp	sl, r2
10041630:	db43      	blt.n	100416ba <__aeabi_ddiv+0x5fa>
10041632:	2201      	movs	r2, #1
10041634:	2100      	movs	r1, #0
10041636:	4493      	add	fp, r2
10041638:	e72c      	b.n	10041494 <__aeabi_ddiv+0x3d4>
1004163a:	42ac      	cmp	r4, r5
1004163c:	d800      	bhi.n	10041640 <__aeabi_ddiv+0x580>
1004163e:	e6d7      	b.n	100413f0 <__aeabi_ddiv+0x330>
10041640:	2302      	movs	r3, #2
10041642:	425b      	negs	r3, r3
10041644:	469c      	mov	ip, r3
10041646:	9900      	ldr	r1, [sp, #0]
10041648:	444d      	add	r5, r9
1004164a:	454d      	cmp	r5, r9
1004164c:	419b      	sbcs	r3, r3
1004164e:	44e3      	add	fp, ip
10041650:	468c      	mov	ip, r1
10041652:	425b      	negs	r3, r3
10041654:	4463      	add	r3, ip
10041656:	18c0      	adds	r0, r0, r3
10041658:	e6cc      	b.n	100413f4 <__aeabi_ddiv+0x334>
1004165a:	201f      	movs	r0, #31
1004165c:	4240      	negs	r0, r0
1004165e:	1ac3      	subs	r3, r0, r3
10041660:	4658      	mov	r0, fp
10041662:	40d8      	lsrs	r0, r3
10041664:	2920      	cmp	r1, #32
10041666:	d004      	beq.n	10041672 <__aeabi_ddiv+0x5b2>
10041668:	4659      	mov	r1, fp
1004166a:	4b20      	ldr	r3, [pc, #128]	@ (100416ec <__aeabi_ddiv+0x62c>)
1004166c:	4453      	add	r3, sl
1004166e:	4099      	lsls	r1, r3
10041670:	430a      	orrs	r2, r1
10041672:	1e53      	subs	r3, r2, #1
10041674:	419a      	sbcs	r2, r3
10041676:	2307      	movs	r3, #7
10041678:	0019      	movs	r1, r3
1004167a:	4302      	orrs	r2, r0
1004167c:	2400      	movs	r4, #0
1004167e:	4011      	ands	r1, r2
10041680:	4213      	tst	r3, r2
10041682:	d009      	beq.n	10041698 <__aeabi_ddiv+0x5d8>
10041684:	3308      	adds	r3, #8
10041686:	4013      	ands	r3, r2
10041688:	2b04      	cmp	r3, #4
1004168a:	d01d      	beq.n	100416c8 <__aeabi_ddiv+0x608>
1004168c:	1d13      	adds	r3, r2, #4
1004168e:	4293      	cmp	r3, r2
10041690:	4189      	sbcs	r1, r1
10041692:	001a      	movs	r2, r3
10041694:	4249      	negs	r1, r1
10041696:	0749      	lsls	r1, r1, #29
10041698:	08d2      	lsrs	r2, r2, #3
1004169a:	430a      	orrs	r2, r1
1004169c:	4690      	mov	r8, r2
1004169e:	2300      	movs	r3, #0
100416a0:	e57a      	b.n	10041198 <__aeabi_ddiv+0xd8>
100416a2:	4649      	mov	r1, r9
100416a4:	9f00      	ldr	r7, [sp, #0]
100416a6:	004d      	lsls	r5, r1, #1
100416a8:	454d      	cmp	r5, r9
100416aa:	4189      	sbcs	r1, r1
100416ac:	46bc      	mov	ip, r7
100416ae:	4249      	negs	r1, r1
100416b0:	4461      	add	r1, ip
100416b2:	46a9      	mov	r9, r5
100416b4:	3a02      	subs	r2, #2
100416b6:	1864      	adds	r4, r4, r1
100416b8:	e7ae      	b.n	10041618 <__aeabi_ddiv+0x558>
100416ba:	2201      	movs	r2, #1
100416bc:	4252      	negs	r2, r2
100416be:	e746      	b.n	1004154e <__aeabi_ddiv+0x48e>
100416c0:	4599      	cmp	r9, r3
100416c2:	d3ee      	bcc.n	100416a2 <__aeabi_ddiv+0x5e2>
100416c4:	000a      	movs	r2, r1
100416c6:	e7aa      	b.n	1004161e <__aeabi_ddiv+0x55e>
100416c8:	2100      	movs	r1, #0
100416ca:	e7e5      	b.n	10041698 <__aeabi_ddiv+0x5d8>
100416cc:	0759      	lsls	r1, r3, #29
100416ce:	025b      	lsls	r3, r3, #9
100416d0:	0b1c      	lsrs	r4, r3, #12
100416d2:	e7e1      	b.n	10041698 <__aeabi_ddiv+0x5d8>
100416d4:	000003ff 	.word	0x000003ff
100416d8:	feffffff 	.word	0xfeffffff
100416dc:	000007fe 	.word	0x000007fe
100416e0:	000007ff 	.word	0x000007ff
100416e4:	0000041e 	.word	0x0000041e
100416e8:	fffffc02 	.word	0xfffffc02
100416ec:	0000043e 	.word	0x0000043e

100416f0 <__eqdf2>:
100416f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100416f2:	4657      	mov	r7, sl
100416f4:	46de      	mov	lr, fp
100416f6:	464e      	mov	r6, r9
100416f8:	4645      	mov	r5, r8
100416fa:	b5e0      	push	{r5, r6, r7, lr}
100416fc:	000d      	movs	r5, r1
100416fe:	0004      	movs	r4, r0
10041700:	0fe8      	lsrs	r0, r5, #31
10041702:	4683      	mov	fp, r0
10041704:	0309      	lsls	r1, r1, #12
10041706:	0fd8      	lsrs	r0, r3, #31
10041708:	0b09      	lsrs	r1, r1, #12
1004170a:	4682      	mov	sl, r0
1004170c:	4819      	ldr	r0, [pc, #100]	@ (10041774 <__eqdf2+0x84>)
1004170e:	468c      	mov	ip, r1
10041710:	031f      	lsls	r7, r3, #12
10041712:	0069      	lsls	r1, r5, #1
10041714:	005e      	lsls	r6, r3, #1
10041716:	0d49      	lsrs	r1, r1, #21
10041718:	0b3f      	lsrs	r7, r7, #12
1004171a:	0d76      	lsrs	r6, r6, #21
1004171c:	4281      	cmp	r1, r0
1004171e:	d018      	beq.n	10041752 <__eqdf2+0x62>
10041720:	4286      	cmp	r6, r0
10041722:	d00f      	beq.n	10041744 <__eqdf2+0x54>
10041724:	2001      	movs	r0, #1
10041726:	42b1      	cmp	r1, r6
10041728:	d10d      	bne.n	10041746 <__eqdf2+0x56>
1004172a:	45bc      	cmp	ip, r7
1004172c:	d10b      	bne.n	10041746 <__eqdf2+0x56>
1004172e:	4294      	cmp	r4, r2
10041730:	d109      	bne.n	10041746 <__eqdf2+0x56>
10041732:	45d3      	cmp	fp, sl
10041734:	d01c      	beq.n	10041770 <__eqdf2+0x80>
10041736:	2900      	cmp	r1, #0
10041738:	d105      	bne.n	10041746 <__eqdf2+0x56>
1004173a:	4660      	mov	r0, ip
1004173c:	4320      	orrs	r0, r4
1004173e:	1e43      	subs	r3, r0, #1
10041740:	4198      	sbcs	r0, r3
10041742:	e000      	b.n	10041746 <__eqdf2+0x56>
10041744:	2001      	movs	r0, #1
10041746:	bcf0      	pop	{r4, r5, r6, r7}
10041748:	46bb      	mov	fp, r7
1004174a:	46b2      	mov	sl, r6
1004174c:	46a9      	mov	r9, r5
1004174e:	46a0      	mov	r8, r4
10041750:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041752:	2001      	movs	r0, #1
10041754:	428e      	cmp	r6, r1
10041756:	d1f6      	bne.n	10041746 <__eqdf2+0x56>
10041758:	4661      	mov	r1, ip
1004175a:	4339      	orrs	r1, r7
1004175c:	000f      	movs	r7, r1
1004175e:	4317      	orrs	r7, r2
10041760:	4327      	orrs	r7, r4
10041762:	d1f0      	bne.n	10041746 <__eqdf2+0x56>
10041764:	465b      	mov	r3, fp
10041766:	4652      	mov	r2, sl
10041768:	1a98      	subs	r0, r3, r2
1004176a:	1e43      	subs	r3, r0, #1
1004176c:	4198      	sbcs	r0, r3
1004176e:	e7ea      	b.n	10041746 <__eqdf2+0x56>
10041770:	2000      	movs	r0, #0
10041772:	e7e8      	b.n	10041746 <__eqdf2+0x56>
10041774:	000007ff 	.word	0x000007ff

10041778 <__gedf2>:
10041778:	b5f0      	push	{r4, r5, r6, r7, lr}
1004177a:	4657      	mov	r7, sl
1004177c:	464e      	mov	r6, r9
1004177e:	4645      	mov	r5, r8
10041780:	46de      	mov	lr, fp
10041782:	b5e0      	push	{r5, r6, r7, lr}
10041784:	000d      	movs	r5, r1
10041786:	030e      	lsls	r6, r1, #12
10041788:	0049      	lsls	r1, r1, #1
1004178a:	0d49      	lsrs	r1, r1, #21
1004178c:	468a      	mov	sl, r1
1004178e:	0fdf      	lsrs	r7, r3, #31
10041790:	0fe9      	lsrs	r1, r5, #31
10041792:	46bc      	mov	ip, r7
10041794:	b083      	sub	sp, #12
10041796:	4f2f      	ldr	r7, [pc, #188]	@ (10041854 <__gedf2+0xdc>)
10041798:	0004      	movs	r4, r0
1004179a:	4680      	mov	r8, r0
1004179c:	9101      	str	r1, [sp, #4]
1004179e:	0058      	lsls	r0, r3, #1
100417a0:	0319      	lsls	r1, r3, #12
100417a2:	4691      	mov	r9, r2
100417a4:	0b36      	lsrs	r6, r6, #12
100417a6:	0b09      	lsrs	r1, r1, #12
100417a8:	0d40      	lsrs	r0, r0, #21
100417aa:	45ba      	cmp	sl, r7
100417ac:	d01d      	beq.n	100417ea <__gedf2+0x72>
100417ae:	42b8      	cmp	r0, r7
100417b0:	d00d      	beq.n	100417ce <__gedf2+0x56>
100417b2:	4657      	mov	r7, sl
100417b4:	2f00      	cmp	r7, #0
100417b6:	d12a      	bne.n	1004180e <__gedf2+0x96>
100417b8:	4334      	orrs	r4, r6
100417ba:	2800      	cmp	r0, #0
100417bc:	d124      	bne.n	10041808 <__gedf2+0x90>
100417be:	430a      	orrs	r2, r1
100417c0:	d036      	beq.n	10041830 <__gedf2+0xb8>
100417c2:	2c00      	cmp	r4, #0
100417c4:	d141      	bne.n	1004184a <__gedf2+0xd2>
100417c6:	4663      	mov	r3, ip
100417c8:	0058      	lsls	r0, r3, #1
100417ca:	3801      	subs	r0, #1
100417cc:	e015      	b.n	100417fa <__gedf2+0x82>
100417ce:	4311      	orrs	r1, r2
100417d0:	d138      	bne.n	10041844 <__gedf2+0xcc>
100417d2:	4653      	mov	r3, sl
100417d4:	2b00      	cmp	r3, #0
100417d6:	d101      	bne.n	100417dc <__gedf2+0x64>
100417d8:	4326      	orrs	r6, r4
100417da:	d0f4      	beq.n	100417c6 <__gedf2+0x4e>
100417dc:	9b01      	ldr	r3, [sp, #4]
100417de:	4563      	cmp	r3, ip
100417e0:	d107      	bne.n	100417f2 <__gedf2+0x7a>
100417e2:	9b01      	ldr	r3, [sp, #4]
100417e4:	0058      	lsls	r0, r3, #1
100417e6:	3801      	subs	r0, #1
100417e8:	e007      	b.n	100417fa <__gedf2+0x82>
100417ea:	4326      	orrs	r6, r4
100417ec:	d12a      	bne.n	10041844 <__gedf2+0xcc>
100417ee:	4550      	cmp	r0, sl
100417f0:	d021      	beq.n	10041836 <__gedf2+0xbe>
100417f2:	2001      	movs	r0, #1
100417f4:	9b01      	ldr	r3, [sp, #4]
100417f6:	425f      	negs	r7, r3
100417f8:	4338      	orrs	r0, r7
100417fa:	b003      	add	sp, #12
100417fc:	bcf0      	pop	{r4, r5, r6, r7}
100417fe:	46bb      	mov	fp, r7
10041800:	46b2      	mov	sl, r6
10041802:	46a9      	mov	r9, r5
10041804:	46a0      	mov	r8, r4
10041806:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041808:	2c00      	cmp	r4, #0
1004180a:	d0dc      	beq.n	100417c6 <__gedf2+0x4e>
1004180c:	e7e6      	b.n	100417dc <__gedf2+0x64>
1004180e:	2800      	cmp	r0, #0
10041810:	d0ef      	beq.n	100417f2 <__gedf2+0x7a>
10041812:	9b01      	ldr	r3, [sp, #4]
10041814:	4563      	cmp	r3, ip
10041816:	d1ec      	bne.n	100417f2 <__gedf2+0x7a>
10041818:	4582      	cmp	sl, r0
1004181a:	dcea      	bgt.n	100417f2 <__gedf2+0x7a>
1004181c:	dbe1      	blt.n	100417e2 <__gedf2+0x6a>
1004181e:	428e      	cmp	r6, r1
10041820:	d8e7      	bhi.n	100417f2 <__gedf2+0x7a>
10041822:	d1de      	bne.n	100417e2 <__gedf2+0x6a>
10041824:	45c8      	cmp	r8, r9
10041826:	d8e4      	bhi.n	100417f2 <__gedf2+0x7a>
10041828:	2000      	movs	r0, #0
1004182a:	45c8      	cmp	r8, r9
1004182c:	d2e5      	bcs.n	100417fa <__gedf2+0x82>
1004182e:	e7d8      	b.n	100417e2 <__gedf2+0x6a>
10041830:	2c00      	cmp	r4, #0
10041832:	d0e2      	beq.n	100417fa <__gedf2+0x82>
10041834:	e7dd      	b.n	100417f2 <__gedf2+0x7a>
10041836:	4311      	orrs	r1, r2
10041838:	d104      	bne.n	10041844 <__gedf2+0xcc>
1004183a:	9b01      	ldr	r3, [sp, #4]
1004183c:	4563      	cmp	r3, ip
1004183e:	d1d8      	bne.n	100417f2 <__gedf2+0x7a>
10041840:	2000      	movs	r0, #0
10041842:	e7da      	b.n	100417fa <__gedf2+0x82>
10041844:	2002      	movs	r0, #2
10041846:	4240      	negs	r0, r0
10041848:	e7d7      	b.n	100417fa <__gedf2+0x82>
1004184a:	9b01      	ldr	r3, [sp, #4]
1004184c:	4563      	cmp	r3, ip
1004184e:	d0e6      	beq.n	1004181e <__gedf2+0xa6>
10041850:	e7cf      	b.n	100417f2 <__gedf2+0x7a>
10041852:	46c0      	nop			@ (mov r8, r8)
10041854:	000007ff 	.word	0x000007ff

10041858 <__ledf2>:
10041858:	b5f0      	push	{r4, r5, r6, r7, lr}
1004185a:	4657      	mov	r7, sl
1004185c:	464e      	mov	r6, r9
1004185e:	4645      	mov	r5, r8
10041860:	46de      	mov	lr, fp
10041862:	b5e0      	push	{r5, r6, r7, lr}
10041864:	000d      	movs	r5, r1
10041866:	030e      	lsls	r6, r1, #12
10041868:	0049      	lsls	r1, r1, #1
1004186a:	0d49      	lsrs	r1, r1, #21
1004186c:	468a      	mov	sl, r1
1004186e:	0fdf      	lsrs	r7, r3, #31
10041870:	0fe9      	lsrs	r1, r5, #31
10041872:	46bc      	mov	ip, r7
10041874:	b083      	sub	sp, #12
10041876:	4f2e      	ldr	r7, [pc, #184]	@ (10041930 <__ledf2+0xd8>)
10041878:	0004      	movs	r4, r0
1004187a:	4680      	mov	r8, r0
1004187c:	9101      	str	r1, [sp, #4]
1004187e:	0058      	lsls	r0, r3, #1
10041880:	0319      	lsls	r1, r3, #12
10041882:	4691      	mov	r9, r2
10041884:	0b36      	lsrs	r6, r6, #12
10041886:	0b09      	lsrs	r1, r1, #12
10041888:	0d40      	lsrs	r0, r0, #21
1004188a:	45ba      	cmp	sl, r7
1004188c:	d01e      	beq.n	100418cc <__ledf2+0x74>
1004188e:	42b8      	cmp	r0, r7
10041890:	d00d      	beq.n	100418ae <__ledf2+0x56>
10041892:	4657      	mov	r7, sl
10041894:	2f00      	cmp	r7, #0
10041896:	d127      	bne.n	100418e8 <__ledf2+0x90>
10041898:	4334      	orrs	r4, r6
1004189a:	2800      	cmp	r0, #0
1004189c:	d133      	bne.n	10041906 <__ledf2+0xae>
1004189e:	430a      	orrs	r2, r1
100418a0:	d034      	beq.n	1004190c <__ledf2+0xb4>
100418a2:	2c00      	cmp	r4, #0
100418a4:	d140      	bne.n	10041928 <__ledf2+0xd0>
100418a6:	4663      	mov	r3, ip
100418a8:	0058      	lsls	r0, r3, #1
100418aa:	3801      	subs	r0, #1
100418ac:	e015      	b.n	100418da <__ledf2+0x82>
100418ae:	4311      	orrs	r1, r2
100418b0:	d112      	bne.n	100418d8 <__ledf2+0x80>
100418b2:	4653      	mov	r3, sl
100418b4:	2b00      	cmp	r3, #0
100418b6:	d101      	bne.n	100418bc <__ledf2+0x64>
100418b8:	4326      	orrs	r6, r4
100418ba:	d0f4      	beq.n	100418a6 <__ledf2+0x4e>
100418bc:	9b01      	ldr	r3, [sp, #4]
100418be:	4563      	cmp	r3, ip
100418c0:	d01d      	beq.n	100418fe <__ledf2+0xa6>
100418c2:	2001      	movs	r0, #1
100418c4:	9b01      	ldr	r3, [sp, #4]
100418c6:	425f      	negs	r7, r3
100418c8:	4338      	orrs	r0, r7
100418ca:	e006      	b.n	100418da <__ledf2+0x82>
100418cc:	4326      	orrs	r6, r4
100418ce:	d103      	bne.n	100418d8 <__ledf2+0x80>
100418d0:	4550      	cmp	r0, sl
100418d2:	d1f6      	bne.n	100418c2 <__ledf2+0x6a>
100418d4:	4311      	orrs	r1, r2
100418d6:	d01c      	beq.n	10041912 <__ledf2+0xba>
100418d8:	2002      	movs	r0, #2
100418da:	b003      	add	sp, #12
100418dc:	bcf0      	pop	{r4, r5, r6, r7}
100418de:	46bb      	mov	fp, r7
100418e0:	46b2      	mov	sl, r6
100418e2:	46a9      	mov	r9, r5
100418e4:	46a0      	mov	r8, r4
100418e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100418e8:	2800      	cmp	r0, #0
100418ea:	d0ea      	beq.n	100418c2 <__ledf2+0x6a>
100418ec:	9b01      	ldr	r3, [sp, #4]
100418ee:	4563      	cmp	r3, ip
100418f0:	d1e7      	bne.n	100418c2 <__ledf2+0x6a>
100418f2:	4582      	cmp	sl, r0
100418f4:	dce5      	bgt.n	100418c2 <__ledf2+0x6a>
100418f6:	db02      	blt.n	100418fe <__ledf2+0xa6>
100418f8:	428e      	cmp	r6, r1
100418fa:	d8e2      	bhi.n	100418c2 <__ledf2+0x6a>
100418fc:	d00e      	beq.n	1004191c <__ledf2+0xc4>
100418fe:	9b01      	ldr	r3, [sp, #4]
10041900:	0058      	lsls	r0, r3, #1
10041902:	3801      	subs	r0, #1
10041904:	e7e9      	b.n	100418da <__ledf2+0x82>
10041906:	2c00      	cmp	r4, #0
10041908:	d0cd      	beq.n	100418a6 <__ledf2+0x4e>
1004190a:	e7d7      	b.n	100418bc <__ledf2+0x64>
1004190c:	2c00      	cmp	r4, #0
1004190e:	d0e4      	beq.n	100418da <__ledf2+0x82>
10041910:	e7d7      	b.n	100418c2 <__ledf2+0x6a>
10041912:	9b01      	ldr	r3, [sp, #4]
10041914:	2000      	movs	r0, #0
10041916:	4563      	cmp	r3, ip
10041918:	d0df      	beq.n	100418da <__ledf2+0x82>
1004191a:	e7d2      	b.n	100418c2 <__ledf2+0x6a>
1004191c:	45c8      	cmp	r8, r9
1004191e:	d8d0      	bhi.n	100418c2 <__ledf2+0x6a>
10041920:	2000      	movs	r0, #0
10041922:	45c8      	cmp	r8, r9
10041924:	d2d9      	bcs.n	100418da <__ledf2+0x82>
10041926:	e7ea      	b.n	100418fe <__ledf2+0xa6>
10041928:	9b01      	ldr	r3, [sp, #4]
1004192a:	4563      	cmp	r3, ip
1004192c:	d0e4      	beq.n	100418f8 <__ledf2+0xa0>
1004192e:	e7c8      	b.n	100418c2 <__ledf2+0x6a>
10041930:	000007ff 	.word	0x000007ff

10041934 <__aeabi_dmul>:
10041934:	b5f0      	push	{r4, r5, r6, r7, lr}
10041936:	4657      	mov	r7, sl
10041938:	464e      	mov	r6, r9
1004193a:	46de      	mov	lr, fp
1004193c:	4645      	mov	r5, r8
1004193e:	b5e0      	push	{r5, r6, r7, lr}
10041940:	001f      	movs	r7, r3
10041942:	030b      	lsls	r3, r1, #12
10041944:	0b1b      	lsrs	r3, r3, #12
10041946:	0016      	movs	r6, r2
10041948:	469a      	mov	sl, r3
1004194a:	0fca      	lsrs	r2, r1, #31
1004194c:	004b      	lsls	r3, r1, #1
1004194e:	0004      	movs	r4, r0
10041950:	4691      	mov	r9, r2
10041952:	b085      	sub	sp, #20
10041954:	0d5b      	lsrs	r3, r3, #21
10041956:	d100      	bne.n	1004195a <__aeabi_dmul+0x26>
10041958:	e1cf      	b.n	10041cfa <__aeabi_dmul+0x3c6>
1004195a:	4acd      	ldr	r2, [pc, #820]	@ (10041c90 <__aeabi_dmul+0x35c>)
1004195c:	4293      	cmp	r3, r2
1004195e:	d055      	beq.n	10041a0c <__aeabi_dmul+0xd8>
10041960:	4651      	mov	r1, sl
10041962:	0f42      	lsrs	r2, r0, #29
10041964:	00c9      	lsls	r1, r1, #3
10041966:	430a      	orrs	r2, r1
10041968:	2180      	movs	r1, #128	@ 0x80
1004196a:	0409      	lsls	r1, r1, #16
1004196c:	4311      	orrs	r1, r2
1004196e:	00c2      	lsls	r2, r0, #3
10041970:	4690      	mov	r8, r2
10041972:	4ac8      	ldr	r2, [pc, #800]	@ (10041c94 <__aeabi_dmul+0x360>)
10041974:	468a      	mov	sl, r1
10041976:	4693      	mov	fp, r2
10041978:	449b      	add	fp, r3
1004197a:	2300      	movs	r3, #0
1004197c:	2500      	movs	r5, #0
1004197e:	9302      	str	r3, [sp, #8]
10041980:	033c      	lsls	r4, r7, #12
10041982:	007b      	lsls	r3, r7, #1
10041984:	0ffa      	lsrs	r2, r7, #31
10041986:	9601      	str	r6, [sp, #4]
10041988:	0b24      	lsrs	r4, r4, #12
1004198a:	0d5b      	lsrs	r3, r3, #21
1004198c:	9200      	str	r2, [sp, #0]
1004198e:	d100      	bne.n	10041992 <__aeabi_dmul+0x5e>
10041990:	e188      	b.n	10041ca4 <__aeabi_dmul+0x370>
10041992:	4abf      	ldr	r2, [pc, #764]	@ (10041c90 <__aeabi_dmul+0x35c>)
10041994:	4293      	cmp	r3, r2
10041996:	d100      	bne.n	1004199a <__aeabi_dmul+0x66>
10041998:	e092      	b.n	10041ac0 <__aeabi_dmul+0x18c>
1004199a:	4abe      	ldr	r2, [pc, #760]	@ (10041c94 <__aeabi_dmul+0x360>)
1004199c:	4694      	mov	ip, r2
1004199e:	4463      	add	r3, ip
100419a0:	449b      	add	fp, r3
100419a2:	2d0a      	cmp	r5, #10
100419a4:	dc42      	bgt.n	10041a2c <__aeabi_dmul+0xf8>
100419a6:	00e4      	lsls	r4, r4, #3
100419a8:	0f73      	lsrs	r3, r6, #29
100419aa:	4323      	orrs	r3, r4
100419ac:	2480      	movs	r4, #128	@ 0x80
100419ae:	4649      	mov	r1, r9
100419b0:	0424      	lsls	r4, r4, #16
100419b2:	431c      	orrs	r4, r3
100419b4:	00f3      	lsls	r3, r6, #3
100419b6:	9301      	str	r3, [sp, #4]
100419b8:	9b00      	ldr	r3, [sp, #0]
100419ba:	2000      	movs	r0, #0
100419bc:	4059      	eors	r1, r3
100419be:	b2cb      	uxtb	r3, r1
100419c0:	9303      	str	r3, [sp, #12]
100419c2:	2d02      	cmp	r5, #2
100419c4:	dc00      	bgt.n	100419c8 <__aeabi_dmul+0x94>
100419c6:	e094      	b.n	10041af2 <__aeabi_dmul+0x1be>
100419c8:	2301      	movs	r3, #1
100419ca:	40ab      	lsls	r3, r5
100419cc:	001d      	movs	r5, r3
100419ce:	23a6      	movs	r3, #166	@ 0xa6
100419d0:	002a      	movs	r2, r5
100419d2:	00db      	lsls	r3, r3, #3
100419d4:	401a      	ands	r2, r3
100419d6:	421d      	tst	r5, r3
100419d8:	d000      	beq.n	100419dc <__aeabi_dmul+0xa8>
100419da:	e229      	b.n	10041e30 <__aeabi_dmul+0x4fc>
100419dc:	2390      	movs	r3, #144	@ 0x90
100419de:	009b      	lsls	r3, r3, #2
100419e0:	421d      	tst	r5, r3
100419e2:	d100      	bne.n	100419e6 <__aeabi_dmul+0xb2>
100419e4:	e24d      	b.n	10041e82 <__aeabi_dmul+0x54e>
100419e6:	2300      	movs	r3, #0
100419e8:	2480      	movs	r4, #128	@ 0x80
100419ea:	4699      	mov	r9, r3
100419ec:	0324      	lsls	r4, r4, #12
100419ee:	4ba8      	ldr	r3, [pc, #672]	@ (10041c90 <__aeabi_dmul+0x35c>)
100419f0:	0010      	movs	r0, r2
100419f2:	464a      	mov	r2, r9
100419f4:	051b      	lsls	r3, r3, #20
100419f6:	4323      	orrs	r3, r4
100419f8:	07d2      	lsls	r2, r2, #31
100419fa:	4313      	orrs	r3, r2
100419fc:	0019      	movs	r1, r3
100419fe:	b005      	add	sp, #20
10041a00:	bcf0      	pop	{r4, r5, r6, r7}
10041a02:	46bb      	mov	fp, r7
10041a04:	46b2      	mov	sl, r6
10041a06:	46a9      	mov	r9, r5
10041a08:	46a0      	mov	r8, r4
10041a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041a0c:	4652      	mov	r2, sl
10041a0e:	4302      	orrs	r2, r0
10041a10:	4690      	mov	r8, r2
10041a12:	d000      	beq.n	10041a16 <__aeabi_dmul+0xe2>
10041a14:	e1ac      	b.n	10041d70 <__aeabi_dmul+0x43c>
10041a16:	469b      	mov	fp, r3
10041a18:	2302      	movs	r3, #2
10041a1a:	4692      	mov	sl, r2
10041a1c:	2508      	movs	r5, #8
10041a1e:	9302      	str	r3, [sp, #8]
10041a20:	e7ae      	b.n	10041980 <__aeabi_dmul+0x4c>
10041a22:	9b00      	ldr	r3, [sp, #0]
10041a24:	46a2      	mov	sl, r4
10041a26:	4699      	mov	r9, r3
10041a28:	9b01      	ldr	r3, [sp, #4]
10041a2a:	4698      	mov	r8, r3
10041a2c:	9b02      	ldr	r3, [sp, #8]
10041a2e:	2b02      	cmp	r3, #2
10041a30:	d100      	bne.n	10041a34 <__aeabi_dmul+0x100>
10041a32:	e1ca      	b.n	10041dca <__aeabi_dmul+0x496>
10041a34:	2b03      	cmp	r3, #3
10041a36:	d100      	bne.n	10041a3a <__aeabi_dmul+0x106>
10041a38:	e192      	b.n	10041d60 <__aeabi_dmul+0x42c>
10041a3a:	2b01      	cmp	r3, #1
10041a3c:	d110      	bne.n	10041a60 <__aeabi_dmul+0x12c>
10041a3e:	2300      	movs	r3, #0
10041a40:	2400      	movs	r4, #0
10041a42:	2200      	movs	r2, #0
10041a44:	e7d4      	b.n	100419f0 <__aeabi_dmul+0xbc>
10041a46:	2201      	movs	r2, #1
10041a48:	087b      	lsrs	r3, r7, #1
10041a4a:	403a      	ands	r2, r7
10041a4c:	4313      	orrs	r3, r2
10041a4e:	4652      	mov	r2, sl
10041a50:	07d2      	lsls	r2, r2, #31
10041a52:	4313      	orrs	r3, r2
10041a54:	4698      	mov	r8, r3
10041a56:	4653      	mov	r3, sl
10041a58:	085b      	lsrs	r3, r3, #1
10041a5a:	469a      	mov	sl, r3
10041a5c:	9b03      	ldr	r3, [sp, #12]
10041a5e:	4699      	mov	r9, r3
10041a60:	465b      	mov	r3, fp
10041a62:	1c58      	adds	r0, r3, #1
10041a64:	2380      	movs	r3, #128	@ 0x80
10041a66:	00db      	lsls	r3, r3, #3
10041a68:	445b      	add	r3, fp
10041a6a:	2b00      	cmp	r3, #0
10041a6c:	dc00      	bgt.n	10041a70 <__aeabi_dmul+0x13c>
10041a6e:	e1b1      	b.n	10041dd4 <__aeabi_dmul+0x4a0>
10041a70:	4642      	mov	r2, r8
10041a72:	0752      	lsls	r2, r2, #29
10041a74:	d00b      	beq.n	10041a8e <__aeabi_dmul+0x15a>
10041a76:	220f      	movs	r2, #15
10041a78:	4641      	mov	r1, r8
10041a7a:	400a      	ands	r2, r1
10041a7c:	2a04      	cmp	r2, #4
10041a7e:	d006      	beq.n	10041a8e <__aeabi_dmul+0x15a>
10041a80:	4642      	mov	r2, r8
10041a82:	1d11      	adds	r1, r2, #4
10041a84:	4541      	cmp	r1, r8
10041a86:	4192      	sbcs	r2, r2
10041a88:	4688      	mov	r8, r1
10041a8a:	4252      	negs	r2, r2
10041a8c:	4492      	add	sl, r2
10041a8e:	4652      	mov	r2, sl
10041a90:	01d2      	lsls	r2, r2, #7
10041a92:	d506      	bpl.n	10041aa2 <__aeabi_dmul+0x16e>
10041a94:	4652      	mov	r2, sl
10041a96:	4b80      	ldr	r3, [pc, #512]	@ (10041c98 <__aeabi_dmul+0x364>)
10041a98:	401a      	ands	r2, r3
10041a9a:	2380      	movs	r3, #128	@ 0x80
10041a9c:	4692      	mov	sl, r2
10041a9e:	00db      	lsls	r3, r3, #3
10041aa0:	18c3      	adds	r3, r0, r3
10041aa2:	4a7e      	ldr	r2, [pc, #504]	@ (10041c9c <__aeabi_dmul+0x368>)
10041aa4:	4293      	cmp	r3, r2
10041aa6:	dd00      	ble.n	10041aaa <__aeabi_dmul+0x176>
10041aa8:	e18f      	b.n	10041dca <__aeabi_dmul+0x496>
10041aaa:	4642      	mov	r2, r8
10041aac:	08d1      	lsrs	r1, r2, #3
10041aae:	4652      	mov	r2, sl
10041ab0:	0752      	lsls	r2, r2, #29
10041ab2:	430a      	orrs	r2, r1
10041ab4:	4651      	mov	r1, sl
10041ab6:	055b      	lsls	r3, r3, #21
10041ab8:	024c      	lsls	r4, r1, #9
10041aba:	0b24      	lsrs	r4, r4, #12
10041abc:	0d5b      	lsrs	r3, r3, #21
10041abe:	e797      	b.n	100419f0 <__aeabi_dmul+0xbc>
10041ac0:	4b73      	ldr	r3, [pc, #460]	@ (10041c90 <__aeabi_dmul+0x35c>)
10041ac2:	4326      	orrs	r6, r4
10041ac4:	469c      	mov	ip, r3
10041ac6:	44e3      	add	fp, ip
10041ac8:	2e00      	cmp	r6, #0
10041aca:	d100      	bne.n	10041ace <__aeabi_dmul+0x19a>
10041acc:	e16f      	b.n	10041dae <__aeabi_dmul+0x47a>
10041ace:	2303      	movs	r3, #3
10041ad0:	4649      	mov	r1, r9
10041ad2:	431d      	orrs	r5, r3
10041ad4:	9b00      	ldr	r3, [sp, #0]
10041ad6:	4059      	eors	r1, r3
10041ad8:	b2cb      	uxtb	r3, r1
10041ada:	9303      	str	r3, [sp, #12]
10041adc:	2d0a      	cmp	r5, #10
10041ade:	dd00      	ble.n	10041ae2 <__aeabi_dmul+0x1ae>
10041ae0:	e133      	b.n	10041d4a <__aeabi_dmul+0x416>
10041ae2:	2301      	movs	r3, #1
10041ae4:	40ab      	lsls	r3, r5
10041ae6:	001d      	movs	r5, r3
10041ae8:	2303      	movs	r3, #3
10041aea:	9302      	str	r3, [sp, #8]
10041aec:	2288      	movs	r2, #136	@ 0x88
10041aee:	422a      	tst	r2, r5
10041af0:	d197      	bne.n	10041a22 <__aeabi_dmul+0xee>
10041af2:	4642      	mov	r2, r8
10041af4:	4643      	mov	r3, r8
10041af6:	0412      	lsls	r2, r2, #16
10041af8:	0c12      	lsrs	r2, r2, #16
10041afa:	0016      	movs	r6, r2
10041afc:	9801      	ldr	r0, [sp, #4]
10041afe:	0c1d      	lsrs	r5, r3, #16
10041b00:	0c03      	lsrs	r3, r0, #16
10041b02:	0400      	lsls	r0, r0, #16
10041b04:	0c00      	lsrs	r0, r0, #16
10041b06:	4346      	muls	r6, r0
10041b08:	46b4      	mov	ip, r6
10041b0a:	001e      	movs	r6, r3
10041b0c:	436e      	muls	r6, r5
10041b0e:	9600      	str	r6, [sp, #0]
10041b10:	0016      	movs	r6, r2
10041b12:	0007      	movs	r7, r0
10041b14:	435e      	muls	r6, r3
10041b16:	4661      	mov	r1, ip
10041b18:	46b0      	mov	r8, r6
10041b1a:	436f      	muls	r7, r5
10041b1c:	0c0e      	lsrs	r6, r1, #16
10041b1e:	44b8      	add	r8, r7
10041b20:	4446      	add	r6, r8
10041b22:	42b7      	cmp	r7, r6
10041b24:	d905      	bls.n	10041b32 <__aeabi_dmul+0x1fe>
10041b26:	2180      	movs	r1, #128	@ 0x80
10041b28:	0249      	lsls	r1, r1, #9
10041b2a:	4688      	mov	r8, r1
10041b2c:	9f00      	ldr	r7, [sp, #0]
10041b2e:	4447      	add	r7, r8
10041b30:	9700      	str	r7, [sp, #0]
10041b32:	4661      	mov	r1, ip
10041b34:	0409      	lsls	r1, r1, #16
10041b36:	0c09      	lsrs	r1, r1, #16
10041b38:	0c37      	lsrs	r7, r6, #16
10041b3a:	0436      	lsls	r6, r6, #16
10041b3c:	468c      	mov	ip, r1
10041b3e:	0031      	movs	r1, r6
10041b40:	4461      	add	r1, ip
10041b42:	9101      	str	r1, [sp, #4]
10041b44:	0011      	movs	r1, r2
10041b46:	0c26      	lsrs	r6, r4, #16
10041b48:	0424      	lsls	r4, r4, #16
10041b4a:	0c24      	lsrs	r4, r4, #16
10041b4c:	4361      	muls	r1, r4
10041b4e:	468c      	mov	ip, r1
10041b50:	0021      	movs	r1, r4
10041b52:	4369      	muls	r1, r5
10041b54:	4689      	mov	r9, r1
10041b56:	4661      	mov	r1, ip
10041b58:	0c09      	lsrs	r1, r1, #16
10041b5a:	4688      	mov	r8, r1
10041b5c:	4372      	muls	r2, r6
10041b5e:	444a      	add	r2, r9
10041b60:	4442      	add	r2, r8
10041b62:	4375      	muls	r5, r6
10041b64:	4591      	cmp	r9, r2
10041b66:	d903      	bls.n	10041b70 <__aeabi_dmul+0x23c>
10041b68:	2180      	movs	r1, #128	@ 0x80
10041b6a:	0249      	lsls	r1, r1, #9
10041b6c:	4688      	mov	r8, r1
10041b6e:	4445      	add	r5, r8
10041b70:	0c11      	lsrs	r1, r2, #16
10041b72:	4688      	mov	r8, r1
10041b74:	4661      	mov	r1, ip
10041b76:	0409      	lsls	r1, r1, #16
10041b78:	0c09      	lsrs	r1, r1, #16
10041b7a:	468c      	mov	ip, r1
10041b7c:	0412      	lsls	r2, r2, #16
10041b7e:	4462      	add	r2, ip
10041b80:	18b9      	adds	r1, r7, r2
10041b82:	9102      	str	r1, [sp, #8]
10041b84:	4651      	mov	r1, sl
10041b86:	0c09      	lsrs	r1, r1, #16
10041b88:	468c      	mov	ip, r1
10041b8a:	4651      	mov	r1, sl
10041b8c:	040f      	lsls	r7, r1, #16
10041b8e:	0c3f      	lsrs	r7, r7, #16
10041b90:	0039      	movs	r1, r7
10041b92:	4341      	muls	r1, r0
10041b94:	4445      	add	r5, r8
10041b96:	4688      	mov	r8, r1
10041b98:	4661      	mov	r1, ip
10041b9a:	4341      	muls	r1, r0
10041b9c:	468a      	mov	sl, r1
10041b9e:	4641      	mov	r1, r8
10041ba0:	4660      	mov	r0, ip
10041ba2:	0c09      	lsrs	r1, r1, #16
10041ba4:	4689      	mov	r9, r1
10041ba6:	4358      	muls	r0, r3
10041ba8:	437b      	muls	r3, r7
10041baa:	4453      	add	r3, sl
10041bac:	444b      	add	r3, r9
10041bae:	459a      	cmp	sl, r3
10041bb0:	d903      	bls.n	10041bba <__aeabi_dmul+0x286>
10041bb2:	2180      	movs	r1, #128	@ 0x80
10041bb4:	0249      	lsls	r1, r1, #9
10041bb6:	4689      	mov	r9, r1
10041bb8:	4448      	add	r0, r9
10041bba:	0c19      	lsrs	r1, r3, #16
10041bbc:	4689      	mov	r9, r1
10041bbe:	4641      	mov	r1, r8
10041bc0:	0409      	lsls	r1, r1, #16
10041bc2:	0c09      	lsrs	r1, r1, #16
10041bc4:	4688      	mov	r8, r1
10041bc6:	0039      	movs	r1, r7
10041bc8:	4361      	muls	r1, r4
10041bca:	041b      	lsls	r3, r3, #16
10041bcc:	4443      	add	r3, r8
10041bce:	4688      	mov	r8, r1
10041bd0:	4661      	mov	r1, ip
10041bd2:	434c      	muls	r4, r1
10041bd4:	4371      	muls	r1, r6
10041bd6:	468c      	mov	ip, r1
10041bd8:	4641      	mov	r1, r8
10041bda:	4377      	muls	r7, r6
10041bdc:	0c0e      	lsrs	r6, r1, #16
10041bde:	193f      	adds	r7, r7, r4
10041be0:	19f6      	adds	r6, r6, r7
10041be2:	4448      	add	r0, r9
10041be4:	42b4      	cmp	r4, r6
10041be6:	d903      	bls.n	10041bf0 <__aeabi_dmul+0x2bc>
10041be8:	2180      	movs	r1, #128	@ 0x80
10041bea:	0249      	lsls	r1, r1, #9
10041bec:	4689      	mov	r9, r1
10041bee:	44cc      	add	ip, r9
10041bf0:	9902      	ldr	r1, [sp, #8]
10041bf2:	9f00      	ldr	r7, [sp, #0]
10041bf4:	4689      	mov	r9, r1
10041bf6:	0431      	lsls	r1, r6, #16
10041bf8:	444f      	add	r7, r9
10041bfa:	4689      	mov	r9, r1
10041bfc:	4641      	mov	r1, r8
10041bfe:	4297      	cmp	r7, r2
10041c00:	4192      	sbcs	r2, r2
10041c02:	040c      	lsls	r4, r1, #16
10041c04:	0c24      	lsrs	r4, r4, #16
10041c06:	444c      	add	r4, r9
10041c08:	18ff      	adds	r7, r7, r3
10041c0a:	4252      	negs	r2, r2
10041c0c:	1964      	adds	r4, r4, r5
10041c0e:	18a1      	adds	r1, r4, r2
10041c10:	429f      	cmp	r7, r3
10041c12:	419b      	sbcs	r3, r3
10041c14:	4688      	mov	r8, r1
10041c16:	4682      	mov	sl, r0
10041c18:	425b      	negs	r3, r3
10041c1a:	4699      	mov	r9, r3
10041c1c:	4590      	cmp	r8, r2
10041c1e:	4192      	sbcs	r2, r2
10041c20:	42ac      	cmp	r4, r5
10041c22:	41a4      	sbcs	r4, r4
10041c24:	44c2      	add	sl, r8
10041c26:	44d1      	add	r9, sl
10041c28:	4252      	negs	r2, r2
10041c2a:	4264      	negs	r4, r4
10041c2c:	4314      	orrs	r4, r2
10041c2e:	4599      	cmp	r9, r3
10041c30:	419b      	sbcs	r3, r3
10041c32:	4582      	cmp	sl, r0
10041c34:	4192      	sbcs	r2, r2
10041c36:	425b      	negs	r3, r3
10041c38:	4252      	negs	r2, r2
10041c3a:	4313      	orrs	r3, r2
10041c3c:	464a      	mov	r2, r9
10041c3e:	0c36      	lsrs	r6, r6, #16
10041c40:	19a4      	adds	r4, r4, r6
10041c42:	18e3      	adds	r3, r4, r3
10041c44:	4463      	add	r3, ip
10041c46:	025b      	lsls	r3, r3, #9
10041c48:	0dd2      	lsrs	r2, r2, #23
10041c4a:	431a      	orrs	r2, r3
10041c4c:	9901      	ldr	r1, [sp, #4]
10041c4e:	4692      	mov	sl, r2
10041c50:	027a      	lsls	r2, r7, #9
10041c52:	430a      	orrs	r2, r1
10041c54:	1e50      	subs	r0, r2, #1
10041c56:	4182      	sbcs	r2, r0
10041c58:	0dff      	lsrs	r7, r7, #23
10041c5a:	4317      	orrs	r7, r2
10041c5c:	464a      	mov	r2, r9
10041c5e:	0252      	lsls	r2, r2, #9
10041c60:	4317      	orrs	r7, r2
10041c62:	46b8      	mov	r8, r7
10041c64:	01db      	lsls	r3, r3, #7
10041c66:	d500      	bpl.n	10041c6a <__aeabi_dmul+0x336>
10041c68:	e6ed      	b.n	10041a46 <__aeabi_dmul+0x112>
10041c6a:	4b0d      	ldr	r3, [pc, #52]	@ (10041ca0 <__aeabi_dmul+0x36c>)
10041c6c:	9a03      	ldr	r2, [sp, #12]
10041c6e:	445b      	add	r3, fp
10041c70:	4691      	mov	r9, r2
10041c72:	2b00      	cmp	r3, #0
10041c74:	dc00      	bgt.n	10041c78 <__aeabi_dmul+0x344>
10041c76:	e0ac      	b.n	10041dd2 <__aeabi_dmul+0x49e>
10041c78:	003a      	movs	r2, r7
10041c7a:	0752      	lsls	r2, r2, #29
10041c7c:	d100      	bne.n	10041c80 <__aeabi_dmul+0x34c>
10041c7e:	e710      	b.n	10041aa2 <__aeabi_dmul+0x16e>
10041c80:	220f      	movs	r2, #15
10041c82:	4658      	mov	r0, fp
10041c84:	403a      	ands	r2, r7
10041c86:	2a04      	cmp	r2, #4
10041c88:	d000      	beq.n	10041c8c <__aeabi_dmul+0x358>
10041c8a:	e6f9      	b.n	10041a80 <__aeabi_dmul+0x14c>
10041c8c:	e709      	b.n	10041aa2 <__aeabi_dmul+0x16e>
10041c8e:	46c0      	nop			@ (mov r8, r8)
10041c90:	000007ff 	.word	0x000007ff
10041c94:	fffffc01 	.word	0xfffffc01
10041c98:	feffffff 	.word	0xfeffffff
10041c9c:	000007fe 	.word	0x000007fe
10041ca0:	000003ff 	.word	0x000003ff
10041ca4:	0022      	movs	r2, r4
10041ca6:	4332      	orrs	r2, r6
10041ca8:	d06f      	beq.n	10041d8a <__aeabi_dmul+0x456>
10041caa:	2c00      	cmp	r4, #0
10041cac:	d100      	bne.n	10041cb0 <__aeabi_dmul+0x37c>
10041cae:	e0c2      	b.n	10041e36 <__aeabi_dmul+0x502>
10041cb0:	0020      	movs	r0, r4
10041cb2:	f7fe fc99 	bl	100405e8 <__clzsi2>
10041cb6:	0002      	movs	r2, r0
10041cb8:	0003      	movs	r3, r0
10041cba:	3a0b      	subs	r2, #11
10041cbc:	201d      	movs	r0, #29
10041cbe:	1a82      	subs	r2, r0, r2
10041cc0:	0030      	movs	r0, r6
10041cc2:	0019      	movs	r1, r3
10041cc4:	40d0      	lsrs	r0, r2
10041cc6:	3908      	subs	r1, #8
10041cc8:	408c      	lsls	r4, r1
10041cca:	0002      	movs	r2, r0
10041ccc:	4322      	orrs	r2, r4
10041cce:	0034      	movs	r4, r6
10041cd0:	408c      	lsls	r4, r1
10041cd2:	4659      	mov	r1, fp
10041cd4:	1acb      	subs	r3, r1, r3
10041cd6:	4986      	ldr	r1, [pc, #536]	@ (10041ef0 <__aeabi_dmul+0x5bc>)
10041cd8:	468b      	mov	fp, r1
10041cda:	449b      	add	fp, r3
10041cdc:	2d0a      	cmp	r5, #10
10041cde:	dd00      	ble.n	10041ce2 <__aeabi_dmul+0x3ae>
10041ce0:	e6a4      	b.n	10041a2c <__aeabi_dmul+0xf8>
10041ce2:	4649      	mov	r1, r9
10041ce4:	9b00      	ldr	r3, [sp, #0]
10041ce6:	9401      	str	r4, [sp, #4]
10041ce8:	4059      	eors	r1, r3
10041cea:	b2cb      	uxtb	r3, r1
10041cec:	0014      	movs	r4, r2
10041cee:	2000      	movs	r0, #0
10041cf0:	9303      	str	r3, [sp, #12]
10041cf2:	2d02      	cmp	r5, #2
10041cf4:	dd00      	ble.n	10041cf8 <__aeabi_dmul+0x3c4>
10041cf6:	e667      	b.n	100419c8 <__aeabi_dmul+0x94>
10041cf8:	e6fb      	b.n	10041af2 <__aeabi_dmul+0x1be>
10041cfa:	4653      	mov	r3, sl
10041cfc:	4303      	orrs	r3, r0
10041cfe:	4698      	mov	r8, r3
10041d00:	d03c      	beq.n	10041d7c <__aeabi_dmul+0x448>
10041d02:	4653      	mov	r3, sl
10041d04:	2b00      	cmp	r3, #0
10041d06:	d100      	bne.n	10041d0a <__aeabi_dmul+0x3d6>
10041d08:	e0a3      	b.n	10041e52 <__aeabi_dmul+0x51e>
10041d0a:	4650      	mov	r0, sl
10041d0c:	f7fe fc6c 	bl	100405e8 <__clzsi2>
10041d10:	230b      	movs	r3, #11
10041d12:	425b      	negs	r3, r3
10041d14:	469c      	mov	ip, r3
10041d16:	0002      	movs	r2, r0
10041d18:	4484      	add	ip, r0
10041d1a:	0011      	movs	r1, r2
10041d1c:	4650      	mov	r0, sl
10041d1e:	3908      	subs	r1, #8
10041d20:	4088      	lsls	r0, r1
10041d22:	231d      	movs	r3, #29
10041d24:	4680      	mov	r8, r0
10041d26:	4660      	mov	r0, ip
10041d28:	1a1b      	subs	r3, r3, r0
10041d2a:	0020      	movs	r0, r4
10041d2c:	40d8      	lsrs	r0, r3
10041d2e:	0003      	movs	r3, r0
10041d30:	4640      	mov	r0, r8
10041d32:	4303      	orrs	r3, r0
10041d34:	469a      	mov	sl, r3
10041d36:	0023      	movs	r3, r4
10041d38:	408b      	lsls	r3, r1
10041d3a:	4698      	mov	r8, r3
10041d3c:	4b6c      	ldr	r3, [pc, #432]	@ (10041ef0 <__aeabi_dmul+0x5bc>)
10041d3e:	2500      	movs	r5, #0
10041d40:	1a9b      	subs	r3, r3, r2
10041d42:	469b      	mov	fp, r3
10041d44:	2300      	movs	r3, #0
10041d46:	9302      	str	r3, [sp, #8]
10041d48:	e61a      	b.n	10041980 <__aeabi_dmul+0x4c>
10041d4a:	2d0f      	cmp	r5, #15
10041d4c:	d000      	beq.n	10041d50 <__aeabi_dmul+0x41c>
10041d4e:	e0c9      	b.n	10041ee4 <__aeabi_dmul+0x5b0>
10041d50:	2380      	movs	r3, #128	@ 0x80
10041d52:	4652      	mov	r2, sl
10041d54:	031b      	lsls	r3, r3, #12
10041d56:	421a      	tst	r2, r3
10041d58:	d002      	beq.n	10041d60 <__aeabi_dmul+0x42c>
10041d5a:	421c      	tst	r4, r3
10041d5c:	d100      	bne.n	10041d60 <__aeabi_dmul+0x42c>
10041d5e:	e092      	b.n	10041e86 <__aeabi_dmul+0x552>
10041d60:	2480      	movs	r4, #128	@ 0x80
10041d62:	4653      	mov	r3, sl
10041d64:	0324      	lsls	r4, r4, #12
10041d66:	431c      	orrs	r4, r3
10041d68:	0324      	lsls	r4, r4, #12
10041d6a:	4642      	mov	r2, r8
10041d6c:	0b24      	lsrs	r4, r4, #12
10041d6e:	e63e      	b.n	100419ee <__aeabi_dmul+0xba>
10041d70:	469b      	mov	fp, r3
10041d72:	2303      	movs	r3, #3
10041d74:	4680      	mov	r8, r0
10041d76:	250c      	movs	r5, #12
10041d78:	9302      	str	r3, [sp, #8]
10041d7a:	e601      	b.n	10041980 <__aeabi_dmul+0x4c>
10041d7c:	2300      	movs	r3, #0
10041d7e:	469a      	mov	sl, r3
10041d80:	469b      	mov	fp, r3
10041d82:	3301      	adds	r3, #1
10041d84:	2504      	movs	r5, #4
10041d86:	9302      	str	r3, [sp, #8]
10041d88:	e5fa      	b.n	10041980 <__aeabi_dmul+0x4c>
10041d8a:	2101      	movs	r1, #1
10041d8c:	430d      	orrs	r5, r1
10041d8e:	2d0a      	cmp	r5, #10
10041d90:	dd00      	ble.n	10041d94 <__aeabi_dmul+0x460>
10041d92:	e64b      	b.n	10041a2c <__aeabi_dmul+0xf8>
10041d94:	4649      	mov	r1, r9
10041d96:	9800      	ldr	r0, [sp, #0]
10041d98:	4041      	eors	r1, r0
10041d9a:	b2c9      	uxtb	r1, r1
10041d9c:	9103      	str	r1, [sp, #12]
10041d9e:	2d02      	cmp	r5, #2
10041da0:	dc00      	bgt.n	10041da4 <__aeabi_dmul+0x470>
10041da2:	e096      	b.n	10041ed2 <__aeabi_dmul+0x59e>
10041da4:	2300      	movs	r3, #0
10041da6:	2400      	movs	r4, #0
10041da8:	2001      	movs	r0, #1
10041daa:	9301      	str	r3, [sp, #4]
10041dac:	e60c      	b.n	100419c8 <__aeabi_dmul+0x94>
10041dae:	4649      	mov	r1, r9
10041db0:	2302      	movs	r3, #2
10041db2:	9a00      	ldr	r2, [sp, #0]
10041db4:	432b      	orrs	r3, r5
10041db6:	4051      	eors	r1, r2
10041db8:	b2ca      	uxtb	r2, r1
10041dba:	9203      	str	r2, [sp, #12]
10041dbc:	2b0a      	cmp	r3, #10
10041dbe:	dd00      	ble.n	10041dc2 <__aeabi_dmul+0x48e>
10041dc0:	e634      	b.n	10041a2c <__aeabi_dmul+0xf8>
10041dc2:	2d00      	cmp	r5, #0
10041dc4:	d157      	bne.n	10041e76 <__aeabi_dmul+0x542>
10041dc6:	9b03      	ldr	r3, [sp, #12]
10041dc8:	4699      	mov	r9, r3
10041dca:	2400      	movs	r4, #0
10041dcc:	2200      	movs	r2, #0
10041dce:	4b49      	ldr	r3, [pc, #292]	@ (10041ef4 <__aeabi_dmul+0x5c0>)
10041dd0:	e60e      	b.n	100419f0 <__aeabi_dmul+0xbc>
10041dd2:	4658      	mov	r0, fp
10041dd4:	2101      	movs	r1, #1
10041dd6:	1ac9      	subs	r1, r1, r3
10041dd8:	2938      	cmp	r1, #56	@ 0x38
10041dda:	dd00      	ble.n	10041dde <__aeabi_dmul+0x4aa>
10041ddc:	e62f      	b.n	10041a3e <__aeabi_dmul+0x10a>
10041dde:	291f      	cmp	r1, #31
10041de0:	dd56      	ble.n	10041e90 <__aeabi_dmul+0x55c>
10041de2:	221f      	movs	r2, #31
10041de4:	4654      	mov	r4, sl
10041de6:	4252      	negs	r2, r2
10041de8:	1ad3      	subs	r3, r2, r3
10041dea:	40dc      	lsrs	r4, r3
10041dec:	2920      	cmp	r1, #32
10041dee:	d007      	beq.n	10041e00 <__aeabi_dmul+0x4cc>
10041df0:	4b41      	ldr	r3, [pc, #260]	@ (10041ef8 <__aeabi_dmul+0x5c4>)
10041df2:	4642      	mov	r2, r8
10041df4:	469c      	mov	ip, r3
10041df6:	4653      	mov	r3, sl
10041df8:	4460      	add	r0, ip
10041dfa:	4083      	lsls	r3, r0
10041dfc:	431a      	orrs	r2, r3
10041dfe:	4690      	mov	r8, r2
10041e00:	4642      	mov	r2, r8
10041e02:	2107      	movs	r1, #7
10041e04:	1e53      	subs	r3, r2, #1
10041e06:	419a      	sbcs	r2, r3
10041e08:	000b      	movs	r3, r1
10041e0a:	4322      	orrs	r2, r4
10041e0c:	4013      	ands	r3, r2
10041e0e:	2400      	movs	r4, #0
10041e10:	4211      	tst	r1, r2
10041e12:	d009      	beq.n	10041e28 <__aeabi_dmul+0x4f4>
10041e14:	230f      	movs	r3, #15
10041e16:	4013      	ands	r3, r2
10041e18:	2b04      	cmp	r3, #4
10041e1a:	d05d      	beq.n	10041ed8 <__aeabi_dmul+0x5a4>
10041e1c:	1d11      	adds	r1, r2, #4
10041e1e:	4291      	cmp	r1, r2
10041e20:	419b      	sbcs	r3, r3
10041e22:	000a      	movs	r2, r1
10041e24:	425b      	negs	r3, r3
10041e26:	075b      	lsls	r3, r3, #29
10041e28:	08d2      	lsrs	r2, r2, #3
10041e2a:	431a      	orrs	r2, r3
10041e2c:	2300      	movs	r3, #0
10041e2e:	e5df      	b.n	100419f0 <__aeabi_dmul+0xbc>
10041e30:	9b03      	ldr	r3, [sp, #12]
10041e32:	4699      	mov	r9, r3
10041e34:	e5fa      	b.n	10041a2c <__aeabi_dmul+0xf8>
10041e36:	9801      	ldr	r0, [sp, #4]
10041e38:	f7fe fbd6 	bl	100405e8 <__clzsi2>
10041e3c:	0002      	movs	r2, r0
10041e3e:	0003      	movs	r3, r0
10041e40:	3215      	adds	r2, #21
10041e42:	3320      	adds	r3, #32
10041e44:	2a1c      	cmp	r2, #28
10041e46:	dc00      	bgt.n	10041e4a <__aeabi_dmul+0x516>
10041e48:	e738      	b.n	10041cbc <__aeabi_dmul+0x388>
10041e4a:	9a01      	ldr	r2, [sp, #4]
10041e4c:	3808      	subs	r0, #8
10041e4e:	4082      	lsls	r2, r0
10041e50:	e73f      	b.n	10041cd2 <__aeabi_dmul+0x39e>
10041e52:	f7fe fbc9 	bl	100405e8 <__clzsi2>
10041e56:	2315      	movs	r3, #21
10041e58:	469c      	mov	ip, r3
10041e5a:	4484      	add	ip, r0
10041e5c:	0002      	movs	r2, r0
10041e5e:	4663      	mov	r3, ip
10041e60:	3220      	adds	r2, #32
10041e62:	2b1c      	cmp	r3, #28
10041e64:	dc00      	bgt.n	10041e68 <__aeabi_dmul+0x534>
10041e66:	e758      	b.n	10041d1a <__aeabi_dmul+0x3e6>
10041e68:	2300      	movs	r3, #0
10041e6a:	4698      	mov	r8, r3
10041e6c:	0023      	movs	r3, r4
10041e6e:	3808      	subs	r0, #8
10041e70:	4083      	lsls	r3, r0
10041e72:	469a      	mov	sl, r3
10041e74:	e762      	b.n	10041d3c <__aeabi_dmul+0x408>
10041e76:	001d      	movs	r5, r3
10041e78:	2300      	movs	r3, #0
10041e7a:	2400      	movs	r4, #0
10041e7c:	2002      	movs	r0, #2
10041e7e:	9301      	str	r3, [sp, #4]
10041e80:	e5a2      	b.n	100419c8 <__aeabi_dmul+0x94>
10041e82:	9002      	str	r0, [sp, #8]
10041e84:	e632      	b.n	10041aec <__aeabi_dmul+0x1b8>
10041e86:	431c      	orrs	r4, r3
10041e88:	9b00      	ldr	r3, [sp, #0]
10041e8a:	9a01      	ldr	r2, [sp, #4]
10041e8c:	4699      	mov	r9, r3
10041e8e:	e5ae      	b.n	100419ee <__aeabi_dmul+0xba>
10041e90:	4b1a      	ldr	r3, [pc, #104]	@ (10041efc <__aeabi_dmul+0x5c8>)
10041e92:	4652      	mov	r2, sl
10041e94:	18c3      	adds	r3, r0, r3
10041e96:	4640      	mov	r0, r8
10041e98:	409a      	lsls	r2, r3
10041e9a:	40c8      	lsrs	r0, r1
10041e9c:	4302      	orrs	r2, r0
10041e9e:	4640      	mov	r0, r8
10041ea0:	4098      	lsls	r0, r3
10041ea2:	0003      	movs	r3, r0
10041ea4:	1e58      	subs	r0, r3, #1
10041ea6:	4183      	sbcs	r3, r0
10041ea8:	4654      	mov	r4, sl
10041eaa:	431a      	orrs	r2, r3
10041eac:	40cc      	lsrs	r4, r1
10041eae:	0753      	lsls	r3, r2, #29
10041eb0:	d009      	beq.n	10041ec6 <__aeabi_dmul+0x592>
10041eb2:	230f      	movs	r3, #15
10041eb4:	4013      	ands	r3, r2
10041eb6:	2b04      	cmp	r3, #4
10041eb8:	d005      	beq.n	10041ec6 <__aeabi_dmul+0x592>
10041eba:	1d13      	adds	r3, r2, #4
10041ebc:	4293      	cmp	r3, r2
10041ebe:	4192      	sbcs	r2, r2
10041ec0:	4252      	negs	r2, r2
10041ec2:	18a4      	adds	r4, r4, r2
10041ec4:	001a      	movs	r2, r3
10041ec6:	0223      	lsls	r3, r4, #8
10041ec8:	d508      	bpl.n	10041edc <__aeabi_dmul+0x5a8>
10041eca:	2301      	movs	r3, #1
10041ecc:	2400      	movs	r4, #0
10041ece:	2200      	movs	r2, #0
10041ed0:	e58e      	b.n	100419f0 <__aeabi_dmul+0xbc>
10041ed2:	4689      	mov	r9, r1
10041ed4:	2400      	movs	r4, #0
10041ed6:	e58b      	b.n	100419f0 <__aeabi_dmul+0xbc>
10041ed8:	2300      	movs	r3, #0
10041eda:	e7a5      	b.n	10041e28 <__aeabi_dmul+0x4f4>
10041edc:	0763      	lsls	r3, r4, #29
10041ede:	0264      	lsls	r4, r4, #9
10041ee0:	0b24      	lsrs	r4, r4, #12
10041ee2:	e7a1      	b.n	10041e28 <__aeabi_dmul+0x4f4>
10041ee4:	9b00      	ldr	r3, [sp, #0]
10041ee6:	46a2      	mov	sl, r4
10041ee8:	4699      	mov	r9, r3
10041eea:	9b01      	ldr	r3, [sp, #4]
10041eec:	4698      	mov	r8, r3
10041eee:	e737      	b.n	10041d60 <__aeabi_dmul+0x42c>
10041ef0:	fffffc0d 	.word	0xfffffc0d
10041ef4:	000007ff 	.word	0x000007ff
10041ef8:	0000043e 	.word	0x0000043e
10041efc:	0000041e 	.word	0x0000041e

10041f00 <__aeabi_dsub>:
10041f00:	b5f0      	push	{r4, r5, r6, r7, lr}
10041f02:	4657      	mov	r7, sl
10041f04:	464e      	mov	r6, r9
10041f06:	4645      	mov	r5, r8
10041f08:	46de      	mov	lr, fp
10041f0a:	b5e0      	push	{r5, r6, r7, lr}
10041f0c:	b083      	sub	sp, #12
10041f0e:	9000      	str	r0, [sp, #0]
10041f10:	9101      	str	r1, [sp, #4]
10041f12:	030c      	lsls	r4, r1, #12
10041f14:	004d      	lsls	r5, r1, #1
10041f16:	0fce      	lsrs	r6, r1, #31
10041f18:	0a61      	lsrs	r1, r4, #9
10041f1a:	9c00      	ldr	r4, [sp, #0]
10041f1c:	005f      	lsls	r7, r3, #1
10041f1e:	0f64      	lsrs	r4, r4, #29
10041f20:	430c      	orrs	r4, r1
10041f22:	9900      	ldr	r1, [sp, #0]
10041f24:	9200      	str	r2, [sp, #0]
10041f26:	9301      	str	r3, [sp, #4]
10041f28:	00c8      	lsls	r0, r1, #3
10041f2a:	0319      	lsls	r1, r3, #12
10041f2c:	0d7b      	lsrs	r3, r7, #21
10041f2e:	4699      	mov	r9, r3
10041f30:	9b01      	ldr	r3, [sp, #4]
10041f32:	4fcc      	ldr	r7, [pc, #816]	@ (10042264 <__aeabi_dsub+0x364>)
10041f34:	0fdb      	lsrs	r3, r3, #31
10041f36:	469c      	mov	ip, r3
10041f38:	0a4b      	lsrs	r3, r1, #9
10041f3a:	9900      	ldr	r1, [sp, #0]
10041f3c:	4680      	mov	r8, r0
10041f3e:	0f49      	lsrs	r1, r1, #29
10041f40:	4319      	orrs	r1, r3
10041f42:	9b00      	ldr	r3, [sp, #0]
10041f44:	468b      	mov	fp, r1
10041f46:	00da      	lsls	r2, r3, #3
10041f48:	4692      	mov	sl, r2
10041f4a:	0d6d      	lsrs	r5, r5, #21
10041f4c:	45b9      	cmp	r9, r7
10041f4e:	d100      	bne.n	10041f52 <__aeabi_dsub+0x52>
10041f50:	e0bf      	b.n	100420d2 <__aeabi_dsub+0x1d2>
10041f52:	2301      	movs	r3, #1
10041f54:	4661      	mov	r1, ip
10041f56:	4059      	eors	r1, r3
10041f58:	464b      	mov	r3, r9
10041f5a:	468c      	mov	ip, r1
10041f5c:	1aeb      	subs	r3, r5, r3
10041f5e:	428e      	cmp	r6, r1
10041f60:	d075      	beq.n	1004204e <__aeabi_dsub+0x14e>
10041f62:	2b00      	cmp	r3, #0
10041f64:	dc00      	bgt.n	10041f68 <__aeabi_dsub+0x68>
10041f66:	e2a3      	b.n	100424b0 <__aeabi_dsub+0x5b0>
10041f68:	4649      	mov	r1, r9
10041f6a:	2900      	cmp	r1, #0
10041f6c:	d100      	bne.n	10041f70 <__aeabi_dsub+0x70>
10041f6e:	e0ce      	b.n	1004210e <__aeabi_dsub+0x20e>
10041f70:	42bd      	cmp	r5, r7
10041f72:	d100      	bne.n	10041f76 <__aeabi_dsub+0x76>
10041f74:	e200      	b.n	10042378 <__aeabi_dsub+0x478>
10041f76:	2701      	movs	r7, #1
10041f78:	2b38      	cmp	r3, #56	@ 0x38
10041f7a:	dc19      	bgt.n	10041fb0 <__aeabi_dsub+0xb0>
10041f7c:	2780      	movs	r7, #128	@ 0x80
10041f7e:	4659      	mov	r1, fp
10041f80:	043f      	lsls	r7, r7, #16
10041f82:	4339      	orrs	r1, r7
10041f84:	468b      	mov	fp, r1
10041f86:	2b1f      	cmp	r3, #31
10041f88:	dd00      	ble.n	10041f8c <__aeabi_dsub+0x8c>
10041f8a:	e1fa      	b.n	10042382 <__aeabi_dsub+0x482>
10041f8c:	2720      	movs	r7, #32
10041f8e:	1af9      	subs	r1, r7, r3
10041f90:	468c      	mov	ip, r1
10041f92:	4659      	mov	r1, fp
10041f94:	4667      	mov	r7, ip
10041f96:	40b9      	lsls	r1, r7
10041f98:	000f      	movs	r7, r1
10041f9a:	0011      	movs	r1, r2
10041f9c:	40d9      	lsrs	r1, r3
10041f9e:	430f      	orrs	r7, r1
10041fa0:	4661      	mov	r1, ip
10041fa2:	408a      	lsls	r2, r1
10041fa4:	1e51      	subs	r1, r2, #1
10041fa6:	418a      	sbcs	r2, r1
10041fa8:	4659      	mov	r1, fp
10041faa:	40d9      	lsrs	r1, r3
10041fac:	4317      	orrs	r7, r2
10041fae:	1a64      	subs	r4, r4, r1
10041fb0:	1bc7      	subs	r7, r0, r7
10041fb2:	42b8      	cmp	r0, r7
10041fb4:	4180      	sbcs	r0, r0
10041fb6:	4240      	negs	r0, r0
10041fb8:	1a24      	subs	r4, r4, r0
10041fba:	0223      	lsls	r3, r4, #8
10041fbc:	d400      	bmi.n	10041fc0 <__aeabi_dsub+0xc0>
10041fbe:	e140      	b.n	10042242 <__aeabi_dsub+0x342>
10041fc0:	0264      	lsls	r4, r4, #9
10041fc2:	0a64      	lsrs	r4, r4, #9
10041fc4:	2c00      	cmp	r4, #0
10041fc6:	d100      	bne.n	10041fca <__aeabi_dsub+0xca>
10041fc8:	e154      	b.n	10042274 <__aeabi_dsub+0x374>
10041fca:	0020      	movs	r0, r4
10041fcc:	f7fe fb0c 	bl	100405e8 <__clzsi2>
10041fd0:	0003      	movs	r3, r0
10041fd2:	3b08      	subs	r3, #8
10041fd4:	2120      	movs	r1, #32
10041fd6:	0038      	movs	r0, r7
10041fd8:	1aca      	subs	r2, r1, r3
10041fda:	40d0      	lsrs	r0, r2
10041fdc:	409c      	lsls	r4, r3
10041fde:	0002      	movs	r2, r0
10041fe0:	409f      	lsls	r7, r3
10041fe2:	4322      	orrs	r2, r4
10041fe4:	429d      	cmp	r5, r3
10041fe6:	dd00      	ble.n	10041fea <__aeabi_dsub+0xea>
10041fe8:	e1a6      	b.n	10042338 <__aeabi_dsub+0x438>
10041fea:	1b58      	subs	r0, r3, r5
10041fec:	3001      	adds	r0, #1
10041fee:	1a09      	subs	r1, r1, r0
10041ff0:	003c      	movs	r4, r7
10041ff2:	408f      	lsls	r7, r1
10041ff4:	40c4      	lsrs	r4, r0
10041ff6:	1e7b      	subs	r3, r7, #1
10041ff8:	419f      	sbcs	r7, r3
10041ffa:	0013      	movs	r3, r2
10041ffc:	408b      	lsls	r3, r1
10041ffe:	4327      	orrs	r7, r4
10042000:	431f      	orrs	r7, r3
10042002:	40c2      	lsrs	r2, r0
10042004:	003b      	movs	r3, r7
10042006:	0014      	movs	r4, r2
10042008:	2500      	movs	r5, #0
1004200a:	4313      	orrs	r3, r2
1004200c:	d100      	bne.n	10042010 <__aeabi_dsub+0x110>
1004200e:	e1f7      	b.n	10042400 <__aeabi_dsub+0x500>
10042010:	077b      	lsls	r3, r7, #29
10042012:	d100      	bne.n	10042016 <__aeabi_dsub+0x116>
10042014:	e377      	b.n	10042706 <__aeabi_dsub+0x806>
10042016:	230f      	movs	r3, #15
10042018:	0038      	movs	r0, r7
1004201a:	403b      	ands	r3, r7
1004201c:	2b04      	cmp	r3, #4
1004201e:	d004      	beq.n	1004202a <__aeabi_dsub+0x12a>
10042020:	1d38      	adds	r0, r7, #4
10042022:	42b8      	cmp	r0, r7
10042024:	41bf      	sbcs	r7, r7
10042026:	427f      	negs	r7, r7
10042028:	19e4      	adds	r4, r4, r7
1004202a:	0223      	lsls	r3, r4, #8
1004202c:	d400      	bmi.n	10042030 <__aeabi_dsub+0x130>
1004202e:	e368      	b.n	10042702 <__aeabi_dsub+0x802>
10042030:	4b8c      	ldr	r3, [pc, #560]	@ (10042264 <__aeabi_dsub+0x364>)
10042032:	3501      	adds	r5, #1
10042034:	429d      	cmp	r5, r3
10042036:	d100      	bne.n	1004203a <__aeabi_dsub+0x13a>
10042038:	e0f4      	b.n	10042224 <__aeabi_dsub+0x324>
1004203a:	4b8b      	ldr	r3, [pc, #556]	@ (10042268 <__aeabi_dsub+0x368>)
1004203c:	056d      	lsls	r5, r5, #21
1004203e:	401c      	ands	r4, r3
10042040:	0d6d      	lsrs	r5, r5, #21
10042042:	0767      	lsls	r7, r4, #29
10042044:	08c0      	lsrs	r0, r0, #3
10042046:	0264      	lsls	r4, r4, #9
10042048:	4307      	orrs	r7, r0
1004204a:	0b24      	lsrs	r4, r4, #12
1004204c:	e0ec      	b.n	10042228 <__aeabi_dsub+0x328>
1004204e:	2b00      	cmp	r3, #0
10042050:	dc00      	bgt.n	10042054 <__aeabi_dsub+0x154>
10042052:	e329      	b.n	100426a8 <__aeabi_dsub+0x7a8>
10042054:	4649      	mov	r1, r9
10042056:	2900      	cmp	r1, #0
10042058:	d000      	beq.n	1004205c <__aeabi_dsub+0x15c>
1004205a:	e0d6      	b.n	1004220a <__aeabi_dsub+0x30a>
1004205c:	4659      	mov	r1, fp
1004205e:	4311      	orrs	r1, r2
10042060:	d100      	bne.n	10042064 <__aeabi_dsub+0x164>
10042062:	e12e      	b.n	100422c2 <__aeabi_dsub+0x3c2>
10042064:	1e59      	subs	r1, r3, #1
10042066:	2b01      	cmp	r3, #1
10042068:	d100      	bne.n	1004206c <__aeabi_dsub+0x16c>
1004206a:	e1e6      	b.n	1004243a <__aeabi_dsub+0x53a>
1004206c:	42bb      	cmp	r3, r7
1004206e:	d100      	bne.n	10042072 <__aeabi_dsub+0x172>
10042070:	e182      	b.n	10042378 <__aeabi_dsub+0x478>
10042072:	2701      	movs	r7, #1
10042074:	000b      	movs	r3, r1
10042076:	2938      	cmp	r1, #56	@ 0x38
10042078:	dc14      	bgt.n	100420a4 <__aeabi_dsub+0x1a4>
1004207a:	2b1f      	cmp	r3, #31
1004207c:	dd00      	ble.n	10042080 <__aeabi_dsub+0x180>
1004207e:	e23c      	b.n	100424fa <__aeabi_dsub+0x5fa>
10042080:	2720      	movs	r7, #32
10042082:	1af9      	subs	r1, r7, r3
10042084:	468c      	mov	ip, r1
10042086:	4659      	mov	r1, fp
10042088:	4667      	mov	r7, ip
1004208a:	40b9      	lsls	r1, r7
1004208c:	000f      	movs	r7, r1
1004208e:	0011      	movs	r1, r2
10042090:	40d9      	lsrs	r1, r3
10042092:	430f      	orrs	r7, r1
10042094:	4661      	mov	r1, ip
10042096:	408a      	lsls	r2, r1
10042098:	1e51      	subs	r1, r2, #1
1004209a:	418a      	sbcs	r2, r1
1004209c:	4659      	mov	r1, fp
1004209e:	40d9      	lsrs	r1, r3
100420a0:	4317      	orrs	r7, r2
100420a2:	1864      	adds	r4, r4, r1
100420a4:	183f      	adds	r7, r7, r0
100420a6:	4287      	cmp	r7, r0
100420a8:	4180      	sbcs	r0, r0
100420aa:	4240      	negs	r0, r0
100420ac:	1824      	adds	r4, r4, r0
100420ae:	0223      	lsls	r3, r4, #8
100420b0:	d400      	bmi.n	100420b4 <__aeabi_dsub+0x1b4>
100420b2:	e0c6      	b.n	10042242 <__aeabi_dsub+0x342>
100420b4:	4b6b      	ldr	r3, [pc, #428]	@ (10042264 <__aeabi_dsub+0x364>)
100420b6:	3501      	adds	r5, #1
100420b8:	429d      	cmp	r5, r3
100420ba:	d100      	bne.n	100420be <__aeabi_dsub+0x1be>
100420bc:	e0b2      	b.n	10042224 <__aeabi_dsub+0x324>
100420be:	2101      	movs	r1, #1
100420c0:	4b69      	ldr	r3, [pc, #420]	@ (10042268 <__aeabi_dsub+0x368>)
100420c2:	087a      	lsrs	r2, r7, #1
100420c4:	401c      	ands	r4, r3
100420c6:	4039      	ands	r1, r7
100420c8:	430a      	orrs	r2, r1
100420ca:	07e7      	lsls	r7, r4, #31
100420cc:	4317      	orrs	r7, r2
100420ce:	0864      	lsrs	r4, r4, #1
100420d0:	e79e      	b.n	10042010 <__aeabi_dsub+0x110>
100420d2:	4b66      	ldr	r3, [pc, #408]	@ (1004226c <__aeabi_dsub+0x36c>)
100420d4:	4311      	orrs	r1, r2
100420d6:	468a      	mov	sl, r1
100420d8:	18eb      	adds	r3, r5, r3
100420da:	2900      	cmp	r1, #0
100420dc:	d028      	beq.n	10042130 <__aeabi_dsub+0x230>
100420de:	4566      	cmp	r6, ip
100420e0:	d02c      	beq.n	1004213c <__aeabi_dsub+0x23c>
100420e2:	2b00      	cmp	r3, #0
100420e4:	d05b      	beq.n	1004219e <__aeabi_dsub+0x29e>
100420e6:	2d00      	cmp	r5, #0
100420e8:	d100      	bne.n	100420ec <__aeabi_dsub+0x1ec>
100420ea:	e12c      	b.n	10042346 <__aeabi_dsub+0x446>
100420ec:	465b      	mov	r3, fp
100420ee:	4666      	mov	r6, ip
100420f0:	075f      	lsls	r7, r3, #29
100420f2:	08d2      	lsrs	r2, r2, #3
100420f4:	4317      	orrs	r7, r2
100420f6:	08dd      	lsrs	r5, r3, #3
100420f8:	003b      	movs	r3, r7
100420fa:	432b      	orrs	r3, r5
100420fc:	d100      	bne.n	10042100 <__aeabi_dsub+0x200>
100420fe:	e0e2      	b.n	100422c6 <__aeabi_dsub+0x3c6>
10042100:	2480      	movs	r4, #128	@ 0x80
10042102:	0324      	lsls	r4, r4, #12
10042104:	432c      	orrs	r4, r5
10042106:	0324      	lsls	r4, r4, #12
10042108:	4d56      	ldr	r5, [pc, #344]	@ (10042264 <__aeabi_dsub+0x364>)
1004210a:	0b24      	lsrs	r4, r4, #12
1004210c:	e08c      	b.n	10042228 <__aeabi_dsub+0x328>
1004210e:	4659      	mov	r1, fp
10042110:	4311      	orrs	r1, r2
10042112:	d100      	bne.n	10042116 <__aeabi_dsub+0x216>
10042114:	e0d5      	b.n	100422c2 <__aeabi_dsub+0x3c2>
10042116:	1e59      	subs	r1, r3, #1
10042118:	2b01      	cmp	r3, #1
1004211a:	d100      	bne.n	1004211e <__aeabi_dsub+0x21e>
1004211c:	e1b9      	b.n	10042492 <__aeabi_dsub+0x592>
1004211e:	42bb      	cmp	r3, r7
10042120:	d100      	bne.n	10042124 <__aeabi_dsub+0x224>
10042122:	e1b1      	b.n	10042488 <__aeabi_dsub+0x588>
10042124:	2701      	movs	r7, #1
10042126:	000b      	movs	r3, r1
10042128:	2938      	cmp	r1, #56	@ 0x38
1004212a:	dd00      	ble.n	1004212e <__aeabi_dsub+0x22e>
1004212c:	e740      	b.n	10041fb0 <__aeabi_dsub+0xb0>
1004212e:	e72a      	b.n	10041f86 <__aeabi_dsub+0x86>
10042130:	4661      	mov	r1, ip
10042132:	2701      	movs	r7, #1
10042134:	4079      	eors	r1, r7
10042136:	468c      	mov	ip, r1
10042138:	4566      	cmp	r6, ip
1004213a:	d1d2      	bne.n	100420e2 <__aeabi_dsub+0x1e2>
1004213c:	2b00      	cmp	r3, #0
1004213e:	d100      	bne.n	10042142 <__aeabi_dsub+0x242>
10042140:	e0c5      	b.n	100422ce <__aeabi_dsub+0x3ce>
10042142:	2d00      	cmp	r5, #0
10042144:	d000      	beq.n	10042148 <__aeabi_dsub+0x248>
10042146:	e155      	b.n	100423f4 <__aeabi_dsub+0x4f4>
10042148:	464b      	mov	r3, r9
1004214a:	0025      	movs	r5, r4
1004214c:	4305      	orrs	r5, r0
1004214e:	d100      	bne.n	10042152 <__aeabi_dsub+0x252>
10042150:	e212      	b.n	10042578 <__aeabi_dsub+0x678>
10042152:	1e59      	subs	r1, r3, #1
10042154:	468c      	mov	ip, r1
10042156:	2b01      	cmp	r3, #1
10042158:	d100      	bne.n	1004215c <__aeabi_dsub+0x25c>
1004215a:	e249      	b.n	100425f0 <__aeabi_dsub+0x6f0>
1004215c:	4d41      	ldr	r5, [pc, #260]	@ (10042264 <__aeabi_dsub+0x364>)
1004215e:	42ab      	cmp	r3, r5
10042160:	d100      	bne.n	10042164 <__aeabi_dsub+0x264>
10042162:	e28f      	b.n	10042684 <__aeabi_dsub+0x784>
10042164:	2701      	movs	r7, #1
10042166:	2938      	cmp	r1, #56	@ 0x38
10042168:	dc11      	bgt.n	1004218e <__aeabi_dsub+0x28e>
1004216a:	4663      	mov	r3, ip
1004216c:	2b1f      	cmp	r3, #31
1004216e:	dd00      	ble.n	10042172 <__aeabi_dsub+0x272>
10042170:	e25b      	b.n	1004262a <__aeabi_dsub+0x72a>
10042172:	4661      	mov	r1, ip
10042174:	2320      	movs	r3, #32
10042176:	0027      	movs	r7, r4
10042178:	1a5b      	subs	r3, r3, r1
1004217a:	0005      	movs	r5, r0
1004217c:	4098      	lsls	r0, r3
1004217e:	409f      	lsls	r7, r3
10042180:	40cd      	lsrs	r5, r1
10042182:	1e43      	subs	r3, r0, #1
10042184:	4198      	sbcs	r0, r3
10042186:	40cc      	lsrs	r4, r1
10042188:	432f      	orrs	r7, r5
1004218a:	4307      	orrs	r7, r0
1004218c:	44a3      	add	fp, r4
1004218e:	18bf      	adds	r7, r7, r2
10042190:	4297      	cmp	r7, r2
10042192:	4192      	sbcs	r2, r2
10042194:	4252      	negs	r2, r2
10042196:	445a      	add	r2, fp
10042198:	0014      	movs	r4, r2
1004219a:	464d      	mov	r5, r9
1004219c:	e787      	b.n	100420ae <__aeabi_dsub+0x1ae>
1004219e:	4f34      	ldr	r7, [pc, #208]	@ (10042270 <__aeabi_dsub+0x370>)
100421a0:	1c6b      	adds	r3, r5, #1
100421a2:	423b      	tst	r3, r7
100421a4:	d000      	beq.n	100421a8 <__aeabi_dsub+0x2a8>
100421a6:	e0b6      	b.n	10042316 <__aeabi_dsub+0x416>
100421a8:	4659      	mov	r1, fp
100421aa:	0023      	movs	r3, r4
100421ac:	4311      	orrs	r1, r2
100421ae:	000f      	movs	r7, r1
100421b0:	4303      	orrs	r3, r0
100421b2:	2d00      	cmp	r5, #0
100421b4:	d000      	beq.n	100421b8 <__aeabi_dsub+0x2b8>
100421b6:	e126      	b.n	10042406 <__aeabi_dsub+0x506>
100421b8:	2b00      	cmp	r3, #0
100421ba:	d100      	bne.n	100421be <__aeabi_dsub+0x2be>
100421bc:	e1c0      	b.n	10042540 <__aeabi_dsub+0x640>
100421be:	2900      	cmp	r1, #0
100421c0:	d100      	bne.n	100421c4 <__aeabi_dsub+0x2c4>
100421c2:	e0a1      	b.n	10042308 <__aeabi_dsub+0x408>
100421c4:	1a83      	subs	r3, r0, r2
100421c6:	4698      	mov	r8, r3
100421c8:	465b      	mov	r3, fp
100421ca:	4540      	cmp	r0, r8
100421cc:	41ad      	sbcs	r5, r5
100421ce:	1ae3      	subs	r3, r4, r3
100421d0:	426d      	negs	r5, r5
100421d2:	1b5b      	subs	r3, r3, r5
100421d4:	2580      	movs	r5, #128	@ 0x80
100421d6:	042d      	lsls	r5, r5, #16
100421d8:	422b      	tst	r3, r5
100421da:	d100      	bne.n	100421de <__aeabi_dsub+0x2de>
100421dc:	e14b      	b.n	10042476 <__aeabi_dsub+0x576>
100421de:	465b      	mov	r3, fp
100421e0:	1a10      	subs	r0, r2, r0
100421e2:	4282      	cmp	r2, r0
100421e4:	4192      	sbcs	r2, r2
100421e6:	1b1c      	subs	r4, r3, r4
100421e8:	0007      	movs	r7, r0
100421ea:	2601      	movs	r6, #1
100421ec:	4663      	mov	r3, ip
100421ee:	4252      	negs	r2, r2
100421f0:	1aa4      	subs	r4, r4, r2
100421f2:	4327      	orrs	r7, r4
100421f4:	401e      	ands	r6, r3
100421f6:	2f00      	cmp	r7, #0
100421f8:	d100      	bne.n	100421fc <__aeabi_dsub+0x2fc>
100421fa:	e142      	b.n	10042482 <__aeabi_dsub+0x582>
100421fc:	422c      	tst	r4, r5
100421fe:	d100      	bne.n	10042202 <__aeabi_dsub+0x302>
10042200:	e26d      	b.n	100426de <__aeabi_dsub+0x7de>
10042202:	4b19      	ldr	r3, [pc, #100]	@ (10042268 <__aeabi_dsub+0x368>)
10042204:	2501      	movs	r5, #1
10042206:	401c      	ands	r4, r3
10042208:	e71b      	b.n	10042042 <__aeabi_dsub+0x142>
1004220a:	42bd      	cmp	r5, r7
1004220c:	d100      	bne.n	10042210 <__aeabi_dsub+0x310>
1004220e:	e13b      	b.n	10042488 <__aeabi_dsub+0x588>
10042210:	2701      	movs	r7, #1
10042212:	2b38      	cmp	r3, #56	@ 0x38
10042214:	dd00      	ble.n	10042218 <__aeabi_dsub+0x318>
10042216:	e745      	b.n	100420a4 <__aeabi_dsub+0x1a4>
10042218:	2780      	movs	r7, #128	@ 0x80
1004221a:	4659      	mov	r1, fp
1004221c:	043f      	lsls	r7, r7, #16
1004221e:	4339      	orrs	r1, r7
10042220:	468b      	mov	fp, r1
10042222:	e72a      	b.n	1004207a <__aeabi_dsub+0x17a>
10042224:	2400      	movs	r4, #0
10042226:	2700      	movs	r7, #0
10042228:	052d      	lsls	r5, r5, #20
1004222a:	4325      	orrs	r5, r4
1004222c:	07f6      	lsls	r6, r6, #31
1004222e:	4335      	orrs	r5, r6
10042230:	0038      	movs	r0, r7
10042232:	0029      	movs	r1, r5
10042234:	b003      	add	sp, #12
10042236:	bcf0      	pop	{r4, r5, r6, r7}
10042238:	46bb      	mov	fp, r7
1004223a:	46b2      	mov	sl, r6
1004223c:	46a9      	mov	r9, r5
1004223e:	46a0      	mov	r8, r4
10042240:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042242:	077b      	lsls	r3, r7, #29
10042244:	d004      	beq.n	10042250 <__aeabi_dsub+0x350>
10042246:	230f      	movs	r3, #15
10042248:	403b      	ands	r3, r7
1004224a:	2b04      	cmp	r3, #4
1004224c:	d000      	beq.n	10042250 <__aeabi_dsub+0x350>
1004224e:	e6e7      	b.n	10042020 <__aeabi_dsub+0x120>
10042250:	002b      	movs	r3, r5
10042252:	08f8      	lsrs	r0, r7, #3
10042254:	4a03      	ldr	r2, [pc, #12]	@ (10042264 <__aeabi_dsub+0x364>)
10042256:	0767      	lsls	r7, r4, #29
10042258:	4307      	orrs	r7, r0
1004225a:	08e5      	lsrs	r5, r4, #3
1004225c:	4293      	cmp	r3, r2
1004225e:	d100      	bne.n	10042262 <__aeabi_dsub+0x362>
10042260:	e74a      	b.n	100420f8 <__aeabi_dsub+0x1f8>
10042262:	e0a5      	b.n	100423b0 <__aeabi_dsub+0x4b0>
10042264:	000007ff 	.word	0x000007ff
10042268:	ff7fffff 	.word	0xff7fffff
1004226c:	fffff801 	.word	0xfffff801
10042270:	000007fe 	.word	0x000007fe
10042274:	0038      	movs	r0, r7
10042276:	f7fe f9b7 	bl	100405e8 <__clzsi2>
1004227a:	0003      	movs	r3, r0
1004227c:	3318      	adds	r3, #24
1004227e:	2b1f      	cmp	r3, #31
10042280:	dc00      	bgt.n	10042284 <__aeabi_dsub+0x384>
10042282:	e6a7      	b.n	10041fd4 <__aeabi_dsub+0xd4>
10042284:	003a      	movs	r2, r7
10042286:	3808      	subs	r0, #8
10042288:	4082      	lsls	r2, r0
1004228a:	429d      	cmp	r5, r3
1004228c:	dd00      	ble.n	10042290 <__aeabi_dsub+0x390>
1004228e:	e08a      	b.n	100423a6 <__aeabi_dsub+0x4a6>
10042290:	1b5b      	subs	r3, r3, r5
10042292:	1c58      	adds	r0, r3, #1
10042294:	281f      	cmp	r0, #31
10042296:	dc00      	bgt.n	1004229a <__aeabi_dsub+0x39a>
10042298:	e1d8      	b.n	1004264c <__aeabi_dsub+0x74c>
1004229a:	0017      	movs	r7, r2
1004229c:	3b1f      	subs	r3, #31
1004229e:	40df      	lsrs	r7, r3
100422a0:	2820      	cmp	r0, #32
100422a2:	d005      	beq.n	100422b0 <__aeabi_dsub+0x3b0>
100422a4:	2340      	movs	r3, #64	@ 0x40
100422a6:	1a1b      	subs	r3, r3, r0
100422a8:	409a      	lsls	r2, r3
100422aa:	1e53      	subs	r3, r2, #1
100422ac:	419a      	sbcs	r2, r3
100422ae:	4317      	orrs	r7, r2
100422b0:	2500      	movs	r5, #0
100422b2:	2f00      	cmp	r7, #0
100422b4:	d100      	bne.n	100422b8 <__aeabi_dsub+0x3b8>
100422b6:	e0e5      	b.n	10042484 <__aeabi_dsub+0x584>
100422b8:	077b      	lsls	r3, r7, #29
100422ba:	d000      	beq.n	100422be <__aeabi_dsub+0x3be>
100422bc:	e6ab      	b.n	10042016 <__aeabi_dsub+0x116>
100422be:	002c      	movs	r4, r5
100422c0:	e7c6      	b.n	10042250 <__aeabi_dsub+0x350>
100422c2:	08c0      	lsrs	r0, r0, #3
100422c4:	e7c6      	b.n	10042254 <__aeabi_dsub+0x354>
100422c6:	2700      	movs	r7, #0
100422c8:	2400      	movs	r4, #0
100422ca:	4dd1      	ldr	r5, [pc, #836]	@ (10042610 <__aeabi_dsub+0x710>)
100422cc:	e7ac      	b.n	10042228 <__aeabi_dsub+0x328>
100422ce:	4fd1      	ldr	r7, [pc, #836]	@ (10042614 <__aeabi_dsub+0x714>)
100422d0:	1c6b      	adds	r3, r5, #1
100422d2:	423b      	tst	r3, r7
100422d4:	d171      	bne.n	100423ba <__aeabi_dsub+0x4ba>
100422d6:	0023      	movs	r3, r4
100422d8:	4303      	orrs	r3, r0
100422da:	2d00      	cmp	r5, #0
100422dc:	d000      	beq.n	100422e0 <__aeabi_dsub+0x3e0>
100422de:	e14e      	b.n	1004257e <__aeabi_dsub+0x67e>
100422e0:	4657      	mov	r7, sl
100422e2:	2b00      	cmp	r3, #0
100422e4:	d100      	bne.n	100422e8 <__aeabi_dsub+0x3e8>
100422e6:	e1b5      	b.n	10042654 <__aeabi_dsub+0x754>
100422e8:	2f00      	cmp	r7, #0
100422ea:	d00d      	beq.n	10042308 <__aeabi_dsub+0x408>
100422ec:	1883      	adds	r3, r0, r2
100422ee:	4283      	cmp	r3, r0
100422f0:	4180      	sbcs	r0, r0
100422f2:	445c      	add	r4, fp
100422f4:	4240      	negs	r0, r0
100422f6:	1824      	adds	r4, r4, r0
100422f8:	0222      	lsls	r2, r4, #8
100422fa:	d500      	bpl.n	100422fe <__aeabi_dsub+0x3fe>
100422fc:	e1c8      	b.n	10042690 <__aeabi_dsub+0x790>
100422fe:	001f      	movs	r7, r3
10042300:	4698      	mov	r8, r3
10042302:	4327      	orrs	r7, r4
10042304:	d100      	bne.n	10042308 <__aeabi_dsub+0x408>
10042306:	e0bc      	b.n	10042482 <__aeabi_dsub+0x582>
10042308:	4643      	mov	r3, r8
1004230a:	0767      	lsls	r7, r4, #29
1004230c:	08db      	lsrs	r3, r3, #3
1004230e:	431f      	orrs	r7, r3
10042310:	08e5      	lsrs	r5, r4, #3
10042312:	2300      	movs	r3, #0
10042314:	e04c      	b.n	100423b0 <__aeabi_dsub+0x4b0>
10042316:	1a83      	subs	r3, r0, r2
10042318:	4698      	mov	r8, r3
1004231a:	465b      	mov	r3, fp
1004231c:	4540      	cmp	r0, r8
1004231e:	41bf      	sbcs	r7, r7
10042320:	1ae3      	subs	r3, r4, r3
10042322:	427f      	negs	r7, r7
10042324:	1bdb      	subs	r3, r3, r7
10042326:	021f      	lsls	r7, r3, #8
10042328:	d47c      	bmi.n	10042424 <__aeabi_dsub+0x524>
1004232a:	4647      	mov	r7, r8
1004232c:	431f      	orrs	r7, r3
1004232e:	d100      	bne.n	10042332 <__aeabi_dsub+0x432>
10042330:	e0a6      	b.n	10042480 <__aeabi_dsub+0x580>
10042332:	001c      	movs	r4, r3
10042334:	4647      	mov	r7, r8
10042336:	e645      	b.n	10041fc4 <__aeabi_dsub+0xc4>
10042338:	4cb7      	ldr	r4, [pc, #732]	@ (10042618 <__aeabi_dsub+0x718>)
1004233a:	1aed      	subs	r5, r5, r3
1004233c:	4014      	ands	r4, r2
1004233e:	077b      	lsls	r3, r7, #29
10042340:	d000      	beq.n	10042344 <__aeabi_dsub+0x444>
10042342:	e780      	b.n	10042246 <__aeabi_dsub+0x346>
10042344:	e784      	b.n	10042250 <__aeabi_dsub+0x350>
10042346:	464b      	mov	r3, r9
10042348:	0025      	movs	r5, r4
1004234a:	4305      	orrs	r5, r0
1004234c:	d066      	beq.n	1004241c <__aeabi_dsub+0x51c>
1004234e:	1e5f      	subs	r7, r3, #1
10042350:	2b01      	cmp	r3, #1
10042352:	d100      	bne.n	10042356 <__aeabi_dsub+0x456>
10042354:	e0fc      	b.n	10042550 <__aeabi_dsub+0x650>
10042356:	4dae      	ldr	r5, [pc, #696]	@ (10042610 <__aeabi_dsub+0x710>)
10042358:	42ab      	cmp	r3, r5
1004235a:	d100      	bne.n	1004235e <__aeabi_dsub+0x45e>
1004235c:	e15e      	b.n	1004261c <__aeabi_dsub+0x71c>
1004235e:	4666      	mov	r6, ip
10042360:	2f38      	cmp	r7, #56	@ 0x38
10042362:	dc00      	bgt.n	10042366 <__aeabi_dsub+0x466>
10042364:	e0b4      	b.n	100424d0 <__aeabi_dsub+0x5d0>
10042366:	2001      	movs	r0, #1
10042368:	1a17      	subs	r7, r2, r0
1004236a:	42ba      	cmp	r2, r7
1004236c:	4192      	sbcs	r2, r2
1004236e:	465b      	mov	r3, fp
10042370:	4252      	negs	r2, r2
10042372:	464d      	mov	r5, r9
10042374:	1a9c      	subs	r4, r3, r2
10042376:	e620      	b.n	10041fba <__aeabi_dsub+0xba>
10042378:	0767      	lsls	r7, r4, #29
1004237a:	08c0      	lsrs	r0, r0, #3
1004237c:	4307      	orrs	r7, r0
1004237e:	08e5      	lsrs	r5, r4, #3
10042380:	e6ba      	b.n	100420f8 <__aeabi_dsub+0x1f8>
10042382:	001f      	movs	r7, r3
10042384:	4659      	mov	r1, fp
10042386:	3f20      	subs	r7, #32
10042388:	40f9      	lsrs	r1, r7
1004238a:	000f      	movs	r7, r1
1004238c:	2b20      	cmp	r3, #32
1004238e:	d005      	beq.n	1004239c <__aeabi_dsub+0x49c>
10042390:	2140      	movs	r1, #64	@ 0x40
10042392:	1acb      	subs	r3, r1, r3
10042394:	4659      	mov	r1, fp
10042396:	4099      	lsls	r1, r3
10042398:	430a      	orrs	r2, r1
1004239a:	4692      	mov	sl, r2
1004239c:	4653      	mov	r3, sl
1004239e:	1e5a      	subs	r2, r3, #1
100423a0:	4193      	sbcs	r3, r2
100423a2:	431f      	orrs	r7, r3
100423a4:	e604      	b.n	10041fb0 <__aeabi_dsub+0xb0>
100423a6:	1aeb      	subs	r3, r5, r3
100423a8:	4d9b      	ldr	r5, [pc, #620]	@ (10042618 <__aeabi_dsub+0x718>)
100423aa:	4015      	ands	r5, r2
100423ac:	076f      	lsls	r7, r5, #29
100423ae:	08ed      	lsrs	r5, r5, #3
100423b0:	032c      	lsls	r4, r5, #12
100423b2:	055d      	lsls	r5, r3, #21
100423b4:	0b24      	lsrs	r4, r4, #12
100423b6:	0d6d      	lsrs	r5, r5, #21
100423b8:	e736      	b.n	10042228 <__aeabi_dsub+0x328>
100423ba:	4d95      	ldr	r5, [pc, #596]	@ (10042610 <__aeabi_dsub+0x710>)
100423bc:	42ab      	cmp	r3, r5
100423be:	d100      	bne.n	100423c2 <__aeabi_dsub+0x4c2>
100423c0:	e0d6      	b.n	10042570 <__aeabi_dsub+0x670>
100423c2:	1882      	adds	r2, r0, r2
100423c4:	0021      	movs	r1, r4
100423c6:	4282      	cmp	r2, r0
100423c8:	4180      	sbcs	r0, r0
100423ca:	4459      	add	r1, fp
100423cc:	4240      	negs	r0, r0
100423ce:	1808      	adds	r0, r1, r0
100423d0:	07c7      	lsls	r7, r0, #31
100423d2:	0852      	lsrs	r2, r2, #1
100423d4:	4317      	orrs	r7, r2
100423d6:	0844      	lsrs	r4, r0, #1
100423d8:	0752      	lsls	r2, r2, #29
100423da:	d400      	bmi.n	100423de <__aeabi_dsub+0x4de>
100423dc:	e185      	b.n	100426ea <__aeabi_dsub+0x7ea>
100423de:	220f      	movs	r2, #15
100423e0:	001d      	movs	r5, r3
100423e2:	403a      	ands	r2, r7
100423e4:	2a04      	cmp	r2, #4
100423e6:	d000      	beq.n	100423ea <__aeabi_dsub+0x4ea>
100423e8:	e61a      	b.n	10042020 <__aeabi_dsub+0x120>
100423ea:	08ff      	lsrs	r7, r7, #3
100423ec:	0764      	lsls	r4, r4, #29
100423ee:	4327      	orrs	r7, r4
100423f0:	0905      	lsrs	r5, r0, #4
100423f2:	e7dd      	b.n	100423b0 <__aeabi_dsub+0x4b0>
100423f4:	465b      	mov	r3, fp
100423f6:	08d2      	lsrs	r2, r2, #3
100423f8:	075f      	lsls	r7, r3, #29
100423fa:	4317      	orrs	r7, r2
100423fc:	08dd      	lsrs	r5, r3, #3
100423fe:	e67b      	b.n	100420f8 <__aeabi_dsub+0x1f8>
10042400:	2700      	movs	r7, #0
10042402:	2400      	movs	r4, #0
10042404:	e710      	b.n	10042228 <__aeabi_dsub+0x328>
10042406:	2b00      	cmp	r3, #0
10042408:	d000      	beq.n	1004240c <__aeabi_dsub+0x50c>
1004240a:	e0d6      	b.n	100425ba <__aeabi_dsub+0x6ba>
1004240c:	2900      	cmp	r1, #0
1004240e:	d000      	beq.n	10042412 <__aeabi_dsub+0x512>
10042410:	e12f      	b.n	10042672 <__aeabi_dsub+0x772>
10042412:	2480      	movs	r4, #128	@ 0x80
10042414:	2600      	movs	r6, #0
10042416:	4d7e      	ldr	r5, [pc, #504]	@ (10042610 <__aeabi_dsub+0x710>)
10042418:	0324      	lsls	r4, r4, #12
1004241a:	e705      	b.n	10042228 <__aeabi_dsub+0x328>
1004241c:	4666      	mov	r6, ip
1004241e:	465c      	mov	r4, fp
10042420:	08d0      	lsrs	r0, r2, #3
10042422:	e717      	b.n	10042254 <__aeabi_dsub+0x354>
10042424:	465b      	mov	r3, fp
10042426:	1a17      	subs	r7, r2, r0
10042428:	42ba      	cmp	r2, r7
1004242a:	4192      	sbcs	r2, r2
1004242c:	1b1c      	subs	r4, r3, r4
1004242e:	2601      	movs	r6, #1
10042430:	4663      	mov	r3, ip
10042432:	4252      	negs	r2, r2
10042434:	1aa4      	subs	r4, r4, r2
10042436:	401e      	ands	r6, r3
10042438:	e5c4      	b.n	10041fc4 <__aeabi_dsub+0xc4>
1004243a:	1883      	adds	r3, r0, r2
1004243c:	4283      	cmp	r3, r0
1004243e:	4180      	sbcs	r0, r0
10042440:	445c      	add	r4, fp
10042442:	4240      	negs	r0, r0
10042444:	1825      	adds	r5, r4, r0
10042446:	022a      	lsls	r2, r5, #8
10042448:	d400      	bmi.n	1004244c <__aeabi_dsub+0x54c>
1004244a:	e0da      	b.n	10042602 <__aeabi_dsub+0x702>
1004244c:	4a72      	ldr	r2, [pc, #456]	@ (10042618 <__aeabi_dsub+0x718>)
1004244e:	085b      	lsrs	r3, r3, #1
10042450:	4015      	ands	r5, r2
10042452:	07ea      	lsls	r2, r5, #31
10042454:	431a      	orrs	r2, r3
10042456:	0869      	lsrs	r1, r5, #1
10042458:	075b      	lsls	r3, r3, #29
1004245a:	d400      	bmi.n	1004245e <__aeabi_dsub+0x55e>
1004245c:	e14a      	b.n	100426f4 <__aeabi_dsub+0x7f4>
1004245e:	230f      	movs	r3, #15
10042460:	4013      	ands	r3, r2
10042462:	2b04      	cmp	r3, #4
10042464:	d100      	bne.n	10042468 <__aeabi_dsub+0x568>
10042466:	e0fc      	b.n	10042662 <__aeabi_dsub+0x762>
10042468:	1d17      	adds	r7, r2, #4
1004246a:	4297      	cmp	r7, r2
1004246c:	41a4      	sbcs	r4, r4
1004246e:	4264      	negs	r4, r4
10042470:	2502      	movs	r5, #2
10042472:	1864      	adds	r4, r4, r1
10042474:	e6ec      	b.n	10042250 <__aeabi_dsub+0x350>
10042476:	4647      	mov	r7, r8
10042478:	001c      	movs	r4, r3
1004247a:	431f      	orrs	r7, r3
1004247c:	d000      	beq.n	10042480 <__aeabi_dsub+0x580>
1004247e:	e743      	b.n	10042308 <__aeabi_dsub+0x408>
10042480:	2600      	movs	r6, #0
10042482:	2500      	movs	r5, #0
10042484:	2400      	movs	r4, #0
10042486:	e6cf      	b.n	10042228 <__aeabi_dsub+0x328>
10042488:	08c0      	lsrs	r0, r0, #3
1004248a:	0767      	lsls	r7, r4, #29
1004248c:	4307      	orrs	r7, r0
1004248e:	08e5      	lsrs	r5, r4, #3
10042490:	e632      	b.n	100420f8 <__aeabi_dsub+0x1f8>
10042492:	1a87      	subs	r7, r0, r2
10042494:	465b      	mov	r3, fp
10042496:	42b8      	cmp	r0, r7
10042498:	4180      	sbcs	r0, r0
1004249a:	1ae4      	subs	r4, r4, r3
1004249c:	4240      	negs	r0, r0
1004249e:	1a24      	subs	r4, r4, r0
100424a0:	0223      	lsls	r3, r4, #8
100424a2:	d428      	bmi.n	100424f6 <__aeabi_dsub+0x5f6>
100424a4:	0763      	lsls	r3, r4, #29
100424a6:	08ff      	lsrs	r7, r7, #3
100424a8:	431f      	orrs	r7, r3
100424aa:	08e5      	lsrs	r5, r4, #3
100424ac:	2301      	movs	r3, #1
100424ae:	e77f      	b.n	100423b0 <__aeabi_dsub+0x4b0>
100424b0:	2b00      	cmp	r3, #0
100424b2:	d100      	bne.n	100424b6 <__aeabi_dsub+0x5b6>
100424b4:	e673      	b.n	1004219e <__aeabi_dsub+0x29e>
100424b6:	464b      	mov	r3, r9
100424b8:	1b5f      	subs	r7, r3, r5
100424ba:	003b      	movs	r3, r7
100424bc:	2d00      	cmp	r5, #0
100424be:	d100      	bne.n	100424c2 <__aeabi_dsub+0x5c2>
100424c0:	e742      	b.n	10042348 <__aeabi_dsub+0x448>
100424c2:	2f38      	cmp	r7, #56	@ 0x38
100424c4:	dd00      	ble.n	100424c8 <__aeabi_dsub+0x5c8>
100424c6:	e0ec      	b.n	100426a2 <__aeabi_dsub+0x7a2>
100424c8:	2380      	movs	r3, #128	@ 0x80
100424ca:	000e      	movs	r6, r1
100424cc:	041b      	lsls	r3, r3, #16
100424ce:	431c      	orrs	r4, r3
100424d0:	2f1f      	cmp	r7, #31
100424d2:	dc25      	bgt.n	10042520 <__aeabi_dsub+0x620>
100424d4:	2520      	movs	r5, #32
100424d6:	0023      	movs	r3, r4
100424d8:	1bed      	subs	r5, r5, r7
100424da:	0001      	movs	r1, r0
100424dc:	40a8      	lsls	r0, r5
100424de:	40ab      	lsls	r3, r5
100424e0:	40f9      	lsrs	r1, r7
100424e2:	1e45      	subs	r5, r0, #1
100424e4:	41a8      	sbcs	r0, r5
100424e6:	430b      	orrs	r3, r1
100424e8:	40fc      	lsrs	r4, r7
100424ea:	4318      	orrs	r0, r3
100424ec:	465b      	mov	r3, fp
100424ee:	1b1b      	subs	r3, r3, r4
100424f0:	469b      	mov	fp, r3
100424f2:	e739      	b.n	10042368 <__aeabi_dsub+0x468>
100424f4:	4666      	mov	r6, ip
100424f6:	2501      	movs	r5, #1
100424f8:	e562      	b.n	10041fc0 <__aeabi_dsub+0xc0>
100424fa:	001f      	movs	r7, r3
100424fc:	4659      	mov	r1, fp
100424fe:	3f20      	subs	r7, #32
10042500:	40f9      	lsrs	r1, r7
10042502:	468c      	mov	ip, r1
10042504:	2b20      	cmp	r3, #32
10042506:	d005      	beq.n	10042514 <__aeabi_dsub+0x614>
10042508:	2740      	movs	r7, #64	@ 0x40
1004250a:	4659      	mov	r1, fp
1004250c:	1afb      	subs	r3, r7, r3
1004250e:	4099      	lsls	r1, r3
10042510:	430a      	orrs	r2, r1
10042512:	4692      	mov	sl, r2
10042514:	4657      	mov	r7, sl
10042516:	1e7b      	subs	r3, r7, #1
10042518:	419f      	sbcs	r7, r3
1004251a:	4663      	mov	r3, ip
1004251c:	431f      	orrs	r7, r3
1004251e:	e5c1      	b.n	100420a4 <__aeabi_dsub+0x1a4>
10042520:	003b      	movs	r3, r7
10042522:	0025      	movs	r5, r4
10042524:	3b20      	subs	r3, #32
10042526:	40dd      	lsrs	r5, r3
10042528:	2f20      	cmp	r7, #32
1004252a:	d004      	beq.n	10042536 <__aeabi_dsub+0x636>
1004252c:	2340      	movs	r3, #64	@ 0x40
1004252e:	1bdb      	subs	r3, r3, r7
10042530:	409c      	lsls	r4, r3
10042532:	4320      	orrs	r0, r4
10042534:	4680      	mov	r8, r0
10042536:	4640      	mov	r0, r8
10042538:	1e43      	subs	r3, r0, #1
1004253a:	4198      	sbcs	r0, r3
1004253c:	4328      	orrs	r0, r5
1004253e:	e713      	b.n	10042368 <__aeabi_dsub+0x468>
10042540:	2900      	cmp	r1, #0
10042542:	d09d      	beq.n	10042480 <__aeabi_dsub+0x580>
10042544:	2601      	movs	r6, #1
10042546:	4663      	mov	r3, ip
10042548:	465c      	mov	r4, fp
1004254a:	4690      	mov	r8, r2
1004254c:	401e      	ands	r6, r3
1004254e:	e6db      	b.n	10042308 <__aeabi_dsub+0x408>
10042550:	1a17      	subs	r7, r2, r0
10042552:	465b      	mov	r3, fp
10042554:	42ba      	cmp	r2, r7
10042556:	4192      	sbcs	r2, r2
10042558:	1b1c      	subs	r4, r3, r4
1004255a:	4252      	negs	r2, r2
1004255c:	1aa4      	subs	r4, r4, r2
1004255e:	0223      	lsls	r3, r4, #8
10042560:	d4c8      	bmi.n	100424f4 <__aeabi_dsub+0x5f4>
10042562:	0763      	lsls	r3, r4, #29
10042564:	08ff      	lsrs	r7, r7, #3
10042566:	431f      	orrs	r7, r3
10042568:	4666      	mov	r6, ip
1004256a:	2301      	movs	r3, #1
1004256c:	08e5      	lsrs	r5, r4, #3
1004256e:	e71f      	b.n	100423b0 <__aeabi_dsub+0x4b0>
10042570:	001d      	movs	r5, r3
10042572:	2400      	movs	r4, #0
10042574:	2700      	movs	r7, #0
10042576:	e657      	b.n	10042228 <__aeabi_dsub+0x328>
10042578:	465c      	mov	r4, fp
1004257a:	08d0      	lsrs	r0, r2, #3
1004257c:	e66a      	b.n	10042254 <__aeabi_dsub+0x354>
1004257e:	2b00      	cmp	r3, #0
10042580:	d100      	bne.n	10042584 <__aeabi_dsub+0x684>
10042582:	e737      	b.n	100423f4 <__aeabi_dsub+0x4f4>
10042584:	4653      	mov	r3, sl
10042586:	08c0      	lsrs	r0, r0, #3
10042588:	0767      	lsls	r7, r4, #29
1004258a:	4307      	orrs	r7, r0
1004258c:	08e5      	lsrs	r5, r4, #3
1004258e:	2b00      	cmp	r3, #0
10042590:	d100      	bne.n	10042594 <__aeabi_dsub+0x694>
10042592:	e5b1      	b.n	100420f8 <__aeabi_dsub+0x1f8>
10042594:	2380      	movs	r3, #128	@ 0x80
10042596:	031b      	lsls	r3, r3, #12
10042598:	421d      	tst	r5, r3
1004259a:	d008      	beq.n	100425ae <__aeabi_dsub+0x6ae>
1004259c:	4659      	mov	r1, fp
1004259e:	08c8      	lsrs	r0, r1, #3
100425a0:	4218      	tst	r0, r3
100425a2:	d104      	bne.n	100425ae <__aeabi_dsub+0x6ae>
100425a4:	08d2      	lsrs	r2, r2, #3
100425a6:	0749      	lsls	r1, r1, #29
100425a8:	430a      	orrs	r2, r1
100425aa:	0017      	movs	r7, r2
100425ac:	0005      	movs	r5, r0
100425ae:	0f7b      	lsrs	r3, r7, #29
100425b0:	00ff      	lsls	r7, r7, #3
100425b2:	08ff      	lsrs	r7, r7, #3
100425b4:	075b      	lsls	r3, r3, #29
100425b6:	431f      	orrs	r7, r3
100425b8:	e59e      	b.n	100420f8 <__aeabi_dsub+0x1f8>
100425ba:	08c0      	lsrs	r0, r0, #3
100425bc:	0763      	lsls	r3, r4, #29
100425be:	4318      	orrs	r0, r3
100425c0:	08e5      	lsrs	r5, r4, #3
100425c2:	2900      	cmp	r1, #0
100425c4:	d053      	beq.n	1004266e <__aeabi_dsub+0x76e>
100425c6:	2380      	movs	r3, #128	@ 0x80
100425c8:	031b      	lsls	r3, r3, #12
100425ca:	421d      	tst	r5, r3
100425cc:	d00a      	beq.n	100425e4 <__aeabi_dsub+0x6e4>
100425ce:	4659      	mov	r1, fp
100425d0:	08cc      	lsrs	r4, r1, #3
100425d2:	421c      	tst	r4, r3
100425d4:	d106      	bne.n	100425e4 <__aeabi_dsub+0x6e4>
100425d6:	2601      	movs	r6, #1
100425d8:	4663      	mov	r3, ip
100425da:	0025      	movs	r5, r4
100425dc:	08d0      	lsrs	r0, r2, #3
100425de:	0749      	lsls	r1, r1, #29
100425e0:	4308      	orrs	r0, r1
100425e2:	401e      	ands	r6, r3
100425e4:	0f47      	lsrs	r7, r0, #29
100425e6:	00c0      	lsls	r0, r0, #3
100425e8:	08c0      	lsrs	r0, r0, #3
100425ea:	077f      	lsls	r7, r7, #29
100425ec:	4307      	orrs	r7, r0
100425ee:	e583      	b.n	100420f8 <__aeabi_dsub+0x1f8>
100425f0:	1883      	adds	r3, r0, r2
100425f2:	4293      	cmp	r3, r2
100425f4:	4192      	sbcs	r2, r2
100425f6:	445c      	add	r4, fp
100425f8:	4252      	negs	r2, r2
100425fa:	18a5      	adds	r5, r4, r2
100425fc:	022a      	lsls	r2, r5, #8
100425fe:	d500      	bpl.n	10042602 <__aeabi_dsub+0x702>
10042600:	e724      	b.n	1004244c <__aeabi_dsub+0x54c>
10042602:	076f      	lsls	r7, r5, #29
10042604:	08db      	lsrs	r3, r3, #3
10042606:	431f      	orrs	r7, r3
10042608:	08ed      	lsrs	r5, r5, #3
1004260a:	2301      	movs	r3, #1
1004260c:	e6d0      	b.n	100423b0 <__aeabi_dsub+0x4b0>
1004260e:	46c0      	nop			@ (mov r8, r8)
10042610:	000007ff 	.word	0x000007ff
10042614:	000007fe 	.word	0x000007fe
10042618:	ff7fffff 	.word	0xff7fffff
1004261c:	465b      	mov	r3, fp
1004261e:	08d2      	lsrs	r2, r2, #3
10042620:	075f      	lsls	r7, r3, #29
10042622:	4666      	mov	r6, ip
10042624:	4317      	orrs	r7, r2
10042626:	08dd      	lsrs	r5, r3, #3
10042628:	e566      	b.n	100420f8 <__aeabi_dsub+0x1f8>
1004262a:	0025      	movs	r5, r4
1004262c:	3b20      	subs	r3, #32
1004262e:	40dd      	lsrs	r5, r3
10042630:	4663      	mov	r3, ip
10042632:	2b20      	cmp	r3, #32
10042634:	d005      	beq.n	10042642 <__aeabi_dsub+0x742>
10042636:	2340      	movs	r3, #64	@ 0x40
10042638:	4661      	mov	r1, ip
1004263a:	1a5b      	subs	r3, r3, r1
1004263c:	409c      	lsls	r4, r3
1004263e:	4320      	orrs	r0, r4
10042640:	4680      	mov	r8, r0
10042642:	4647      	mov	r7, r8
10042644:	1e7b      	subs	r3, r7, #1
10042646:	419f      	sbcs	r7, r3
10042648:	432f      	orrs	r7, r5
1004264a:	e5a0      	b.n	1004218e <__aeabi_dsub+0x28e>
1004264c:	2120      	movs	r1, #32
1004264e:	2700      	movs	r7, #0
10042650:	1a09      	subs	r1, r1, r0
10042652:	e4d2      	b.n	10041ffa <__aeabi_dsub+0xfa>
10042654:	2f00      	cmp	r7, #0
10042656:	d100      	bne.n	1004265a <__aeabi_dsub+0x75a>
10042658:	e713      	b.n	10042482 <__aeabi_dsub+0x582>
1004265a:	465c      	mov	r4, fp
1004265c:	0017      	movs	r7, r2
1004265e:	2500      	movs	r5, #0
10042660:	e5f6      	b.n	10042250 <__aeabi_dsub+0x350>
10042662:	08d7      	lsrs	r7, r2, #3
10042664:	0749      	lsls	r1, r1, #29
10042666:	2302      	movs	r3, #2
10042668:	430f      	orrs	r7, r1
1004266a:	092d      	lsrs	r5, r5, #4
1004266c:	e6a0      	b.n	100423b0 <__aeabi_dsub+0x4b0>
1004266e:	0007      	movs	r7, r0
10042670:	e542      	b.n	100420f8 <__aeabi_dsub+0x1f8>
10042672:	465b      	mov	r3, fp
10042674:	2601      	movs	r6, #1
10042676:	075f      	lsls	r7, r3, #29
10042678:	08dd      	lsrs	r5, r3, #3
1004267a:	4663      	mov	r3, ip
1004267c:	08d2      	lsrs	r2, r2, #3
1004267e:	4317      	orrs	r7, r2
10042680:	401e      	ands	r6, r3
10042682:	e539      	b.n	100420f8 <__aeabi_dsub+0x1f8>
10042684:	465b      	mov	r3, fp
10042686:	08d2      	lsrs	r2, r2, #3
10042688:	075f      	lsls	r7, r3, #29
1004268a:	4317      	orrs	r7, r2
1004268c:	08dd      	lsrs	r5, r3, #3
1004268e:	e533      	b.n	100420f8 <__aeabi_dsub+0x1f8>
10042690:	4a1e      	ldr	r2, [pc, #120]	@ (1004270c <__aeabi_dsub+0x80c>)
10042692:	08db      	lsrs	r3, r3, #3
10042694:	4022      	ands	r2, r4
10042696:	0757      	lsls	r7, r2, #29
10042698:	0252      	lsls	r2, r2, #9
1004269a:	2501      	movs	r5, #1
1004269c:	431f      	orrs	r7, r3
1004269e:	0b14      	lsrs	r4, r2, #12
100426a0:	e5c2      	b.n	10042228 <__aeabi_dsub+0x328>
100426a2:	000e      	movs	r6, r1
100426a4:	2001      	movs	r0, #1
100426a6:	e65f      	b.n	10042368 <__aeabi_dsub+0x468>
100426a8:	2b00      	cmp	r3, #0
100426aa:	d00d      	beq.n	100426c8 <__aeabi_dsub+0x7c8>
100426ac:	464b      	mov	r3, r9
100426ae:	1b5b      	subs	r3, r3, r5
100426b0:	469c      	mov	ip, r3
100426b2:	2d00      	cmp	r5, #0
100426b4:	d100      	bne.n	100426b8 <__aeabi_dsub+0x7b8>
100426b6:	e548      	b.n	1004214a <__aeabi_dsub+0x24a>
100426b8:	2701      	movs	r7, #1
100426ba:	2b38      	cmp	r3, #56	@ 0x38
100426bc:	dd00      	ble.n	100426c0 <__aeabi_dsub+0x7c0>
100426be:	e566      	b.n	1004218e <__aeabi_dsub+0x28e>
100426c0:	2380      	movs	r3, #128	@ 0x80
100426c2:	041b      	lsls	r3, r3, #16
100426c4:	431c      	orrs	r4, r3
100426c6:	e550      	b.n	1004216a <__aeabi_dsub+0x26a>
100426c8:	1c6b      	adds	r3, r5, #1
100426ca:	4d11      	ldr	r5, [pc, #68]	@ (10042710 <__aeabi_dsub+0x810>)
100426cc:	422b      	tst	r3, r5
100426ce:	d000      	beq.n	100426d2 <__aeabi_dsub+0x7d2>
100426d0:	e673      	b.n	100423ba <__aeabi_dsub+0x4ba>
100426d2:	4659      	mov	r1, fp
100426d4:	0023      	movs	r3, r4
100426d6:	4311      	orrs	r1, r2
100426d8:	468a      	mov	sl, r1
100426da:	4303      	orrs	r3, r0
100426dc:	e600      	b.n	100422e0 <__aeabi_dsub+0x3e0>
100426de:	0767      	lsls	r7, r4, #29
100426e0:	08c0      	lsrs	r0, r0, #3
100426e2:	2300      	movs	r3, #0
100426e4:	4307      	orrs	r7, r0
100426e6:	08e5      	lsrs	r5, r4, #3
100426e8:	e662      	b.n	100423b0 <__aeabi_dsub+0x4b0>
100426ea:	0764      	lsls	r4, r4, #29
100426ec:	08ff      	lsrs	r7, r7, #3
100426ee:	4327      	orrs	r7, r4
100426f0:	0905      	lsrs	r5, r0, #4
100426f2:	e65d      	b.n	100423b0 <__aeabi_dsub+0x4b0>
100426f4:	08d2      	lsrs	r2, r2, #3
100426f6:	0749      	lsls	r1, r1, #29
100426f8:	4311      	orrs	r1, r2
100426fa:	000f      	movs	r7, r1
100426fc:	2302      	movs	r3, #2
100426fe:	092d      	lsrs	r5, r5, #4
10042700:	e656      	b.n	100423b0 <__aeabi_dsub+0x4b0>
10042702:	0007      	movs	r7, r0
10042704:	e5a4      	b.n	10042250 <__aeabi_dsub+0x350>
10042706:	0038      	movs	r0, r7
10042708:	e48f      	b.n	1004202a <__aeabi_dsub+0x12a>
1004270a:	46c0      	nop			@ (mov r8, r8)
1004270c:	ff7fffff 	.word	0xff7fffff
10042710:	000007fe 	.word	0x000007fe

10042714 <__aeabi_dcmpun>:
10042714:	b5f0      	push	{r4, r5, r6, r7, lr}
10042716:	46c6      	mov	lr, r8
10042718:	031e      	lsls	r6, r3, #12
1004271a:	0b36      	lsrs	r6, r6, #12
1004271c:	46b0      	mov	r8, r6
1004271e:	4e0d      	ldr	r6, [pc, #52]	@ (10042754 <__aeabi_dcmpun+0x40>)
10042720:	030c      	lsls	r4, r1, #12
10042722:	004d      	lsls	r5, r1, #1
10042724:	005f      	lsls	r7, r3, #1
10042726:	b500      	push	{lr}
10042728:	0b24      	lsrs	r4, r4, #12
1004272a:	0d6d      	lsrs	r5, r5, #21
1004272c:	0d7f      	lsrs	r7, r7, #21
1004272e:	42b5      	cmp	r5, r6
10042730:	d00b      	beq.n	1004274a <__aeabi_dcmpun+0x36>
10042732:	4908      	ldr	r1, [pc, #32]	@ (10042754 <__aeabi_dcmpun+0x40>)
10042734:	2000      	movs	r0, #0
10042736:	428f      	cmp	r7, r1
10042738:	d104      	bne.n	10042744 <__aeabi_dcmpun+0x30>
1004273a:	4646      	mov	r6, r8
1004273c:	4316      	orrs	r6, r2
1004273e:	0030      	movs	r0, r6
10042740:	1e43      	subs	r3, r0, #1
10042742:	4198      	sbcs	r0, r3
10042744:	bc80      	pop	{r7}
10042746:	46b8      	mov	r8, r7
10042748:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004274a:	4304      	orrs	r4, r0
1004274c:	2001      	movs	r0, #1
1004274e:	2c00      	cmp	r4, #0
10042750:	d1f8      	bne.n	10042744 <__aeabi_dcmpun+0x30>
10042752:	e7ee      	b.n	10042732 <__aeabi_dcmpun+0x1e>
10042754:	000007ff 	.word	0x000007ff

10042758 <__aeabi_d2iz>:
10042758:	000b      	movs	r3, r1
1004275a:	0002      	movs	r2, r0
1004275c:	b570      	push	{r4, r5, r6, lr}
1004275e:	4d16      	ldr	r5, [pc, #88]	@ (100427b8 <__aeabi_d2iz+0x60>)
10042760:	030c      	lsls	r4, r1, #12
10042762:	b082      	sub	sp, #8
10042764:	0049      	lsls	r1, r1, #1
10042766:	2000      	movs	r0, #0
10042768:	9200      	str	r2, [sp, #0]
1004276a:	9301      	str	r3, [sp, #4]
1004276c:	0b24      	lsrs	r4, r4, #12
1004276e:	0d49      	lsrs	r1, r1, #21
10042770:	0fde      	lsrs	r6, r3, #31
10042772:	42a9      	cmp	r1, r5
10042774:	dd04      	ble.n	10042780 <__aeabi_d2iz+0x28>
10042776:	4811      	ldr	r0, [pc, #68]	@ (100427bc <__aeabi_d2iz+0x64>)
10042778:	4281      	cmp	r1, r0
1004277a:	dd03      	ble.n	10042784 <__aeabi_d2iz+0x2c>
1004277c:	4b10      	ldr	r3, [pc, #64]	@ (100427c0 <__aeabi_d2iz+0x68>)
1004277e:	18f0      	adds	r0, r6, r3
10042780:	b002      	add	sp, #8
10042782:	bd70      	pop	{r4, r5, r6, pc}
10042784:	2080      	movs	r0, #128	@ 0x80
10042786:	0340      	lsls	r0, r0, #13
10042788:	4320      	orrs	r0, r4
1004278a:	4c0e      	ldr	r4, [pc, #56]	@ (100427c4 <__aeabi_d2iz+0x6c>)
1004278c:	1a64      	subs	r4, r4, r1
1004278e:	2c1f      	cmp	r4, #31
10042790:	dd08      	ble.n	100427a4 <__aeabi_d2iz+0x4c>
10042792:	4b0d      	ldr	r3, [pc, #52]	@ (100427c8 <__aeabi_d2iz+0x70>)
10042794:	1a5b      	subs	r3, r3, r1
10042796:	40d8      	lsrs	r0, r3
10042798:	0003      	movs	r3, r0
1004279a:	4258      	negs	r0, r3
1004279c:	2e00      	cmp	r6, #0
1004279e:	d1ef      	bne.n	10042780 <__aeabi_d2iz+0x28>
100427a0:	0018      	movs	r0, r3
100427a2:	e7ed      	b.n	10042780 <__aeabi_d2iz+0x28>
100427a4:	4b09      	ldr	r3, [pc, #36]	@ (100427cc <__aeabi_d2iz+0x74>)
100427a6:	9a00      	ldr	r2, [sp, #0]
100427a8:	469c      	mov	ip, r3
100427aa:	0003      	movs	r3, r0
100427ac:	4461      	add	r1, ip
100427ae:	408b      	lsls	r3, r1
100427b0:	40e2      	lsrs	r2, r4
100427b2:	4313      	orrs	r3, r2
100427b4:	e7f1      	b.n	1004279a <__aeabi_d2iz+0x42>
100427b6:	46c0      	nop			@ (mov r8, r8)
100427b8:	000003fe 	.word	0x000003fe
100427bc:	0000041d 	.word	0x0000041d
100427c0:	7fffffff 	.word	0x7fffffff
100427c4:	00000433 	.word	0x00000433
100427c8:	00000413 	.word	0x00000413
100427cc:	fffffbed 	.word	0xfffffbed

100427d0 <__aeabi_i2d>:
100427d0:	b570      	push	{r4, r5, r6, lr}
100427d2:	2800      	cmp	r0, #0
100427d4:	d016      	beq.n	10042804 <__aeabi_i2d+0x34>
100427d6:	17c3      	asrs	r3, r0, #31
100427d8:	18c5      	adds	r5, r0, r3
100427da:	405d      	eors	r5, r3
100427dc:	0fc4      	lsrs	r4, r0, #31
100427de:	0028      	movs	r0, r5
100427e0:	f7fd ff02 	bl	100405e8 <__clzsi2>
100427e4:	4b10      	ldr	r3, [pc, #64]	@ (10042828 <__aeabi_i2d+0x58>)
100427e6:	1a1b      	subs	r3, r3, r0
100427e8:	055b      	lsls	r3, r3, #21
100427ea:	0d5b      	lsrs	r3, r3, #21
100427ec:	280a      	cmp	r0, #10
100427ee:	dc14      	bgt.n	1004281a <__aeabi_i2d+0x4a>
100427f0:	0002      	movs	r2, r0
100427f2:	002e      	movs	r6, r5
100427f4:	3215      	adds	r2, #21
100427f6:	4096      	lsls	r6, r2
100427f8:	220b      	movs	r2, #11
100427fa:	1a12      	subs	r2, r2, r0
100427fc:	40d5      	lsrs	r5, r2
100427fe:	032d      	lsls	r5, r5, #12
10042800:	0b2d      	lsrs	r5, r5, #12
10042802:	e003      	b.n	1004280c <__aeabi_i2d+0x3c>
10042804:	2400      	movs	r4, #0
10042806:	2300      	movs	r3, #0
10042808:	2500      	movs	r5, #0
1004280a:	2600      	movs	r6, #0
1004280c:	051b      	lsls	r3, r3, #20
1004280e:	432b      	orrs	r3, r5
10042810:	07e4      	lsls	r4, r4, #31
10042812:	4323      	orrs	r3, r4
10042814:	0030      	movs	r0, r6
10042816:	0019      	movs	r1, r3
10042818:	bd70      	pop	{r4, r5, r6, pc}
1004281a:	380b      	subs	r0, #11
1004281c:	4085      	lsls	r5, r0
1004281e:	032d      	lsls	r5, r5, #12
10042820:	2600      	movs	r6, #0
10042822:	0b2d      	lsrs	r5, r5, #12
10042824:	e7f2      	b.n	1004280c <__aeabi_i2d+0x3c>
10042826:	46c0      	nop			@ (mov r8, r8)
10042828:	0000041e 	.word	0x0000041e

1004282c <__aeabi_ui2d>:
1004282c:	b510      	push	{r4, lr}
1004282e:	1e04      	subs	r4, r0, #0
10042830:	d010      	beq.n	10042854 <__aeabi_ui2d+0x28>
10042832:	f7fd fed9 	bl	100405e8 <__clzsi2>
10042836:	4b0e      	ldr	r3, [pc, #56]	@ (10042870 <__aeabi_ui2d+0x44>)
10042838:	1a1b      	subs	r3, r3, r0
1004283a:	055b      	lsls	r3, r3, #21
1004283c:	0d5b      	lsrs	r3, r3, #21
1004283e:	280a      	cmp	r0, #10
10042840:	dc0f      	bgt.n	10042862 <__aeabi_ui2d+0x36>
10042842:	220b      	movs	r2, #11
10042844:	0021      	movs	r1, r4
10042846:	1a12      	subs	r2, r2, r0
10042848:	40d1      	lsrs	r1, r2
1004284a:	3015      	adds	r0, #21
1004284c:	030a      	lsls	r2, r1, #12
1004284e:	4084      	lsls	r4, r0
10042850:	0b12      	lsrs	r2, r2, #12
10042852:	e001      	b.n	10042858 <__aeabi_ui2d+0x2c>
10042854:	2300      	movs	r3, #0
10042856:	2200      	movs	r2, #0
10042858:	051b      	lsls	r3, r3, #20
1004285a:	4313      	orrs	r3, r2
1004285c:	0020      	movs	r0, r4
1004285e:	0019      	movs	r1, r3
10042860:	bd10      	pop	{r4, pc}
10042862:	0022      	movs	r2, r4
10042864:	380b      	subs	r0, #11
10042866:	4082      	lsls	r2, r0
10042868:	0312      	lsls	r2, r2, #12
1004286a:	2400      	movs	r4, #0
1004286c:	0b12      	lsrs	r2, r2, #12
1004286e:	e7f3      	b.n	10042858 <__aeabi_ui2d+0x2c>
10042870:	0000041e 	.word	0x0000041e

10042874 <__aeabi_d2f>:
10042874:	b5f0      	push	{r4, r5, r6, r7, lr}
10042876:	004b      	lsls	r3, r1, #1
10042878:	030f      	lsls	r7, r1, #12
1004287a:	0d5b      	lsrs	r3, r3, #21
1004287c:	4c3a      	ldr	r4, [pc, #232]	@ (10042968 <__aeabi_d2f+0xf4>)
1004287e:	0f45      	lsrs	r5, r0, #29
10042880:	b083      	sub	sp, #12
10042882:	0a7f      	lsrs	r7, r7, #9
10042884:	1c5e      	adds	r6, r3, #1
10042886:	432f      	orrs	r7, r5
10042888:	9000      	str	r0, [sp, #0]
1004288a:	9101      	str	r1, [sp, #4]
1004288c:	0fca      	lsrs	r2, r1, #31
1004288e:	00c5      	lsls	r5, r0, #3
10042890:	4226      	tst	r6, r4
10042892:	d00b      	beq.n	100428ac <__aeabi_d2f+0x38>
10042894:	4935      	ldr	r1, [pc, #212]	@ (1004296c <__aeabi_d2f+0xf8>)
10042896:	185c      	adds	r4, r3, r1
10042898:	2cfe      	cmp	r4, #254	@ 0xfe
1004289a:	dd13      	ble.n	100428c4 <__aeabi_d2f+0x50>
1004289c:	20ff      	movs	r0, #255	@ 0xff
1004289e:	2300      	movs	r3, #0
100428a0:	05c0      	lsls	r0, r0, #23
100428a2:	4318      	orrs	r0, r3
100428a4:	07d2      	lsls	r2, r2, #31
100428a6:	4310      	orrs	r0, r2
100428a8:	b003      	add	sp, #12
100428aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100428ac:	433d      	orrs	r5, r7
100428ae:	2b00      	cmp	r3, #0
100428b0:	d101      	bne.n	100428b6 <__aeabi_d2f+0x42>
100428b2:	2000      	movs	r0, #0
100428b4:	e7f4      	b.n	100428a0 <__aeabi_d2f+0x2c>
100428b6:	2d00      	cmp	r5, #0
100428b8:	d0f0      	beq.n	1004289c <__aeabi_d2f+0x28>
100428ba:	2380      	movs	r3, #128	@ 0x80
100428bc:	03db      	lsls	r3, r3, #15
100428be:	20ff      	movs	r0, #255	@ 0xff
100428c0:	433b      	orrs	r3, r7
100428c2:	e7ed      	b.n	100428a0 <__aeabi_d2f+0x2c>
100428c4:	2c00      	cmp	r4, #0
100428c6:	dd0c      	ble.n	100428e2 <__aeabi_d2f+0x6e>
100428c8:	9b00      	ldr	r3, [sp, #0]
100428ca:	00ff      	lsls	r7, r7, #3
100428cc:	019b      	lsls	r3, r3, #6
100428ce:	1e58      	subs	r0, r3, #1
100428d0:	4183      	sbcs	r3, r0
100428d2:	0f69      	lsrs	r1, r5, #29
100428d4:	433b      	orrs	r3, r7
100428d6:	430b      	orrs	r3, r1
100428d8:	0759      	lsls	r1, r3, #29
100428da:	d127      	bne.n	1004292c <__aeabi_d2f+0xb8>
100428dc:	08db      	lsrs	r3, r3, #3
100428de:	b2e0      	uxtb	r0, r4
100428e0:	e7de      	b.n	100428a0 <__aeabi_d2f+0x2c>
100428e2:	0021      	movs	r1, r4
100428e4:	3117      	adds	r1, #23
100428e6:	db31      	blt.n	1004294c <__aeabi_d2f+0xd8>
100428e8:	2180      	movs	r1, #128	@ 0x80
100428ea:	201e      	movs	r0, #30
100428ec:	0409      	lsls	r1, r1, #16
100428ee:	4339      	orrs	r1, r7
100428f0:	1b00      	subs	r0, r0, r4
100428f2:	281f      	cmp	r0, #31
100428f4:	dd2d      	ble.n	10042952 <__aeabi_d2f+0xde>
100428f6:	2602      	movs	r6, #2
100428f8:	4276      	negs	r6, r6
100428fa:	1b34      	subs	r4, r6, r4
100428fc:	000e      	movs	r6, r1
100428fe:	40e6      	lsrs	r6, r4
10042900:	0034      	movs	r4, r6
10042902:	2820      	cmp	r0, #32
10042904:	d004      	beq.n	10042910 <__aeabi_d2f+0x9c>
10042906:	481a      	ldr	r0, [pc, #104]	@ (10042970 <__aeabi_d2f+0xfc>)
10042908:	4684      	mov	ip, r0
1004290a:	4463      	add	r3, ip
1004290c:	4099      	lsls	r1, r3
1004290e:	430d      	orrs	r5, r1
10042910:	002b      	movs	r3, r5
10042912:	1e59      	subs	r1, r3, #1
10042914:	418b      	sbcs	r3, r1
10042916:	4323      	orrs	r3, r4
10042918:	0759      	lsls	r1, r3, #29
1004291a:	d003      	beq.n	10042924 <__aeabi_d2f+0xb0>
1004291c:	210f      	movs	r1, #15
1004291e:	4019      	ands	r1, r3
10042920:	2904      	cmp	r1, #4
10042922:	d10b      	bne.n	1004293c <__aeabi_d2f+0xc8>
10042924:	019b      	lsls	r3, r3, #6
10042926:	2000      	movs	r0, #0
10042928:	0a5b      	lsrs	r3, r3, #9
1004292a:	e7b9      	b.n	100428a0 <__aeabi_d2f+0x2c>
1004292c:	210f      	movs	r1, #15
1004292e:	4019      	ands	r1, r3
10042930:	2904      	cmp	r1, #4
10042932:	d104      	bne.n	1004293e <__aeabi_d2f+0xca>
10042934:	019b      	lsls	r3, r3, #6
10042936:	0a5b      	lsrs	r3, r3, #9
10042938:	b2e0      	uxtb	r0, r4
1004293a:	e7b1      	b.n	100428a0 <__aeabi_d2f+0x2c>
1004293c:	2400      	movs	r4, #0
1004293e:	3304      	adds	r3, #4
10042940:	0159      	lsls	r1, r3, #5
10042942:	d5f7      	bpl.n	10042934 <__aeabi_d2f+0xc0>
10042944:	3401      	adds	r4, #1
10042946:	2300      	movs	r3, #0
10042948:	b2e0      	uxtb	r0, r4
1004294a:	e7a9      	b.n	100428a0 <__aeabi_d2f+0x2c>
1004294c:	2000      	movs	r0, #0
1004294e:	2300      	movs	r3, #0
10042950:	e7a6      	b.n	100428a0 <__aeabi_d2f+0x2c>
10042952:	4c08      	ldr	r4, [pc, #32]	@ (10042974 <__aeabi_d2f+0x100>)
10042954:	191c      	adds	r4, r3, r4
10042956:	002b      	movs	r3, r5
10042958:	40a5      	lsls	r5, r4
1004295a:	40c3      	lsrs	r3, r0
1004295c:	40a1      	lsls	r1, r4
1004295e:	1e68      	subs	r0, r5, #1
10042960:	4185      	sbcs	r5, r0
10042962:	4329      	orrs	r1, r5
10042964:	430b      	orrs	r3, r1
10042966:	e7d7      	b.n	10042918 <__aeabi_d2f+0xa4>
10042968:	000007fe 	.word	0x000007fe
1004296c:	fffffc80 	.word	0xfffffc80
10042970:	fffffca2 	.word	0xfffffca2
10042974:	fffffc82 	.word	0xfffffc82

10042978 <__clzdi2>:
10042978:	b510      	push	{r4, lr}
1004297a:	2900      	cmp	r1, #0
1004297c:	d103      	bne.n	10042986 <__clzdi2+0xe>
1004297e:	f7fd fe33 	bl	100405e8 <__clzsi2>
10042982:	3020      	adds	r0, #32
10042984:	e002      	b.n	1004298c <__clzdi2+0x14>
10042986:	0008      	movs	r0, r1
10042988:	f7fd fe2e 	bl	100405e8 <__clzsi2>
1004298c:	bd10      	pop	{r4, pc}
1004298e:	46c0      	nop			@ (mov r8, r8)

10042990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10042990:	b580      	push	{r7, lr}
10042992:	b082      	sub	sp, #8
10042994:	af00      	add	r7, sp, #0
10042996:	0002      	movs	r2, r0
10042998:	1dfb      	adds	r3, r7, #7
1004299a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004299c:	1dfb      	adds	r3, r7, #7
1004299e:	781b      	ldrb	r3, [r3, #0]
100429a0:	2b7f      	cmp	r3, #127	@ 0x7f
100429a2:	d809      	bhi.n	100429b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100429a4:	1dfb      	adds	r3, r7, #7
100429a6:	781b      	ldrb	r3, [r3, #0]
100429a8:	001a      	movs	r2, r3
100429aa:	231f      	movs	r3, #31
100429ac:	401a      	ands	r2, r3
100429ae:	4b04      	ldr	r3, [pc, #16]	@ (100429c0 <__NVIC_EnableIRQ+0x30>)
100429b0:	2101      	movs	r1, #1
100429b2:	4091      	lsls	r1, r2
100429b4:	000a      	movs	r2, r1
100429b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100429b8:	46c0      	nop			@ (mov r8, r8)
100429ba:	46bd      	mov	sp, r7
100429bc:	b002      	add	sp, #8
100429be:	bd80      	pop	{r7, pc}
100429c0:	e000e100 	.word	0xe000e100

100429c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100429c4:	b590      	push	{r4, r7, lr}
100429c6:	b083      	sub	sp, #12
100429c8:	af00      	add	r7, sp, #0
100429ca:	0002      	movs	r2, r0
100429cc:	6039      	str	r1, [r7, #0]
100429ce:	1dfb      	adds	r3, r7, #7
100429d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100429d2:	1dfb      	adds	r3, r7, #7
100429d4:	781b      	ldrb	r3, [r3, #0]
100429d6:	2b7f      	cmp	r3, #127	@ 0x7f
100429d8:	d828      	bhi.n	10042a2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100429da:	4a2f      	ldr	r2, [pc, #188]	@ (10042a98 <__NVIC_SetPriority+0xd4>)
100429dc:	1dfb      	adds	r3, r7, #7
100429de:	781b      	ldrb	r3, [r3, #0]
100429e0:	b25b      	sxtb	r3, r3
100429e2:	089b      	lsrs	r3, r3, #2
100429e4:	33c0      	adds	r3, #192	@ 0xc0
100429e6:	009b      	lsls	r3, r3, #2
100429e8:	589b      	ldr	r3, [r3, r2]
100429ea:	1dfa      	adds	r2, r7, #7
100429ec:	7812      	ldrb	r2, [r2, #0]
100429ee:	0011      	movs	r1, r2
100429f0:	2203      	movs	r2, #3
100429f2:	400a      	ands	r2, r1
100429f4:	00d2      	lsls	r2, r2, #3
100429f6:	21ff      	movs	r1, #255	@ 0xff
100429f8:	4091      	lsls	r1, r2
100429fa:	000a      	movs	r2, r1
100429fc:	43d2      	mvns	r2, r2
100429fe:	401a      	ands	r2, r3
10042a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10042a02:	683b      	ldr	r3, [r7, #0]
10042a04:	019b      	lsls	r3, r3, #6
10042a06:	22ff      	movs	r2, #255	@ 0xff
10042a08:	401a      	ands	r2, r3
10042a0a:	1dfb      	adds	r3, r7, #7
10042a0c:	781b      	ldrb	r3, [r3, #0]
10042a0e:	0018      	movs	r0, r3
10042a10:	2303      	movs	r3, #3
10042a12:	4003      	ands	r3, r0
10042a14:	00db      	lsls	r3, r3, #3
10042a16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042a18:	481f      	ldr	r0, [pc, #124]	@ (10042a98 <__NVIC_SetPriority+0xd4>)
10042a1a:	1dfb      	adds	r3, r7, #7
10042a1c:	781b      	ldrb	r3, [r3, #0]
10042a1e:	b25b      	sxtb	r3, r3
10042a20:	089b      	lsrs	r3, r3, #2
10042a22:	430a      	orrs	r2, r1
10042a24:	33c0      	adds	r3, #192	@ 0xc0
10042a26:	009b      	lsls	r3, r3, #2
10042a28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10042a2a:	e031      	b.n	10042a90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042a2c:	4a1b      	ldr	r2, [pc, #108]	@ (10042a9c <__NVIC_SetPriority+0xd8>)
10042a2e:	1dfb      	adds	r3, r7, #7
10042a30:	781b      	ldrb	r3, [r3, #0]
10042a32:	0019      	movs	r1, r3
10042a34:	230f      	movs	r3, #15
10042a36:	400b      	ands	r3, r1
10042a38:	3b08      	subs	r3, #8
10042a3a:	089b      	lsrs	r3, r3, #2
10042a3c:	3306      	adds	r3, #6
10042a3e:	009b      	lsls	r3, r3, #2
10042a40:	18d3      	adds	r3, r2, r3
10042a42:	3304      	adds	r3, #4
10042a44:	681b      	ldr	r3, [r3, #0]
10042a46:	1dfa      	adds	r2, r7, #7
10042a48:	7812      	ldrb	r2, [r2, #0]
10042a4a:	0011      	movs	r1, r2
10042a4c:	2203      	movs	r2, #3
10042a4e:	400a      	ands	r2, r1
10042a50:	00d2      	lsls	r2, r2, #3
10042a52:	21ff      	movs	r1, #255	@ 0xff
10042a54:	4091      	lsls	r1, r2
10042a56:	000a      	movs	r2, r1
10042a58:	43d2      	mvns	r2, r2
10042a5a:	401a      	ands	r2, r3
10042a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10042a5e:	683b      	ldr	r3, [r7, #0]
10042a60:	019b      	lsls	r3, r3, #6
10042a62:	22ff      	movs	r2, #255	@ 0xff
10042a64:	401a      	ands	r2, r3
10042a66:	1dfb      	adds	r3, r7, #7
10042a68:	781b      	ldrb	r3, [r3, #0]
10042a6a:	0018      	movs	r0, r3
10042a6c:	2303      	movs	r3, #3
10042a6e:	4003      	ands	r3, r0
10042a70:	00db      	lsls	r3, r3, #3
10042a72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10042a74:	4809      	ldr	r0, [pc, #36]	@ (10042a9c <__NVIC_SetPriority+0xd8>)
10042a76:	1dfb      	adds	r3, r7, #7
10042a78:	781b      	ldrb	r3, [r3, #0]
10042a7a:	001c      	movs	r4, r3
10042a7c:	230f      	movs	r3, #15
10042a7e:	4023      	ands	r3, r4
10042a80:	3b08      	subs	r3, #8
10042a82:	089b      	lsrs	r3, r3, #2
10042a84:	430a      	orrs	r2, r1
10042a86:	3306      	adds	r3, #6
10042a88:	009b      	lsls	r3, r3, #2
10042a8a:	18c3      	adds	r3, r0, r3
10042a8c:	3304      	adds	r3, #4
10042a8e:	601a      	str	r2, [r3, #0]
}
10042a90:	46c0      	nop			@ (mov r8, r8)
10042a92:	46bd      	mov	sp, r7
10042a94:	b003      	add	sp, #12
10042a96:	bd90      	pop	{r4, r7, pc}
10042a98:	e000e100 	.word	0xe000e100
10042a9c:	e000ed00 	.word	0xe000ed00

10042aa0 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
10042aa0:	b580      	push	{r7, lr}
10042aa2:	b086      	sub	sp, #24
10042aa4:	af00      	add	r7, sp, #0
10042aa6:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10042aa8:	f3ef 8310 	mrs	r3, PRIMASK
10042aac:	60bb      	str	r3, [r7, #8]
  return(result);
10042aae:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
10042ab0:	617b      	str	r3, [r7, #20]
10042ab2:	2301      	movs	r3, #1
10042ab4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10042ab6:	68fb      	ldr	r3, [r7, #12]
10042ab8:	f383 8810 	msr	PRIMASK, r3
}
10042abc:	46c0      	nop			@ (mov r8, r8)
10042abe:	687b      	ldr	r3, [r7, #4]
10042ac0:	681b      	ldr	r3, [r3, #0]
10042ac2:	2220      	movs	r2, #32
10042ac4:	431a      	orrs	r2, r3
10042ac6:	687b      	ldr	r3, [r7, #4]
10042ac8:	601a      	str	r2, [r3, #0]
10042aca:	697b      	ldr	r3, [r7, #20]
10042acc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10042ace:	693b      	ldr	r3, [r7, #16]
10042ad0:	f383 8810 	msr	PRIMASK, r3
}
10042ad4:	46c0      	nop			@ (mov r8, r8)
}
10042ad6:	46c0      	nop			@ (mov r8, r8)
10042ad8:	46bd      	mov	sp, r7
10042ada:	b006      	add	sp, #24
10042adc:	bd80      	pop	{r7, pc}

10042ade <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
10042ade:	b580      	push	{r7, lr}
10042ae0:	b086      	sub	sp, #24
10042ae2:	af00      	add	r7, sp, #0
10042ae4:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
10042ae6:	2000      	movs	r0, #0
10042ae8:	f005 f887 	bl	10047bfa <APP_DEBUG_SIGNAL_SET>
  UTIL_ADV_TRACE_SetRegion(~0x0);
#endif

  /* USER CODE BEGIN APPE_Init_1 */
#if (CFG_LED_SUPPORTED == 1)
  Led_Init();
10042aec:	f000 f83c 	bl	10042b68 <Led_Init>
#endif
#if (CFG_BUTTON_SUPPORTED == 1)
  Button_Init();
10042af0:	f000 f84c 	bl	10042b8c <Button_Init>
#endif
  
#if (CFG_DEBUG_APP_TRACE != 0) && (CFG_DEBUG_APP_ADV_TRACE == 0)
  COM_InitTypeDef COM_Init = 
10042af4:	2108      	movs	r1, #8
10042af6:	187b      	adds	r3, r7, r1
10042af8:	22e1      	movs	r2, #225	@ 0xe1
10042afa:	0252      	lsls	r2, r2, #9
10042afc:	601a      	str	r2, [r3, #0]
10042afe:	187b      	adds	r3, r7, r1
10042b00:	2200      	movs	r2, #0
10042b02:	605a      	str	r2, [r3, #4]
10042b04:	187b      	adds	r3, r7, r1
10042b06:	2200      	movs	r2, #0
10042b08:	811a      	strh	r2, [r3, #8]
10042b0a:	187b      	adds	r3, r7, r1
10042b0c:	2200      	movs	r2, #0
10042b0e:	815a      	strh	r2, [r3, #10]
10042b10:	187b      	adds	r3, r7, r1
10042b12:	2200      	movs	r2, #0
10042b14:	819a      	strh	r2, [r3, #12]
   .WordLength= COM_WORDLENGTH_8B,
   .StopBits = COM_STOPBITS_1,
   .Parity = COM_PARITY_NONE,
   .HwFlowCtl = COM_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &COM_Init);
10042b16:	187b      	adds	r3, r7, r1
10042b18:	0019      	movs	r1, r3
10042b1a:	2000      	movs	r0, #0
10042b1c:	f008 fee4 	bl	1004b8e8 <BSP_COM_Init>
  
#endif  
  
  RxUART_Init();
10042b20:	f000 f8e2 	bl	10042ce8 <RxUART_Init>
  
  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
10042b24:	f005 fec0 	bl	100488a8 <HW_RNG_Init>
10042b28:	1e03      	subs	r3, r0, #0
10042b2a:	d001      	beq.n	10042b30 <MX_APPE_Init+0x52>
  {
    Error_Handler();
10042b2c:	f000 fc5d 	bl	100433ea <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
10042b30:	f005 f96c 	bl	10047e0c <HW_AES_Init>
  HW_PKA_Init();
10042b34:	f005 fb2a 	bl	1004818c <HW_PKA_Init>
  APP_BLE_Init();
10042b38:	f001 f9b8 	bl	10043eac <APP_BLE_Init>

#if (CFG_LPM_SUPPORTED == 1)
  /* Low Power Manager Init */
  UTIL_LPM_Init();
10042b3c:	f00f fcb8 	bl	100524b0 <UTIL_LPM_Init>
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
10042b40:	2000      	movs	r0, #0
10042b42:	f005 f864 	bl	10047c0e <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
10042b46:	2300      	movs	r3, #0
}
10042b48:	0018      	movs	r0, r3
10042b4a:	46bd      	mov	sp, r7
10042b4c:	b006      	add	sp, #24
10042b4e:	bd80      	pop	{r7, pc}

10042b50 <App_PowerSaveLevel_Check>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
#if (CFG_LPM_SUPPORTED == 1)
static PowerSaveLevels App_PowerSaveLevel_Check(void)
{
10042b50:	b580      	push	{r7, lr}
10042b52:	b082      	sub	sp, #8
10042b54:	af00      	add	r7, sp, #0
  PowerSaveLevels output_level = POWER_SAVE_LEVEL_STOP;
10042b56:	1dfb      	adds	r3, r7, #7
10042b58:	2203      	movs	r2, #3
10042b5a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN App_PowerSaveLevel_Check_1 */

  /* USER CODE END App_PowerSaveLevel_Check_1 */

  return output_level;
10042b5c:	1dfb      	adds	r3, r7, #7
10042b5e:	781b      	ldrb	r3, [r3, #0]
}
10042b60:	0018      	movs	r0, r3
10042b62:	46bd      	mov	sp, r7
10042b64:	b002      	add	sp, #8
10042b66:	bd80      	pop	{r7, pc}

10042b68 <Led_Init>:
#endif

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
#if (CFG_LED_SUPPORTED == 1)
static void Led_Init( void )
{
10042b68:	b580      	push	{r7, lr}
10042b6a:	af00      	add	r7, sp, #0
  /* Leds Initialization */
  BSP_LED_Init(LED_BLUE);
10042b6c:	2000      	movs	r0, #0
10042b6e:	f008 fd39 	bl	1004b5e4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
10042b72:	2001      	movs	r0, #1
10042b74:	f008 fd36 	bl	1004b5e4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
10042b78:	2002      	movs	r0, #2
10042b7a:	f008 fd33 	bl	1004b5e4 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
10042b7e:	2001      	movs	r0, #1
10042b80:	f008 fda6 	bl	1004b6d0 <BSP_LED_On>

  return;
10042b84:	46c0      	nop			@ (mov r8, r8)
}
10042b86:	46bd      	mov	sp, r7
10042b88:	bd80      	pop	{r7, pc}
	...

10042b8c <Button_Init>:
#endif

#if (CFG_BUTTON_SUPPORTED == 1)
static void Button_Init( void )
{
10042b8c:	b580      	push	{r7, lr}
10042b8e:	b082      	sub	sp, #8
10042b90:	af00      	add	r7, sp, #0
  /* Button Initialization */
  buttonDesc[B1].button = B1;
10042b92:	4b33      	ldr	r3, [pc, #204]	@ (10042c60 <Button_Init+0xd4>)
10042b94:	2200      	movs	r2, #0
10042b96:	701a      	strb	r2, [r3, #0]
  buttonDesc[B2].button = B2;
10042b98:	4b31      	ldr	r3, [pc, #196]	@ (10042c60 <Button_Init+0xd4>)
10042b9a:	2228      	movs	r2, #40	@ 0x28
10042b9c:	2101      	movs	r1, #1
10042b9e:	5499      	strb	r1, [r3, r2]
  buttonDesc[B3].button = B3;
10042ba0:	4b2f      	ldr	r3, [pc, #188]	@ (10042c60 <Button_Init+0xd4>)
10042ba2:	2250      	movs	r2, #80	@ 0x50
10042ba4:	2102      	movs	r1, #2
10042ba6:	5499      	strb	r1, [r3, r2]
  BSP_PB_Init(B1, BUTTON_MODE_EXTI);
10042ba8:	2101      	movs	r1, #1
10042baa:	2000      	movs	r0, #0
10042bac:	f008 fdcc 	bl	1004b748 <BSP_PB_Init>
  BSP_PB_Init(B2, BUTTON_MODE_EXTI);
10042bb0:	2101      	movs	r1, #1
10042bb2:	2001      	movs	r0, #1
10042bb4:	f008 fdc8 	bl	1004b748 <BSP_PB_Init>
  BSP_PB_Init(B3, BUTTON_MODE_EXTI);
10042bb8:	2101      	movs	r1, #1
10042bba:	2002      	movs	r0, #2
10042bbc:	f008 fdc4 	bl	1004b748 <BSP_PB_Init>
  
#if (CFG_LPM_SUPPORTED == 1)
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PA0, PWR_WUP_FALLEDG);
10042bc0:	2380      	movs	r3, #128	@ 0x80
10042bc2:	025b      	lsls	r3, r3, #9
10042bc4:	2101      	movs	r1, #1
10042bc6:	0018      	movs	r0, r3
10042bc8:	f00a f9aa 	bl	1004cf20 <HAL_PWR_EnableWakeUpPin>
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PB5, PWR_WUP_FALLEDG);
10042bcc:	2101      	movs	r1, #1
10042bce:	2020      	movs	r0, #32
10042bd0:	f00a f9a6 	bl	1004cf20 <HAL_PWR_EnableWakeUpPin>
#if defined(STM32WB06) || defined(STM32WB07)
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PB9, PWR_WUP_FALLEDG);
#else
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PB14, PWR_WUP_FALLEDG);
10042bd4:	2380      	movs	r3, #128	@ 0x80
10042bd6:	03db      	lsls	r3, r3, #15
10042bd8:	2101      	movs	r1, #1
10042bda:	0018      	movs	r0, r3
10042bdc:	f00a f9a0 	bl	1004cf20 <HAL_PWR_EnableWakeUpPin>
#endif  
#endif  
  
  /* Register tasks associated to buttons */
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_1, UTIL_SEQ_RFU, APPE_Button1Action);
10042be0:	4b20      	ldr	r3, [pc, #128]	@ (10042c64 <Button_Init+0xd8>)
10042be2:	001a      	movs	r2, r3
10042be4:	2100      	movs	r1, #0
10042be6:	2008      	movs	r0, #8
10042be8:	f00f fe08 	bl	100527fc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_2, UTIL_SEQ_RFU, APPE_Button2Action);
10042bec:	4b1e      	ldr	r3, [pc, #120]	@ (10042c68 <Button_Init+0xdc>)
10042bee:	001a      	movs	r2, r3
10042bf0:	2100      	movs	r1, #0
10042bf2:	2010      	movs	r0, #16
10042bf4:	f00f fe02 	bl	100527fc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_3, UTIL_SEQ_RFU, APPE_Button3Action);
10042bf8:	4b1c      	ldr	r3, [pc, #112]	@ (10042c6c <Button_Init+0xe0>)
10042bfa:	001a      	movs	r2, r3
10042bfc:	2100      	movs	r1, #0
10042bfe:	2020      	movs	r0, #32
10042c00:	f00f fdfc 	bl	100527fc <UTIL_SEQ_RegTask>

  /* Create timers to detect button long press (one for each button) */
  Button_TypeDef buttonIndex;
  for ( buttonIndex = B1; buttonIndex < BUTTON_NB_MAX; buttonIndex++ )
10042c04:	1dfb      	adds	r3, r7, #7
10042c06:	2200      	movs	r2, #0
10042c08:	701a      	strb	r2, [r3, #0]
10042c0a:	e021      	b.n	10042c50 <Button_Init+0xc4>
  {
    buttonDesc[buttonIndex].longTimerId.callback = Button_TriggerActions;
10042c0c:	1dfb      	adds	r3, r7, #7
10042c0e:	781a      	ldrb	r2, [r3, #0]
10042c10:	4913      	ldr	r1, [pc, #76]	@ (10042c60 <Button_Init+0xd4>)
10042c12:	0013      	movs	r3, r2
10042c14:	009b      	lsls	r3, r3, #2
10042c16:	189b      	adds	r3, r3, r2
10042c18:	00db      	lsls	r3, r3, #3
10042c1a:	18cb      	adds	r3, r1, r3
10042c1c:	3310      	adds	r3, #16
10042c1e:	4a14      	ldr	r2, [pc, #80]	@ (10042c70 <Button_Init+0xe4>)
10042c20:	601a      	str	r2, [r3, #0]
    buttonDesc[buttonIndex].longTimerId.userData = &buttonDesc[buttonIndex];
10042c22:	1dfb      	adds	r3, r7, #7
10042c24:	7819      	ldrb	r1, [r3, #0]
10042c26:	1dfb      	adds	r3, r7, #7
10042c28:	781a      	ldrb	r2, [r3, #0]
10042c2a:	000b      	movs	r3, r1
10042c2c:	009b      	lsls	r3, r3, #2
10042c2e:	185b      	adds	r3, r3, r1
10042c30:	00db      	lsls	r3, r3, #3
10042c32:	490b      	ldr	r1, [pc, #44]	@ (10042c60 <Button_Init+0xd4>)
10042c34:	1859      	adds	r1, r3, r1
10042c36:	480a      	ldr	r0, [pc, #40]	@ (10042c60 <Button_Init+0xd4>)
10042c38:	0013      	movs	r3, r2
10042c3a:	009b      	lsls	r3, r3, #2
10042c3c:	189b      	adds	r3, r3, r2
10042c3e:	00db      	lsls	r3, r3, #3
10042c40:	18c3      	adds	r3, r0, r3
10042c42:	331c      	adds	r3, #28
10042c44:	6019      	str	r1, [r3, #0]
  for ( buttonIndex = B1; buttonIndex < BUTTON_NB_MAX; buttonIndex++ )
10042c46:	1dfb      	adds	r3, r7, #7
10042c48:	781a      	ldrb	r2, [r3, #0]
10042c4a:	1dfb      	adds	r3, r7, #7
10042c4c:	3201      	adds	r2, #1
10042c4e:	701a      	strb	r2, [r3, #0]
10042c50:	1dfb      	adds	r3, r7, #7
10042c52:	781b      	ldrb	r3, [r3, #0]
10042c54:	2b02      	cmp	r3, #2
10042c56:	d9d9      	bls.n	10042c0c <Button_Init+0x80>
  }
  
  return;
10042c58:	46c0      	nop			@ (mov r8, r8)
}
10042c5a:	46bd      	mov	sp, r7
10042c5c:	b002      	add	sp, #8
10042c5e:	bd80      	pop	{r7, pc}
10042c60:	20000198 	.word	0x20000198
10042c64:	10044e01 	.word	0x10044e01
10042c68:	10044e45 	.word	0x10044e45
10042c6c:	10044eb5 	.word	0x10044eb5
10042c70:	10042c75 	.word	0x10042c75

10042c74 <Button_TriggerActions>:

static void Button_TriggerActions(void *arg)
{
10042c74:	b580      	push	{r7, lr}
10042c76:	b084      	sub	sp, #16
10042c78:	af00      	add	r7, sp, #0
10042c7a:	6078      	str	r0, [r7, #4]
  ButtonDesc_t *p_buttonDesc = ((VTIMER_HandleType *)arg)->userData;
10042c7c:	687b      	ldr	r3, [r7, #4]
10042c7e:	695b      	ldr	r3, [r3, #20]
10042c80:	60fb      	str	r3, [r7, #12]

  p_buttonDesc->longPressed = BSP_PB_GetState(p_buttonDesc->button);
10042c82:	68fb      	ldr	r3, [r7, #12]
10042c84:	781b      	ldrb	r3, [r3, #0]
10042c86:	0018      	movs	r0, r3
10042c88:	f008 fdfa 	bl	1004b880 <BSP_PB_GetState>
10042c8c:	0003      	movs	r3, r0
10042c8e:	b2d9      	uxtb	r1, r3
10042c90:	68fb      	ldr	r3, [r7, #12]
10042c92:	2220      	movs	r2, #32
10042c94:	5499      	strb	r1, [r3, r2]

  APP_DBG_MSG("Button %d pressed\n", (p_buttonDesc->button + 1));
10042c96:	68fb      	ldr	r3, [r7, #12]
10042c98:	781b      	ldrb	r3, [r3, #0]
10042c9a:	1c5a      	adds	r2, r3, #1
10042c9c:	4b11      	ldr	r3, [pc, #68]	@ (10042ce4 <Button_TriggerActions+0x70>)
10042c9e:	0011      	movs	r1, r2
10042ca0:	0018      	movs	r0, r3
10042ca2:	f024 fbf3 	bl	1006748c <iprintf>
  switch (p_buttonDesc->button)
10042ca6:	68fb      	ldr	r3, [r7, #12]
10042ca8:	781b      	ldrb	r3, [r3, #0]
10042caa:	2b02      	cmp	r3, #2
10042cac:	d00f      	beq.n	10042cce <Button_TriggerActions+0x5a>
10042cae:	dc13      	bgt.n	10042cd8 <Button_TriggerActions+0x64>
10042cb0:	2b00      	cmp	r3, #0
10042cb2:	d002      	beq.n	10042cba <Button_TriggerActions+0x46>
10042cb4:	2b01      	cmp	r3, #1
10042cb6:	d005      	beq.n	10042cc4 <Button_TriggerActions+0x50>
      break;
    case B3:
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_3, CFG_SEQ_PRIO_0);
      break;
    default:
      break;
10042cb8:	e00e      	b.n	10042cd8 <Button_TriggerActions+0x64>
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_1, CFG_SEQ_PRIO_0);
10042cba:	2100      	movs	r1, #0
10042cbc:	2008      	movs	r0, #8
10042cbe:	f00f fdc1 	bl	10052844 <UTIL_SEQ_SetTask>
      break;
10042cc2:	e00a      	b.n	10042cda <Button_TriggerActions+0x66>
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_2, CFG_SEQ_PRIO_0);
10042cc4:	2100      	movs	r1, #0
10042cc6:	2010      	movs	r0, #16
10042cc8:	f00f fdbc 	bl	10052844 <UTIL_SEQ_SetTask>
      break;
10042ccc:	e005      	b.n	10042cda <Button_TriggerActions+0x66>
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_3, CFG_SEQ_PRIO_0);
10042cce:	2100      	movs	r1, #0
10042cd0:	2020      	movs	r0, #32
10042cd2:	f00f fdb7 	bl	10052844 <UTIL_SEQ_SetTask>
      break;
10042cd6:	e000      	b.n	10042cda <Button_TriggerActions+0x66>
      break;
10042cd8:	46c0      	nop			@ (mov r8, r8)
  }

  return;
10042cda:	46c0      	nop			@ (mov r8, r8)
}
10042cdc:	46bd      	mov	sp, r7
10042cde:	b004      	add	sp, #16
10042ce0:	bd80      	pop	{r7, pc}
10042ce2:	46c0      	nop			@ (mov r8, r8)
10042ce4:	1006b538 	.word	0x1006b538

10042ce8 <RxUART_Init>:

#endif

static void RxUART_Init(void)
{
10042ce8:	b580      	push	{r7, lr}
10042cea:	af00      	add	r7, sp, #0
  /* Enable the RX not empty interrupt */
  LL_USART_EnableIT_RXNE(USART1);
10042cec:	4b0a      	ldr	r3, [pc, #40]	@ (10042d18 <RxUART_Init+0x30>)
10042cee:	0018      	movs	r0, r3
10042cf0:	f7ff fed6 	bl	10042aa0 <LL_USART_EnableIT_RXNE_RXFNE>
  
  /* Enable the UART IRQ */
  NVIC_SetPriority(USART1_IRQn, IRQ_HIGH_PRIORITY);
10042cf4:	2101      	movs	r1, #1
10042cf6:	2008      	movs	r0, #8
10042cf8:	f7ff fe64 	bl	100429c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
10042cfc:	2008      	movs	r0, #8
10042cfe:	f7ff fe47 	bl	10042990 <__NVIC_EnableIRQ>
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)
  setvbuf(stdout, NULL, _IONBF, 0);
10042d02:	4b06      	ldr	r3, [pc, #24]	@ (10042d1c <RxUART_Init+0x34>)
10042d04:	681b      	ldr	r3, [r3, #0]
10042d06:	6898      	ldr	r0, [r3, #8]
10042d08:	2300      	movs	r3, #0
10042d0a:	2202      	movs	r2, #2
10042d0c:	2100      	movs	r1, #0
10042d0e:	f024 fc37 	bl	10067580 <setvbuf>
#endif
}
10042d12:	46c0      	nop			@ (mov r8, r8)
10042d14:	46bd      	mov	sp, r7
10042d16:	bd80      	pop	{r7, pc}
10042d18:	41004000 	.word	0x41004000
10042d1c:	20001530 	.word	0x20001530

10042d20 <UartRxCpltCallback>:

void UartRxCpltCallback(uint8_t * pRxDataBuff, uint16_t nDataSize)
{
10042d20:	b580      	push	{r7, lr}
10042d22:	b082      	sub	sp, #8
10042d24:	af00      	add	r7, sp, #0
10042d26:	6078      	str	r0, [r7, #4]
10042d28:	000a      	movs	r2, r1
10042d2a:	1cbb      	adds	r3, r7, #2
10042d2c:	801a      	strh	r2, [r3, #0]
  // Loop in case nDataSize > 1 (always 1 in current implementation).
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
10042d2e:	4b15      	ldr	r3, [pc, #84]	@ (10042d84 <UartRxCpltCallback+0x64>)
10042d30:	881b      	ldrh	r3, [r3, #0]
10042d32:	2bff      	cmp	r3, #255	@ 0xff
10042d34:	d821      	bhi.n	10042d7a <UartRxCpltCallback+0x5a>
  {
    if (*pRxDataBuff == '\r')
10042d36:	687b      	ldr	r3, [r7, #4]
10042d38:	781b      	ldrb	r3, [r3, #0]
10042d3a:	2b0d      	cmp	r3, #13
10042d3c:	d112      	bne.n	10042d64 <UartRxCpltCallback+0x44>
    {
      APP_DBG_MSG("received %s\n", CommandString);
10042d3e:	4a12      	ldr	r2, [pc, #72]	@ (10042d88 <UartRxCpltCallback+0x68>)
10042d40:	4b12      	ldr	r3, [pc, #72]	@ (10042d8c <UartRxCpltCallback+0x6c>)
10042d42:	0011      	movs	r1, r2
10042d44:	0018      	movs	r0, r3
10042d46:	f024 fba1 	bl	1006748c <iprintf>

      UartCmdExecute();
10042d4a:	f000 f821 	bl	10042d90 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
10042d4e:	4b0d      	ldr	r3, [pc, #52]	@ (10042d84 <UartRxCpltCallback+0x64>)
10042d50:	2200      	movs	r2, #0
10042d52:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
10042d54:	2380      	movs	r3, #128	@ 0x80
10042d56:	005a      	lsls	r2, r3, #1
10042d58:	4b0b      	ldr	r3, [pc, #44]	@ (10042d88 <UartRxCpltCallback+0x68>)
10042d5a:	2100      	movs	r1, #0
10042d5c:	0018      	movs	r0, r3
10042d5e:	f024 fde1 	bl	10067924 <memset>
    else
    {
      CommandString[indexReceiveChar++] = *pRxDataBuff;
    }
  }
}
10042d62:	e00a      	b.n	10042d7a <UartRxCpltCallback+0x5a>
      CommandString[indexReceiveChar++] = *pRxDataBuff;
10042d64:	4b07      	ldr	r3, [pc, #28]	@ (10042d84 <UartRxCpltCallback+0x64>)
10042d66:	881b      	ldrh	r3, [r3, #0]
10042d68:	1c5a      	adds	r2, r3, #1
10042d6a:	b291      	uxth	r1, r2
10042d6c:	4a05      	ldr	r2, [pc, #20]	@ (10042d84 <UartRxCpltCallback+0x64>)
10042d6e:	8011      	strh	r1, [r2, #0]
10042d70:	001a      	movs	r2, r3
10042d72:	687b      	ldr	r3, [r7, #4]
10042d74:	7819      	ldrb	r1, [r3, #0]
10042d76:	4b04      	ldr	r3, [pc, #16]	@ (10042d88 <UartRxCpltCallback+0x68>)
10042d78:	5499      	strb	r1, [r3, r2]
}
10042d7a:	46c0      	nop			@ (mov r8, r8)
10042d7c:	46bd      	mov	sp, r7
10042d7e:	b002      	add	sp, #8
10042d80:	bd80      	pop	{r7, pc}
10042d82:	46c0      	nop			@ (mov r8, r8)
10042d84:	20000310 	.word	0x20000310
10042d88:	20000210 	.word	0x20000210
10042d8c:	1006b54c 	.word	0x1006b54c

10042d90 <UartCmdExecute>:

static void UartCmdExecute(void)
{
10042d90:	b580      	push	{r7, lr}
10042d92:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
10042d94:	4a43      	ldr	r2, [pc, #268]	@ (10042ea4 <UartCmdExecute+0x114>)
10042d96:	4b44      	ldr	r3, [pc, #272]	@ (10042ea8 <UartCmdExecute+0x118>)
10042d98:	0011      	movs	r1, r2
10042d9a:	0018      	movs	r0, r3
10042d9c:	f7fd fa3e 	bl	1004021c <strcmp>
10042da0:	1e03      	subs	r3, r0, #0
10042da2:	d10c      	bne.n	10042dbe <UartCmdExecute+0x2e>
  {
    APP_DBG_MSG("SW1 OK\n");
10042da4:	4b41      	ldr	r3, [pc, #260]	@ (10042eac <UartCmdExecute+0x11c>)
10042da6:	0018      	movs	r0, r3
10042da8:	f024 fbe0 	bl	1006756c <puts>
#if (CFG_BUTTON_SUPPORTED == 1)
    buttonDesc[B1].longPressed = 0;
10042dac:	4b40      	ldr	r3, [pc, #256]	@ (10042eb0 <UartCmdExecute+0x120>)
10042dae:	2220      	movs	r2, #32
10042db0:	2100      	movs	r1, #0
10042db2:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_1, CFG_SEQ_PRIO_0);
10042db4:	2100      	movs	r1, #0
10042db6:	2008      	movs	r0, #8
10042db8:	f00f fd44 	bl	10052844 <UTIL_SEQ_SetTask>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
10042dbc:	e06e      	b.n	10042e9c <UartCmdExecute+0x10c>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
10042dbe:	4a3d      	ldr	r2, [pc, #244]	@ (10042eb4 <UartCmdExecute+0x124>)
10042dc0:	4b39      	ldr	r3, [pc, #228]	@ (10042ea8 <UartCmdExecute+0x118>)
10042dc2:	0011      	movs	r1, r2
10042dc4:	0018      	movs	r0, r3
10042dc6:	f7fd fa29 	bl	1004021c <strcmp>
10042dca:	1e03      	subs	r3, r0, #0
10042dcc:	d10c      	bne.n	10042de8 <UartCmdExecute+0x58>
    APP_DBG_MSG("SW2 OK\n");
10042dce:	4b3a      	ldr	r3, [pc, #232]	@ (10042eb8 <UartCmdExecute+0x128>)
10042dd0:	0018      	movs	r0, r3
10042dd2:	f024 fbcb 	bl	1006756c <puts>
    buttonDesc[B2].longPressed = 0;
10042dd6:	4b36      	ldr	r3, [pc, #216]	@ (10042eb0 <UartCmdExecute+0x120>)
10042dd8:	2248      	movs	r2, #72	@ 0x48
10042dda:	2100      	movs	r1, #0
10042ddc:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_2, CFG_SEQ_PRIO_0);
10042dde:	2100      	movs	r1, #0
10042de0:	2010      	movs	r0, #16
10042de2:	f00f fd2f 	bl	10052844 <UTIL_SEQ_SetTask>
}
10042de6:	e059      	b.n	10042e9c <UartCmdExecute+0x10c>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
10042de8:	4a34      	ldr	r2, [pc, #208]	@ (10042ebc <UartCmdExecute+0x12c>)
10042dea:	4b2f      	ldr	r3, [pc, #188]	@ (10042ea8 <UartCmdExecute+0x118>)
10042dec:	0011      	movs	r1, r2
10042dee:	0018      	movs	r0, r3
10042df0:	f7fd fa14 	bl	1004021c <strcmp>
10042df4:	1e03      	subs	r3, r0, #0
10042df6:	d10c      	bne.n	10042e12 <UartCmdExecute+0x82>
    APP_DBG_MSG("SW3 OK\n");
10042df8:	4b31      	ldr	r3, [pc, #196]	@ (10042ec0 <UartCmdExecute+0x130>)
10042dfa:	0018      	movs	r0, r3
10042dfc:	f024 fbb6 	bl	1006756c <puts>
    buttonDesc[B3].longPressed = 0;
10042e00:	4b2b      	ldr	r3, [pc, #172]	@ (10042eb0 <UartCmdExecute+0x120>)
10042e02:	2270      	movs	r2, #112	@ 0x70
10042e04:	2100      	movs	r1, #0
10042e06:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_3, CFG_SEQ_PRIO_0);
10042e08:	2100      	movs	r1, #0
10042e0a:	2020      	movs	r0, #32
10042e0c:	f00f fd1a 	bl	10052844 <UTIL_SEQ_SetTask>
}
10042e10:	e044      	b.n	10042e9c <UartCmdExecute+0x10c>
  else if(strcmp((char const*)CommandString, "SW1_LONG") == 0)
10042e12:	4a2c      	ldr	r2, [pc, #176]	@ (10042ec4 <UartCmdExecute+0x134>)
10042e14:	4b24      	ldr	r3, [pc, #144]	@ (10042ea8 <UartCmdExecute+0x118>)
10042e16:	0011      	movs	r1, r2
10042e18:	0018      	movs	r0, r3
10042e1a:	f7fd f9ff 	bl	1004021c <strcmp>
10042e1e:	1e03      	subs	r3, r0, #0
10042e20:	d10c      	bne.n	10042e3c <UartCmdExecute+0xac>
    APP_DBG_MSG("SW1_LONG OK\n");
10042e22:	4b29      	ldr	r3, [pc, #164]	@ (10042ec8 <UartCmdExecute+0x138>)
10042e24:	0018      	movs	r0, r3
10042e26:	f024 fba1 	bl	1006756c <puts>
    buttonDesc[B1].longPressed = 1;
10042e2a:	4b21      	ldr	r3, [pc, #132]	@ (10042eb0 <UartCmdExecute+0x120>)
10042e2c:	2220      	movs	r2, #32
10042e2e:	2101      	movs	r1, #1
10042e30:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_1, CFG_SEQ_PRIO_0);
10042e32:	2100      	movs	r1, #0
10042e34:	2008      	movs	r0, #8
10042e36:	f00f fd05 	bl	10052844 <UTIL_SEQ_SetTask>
}
10042e3a:	e02f      	b.n	10042e9c <UartCmdExecute+0x10c>
  else if (strcmp((char const*)CommandString, "SW2_LONG") == 0)
10042e3c:	4a23      	ldr	r2, [pc, #140]	@ (10042ecc <UartCmdExecute+0x13c>)
10042e3e:	4b1a      	ldr	r3, [pc, #104]	@ (10042ea8 <UartCmdExecute+0x118>)
10042e40:	0011      	movs	r1, r2
10042e42:	0018      	movs	r0, r3
10042e44:	f7fd f9ea 	bl	1004021c <strcmp>
10042e48:	1e03      	subs	r3, r0, #0
10042e4a:	d10c      	bne.n	10042e66 <UartCmdExecute+0xd6>
    APP_DBG_MSG("SW2_LONG OK\n");
10042e4c:	4b20      	ldr	r3, [pc, #128]	@ (10042ed0 <UartCmdExecute+0x140>)
10042e4e:	0018      	movs	r0, r3
10042e50:	f024 fb8c 	bl	1006756c <puts>
    buttonDesc[B2].longPressed = 1;
10042e54:	4b16      	ldr	r3, [pc, #88]	@ (10042eb0 <UartCmdExecute+0x120>)
10042e56:	2248      	movs	r2, #72	@ 0x48
10042e58:	2101      	movs	r1, #1
10042e5a:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_2, CFG_SEQ_PRIO_0);
10042e5c:	2100      	movs	r1, #0
10042e5e:	2010      	movs	r0, #16
10042e60:	f00f fcf0 	bl	10052844 <UTIL_SEQ_SetTask>
}
10042e64:	e01a      	b.n	10042e9c <UartCmdExecute+0x10c>
  else if (strcmp((char const*)CommandString, "SW3_LONG") == 0)
10042e66:	4a1b      	ldr	r2, [pc, #108]	@ (10042ed4 <UartCmdExecute+0x144>)
10042e68:	4b0f      	ldr	r3, [pc, #60]	@ (10042ea8 <UartCmdExecute+0x118>)
10042e6a:	0011      	movs	r1, r2
10042e6c:	0018      	movs	r0, r3
10042e6e:	f7fd f9d5 	bl	1004021c <strcmp>
10042e72:	1e03      	subs	r3, r0, #0
10042e74:	d10c      	bne.n	10042e90 <UartCmdExecute+0x100>
    APP_DBG_MSG("SW3_LONG OK\n");
10042e76:	4b18      	ldr	r3, [pc, #96]	@ (10042ed8 <UartCmdExecute+0x148>)
10042e78:	0018      	movs	r0, r3
10042e7a:	f024 fb77 	bl	1006756c <puts>
    buttonDesc[B3].longPressed = 1;
10042e7e:	4b0c      	ldr	r3, [pc, #48]	@ (10042eb0 <UartCmdExecute+0x120>)
10042e80:	2270      	movs	r2, #112	@ 0x70
10042e82:	2101      	movs	r1, #1
10042e84:	5499      	strb	r1, [r3, r2]
    UTIL_SEQ_SetTask(1U << TASK_BUTTON_3, CFG_SEQ_PRIO_0);
10042e86:	2100      	movs	r1, #0
10042e88:	2020      	movs	r0, #32
10042e8a:	f00f fcdb 	bl	10052844 <UTIL_SEQ_SetTask>
}
10042e8e:	e005      	b.n	10042e9c <UartCmdExecute+0x10c>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
10042e90:	4a05      	ldr	r2, [pc, #20]	@ (10042ea8 <UartCmdExecute+0x118>)
10042e92:	4b12      	ldr	r3, [pc, #72]	@ (10042edc <UartCmdExecute+0x14c>)
10042e94:	0011      	movs	r1, r2
10042e96:	0018      	movs	r0, r3
10042e98:	f024 faf8 	bl	1006748c <iprintf>
}
10042e9c:	46c0      	nop			@ (mov r8, r8)
10042e9e:	46bd      	mov	sp, r7
10042ea0:	bd80      	pop	{r7, pc}
10042ea2:	46c0      	nop			@ (mov r8, r8)
10042ea4:	1006b55c 	.word	0x1006b55c
10042ea8:	20000210 	.word	0x20000210
10042eac:	1006b560 	.word	0x1006b560
10042eb0:	20000198 	.word	0x20000198
10042eb4:	1006b568 	.word	0x1006b568
10042eb8:	1006b56c 	.word	0x1006b56c
10042ebc:	1006b574 	.word	0x1006b574
10042ec0:	1006b578 	.word	0x1006b578
10042ec4:	1006b580 	.word	0x1006b580
10042ec8:	1006b58c 	.word	0x1006b58c
10042ecc:	1006b598 	.word	0x1006b598
10042ed0:	1006b5a4 	.word	0x1006b5a4
10042ed4:	1006b5b0 	.word	0x1006b5b0
10042ed8:	1006b5bc 	.word	0x1006b5bc
10042edc:	1006b5c8 	.word	0x1006b5c8

10042ee0 <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10042ee0:	b580      	push	{r7, lr}
10042ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
10042ee4:	2301      	movs	r3, #1
10042ee6:	425b      	negs	r3, r3
10042ee8:	0018      	movs	r0, r3
10042eea:	f00f fb87 	bl	100525fc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
10042eee:	46c0      	nop			@ (mov r8, r8)
10042ef0:	46bd      	mov	sp, r7
10042ef2:	bd80      	pop	{r7, pc}

10042ef4 <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
10042ef4:	b580      	push	{r7, lr}
10042ef6:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10042ef8:	46c0      	nop			@ (mov r8, r8)
}
10042efa:	46bd      	mov	sp, r7
10042efc:	bd80      	pop	{r7, pc}

10042efe <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10042efe:	b5f0      	push	{r4, r5, r6, r7, lr}
10042f00:	b093      	sub	sp, #76	@ 0x4c
10042f02:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)

  /* Need to consume some CSTACK on WB05, due to bootloader CSTACK usage. */
  volatile uint32_t dummy[15];
  uint8_t i;
  for (i=0; i<10; i++)
10042f04:	2347      	movs	r3, #71	@ 0x47
10042f06:	18fb      	adds	r3, r7, r3
10042f08:	2200      	movs	r2, #0
10042f0a:	701a      	strb	r2, [r3, #0]
10042f0c:	e00c      	b.n	10042f28 <UTIL_SEQ_Idle+0x2a>
  {
    dummy[i] = 0;
10042f0e:	2047      	movs	r0, #71	@ 0x47
10042f10:	183b      	adds	r3, r7, r0
10042f12:	781a      	ldrb	r2, [r3, #0]
10042f14:	1d3b      	adds	r3, r7, #4
10042f16:	0092      	lsls	r2, r2, #2
10042f18:	2100      	movs	r1, #0
10042f1a:	50d1      	str	r1, [r2, r3]
    __NOP();
10042f1c:	46c0      	nop			@ (mov r8, r8)
  for (i=0; i<10; i++)
10042f1e:	183b      	adds	r3, r7, r0
10042f20:	781a      	ldrb	r2, [r3, #0]
10042f22:	183b      	adds	r3, r7, r0
10042f24:	3201      	adds	r2, #1
10042f26:	701a      	strb	r2, [r3, #0]
10042f28:	2347      	movs	r3, #71	@ 0x47
10042f2a:	18fb      	adds	r3, r7, r3
10042f2c:	781b      	ldrb	r3, [r3, #0]
10042f2e:	2b09      	cmp	r3, #9
10042f30:	d9ed      	bls.n	10042f0e <UTIL_SEQ_Idle+0x10>
  }

  PowerSaveLevels app_powerSave_level, vtimer_powerSave_level, final_level, pka_level;

  if ((BLE_STACK_SleepCheck() != POWER_SAVE_LEVEL_RUNNING) &&
10042f32:	f010 fa83 	bl	1005343c <BLE_STACK_SleepCheck>
10042f36:	1e03      	subs	r3, r0, #0
10042f38:	d05a      	beq.n	10042ff0 <UTIL_SEQ_Idle+0xf2>
      ((app_powerSave_level = App_PowerSaveLevel_Check()) != POWER_SAVE_LEVEL_RUNNING))
10042f3a:	2546      	movs	r5, #70	@ 0x46
10042f3c:	197c      	adds	r4, r7, r5
10042f3e:	f7ff fe07 	bl	10042b50 <App_PowerSaveLevel_Check>
10042f42:	0003      	movs	r3, r0
10042f44:	7023      	strb	r3, [r4, #0]
  if ((BLE_STACK_SleepCheck() != POWER_SAVE_LEVEL_RUNNING) &&
10042f46:	197b      	adds	r3, r7, r5
10042f48:	781b      	ldrb	r3, [r3, #0]
10042f4a:	2b00      	cmp	r3, #0
10042f4c:	d050      	beq.n	10042ff0 <UTIL_SEQ_Idle+0xf2>
  {
    vtimer_powerSave_level = HAL_RADIO_TIMER_PowerSaveLevelCheck();
10042f4e:	2645      	movs	r6, #69	@ 0x45
10042f50:	19bc      	adds	r4, r7, r6
10042f52:	f00b fadd 	bl	1004e510 <HAL_RADIO_TIMER_PowerSaveLevelCheck>
10042f56:	0003      	movs	r3, r0
10042f58:	7023      	strb	r3, [r4, #0]
    pka_level = (PowerSaveLevels) HW_PKA_PowerSaveLevelCheck();
10042f5a:	2344      	movs	r3, #68	@ 0x44
10042f5c:	18fc      	adds	r4, r7, r3
10042f5e:	f005 f92b 	bl	100481b8 <HW_PKA_PowerSaveLevelCheck>
10042f62:	0003      	movs	r3, r0
10042f64:	7023      	strb	r3, [r4, #0]
    final_level = (PowerSaveLevels)MIN(vtimer_powerSave_level, app_powerSave_level);
10042f66:	2343      	movs	r3, #67	@ 0x43
10042f68:	18fa      	adds	r2, r7, r3
10042f6a:	197b      	adds	r3, r7, r5
10042f6c:	19b9      	adds	r1, r7, r6
10042f6e:	780c      	ldrb	r4, [r1, #0]
10042f70:	781b      	ldrb	r3, [r3, #0]
10042f72:	b2d8      	uxtb	r0, r3
10042f74:	b2e1      	uxtb	r1, r4
10042f76:	4288      	cmp	r0, r1
10042f78:	d900      	bls.n	10042f7c <UTIL_SEQ_Idle+0x7e>
10042f7a:	1c23      	adds	r3, r4, #0
10042f7c:	7013      	strb	r3, [r2, #0]
    final_level = (PowerSaveLevels)MIN(pka_level, final_level);
10042f7e:	2343      	movs	r3, #67	@ 0x43
10042f80:	18fa      	adds	r2, r7, r3
10042f82:	18fb      	adds	r3, r7, r3
10042f84:	2144      	movs	r1, #68	@ 0x44
10042f86:	1879      	adds	r1, r7, r1
10042f88:	780c      	ldrb	r4, [r1, #0]
10042f8a:	781b      	ldrb	r3, [r3, #0]
10042f8c:	b2d8      	uxtb	r0, r3
10042f8e:	b2e1      	uxtb	r1, r4
10042f90:	4288      	cmp	r0, r1
10042f92:	d900      	bls.n	10042f96 <UTIL_SEQ_Idle+0x98>
10042f94:	1c23      	adds	r3, r4, #0
10042f96:	7013      	strb	r3, [r2, #0]

    switch(final_level)
10042f98:	2343      	movs	r3, #67	@ 0x43
10042f9a:	18fb      	adds	r3, r7, r3
10042f9c:	781b      	ldrb	r3, [r3, #0]
10042f9e:	2b03      	cmp	r3, #3
10042fa0:	d019      	beq.n	10042fd6 <UTIL_SEQ_Idle+0xd8>
10042fa2:	dc21      	bgt.n	10042fe8 <UTIL_SEQ_Idle+0xea>
10042fa4:	2b02      	cmp	r3, #2
10042fa6:	d00d      	beq.n	10042fc4 <UTIL_SEQ_Idle+0xc6>
10042fa8:	dc1e      	bgt.n	10042fe8 <UTIL_SEQ_Idle+0xea>
10042faa:	2b00      	cmp	r3, #0
10042fac:	d01f      	beq.n	10042fee <UTIL_SEQ_Idle+0xf0>
10042fae:	2b01      	cmp	r3, #1
10042fb0:	d11a      	bne.n	10042fe8 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_RUNNING:
      /* Not Power Save device is busy */
      return;
      break;
    case POWER_SAVE_LEVEL_CPU_HALT:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10042fb2:	2101      	movs	r1, #1
10042fb4:	2001      	movs	r0, #1
10042fb6:	f00f fa8b 	bl	100524d0 <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10042fba:	2101      	movs	r1, #1
10042fbc:	2001      	movs	r0, #1
10042fbe:	f00f fab7 	bl	10052530 <UTIL_LPM_SetOffMode>
      break;
10042fc2:	e011      	b.n	10042fe8 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10042fc4:	2100      	movs	r1, #0
10042fc6:	2001      	movs	r0, #1
10042fc8:	f00f fa82 	bl	100524d0 <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10042fcc:	2101      	movs	r1, #1
10042fce:	2001      	movs	r0, #1
10042fd0:	f00f faae 	bl	10052530 <UTIL_LPM_SetOffMode>
      break;
10042fd4:	e008      	b.n	10042fe8 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_STOP:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10042fd6:	2100      	movs	r1, #0
10042fd8:	2001      	movs	r0, #1
10042fda:	f00f fa79 	bl	100524d0 <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10042fde:	2100      	movs	r1, #0
10042fe0:	2001      	movs	r0, #1
10042fe2:	f00f faa5 	bl	10052530 <UTIL_LPM_SetOffMode>
      break;
10042fe6:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN UTIL_SEQ_IDLE_BEGIN */

  /* USER CODE END UTIL_SEQ_IDLE_BEGIN */

    UTIL_LPM_EnterLowPower();
10042fe8:	f00f fad2 	bl	10052590 <UTIL_LPM_EnterLowPower>
10042fec:	e000      	b.n	10042ff0 <UTIL_SEQ_Idle+0xf2>
      return;
10042fee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
10042ff0:	46bd      	mov	sp, r7
10042ff2:	b013      	add	sp, #76	@ 0x4c
10042ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10042ff8 <BSP_PB_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
#if (CFG_BUTTON_SUPPORTED == 1)
void BSP_PB_Callback(Button_TypeDef Button)
{
10042ff8:	b580      	push	{r7, lr}
10042ffa:	b082      	sub	sp, #8
10042ffc:	af00      	add	r7, sp, #0
10042ffe:	0002      	movs	r2, r0
10043000:	1dfb      	adds	r3, r7, #7
10043002:	701a      	strb	r2, [r3, #0]
  buttonDesc[Button].longPressed = 0;
10043004:	1dfb      	adds	r3, r7, #7
10043006:	781a      	ldrb	r2, [r3, #0]
10043008:	490e      	ldr	r1, [pc, #56]	@ (10043044 <BSP_PB_Callback+0x4c>)
1004300a:	2020      	movs	r0, #32
1004300c:	0013      	movs	r3, r2
1004300e:	009b      	lsls	r3, r3, #2
10043010:	189b      	adds	r3, r3, r2
10043012:	00db      	lsls	r3, r3, #3
10043014:	18cb      	adds	r3, r1, r3
10043016:	181b      	adds	r3, r3, r0
10043018:	2200      	movs	r2, #0
1004301a:	701a      	strb	r2, [r3, #0]
  HAL_RADIO_TIMER_StartVirtualTimer(&buttonDesc[Button].longTimerId, BUTTON_LONG_PRESS_THRESHOLD_MS);
1004301c:	1dfb      	adds	r3, r7, #7
1004301e:	781a      	ldrb	r2, [r3, #0]
10043020:	0013      	movs	r3, r2
10043022:	009b      	lsls	r3, r3, #2
10043024:	189b      	adds	r3, r3, r2
10043026:	00db      	lsls	r3, r3, #3
10043028:	3308      	adds	r3, #8
1004302a:	001a      	movs	r2, r3
1004302c:	4b05      	ldr	r3, [pc, #20]	@ (10043044 <BSP_PB_Callback+0x4c>)
1004302e:	18d3      	adds	r3, r2, r3
10043030:	22fa      	movs	r2, #250	@ 0xfa
10043032:	0052      	lsls	r2, r2, #1
10043034:	0011      	movs	r1, r2
10043036:	0018      	movs	r0, r3
10043038:	f00b fc5c 	bl	1004e8f4 <HAL_RADIO_TIMER_StartVirtualTimer>

  return;
1004303c:	46c0      	nop			@ (mov r8, r8)
}
1004303e:	46bd      	mov	sp, r7
10043040:	b002      	add	sp, #8
10043042:	bd80      	pop	{r7, pc}
10043044:	20000198 	.word	0x20000198

10043048 <HAL_PWR_WKUPx_Callback>:

#if (CFG_LPM_SUPPORTED == 1)
void HAL_PWR_WKUPx_Callback(uint32_t wakeupIOs)
{
10043048:	b580      	push	{r7, lr}
1004304a:	b082      	sub	sp, #8
1004304c:	af00      	add	r7, sp, #0
1004304e:	6078      	str	r0, [r7, #4]
  if (wakeupIOs & PWR_WAKEUP_PA0)
10043050:	687a      	ldr	r2, [r7, #4]
10043052:	2380      	movs	r3, #128	@ 0x80
10043054:	025b      	lsls	r3, r3, #9
10043056:	4013      	ands	r3, r2
10043058:	d002      	beq.n	10043060 <HAL_PWR_WKUPx_Callback+0x18>
  {
    BSP_PB_Callback(B1);
1004305a:	2000      	movs	r0, #0
1004305c:	f7ff ffcc 	bl	10042ff8 <BSP_PB_Callback>
  }
  if (wakeupIOs & PWR_WAKEUP_PB5)
10043060:	687b      	ldr	r3, [r7, #4]
10043062:	2220      	movs	r2, #32
10043064:	4013      	ands	r3, r2
10043066:	d002      	beq.n	1004306e <HAL_PWR_WKUPx_Callback+0x26>
  {
    BSP_PB_Callback(B2);
10043068:	2001      	movs	r0, #1
1004306a:	f7ff ffc5 	bl	10042ff8 <BSP_PB_Callback>
  if (wakeupIOs & PWR_WAKEUP_PB9)
  {
    BSP_PB_Callback(B3);
  }
#else
  if (wakeupIOs & PWR_WAKEUP_PB14)
1004306e:	687a      	ldr	r2, [r7, #4]
10043070:	2380      	movs	r3, #128	@ 0x80
10043072:	03db      	lsls	r3, r3, #15
10043074:	4013      	ands	r3, r2
10043076:	d002      	beq.n	1004307e <HAL_PWR_WKUPx_Callback+0x36>
  {
    BSP_PB_Callback(B3);
10043078:	2002      	movs	r0, #2
1004307a:	f7ff ffbd 	bl	10042ff8 <BSP_PB_Callback>
  }
#endif

}
1004307e:	46c0      	nop			@ (mov r8, r8)
10043080:	46bd      	mov	sp, r7
10043082:	b002      	add	sp, #8
10043084:	bd80      	pop	{r7, pc}

10043086 <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10043086:	b580      	push	{r7, lr}
10043088:	b082      	sub	sp, #8
1004308a:	af00      	add	r7, sp, #0
1004308c:	6078      	str	r0, [r7, #4]
1004308e:	000a      	movs	r2, r1
10043090:	1cbb      	adds	r3, r7, #2
10043092:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == B1_PIN)
10043094:	1cbb      	adds	r3, r7, #2
10043096:	881b      	ldrh	r3, [r3, #0]
10043098:	2b01      	cmp	r3, #1
1004309a:	d103      	bne.n	100430a4 <HAL_GPIO_EXTI_Callback+0x1e>
  {
    BSP_PB_Callback(B1);
1004309c:	2000      	movs	r0, #0
1004309e:	f7ff ffab 	bl	10042ff8 <BSP_PB_Callback>
  else if (GPIO_Pin == B3_PIN)
  {
    BSP_PB_Callback(B3);
  }

  return;
100430a2:	e011      	b.n	100430c8 <HAL_GPIO_EXTI_Callback+0x42>
  else if (GPIO_Pin == B2_PIN)
100430a4:	1cbb      	adds	r3, r7, #2
100430a6:	881b      	ldrh	r3, [r3, #0]
100430a8:	2b20      	cmp	r3, #32
100430aa:	d103      	bne.n	100430b4 <HAL_GPIO_EXTI_Callback+0x2e>
    BSP_PB_Callback(B2);
100430ac:	2001      	movs	r0, #1
100430ae:	f7ff ffa3 	bl	10042ff8 <BSP_PB_Callback>
  return;
100430b2:	e009      	b.n	100430c8 <HAL_GPIO_EXTI_Callback+0x42>
  else if (GPIO_Pin == B3_PIN)
100430b4:	1cbb      	adds	r3, r7, #2
100430b6:	881a      	ldrh	r2, [r3, #0]
100430b8:	2380      	movs	r3, #128	@ 0x80
100430ba:	01db      	lsls	r3, r3, #7
100430bc:	429a      	cmp	r2, r3
100430be:	d103      	bne.n	100430c8 <HAL_GPIO_EXTI_Callback+0x42>
    BSP_PB_Callback(B3);
100430c0:	2002      	movs	r0, #2
100430c2:	f7ff ff99 	bl	10042ff8 <BSP_PB_Callback>
  return;
100430c6:	46c0      	nop			@ (mov r8, r8)
100430c8:	46c0      	nop			@ (mov r8, r8)
}
100430ca:	46bd      	mov	sp, r7
100430cc:	b002      	add	sp, #8
100430ce:	bd80      	pop	{r7, pc}

100430d0 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
100430d0:	b580      	push	{r7, lr}
100430d2:	b082      	sub	sp, #8
100430d4:	af00      	add	r7, sp, #0
100430d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
100430d8:	687b      	ldr	r3, [r7, #4]
100430da:	691b      	ldr	r3, [r3, #16]
}
100430dc:	0018      	movs	r0, r3
100430de:	46bd      	mov	sp, r7
100430e0:	b002      	add	sp, #8
100430e2:	bd80      	pop	{r7, pc}

100430e4 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
100430e4:	b580      	push	{r7, lr}
100430e6:	b084      	sub	sp, #16
100430e8:	af00      	add	r7, sp, #0
100430ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
100430ec:	4b07      	ldr	r3, [pc, #28]	@ (1004310c <LL_AHB1_GRP1_EnableClock+0x28>)
100430ee:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100430f0:	4b06      	ldr	r3, [pc, #24]	@ (1004310c <LL_AHB1_GRP1_EnableClock+0x28>)
100430f2:	687a      	ldr	r2, [r7, #4]
100430f4:	430a      	orrs	r2, r1
100430f6:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100430f8:	4b04      	ldr	r3, [pc, #16]	@ (1004310c <LL_AHB1_GRP1_EnableClock+0x28>)
100430fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100430fc:	687a      	ldr	r2, [r7, #4]
100430fe:	4013      	ands	r3, r2
10043100:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043102:	68fb      	ldr	r3, [r7, #12]
}
10043104:	46c0      	nop			@ (mov r8, r8)
10043106:	46bd      	mov	sp, r7
10043108:	b004      	add	sp, #16
1004310a:	bd80      	pop	{r7, pc}
1004310c:	48400000 	.word	0x48400000

10043110 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10043110:	b580      	push	{r7, lr}
10043112:	b084      	sub	sp, #16
10043114:	af00      	add	r7, sp, #0
10043116:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10043118:	4b07      	ldr	r3, [pc, #28]	@ (10043138 <LL_APB2_GRP1_EnableClock+0x28>)
1004311a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004311c:	4b06      	ldr	r3, [pc, #24]	@ (10043138 <LL_APB2_GRP1_EnableClock+0x28>)
1004311e:	687a      	ldr	r2, [r7, #4]
10043120:	430a      	orrs	r2, r1
10043122:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10043124:	4b04      	ldr	r3, [pc, #16]	@ (10043138 <LL_APB2_GRP1_EnableClock+0x28>)
10043126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043128:	687a      	ldr	r2, [r7, #4]
1004312a:	4013      	ands	r3, r2
1004312c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004312e:	68fb      	ldr	r3, [r7, #12]
}
10043130:	46c0      	nop			@ (mov r8, r8)
10043132:	46bd      	mov	sp, r7
10043134:	b004      	add	sp, #16
10043136:	bd80      	pop	{r7, pc}
10043138:	48400000 	.word	0x48400000

1004313c <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
1004313c:	b580      	push	{r7, lr}
1004313e:	b082      	sub	sp, #8
10043140:	af00      	add	r7, sp, #0
10043142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10043144:	4b06      	ldr	r3, [pc, #24]	@ (10043160 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10043146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043148:	687a      	ldr	r2, [r7, #4]
1004314a:	4013      	ands	r3, r2
1004314c:	687a      	ldr	r2, [r7, #4]
1004314e:	429a      	cmp	r2, r3
10043150:	d101      	bne.n	10043156 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10043152:	2301      	movs	r3, #1
10043154:	e000      	b.n	10043158 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10043156:	2300      	movs	r3, #0
}
10043158:	0018      	movs	r0, r3
1004315a:	46bd      	mov	sp, r7
1004315c:	b002      	add	sp, #8
1004315e:	bd80      	pop	{r7, pc}
10043160:	48400000 	.word	0x48400000

10043164 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10043164:	b580      	push	{r7, lr}
10043166:	b082      	sub	sp, #8
10043168:	af00      	add	r7, sp, #0
1004316a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
1004316c:	4b04      	ldr	r3, [pc, #16]	@ (10043180 <LL_APB2_GRP1_ForceReset+0x1c>)
1004316e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10043170:	4b03      	ldr	r3, [pc, #12]	@ (10043180 <LL_APB2_GRP1_ForceReset+0x1c>)
10043172:	687a      	ldr	r2, [r7, #4]
10043174:	430a      	orrs	r2, r1
10043176:	641a      	str	r2, [r3, #64]	@ 0x40
}
10043178:	46c0      	nop			@ (mov r8, r8)
1004317a:	46bd      	mov	sp, r7
1004317c:	b002      	add	sp, #8
1004317e:	bd80      	pop	{r7, pc}
10043180:	48400000 	.word	0x48400000

10043184 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10043184:	b580      	push	{r7, lr}
10043186:	b082      	sub	sp, #8
10043188:	af00      	add	r7, sp, #0
1004318a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
1004318c:	4b05      	ldr	r3, [pc, #20]	@ (100431a4 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004318e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10043190:	687b      	ldr	r3, [r7, #4]
10043192:	43d9      	mvns	r1, r3
10043194:	4b03      	ldr	r3, [pc, #12]	@ (100431a4 <LL_APB2_GRP1_ReleaseReset+0x20>)
10043196:	400a      	ands	r2, r1
10043198:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004319a:	46c0      	nop			@ (mov r8, r8)
1004319c:	46bd      	mov	sp, r7
1004319e:	b002      	add	sp, #8
100431a0:	bd80      	pop	{r7, pc}
100431a2:	46c0      	nop			@ (mov r8, r8)
100431a4:	48400000 	.word	0x48400000

100431a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
100431a8:	b580      	push	{r7, lr}
100431aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
100431ac:	f008 fe92 	bl	1004bed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
100431b0:	f000 f812 	bl	100431d8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
100431b4:	f000 f847 	bl	10043246 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
100431b8:	f000 f90a 	bl	100433d0 <MX_GPIO_Init>
  MX_RADIO_Init();
100431bc:	f000 f8b6 	bl	1004332c <MX_RADIO_Init>
  MX_RADIO_TIMER_Init();
100431c0:	f000 f8d2 	bl	10043368 <MX_RADIO_TIMER_Init>
  MX_PKA_Init();
100431c4:	f000 f89e 	bl	10043304 <MX_PKA_Init>
  MX_LPUART1_UART_Init();
100431c8:	f000 f85a 	bl	10043280 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_BLE */
  MX_APPE_Init(NULL);
100431cc:	2000      	movs	r0, #0
100431ce:	f7ff fc86 	bl	10042ade <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
100431d2:	f7ff fe85 	bl	10042ee0 <MX_APPE_Process>
100431d6:	e7fc      	b.n	100431d2 <main+0x2a>

100431d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100431d8:	b590      	push	{r4, r7, lr}
100431da:	b089      	sub	sp, #36	@ 0x24
100431dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100431de:	2408      	movs	r4, #8
100431e0:	193b      	adds	r3, r7, r4
100431e2:	0018      	movs	r0, r3
100431e4:	2318      	movs	r3, #24
100431e6:	001a      	movs	r2, r3
100431e8:	2100      	movs	r1, #0
100431ea:	f024 fb9b 	bl	10067924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100431ee:	003b      	movs	r3, r7
100431f0:	0018      	movs	r0, r3
100431f2:	2308      	movs	r3, #8
100431f4:	001a      	movs	r2, r3
100431f6:	2100      	movs	r1, #0
100431f8:	f024 fb94 	bl	10067924 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
100431fc:	193b      	adds	r3, r7, r4
100431fe:	2203      	movs	r2, #3
10043200:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10043202:	193b      	adds	r3, r7, r4
10043204:	2280      	movs	r2, #128	@ 0x80
10043206:	0252      	lsls	r2, r2, #9
10043208:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
1004320a:	193b      	adds	r3, r7, r4
1004320c:	2210      	movs	r2, #16
1004320e:	60da      	str	r2, [r3, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10043210:	193b      	adds	r3, r7, r4
10043212:	0018      	movs	r0, r3
10043214:	f00c fcd8 	bl	1004fbc8 <HAL_RCC_OscConfig>
10043218:	1e03      	subs	r3, r0, #0
1004321a:	d001      	beq.n	10043220 <SystemClock_Config+0x48>
  {
    Error_Handler();
1004321c:	f000 f8e5 	bl	100433ea <Error_Handler>
  }

  /** Configure the SYSCLKSource and SYSCLKDivider
  */
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10043220:	003b      	movs	r3, r7
10043222:	2200      	movs	r2, #0
10043224:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV2;
10043226:	003b      	movs	r3, r7
10043228:	2220      	movs	r2, #32
1004322a:	605a      	str	r2, [r3, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_0) != HAL_OK)
1004322c:	003b      	movs	r3, r7
1004322e:	2100      	movs	r1, #0
10043230:	0018      	movs	r0, r3
10043232:	f00c fe13 	bl	1004fe5c <HAL_RCC_ClockConfig>
10043236:	1e03      	subs	r3, r0, #0
10043238:	d001      	beq.n	1004323e <SystemClock_Config+0x66>
  {
    Error_Handler();
1004323a:	f000 f8d6 	bl	100433ea <Error_Handler>
  }
}
1004323e:	46c0      	nop			@ (mov r8, r8)
10043240:	46bd      	mov	sp, r7
10043242:	b009      	add	sp, #36	@ 0x24
10043244:	bd90      	pop	{r4, r7, pc}

10043246 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10043246:	b580      	push	{r7, lr}
10043248:	b086      	sub	sp, #24
1004324a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
1004324c:	003b      	movs	r3, r7
1004324e:	0018      	movs	r0, r3
10043250:	2318      	movs	r3, #24
10043252:	001a      	movs	r2, r3
10043254:	2100      	movs	r1, #0
10043256:	f024 fb65 	bl	10067924 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
1004325a:	003b      	movs	r3, r7
1004325c:	2202      	movs	r2, #2
1004325e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
10043260:	003b      	movs	r3, r7
10043262:	2280      	movs	r2, #128	@ 0x80
10043264:	0152      	lsls	r2, r2, #5
10043266:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10043268:	003b      	movs	r3, r7
1004326a:	0018      	movs	r0, r3
1004326c:	f00c ff8c 	bl	10050188 <HAL_RCCEx_PeriphCLKConfig>
10043270:	1e03      	subs	r3, r0, #0
10043272:	d001      	beq.n	10043278 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
10043274:	f000 f8b9 	bl	100433ea <Error_Handler>
  }
}
10043278:	46c0      	nop			@ (mov r8, r8)
1004327a:	46bd      	mov	sp, r7
1004327c:	b006      	add	sp, #24
1004327e:	bd80      	pop	{r7, pc}

10043280 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
10043280:	b580      	push	{r7, lr}
10043282:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
10043284:	4b1d      	ldr	r3, [pc, #116]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
10043286:	4a1e      	ldr	r2, [pc, #120]	@ (10043300 <MX_LPUART1_UART_Init+0x80>)
10043288:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
1004328a:	4b1c      	ldr	r3, [pc, #112]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
1004328c:	2296      	movs	r2, #150	@ 0x96
1004328e:	0192      	lsls	r2, r2, #6
10043290:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
10043292:	4b1a      	ldr	r3, [pc, #104]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
10043294:	2200      	movs	r2, #0
10043296:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
10043298:	4b18      	ldr	r3, [pc, #96]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
1004329a:	2200      	movs	r2, #0
1004329c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
1004329e:	4b17      	ldr	r3, [pc, #92]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
100432a0:	2200      	movs	r2, #0
100432a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
100432a4:	4b15      	ldr	r3, [pc, #84]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
100432a6:	220c      	movs	r2, #12
100432a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
100432aa:	4b14      	ldr	r3, [pc, #80]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
100432ac:	2200      	movs	r2, #0
100432ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
100432b0:	4b12      	ldr	r3, [pc, #72]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
100432b2:	2200      	movs	r2, #0
100432b4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
100432b6:	4b11      	ldr	r3, [pc, #68]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
100432b8:	2200      	movs	r2, #0
100432ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
100432bc:	4b0f      	ldr	r3, [pc, #60]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
100432be:	2200      	movs	r2, #0
100432c0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
100432c2:	4b0e      	ldr	r3, [pc, #56]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
100432c4:	0018      	movs	r0, r3
100432c6:	f00d f83b 	bl	10050340 <HAL_UART_Init>
100432ca:	1e03      	subs	r3, r0, #0
100432cc:	d001      	beq.n	100432d2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
100432ce:	f000 f88c 	bl	100433ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
100432d2:	4b0a      	ldr	r3, [pc, #40]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
100432d4:	2100      	movs	r1, #0
100432d6:	0018      	movs	r0, r3
100432d8:	f00e faf8 	bl	100518cc <HAL_UARTEx_SetTxFifoThreshold>
100432dc:	1e03      	subs	r3, r0, #0
100432de:	d001      	beq.n	100432e4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
100432e0:	f000 f883 	bl	100433ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
100432e4:	4b05      	ldr	r3, [pc, #20]	@ (100432fc <MX_LPUART1_UART_Init+0x7c>)
100432e6:	2100      	movs	r1, #0
100432e8:	0018      	movs	r0, r3
100432ea:	f00e fb2f 	bl	1005194c <HAL_UARTEx_SetRxFifoThreshold>
100432ee:	1e03      	subs	r3, r0, #0
100432f0:	d001      	beq.n	100432f6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
100432f2:	f000 f87a 	bl	100433ea <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
100432f6:	46c0      	nop			@ (mov r8, r8)
100432f8:	46bd      	mov	sp, r7
100432fa:	bd80      	pop	{r7, pc}
100432fc:	20000314 	.word	0x20000314
10043300:	41005000 	.word	0x41005000

10043304 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
10043304:	b580      	push	{r7, lr}
10043306:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
10043308:	4b06      	ldr	r3, [pc, #24]	@ (10043324 <MX_PKA_Init+0x20>)
1004330a:	4a07      	ldr	r2, [pc, #28]	@ (10043328 <MX_PKA_Init+0x24>)
1004330c:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
1004330e:	4b05      	ldr	r3, [pc, #20]	@ (10043324 <MX_PKA_Init+0x20>)
10043310:	0018      	movs	r0, r3
10043312:	f009 fc3f 	bl	1004cb94 <HAL_PKA_Init>
10043316:	1e03      	subs	r3, r0, #0
10043318:	d001      	beq.n	1004331e <MX_PKA_Init+0x1a>
  {
    Error_Handler();
1004331a:	f000 f866 	bl	100433ea <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
1004331e:	46c0      	nop			@ (mov r8, r8)
10043320:	46bd      	mov	sp, r7
10043322:	bd80      	pop	{r7, pc}
10043324:	200003e0 	.word	0x200003e0
10043328:	48300000 	.word	0x48300000

1004332c <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
1004332c:	b580      	push	{r7, lr}
1004332e:	b082      	sub	sp, #8
10043330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */

  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
10043332:	2300      	movs	r3, #0
10043334:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */

  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10043336:	2001      	movs	r0, #1
10043338:	f7ff ff00 	bl	1004313c <LL_APB2_GRP1_IsEnabledClock>
1004333c:	1e03      	subs	r3, r0, #0
1004333e:	d108      	bne.n	10043352 <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10043340:	2001      	movs	r0, #1
10043342:	f7ff ff0f 	bl	10043164 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10043346:	2001      	movs	r0, #1
10043348:	f7ff ff1c 	bl	10043184 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
1004334c:	2001      	movs	r0, #1
1004334e:	f7ff fedf 	bl	10043110 <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
10043352:	23c0      	movs	r3, #192	@ 0xc0
10043354:	05db      	lsls	r3, r3, #23
10043356:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
10043358:	1d3b      	adds	r3, r7, #4
1004335a:	0018      	movs	r0, r3
1004335c:	f00a f918 	bl	1004d590 <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */

  /* USER CODE END RADIO_Init 2 */

}
10043360:	46c0      	nop			@ (mov r8, r8)
10043362:	46bd      	mov	sp, r7
10043364:	b002      	add	sp, #8
10043366:	bd80      	pop	{r7, pc}

10043368 <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
10043368:	b580      	push	{r7, lr}
1004336a:	b082      	sub	sp, #8
1004336c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */

  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
1004336e:	003b      	movs	r3, r7
10043370:	0018      	movs	r0, r3
10043372:	2308      	movs	r3, #8
10043374:	001a      	movs	r2, r3
10043376:	2100      	movs	r1, #0
10043378:	f024 fad4 	bl	10067924 <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */

  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
1004337c:	2001      	movs	r0, #1
1004337e:	f7ff fedd 	bl	1004313c <LL_APB2_GRP1_IsEnabledClock>
10043382:	1e03      	subs	r3, r0, #0
10043384:	d108      	bne.n	10043398 <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10043386:	2001      	movs	r0, #1
10043388:	f7ff feec 	bl	10043164 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
1004338c:	2001      	movs	r0, #1
1004338e:	f7ff fef9 	bl	10043184 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10043392:	2001      	movs	r0, #1
10043394:	f7ff febc 	bl	10043110 <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
10043398:	46c0      	nop			@ (mov r8, r8)
1004339a:	4b0c      	ldr	r3, [pc, #48]	@ (100433cc <MX_RADIO_TIMER_Init+0x64>)
1004339c:	0018      	movs	r0, r3
1004339e:	f7ff fe97 	bl	100430d0 <LL_RADIO_TIMER_GetAbsoluteTime>
100433a2:	0003      	movs	r3, r0
100433a4:	2b0f      	cmp	r3, #15
100433a6:	d9f8      	bls.n	1004339a <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
100433a8:	003b      	movs	r3, r7
100433aa:	22a0      	movs	r2, #160	@ 0xa0
100433ac:	0052      	lsls	r2, r2, #1
100433ae:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = FALSE;
100433b0:	003b      	movs	r3, r7
100433b2:	2200      	movs	r2, #0
100433b4:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 0;
100433b6:	003b      	movs	r3, r7
100433b8:	2200      	movs	r2, #0
100433ba:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
100433bc:	003b      	movs	r3, r7
100433be:	0018      	movs	r0, r3
100433c0:	f00a fe46 	bl	1004e050 <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */

  /* USER CODE END RADIO_TIMER_Init 2 */

}
100433c4:	46c0      	nop			@ (mov r8, r8)
100433c6:	46bd      	mov	sp, r7
100433c8:	b002      	add	sp, #8
100433ca:	bd80      	pop	{r7, pc}
100433cc:	60001800 	.word	0x60001800

100433d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
100433d0:	b580      	push	{r7, lr}
100433d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
100433d4:	2008      	movs	r0, #8
100433d6:	f7ff fe85 	bl	100430e4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
100433da:	2004      	movs	r0, #4
100433dc:	f7ff fe82 	bl	100430e4 <LL_AHB1_GRP1_EnableClock>

  /*RT DEBUG GPIO_Init */
  RT_DEBUG_GPIO_Init();
100433e0:	f004 fc1f 	bl	10047c22 <RT_DEBUG_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
100433e4:	46c0      	nop			@ (mov r8, r8)
100433e6:	46bd      	mov	sp, r7
100433e8:	bd80      	pop	{r7, pc}

100433ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100433ea:	b580      	push	{r7, lr}
100433ec:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
100433ee:	b672      	cpsid	i
}
100433f0:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
100433f2:	e7fe      	b.n	100433f2 <Error_Handler+0x8>

100433f4 <LL_AHB1_GRP1_EnableClock>:
{
100433f4:	b580      	push	{r7, lr}
100433f6:	b084      	sub	sp, #16
100433f8:	af00      	add	r7, sp, #0
100433fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100433fc:	4b07      	ldr	r3, [pc, #28]	@ (1004341c <LL_AHB1_GRP1_EnableClock+0x28>)
100433fe:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10043400:	4b06      	ldr	r3, [pc, #24]	@ (1004341c <LL_AHB1_GRP1_EnableClock+0x28>)
10043402:	687a      	ldr	r2, [r7, #4]
10043404:	430a      	orrs	r2, r1
10043406:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10043408:	4b04      	ldr	r3, [pc, #16]	@ (1004341c <LL_AHB1_GRP1_EnableClock+0x28>)
1004340a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004340c:	687a      	ldr	r2, [r7, #4]
1004340e:	4013      	ands	r3, r2
10043410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043412:	68fb      	ldr	r3, [r7, #12]
}
10043414:	46c0      	nop			@ (mov r8, r8)
10043416:	46bd      	mov	sp, r7
10043418:	b004      	add	sp, #16
1004341a:	bd80      	pop	{r7, pc}
1004341c:	48400000 	.word	0x48400000

10043420 <LL_APB0_GRP1_EnableClock>:
{
10043420:	b580      	push	{r7, lr}
10043422:	b084      	sub	sp, #16
10043424:	af00      	add	r7, sp, #0
10043426:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10043428:	4b07      	ldr	r3, [pc, #28]	@ (10043448 <LL_APB0_GRP1_EnableClock+0x28>)
1004342a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
1004342c:	4b06      	ldr	r3, [pc, #24]	@ (10043448 <LL_APB0_GRP1_EnableClock+0x28>)
1004342e:	687a      	ldr	r2, [r7, #4]
10043430:	430a      	orrs	r2, r1
10043432:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10043434:	4b04      	ldr	r3, [pc, #16]	@ (10043448 <LL_APB0_GRP1_EnableClock+0x28>)
10043436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10043438:	687a      	ldr	r2, [r7, #4]
1004343a:	4013      	ands	r3, r2
1004343c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004343e:	68fb      	ldr	r3, [r7, #12]
}
10043440:	46c0      	nop			@ (mov r8, r8)
10043442:	46bd      	mov	sp, r7
10043444:	b004      	add	sp, #16
10043446:	bd80      	pop	{r7, pc}
10043448:	48400000 	.word	0x48400000

1004344c <LL_APB1_GRP1_EnableClock>:
{
1004344c:	b580      	push	{r7, lr}
1004344e:	b084      	sub	sp, #16
10043450:	af00      	add	r7, sp, #0
10043452:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10043454:	4b07      	ldr	r3, [pc, #28]	@ (10043474 <LL_APB1_GRP1_EnableClock+0x28>)
10043456:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10043458:	4b06      	ldr	r3, [pc, #24]	@ (10043474 <LL_APB1_GRP1_EnableClock+0x28>)
1004345a:	687a      	ldr	r2, [r7, #4]
1004345c:	430a      	orrs	r2, r1
1004345e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10043460:	4b04      	ldr	r3, [pc, #16]	@ (10043474 <LL_APB1_GRP1_EnableClock+0x28>)
10043462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10043464:	687a      	ldr	r2, [r7, #4]
10043466:	4013      	ands	r3, r2
10043468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004346a:	68fb      	ldr	r3, [r7, #12]
}
1004346c:	46c0      	nop			@ (mov r8, r8)
1004346e:	46bd      	mov	sp, r7
10043470:	b004      	add	sp, #16
10043472:	bd80      	pop	{r7, pc}
10043474:	48400000 	.word	0x48400000

10043478 <LL_APB2_GRP1_EnableClock>:
{
10043478:	b580      	push	{r7, lr}
1004347a:	b084      	sub	sp, #16
1004347c:	af00      	add	r7, sp, #0
1004347e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10043480:	4b07      	ldr	r3, [pc, #28]	@ (100434a0 <LL_APB2_GRP1_EnableClock+0x28>)
10043482:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10043484:	4b06      	ldr	r3, [pc, #24]	@ (100434a0 <LL_APB2_GRP1_EnableClock+0x28>)
10043486:	687a      	ldr	r2, [r7, #4]
10043488:	430a      	orrs	r2, r1
1004348a:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
1004348c:	4b04      	ldr	r3, [pc, #16]	@ (100434a0 <LL_APB2_GRP1_EnableClock+0x28>)
1004348e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043490:	687a      	ldr	r2, [r7, #4]
10043492:	4013      	ands	r3, r2
10043494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043496:	68fb      	ldr	r3, [r7, #12]
}
10043498:	46c0      	nop			@ (mov r8, r8)
1004349a:	46bd      	mov	sp, r7
1004349c:	b004      	add	sp, #16
1004349e:	bd80      	pop	{r7, pc}
100434a0:	48400000 	.word	0x48400000

100434a4 <LL_APB2_GRP1_IsEnabledClock>:
{
100434a4:	b580      	push	{r7, lr}
100434a6:	b082      	sub	sp, #8
100434a8:	af00      	add	r7, sp, #0
100434aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
100434ac:	4b06      	ldr	r3, [pc, #24]	@ (100434c8 <LL_APB2_GRP1_IsEnabledClock+0x24>)
100434ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100434b0:	687a      	ldr	r2, [r7, #4]
100434b2:	4013      	ands	r3, r2
100434b4:	687a      	ldr	r2, [r7, #4]
100434b6:	429a      	cmp	r2, r3
100434b8:	d101      	bne.n	100434be <LL_APB2_GRP1_IsEnabledClock+0x1a>
100434ba:	2301      	movs	r3, #1
100434bc:	e000      	b.n	100434c0 <LL_APB2_GRP1_IsEnabledClock+0x1c>
100434be:	2300      	movs	r3, #0
}
100434c0:	0018      	movs	r0, r3
100434c2:	46bd      	mov	sp, r7
100434c4:	b002      	add	sp, #8
100434c6:	bd80      	pop	{r7, pc}
100434c8:	48400000 	.word	0x48400000

100434cc <LL_APB2_GRP1_ForceReset>:
{
100434cc:	b580      	push	{r7, lr}
100434ce:	b082      	sub	sp, #8
100434d0:	af00      	add	r7, sp, #0
100434d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
100434d4:	4b04      	ldr	r3, [pc, #16]	@ (100434e8 <LL_APB2_GRP1_ForceReset+0x1c>)
100434d6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
100434d8:	4b03      	ldr	r3, [pc, #12]	@ (100434e8 <LL_APB2_GRP1_ForceReset+0x1c>)
100434da:	687a      	ldr	r2, [r7, #4]
100434dc:	430a      	orrs	r2, r1
100434de:	641a      	str	r2, [r3, #64]	@ 0x40
}
100434e0:	46c0      	nop			@ (mov r8, r8)
100434e2:	46bd      	mov	sp, r7
100434e4:	b002      	add	sp, #8
100434e6:	bd80      	pop	{r7, pc}
100434e8:	48400000 	.word	0x48400000

100434ec <LL_APB2_GRP1_ReleaseReset>:
{
100434ec:	b580      	push	{r7, lr}
100434ee:	b082      	sub	sp, #8
100434f0:	af00      	add	r7, sp, #0
100434f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
100434f4:	4b05      	ldr	r3, [pc, #20]	@ (1004350c <LL_APB2_GRP1_ReleaseReset+0x20>)
100434f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100434f8:	687b      	ldr	r3, [r7, #4]
100434fa:	43d9      	mvns	r1, r3
100434fc:	4b03      	ldr	r3, [pc, #12]	@ (1004350c <LL_APB2_GRP1_ReleaseReset+0x20>)
100434fe:	400a      	ands	r2, r1
10043500:	641a      	str	r2, [r3, #64]	@ 0x40
}
10043502:	46c0      	nop			@ (mov r8, r8)
10043504:	46bd      	mov	sp, r7
10043506:	b002      	add	sp, #8
10043508:	bd80      	pop	{r7, pc}
1004350a:	46c0      	nop			@ (mov r8, r8)
1004350c:	48400000 	.word	0x48400000

10043510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10043510:	b580      	push	{r7, lr}
10043512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
  lowPowerIOSetup();
10043514:	f000 f934 	bl	10043780 <lowPowerIOSetup>

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10043518:	2380      	movs	r3, #128	@ 0x80
1004351a:	005b      	lsls	r3, r3, #1
1004351c:	0018      	movs	r0, r3
1004351e:	f7ff ff7f 	bl	10043420 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10043522:	46c0      	nop			@ (mov r8, r8)
10043524:	46bd      	mov	sp, r7
10043526:	bd80      	pop	{r7, pc}

10043528 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10043528:	b590      	push	{r4, r7, lr}
1004352a:	b08f      	sub	sp, #60	@ 0x3c
1004352c:	af00      	add	r7, sp, #0
1004352e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10043530:	2324      	movs	r3, #36	@ 0x24
10043532:	18fb      	adds	r3, r7, r3
10043534:	0018      	movs	r0, r3
10043536:	2314      	movs	r3, #20
10043538:	001a      	movs	r2, r3
1004353a:	2100      	movs	r1, #0
1004353c:	f024 f9f2 	bl	10067924 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10043540:	240c      	movs	r4, #12
10043542:	193b      	adds	r3, r7, r4
10043544:	0018      	movs	r0, r3
10043546:	2318      	movs	r3, #24
10043548:	001a      	movs	r2, r3
1004354a:	2100      	movs	r1, #0
1004354c:	f024 f9ea 	bl	10067924 <memset>
  if(huart->Instance==LPUART1)
10043550:	687b      	ldr	r3, [r7, #4]
10043552:	681b      	ldr	r3, [r3, #0]
10043554:	4a57      	ldr	r2, [pc, #348]	@ (100436b4 <HAL_UART_MspInit+0x18c>)
10043556:	4293      	cmp	r3, r2
10043558:	d152      	bne.n	10043600 <HAL_UART_MspInit+0xd8>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
1004355a:	193b      	adds	r3, r7, r4
1004355c:	2210      	movs	r2, #16
1004355e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.LPUART1ClockSelection = RCC_LPUART1_CLKSOURCE_16M;
10043560:	193b      	adds	r3, r7, r4
10043562:	2200      	movs	r2, #0
10043564:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10043566:	193b      	adds	r3, r7, r4
10043568:	0018      	movs	r0, r3
1004356a:	f00c fe0d 	bl	10050188 <HAL_RCCEx_PeriphCLKConfig>
1004356e:	1e03      	subs	r3, r0, #0
10043570:	d001      	beq.n	10043576 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
10043572:	f7ff ff3a 	bl	100433ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
10043576:	2380      	movs	r3, #128	@ 0x80
10043578:	005b      	lsls	r3, r3, #1
1004357a:	0018      	movs	r0, r3
1004357c:	f7ff ff66 	bl	1004344c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10043580:	2008      	movs	r0, #8
10043582:	f7ff ff37 	bl	100433f4 <LL_AHB1_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB3     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
10043586:	2424      	movs	r4, #36	@ 0x24
10043588:	193b      	adds	r3, r7, r4
1004358a:	2208      	movs	r2, #8
1004358c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004358e:	193b      	adds	r3, r7, r4
10043590:	2202      	movs	r2, #2
10043592:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10043594:	193b      	adds	r3, r7, r4
10043596:	2200      	movs	r2, #0
10043598:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004359a:	193b      	adds	r3, r7, r4
1004359c:	2200      	movs	r2, #0
1004359e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
100435a0:	193b      	adds	r3, r7, r4
100435a2:	2201      	movs	r2, #1
100435a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100435a6:	193b      	adds	r3, r7, r4
100435a8:	4a43      	ldr	r2, [pc, #268]	@ (100436b8 <HAL_UART_MspInit+0x190>)
100435aa:	0019      	movs	r1, r3
100435ac:	0010      	movs	r0, r2
100435ae:	f008 fff1 	bl	1004c594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
100435b2:	0021      	movs	r1, r4
100435b4:	187b      	adds	r3, r7, r1
100435b6:	2280      	movs	r2, #128	@ 0x80
100435b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100435ba:	187b      	adds	r3, r7, r1
100435bc:	2202      	movs	r2, #2
100435be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100435c0:	187b      	adds	r3, r7, r1
100435c2:	2200      	movs	r2, #0
100435c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100435c6:	187b      	adds	r3, r7, r1
100435c8:	2200      	movs	r2, #0
100435ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART1;
100435cc:	187b      	adds	r3, r7, r1
100435ce:	2203      	movs	r2, #3
100435d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100435d2:	187b      	adds	r3, r7, r1
100435d4:	4a38      	ldr	r2, [pc, #224]	@ (100436b8 <HAL_UART_MspInit+0x190>)
100435d6:	0019      	movs	r1, r3
100435d8:	0010      	movs	r0, r2
100435da:	f008 ffdb 	bl	1004c594 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
100435de:	2188      	movs	r1, #136	@ 0x88
100435e0:	2001      	movs	r0, #1
100435e2:	f009 fd99 	bl	1004d118 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
100435e6:	2188      	movs	r1, #136	@ 0x88
100435e8:	2001      	movs	r0, #1
100435ea:	f009 fdfd 	bl	1004d1e8 <HAL_PWREx_DisableGPIOPullDown>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
100435ee:	2200      	movs	r2, #0
100435f0:	2101      	movs	r1, #1
100435f2:	2009      	movs	r0, #9
100435f4:	f008 fdbc 	bl	1004c170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
100435f8:	2009      	movs	r0, #9
100435fa:	f008 fdce 	bl	1004c19a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
100435fe:	e054      	b.n	100436aa <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART1)
10043600:	687b      	ldr	r3, [r7, #4]
10043602:	681b      	ldr	r3, [r3, #0]
10043604:	4a2d      	ldr	r2, [pc, #180]	@ (100436bc <HAL_UART_MspInit+0x194>)
10043606:	4293      	cmp	r3, r2
10043608:	d14f      	bne.n	100436aa <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART1_CLK_ENABLE();
1004360a:	2380      	movs	r3, #128	@ 0x80
1004360c:	00db      	lsls	r3, r3, #3
1004360e:	0018      	movs	r0, r3
10043610:	f7ff ff1c 	bl	1004344c <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
10043614:	2008      	movs	r0, #8
10043616:	f7ff feed 	bl	100433f4 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
1004361a:	2004      	movs	r0, #4
1004361c:	f7ff feea 	bl	100433f4 <LL_AHB1_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
10043620:	2424      	movs	r4, #36	@ 0x24
10043622:	193b      	adds	r3, r7, r4
10043624:	2201      	movs	r2, #1
10043626:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10043628:	193b      	adds	r3, r7, r4
1004362a:	2202      	movs	r2, #2
1004362c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004362e:	193b      	adds	r3, r7, r4
10043630:	2200      	movs	r2, #0
10043632:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10043634:	193b      	adds	r3, r7, r4
10043636:	2200      	movs	r2, #0
10043638:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
1004363a:	193b      	adds	r3, r7, r4
1004363c:	2200      	movs	r2, #0
1004363e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10043640:	193b      	adds	r3, r7, r4
10043642:	4a1d      	ldr	r2, [pc, #116]	@ (100436b8 <HAL_UART_MspInit+0x190>)
10043644:	0019      	movs	r1, r3
10043646:	0010      	movs	r0, r2
10043648:	f008 ffa4 	bl	1004c594 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
1004364c:	0021      	movs	r1, r4
1004364e:	187b      	adds	r3, r7, r1
10043650:	2202      	movs	r2, #2
10043652:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10043654:	187b      	adds	r3, r7, r1
10043656:	2202      	movs	r2, #2
10043658:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004365a:	187b      	adds	r3, r7, r1
1004365c:	2200      	movs	r2, #0
1004365e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10043660:	187b      	adds	r3, r7, r1
10043662:	2200      	movs	r2, #0
10043664:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART1;
10043666:	187b      	adds	r3, r7, r1
10043668:	2202      	movs	r2, #2
1004366a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1004366c:	187a      	adds	r2, r7, r1
1004366e:	2390      	movs	r3, #144	@ 0x90
10043670:	05db      	lsls	r3, r3, #23
10043672:	0011      	movs	r1, r2
10043674:	0018      	movs	r0, r3
10043676:	f008 ff8d 	bl	1004c594 <HAL_GPIO_Init>
    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_0);
1004367a:	2101      	movs	r1, #1
1004367c:	2001      	movs	r0, #1
1004367e:	f009 fd4b 	bl	1004d118 <HAL_PWREx_DisableGPIOPullUp>
    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_1);
10043682:	2102      	movs	r1, #2
10043684:	2000      	movs	r0, #0
10043686:	f009 fd47 	bl	1004d118 <HAL_PWREx_DisableGPIOPullUp>
    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_0);
1004368a:	2101      	movs	r1, #1
1004368c:	2001      	movs	r0, #1
1004368e:	f009 fdab 	bl	1004d1e8 <HAL_PWREx_DisableGPIOPullDown>
    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
10043692:	2102      	movs	r1, #2
10043694:	2000      	movs	r0, #0
10043696:	f009 fda7 	bl	1004d1e8 <HAL_PWREx_DisableGPIOPullDown>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
1004369a:	2200      	movs	r2, #0
1004369c:	2101      	movs	r1, #1
1004369e:	2008      	movs	r0, #8
100436a0:	f008 fd66 	bl	1004c170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
100436a4:	2008      	movs	r0, #8
100436a6:	f008 fd78 	bl	1004c19a <HAL_NVIC_EnableIRQ>
}
100436aa:	46c0      	nop			@ (mov r8, r8)
100436ac:	46bd      	mov	sp, r7
100436ae:	b00f      	add	sp, #60	@ 0x3c
100436b0:	bd90      	pop	{r4, r7, pc}
100436b2:	46c0      	nop			@ (mov r8, r8)
100436b4:	41005000 	.word	0x41005000
100436b8:	48100000 	.word	0x48100000
100436bc:	41004000 	.word	0x41004000

100436c0 <HAL_PKA_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
100436c0:	b580      	push	{r7, lr}
100436c2:	b082      	sub	sp, #8
100436c4:	af00      	add	r7, sp, #0
100436c6:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
100436c8:	687b      	ldr	r3, [r7, #4]
100436ca:	681b      	ldr	r3, [r3, #0]
100436cc:	4a09      	ldr	r2, [pc, #36]	@ (100436f4 <HAL_PKA_MspInit+0x34>)
100436ce:	4293      	cmp	r3, r2
100436d0:	d10c      	bne.n	100436ec <HAL_PKA_MspInit+0x2c>
  {
    /* USER CODE BEGIN PKA_MspInit 0 */

    /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
100436d2:	2380      	movs	r3, #128	@ 0x80
100436d4:	025b      	lsls	r3, r3, #9
100436d6:	0018      	movs	r0, r3
100436d8:	f7ff fe8c 	bl	100433f4 <LL_AHB1_GRP1_EnableClock>
    /* PKA interrupt Init */
    HAL_NVIC_SetPriority(PKA_IRQn, 1, 0);
100436dc:	2200      	movs	r2, #0
100436de:	2101      	movs	r1, #1
100436e0:	200d      	movs	r0, #13
100436e2:	f008 fd45 	bl	1004c170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PKA_IRQn);
100436e6:	200d      	movs	r0, #13
100436e8:	f008 fd57 	bl	1004c19a <HAL_NVIC_EnableIRQ>

    /* USER CODE END PKA_MspInit 1 */

  }

}
100436ec:	46c0      	nop			@ (mov r8, r8)
100436ee:	46bd      	mov	sp, r7
100436f0:	b002      	add	sp, #8
100436f2:	bd80      	pop	{r7, pc}
100436f4:	48300000 	.word	0x48300000

100436f8 <HAL_RADIO_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hradio: RADIO handle pointer
  * @retval None
  */
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
100436f8:	b590      	push	{r4, r7, lr}
100436fa:	b089      	sub	sp, #36	@ 0x24
100436fc:	af00      	add	r7, sp, #0
100436fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10043700:	2408      	movs	r4, #8
10043702:	193b      	adds	r3, r7, r4
10043704:	0018      	movs	r0, r3
10043706:	2318      	movs	r3, #24
10043708:	001a      	movs	r2, r3
1004370a:	2100      	movs	r1, #0
1004370c:	f024 f90a 	bl	10067924 <memset>
  if(hradio->Instance==RADIO)
10043710:	687b      	ldr	r3, [r7, #4]
10043712:	681a      	ldr	r2, [r3, #0]
10043714:	23c0      	movs	r3, #192	@ 0xc0
10043716:	05db      	lsls	r3, r3, #23
10043718:	429a      	cmp	r2, r3
1004371a:	d12d      	bne.n	10043778 <HAL_RADIO_MspInit+0x80>

    /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
1004371c:	193b      	adds	r3, r7, r4
1004371e:	2201      	movs	r2, #1
10043720:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
10043722:	193b      	adds	r3, r7, r4
10043724:	2204      	movs	r2, #4
10043726:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10043728:	193b      	adds	r3, r7, r4
1004372a:	0018      	movs	r0, r3
1004372c:	f00c fd2c 	bl	10050188 <HAL_RCCEx_PeriphCLKConfig>
10043730:	1e03      	subs	r3, r0, #0
10043732:	d001      	beq.n	10043738 <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10043734:	f7ff fe59 	bl	100433ea <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10043738:	2001      	movs	r0, #1
1004373a:	f7ff feb3 	bl	100434a4 <LL_APB2_GRP1_IsEnabledClock>
1004373e:	1e03      	subs	r3, r0, #0
10043740:	d108      	bne.n	10043754 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10043742:	2001      	movs	r0, #1
10043744:	f7ff fec2 	bl	100434cc <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10043748:	2001      	movs	r0, #1
1004374a:	f7ff fecf 	bl	100434ec <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
1004374e:	2001      	movs	r0, #1
10043750:	f7ff fe92 	bl	10043478 <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
10043754:	f004 fa65 	bl	10047c22 <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10043758:	2200      	movs	r2, #0
1004375a:	2100      	movs	r1, #0
1004375c:	2012      	movs	r0, #18
1004375e:	f008 fd07 	bl	1004c170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10043762:	2012      	movs	r0, #18
10043764:	f008 fd19 	bl	1004c19a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10043768:	2200      	movs	r2, #0
1004376a:	2100      	movs	r1, #0
1004376c:	2019      	movs	r0, #25
1004376e:	f008 fcff 	bl	1004c170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10043772:	2019      	movs	r0, #25
10043774:	f008 fd11 	bl	1004c19a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RADIO_MspInit 1 */

  }

}
10043778:	46c0      	nop			@ (mov r8, r8)
1004377a:	46bd      	mov	sp, r7
1004377c:	b009      	add	sp, #36	@ 0x24
1004377e:	bd90      	pop	{r4, r7, pc}

10043780 <lowPowerIOSetup>:
  * @brief  Configures the IOs pull resistors to have the optimized power consumption.
  * @param  None
  * @retval None
  */
static void lowPowerIOSetup(void)
{
10043780:	b580      	push	{r7, lr}
10043782:	af00      	add	r7, sp, #0
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_A, 
10043784:	210f      	movs	r1, #15
10043786:	2000      	movs	r0, #0
10043788:	f009 fc8c 	bl	1004d0a4 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_0|
                       PWR_GPIO_BIT_1|
                       PWR_GPIO_BIT_2|                         
                       PWR_GPIO_BIT_3);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_A, 
1004378c:	23f0      	movs	r3, #240	@ 0xf0
1004378e:	011b      	lsls	r3, r3, #4
10043790:	0019      	movs	r1, r3
10043792:	2000      	movs	r0, #0
10043794:	f009 fcee 	bl	1004d174 <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_8|
                             PWR_GPIO_BIT_9|
                             PWR_GPIO_BIT_10|
                             PWR_GPIO_BIT_11);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, 
10043798:	4b06      	ldr	r3, [pc, #24]	@ (100437b4 <lowPowerIOSetup+0x34>)
1004379a:	0019      	movs	r1, r3
1004379c:	2001      	movs	r0, #1
1004379e:	f009 fce9 	bl	1004d174 <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_6|
                             PWR_GPIO_BIT_7|
                             PWR_GPIO_BIT_12|
                             PWR_GPIO_BIT_13);
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_B, 
100437a2:	4b05      	ldr	r3, [pc, #20]	@ (100437b8 <lowPowerIOSetup+0x38>)
100437a4:	0019      	movs	r1, r3
100437a6:	2001      	movs	r0, #1
100437a8:	f009 fc7c 	bl	1004d0a4 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_2|
                       PWR_GPIO_BIT_4|
                       PWR_GPIO_BIT_5|  
                       PWR_GPIO_BIT_14|
                       PWR_GPIO_BIT_15);
}
100437ac:	46c0      	nop			@ (mov r8, r8)
100437ae:	46bd      	mov	sp, r7
100437b0:	bd80      	pop	{r7, pc}
100437b2:	46c0      	nop			@ (mov r8, r8)
100437b4:	000030c9 	.word	0x000030c9
100437b8:	0000c036 	.word	0x0000c036

100437bc <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
100437bc:	b580      	push	{r7, lr}
100437be:	b082      	sub	sp, #8
100437c0:	af00      	add	r7, sp, #0
100437c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
100437c4:	687b      	ldr	r3, [r7, #4]
100437c6:	69db      	ldr	r3, [r3, #28]
100437c8:	2220      	movs	r2, #32
100437ca:	4013      	ands	r3, r2
100437cc:	2b20      	cmp	r3, #32
100437ce:	d101      	bne.n	100437d4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
100437d0:	2301      	movs	r3, #1
100437d2:	e000      	b.n	100437d6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
100437d4:	2300      	movs	r3, #0
}
100437d6:	0018      	movs	r0, r3
100437d8:	46bd      	mov	sp, r7
100437da:	b002      	add	sp, #8
100437dc:	bd80      	pop	{r7, pc}

100437de <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
100437de:	b580      	push	{r7, lr}
100437e0:	b082      	sub	sp, #8
100437e2:	af00      	add	r7, sp, #0
100437e4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
100437e6:	687b      	ldr	r3, [r7, #4]
100437e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100437ea:	b2db      	uxtb	r3, r3
}
100437ec:	0018      	movs	r0, r3
100437ee:	46bd      	mov	sp, r7
100437f0:	b002      	add	sp, #8
100437f2:	bd80      	pop	{r7, pc}

100437f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100437f4:	b580      	push	{r7, lr}
100437f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100437f8:	e7fe      	b.n	100437f8 <NMI_Handler+0x4>

100437fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100437fa:	b580      	push	{r7, lr}
100437fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100437fe:	e7fe      	b.n	100437fe <HardFault_Handler+0x4>

10043800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10043800:	b580      	push	{r7, lr}
10043802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10043804:	46c0      	nop			@ (mov r8, r8)
10043806:	46bd      	mov	sp, r7
10043808:	bd80      	pop	{r7, pc}

1004380a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1004380a:	b580      	push	{r7, lr}
1004380c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1004380e:	46c0      	nop			@ (mov r8, r8)
10043810:	46bd      	mov	sp, r7
10043812:	bd80      	pop	{r7, pc}

10043814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10043814:	b580      	push	{r7, lr}
10043816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10043818:	f008 fbbc 	bl	1004bf94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1004381c:	46c0      	nop			@ (mov r8, r8)
1004381e:	46bd      	mov	sp, r7
10043820:	bd80      	pop	{r7, pc}
	...

10043824 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
10043824:	b580      	push	{r7, lr}
10043826:	b082      	sub	sp, #8
10043828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uint8_t read_data; 
  
  /* If the RX FIFO is Not Empty */
  if(LL_USART_IsActiveFlag_RXNE(USART1) == 1) {
1004382a:	4b0c      	ldr	r3, [pc, #48]	@ (1004385c <USART1_IRQHandler+0x38>)
1004382c:	0018      	movs	r0, r3
1004382e:	f7ff ffc5 	bl	100437bc <LL_USART_IsActiveFlag_RXNE_RXFNE>
10043832:	0003      	movs	r3, r0
10043834:	2b01      	cmp	r3, #1
10043836:	d10c      	bne.n	10043852 <USART1_IRQHandler+0x2e>
    /* Read a byte from the RX FIFO */
    read_data = LL_USART_ReceiveData8(USART1);
10043838:	4b08      	ldr	r3, [pc, #32]	@ (1004385c <USART1_IRQHandler+0x38>)
1004383a:	0018      	movs	r0, r3
1004383c:	f7ff ffcf 	bl	100437de <LL_USART_ReceiveData8>
10043840:	0003      	movs	r3, r0
10043842:	001a      	movs	r2, r3
10043844:	1dfb      	adds	r3, r7, #7
10043846:	701a      	strb	r2, [r3, #0]
    
    /* Send the data received to the user RX callback */
    UartRxCpltCallback(&read_data, 1);
10043848:	1dfb      	adds	r3, r7, #7
1004384a:	2101      	movs	r1, #1
1004384c:	0018      	movs	r0, r3
1004384e:	f7ff fa67 	bl	10042d20 <UartRxCpltCallback>
  }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
10043852:	46c0      	nop			@ (mov r8, r8)
10043854:	46bd      	mov	sp, r7
10043856:	b002      	add	sp, #8
10043858:	bd80      	pop	{r7, pc}
1004385a:	46c0      	nop			@ (mov r8, r8)
1004385c:	41004000 	.word	0x41004000

10043860 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
10043860:	b580      	push	{r7, lr}
10043862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
10043864:	4b03      	ldr	r3, [pc, #12]	@ (10043874 <LPUART1_IRQHandler+0x14>)
10043866:	0018      	movs	r0, r3
10043868:	f00d f80c 	bl	10050884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
1004386c:	46c0      	nop			@ (mov r8, r8)
1004386e:	46bd      	mov	sp, r7
10043870:	bd80      	pop	{r7, pc}
10043872:	46c0      	nop			@ (mov r8, r8)
10043874:	20000314 	.word	0x20000314

10043878 <PKA_IRQHandler>:

/**
  * @brief This function handles PKA global interrupt.
  */
void PKA_IRQHandler(void)
{
10043878:	b580      	push	{r7, lr}
1004387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PKA_IRQn 0 */

  /* USER CODE END PKA_IRQn 0 */
  HAL_PKA_IRQHandler(&hpka);
1004387c:	4b03      	ldr	r3, [pc, #12]	@ (1004388c <PKA_IRQHandler+0x14>)
1004387e:	0018      	movs	r0, r3
10043880:	f009 f9e4 	bl	1004cc4c <HAL_PKA_IRQHandler>
  /* USER CODE BEGIN PKA_IRQn 1 */

  /* USER CODE END PKA_IRQn 1 */
}
10043884:	46c0      	nop			@ (mov r8, r8)
10043886:	46bd      	mov	sp, r7
10043888:	bd80      	pop	{r7, pc}
1004388a:	46c0      	nop			@ (mov r8, r8)
1004388c:	200003e0 	.word	0x200003e0

10043890 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10043890:	b580      	push	{r7, lr}
10043892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
10043894:	f00b ffa2 	bl	1004f7dc <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10043898:	46c0      	nop			@ (mov r8, r8)
1004389a:	46bd      	mov	sp, r7
1004389c:	bd80      	pop	{r7, pc}

1004389e <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
1004389e:	b580      	push	{r7, lr}
100438a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
100438a2:	f00b ffa4 	bl	1004f7ee <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
100438a6:	46c0      	nop			@ (mov r8, r8)
100438a8:	46bd      	mov	sp, r7
100438aa:	bd80      	pop	{r7, pc}

100438ac <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
100438ac:	b580      	push	{r7, lr}
100438ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
100438b0:	f00a fa06 	bl	1004dcc0 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
100438b4:	46c0      	nop			@ (mov r8, r8)
100438b6:	46bd      	mov	sp, r7
100438b8:	bd80      	pop	{r7, pc}

100438ba <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
100438ba:	b580      	push	{r7, lr}
100438bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
100438be:	f00a fa20 	bl	1004dd02 <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
100438c2:	46c0      	nop			@ (mov r8, r8)
100438c4:	46bd      	mov	sp, r7
100438c6:	bd80      	pop	{r7, pc}

100438c8 <GPIOA_IRQHandler>:

/* USER CODE BEGIN 1 */
void GPIOA_IRQHandler(void)
{
100438c8:	b580      	push	{r7, lr}
100438ca:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(B1_GPIO_PORT, B1_PIN);
100438cc:	2390      	movs	r3, #144	@ 0x90
100438ce:	05db      	lsls	r3, r3, #23
100438d0:	2101      	movs	r1, #1
100438d2:	0018      	movs	r0, r3
100438d4:	f007 fff6 	bl	1004b8c4 <BSP_PB_IRQHandler>
}
100438d8:	46c0      	nop			@ (mov r8, r8)
100438da:	46bd      	mov	sp, r7
100438dc:	bd80      	pop	{r7, pc}
	...

100438e0 <GPIOB_IRQHandler>:

void GPIOB_IRQHandler(void)
{
100438e0:	b580      	push	{r7, lr}
100438e2:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(B2_GPIO_PORT, B2_PIN);
100438e4:	4b07      	ldr	r3, [pc, #28]	@ (10043904 <GPIOB_IRQHandler+0x24>)
100438e6:	2120      	movs	r1, #32
100438e8:	0018      	movs	r0, r3
100438ea:	f007 ffeb 	bl	1004b8c4 <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(B3_GPIO_PORT, B3_PIN);
100438ee:	2380      	movs	r3, #128	@ 0x80
100438f0:	01db      	lsls	r3, r3, #7
100438f2:	4a04      	ldr	r2, [pc, #16]	@ (10043904 <GPIOB_IRQHandler+0x24>)
100438f4:	0019      	movs	r1, r3
100438f6:	0010      	movs	r0, r2
100438f8:	f007 ffe4 	bl	1004b8c4 <BSP_PB_IRQHandler>
}
100438fc:	46c0      	nop			@ (mov r8, r8)
100438fe:	46bd      	mov	sp, r7
10043900:	bd80      	pop	{r7, pc}
10043902:	46c0      	nop			@ (mov r8, r8)
10043904:	48100000 	.word	0x48100000

10043908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
10043908:	b580      	push	{r7, lr}
1004390a:	af00      	add	r7, sp, #0
  return 1;
1004390c:	2301      	movs	r3, #1
}
1004390e:	0018      	movs	r0, r3
10043910:	46bd      	mov	sp, r7
10043912:	bd80      	pop	{r7, pc}

10043914 <_kill>:

int _kill(int pid, int sig)
{
10043914:	b580      	push	{r7, lr}
10043916:	b082      	sub	sp, #8
10043918:	af00      	add	r7, sp, #0
1004391a:	6078      	str	r0, [r7, #4]
1004391c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
1004391e:	f024 f85b 	bl	100679d8 <__errno>
10043922:	0003      	movs	r3, r0
10043924:	2216      	movs	r2, #22
10043926:	601a      	str	r2, [r3, #0]
  return -1;
10043928:	2301      	movs	r3, #1
1004392a:	425b      	negs	r3, r3
}
1004392c:	0018      	movs	r0, r3
1004392e:	46bd      	mov	sp, r7
10043930:	b002      	add	sp, #8
10043932:	bd80      	pop	{r7, pc}

10043934 <_exit>:

void _exit (int status)
{
10043934:	b580      	push	{r7, lr}
10043936:	b082      	sub	sp, #8
10043938:	af00      	add	r7, sp, #0
1004393a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
1004393c:	2301      	movs	r3, #1
1004393e:	425a      	negs	r2, r3
10043940:	687b      	ldr	r3, [r7, #4]
10043942:	0011      	movs	r1, r2
10043944:	0018      	movs	r0, r3
10043946:	f7ff ffe5 	bl	10043914 <_kill>
  while (1) {}    /* Make sure we hang here */
1004394a:	e7fe      	b.n	1004394a <_exit+0x16>

1004394c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
1004394c:	b580      	push	{r7, lr}
1004394e:	b086      	sub	sp, #24
10043950:	af00      	add	r7, sp, #0
10043952:	60f8      	str	r0, [r7, #12]
10043954:	60b9      	str	r1, [r7, #8]
10043956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10043958:	2300      	movs	r3, #0
1004395a:	617b      	str	r3, [r7, #20]
1004395c:	e00a      	b.n	10043974 <_read+0x28>
  {
    *ptr++ = __io_getchar();
1004395e:	e000      	b.n	10043962 <_read+0x16>
10043960:	bf00      	nop
10043962:	0001      	movs	r1, r0
10043964:	68bb      	ldr	r3, [r7, #8]
10043966:	1c5a      	adds	r2, r3, #1
10043968:	60ba      	str	r2, [r7, #8]
1004396a:	b2ca      	uxtb	r2, r1
1004396c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004396e:	697b      	ldr	r3, [r7, #20]
10043970:	3301      	adds	r3, #1
10043972:	617b      	str	r3, [r7, #20]
10043974:	697a      	ldr	r2, [r7, #20]
10043976:	687b      	ldr	r3, [r7, #4]
10043978:	429a      	cmp	r2, r3
1004397a:	dbf0      	blt.n	1004395e <_read+0x12>
  }

  return len;
1004397c:	687b      	ldr	r3, [r7, #4]
}
1004397e:	0018      	movs	r0, r3
10043980:	46bd      	mov	sp, r7
10043982:	b006      	add	sp, #24
10043984:	bd80      	pop	{r7, pc}

10043986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10043986:	b580      	push	{r7, lr}
10043988:	b086      	sub	sp, #24
1004398a:	af00      	add	r7, sp, #0
1004398c:	60f8      	str	r0, [r7, #12]
1004398e:	60b9      	str	r1, [r7, #8]
10043990:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10043992:	2300      	movs	r3, #0
10043994:	617b      	str	r3, [r7, #20]
10043996:	e009      	b.n	100439ac <_write+0x26>
  {
    __io_putchar(*ptr++);
10043998:	68bb      	ldr	r3, [r7, #8]
1004399a:	1c5a      	adds	r2, r3, #1
1004399c:	60ba      	str	r2, [r7, #8]
1004399e:	781b      	ldrb	r3, [r3, #0]
100439a0:	0018      	movs	r0, r3
100439a2:	f008 f817 	bl	1004b9d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100439a6:	697b      	ldr	r3, [r7, #20]
100439a8:	3301      	adds	r3, #1
100439aa:	617b      	str	r3, [r7, #20]
100439ac:	697a      	ldr	r2, [r7, #20]
100439ae:	687b      	ldr	r3, [r7, #4]
100439b0:	429a      	cmp	r2, r3
100439b2:	dbf1      	blt.n	10043998 <_write+0x12>
  }
  return len;
100439b4:	687b      	ldr	r3, [r7, #4]
}
100439b6:	0018      	movs	r0, r3
100439b8:	46bd      	mov	sp, r7
100439ba:	b006      	add	sp, #24
100439bc:	bd80      	pop	{r7, pc}

100439be <_close>:

int _close(int file)
{
100439be:	b580      	push	{r7, lr}
100439c0:	b082      	sub	sp, #8
100439c2:	af00      	add	r7, sp, #0
100439c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
100439c6:	2301      	movs	r3, #1
100439c8:	425b      	negs	r3, r3
}
100439ca:	0018      	movs	r0, r3
100439cc:	46bd      	mov	sp, r7
100439ce:	b002      	add	sp, #8
100439d0:	bd80      	pop	{r7, pc}

100439d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
100439d2:	b580      	push	{r7, lr}
100439d4:	b082      	sub	sp, #8
100439d6:	af00      	add	r7, sp, #0
100439d8:	6078      	str	r0, [r7, #4]
100439da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
100439dc:	683b      	ldr	r3, [r7, #0]
100439de:	2280      	movs	r2, #128	@ 0x80
100439e0:	0192      	lsls	r2, r2, #6
100439e2:	605a      	str	r2, [r3, #4]
  return 0;
100439e4:	2300      	movs	r3, #0
}
100439e6:	0018      	movs	r0, r3
100439e8:	46bd      	mov	sp, r7
100439ea:	b002      	add	sp, #8
100439ec:	bd80      	pop	{r7, pc}

100439ee <_isatty>:

int _isatty(int file)
{
100439ee:	b580      	push	{r7, lr}
100439f0:	b082      	sub	sp, #8
100439f2:	af00      	add	r7, sp, #0
100439f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
100439f6:	2301      	movs	r3, #1
}
100439f8:	0018      	movs	r0, r3
100439fa:	46bd      	mov	sp, r7
100439fc:	b002      	add	sp, #8
100439fe:	bd80      	pop	{r7, pc}

10043a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10043a00:	b580      	push	{r7, lr}
10043a02:	b084      	sub	sp, #16
10043a04:	af00      	add	r7, sp, #0
10043a06:	60f8      	str	r0, [r7, #12]
10043a08:	60b9      	str	r1, [r7, #8]
10043a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10043a0c:	2300      	movs	r3, #0
}
10043a0e:	0018      	movs	r0, r3
10043a10:	46bd      	mov	sp, r7
10043a12:	b004      	add	sp, #16
10043a14:	bd80      	pop	{r7, pc}
	...

10043a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10043a18:	b580      	push	{r7, lr}
10043a1a:	b086      	sub	sp, #24
10043a1c:	af00      	add	r7, sp, #0
10043a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10043a20:	4a14      	ldr	r2, [pc, #80]	@ (10043a74 <_sbrk+0x5c>)
10043a22:	4b15      	ldr	r3, [pc, #84]	@ (10043a78 <_sbrk+0x60>)
10043a24:	1ad3      	subs	r3, r2, r3
10043a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10043a28:	697b      	ldr	r3, [r7, #20]
10043a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10043a2c:	4b13      	ldr	r3, [pc, #76]	@ (10043a7c <_sbrk+0x64>)
10043a2e:	681b      	ldr	r3, [r3, #0]
10043a30:	2b00      	cmp	r3, #0
10043a32:	d102      	bne.n	10043a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10043a34:	4b11      	ldr	r3, [pc, #68]	@ (10043a7c <_sbrk+0x64>)
10043a36:	4a12      	ldr	r2, [pc, #72]	@ (10043a80 <_sbrk+0x68>)
10043a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10043a3a:	4b10      	ldr	r3, [pc, #64]	@ (10043a7c <_sbrk+0x64>)
10043a3c:	681a      	ldr	r2, [r3, #0]
10043a3e:	687b      	ldr	r3, [r7, #4]
10043a40:	18d3      	adds	r3, r2, r3
10043a42:	693a      	ldr	r2, [r7, #16]
10043a44:	429a      	cmp	r2, r3
10043a46:	d207      	bcs.n	10043a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
10043a48:	f023 ffc6 	bl	100679d8 <__errno>
10043a4c:	0003      	movs	r3, r0
10043a4e:	220c      	movs	r2, #12
10043a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10043a52:	2301      	movs	r3, #1
10043a54:	425b      	negs	r3, r3
10043a56:	e009      	b.n	10043a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10043a58:	4b08      	ldr	r3, [pc, #32]	@ (10043a7c <_sbrk+0x64>)
10043a5a:	681b      	ldr	r3, [r3, #0]
10043a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10043a5e:	4b07      	ldr	r3, [pc, #28]	@ (10043a7c <_sbrk+0x64>)
10043a60:	681a      	ldr	r2, [r3, #0]
10043a62:	687b      	ldr	r3, [r7, #4]
10043a64:	18d2      	adds	r2, r2, r3
10043a66:	4b05      	ldr	r3, [pc, #20]	@ (10043a7c <_sbrk+0x64>)
10043a68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
10043a6a:	68fb      	ldr	r3, [r7, #12]
}
10043a6c:	0018      	movs	r0, r3
10043a6e:	46bd      	mov	sp, r7
10043a70:	b006      	add	sp, #24
10043a72:	bd80      	pop	{r7, pc}
10043a74:	20010000 	.word	0x20010000
10043a78:	00000c00 	.word	0x00000c00
10043a7c:	200003ec 	.word	0x200003ec
10043a80:	20003b00 	.word	0x20003b00

10043a84 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10043a84:	b580      	push	{r7, lr}
10043a86:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10043a88:	f3bf 8f4f 	dsb	sy
}
10043a8c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10043a8e:	4b04      	ldr	r3, [pc, #16]	@ (10043aa0 <__NVIC_SystemReset+0x1c>)
10043a90:	4a04      	ldr	r2, [pc, #16]	@ (10043aa4 <__NVIC_SystemReset+0x20>)
10043a92:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10043a94:	f3bf 8f4f 	dsb	sy
}
10043a98:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10043a9a:	46c0      	nop			@ (mov r8, r8)
10043a9c:	e7fd      	b.n	10043a9a <__NVIC_SystemReset+0x16>
10043a9e:	46c0      	nop			@ (mov r8, r8)
10043aa0:	e000ed00 	.word	0xe000ed00
10043aa4:	05fa0004 	.word	0x05fa0004

10043aa8 <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
10043aa8:	b580      	push	{r7, lr}
10043aaa:	af00      	add	r7, sp, #0
  BLENVM_Init();
10043aac:	f002 f8b4 	bl	10045c18 <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
10043ab0:	f006 fe06 	bl	1004a6c0 <PKAMGR_Init>
10043ab4:	0003      	movs	r3, r0
10043ab6:	3301      	adds	r3, #1
10043ab8:	d101      	bne.n	10043abe <ModulesInit+0x16>
  {
    Error_Handler();
10043aba:	f7ff fc96 	bl	100433ea <Error_Handler>
  }
}
10043abe:	46c0      	nop			@ (mov r8, r8)
10043ac0:	46bd      	mov	sp, r7
10043ac2:	bd80      	pop	{r7, pc}

10043ac4 <BLE_Init>:

void BLE_Init(void)
{
10043ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
10043ac6:	b099      	sub	sp, #100	@ 0x64
10043ac8:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
10043aca:	234f      	movs	r3, #79	@ 0x4f
10043acc:	18fb      	adds	r3, r7, r3
10043ace:	2200      	movs	r2, #0
10043ad0:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint16_t gap_dev_name_char_handle;
  uint16_t gap_appearance_char_handle;
  uint16_t gap_periph_pref_conn_param_char_handle;
  uint8_t bd_address[6] = {0};
10043ad2:	233c      	movs	r3, #60	@ 0x3c
10043ad4:	18fb      	adds	r3, r7, r3
10043ad6:	0018      	movs	r0, r3
10043ad8:	2306      	movs	r3, #6
10043ada:	001a      	movs	r2, r3
10043adc:	2100      	movs	r1, #0
10043ade:	f023 ff21 	bl	10067924 <memset>
  uint8_t bd_address_len= 6;
10043ae2:	233b      	movs	r3, #59	@ 0x3b
10043ae4:	18fb      	adds	r3, r7, r3
10043ae6:	2206      	movs	r2, #6
10043ae8:	701a      	strb	r2, [r3, #0]
  uint16_t appearance = CFG_GAP_APPEARANCE;
10043aea:	2338      	movs	r3, #56	@ 0x38
10043aec:	18fb      	adds	r3, r7, r3
10043aee:	2200      	movs	r2, #0
10043af0:	801a      	strh	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
10043af2:	1d3a      	adds	r2, r7, #4
10043af4:	4bac      	ldr	r3, [pc, #688]	@ (10043da8 <BLE_Init+0x2e4>)
10043af6:	0010      	movs	r0, r2
10043af8:	0019      	movs	r1, r3
10043afa:	2334      	movs	r3, #52	@ 0x34
10043afc:	001a      	movs	r2, r3
10043afe:	f023 ff88 	bl	10067a12 <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
10043b02:	254e      	movs	r5, #78	@ 0x4e
10043b04:	197c      	adds	r4, r7, r5
10043b06:	1d3b      	adds	r3, r7, #4
10043b08:	0018      	movs	r0, r3
10043b0a:	f00f fc61 	bl	100533d0 <BLE_STACK_Init>
10043b0e:	0003      	movs	r3, r0
10043b10:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
10043b12:	197b      	adds	r3, r7, r5
10043b14:	781b      	ldrb	r3, [r3, #0]
10043b16:	2b00      	cmp	r3, #0
10043b18:	d008      	beq.n	10043b2c <BLE_Init+0x68>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
10043b1a:	197b      	adds	r3, r7, r5
10043b1c:	781a      	ldrb	r2, [r3, #0]
10043b1e:	4ba3      	ldr	r3, [pc, #652]	@ (10043dac <BLE_Init+0x2e8>)
10043b20:	0011      	movs	r1, r2
10043b22:	0018      	movs	r0, r3
10043b24:	f023 fcb2 	bl	1006748c <iprintf>
    Error_Handler();
10043b28:	f7ff fc5f 	bl	100433ea <Error_Handler>
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
10043b2c:	254e      	movs	r5, #78	@ 0x4e
10043b2e:	197c      	adds	r4, r7, r5
10043b30:	2118      	movs	r1, #24
10043b32:	2000      	movs	r0, #0
10043b34:	f00f f91e 	bl	10052d74 <aci_hal_set_tx_power_level>
10043b38:	0003      	movs	r3, r0
10043b3a:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10043b3c:	002a      	movs	r2, r5
10043b3e:	18bb      	adds	r3, r7, r2
10043b40:	781b      	ldrb	r3, [r3, #0]
10043b42:	2b00      	cmp	r3, #0
10043b44:	d007      	beq.n	10043b56 <BLE_Init+0x92>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%02X\n", ret);
10043b46:	18bb      	adds	r3, r7, r2
10043b48:	781a      	ldrb	r2, [r3, #0]
10043b4a:	4b99      	ldr	r3, [pc, #612]	@ (10043db0 <BLE_Init+0x2ec>)
10043b4c:	0011      	movs	r1, r2
10043b4e:	0018      	movs	r0, r3
10043b50:	f023 fc9c 	bl	1006748c <iprintf>
10043b54:	e003      	b.n	10043b5e <BLE_Init+0x9a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
10043b56:	4b97      	ldr	r3, [pc, #604]	@ (10043db4 <BLE_Init+0x2f0>)
10043b58:	0018      	movs	r0, r3
10043b5a:	f023 fd07 	bl	1006756c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
10043b5e:	254e      	movs	r5, #78	@ 0x4e
10043b60:	197c      	adds	r4, r7, r5
10043b62:	234a      	movs	r3, #74	@ 0x4a
10043b64:	18fb      	adds	r3, r7, r3
10043b66:	0019      	movs	r1, r3
10043b68:	2001      	movs	r0, #1
10043b6a:	f006 ff9d 	bl	1004aaa8 <aci_gatt_srv_profile_init>
10043b6e:	0003      	movs	r3, r0
10043b70:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10043b72:	197b      	adds	r3, r7, r5
10043b74:	781b      	ldrb	r3, [r3, #0]
10043b76:	2b00      	cmp	r3, #0
10043b78:	d007      	beq.n	10043b8a <BLE_Init+0xc6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_srv_profile_init command, result: 0x%02X\n", ret);
10043b7a:	197b      	adds	r3, r7, r5
10043b7c:	781a      	ldrb	r2, [r3, #0]
10043b7e:	4b8e      	ldr	r3, [pc, #568]	@ (10043db8 <BLE_Init+0x2f4>)
10043b80:	0011      	movs	r1, r2
10043b82:	0018      	movs	r0, r3
10043b84:	f023 fc82 	bl	1006748c <iprintf>
10043b88:	e003      	b.n	10043b92 <BLE_Init+0xce>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_profile_init command\n");
10043b8a:	4b8c      	ldr	r3, [pc, #560]	@ (10043dbc <BLE_Init+0x2f8>)
10043b8c:	0018      	movs	r0, r3
10043b8e:	f023 fced 	bl	1006756c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
10043b92:	214d      	movs	r1, #77	@ 0x4d
10043b94:	187b      	adds	r3, r7, r1
10043b96:	2200      	movs	r2, #0
10043b98:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
10043b9a:	187b      	adds	r3, r7, r1
10043b9c:	187a      	adds	r2, r7, r1
10043b9e:	7812      	ldrb	r2, [r2, #0]
10043ba0:	2101      	movs	r1, #1
10043ba2:	430a      	orrs	r2, r1
10043ba4:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
10043ba6:	254e      	movs	r5, #78	@ 0x4e
10043ba8:	197c      	adds	r4, r7, r5
10043baa:	234f      	movs	r3, #79	@ 0x4f
10043bac:	18fb      	adds	r3, r7, r3
10043bae:	781b      	ldrb	r3, [r3, #0]
10043bb0:	2101      	movs	r1, #1
10043bb2:	0018      	movs	r0, r3
10043bb4:	f00e ff34 	bl	10052a20 <aci_gap_init>
10043bb8:	0003      	movs	r3, r0
10043bba:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10043bbc:	197b      	adds	r3, r7, r5
10043bbe:	781b      	ldrb	r3, [r3, #0]
10043bc0:	2b00      	cmp	r3, #0
10043bc2:	d007      	beq.n	10043bd4 <BLE_Init+0x110>
  {
    APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%02X\n", ret);
10043bc4:	197b      	adds	r3, r7, r5
10043bc6:	781a      	ldrb	r2, [r3, #0]
10043bc8:	4b7d      	ldr	r3, [pc, #500]	@ (10043dc0 <BLE_Init+0x2fc>)
10043bca:	0011      	movs	r1, r2
10043bcc:	0018      	movs	r0, r3
10043bce:	f023 fc5d 	bl	1006748c <iprintf>
10043bd2:	e003      	b.n	10043bdc <BLE_Init+0x118>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
10043bd4:	4b7b      	ldr	r3, [pc, #492]	@ (10043dc4 <BLE_Init+0x300>)
10043bd6:	0018      	movs	r0, r3
10043bd8:	f023 fcc8 	bl	1006756c <puts>
  }

  ret = aci_gap_profile_init(role, privacy_type,
10043bdc:	264e      	movs	r6, #78	@ 0x4e
10043bde:	19bc      	adds	r4, r7, r6
10043be0:	2346      	movs	r3, #70	@ 0x46
10043be2:	18fd      	adds	r5, r7, r3
10043be4:	2348      	movs	r3, #72	@ 0x48
10043be6:	18fa      	adds	r2, r7, r3
10043be8:	234f      	movs	r3, #79	@ 0x4f
10043bea:	18fb      	adds	r3, r7, r3
10043bec:	7819      	ldrb	r1, [r3, #0]
10043bee:	234d      	movs	r3, #77	@ 0x4d
10043bf0:	18fb      	adds	r3, r7, r3
10043bf2:	7818      	ldrb	r0, [r3, #0]
10043bf4:	2344      	movs	r3, #68	@ 0x44
10043bf6:	18fb      	adds	r3, r7, r3
10043bf8:	9300      	str	r3, [sp, #0]
10043bfa:	002b      	movs	r3, r5
10043bfc:	f006 fdee 	bl	1004a7dc <aci_gap_profile_init>
10043c00:	0003      	movs	r3, r0
10043c02:	7023      	strb	r3, [r4, #0]
                             &gap_dev_name_char_handle,
                             &gap_appearance_char_handle,
                             &gap_periph_pref_conn_param_char_handle);

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_STATIC_RANDOM_ADDR)
  ret = aci_hal_read_config_data(CONFIG_DATA_STORED_STATIC_RANDOM_ADDRESS,
10043c04:	19bc      	adds	r4, r7, r6
10043c06:	253c      	movs	r5, #60	@ 0x3c
10043c08:	197a      	adds	r2, r7, r5
10043c0a:	233b      	movs	r3, #59	@ 0x3b
10043c0c:	18fb      	adds	r3, r7, r3
10043c0e:	0019      	movs	r1, r3
10043c10:	2080      	movs	r0, #128	@ 0x80
10043c12:	f00f f8ab 	bl	10052d6c <aci_hal_read_config_data>
10043c16:	0003      	movs	r3, r0
10043c18:	7023      	strb	r3, [r4, #0]
                                 &bd_address_len, bd_address);
  APP_DBG_MSG("  Static Random Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
10043c1a:	0028      	movs	r0, r5
10043c1c:	183b      	adds	r3, r7, r0
10043c1e:	795b      	ldrb	r3, [r3, #5]
10043c20:	001c      	movs	r4, r3
10043c22:	183b      	adds	r3, r7, r0
10043c24:	791b      	ldrb	r3, [r3, #4]
10043c26:	001d      	movs	r5, r3
10043c28:	183b      	adds	r3, r7, r0
10043c2a:	78db      	ldrb	r3, [r3, #3]
10043c2c:	001e      	movs	r6, r3
10043c2e:	183b      	adds	r3, r7, r0
10043c30:	789b      	ldrb	r3, [r3, #2]
10043c32:	001a      	movs	r2, r3
10043c34:	183b      	adds	r3, r7, r0
10043c36:	785b      	ldrb	r3, [r3, #1]
10043c38:	0019      	movs	r1, r3
10043c3a:	183b      	adds	r3, r7, r0
10043c3c:	781b      	ldrb	r3, [r3, #0]
10043c3e:	4862      	ldr	r0, [pc, #392]	@ (10043dc8 <BLE_Init+0x304>)
10043c40:	9302      	str	r3, [sp, #8]
10043c42:	9101      	str	r1, [sp, #4]
10043c44:	9200      	str	r2, [sp, #0]
10043c46:	0033      	movs	r3, r6
10043c48:	002a      	movs	r2, r5
10043c4a:	0021      	movs	r1, r4
10043c4c:	f023 fc1e 	bl	1006748c <iprintf>
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  ret = Gap_profile_set_dev_name(0, sizeof(a_GapDeviceName), (uint8_t*)a_GapDeviceName);
10043c50:	264e      	movs	r6, #78	@ 0x4e
10043c52:	19bc      	adds	r4, r7, r6
10043c54:	4b5d      	ldr	r3, [pc, #372]	@ (10043dcc <BLE_Init+0x308>)
10043c56:	001a      	movs	r2, r3
10043c58:	2113      	movs	r1, #19
10043c5a:	2000      	movs	r0, #0
10043c5c:	f006 fe30 	bl	1004a8c0 <Gap_profile_set_dev_name>
10043c60:	0003      	movs	r3, r0
10043c62:	7023      	strb	r3, [r4, #0]

  if (ret != BLE_STATUS_SUCCESS)
10043c64:	19bb      	adds	r3, r7, r6
10043c66:	781b      	ldrb	r3, [r3, #0]
10043c68:	2b00      	cmp	r3, #0
10043c6a:	d007      	beq.n	10043c7c <BLE_Init+0x1b8>
  {
    APP_DBG_MSG("  Fail   : Gap_profile_set_dev_name - Device Name, result: 0x%02X\n", ret);
10043c6c:	19bb      	adds	r3, r7, r6
10043c6e:	781a      	ldrb	r2, [r3, #0]
10043c70:	4b57      	ldr	r3, [pc, #348]	@ (10043dd0 <BLE_Init+0x30c>)
10043c72:	0011      	movs	r1, r2
10043c74:	0018      	movs	r0, r3
10043c76:	f023 fc09 	bl	1006748c <iprintf>
10043c7a:	e003      	b.n	10043c84 <BLE_Init+0x1c0>
  }
  else
  {
    APP_DBG_MSG("  Success: Gap_profile_set_dev_name - Device Name\n");
10043c7c:	4b55      	ldr	r3, [pc, #340]	@ (10043dd4 <BLE_Init+0x310>)
10043c7e:	0018      	movs	r0, r3
10043c80:	f023 fc74 	bl	1006756c <puts>
  }

  ret = Gap_profile_set_appearance(0, sizeof(appearance), (uint8_t*)&appearance);
10043c84:	254e      	movs	r5, #78	@ 0x4e
10043c86:	197c      	adds	r4, r7, r5
10043c88:	2338      	movs	r3, #56	@ 0x38
10043c8a:	18fb      	adds	r3, r7, r3
10043c8c:	001a      	movs	r2, r3
10043c8e:	2102      	movs	r1, #2
10043c90:	2000      	movs	r0, #0
10043c92:	f006 fe3b 	bl	1004a90c <Gap_profile_set_appearance>
10043c96:	0003      	movs	r3, r0
10043c98:	7023      	strb	r3, [r4, #0]

  if (ret != BLE_STATUS_SUCCESS)
10043c9a:	197b      	adds	r3, r7, r5
10043c9c:	781b      	ldrb	r3, [r3, #0]
10043c9e:	2b00      	cmp	r3, #0
10043ca0:	d007      	beq.n	10043cb2 <BLE_Init+0x1ee>
  {
    APP_DBG_MSG("  Fail   : Gap_profile_set_appearance - Appearance, result: 0x%02X\n", ret);
10043ca2:	197b      	adds	r3, r7, r5
10043ca4:	781a      	ldrb	r2, [r3, #0]
10043ca6:	4b4c      	ldr	r3, [pc, #304]	@ (10043dd8 <BLE_Init+0x314>)
10043ca8:	0011      	movs	r1, r2
10043caa:	0018      	movs	r0, r3
10043cac:	f023 fbee 	bl	1006748c <iprintf>
10043cb0:	e003      	b.n	10043cba <BLE_Init+0x1f6>
  }
  else
  {
    APP_DBG_MSG("  Success: Gap_profile_set_appearance - Appearance\n");
10043cb2:	4b4a      	ldr	r3, [pc, #296]	@ (10043ddc <BLE_Init+0x318>)
10043cb4:	0018      	movs	r0, r3
10043cb6:	f023 fc59 	bl	1006756c <puts>
  }

  /**
   * Initialize IO capability
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
10043cba:	4b49      	ldr	r3, [pc, #292]	@ (10043de0 <BLE_Init+0x31c>)
10043cbc:	2201      	movs	r2, #1
10043cbe:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
10043cc0:	4b47      	ldr	r3, [pc, #284]	@ (10043de0 <BLE_Init+0x31c>)
10043cc2:	781b      	ldrb	r3, [r3, #0]
10043cc4:	254e      	movs	r5, #78	@ 0x4e
10043cc6:	197c      	adds	r4, r7, r5
10043cc8:	0018      	movs	r0, r3
10043cca:	f00e fab7 	bl	1005223c <aci_gap_set_io_capability>
10043cce:	0003      	movs	r3, r0
10043cd0:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10043cd2:	197b      	adds	r3, r7, r5
10043cd4:	781b      	ldrb	r3, [r3, #0]
10043cd6:	2b00      	cmp	r3, #0
10043cd8:	d007      	beq.n	10043cea <BLE_Init+0x226>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%02X\n", ret);
10043cda:	197b      	adds	r3, r7, r5
10043cdc:	781a      	ldrb	r2, [r3, #0]
10043cde:	4b41      	ldr	r3, [pc, #260]	@ (10043de4 <BLE_Init+0x320>)
10043ce0:	0011      	movs	r1, r2
10043ce2:	0018      	movs	r0, r3
10043ce4:	f023 fbd2 	bl	1006748c <iprintf>
10043ce8:	e003      	b.n	10043cf2 <BLE_Init+0x22e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
10043cea:	4b3f      	ldr	r3, [pc, #252]	@ (10043de8 <BLE_Init+0x324>)
10043cec:	0018      	movs	r0, r3
10043cee:	f023 fc3d 	bl	1006756c <puts>
  }

  /**
   * Initialize authentication
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
10043cf2:	4b3b      	ldr	r3, [pc, #236]	@ (10043de0 <BLE_Init+0x31c>)
10043cf4:	2201      	movs	r2, #1
10043cf6:	705a      	strb	r2, [r3, #1]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin  = CFG_ENCRYPTION_KEY_SIZE_MIN;
10043cf8:	4b39      	ldr	r3, [pc, #228]	@ (10043de0 <BLE_Init+0x31c>)
10043cfa:	2208      	movs	r2, #8
10043cfc:	70da      	strb	r2, [r3, #3]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
10043cfe:	4b38      	ldr	r3, [pc, #224]	@ (10043de0 <BLE_Init+0x31c>)
10043d00:	2210      	movs	r2, #16
10043d02:	711a      	strb	r2, [r3, #4]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode          = CFG_BONDING_MODE;
10043d04:	4b36      	ldr	r3, [pc, #216]	@ (10043de0 <BLE_Init+0x31c>)
10043d06:	2201      	movs	r2, #1
10043d08:	709a      	strb	r2, [r3, #2]

  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/
  fill_advData(&a_AdvData[0], sizeof(a_AdvData), bd_address);
10043d0a:	233c      	movs	r3, #60	@ 0x3c
10043d0c:	18fa      	adds	r2, r7, r3
10043d0e:	4b37      	ldr	r3, [pc, #220]	@ (10043dec <BLE_Init+0x328>)
10043d10:	211c      	movs	r1, #28
10043d12:	0018      	movs	r0, r3
10043d14:	f000 ff40 	bl	10044b98 <fill_advData>
  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/
  ret = aci_gap_set_security_requirements(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
10043d18:	4b31      	ldr	r3, [pc, #196]	@ (10043de0 <BLE_Init+0x31c>)
10043d1a:	7898      	ldrb	r0, [r3, #2]
10043d1c:	4b30      	ldr	r3, [pc, #192]	@ (10043de0 <BLE_Init+0x31c>)
10043d1e:	7859      	ldrb	r1, [r3, #1]
10043d20:	4b2f      	ldr	r3, [pc, #188]	@ (10043de0 <BLE_Init+0x31c>)
10043d22:	78db      	ldrb	r3, [r3, #3]
10043d24:	4a2e      	ldr	r2, [pc, #184]	@ (10043de0 <BLE_Init+0x31c>)
10043d26:	7912      	ldrb	r2, [r2, #4]
10043d28:	264e      	movs	r6, #78	@ 0x4e
10043d2a:	19bc      	adds	r4, r7, r6
10043d2c:	2500      	movs	r5, #0
10043d2e:	9502      	str	r5, [sp, #8]
10043d30:	9201      	str	r2, [sp, #4]
10043d32:	9300      	str	r3, [sp, #0]
10043d34:	2300      	movs	r3, #0
10043d36:	2201      	movs	r2, #1
10043d38:	f00e fa90 	bl	1005225c <aci_gap_set_security_requirements>
10043d3c:	0003      	movs	r3, r0
10043d3e:	7023      	strb	r3, [r4, #0]
                                               CFG_KEYPRESS_NOTIFICATION_SUPPORT,
                                               bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               GAP_PAIRING_RESP_NONE);

  if (ret != BLE_STATUS_SUCCESS)
10043d40:	19bb      	adds	r3, r7, r6
10043d42:	781b      	ldrb	r3, [r3, #0]
10043d44:	2b00      	cmp	r3, #0
10043d46:	d007      	beq.n	10043d58 <BLE_Init+0x294>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_security_requirements command, result: 0x%02X\n", ret);
10043d48:	19bb      	adds	r3, r7, r6
10043d4a:	781a      	ldrb	r2, [r3, #0]
10043d4c:	4b28      	ldr	r3, [pc, #160]	@ (10043df0 <BLE_Init+0x32c>)
10043d4e:	0011      	movs	r1, r2
10043d50:	0018      	movs	r0, r3
10043d52:	f023 fb9b 	bl	1006748c <iprintf>
10043d56:	e003      	b.n	10043d60 <BLE_Init+0x29c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_security_requirements command\n");
10043d58:	4b26      	ldr	r3, [pc, #152]	@ (10043df4 <BLE_Init+0x330>)
10043d5a:	0018      	movs	r0, r3
10043d5c:	f023 fc06 	bl	1006756c <puts>
  }

  /**
   * Initialize Filter Accept List
   */
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
10043d60:	4b1f      	ldr	r3, [pc, #124]	@ (10043de0 <BLE_Init+0x31c>)
10043d62:	789b      	ldrb	r3, [r3, #2]
10043d64:	2b00      	cmp	r3, #0
10043d66:	d017      	beq.n	10043d98 <BLE_Init+0x2d4>
  {
    ret = aci_gap_configure_filter_accept_and_resolving_list(0x01);
10043d68:	254e      	movs	r5, #78	@ 0x4e
10043d6a:	197c      	adds	r4, r7, r5
10043d6c:	2001      	movs	r0, #1
10043d6e:	f00e fe81 	bl	10052a74 <aci_gap_configure_filter_accept_and_resolving_list>
10043d72:	0003      	movs	r3, r0
10043d74:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
10043d76:	002a      	movs	r2, r5
10043d78:	18bb      	adds	r3, r7, r2
10043d7a:	781b      	ldrb	r3, [r3, #0]
10043d7c:	2b00      	cmp	r3, #0
10043d7e:	d007      	beq.n	10043d90 <BLE_Init+0x2cc>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_filter_accept_and_resolving_list command, result: 0x%02X\n", ret);
10043d80:	18bb      	adds	r3, r7, r2
10043d82:	781a      	ldrb	r2, [r3, #0]
10043d84:	4b1c      	ldr	r3, [pc, #112]	@ (10043df8 <BLE_Init+0x334>)
10043d86:	0011      	movs	r1, r2
10043d88:	0018      	movs	r0, r3
10043d8a:	f023 fb7f 	bl	1006748c <iprintf>
10043d8e:	e003      	b.n	10043d98 <BLE_Init+0x2d4>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_filter_accept_and_resolving_list command\n");
10043d90:	4b1a      	ldr	r3, [pc, #104]	@ (10043dfc <BLE_Init+0x338>)
10043d92:	0018      	movs	r0, r3
10043d94:	f023 fbea 	bl	1006756c <puts>
    }
  }
  APP_DBG_MSG("==>> End BLE_Init function\n");
10043d98:	4b19      	ldr	r3, [pc, #100]	@ (10043e00 <BLE_Init+0x33c>)
10043d9a:	0018      	movs	r0, r3
10043d9c:	f023 fbe6 	bl	1006756c <puts>

}
10043da0:	46c0      	nop			@ (mov r8, r8)
10043da2:	46bd      	mov	sp, r7
10043da4:	b015      	add	sp, #84	@ 0x54
10043da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043da8:	1006ba20 	.word	0x1006ba20
10043dac:	1006b5e8 	.word	0x1006b5e8
10043db0:	1006b60c 	.word	0x1006b60c
10043db4:	1006b64c 	.word	0x1006b64c
10043db8:	1006b67c 	.word	0x1006b67c
10043dbc:	1006b6bc 	.word	0x1006b6bc
10043dc0:	1006b6ec 	.word	0x1006b6ec
10043dc4:	1006b720 	.word	0x1006b720
10043dc8:	1006b740 	.word	0x1006b740
10043dcc:	1006c9d0 	.word	0x1006c9d0
10043dd0:	1006b784 	.word	0x1006b784
10043dd4:	1006b7c8 	.word	0x1006b7c8
10043dd8:	1006b7fc 	.word	0x1006b7fc
10043ddc:	1006b840 	.word	0x1006b840
10043de0:	200003f0 	.word	0x200003f0
10043de4:	1006b874 	.word	0x1006b874
10043de8:	1006b8b4 	.word	0x1006b8b4
10043dec:	20001318 	.word	0x20001318
10043df0:	1006b8e4 	.word	0x1006b8e4
10043df4:	1006b92c 	.word	0x1006b92c
10043df8:	1006b964 	.word	0x1006b964
10043dfc:	1006b9bc 	.word	0x1006b9bc
10043e00:	1006ba04 	.word	0x1006ba04

10043e04 <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
10043e04:	b580      	push	{r7, lr}
10043e06:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
10043e08:	2101      	movs	r1, #1
10043e0a:	2001      	movs	r0, #1
10043e0c:	f00e fd1a 	bl	10052844 <UTIL_SEQ_SetTask>
}
10043e10:	46c0      	nop			@ (mov r8, r8)
10043e12:	46bd      	mov	sp, r7
10043e14:	bd80      	pop	{r7, pc}

10043e16 <BLEStack_Process>:
static void BLEStack_Process(void)
{
10043e16:	b580      	push	{r7, lr}
10043e18:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
10043e1a:	2001      	movs	r0, #1
10043e1c:	f003 feed 	bl	10047bfa <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
10043e20:	f00f f9f1 	bl	10053206 <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
10043e24:	2001      	movs	r0, #1
10043e26:	f003 fef2 	bl	10047c0e <APP_DEBUG_SIGNAL_RESET>
}
10043e2a:	46c0      	nop			@ (mov r8, r8)
10043e2c:	46bd      	mov	sp, r7
10043e2e:	bd80      	pop	{r7, pc}

10043e30 <VTimer_Process>:

void VTimer_Process(void)
{
10043e30:	b580      	push	{r7, lr}
10043e32:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
10043e34:	f00a fa04 	bl	1004e240 <HAL_RADIO_TIMER_Tick>
}
10043e38:	46c0      	nop			@ (mov r8, r8)
10043e3a:	46bd      	mov	sp, r7
10043e3c:	bd80      	pop	{r7, pc}

10043e3e <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
10043e3e:	b580      	push	{r7, lr}
10043e40:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
10043e42:	2100      	movs	r1, #0
10043e44:	2002      	movs	r0, #2
10043e46:	f00e fcfd 	bl	10052844 <UTIL_SEQ_SetTask>
}
10043e4a:	46c0      	nop			@ (mov r8, r8)
10043e4c:	46bd      	mov	sp, r7
10043e4e:	bd80      	pop	{r7, pc}

10043e50 <NVM_Process>:
void NVM_Process(void)
{
10043e50:	b580      	push	{r7, lr}
10043e52:	af00      	add	r7, sp, #0
  NVMDB_Tick();
10043e54:	f006 fbba 	bl	1004a5cc <NVMDB_Tick>
}
10043e58:	46c0      	nop			@ (mov r8, r8)
10043e5a:	46bd      	mov	sp, r7
10043e5c:	bd80      	pop	{r7, pc}

10043e5e <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
10043e5e:	b580      	push	{r7, lr}
10043e60:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
10043e62:	2101      	movs	r1, #1
10043e64:	2004      	movs	r0, #4
10043e66:	f00e fced 	bl	10052844 <UTIL_SEQ_SetTask>
}
10043e6a:	46c0      	nop			@ (mov r8, r8)
10043e6c:	46bd      	mov	sp, r7
10043e6e:	bd80      	pop	{r7, pc}

10043e70 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10043e70:	b580      	push	{r7, lr}
10043e72:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
10043e74:	f7ff ffe3 	bl	10043e3e <VTimer_Process_Schedule>
}
10043e78:	46c0      	nop			@ (mov r8, r8)
10043e7a:	46bd      	mov	sp, r7
10043e7c:	bd80      	pop	{r7, pc}

10043e7e <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
10043e7e:	b580      	push	{r7, lr}
10043e80:	b082      	sub	sp, #8
10043e82:	af00      	add	r7, sp, #0
10043e84:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
10043e86:	687b      	ldr	r3, [r7, #4]
10043e88:	0018      	movs	r0, r3
10043e8a:	f01a f8ef 	bl	1005e06c <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
10043e8e:	f7ff ffd6 	bl	10043e3e <VTimer_Process_Schedule>
  NVM_Process_Schedule();
10043e92:	f7ff ffe4 	bl	10043e5e <NVM_Process_Schedule>
}
10043e96:	46c0      	nop			@ (mov r8, r8)
10043e98:	46bd      	mov	sp, r7
10043e9a:	b002      	add	sp, #8
10043e9c:	bd80      	pop	{r7, pc}

10043e9e <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
10043e9e:	b580      	push	{r7, lr}
10043ea0:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
10043ea2:	f7ff ffaf 	bl	10043e04 <BLEStack_Process_Schedule>
}
10043ea6:	46c0      	nop			@ (mov r8, r8)
10043ea8:	46bd      	mov	sp, r7
10043eaa:	bd80      	pop	{r7, pc}

10043eac <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
10043eac:	b590      	push	{r4, r7, lr}
10043eae:	b083      	sub	sp, #12
10043eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */
  tBleStatus ret;
  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
10043eb2:	4b31      	ldr	r3, [pc, #196]	@ (10043f78 <APP_BLE_Init+0xcc>)
10043eb4:	001a      	movs	r2, r3
10043eb6:	2100      	movs	r1, #0
10043eb8:	2001      	movs	r0, #1
10043eba:	f00e fc9f 	bl	100527fc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
10043ebe:	4b2f      	ldr	r3, [pc, #188]	@ (10043f7c <APP_BLE_Init+0xd0>)
10043ec0:	001a      	movs	r2, r3
10043ec2:	2100      	movs	r1, #0
10043ec4:	2002      	movs	r0, #2
10043ec6:	f00e fc99 	bl	100527fc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
10043eca:	4b2d      	ldr	r3, [pc, #180]	@ (10043f80 <APP_BLE_Init+0xd4>)
10043ecc:	001a      	movs	r2, r3
10043ece:	2100      	movs	r1, #0
10043ed0:	2004      	movs	r0, #4
10043ed2:	f00e fc93 	bl	100527fc <UTIL_SEQ_RegTask>
  ModulesInit();
10043ed6:	f7ff fde7 	bl	10043aa8 <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
10043eda:	f7ff fdf3 	bl	10043ac4 <BLE_Init>

  /**
  * Initialization of the BLE App Context
  */
  bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10043ede:	4b29      	ldr	r3, [pc, #164]	@ (10043f84 <APP_BLE_Init+0xd8>)
10043ee0:	2200      	movs	r2, #0
10043ee2:	739a      	strb	r2, [r3, #14]
  bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
10043ee4:	4b27      	ldr	r3, [pc, #156]	@ (10043f84 <APP_BLE_Init+0xd8>)
10043ee6:	2201      	movs	r2, #1
10043ee8:	4252      	negs	r2, r2
10043eea:	819a      	strh	r2, [r3, #12]

  /* From here, all initialization are BLE application specific */

  /* USER CODE BEGIN APP_BLE_Init_4 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
10043eec:	4b26      	ldr	r3, [pc, #152]	@ (10043f88 <APP_BLE_Init+0xdc>)
10043eee:	001a      	movs	r2, r3
10043ef0:	2100      	movs	r1, #0
10043ef2:	2040      	movs	r0, #64	@ 0x40
10043ef4:	f00e fc82 	bl	100527fc <UTIL_SEQ_RegTask>
  
  /* Create timer to handle the Advertising Stop */
  bleAppContext.Advertising_mgr_timer_Id.callback = Adv_Cancel_Req;    
10043ef8:	4b22      	ldr	r3, [pc, #136]	@ (10043f84 <APP_BLE_Init+0xd8>)
10043efa:	4a24      	ldr	r2, [pc, #144]	@ (10043f8c <APP_BLE_Init+0xe0>)
10043efc:	619a      	str	r2, [r3, #24]
  
  /* Create timer to handle the Led Switch OFF */
  bleAppContext.SwitchOffGPIO_timer_Id.callback = Switch_OFF_GPIO;
10043efe:	4b21      	ldr	r3, [pc, #132]	@ (10043f84 <APP_BLE_Init+0xd8>)
10043f00:	4a23      	ldr	r2, [pc, #140]	@ (10043f90 <APP_BLE_Init+0xe4>)
10043f02:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE END APP_BLE_Init_4 */

  /**
  * Initialize Services and Characteristics.
  */
  APP_DBG_MSG("\n");
10043f04:	200a      	movs	r0, #10
10043f06:	f023 fad1 	bl	100674ac <putchar>
  APP_DBG_MSG("Services and Characteristics creation\n");
10043f0a:	4b22      	ldr	r3, [pc, #136]	@ (10043f94 <APP_BLE_Init+0xe8>)
10043f0c:	0018      	movs	r0, r3
10043f0e:	f023 fb2d 	bl	1006756c <puts>
  P2P_SERVER_APP_Init();
10043f12:	f001 fdfb 	bl	10045b0c <P2P_SERVER_APP_Init>
  EM_APP_Init();
10043f16:	f001 fa1f 	bl	10045358 <EM_APP_Init>
  APP_DBG_MSG("End of Services and Characteristics creation\n");
10043f1a:	4b1f      	ldr	r3, [pc, #124]	@ (10043f98 <APP_BLE_Init+0xec>)
10043f1c:	0018      	movs	r0, r3
10043f1e:	f023 fb25 	bl	1006756c <puts>
  APP_DBG_MSG("\n");
10043f22:	200a      	movs	r0, #10
10043f24:	f023 fac2 	bl	100674ac <putchar>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  
  ret = aci_hal_set_radio_activity_mask(0x0006);
10043f28:	1dfc      	adds	r4, r7, #7
10043f2a:	2006      	movs	r0, #6
10043f2c:	f00e ff7a 	bl	10052e24 <aci_hal_set_radio_activity_mask>
10043f30:	0003      	movs	r3, r0
10043f32:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10043f34:	1dfb      	adds	r3, r7, #7
10043f36:	781b      	ldrb	r3, [r3, #0]
10043f38:	2b00      	cmp	r3, #0
10043f3a:	d007      	beq.n	10043f4c <APP_BLE_Init+0xa0>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%2X\n", ret);
10043f3c:	1dfb      	adds	r3, r7, #7
10043f3e:	781a      	ldrb	r2, [r3, #0]
10043f40:	4b16      	ldr	r3, [pc, #88]	@ (10043f9c <APP_BLE_Init+0xf0>)
10043f42:	0011      	movs	r1, r2
10043f44:	0018      	movs	r0, r3
10043f46:	f023 faa1 	bl	1006748c <iprintf>
10043f4a:	e003      	b.n	10043f54 <APP_BLE_Init+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
10043f4c:	4b14      	ldr	r3, [pc, #80]	@ (10043fa0 <APP_BLE_Init+0xf4>)
10043f4e:	0018      	movs	r0, r3
10043f50:	f023 fa9c 	bl	1006748c <iprintf>
  }
  
  /* Start to Advertise to accept a connection */
  APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10043f54:	2001      	movs	r0, #1
10043f56:	f000 fc8b 	bl	10044870 <APP_BLE_Procedure_Gap_Peripheral>
  
  /* Start a timer to stop advertising after a while */
  HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
10043f5a:	4a12      	ldr	r2, [pc, #72]	@ (10043fa4 <APP_BLE_Init+0xf8>)
10043f5c:	4b12      	ldr	r3, [pc, #72]	@ (10043fa8 <APP_BLE_Init+0xfc>)
10043f5e:	0011      	movs	r1, r2
10043f60:	0018      	movs	r0, r3
10043f62:	f00a fcc7 	bl	1004e8f4 <HAL_RADIO_TIMER_StartVirtualTimer>
  
  /* USER CODE END APP_BLE_Init_3 */

  /* USER CODE BEGIN APP_BLE_Init_2 */
  bleAppContext.connIntervalFlag = 0;
10043f66:	4b07      	ldr	r3, [pc, #28]	@ (10043f84 <APP_BLE_Init+0xd8>)
10043f68:	2240      	movs	r2, #64	@ 0x40
10043f6a:	2100      	movs	r1, #0
10043f6c:	5499      	strb	r1, [r3, r2]
  /* USER CODE END APP_BLE_Init_2 */

  return;
10043f6e:	46c0      	nop			@ (mov r8, r8)
}
10043f70:	46bd      	mov	sp, r7
10043f72:	b003      	add	sp, #12
10043f74:	bd90      	pop	{r4, r7, pc}
10043f76:	46c0      	nop			@ (mov r8, r8)
10043f78:	10043e17 	.word	0x10043e17
10043f7c:	10043e31 	.word	0x10043e31
10043f80:	10043e51 	.word	0x10043e51
10043f84:	200003f0 	.word	0x200003f0
10043f88:	10044b79 	.word	0x10044b79
10043f8c:	10044b3d 	.word	0x10044b3d
10043f90:	10044b61 	.word	0x10044b61
10043f94:	1006ba54 	.word	0x1006ba54
10043f98:	1006ba7c 	.word	0x1006ba7c
10043f9c:	1006baac 	.word	0x1006baac
10043fa0:	1006baf0 	.word	0x1006baf0
10043fa4:	0000ea60 	.word	0x0000ea60
10043fa8:	20000400 	.word	0x20000400

10043fac <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
10043fac:	b5f0      	push	{r4, r5, r6, r7, lr}
10043fae:	b099      	sub	sp, #100	@ 0x64
10043fb0:	af04      	add	r7, sp, #16
10043fb2:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_ERROR;
10043fb4:	234b      	movs	r3, #75	@ 0x4b
10043fb6:	18fb      	adds	r3, r7, r3
10043fb8:	2286      	movs	r2, #134	@ 0x86
10043fba:	701a      	strb	r2, [r3, #0]
  UNUSED(ret);
  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  if(hci_pckt->type != HCI_EVENT_PKT_TYPE && hci_pckt->type != HCI_EVENT_EXT_PKT_TYPE)
10043fbc:	687b      	ldr	r3, [r7, #4]
10043fbe:	781b      	ldrb	r3, [r3, #0]
10043fc0:	2b04      	cmp	r3, #4
10043fc2:	d004      	beq.n	10043fce <BLEEVT_App_Notification+0x22>
10043fc4:	687b      	ldr	r3, [r7, #4]
10043fc6:	781b      	ldrb	r3, [r3, #0]
10043fc8:	2b82      	cmp	r3, #130	@ 0x82
10043fca:	d000      	beq.n	10043fce <BLEEVT_App_Notification+0x22>
10043fcc:	e301      	b.n	100445d2 <BLEEVT_App_Notification+0x626>
  {
    /* Not an event */
    return;
  }

  p_event_pckt = (hci_event_pckt*)hci_pckt->data;
10043fce:	687b      	ldr	r3, [r7, #4]
10043fd0:	3301      	adds	r3, #1
10043fd2:	647b      	str	r3, [r7, #68]	@ 0x44

  if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
10043fd4:	687b      	ldr	r3, [r7, #4]
10043fd6:	781b      	ldrb	r3, [r3, #0]
10043fd8:	2b04      	cmp	r3, #4
10043fda:	d103      	bne.n	10043fe4 <BLEEVT_App_Notification+0x38>
    event_data = p_event_pckt->data;
10043fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10043fde:	3302      	adds	r3, #2
10043fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
10043fe2:	e005      	b.n	10043ff0 <BLEEVT_App_Notification+0x44>
  }
  else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
    hci_event_ext_pckt *p_event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
10043fe4:	687b      	ldr	r3, [r7, #4]
10043fe6:	3301      	adds	r3, #1
10043fe8:	643b      	str	r3, [r7, #64]	@ 0x40
    event_data = p_event_pckt->data;
10043fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10043fec:	3303      	adds	r3, #3
10043fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  switch (p_event_pckt->evt) /* evt field is at same offset in hci_event_pckt and hci_event_ext_pckt */
10043ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10043ff2:	781b      	ldrb	r3, [r3, #0]
10043ff4:	2bff      	cmp	r3, #255	@ 0xff
10043ff6:	d100      	bne.n	10043ffa <BLEEVT_App_Notification+0x4e>
10043ff8:	e19c      	b.n	10044334 <BLEEVT_App_Notification+0x388>
10043ffa:	dd00      	ble.n	10043ffe <BLEEVT_App_Notification+0x52>
10043ffc:	e2e0      	b.n	100445c0 <BLEEVT_App_Notification+0x614>
10043ffe:	2b3e      	cmp	r3, #62	@ 0x3e
10044000:	d057      	beq.n	100440b2 <BLEEVT_App_Notification+0x106>
10044002:	dd00      	ble.n	10044006 <BLEEVT_App_Notification+0x5a>
10044004:	e2dc      	b.n	100445c0 <BLEEVT_App_Notification+0x614>
10044006:	2b05      	cmp	r3, #5
10044008:	d003      	beq.n	10044012 <BLEEVT_App_Notification+0x66>
1004400a:	2b10      	cmp	r3, #16
1004400c:	d100      	bne.n	10044010 <BLEEVT_App_Notification+0x64>
1004400e:	e2ce      	b.n	100445ae <BLEEVT_App_Notification+0x602>
10044010:	e2d6      	b.n	100445c0 <BLEEVT_App_Notification+0x614>
  {
  case HCI_DISCONNECTION_COMPLETE_EVT_CODE:
    {
      hci_disconnection_complete_event_rp0 *p_disconnection_complete_event;
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
10044012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044014:	3302      	adds	r3, #2
10044016:	60bb      	str	r3, [r7, #8]

        /* USER CODE BEGIN EVT_DISCONN_COMPLETE_3 */

        /* USER CODE END EVT_DISCONN_COMPLETE_3 */

      if (p_disconnection_complete_event->Connection_Handle == bleAppContext.BleApplicationContext_legacy.connectionHandle)
10044018:	68bb      	ldr	r3, [r7, #8]
1004401a:	785a      	ldrb	r2, [r3, #1]
1004401c:	789b      	ldrb	r3, [r3, #2]
1004401e:	021b      	lsls	r3, r3, #8
10044020:	4313      	orrs	r3, r2
10044022:	b29a      	uxth	r2, r3
10044024:	4beb      	ldr	r3, [pc, #940]	@ (100443d4 <BLEEVT_App_Notification+0x428>)
10044026:	899b      	ldrh	r3, [r3, #12]
10044028:	429a      	cmp	r2, r3
1004402a:	d118      	bne.n	1004405e <BLEEVT_App_Notification+0xb2>
      {
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
1004402c:	4be9      	ldr	r3, [pc, #932]	@ (100443d4 <BLEEVT_App_Notification+0x428>)
1004402e:	2201      	movs	r2, #1
10044030:	4252      	negs	r2, r2
10044032:	819a      	strh	r2, [r3, #12]
        bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10044034:	4be7      	ldr	r3, [pc, #924]	@ (100443d4 <BLEEVT_App_Notification+0x428>)
10044036:	2200      	movs	r2, #0
10044038:	739a      	strb	r2, [r3, #14]
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
1004403a:	4be7      	ldr	r3, [pc, #924]	@ (100443d8 <BLEEVT_App_Notification+0x42c>)
1004403c:	0018      	movs	r0, r3
1004403e:	f023 fa95 	bl	1006756c <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%02X\n     - Reason:    0x%02X\n",
10044042:	68bb      	ldr	r3, [r7, #8]
10044044:	785a      	ldrb	r2, [r3, #1]
10044046:	789b      	ldrb	r3, [r3, #2]
10044048:	021b      	lsls	r3, r3, #8
1004404a:	4313      	orrs	r3, r2
1004404c:	b29b      	uxth	r3, r3
1004404e:	0019      	movs	r1, r3
10044050:	68bb      	ldr	r3, [r7, #8]
10044052:	78db      	ldrb	r3, [r3, #3]
10044054:	001a      	movs	r2, r3
10044056:	4be1      	ldr	r3, [pc, #900]	@ (100443dc <BLEEVT_App_Notification+0x430>)
10044058:	0018      	movs	r0, r3
1004405a:	f023 fa17 	bl	1006748c <iprintf>

        /* USER CODE BEGIN EVT_DISCONN_COMPLETE_2 */

        /* USER CODE END EVT_DISCONN_COMPLETE_2 */
      }
      gap_cmd_resp_release();
1004405e:	f000 fd5d 	bl	10044b1c <gap_cmd_resp_release>
      /* USER CODE BEGIN EVT_DISCONN_COMPLETE_1 */

      /* USER CODE END EVT_DISCONN_COMPLETE_1 */
      P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_DISCON_HANDLE_EVT;
10044062:	4bdf      	ldr	r3, [pc, #892]	@ (100443e0 <BLEEVT_App_Notification+0x434>)
10044064:	2201      	movs	r2, #1
10044066:	701a      	strb	r2, [r3, #0]
      P2P_SERVERHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
10044068:	68bb      	ldr	r3, [r7, #8]
1004406a:	785a      	ldrb	r2, [r3, #1]
1004406c:	789b      	ldrb	r3, [r3, #2]
1004406e:	021b      	lsls	r3, r3, #8
10044070:	4313      	orrs	r3, r2
10044072:	b29a      	uxth	r2, r3
10044074:	4bda      	ldr	r3, [pc, #872]	@ (100443e0 <BLEEVT_App_Notification+0x434>)
10044076:	805a      	strh	r2, [r3, #2]
      P2P_SERVER_APP_EvtRx(&P2P_SERVERHandleNotification);
10044078:	4bd9      	ldr	r3, [pc, #868]	@ (100443e0 <BLEEVT_App_Notification+0x434>)
1004407a:	0018      	movs	r0, r3
1004407c:	f001 fd28 	bl	10045ad0 <P2P_SERVER_APP_EvtRx>
      EMHandleNotification.EvtOpcode = EM_DISCON_HANDLE_EVT;
10044080:	4bd8      	ldr	r3, [pc, #864]	@ (100443e4 <BLEEVT_App_Notification+0x438>)
10044082:	2201      	movs	r2, #1
10044084:	701a      	strb	r2, [r3, #0]
      EMHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
10044086:	68bb      	ldr	r3, [r7, #8]
10044088:	785a      	ldrb	r2, [r3, #1]
1004408a:	789b      	ldrb	r3, [r3, #2]
1004408c:	021b      	lsls	r3, r3, #8
1004408e:	4313      	orrs	r3, r2
10044090:	b29a      	uxth	r2, r3
10044092:	4bd4      	ldr	r3, [pc, #848]	@ (100443e4 <BLEEVT_App_Notification+0x438>)
10044094:	805a      	strh	r2, [r3, #2]
      EM_APP_EvtRx(&EMHandleNotification);
10044096:	4bd3      	ldr	r3, [pc, #844]	@ (100443e4 <BLEEVT_App_Notification+0x438>)
10044098:	0018      	movs	r0, r3
1004409a:	f001 f941 	bl	10045320 <EM_APP_EvtRx>
      /* USER CODE BEGIN EVT_DISCONN_COMPLETE */
      APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
1004409e:	2001      	movs	r0, #1
100440a0:	f000 fbe6 	bl	10044870 <APP_BLE_Procedure_Gap_Peripheral>
      HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
100440a4:	4ad0      	ldr	r2, [pc, #832]	@ (100443e8 <BLEEVT_App_Notification+0x43c>)
100440a6:	4bd1      	ldr	r3, [pc, #836]	@ (100443ec <BLEEVT_App_Notification+0x440>)
100440a8:	0011      	movs	r1, r2
100440aa:	0018      	movs	r0, r3
100440ac:	f00a fc22 	bl	1004e8f4 <HAL_RADIO_TIMER_StartVirtualTimer>
      /* USER CODE END EVT_DISCONN_COMPLETE */
    }
    break;
100440b0:	e292      	b.n	100445d8 <BLEEVT_App_Notification+0x62c>

  case HCI_LE_META_EVT_CODE:
    {
      p_meta_evt = (hci_le_meta_event*) p_event_pckt->data;
100440b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100440b4:	3302      	adds	r3, #2
100440b6:	623b      	str	r3, [r7, #32]
      /* USER CODE BEGIN EVT_LE_META_EVENT */

      /* USER CODE END EVT_LE_META_EVENT */
      switch (p_meta_evt->subevent)
100440b8:	6a3b      	ldr	r3, [r7, #32]
100440ba:	781b      	ldrb	r3, [r3, #0]
100440bc:	2b0c      	cmp	r3, #12
100440be:	d100      	bne.n	100440c2 <BLEEVT_App_Notification+0x116>
100440c0:	e0d0      	b.n	10044264 <BLEEVT_App_Notification+0x2b8>
100440c2:	dd00      	ble.n	100440c6 <BLEEVT_App_Notification+0x11a>
100440c4:	e12c      	b.n	10044320 <BLEEVT_App_Notification+0x374>
100440c6:	2b0a      	cmp	r3, #10
100440c8:	d100      	bne.n	100440cc <BLEEVT_App_Notification+0x120>
100440ca:	e0d1      	b.n	10044270 <BLEEVT_App_Notification+0x2c4>
100440cc:	dd00      	ble.n	100440d0 <BLEEVT_App_Notification+0x124>
100440ce:	e127      	b.n	10044320 <BLEEVT_App_Notification+0x374>
100440d0:	2b01      	cmp	r3, #1
100440d2:	d100      	bne.n	100440d6 <BLEEVT_App_Notification+0x12a>
100440d4:	e0f8      	b.n	100442c8 <BLEEVT_App_Notification+0x31c>
100440d6:	2b03      	cmp	r3, #3
100440d8:	d000      	beq.n	100440dc <BLEEVT_App_Notification+0x130>
100440da:	e121      	b.n	10044320 <BLEEVT_App_Notification+0x374>
      {
      case HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE:
        {
          hci_le_connection_update_complete_event_rp0 *p_conn_update_complete;
          p_conn_update_complete = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
100440dc:	6a3b      	ldr	r3, [r7, #32]
100440de:	3301      	adds	r3, #1
100440e0:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
100440e2:	4bc3      	ldr	r3, [pc, #780]	@ (100443f0 <BLEEVT_App_Notification+0x444>)
100440e4:	0018      	movs	r0, r3
100440e6:	f023 fa41 	bl	1006756c <puts>
          APP_DBG_MSG("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
100440ea:	697b      	ldr	r3, [r7, #20]
100440ec:	78da      	ldrb	r2, [r3, #3]
100440ee:	791b      	ldrb	r3, [r3, #4]
100440f0:	021b      	lsls	r3, r3, #8
100440f2:	4313      	orrs	r3, r2
100440f4:	b29b      	uxth	r3, r3
100440f6:	0018      	movs	r0, r3
100440f8:	f7fe fb6a 	bl	100427d0 <__aeabi_i2d>
100440fc:	2200      	movs	r2, #0
100440fe:	4bbd      	ldr	r3, [pc, #756]	@ (100443f4 <BLEEVT_App_Notification+0x448>)
10044100:	f7fd fc18 	bl	10041934 <__aeabi_dmul>
10044104:	0002      	movs	r2, r0
10044106:	000b      	movs	r3, r1
10044108:	0010      	movs	r0, r2
1004410a:	0019      	movs	r1, r3
1004410c:	f7fe fb24 	bl	10042758 <__aeabi_d2iz>
10044110:	0006      	movs	r6, r0
10044112:	697b      	ldr	r3, [r7, #20]
10044114:	78da      	ldrb	r2, [r3, #3]
10044116:	791b      	ldrb	r3, [r3, #4]
10044118:	021b      	lsls	r3, r3, #8
1004411a:	4313      	orrs	r3, r2
1004411c:	b29b      	uxth	r3, r3
1004411e:	0018      	movs	r0, r3
10044120:	f7fe fb56 	bl	100427d0 <__aeabi_i2d>
10044124:	2200      	movs	r2, #0
10044126:	4bb3      	ldr	r3, [pc, #716]	@ (100443f4 <BLEEVT_App_Notification+0x448>)
10044128:	f7fd fc04 	bl	10041934 <__aeabi_dmul>
1004412c:	0002      	movs	r2, r0
1004412e:	000b      	movs	r3, r1
10044130:	0010      	movs	r0, r2
10044132:	0019      	movs	r1, r3
10044134:	2200      	movs	r2, #0
10044136:	2300      	movs	r3, #0
10044138:	f7fc fa42 	bl	100405c0 <__aeabi_dcmpgt>
1004413c:	1e03      	subs	r3, r0, #0
1004413e:	d03d      	beq.n	100441bc <BLEEVT_App_Notification+0x210>
10044140:	697b      	ldr	r3, [r7, #20]
10044142:	78da      	ldrb	r2, [r3, #3]
10044144:	791b      	ldrb	r3, [r3, #4]
10044146:	021b      	lsls	r3, r3, #8
10044148:	4313      	orrs	r3, r2
1004414a:	b29b      	uxth	r3, r3
1004414c:	0018      	movs	r0, r3
1004414e:	f7fe fb3f 	bl	100427d0 <__aeabi_i2d>
10044152:	2200      	movs	r2, #0
10044154:	4ba7      	ldr	r3, [pc, #668]	@ (100443f4 <BLEEVT_App_Notification+0x448>)
10044156:	f7fd fbed 	bl	10041934 <__aeabi_dmul>
1004415a:	0002      	movs	r2, r0
1004415c:	000b      	movs	r3, r1
1004415e:	0014      	movs	r4, r2
10044160:	001d      	movs	r5, r3
10044162:	697b      	ldr	r3, [r7, #20]
10044164:	78da      	ldrb	r2, [r3, #3]
10044166:	791b      	ldrb	r3, [r3, #4]
10044168:	021b      	lsls	r3, r3, #8
1004416a:	4313      	orrs	r3, r2
1004416c:	b29b      	uxth	r3, r3
1004416e:	0018      	movs	r0, r3
10044170:	f7fe fb2e 	bl	100427d0 <__aeabi_i2d>
10044174:	2200      	movs	r2, #0
10044176:	4b9f      	ldr	r3, [pc, #636]	@ (100443f4 <BLEEVT_App_Notification+0x448>)
10044178:	f7fd fbdc 	bl	10041934 <__aeabi_dmul>
1004417c:	0002      	movs	r2, r0
1004417e:	000b      	movs	r3, r1
10044180:	0010      	movs	r0, r2
10044182:	0019      	movs	r1, r3
10044184:	f7fe fae8 	bl	10042758 <__aeabi_d2iz>
10044188:	0003      	movs	r3, r0
1004418a:	0018      	movs	r0, r3
1004418c:	f7fe fb20 	bl	100427d0 <__aeabi_i2d>
10044190:	0002      	movs	r2, r0
10044192:	000b      	movs	r3, r1
10044194:	0020      	movs	r0, r4
10044196:	0029      	movs	r1, r5
10044198:	f7fd feb2 	bl	10041f00 <__aeabi_dsub>
1004419c:	0002      	movs	r2, r0
1004419e:	000b      	movs	r3, r1
100441a0:	0010      	movs	r0, r2
100441a2:	0019      	movs	r1, r3
100441a4:	2200      	movs	r2, #0
100441a6:	4b94      	ldr	r3, [pc, #592]	@ (100443f8 <BLEEVT_App_Notification+0x44c>)
100441a8:	f7fd fbc4 	bl	10041934 <__aeabi_dmul>
100441ac:	0002      	movs	r2, r0
100441ae:	000b      	movs	r3, r1
100441b0:	0010      	movs	r0, r2
100441b2:	0019      	movs	r1, r3
100441b4:	f7fe fad0 	bl	10042758 <__aeabi_d2iz>
100441b8:	0002      	movs	r2, r0
100441ba:	e03a      	b.n	10044232 <BLEEVT_App_Notification+0x286>
100441bc:	697b      	ldr	r3, [r7, #20]
100441be:	78da      	ldrb	r2, [r3, #3]
100441c0:	791b      	ldrb	r3, [r3, #4]
100441c2:	021b      	lsls	r3, r3, #8
100441c4:	4313      	orrs	r3, r2
100441c6:	b29b      	uxth	r3, r3
100441c8:	0018      	movs	r0, r3
100441ca:	f7fe fb01 	bl	100427d0 <__aeabi_i2d>
100441ce:	2200      	movs	r2, #0
100441d0:	4b88      	ldr	r3, [pc, #544]	@ (100443f4 <BLEEVT_App_Notification+0x448>)
100441d2:	f7fd fbaf 	bl	10041934 <__aeabi_dmul>
100441d6:	0002      	movs	r2, r0
100441d8:	000b      	movs	r3, r1
100441da:	0010      	movs	r0, r2
100441dc:	0019      	movs	r1, r3
100441de:	f7fe fabb 	bl	10042758 <__aeabi_d2iz>
100441e2:	0003      	movs	r3, r0
100441e4:	0018      	movs	r0, r3
100441e6:	f7fe faf3 	bl	100427d0 <__aeabi_i2d>
100441ea:	0004      	movs	r4, r0
100441ec:	000d      	movs	r5, r1
100441ee:	697b      	ldr	r3, [r7, #20]
100441f0:	78da      	ldrb	r2, [r3, #3]
100441f2:	791b      	ldrb	r3, [r3, #4]
100441f4:	021b      	lsls	r3, r3, #8
100441f6:	4313      	orrs	r3, r2
100441f8:	b29b      	uxth	r3, r3
100441fa:	0018      	movs	r0, r3
100441fc:	f7fe fae8 	bl	100427d0 <__aeabi_i2d>
10044200:	2200      	movs	r2, #0
10044202:	4b7c      	ldr	r3, [pc, #496]	@ (100443f4 <BLEEVT_App_Notification+0x448>)
10044204:	f7fd fb96 	bl	10041934 <__aeabi_dmul>
10044208:	0002      	movs	r2, r0
1004420a:	000b      	movs	r3, r1
1004420c:	0020      	movs	r0, r4
1004420e:	0029      	movs	r1, r5
10044210:	f7fd fe76 	bl	10041f00 <__aeabi_dsub>
10044214:	0002      	movs	r2, r0
10044216:	000b      	movs	r3, r1
10044218:	0010      	movs	r0, r2
1004421a:	0019      	movs	r1, r3
1004421c:	2200      	movs	r2, #0
1004421e:	4b76      	ldr	r3, [pc, #472]	@ (100443f8 <BLEEVT_App_Notification+0x44c>)
10044220:	f7fd fb88 	bl	10041934 <__aeabi_dmul>
10044224:	0002      	movs	r2, r0
10044226:	000b      	movs	r3, r1
10044228:	0010      	movs	r0, r2
1004422a:	0019      	movs	r1, r3
1004422c:	f7fe fa94 	bl	10042758 <__aeabi_d2iz>
10044230:	0002      	movs	r2, r0
10044232:	697b      	ldr	r3, [r7, #20]
10044234:	7959      	ldrb	r1, [r3, #5]
10044236:	799b      	ldrb	r3, [r3, #6]
10044238:	021b      	lsls	r3, r3, #8
1004423a:	430b      	orrs	r3, r1
1004423c:	b29b      	uxth	r3, r3
1004423e:	001c      	movs	r4, r3
10044240:	697b      	ldr	r3, [r7, #20]
10044242:	79d9      	ldrb	r1, [r3, #7]
10044244:	7a1b      	ldrb	r3, [r3, #8]
10044246:	021b      	lsls	r3, r3, #8
10044248:	430b      	orrs	r3, r1
1004424a:	b29b      	uxth	r3, r3
1004424c:	0019      	movs	r1, r3
1004424e:	000b      	movs	r3, r1
10044250:	009b      	lsls	r3, r3, #2
10044252:	185b      	adds	r3, r3, r1
10044254:	005b      	lsls	r3, r3, #1
10044256:	4869      	ldr	r0, [pc, #420]	@ (100443fc <BLEEVT_App_Notification+0x450>)
10044258:	9300      	str	r3, [sp, #0]
1004425a:	0023      	movs	r3, r4
1004425c:	0031      	movs	r1, r6
1004425e:	f023 f915 	bl	1006748c <iprintf>
          UNUSED(p_conn_update_complete);
          /* USER CODE BEGIN EVT_LE_CONN_UPDATE_COMPLETE */

          /* USER CODE END EVT_LE_CONN_UPDATE_COMPLETE */
        }
        break;
10044262:	e066      	b.n	10044332 <BLEEVT_App_Notification+0x386>
      case HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE:
        {
          hci_le_phy_update_complete_event_rp0 *p_le_phy_update_complete;
          p_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
10044264:	6a3b      	ldr	r3, [r7, #32]
10044266:	3301      	adds	r3, #1
10044268:	61fb      	str	r3, [r7, #28]
          UNUSED(p_le_phy_update_complete);

          gap_cmd_resp_release();
1004426a:	f000 fc57 	bl	10044b1c <gap_cmd_resp_release>

          /* USER CODE BEGIN EVT_LE_PHY_UPDATE_COMPLETE */

          /* USER CODE END EVT_LE_PHY_UPDATE_COMPLETE */
        }
        break;
1004426e:	e060      	b.n	10044332 <BLEEVT_App_Notification+0x386>
      case HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE:
        {
          hci_le_enhanced_connection_complete_event_rp0 *p_enhanced_conn_complete;
          p_enhanced_conn_complete = (hci_le_enhanced_connection_complete_event_rp0 *) p_meta_evt->data;
10044270:	6a3b      	ldr	r3, [r7, #32]
10044272:	3301      	adds	r3, #1
10044274:	61bb      	str	r3, [r7, #24]

          connection_complete_event(p_enhanced_conn_complete->Status,
10044276:	69bb      	ldr	r3, [r7, #24]
10044278:	781c      	ldrb	r4, [r3, #0]
1004427a:	69bb      	ldr	r3, [r7, #24]
1004427c:	785a      	ldrb	r2, [r3, #1]
1004427e:	789b      	ldrb	r3, [r3, #2]
10044280:	021b      	lsls	r3, r3, #8
10044282:	4313      	orrs	r3, r2
10044284:	b29d      	uxth	r5, r3
10044286:	69bb      	ldr	r3, [r7, #24]
10044288:	791e      	ldrb	r6, [r3, #4]
                                    p_enhanced_conn_complete->Connection_Handle,
                                    p_enhanced_conn_complete->Peer_Address_Type,
                                    p_enhanced_conn_complete->Peer_Address,
1004428a:	69bb      	ldr	r3, [r7, #24]
1004428c:	3305      	adds	r3, #5
1004428e:	469c      	mov	ip, r3
          connection_complete_event(p_enhanced_conn_complete->Status,
10044290:	69bb      	ldr	r3, [r7, #24]
10044292:	7dda      	ldrb	r2, [r3, #23]
10044294:	7e1b      	ldrb	r3, [r3, #24]
10044296:	021b      	lsls	r3, r3, #8
10044298:	4313      	orrs	r3, r2
1004429a:	b29a      	uxth	r2, r3
1004429c:	69bb      	ldr	r3, [r7, #24]
1004429e:	7e59      	ldrb	r1, [r3, #25]
100442a0:	7e9b      	ldrb	r3, [r3, #26]
100442a2:	021b      	lsls	r3, r3, #8
100442a4:	430b      	orrs	r3, r1
100442a6:	b299      	uxth	r1, r3
100442a8:	69bb      	ldr	r3, [r7, #24]
100442aa:	7ed8      	ldrb	r0, [r3, #27]
100442ac:	7f1b      	ldrb	r3, [r3, #28]
100442ae:	021b      	lsls	r3, r3, #8
100442b0:	4303      	orrs	r3, r0
100442b2:	b29b      	uxth	r3, r3
100442b4:	9302      	str	r3, [sp, #8]
100442b6:	9101      	str	r1, [sp, #4]
100442b8:	9200      	str	r2, [sp, #0]
100442ba:	4663      	mov	r3, ip
100442bc:	0032      	movs	r2, r6
100442be:	0029      	movs	r1, r5
100442c0:	0020      	movs	r0, r4
100442c2:	f000 f9af 	bl	10044624 <connection_complete_event>
                                    p_enhanced_conn_complete->Connection_Interval,
                                    p_enhanced_conn_complete->Peripheral_Latency,
                                    p_enhanced_conn_complete->Supervision_Timeout);
        }
        break;
100442c6:	e034      	b.n	10044332 <BLEEVT_App_Notification+0x386>
      case HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE:
        {
          hci_le_connection_complete_event_rp0 *p_conn_complete;
          p_conn_complete = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
100442c8:	6a3b      	ldr	r3, [r7, #32]
100442ca:	3301      	adds	r3, #1
100442cc:	613b      	str	r3, [r7, #16]

          connection_complete_event(p_conn_complete->Status,
100442ce:	693b      	ldr	r3, [r7, #16]
100442d0:	781c      	ldrb	r4, [r3, #0]
100442d2:	693b      	ldr	r3, [r7, #16]
100442d4:	785a      	ldrb	r2, [r3, #1]
100442d6:	789b      	ldrb	r3, [r3, #2]
100442d8:	021b      	lsls	r3, r3, #8
100442da:	4313      	orrs	r3, r2
100442dc:	b29d      	uxth	r5, r3
100442de:	693b      	ldr	r3, [r7, #16]
100442e0:	791e      	ldrb	r6, [r3, #4]
                                    p_conn_complete->Connection_Handle,
                                    p_conn_complete->Peer_Address_Type,
                                    p_conn_complete->Peer_Address,
100442e2:	693b      	ldr	r3, [r7, #16]
100442e4:	3305      	adds	r3, #5
100442e6:	469c      	mov	ip, r3
          connection_complete_event(p_conn_complete->Status,
100442e8:	693b      	ldr	r3, [r7, #16]
100442ea:	7ada      	ldrb	r2, [r3, #11]
100442ec:	7b1b      	ldrb	r3, [r3, #12]
100442ee:	021b      	lsls	r3, r3, #8
100442f0:	4313      	orrs	r3, r2
100442f2:	b29a      	uxth	r2, r3
100442f4:	693b      	ldr	r3, [r7, #16]
100442f6:	7b59      	ldrb	r1, [r3, #13]
100442f8:	7b9b      	ldrb	r3, [r3, #14]
100442fa:	021b      	lsls	r3, r3, #8
100442fc:	430b      	orrs	r3, r1
100442fe:	b299      	uxth	r1, r3
10044300:	693b      	ldr	r3, [r7, #16]
10044302:	7bd8      	ldrb	r0, [r3, #15]
10044304:	7c1b      	ldrb	r3, [r3, #16]
10044306:	021b      	lsls	r3, r3, #8
10044308:	4303      	orrs	r3, r0
1004430a:	b29b      	uxth	r3, r3
1004430c:	9302      	str	r3, [sp, #8]
1004430e:	9101      	str	r1, [sp, #4]
10044310:	9200      	str	r2, [sp, #0]
10044312:	4663      	mov	r3, ip
10044314:	0032      	movs	r2, r6
10044316:	0029      	movs	r1, r5
10044318:	0020      	movs	r0, r4
1004431a:	f000 f983 	bl	10044624 <connection_complete_event>
                                    p_conn_complete->Connection_Interval,
                                    p_conn_complete->Peripheral_Latency,
                                    p_conn_complete->Supervision_Timeout);
        }
        break;
1004431e:	e008      	b.n	10044332 <BLEEVT_App_Notification+0x386>

      /* USER CODE END EVT_LE_META_EVENT_1 */

      default:
        /* USER CODE BEGIN SUBEVENT_DEFAULT */
        APP_DBG_MSG("HCI_LE_META_EVT: 0x%02X\n", p_meta_evt->subevent);
10044320:	6a3b      	ldr	r3, [r7, #32]
10044322:	781b      	ldrb	r3, [r3, #0]
10044324:	001a      	movs	r2, r3
10044326:	4b36      	ldr	r3, [pc, #216]	@ (10044400 <BLEEVT_App_Notification+0x454>)
10044328:	0011      	movs	r1, r2
1004432a:	0018      	movs	r0, r3
1004432c:	f023 f8ae 	bl	1006748c <iprintf>
        /* USER CODE END SUBEVENT_DEFAULT */
        break;
10044330:	46c0      	nop			@ (mov r8, r8)
      }
    } /* HCI_LE_META_EVT_CODE */
    break;
10044332:	e151      	b.n	100445d8 <BLEEVT_App_Notification+0x62c>

  case HCI_VENDOR_EVT_CODE:
    {
      aci_blecore_event *p_blecore_evt = (aci_blecore_event*) event_data;
10044334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10044336:	63fb      	str	r3, [r7, #60]	@ 0x3c
      /* USER CODE BEGIN EVT_VENDOR */

      /* USER CODE END EVT_VENDOR */
      switch (p_blecore_evt->ecode)
10044338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004433a:	781a      	ldrb	r2, [r3, #0]
1004433c:	785b      	ldrb	r3, [r3, #1]
1004433e:	021b      	lsls	r3, r3, #8
10044340:	4313      	orrs	r3, r2
10044342:	b29b      	uxth	r3, r3
10044344:	4a2f      	ldr	r2, [pc, #188]	@ (10044404 <BLEEVT_App_Notification+0x458>)
10044346:	4293      	cmp	r3, r2
10044348:	d100      	bne.n	1004434c <BLEEVT_App_Notification+0x3a0>
1004434a:	e0f0      	b.n	1004452e <BLEEVT_App_Notification+0x582>
1004434c:	4a2d      	ldr	r2, [pc, #180]	@ (10044404 <BLEEVT_App_Notification+0x458>)
1004434e:	4293      	cmp	r3, r2
10044350:	dd00      	ble.n	10044354 <BLEEVT_App_Notification+0x3a8>
10044352:	e11e      	b.n	10044592 <BLEEVT_App_Notification+0x5e6>
10044354:	2280      	movs	r2, #128	@ 0x80
10044356:	0112      	lsls	r2, r2, #4
10044358:	4293      	cmp	r3, r2
1004435a:	d01c      	beq.n	10044396 <BLEEVT_App_Notification+0x3ea>
1004435c:	2280      	movs	r2, #128	@ 0x80
1004435e:	0112      	lsls	r2, r2, #4
10044360:	4293      	cmp	r3, r2
10044362:	dd00      	ble.n	10044366 <BLEEVT_App_Notification+0x3ba>
10044364:	e115      	b.n	10044592 <BLEEVT_App_Notification+0x5e6>
10044366:	2b04      	cmp	r3, #4
10044368:	d021      	beq.n	100443ae <BLEEVT_App_Notification+0x402>
1004436a:	da00      	bge.n	1004436e <BLEEVT_App_Notification+0x3c2>
1004436c:	e111      	b.n	10044592 <BLEEVT_App_Notification+0x5e6>
1004436e:	4a26      	ldr	r2, [pc, #152]	@ (10044408 <BLEEVT_App_Notification+0x45c>)
10044370:	4293      	cmp	r3, r2
10044372:	dd00      	ble.n	10044376 <BLEEVT_App_Notification+0x3ca>
10044374:	e10d      	b.n	10044592 <BLEEVT_App_Notification+0x5e6>
10044376:	2280      	movs	r2, #128	@ 0x80
10044378:	00d2      	lsls	r2, r2, #3
1004437a:	4293      	cmp	r3, r2
1004437c:	dc00      	bgt.n	10044380 <BLEEVT_App_Notification+0x3d4>
1004437e:	e108      	b.n	10044592 <BLEEVT_App_Notification+0x5e6>
10044380:	4a22      	ldr	r2, [pc, #136]	@ (1004440c <BLEEVT_App_Notification+0x460>)
10044382:	4694      	mov	ip, r2
10044384:	4463      	add	r3, ip
10044386:	2b09      	cmp	r3, #9
10044388:	d900      	bls.n	1004438c <BLEEVT_App_Notification+0x3e0>
1004438a:	e102      	b.n	10044592 <BLEEVT_App_Notification+0x5e6>
1004438c:	009a      	lsls	r2, r3, #2
1004438e:	4b20      	ldr	r3, [pc, #128]	@ (10044410 <BLEEVT_App_Notification+0x464>)
10044390:	18d3      	adds	r3, r2, r3
10044392:	681b      	ldr	r3, [r3, #0]
10044394:	469f      	mov	pc, r3

        /* USER CODE END ecode */
      case ACI_L2CAP_CONNECTION_UPDATE_RESP_VSEVT_CODE:
        {
          aci_l2cap_connection_update_resp_event_rp0 *p_l2cap_conn_update_resp;
          p_l2cap_conn_update_resp = (aci_l2cap_connection_update_resp_event_rp0 *) p_blecore_evt->data;
10044396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044398:	3302      	adds	r3, #2
1004439a:	633b      	str	r3, [r7, #48]	@ 0x30
          UNUSED(p_l2cap_conn_update_resp);
          /* USER CODE BEGIN EVT_L2CAP_CONNECTION_UPDATE_RESP */

          /* USER CODE END EVT_L2CAP_CONNECTION_UPDATE_RESP */
        }
        break;
1004439c:	e106      	b.n	100445ac <BLEEVT_App_Notification+0x600>
      case ACI_GAP_PROC_COMPLETE_VSEVT_CODE:
        {
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE\n");
1004439e:	4b1d      	ldr	r3, [pc, #116]	@ (10044414 <BLEEVT_App_Notification+0x468>)
100443a0:	0018      	movs	r0, r3
100443a2:	f023 f8e3 	bl	1006756c <puts>
          aci_gap_proc_complete_event_rp0 *p_gap_proc_complete;
          p_gap_proc_complete = (aci_gap_proc_complete_event_rp0*) p_blecore_evt->data;
100443a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100443a8:	3302      	adds	r3, #2
100443aa:	62bb      	str	r3, [r7, #40]	@ 0x28

          /* USER CODE BEGIN EVT_GAP_PROCEDURE_COMPLETE */

          /* USER CODE END EVT_GAP_PROCEDURE_COMPLETE */
        }
        break;
100443ac:	e0fe      	b.n	100445ac <BLEEVT_App_Notification+0x600>
      case ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE:
        /* USER CODE BEGIN RADIO_ACTIVITY_EVENT*/
        BSP_LED_On(LED_GREEN);
100443ae:	2001      	movs	r0, #1
100443b0:	f007 f98e 	bl	1004b6d0 <BSP_LED_On>
        HAL_RADIO_TIMER_StopVirtualTimer(&bleAppContext.SwitchOffGPIO_timer_Id);
100443b4:	4b18      	ldr	r3, [pc, #96]	@ (10044418 <BLEEVT_App_Notification+0x46c>)
100443b6:	0018      	movs	r0, r3
100443b8:	f00a faec 	bl	1004e994 <HAL_RADIO_TIMER_StopVirtualTimer>
        HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.SwitchOffGPIO_timer_Id, LED_ON_TIMEOUT_MS);
100443bc:	4b16      	ldr	r3, [pc, #88]	@ (10044418 <BLEEVT_App_Notification+0x46c>)
100443be:	2105      	movs	r1, #5
100443c0:	0018      	movs	r0, r3
100443c2:	f00a fa97 	bl	1004e8f4 <HAL_RADIO_TIMER_StartVirtualTimer>
        /* USER CODE END RADIO_ACTIVITY_EVENT*/
        break;
100443c6:	e0f1      	b.n	100445ac <BLEEVT_App_Notification+0x600>
      case ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE:
        {
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
100443c8:	4b14      	ldr	r3, [pc, #80]	@ (1004441c <BLEEVT_App_Notification+0x470>)
100443ca:	0018      	movs	r0, r3
100443cc:	f023 f8ce 	bl	1006756c <puts>
          /* USER CODE BEGIN ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE*/

          /* USER CODE END ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE*/
        }
        break;
100443d0:	e0ec      	b.n	100445ac <BLEEVT_App_Notification+0x600>
100443d2:	46c0      	nop			@ (mov r8, r8)
100443d4:	200003f0 	.word	0x200003f0
100443d8:	1006bb28 	.word	0x1006bb28
100443dc:	1006bb54 	.word	0x1006bb54
100443e0:	20000438 	.word	0x20000438
100443e4:	2000043c 	.word	0x2000043c
100443e8:	0000ea60 	.word	0x0000ea60
100443ec:	20000400 	.word	0x20000400
100443f0:	1006bb94 	.word	0x1006bb94
100443f4:	3ff40000 	.word	0x3ff40000
100443f8:	40590000 	.word	0x40590000
100443fc:	1006bbc8 	.word	0x1006bbc8
10044400:	1006bc38 	.word	0x1006bc38
10044404:	00000c19 	.word	0x00000c19
10044408:	0000040a 	.word	0x0000040a
1004440c:	fffffbff 	.word	0xfffffbff
10044410:	1006c9e4 	.word	0x1006c9e4
10044414:	1006bc54 	.word	0x1006bc54
10044418:	20000418 	.word	0x20000418
1004441c:	1006bc7c 	.word	0x1006bc7c
      case ACI_GAP_PASSKEY_REQ_VSEVT_CODE:
        {
          APP_DBG_MSG(">>== ACI_GAP_PASSKEY_REQ_VSEVT_CODE\n");
10044420:	4b6f      	ldr	r3, [pc, #444]	@ (100445e0 <BLEEVT_App_Notification+0x634>)
10044422:	0018      	movs	r0, r3
10044424:	f023 f8a2 	bl	1006756c <puts>

          ret = aci_gap_passkey_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
10044428:	4b6e      	ldr	r3, [pc, #440]	@ (100445e4 <BLEEVT_App_Notification+0x638>)
1004442a:	899b      	ldrh	r3, [r3, #12]
1004442c:	254b      	movs	r5, #75	@ 0x4b
1004442e:	197c      	adds	r4, r7, r5
10044430:	4a6d      	ldr	r2, [pc, #436]	@ (100445e8 <BLEEVT_App_Notification+0x63c>)
10044432:	0011      	movs	r1, r2
10044434:	0018      	movs	r0, r3
10044436:	f00d ff40 	bl	100522ba <aci_gap_passkey_resp>
1004443a:	0003      	movs	r3, r0
1004443c:	7023      	strb	r3, [r4, #0]
          if (ret != BLE_STATUS_SUCCESS)
1004443e:	197b      	adds	r3, r7, r5
10044440:	781b      	ldrb	r3, [r3, #0]
10044442:	2b00      	cmp	r3, #0
10044444:	d007      	beq.n	10044456 <BLEEVT_App_Notification+0x4aa>
          {
            APP_DBG_MSG("==>> aci_gap_passkey_resp : Fail, reason: 0x%02X\n", ret);
10044446:	197b      	adds	r3, r7, r5
10044448:	781a      	ldrb	r2, [r3, #0]
1004444a:	4b68      	ldr	r3, [pc, #416]	@ (100445ec <BLEEVT_App_Notification+0x640>)
1004444c:	0011      	movs	r1, r2
1004444e:	0018      	movs	r0, r3
10044450:	f023 f81c 	bl	1006748c <iprintf>
          }
          /* USER CODE BEGIN ACI_GAP_PASSKEY_REQ_VSEVT_CODE*/

          /* USER CODE END ACI_GAP_PASSKEY_REQ_VSEVT_CODE*/
        }
        break;
10044454:	e0aa      	b.n	100445ac <BLEEVT_App_Notification+0x600>
            APP_DBG_MSG("==>> aci_gap_passkey_resp : Success\n");
10044456:	4b66      	ldr	r3, [pc, #408]	@ (100445f0 <BLEEVT_App_Notification+0x644>)
10044458:	0018      	movs	r0, r3
1004445a:	f023 f887 	bl	1006756c <puts>
        break;
1004445e:	e0a5      	b.n	100445ac <BLEEVT_App_Notification+0x600>
      case ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE:
        {
          uint8_t confirm_value;
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
10044460:	4b64      	ldr	r3, [pc, #400]	@ (100445f4 <BLEEVT_App_Notification+0x648>)
10044462:	0018      	movs	r0, r3
10044464:	f023 f882 	bl	1006756c <puts>
          APP_DBG_MSG("     - numeric_value = %d\n",
10044468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004446a:	3302      	adds	r3, #2
1004446c:	789a      	ldrb	r2, [r3, #2]
1004446e:	78d9      	ldrb	r1, [r3, #3]
10044470:	0209      	lsls	r1, r1, #8
10044472:	430a      	orrs	r2, r1
10044474:	7919      	ldrb	r1, [r3, #4]
10044476:	0409      	lsls	r1, r1, #16
10044478:	430a      	orrs	r2, r1
1004447a:	795b      	ldrb	r3, [r3, #5]
1004447c:	061b      	lsls	r3, r3, #24
1004447e:	4313      	orrs	r3, r2
10044480:	001a      	movs	r2, r3
10044482:	4b5d      	ldr	r3, [pc, #372]	@ (100445f8 <BLEEVT_App_Notification+0x64c>)
10044484:	0011      	movs	r1, r2
10044486:	0018      	movs	r0, r3
10044488:	f023 f800 	bl	1006748c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
          APP_DBG_MSG("     - Hex_value = %x\n",
1004448c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004448e:	3302      	adds	r3, #2
10044490:	789a      	ldrb	r2, [r3, #2]
10044492:	78d9      	ldrb	r1, [r3, #3]
10044494:	0209      	lsls	r1, r1, #8
10044496:	430a      	orrs	r2, r1
10044498:	7919      	ldrb	r1, [r3, #4]
1004449a:	0409      	lsls	r1, r1, #16
1004449c:	430a      	orrs	r2, r1
1004449e:	795b      	ldrb	r3, [r3, #5]
100444a0:	061b      	lsls	r3, r3, #24
100444a2:	4313      	orrs	r3, r2
100444a4:	001a      	movs	r2, r3
100444a6:	4b55      	ldr	r3, [pc, #340]	@ (100445fc <BLEEVT_App_Notification+0x650>)
100444a8:	0011      	movs	r1, r2
100444aa:	0018      	movs	r0, r3
100444ac:	f022 ffee 	bl	1006748c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);

          /* Set confirm value to 1(YES) */
          confirm_value = 1;
100444b0:	212f      	movs	r1, #47	@ 0x2f
100444b2:	187b      	adds	r3, r7, r1
100444b4:	2201      	movs	r2, #1
100444b6:	701a      	strb	r2, [r3, #0]
          /* USER CODE BEGIN ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE_0*/

          /* USER CODE END ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE_0*/

          ret = aci_gap_numeric_comparison_value_confirm_yesno(bleAppContext.BleApplicationContext_legacy.connectionHandle, confirm_value);
100444b8:	4b4a      	ldr	r3, [pc, #296]	@ (100445e4 <BLEEVT_App_Notification+0x638>)
100444ba:	899a      	ldrh	r2, [r3, #12]
100444bc:	254b      	movs	r5, #75	@ 0x4b
100444be:	197c      	adds	r4, r7, r5
100444c0:	187b      	adds	r3, r7, r1
100444c2:	781b      	ldrb	r3, [r3, #0]
100444c4:	0019      	movs	r1, r3
100444c6:	0010      	movs	r0, r2
100444c8:	f00d ff0a 	bl	100522e0 <aci_gap_numeric_comparison_value_confirm_yesno>
100444cc:	0003      	movs	r3, r0
100444ce:	7023      	strb	r3, [r4, #0]
          if (ret != BLE_STATUS_SUCCESS)
100444d0:	197b      	adds	r3, r7, r5
100444d2:	781b      	ldrb	r3, [r3, #0]
100444d4:	2b00      	cmp	r3, #0
100444d6:	d007      	beq.n	100444e8 <BLEEVT_App_Notification+0x53c>
          {
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno : Fail, reason: 0x%02X\n", ret);
100444d8:	197b      	adds	r3, r7, r5
100444da:	781a      	ldrb	r2, [r3, #0]
100444dc:	4b48      	ldr	r3, [pc, #288]	@ (10044600 <BLEEVT_App_Notification+0x654>)
100444de:	0011      	movs	r1, r2
100444e0:	0018      	movs	r0, r3
100444e2:	f022 ffd3 	bl	1006748c <iprintf>
          }
          /* USER CODE BEGIN ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE*/

          /* USER CODE END ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE*/
        }
        break;
100444e6:	e061      	b.n	100445ac <BLEEVT_App_Notification+0x600>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno : Success\n");
100444e8:	4b46      	ldr	r3, [pc, #280]	@ (10044604 <BLEEVT_App_Notification+0x658>)
100444ea:	0018      	movs	r0, r3
100444ec:	f023 f83e 	bl	1006756c <puts>
        break;
100444f0:	e05c      	b.n	100445ac <BLEEVT_App_Notification+0x600>
      case ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE:
        {
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
100444f2:	4b45      	ldr	r3, [pc, #276]	@ (10044608 <BLEEVT_App_Notification+0x65c>)
100444f4:	0018      	movs	r0, r3
100444f6:	f023 f839 	bl	1006756c <puts>
          aci_gap_pairing_complete_event_rp0 *p_pairing_complete;
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
100444fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100444fc:	3302      	adds	r3, #2
100444fe:	627b      	str	r3, [r7, #36]	@ 0x24

          if (p_pairing_complete->Status != 0)
10044500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044502:	789b      	ldrb	r3, [r3, #2]
10044504:	2b00      	cmp	r3, #0
10044506:	d00a      	beq.n	1004451e <BLEEVT_App_Notification+0x572>
          {
            APP_DBG_MSG("     - Pairing KO\n     - Status: 0x%02X\n     - Reason: 0x%02X\n",
10044508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004450a:	789b      	ldrb	r3, [r3, #2]
1004450c:	0019      	movs	r1, r3
1004450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044510:	78db      	ldrb	r3, [r3, #3]
10044512:	001a      	movs	r2, r3
10044514:	4b3d      	ldr	r3, [pc, #244]	@ (1004460c <BLEEVT_App_Notification+0x660>)
10044516:	0018      	movs	r0, r3
10044518:	f022 ffb8 	bl	1006748c <iprintf>
1004451c:	e003      	b.n	10044526 <BLEEVT_App_Notification+0x57a>
                        p_pairing_complete->Status, p_pairing_complete->Reason);
          }
          else
          {
            APP_DBG_MSG("     - Pairing Success\n");
1004451e:	4b3c      	ldr	r3, [pc, #240]	@ (10044610 <BLEEVT_App_Notification+0x664>)
10044520:	0018      	movs	r0, r3
10044522:	f023 f823 	bl	1006756c <puts>
          }
          APP_DBG_MSG("\n");
10044526:	200a      	movs	r0, #10
10044528:	f022 ffc0 	bl	100674ac <putchar>

          /* USER CODE BEGIN ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE*/

          /* USER CODE END ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE*/
        }
        break;
1004452c:	e03e      	b.n	100445ac <BLEEVT_App_Notification+0x600>
      case ACI_GATT_SRV_READ_VSEVT_CODE :
        {
          APP_DBG_MSG(">>== ACI_GATT_SRV_READ_VSEVT_CODE\n");
1004452e:	4b39      	ldr	r3, [pc, #228]	@ (10044614 <BLEEVT_App_Notification+0x668>)
10044530:	0018      	movs	r0, r3
10044532:	f023 f81b 	bl	1006756c <puts>

          aci_gatt_srv_read_event_rp0    *p_read;
          p_read = (aci_gatt_srv_read_event_rp0*)p_blecore_evt->data;
10044536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044538:	3302      	adds	r3, #2
1004453a:	63bb      	str	r3, [r7, #56]	@ 0x38
          uint8_t error_code = BLE_ATT_ERR_INSUFF_AUTHORIZATION;
1004453c:	2437      	movs	r4, #55	@ 0x37
1004453e:	193b      	adds	r3, r7, r4
10044540:	2208      	movs	r2, #8
10044542:	701a      	strb	r2, [r3, #0]

          APP_DBG_MSG("Handle 0x%04X\n",  p_read->Attribute_Handle);
10044544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10044546:	791a      	ldrb	r2, [r3, #4]
10044548:	795b      	ldrb	r3, [r3, #5]
1004454a:	021b      	lsls	r3, r3, #8
1004454c:	4313      	orrs	r3, r2
1004454e:	b29b      	uxth	r3, r3
10044550:	001a      	movs	r2, r3
10044552:	4b31      	ldr	r3, [pc, #196]	@ (10044618 <BLEEVT_App_Notification+0x66c>)
10044554:	0011      	movs	r1, r2
10044556:	0018      	movs	r0, r3
10044558:	f022 ff98 	bl	1006748c <iprintf>

          /* USER CODE BEGIN ACI_GATT_SRV_READ_VSEVT_CODE_1*/

          /* USER CODE END ACI_GATT_SRV_READ_VSEVT_CODE_1*/

          aci_gatt_srv_resp(p_read->Connection_Handle,
1004455c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004455e:	781a      	ldrb	r2, [r3, #0]
10044560:	785b      	ldrb	r3, [r3, #1]
10044562:	021b      	lsls	r3, r3, #8
10044564:	4313      	orrs	r3, r2
10044566:	b298      	uxth	r0, r3
10044568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004456a:	789a      	ldrb	r2, [r3, #2]
1004456c:	78db      	ldrb	r3, [r3, #3]
1004456e:	021b      	lsls	r3, r3, #8
10044570:	4313      	orrs	r3, r2
10044572:	b299      	uxth	r1, r3
10044574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10044576:	791a      	ldrb	r2, [r3, #4]
10044578:	795b      	ldrb	r3, [r3, #5]
1004457a:	021b      	lsls	r3, r3, #8
1004457c:	4313      	orrs	r3, r2
1004457e:	b29a      	uxth	r2, r3
10044580:	193b      	adds	r3, r7, r4
10044582:	781b      	ldrb	r3, [r3, #0]
10044584:	2400      	movs	r4, #0
10044586:	9401      	str	r4, [sp, #4]
10044588:	2400      	movs	r4, #0
1004458a:	9400      	str	r4, [sp, #0]
1004458c:	f00d ff29 	bl	100523e2 <aci_gatt_srv_resp>
                            NULL);

          /* USER CODE BEGIN ACI_GATT_SRV_READ_VSEVT_CODE_2*/

          /* USER CODE END ACI_GATT_SRV_READ_VSEVT_CODE_2*/
          break;
10044590:	e00c      	b.n	100445ac <BLEEVT_App_Notification+0x600>
        /* USER CODE BEGIN EVT_VENDOR_1 */

        /* USER CODE END EVT_VENDOR_1 */
      default:
        /* USER CODE BEGIN EVT_VENDOR_DEFAULT */
        APP_DBG_MSG("HCI_VENDOR_EVT: 0x%04X\n", p_blecore_evt->ecode);
10044592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10044594:	781a      	ldrb	r2, [r3, #0]
10044596:	785b      	ldrb	r3, [r3, #1]
10044598:	021b      	lsls	r3, r3, #8
1004459a:	4313      	orrs	r3, r2
1004459c:	b29b      	uxth	r3, r3
1004459e:	001a      	movs	r2, r3
100445a0:	4b1e      	ldr	r3, [pc, #120]	@ (1004461c <BLEEVT_App_Notification+0x670>)
100445a2:	0011      	movs	r1, r2
100445a4:	0018      	movs	r0, r3
100445a6:	f022 ff71 	bl	1006748c <iprintf>
        /* USER CODE END EVT_VENDOR_DEFAULT */
        break;
100445aa:	46c0      	nop			@ (mov r8, r8)
      }
    } /* HCI_VENDOR_EVT_CODE */
    break;
100445ac:	e014      	b.n	100445d8 <BLEEVT_App_Notification+0x62c>

  case HCI_HARDWARE_ERROR_EVT_CODE:
    {
      hci_hardware_error_event_rp0 *p_hci_hardware_error_event;
      p_hci_hardware_error_event = (hci_hardware_error_event_rp0*)p_event_pckt->data;
100445ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100445b0:	3302      	adds	r3, #2
100445b2:	60fb      	str	r3, [r7, #12]

      if (p_hci_hardware_error_event->Hardware_Code <= 0x03)
100445b4:	68fb      	ldr	r3, [r7, #12]
100445b6:	781b      	ldrb	r3, [r3, #0]
100445b8:	2b03      	cmp	r3, #3
100445ba:	d80c      	bhi.n	100445d6 <BLEEVT_App_Notification+0x62a>
      {
        NVIC_SystemReset();
100445bc:	f7ff fa62 	bl	10043a84 <__NVIC_SystemReset>

    /* USER CODE END EVENT_PCKT */

  default:
    /* USER CODE BEGIN ECODE_DEFAULT*/
    APP_DBG_MSG("HCI_EVENT: 0x%02X\n", p_event_pckt->evt);
100445c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100445c2:	781b      	ldrb	r3, [r3, #0]
100445c4:	001a      	movs	r2, r3
100445c6:	4b16      	ldr	r3, [pc, #88]	@ (10044620 <BLEEVT_App_Notification+0x674>)
100445c8:	0011      	movs	r1, r2
100445ca:	0018      	movs	r0, r3
100445cc:	f022 ff5e 	bl	1006748c <iprintf>
    /* USER CODE END ECODE_DEFAULT*/
    break;
100445d0:	e002      	b.n	100445d8 <BLEEVT_App_Notification+0x62c>
    return;
100445d2:	46c0      	nop			@ (mov r8, r8)
100445d4:	e000      	b.n	100445d8 <BLEEVT_App_Notification+0x62c>
    break;
100445d6:	46c0      	nop			@ (mov r8, r8)
  }
}
100445d8:	46bd      	mov	sp, r7
100445da:	b015      	add	sp, #84	@ 0x54
100445dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100445de:	46c0      	nop			@ (mov r8, r8)
100445e0:	1006bcac 	.word	0x1006bcac
100445e4:	200003f0 	.word	0x200003f0
100445e8:	0001b207 	.word	0x0001b207
100445ec:	1006bcd0 	.word	0x1006bcd0
100445f0:	1006bd04 	.word	0x1006bd04
100445f4:	1006bd28 	.word	0x1006bd28
100445f8:	1006bd5c 	.word	0x1006bd5c
100445fc:	1006bd78 	.word	0x1006bd78
10044600:	1006bd90 	.word	0x1006bd90
10044604:	1006bddc 	.word	0x1006bddc
10044608:	1006be1c 	.word	0x1006be1c
1004460c:	1006be48 	.word	0x1006be48
10044610:	1006be88 	.word	0x1006be88
10044614:	1006bea0 	.word	0x1006bea0
10044618:	1006bec4 	.word	0x1006bec4
1004461c:	1006bed4 	.word	0x1006bed4
10044620:	1006beec 	.word	0x1006beec

10044624 <connection_complete_event>:
                                      uint8_t Peer_Address_Type,
                                      uint8_t Peer_Address[6],
                                      uint16_t Connection_Interval,
                                      uint16_t Peripheral_Latency,
                                      uint16_t Supervision_Timeout)
{
10044624:	b5f0      	push	{r4, r5, r6, r7, lr}
10044626:	b087      	sub	sp, #28
10044628:	af04      	add	r7, sp, #16
1004462a:	0004      	movs	r4, r0
1004462c:	0008      	movs	r0, r1
1004462e:	0011      	movs	r1, r2
10044630:	603b      	str	r3, [r7, #0]
10044632:	1dfb      	adds	r3, r7, #7
10044634:	1c22      	adds	r2, r4, #0
10044636:	701a      	strb	r2, [r3, #0]
10044638:	1d3b      	adds	r3, r7, #4
1004463a:	1c02      	adds	r2, r0, #0
1004463c:	801a      	strh	r2, [r3, #0]
1004463e:	1dbb      	adds	r3, r7, #6
10044640:	1c0a      	adds	r2, r1, #0
10044642:	701a      	strb	r2, [r3, #0]
  if(Status != 0)
10044644:	1dfb      	adds	r3, r7, #7
10044646:	781b      	ldrb	r3, [r3, #0]
10044648:	2b00      	cmp	r3, #0
1004464a:	d00a      	beq.n	10044662 <connection_complete_event+0x3e>
  {
    APP_DBG_MSG("==>> connection_complete_event Fail, Status: 0x%02X\n", Status);
1004464c:	1dfb      	adds	r3, r7, #7
1004464e:	781a      	ldrb	r2, [r3, #0]
10044650:	4b7d      	ldr	r3, [pc, #500]	@ (10044848 <connection_complete_event+0x224>)
10044652:	0011      	movs	r1, r2
10044654:	0018      	movs	r0, r3
10044656:	f022 ff19 	bl	1006748c <iprintf>
    bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
1004465a:	4b7c      	ldr	r3, [pc, #496]	@ (1004484c <connection_complete_event+0x228>)
1004465c:	2200      	movs	r2, #0
1004465e:	739a      	strb	r2, [r3, #14]
    return;
10044660:	e0ee      	b.n	10044840 <connection_complete_event+0x21c>
  }
  /* USER CODE BEGIN HCI_EVT_LE_CONN_COMPLETE_1 */

  /* USER CODE END HCI_EVT_LE_CONN_COMPLETE_1 */
  APP_DBG_MSG(">>== hci_le_connection_complete_event - Connection handle: 0x%04X\n", Connection_Handle);
10044662:	1d3b      	adds	r3, r7, #4
10044664:	881a      	ldrh	r2, [r3, #0]
10044666:	4b7a      	ldr	r3, [pc, #488]	@ (10044850 <connection_complete_event+0x22c>)
10044668:	0011      	movs	r1, r2
1004466a:	0018      	movs	r0, r3
1004466c:	f022 ff0e 	bl	1006748c <iprintf>
  APP_DBG_MSG("     - Connection established with @:%02x:%02x:%02x:%02x:%02x:%02x\n",
10044670:	683b      	ldr	r3, [r7, #0]
10044672:	3305      	adds	r3, #5
10044674:	781b      	ldrb	r3, [r3, #0]
10044676:	001c      	movs	r4, r3
10044678:	683b      	ldr	r3, [r7, #0]
1004467a:	3304      	adds	r3, #4
1004467c:	781b      	ldrb	r3, [r3, #0]
1004467e:	001d      	movs	r5, r3
10044680:	683b      	ldr	r3, [r7, #0]
10044682:	3303      	adds	r3, #3
10044684:	781b      	ldrb	r3, [r3, #0]
10044686:	001e      	movs	r6, r3
10044688:	683b      	ldr	r3, [r7, #0]
1004468a:	3302      	adds	r3, #2
1004468c:	781b      	ldrb	r3, [r3, #0]
1004468e:	001a      	movs	r2, r3
10044690:	683b      	ldr	r3, [r7, #0]
10044692:	3301      	adds	r3, #1
10044694:	781b      	ldrb	r3, [r3, #0]
10044696:	0019      	movs	r1, r3
10044698:	683b      	ldr	r3, [r7, #0]
1004469a:	781b      	ldrb	r3, [r3, #0]
1004469c:	486d      	ldr	r0, [pc, #436]	@ (10044854 <connection_complete_event+0x230>)
1004469e:	9302      	str	r3, [sp, #8]
100446a0:	9101      	str	r1, [sp, #4]
100446a2:	9200      	str	r2, [sp, #0]
100446a4:	0033      	movs	r3, r6
100446a6:	002a      	movs	r2, r5
100446a8:	0021      	movs	r1, r4
100446aa:	f022 feef 	bl	1006748c <iprintf>
              Peer_Address[4],
              Peer_Address[3],
              Peer_Address[2],
              Peer_Address[1],
              Peer_Address[0]);
  APP_DBG_MSG("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n",
100446ae:	2420      	movs	r4, #32
100446b0:	193b      	adds	r3, r7, r4
100446b2:	881b      	ldrh	r3, [r3, #0]
100446b4:	0018      	movs	r0, r3
100446b6:	f7fe f88b 	bl	100427d0 <__aeabi_i2d>
100446ba:	2200      	movs	r2, #0
100446bc:	4b66      	ldr	r3, [pc, #408]	@ (10044858 <connection_complete_event+0x234>)
100446be:	f7fd f939 	bl	10041934 <__aeabi_dmul>
100446c2:	0002      	movs	r2, r0
100446c4:	000b      	movs	r3, r1
100446c6:	0010      	movs	r0, r2
100446c8:	0019      	movs	r1, r3
100446ca:	f7fe f845 	bl	10042758 <__aeabi_d2iz>
100446ce:	0006      	movs	r6, r0
100446d0:	193b      	adds	r3, r7, r4
100446d2:	881b      	ldrh	r3, [r3, #0]
100446d4:	0018      	movs	r0, r3
100446d6:	f7fe f87b 	bl	100427d0 <__aeabi_i2d>
100446da:	2200      	movs	r2, #0
100446dc:	4b5e      	ldr	r3, [pc, #376]	@ (10044858 <connection_complete_event+0x234>)
100446de:	f7fd f929 	bl	10041934 <__aeabi_dmul>
100446e2:	0002      	movs	r2, r0
100446e4:	000b      	movs	r3, r1
100446e6:	0010      	movs	r0, r2
100446e8:	0019      	movs	r1, r3
100446ea:	2200      	movs	r2, #0
100446ec:	2300      	movs	r3, #0
100446ee:	f7fb ff67 	bl	100405c0 <__aeabi_dcmpgt>
100446f2:	1e03      	subs	r3, r0, #0
100446f4:	d036      	beq.n	10044764 <connection_complete_event+0x140>
100446f6:	193b      	adds	r3, r7, r4
100446f8:	881b      	ldrh	r3, [r3, #0]
100446fa:	0018      	movs	r0, r3
100446fc:	f7fe f868 	bl	100427d0 <__aeabi_i2d>
10044700:	2200      	movs	r2, #0
10044702:	4b55      	ldr	r3, [pc, #340]	@ (10044858 <connection_complete_event+0x234>)
10044704:	f7fd f916 	bl	10041934 <__aeabi_dmul>
10044708:	0002      	movs	r2, r0
1004470a:	000b      	movs	r3, r1
1004470c:	0014      	movs	r4, r2
1004470e:	001d      	movs	r5, r3
10044710:	2320      	movs	r3, #32
10044712:	18fb      	adds	r3, r7, r3
10044714:	881b      	ldrh	r3, [r3, #0]
10044716:	0018      	movs	r0, r3
10044718:	f7fe f85a 	bl	100427d0 <__aeabi_i2d>
1004471c:	2200      	movs	r2, #0
1004471e:	4b4e      	ldr	r3, [pc, #312]	@ (10044858 <connection_complete_event+0x234>)
10044720:	f7fd f908 	bl	10041934 <__aeabi_dmul>
10044724:	0002      	movs	r2, r0
10044726:	000b      	movs	r3, r1
10044728:	0010      	movs	r0, r2
1004472a:	0019      	movs	r1, r3
1004472c:	f7fe f814 	bl	10042758 <__aeabi_d2iz>
10044730:	0003      	movs	r3, r0
10044732:	0018      	movs	r0, r3
10044734:	f7fe f84c 	bl	100427d0 <__aeabi_i2d>
10044738:	0002      	movs	r2, r0
1004473a:	000b      	movs	r3, r1
1004473c:	0020      	movs	r0, r4
1004473e:	0029      	movs	r1, r5
10044740:	f7fd fbde 	bl	10041f00 <__aeabi_dsub>
10044744:	0002      	movs	r2, r0
10044746:	000b      	movs	r3, r1
10044748:	0010      	movs	r0, r2
1004474a:	0019      	movs	r1, r3
1004474c:	2200      	movs	r2, #0
1004474e:	4b43      	ldr	r3, [pc, #268]	@ (1004485c <connection_complete_event+0x238>)
10044750:	f7fd f8f0 	bl	10041934 <__aeabi_dmul>
10044754:	0002      	movs	r2, r0
10044756:	000b      	movs	r3, r1
10044758:	0010      	movs	r0, r2
1004475a:	0019      	movs	r1, r3
1004475c:	f7fd fffc 	bl	10042758 <__aeabi_d2iz>
10044760:	0002      	movs	r2, r0
10044762:	e034      	b.n	100447ce <connection_complete_event+0x1aa>
10044764:	2320      	movs	r3, #32
10044766:	18fb      	adds	r3, r7, r3
10044768:	881b      	ldrh	r3, [r3, #0]
1004476a:	0018      	movs	r0, r3
1004476c:	f7fe f830 	bl	100427d0 <__aeabi_i2d>
10044770:	2200      	movs	r2, #0
10044772:	4b39      	ldr	r3, [pc, #228]	@ (10044858 <connection_complete_event+0x234>)
10044774:	f7fd f8de 	bl	10041934 <__aeabi_dmul>
10044778:	0002      	movs	r2, r0
1004477a:	000b      	movs	r3, r1
1004477c:	0010      	movs	r0, r2
1004477e:	0019      	movs	r1, r3
10044780:	f7fd ffea 	bl	10042758 <__aeabi_d2iz>
10044784:	0003      	movs	r3, r0
10044786:	0018      	movs	r0, r3
10044788:	f7fe f822 	bl	100427d0 <__aeabi_i2d>
1004478c:	0004      	movs	r4, r0
1004478e:	000d      	movs	r5, r1
10044790:	2320      	movs	r3, #32
10044792:	18fb      	adds	r3, r7, r3
10044794:	881b      	ldrh	r3, [r3, #0]
10044796:	0018      	movs	r0, r3
10044798:	f7fe f81a 	bl	100427d0 <__aeabi_i2d>
1004479c:	2200      	movs	r2, #0
1004479e:	4b2e      	ldr	r3, [pc, #184]	@ (10044858 <connection_complete_event+0x234>)
100447a0:	f7fd f8c8 	bl	10041934 <__aeabi_dmul>
100447a4:	0002      	movs	r2, r0
100447a6:	000b      	movs	r3, r1
100447a8:	0020      	movs	r0, r4
100447aa:	0029      	movs	r1, r5
100447ac:	f7fd fba8 	bl	10041f00 <__aeabi_dsub>
100447b0:	0002      	movs	r2, r0
100447b2:	000b      	movs	r3, r1
100447b4:	0010      	movs	r0, r2
100447b6:	0019      	movs	r1, r3
100447b8:	2200      	movs	r2, #0
100447ba:	4b28      	ldr	r3, [pc, #160]	@ (1004485c <connection_complete_event+0x238>)
100447bc:	f7fd f8ba 	bl	10041934 <__aeabi_dmul>
100447c0:	0002      	movs	r2, r0
100447c2:	000b      	movs	r3, r1
100447c4:	0010      	movs	r0, r2
100447c6:	0019      	movs	r1, r3
100447c8:	f7fd ffc6 	bl	10042758 <__aeabi_d2iz>
100447cc:	0002      	movs	r2, r0
100447ce:	2324      	movs	r3, #36	@ 0x24
100447d0:	18fb      	adds	r3, r7, r3
100447d2:	881c      	ldrh	r4, [r3, #0]
100447d4:	2328      	movs	r3, #40	@ 0x28
100447d6:	18fb      	adds	r3, r7, r3
100447d8:	8819      	ldrh	r1, [r3, #0]
100447da:	000b      	movs	r3, r1
100447dc:	009b      	lsls	r3, r3, #2
100447de:	185b      	adds	r3, r3, r1
100447e0:	005b      	lsls	r3, r3, #1
100447e2:	481f      	ldr	r0, [pc, #124]	@ (10044860 <connection_complete_event+0x23c>)
100447e4:	9300      	str	r3, [sp, #0]
100447e6:	0023      	movs	r3, r4
100447e8:	0031      	movs	r1, r6
100447ea:	f022 fe4f 	bl	1006748c <iprintf>
              FRACTIONAL_2DIGITS(Connection_Interval*1.25),
              Peripheral_Latency,
              Supervision_Timeout * 10
              );

  if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
100447ee:	4b17      	ldr	r3, [pc, #92]	@ (1004484c <connection_complete_event+0x228>)
100447f0:	7b9b      	ldrb	r3, [r3, #14]
100447f2:	2b01      	cmp	r3, #1
100447f4:	d103      	bne.n	100447fe <connection_complete_event+0x1da>
  {
    /* Connection as client */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
100447f6:	4b15      	ldr	r3, [pc, #84]	@ (1004484c <connection_complete_event+0x228>)
100447f8:	2203      	movs	r2, #3
100447fa:	739a      	strb	r2, [r3, #14]
100447fc:	e002      	b.n	10044804 <connection_complete_event+0x1e0>
  }
  else
  {
    /* Connection as server */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
100447fe:	4b13      	ldr	r3, [pc, #76]	@ (1004484c <connection_complete_event+0x228>)
10044800:	2202      	movs	r2, #2
10044802:	739a      	strb	r2, [r3, #14]
  }
  bleAppContext.BleApplicationContext_legacy.connectionHandle = Connection_Handle;
10044804:	4b11      	ldr	r3, [pc, #68]	@ (1004484c <connection_complete_event+0x228>)
10044806:	1d3a      	adds	r2, r7, #4
10044808:	8812      	ldrh	r2, [r2, #0]
1004480a:	819a      	strh	r2, [r3, #12]

  P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_CONN_HANDLE_EVT;
1004480c:	4b15      	ldr	r3, [pc, #84]	@ (10044864 <connection_complete_event+0x240>)
1004480e:	2200      	movs	r2, #0
10044810:	701a      	strb	r2, [r3, #0]
  P2P_SERVERHandleNotification.ConnectionHandle = Connection_Handle;
10044812:	4b14      	ldr	r3, [pc, #80]	@ (10044864 <connection_complete_event+0x240>)
10044814:	1d3a      	adds	r2, r7, #4
10044816:	8812      	ldrh	r2, [r2, #0]
10044818:	805a      	strh	r2, [r3, #2]
  P2P_SERVER_APP_EvtRx(&P2P_SERVERHandleNotification);
1004481a:	4b12      	ldr	r3, [pc, #72]	@ (10044864 <connection_complete_event+0x240>)
1004481c:	0018      	movs	r0, r3
1004481e:	f001 f957 	bl	10045ad0 <P2P_SERVER_APP_EvtRx>
  EMHandleNotification.EvtOpcode = EM_CONN_HANDLE_EVT;
10044822:	4b11      	ldr	r3, [pc, #68]	@ (10044868 <connection_complete_event+0x244>)
10044824:	2200      	movs	r2, #0
10044826:	701a      	strb	r2, [r3, #0]
  EMHandleNotification.ConnectionHandle = Connection_Handle;
10044828:	4b0f      	ldr	r3, [pc, #60]	@ (10044868 <connection_complete_event+0x244>)
1004482a:	1d3a      	adds	r2, r7, #4
1004482c:	8812      	ldrh	r2, [r2, #0]
1004482e:	805a      	strh	r2, [r3, #2]
  EM_APP_EvtRx(&EMHandleNotification);
10044830:	4b0d      	ldr	r3, [pc, #52]	@ (10044868 <connection_complete_event+0x244>)
10044832:	0018      	movs	r0, r3
10044834:	f000 fd74 	bl	10045320 <EM_APP_EvtRx>

  /* USER CODE BEGIN HCI_EVT_LE_CONN_COMPLETE */
  /* The connection is done, there is no need anymore to schedule the LP ADV */
  HAL_RADIO_TIMER_StopVirtualTimer(&(bleAppContext.Advertising_mgr_timer_Id));
10044838:	4b0c      	ldr	r3, [pc, #48]	@ (1004486c <connection_complete_event+0x248>)
1004483a:	0018      	movs	r0, r3
1004483c:	f00a f8aa 	bl	1004e994 <HAL_RADIO_TIMER_StopVirtualTimer>
  /* USER CODE END HCI_EVT_LE_CONN_COMPLETE */
}/* end hci_le_connection_complete_event() */
10044840:	46bd      	mov	sp, r7
10044842:	b003      	add	sp, #12
10044844:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044846:	46c0      	nop			@ (mov r8, r8)
10044848:	1006bf00 	.word	0x1006bf00
1004484c:	200003f0 	.word	0x200003f0
10044850:	1006bf38 	.word	0x1006bf38
10044854:	1006bf7c 	.word	0x1006bf7c
10044858:	3ff40000 	.word	0x3ff40000
1004485c:	40590000 	.word	0x40590000
10044860:	1006bfc0 	.word	0x1006bfc0
10044864:	20000438 	.word	0x20000438
10044868:	2000043c 	.word	0x2000043c
1004486c:	20000400 	.word	0x20000400

10044870 <APP_BLE_Procedure_Gap_Peripheral>:
  }
  return;
}

void APP_BLE_Procedure_Gap_Peripheral(ProcGapPeripheralId_t ProcGapPeripheralId)
{
10044870:	b5f0      	push	{r4, r5, r6, r7, lr}
10044872:	b095      	sub	sp, #84	@ 0x54
10044874:	af0c      	add	r7, sp, #48	@ 0x30
10044876:	0002      	movs	r2, r0
10044878:	1dfb      	adds	r3, r7, #7
1004487a:	701a      	strb	r2, [r3, #0]
  tBleStatus status;
  uint32_t paramA = ADV_INTERVAL_MIN;
1004487c:	2380      	movs	r3, #128	@ 0x80
1004487e:	61fb      	str	r3, [r7, #28]
  uint32_t paramB = ADV_INTERVAL_MAX;
10044880:	23a0      	movs	r3, #160	@ 0xa0
10044882:	61bb      	str	r3, [r7, #24]
  uint32_t paramC, paramD;

  /* First set parameters before calling ACI APIs, only if needed */
  switch(ProcGapPeripheralId)
10044884:	1dfb      	adds	r3, r7, #7
10044886:	781b      	ldrb	r3, [r3, #0]
10044888:	2b05      	cmp	r3, #5
1004488a:	d858      	bhi.n	1004493e <APP_BLE_Procedure_Gap_Peripheral+0xce>
1004488c:	009a      	lsls	r2, r3, #2
1004488e:	4b94      	ldr	r3, [pc, #592]	@ (10044ae0 <APP_BLE_Procedure_Gap_Peripheral+0x270>)
10044890:	18d3      	adds	r3, r2, r3
10044892:	681b      	ldr	r3, [r3, #0]
10044894:	469f      	mov	pc, r3
  {
    case PROC_GAP_PERIPH_ADVERTISE_START_FAST:
    {
      paramA = ADV_INTERVAL_MIN;
10044896:	2380      	movs	r3, #128	@ 0x80
10044898:	61fb      	str	r3, [r7, #28]
      paramB = ADV_INTERVAL_MAX;
1004489a:	23a0      	movs	r3, #160	@ 0xa0
1004489c:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_FAST;
1004489e:	2304      	movs	r3, #4
100448a0:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_FAST */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_FAST */
      break;
100448a2:	e04d      	b.n	10044940 <APP_BLE_Procedure_Gap_Peripheral+0xd0>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_FAST */
    case PROC_GAP_PERIPH_ADVERTISE_START_LP:
    {
      paramA = ADV_LP_INTERVAL_MIN;
100448a4:	23c8      	movs	r3, #200	@ 0xc8
100448a6:	00db      	lsls	r3, r3, #3
100448a8:	61fb      	str	r3, [r7, #28]
      paramB = ADV_LP_INTERVAL_MAX;
100448aa:	23fa      	movs	r3, #250	@ 0xfa
100448ac:	011b      	lsls	r3, r3, #4
100448ae:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_LP;
100448b0:	2305      	movs	r3, #5
100448b2:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_LP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_LP */
      break;
100448b4:	e044      	b.n	10044940 <APP_BLE_Procedure_Gap_Peripheral+0xd0>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_LP */
    case PROC_GAP_PERIPH_ADVERTISE_STOP:
    {
      paramC = APP_BLE_IDLE;
100448b6:	2300      	movs	r3, #0
100448b8:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_STOP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_STOP */
      break;
100448ba:	e041      	b.n	10044940 <APP_BLE_Procedure_Gap_Peripheral+0xd0>
    }/* PROC_GAP_PERIPH_ADVERTISE_STOP */
    case PROC_GAP_PERIPH_CONN_PARAM_UPDATE:
    {
      paramA = CONN_INT_MS(1000);
100448bc:	23c8      	movs	r3, #200	@ 0xc8
100448be:	009b      	lsls	r3, r3, #2
100448c0:	61fb      	str	r3, [r7, #28]
      paramB = CONN_INT_MS(1000);
100448c2:	23c8      	movs	r3, #200	@ 0xc8
100448c4:	009b      	lsls	r3, r3, #2
100448c6:	61bb      	str	r3, [r7, #24]
      paramC = 0x0000;
100448c8:	2300      	movs	r3, #0
100448ca:	617b      	str	r3, [r7, #20]
      paramD = 0x01F4;
100448cc:	23fa      	movs	r3, #250	@ 0xfa
100448ce:	005b      	lsls	r3, r3, #1
100448d0:	613b      	str	r3, [r7, #16]

      /* USER CODE BEGIN CONN_PARAM_UPDATE */
      if (bleAppContext.connIntervalFlag != 0)
100448d2:	4b84      	ldr	r3, [pc, #528]	@ (10044ae4 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
100448d4:	2240      	movs	r2, #64	@ 0x40
100448d6:	5c9b      	ldrb	r3, [r3, r2]
100448d8:	2b00      	cmp	r3, #0
100448da:	d008      	beq.n	100448ee <APP_BLE_Procedure_Gap_Peripheral+0x7e>
      {
        bleAppContext.connIntervalFlag = 0;
100448dc:	4b81      	ldr	r3, [pc, #516]	@ (10044ae4 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
100448de:	2240      	movs	r2, #64	@ 0x40
100448e0:	2100      	movs	r1, #0
100448e2:	5499      	strb	r1, [r3, r2]
        paramA = CONN_INT_MS(50);
100448e4:	2328      	movs	r3, #40	@ 0x28
100448e6:	61fb      	str	r3, [r7, #28]
        paramB = CONN_INT_MS(50);
100448e8:	2328      	movs	r3, #40	@ 0x28
100448ea:	61bb      	str	r3, [r7, #24]
        bleAppContext.connIntervalFlag = 1;
        paramA = CONN_INT_MS(1000);
        paramB = CONN_INT_MS(1000);
      }
      /* USER CODE END CONN_PARAM_UPDATE */
      break;
100448ec:	e028      	b.n	10044940 <APP_BLE_Procedure_Gap_Peripheral+0xd0>
        bleAppContext.connIntervalFlag = 1;
100448ee:	4b7d      	ldr	r3, [pc, #500]	@ (10044ae4 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
100448f0:	2240      	movs	r2, #64	@ 0x40
100448f2:	2101      	movs	r1, #1
100448f4:	5499      	strb	r1, [r3, r2]
        paramA = CONN_INT_MS(1000);
100448f6:	23c8      	movs	r3, #200	@ 0xc8
100448f8:	009b      	lsls	r3, r3, #2
100448fa:	61fb      	str	r3, [r7, #28]
        paramB = CONN_INT_MS(1000);
100448fc:	23c8      	movs	r3, #200	@ 0xc8
100448fe:	009b      	lsls	r3, r3, #2
10044900:	61bb      	str	r3, [r7, #24]
      break;
10044902:	e01d      	b.n	10044940 <APP_BLE_Procedure_Gap_Peripheral+0xd0>
    }/* PROC_GAP_PERIPH_CONN_PARAM_UPDATE */
    case PROC_GAP_PERIPH_CONN_TERMINATE:
    {
      status = aci_gap_terminate(bleAppContext.BleApplicationContext_legacy.connectionHandle, 0x13);
10044904:	4b77      	ldr	r3, [pc, #476]	@ (10044ae4 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
10044906:	899b      	ldrh	r3, [r3, #12]
10044908:	250f      	movs	r5, #15
1004490a:	197c      	adds	r4, r7, r5
1004490c:	2113      	movs	r1, #19
1004490e:	0018      	movs	r0, r3
10044910:	f00d fc7e 	bl	10052210 <aci_gap_terminate>
10044914:	0003      	movs	r3, r0
10044916:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044918:	197b      	adds	r3, r7, r5
1004491a:	781b      	ldrb	r3, [r3, #0]
1004491c:	2b00      	cmp	r3, #0
1004491e:	d007      	beq.n	10044930 <APP_BLE_Procedure_Gap_Peripheral+0xc0>
      {
         APP_DBG_MSG("aci_gap_terminate failure: reason=0x%02X\n", status);
10044920:	197b      	adds	r3, r7, r5
10044922:	781a      	ldrb	r2, [r3, #0]
10044924:	4b70      	ldr	r3, [pc, #448]	@ (10044ae8 <APP_BLE_Procedure_Gap_Peripheral+0x278>)
10044926:	0011      	movs	r1, r2
10044928:	0018      	movs	r0, r3
1004492a:	f022 fdaf 	bl	1006748c <iprintf>
      else
      {
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
      }
      break;
1004492e:	e007      	b.n	10044940 <APP_BLE_Procedure_Gap_Peripheral+0xd0>
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
10044930:	4b6e      	ldr	r3, [pc, #440]	@ (10044aec <APP_BLE_Procedure_Gap_Peripheral+0x27c>)
10044932:	0018      	movs	r0, r3
10044934:	f022 fe1a 	bl	1006756c <puts>
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
10044938:	f000 f8f8 	bl	10044b2c <gap_cmd_resp_wait>
      break;
1004493c:	e000      	b.n	10044940 <APP_BLE_Procedure_Gap_Peripheral+0xd0>
    /* PROC_GAP_PERIPH_CONN_TERMINATE */
    /* USER CODE BEGIN GAP_PERIPHERAL_1 */

    /* USER CODE END GAP_PERIPHERAL_1 */
    default:
      break;
1004493e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Call ACI APIs */
  switch(ProcGapPeripheralId)
10044940:	1dfb      	adds	r3, r7, #7
10044942:	781b      	ldrb	r3, [r3, #0]
10044944:	2b06      	cmp	r3, #6
10044946:	d100      	bne.n	1004494a <APP_BLE_Procedure_Gap_Peripheral+0xda>
10044948:	e0c2      	b.n	10044ad0 <APP_BLE_Procedure_Gap_Peripheral+0x260>
1004494a:	dd00      	ble.n	1004494e <APP_BLE_Procedure_Gap_Peripheral+0xde>
1004494c:	e0c2      	b.n	10044ad4 <APP_BLE_Procedure_Gap_Peripheral+0x264>
1004494e:	2b04      	cmp	r3, #4
10044950:	d100      	bne.n	10044954 <APP_BLE_Procedure_Gap_Peripheral+0xe4>
10044952:	e09a      	b.n	10044a8a <APP_BLE_Procedure_Gap_Peripheral+0x21a>
10044954:	dd00      	ble.n	10044958 <APP_BLE_Procedure_Gap_Peripheral+0xe8>
10044956:	e0bd      	b.n	10044ad4 <APP_BLE_Procedure_Gap_Peripheral+0x264>
10044958:	2b01      	cmp	r3, #1
1004495a:	dc02      	bgt.n	10044962 <APP_BLE_Procedure_Gap_Peripheral+0xf2>
1004495c:	2b00      	cmp	r3, #0
1004495e:	da03      	bge.n	10044968 <APP_BLE_Procedure_Gap_Peripheral+0xf8>
    }/* PROC_GAP_PERIPH_SET_BROADCAST_MODE */
    /* USER CODE BEGIN GAP_PERIPHERAL_2 */

    /* USER CODE END GAP_PERIPHERAL_2 */
    default:
      break;
10044960:	e0b8      	b.n	10044ad4 <APP_BLE_Procedure_Gap_Peripheral+0x264>
  switch(ProcGapPeripheralId)
10044962:	2b02      	cmp	r3, #2
10044964:	d073      	beq.n	10044a4e <APP_BLE_Procedure_Gap_Peripheral+0x1de>
      break;
10044966:	e0b5      	b.n	10044ad4 <APP_BLE_Procedure_Gap_Peripheral+0x264>
      Advertising_Set_Parameters_t Advertising_Set_Parameters = {0};
10044968:	2308      	movs	r3, #8
1004496a:	18fb      	adds	r3, r7, r3
1004496c:	0018      	movs	r0, r3
1004496e:	2306      	movs	r3, #6
10044970:	001a      	movs	r2, r3
10044972:	2100      	movs	r1, #0
10044974:	f022 ffd6 	bl	10067924 <memset>
      status = aci_gap_set_advertising_configuration(0,
10044978:	250f      	movs	r5, #15
1004497a:	197c      	adds	r4, r7, r5
1004497c:	69fa      	ldr	r2, [r7, #28]
1004497e:	2300      	movs	r3, #0
10044980:	930a      	str	r3, [sp, #40]	@ 0x28
10044982:	2300      	movs	r3, #0
10044984:	9309      	str	r3, [sp, #36]	@ 0x24
10044986:	2301      	movs	r3, #1
10044988:	9308      	str	r3, [sp, #32]
1004498a:	2300      	movs	r3, #0
1004498c:	9307      	str	r3, [sp, #28]
1004498e:	2301      	movs	r3, #1
10044990:	9306      	str	r3, [sp, #24]
10044992:	2300      	movs	r3, #0
10044994:	9305      	str	r3, [sp, #20]
10044996:	2300      	movs	r3, #0
10044998:	9304      	str	r3, [sp, #16]
1004499a:	2300      	movs	r3, #0
1004499c:	9303      	str	r3, [sp, #12]
1004499e:	2300      	movs	r3, #0
100449a0:	9302      	str	r3, [sp, #8]
100449a2:	2307      	movs	r3, #7
100449a4:	9301      	str	r3, [sp, #4]
100449a6:	69bb      	ldr	r3, [r7, #24]
100449a8:	9300      	str	r3, [sp, #0]
100449aa:	0013      	movs	r3, r2
100449ac:	2213      	movs	r2, #19
100449ae:	2102      	movs	r1, #2
100449b0:	2000      	movs	r0, #0
100449b2:	f00e f88b 	bl	10052acc <aci_gap_set_advertising_configuration>
100449b6:	0003      	movs	r3, r0
100449b8:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
100449ba:	197b      	adds	r3, r7, r5
100449bc:	781b      	ldrb	r3, [r3, #0]
100449be:	2b00      	cmp	r3, #0
100449c0:	d007      	beq.n	100449d2 <APP_BLE_Procedure_Gap_Peripheral+0x162>
        APP_DBG_MSG("==>> aci_gap_set_advertising_configuration - fail, result: 0x%02X\n", status);
100449c2:	197b      	adds	r3, r7, r5
100449c4:	781a      	ldrb	r2, [r3, #0]
100449c6:	4b4a      	ldr	r3, [pc, #296]	@ (10044af0 <APP_BLE_Procedure_Gap_Peripheral+0x280>)
100449c8:	0011      	movs	r1, r2
100449ca:	0018      	movs	r0, r3
100449cc:	f022 fd5e 	bl	1006748c <iprintf>
100449d0:	e007      	b.n	100449e2 <APP_BLE_Procedure_Gap_Peripheral+0x172>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
100449d2:	697b      	ldr	r3, [r7, #20]
100449d4:	b2da      	uxtb	r2, r3
100449d6:	4b43      	ldr	r3, [pc, #268]	@ (10044ae4 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
100449d8:	739a      	strb	r2, [r3, #14]
        APP_DBG_MSG("==>> Success: aci_gap_set_advertising_configuration\n");
100449da:	4b46      	ldr	r3, [pc, #280]	@ (10044af4 <APP_BLE_Procedure_Gap_Peripheral+0x284>)
100449dc:	0018      	movs	r0, r3
100449de:	f022 fdc5 	bl	1006756c <puts>
      status = aci_gap_set_advertising_data(0, ADV_COMPLETE_DATA, sizeof(a_AdvData), (uint8_t*) a_AdvData);
100449e2:	250f      	movs	r5, #15
100449e4:	197c      	adds	r4, r7, r5
100449e6:	4b44      	ldr	r3, [pc, #272]	@ (10044af8 <APP_BLE_Procedure_Gap_Peripheral+0x288>)
100449e8:	221c      	movs	r2, #28
100449ea:	2103      	movs	r1, #3
100449ec:	2000      	movs	r0, #0
100449ee:	f00e f8a2 	bl	10052b36 <aci_gap_set_advertising_data>
100449f2:	0003      	movs	r3, r0
100449f4:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
100449f6:	197b      	adds	r3, r7, r5
100449f8:	781b      	ldrb	r3, [r3, #0]
100449fa:	2b00      	cmp	r3, #0
100449fc:	d007      	beq.n	10044a0e <APP_BLE_Procedure_Gap_Peripheral+0x19e>
        APP_DBG_MSG("==>> aci_gap_set_advertising_data Failed, result: 0x%02X\n", status);
100449fe:	197b      	adds	r3, r7, r5
10044a00:	781a      	ldrb	r2, [r3, #0]
10044a02:	4b3e      	ldr	r3, [pc, #248]	@ (10044afc <APP_BLE_Procedure_Gap_Peripheral+0x28c>)
10044a04:	0011      	movs	r1, r2
10044a06:	0018      	movs	r0, r3
10044a08:	f022 fd40 	bl	1006748c <iprintf>
10044a0c:	e003      	b.n	10044a16 <APP_BLE_Procedure_Gap_Peripheral+0x1a6>
        APP_DBG_MSG("==>> Success: aci_gap_set_advertising_data\n");
10044a0e:	4b3c      	ldr	r3, [pc, #240]	@ (10044b00 <APP_BLE_Procedure_Gap_Peripheral+0x290>)
10044a10:	0018      	movs	r0, r3
10044a12:	f022 fdab 	bl	1006756c <puts>
      status = aci_gap_set_advertising_enable(ENABLE, 1, &Advertising_Set_Parameters);
10044a16:	250f      	movs	r5, #15
10044a18:	197c      	adds	r4, r7, r5
10044a1a:	2308      	movs	r3, #8
10044a1c:	18fb      	adds	r3, r7, r3
10044a1e:	001a      	movs	r2, r3
10044a20:	2101      	movs	r1, #1
10044a22:	2001      	movs	r0, #1
10044a24:	f00e f88b 	bl	10052b3e <aci_gap_set_advertising_enable>
10044a28:	0003      	movs	r3, r0
10044a2a:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044a2c:	197b      	adds	r3, r7, r5
10044a2e:	781b      	ldrb	r3, [r3, #0]
10044a30:	2b00      	cmp	r3, #0
10044a32:	d007      	beq.n	10044a44 <APP_BLE_Procedure_Gap_Peripheral+0x1d4>
        APP_DBG_MSG("==>> aci_gap_set_advertising_enable Failed, result: 0x%02X\n", status);
10044a34:	197b      	adds	r3, r7, r5
10044a36:	781a      	ldrb	r2, [r3, #0]
10044a38:	4b32      	ldr	r3, [pc, #200]	@ (10044b04 <APP_BLE_Procedure_Gap_Peripheral+0x294>)
10044a3a:	0011      	movs	r1, r2
10044a3c:	0018      	movs	r0, r3
10044a3e:	f022 fd25 	bl	1006748c <iprintf>
      break;
10044a42:	e048      	b.n	10044ad6 <APP_BLE_Procedure_Gap_Peripheral+0x266>
        APP_DBG_MSG("==>> Success: aci_gap_set_advertising_enable\n");
10044a44:	4b30      	ldr	r3, [pc, #192]	@ (10044b08 <APP_BLE_Procedure_Gap_Peripheral+0x298>)
10044a46:	0018      	movs	r0, r3
10044a48:	f022 fd90 	bl	1006756c <puts>
      break;
10044a4c:	e043      	b.n	10044ad6 <APP_BLE_Procedure_Gap_Peripheral+0x266>
      status = aci_gap_set_advertising_enable(DISABLE, 0, NULL);
10044a4e:	250f      	movs	r5, #15
10044a50:	197c      	adds	r4, r7, r5
10044a52:	2200      	movs	r2, #0
10044a54:	2100      	movs	r1, #0
10044a56:	2000      	movs	r0, #0
10044a58:	f00e f871 	bl	10052b3e <aci_gap_set_advertising_enable>
10044a5c:	0003      	movs	r3, r0
10044a5e:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044a60:	197b      	adds	r3, r7, r5
10044a62:	781b      	ldrb	r3, [r3, #0]
10044a64:	2b00      	cmp	r3, #0
10044a66:	d007      	beq.n	10044a78 <APP_BLE_Procedure_Gap_Peripheral+0x208>
        APP_DBG_MSG("Disable advertising - fail, result: 0x%02X\n",status);
10044a68:	197b      	adds	r3, r7, r5
10044a6a:	781a      	ldrb	r2, [r3, #0]
10044a6c:	4b27      	ldr	r3, [pc, #156]	@ (10044b0c <APP_BLE_Procedure_Gap_Peripheral+0x29c>)
10044a6e:	0011      	movs	r1, r2
10044a70:	0018      	movs	r0, r3
10044a72:	f022 fd0b 	bl	1006748c <iprintf>
      break;
10044a76:	e02e      	b.n	10044ad6 <APP_BLE_Procedure_Gap_Peripheral+0x266>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
10044a78:	697b      	ldr	r3, [r7, #20]
10044a7a:	b2da      	uxtb	r2, r3
10044a7c:	4b19      	ldr	r3, [pc, #100]	@ (10044ae4 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
10044a7e:	739a      	strb	r2, [r3, #14]
        APP_DBG_MSG("==>> Disable advertising - Success\n");
10044a80:	4b23      	ldr	r3, [pc, #140]	@ (10044b10 <APP_BLE_Procedure_Gap_Peripheral+0x2a0>)
10044a82:	0018      	movs	r0, r3
10044a84:	f022 fd72 	bl	1006756c <puts>
      break;
10044a88:	e025      	b.n	10044ad6 <APP_BLE_Procedure_Gap_Peripheral+0x266>
       status = aci_l2cap_connection_parameter_update_req(
10044a8a:	4b16      	ldr	r3, [pc, #88]	@ (10044ae4 <APP_BLE_Procedure_Gap_Peripheral+0x274>)
10044a8c:	8998      	ldrh	r0, [r3, #12]
10044a8e:	69fb      	ldr	r3, [r7, #28]
10044a90:	b299      	uxth	r1, r3
10044a92:	69bb      	ldr	r3, [r7, #24]
10044a94:	b29a      	uxth	r2, r3
10044a96:	697b      	ldr	r3, [r7, #20]
10044a98:	b29d      	uxth	r5, r3
10044a9a:	693b      	ldr	r3, [r7, #16]
10044a9c:	b29b      	uxth	r3, r3
10044a9e:	260f      	movs	r6, #15
10044aa0:	19bc      	adds	r4, r7, r6
10044aa2:	9300      	str	r3, [sp, #0]
10044aa4:	002b      	movs	r3, r5
10044aa6:	f00d fcdb 	bl	10052460 <aci_l2cap_connection_parameter_update_req>
10044aaa:	0003      	movs	r3, r0
10044aac:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10044aae:	19bb      	adds	r3, r7, r6
10044ab0:	781b      	ldrb	r3, [r3, #0]
10044ab2:	2b00      	cmp	r3, #0
10044ab4:	d007      	beq.n	10044ac6 <APP_BLE_Procedure_Gap_Peripheral+0x256>
        APP_DBG_MSG("aci_l2cap_connection_parameter_update_req - fail, result: 0x%02X\n",status);
10044ab6:	19bb      	adds	r3, r7, r6
10044ab8:	781a      	ldrb	r2, [r3, #0]
10044aba:	4b16      	ldr	r3, [pc, #88]	@ (10044b14 <APP_BLE_Procedure_Gap_Peripheral+0x2a4>)
10044abc:	0011      	movs	r1, r2
10044abe:	0018      	movs	r0, r3
10044ac0:	f022 fce4 	bl	1006748c <iprintf>
      break;
10044ac4:	e007      	b.n	10044ad6 <APP_BLE_Procedure_Gap_Peripheral+0x266>
        APP_DBG_MSG("==>> aci_l2cap_connection_parameter_update_req - Success\n");
10044ac6:	4b14      	ldr	r3, [pc, #80]	@ (10044b18 <APP_BLE_Procedure_Gap_Peripheral+0x2a8>)
10044ac8:	0018      	movs	r0, r3
10044aca:	f022 fd4f 	bl	1006756c <puts>
      break;
10044ace:	e002      	b.n	10044ad6 <APP_BLE_Procedure_Gap_Peripheral+0x266>
      break;
10044ad0:	46c0      	nop			@ (mov r8, r8)
10044ad2:	e000      	b.n	10044ad6 <APP_BLE_Procedure_Gap_Peripheral+0x266>
      break;
10044ad4:	46c0      	nop			@ (mov r8, r8)
  }
  return;
10044ad6:	46c0      	nop			@ (mov r8, r8)
}
10044ad8:	46bd      	mov	sp, r7
10044ada:	b009      	add	sp, #36	@ 0x24
10044adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044ade:	46c0      	nop			@ (mov r8, r8)
10044ae0:	1006ca0c 	.word	0x1006ca0c
10044ae4:	200003f0 	.word	0x200003f0
10044ae8:	1006c0dc 	.word	0x1006c0dc
10044aec:	1006c108 	.word	0x1006c108
10044af0:	1006c190 	.word	0x1006c190
10044af4:	1006c1d4 	.word	0x1006c1d4
10044af8:	20001318 	.word	0x20001318
10044afc:	1006c208 	.word	0x1006c208
10044b00:	1006c244 	.word	0x1006c244
10044b04:	1006c270 	.word	0x1006c270
10044b08:	1006c2ac 	.word	0x1006c2ac
10044b0c:	1006c2dc 	.word	0x1006c2dc
10044b10:	1006c308 	.word	0x1006c308
10044b14:	1006c32c 	.word	0x1006c32c
10044b18:	1006c370 	.word	0x1006c370

10044b1c <gap_cmd_resp_release>:
/* USER CODE BEGIN FD*/

/* USER CODE END FD*/

static void gap_cmd_resp_release(void)
{
10044b1c:	b580      	push	{r7, lr}
10044b1e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
10044b20:	2001      	movs	r0, #1
10044b22:	f00d febb 	bl	1005289c <UTIL_SEQ_SetEvt>
  return;
10044b26:	46c0      	nop			@ (mov r8, r8)
}
10044b28:	46bd      	mov	sp, r7
10044b2a:	bd80      	pop	{r7, pc}

10044b2c <gap_cmd_resp_wait>:

static void gap_cmd_resp_wait(void)
{
10044b2c:	b580      	push	{r7, lr}
10044b2e:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
10044b30:	2001      	movs	r0, #1
10044b32:	f00d fed1 	bl	100528d8 <UTIL_SEQ_WaitEvt>
  return;
10044b36:	46c0      	nop			@ (mov r8, r8)
}
10044b38:	46bd      	mov	sp, r7
10044b3a:	bd80      	pop	{r7, pc}

10044b3c <Adv_Cancel_Req>:
/* USER CODE BEGIN FD_LOCAL_FUNCTION */

static void Adv_Cancel_Req(void *arg)
{
10044b3c:	b580      	push	{r7, lr}
10044b3e:	b082      	sub	sp, #8
10044b40:	af00      	add	r7, sp, #0
10044b42:	6078      	str	r0, [r7, #4]
  APP_DBG_MSG("Adv_Cancel_Req\n");
10044b44:	4b05      	ldr	r3, [pc, #20]	@ (10044b5c <Adv_Cancel_Req+0x20>)
10044b46:	0018      	movs	r0, r3
10044b48:	f022 fd10 	bl	1006756c <puts>
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SEQ_PRIO_0);
10044b4c:	2100      	movs	r1, #0
10044b4e:	2040      	movs	r0, #64	@ 0x40
10044b50:	f00d fe78 	bl	10052844 <UTIL_SEQ_SetTask>
  return;
10044b54:	46c0      	nop			@ (mov r8, r8)
}
10044b56:	46bd      	mov	sp, r7
10044b58:	b002      	add	sp, #8
10044b5a:	bd80      	pop	{r7, pc}
10044b5c:	1006c3ac 	.word	0x1006c3ac

10044b60 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(void *arg)
{
10044b60:	b580      	push	{r7, lr}
10044b62:	b082      	sub	sp, #8
10044b64:	af00      	add	r7, sp, #0
10044b66:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN);
10044b68:	2001      	movs	r0, #1
10044b6a:	f006 fdcf 	bl	1004b70c <BSP_LED_Off>
  return;
10044b6e:	46c0      	nop			@ (mov r8, r8)
}
10044b70:	46bd      	mov	sp, r7
10044b72:	b002      	add	sp, #8
10044b74:	bd80      	pop	{r7, pc}
	...

10044b78 <Adv_Cancel>:

static void Adv_Cancel(void)
{
10044b78:	b580      	push	{r7, lr}
10044b7a:	af00      	add	r7, sp, #0
  BSP_LED_Off(LED_GREEN);
10044b7c:	2001      	movs	r0, #1
10044b7e:	f006 fdc5 	bl	1004b70c <BSP_LED_Off>

  APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_STOP);
10044b82:	2002      	movs	r0, #2
10044b84:	f7ff fe74 	bl	10044870 <APP_BLE_Procedure_Gap_Peripheral>
  bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10044b88:	4b02      	ldr	r3, [pc, #8]	@ (10044b94 <Adv_Cancel+0x1c>)
10044b8a:	2200      	movs	r2, #0
10044b8c:	739a      	strb	r2, [r3, #14]

  return;
10044b8e:	46c0      	nop			@ (mov r8, r8)
}
10044b90:	46bd      	mov	sp, r7
10044b92:	bd80      	pop	{r7, pc}
10044b94:	200003f0 	.word	0x200003f0

10044b98 <fill_advData>:

static void fill_advData(uint8_t *p_adv_data, uint8_t tab_size, const uint8_t* p_bd_addr)
{
10044b98:	b5b0      	push	{r4, r5, r7, lr}
10044b9a:	b086      	sub	sp, #24
10044b9c:	af00      	add	r7, sp, #0
10044b9e:	60f8      	str	r0, [r7, #12]
10044ba0:	607a      	str	r2, [r7, #4]
10044ba2:	230b      	movs	r3, #11
10044ba4:	18fb      	adds	r3, r7, r3
10044ba6:	1c0a      	adds	r2, r1, #0
10044ba8:	701a      	strb	r2, [r3, #0]
  uint16_t i =0;
10044baa:	2316      	movs	r3, #22
10044bac:	18fb      	adds	r3, r7, r3
10044bae:	2200      	movs	r2, #0
10044bb0:	801a      	strh	r2, [r3, #0]
  uint8_t bd_addr_1, bd_addr_0;
  uint8_t ad_length, ad_type;  
  
  while(i < tab_size)
10044bb2:	e115      	b.n	10044de0 <fill_advData+0x248>
  {
    ad_length = p_adv_data[i];
10044bb4:	2116      	movs	r1, #22
10044bb6:	187b      	adds	r3, r7, r1
10044bb8:	881b      	ldrh	r3, [r3, #0]
10044bba:	68fa      	ldr	r2, [r7, #12]
10044bbc:	18d2      	adds	r2, r2, r3
10044bbe:	2315      	movs	r3, #21
10044bc0:	18fb      	adds	r3, r7, r3
10044bc2:	7812      	ldrb	r2, [r2, #0]
10044bc4:	701a      	strb	r2, [r3, #0]
    ad_type = p_adv_data[i + 1];
10044bc6:	187b      	adds	r3, r7, r1
10044bc8:	881b      	ldrh	r3, [r3, #0]
10044bca:	3301      	adds	r3, #1
10044bcc:	68fa      	ldr	r2, [r7, #12]
10044bce:	18d2      	adds	r2, r2, r3
10044bd0:	2114      	movs	r1, #20
10044bd2:	187b      	adds	r3, r7, r1
10044bd4:	7812      	ldrb	r2, [r2, #0]
10044bd6:	701a      	strb	r2, [r3, #0]
      
    switch (ad_type)
10044bd8:	187b      	adds	r3, r7, r1
10044bda:	781b      	ldrb	r3, [r3, #0]
10044bdc:	2bff      	cmp	r3, #255	@ 0xff
10044bde:	d100      	bne.n	10044be2 <fill_advData+0x4a>
10044be0:	e07c      	b.n	10044cdc <fill_advData+0x144>
10044be2:	dd00      	ble.n	10044be6 <fill_advData+0x4e>
10044be4:	e0e9      	b.n	10044dba <fill_advData+0x222>
10044be6:	2b0a      	cmp	r3, #10
10044be8:	d100      	bne.n	10044bec <fill_advData+0x54>
10044bea:	e0e8      	b.n	10044dbe <fill_advData+0x226>
10044bec:	dd00      	ble.n	10044bf0 <fill_advData+0x58>
10044bee:	e0e4      	b.n	10044dba <fill_advData+0x222>
10044bf0:	2b01      	cmp	r3, #1
10044bf2:	d100      	bne.n	10044bf6 <fill_advData+0x5e>
10044bf4:	e0e5      	b.n	10044dc2 <fill_advData+0x22a>
10044bf6:	2b09      	cmp	r3, #9
10044bf8:	d000      	beq.n	10044bfc <fill_advData+0x64>
        p_adv_data[i+14] = p_bd_addr[1];
        p_adv_data[i+15] = p_bd_addr[0]; /* LSB BD address */
        break;
      }
    default:
      break;
10044bfa:	e0de      	b.n	10044dba <fill_advData+0x222>
        if((p_adv_data[i + ad_length] == 'X') && (p_adv_data[i + ad_length - 1] == 'X'))
10044bfc:	2016      	movs	r0, #22
10044bfe:	183b      	adds	r3, r7, r0
10044c00:	881a      	ldrh	r2, [r3, #0]
10044c02:	2415      	movs	r4, #21
10044c04:	193b      	adds	r3, r7, r4
10044c06:	781b      	ldrb	r3, [r3, #0]
10044c08:	18d3      	adds	r3, r2, r3
10044c0a:	001a      	movs	r2, r3
10044c0c:	68fb      	ldr	r3, [r7, #12]
10044c0e:	189b      	adds	r3, r3, r2
10044c10:	781b      	ldrb	r3, [r3, #0]
10044c12:	2b58      	cmp	r3, #88	@ 0x58
10044c14:	d000      	beq.n	10044c18 <fill_advData+0x80>
10044c16:	e0d6      	b.n	10044dc6 <fill_advData+0x22e>
10044c18:	183b      	adds	r3, r7, r0
10044c1a:	881a      	ldrh	r2, [r3, #0]
10044c1c:	193b      	adds	r3, r7, r4
10044c1e:	781b      	ldrb	r3, [r3, #0]
10044c20:	18d3      	adds	r3, r2, r3
10044c22:	3b01      	subs	r3, #1
10044c24:	68fa      	ldr	r2, [r7, #12]
10044c26:	18d3      	adds	r3, r2, r3
10044c28:	781b      	ldrb	r3, [r3, #0]
10044c2a:	2b58      	cmp	r3, #88	@ 0x58
10044c2c:	d000      	beq.n	10044c30 <fill_advData+0x98>
10044c2e:	e0ca      	b.n	10044dc6 <fill_advData+0x22e>
          bd_addr_1 = ((p_bd_addr[0] & 0xF0)>>4);
10044c30:	687b      	ldr	r3, [r7, #4]
10044c32:	781a      	ldrb	r2, [r3, #0]
10044c34:	2513      	movs	r5, #19
10044c36:	197b      	adds	r3, r7, r5
10044c38:	0912      	lsrs	r2, r2, #4
10044c3a:	701a      	strb	r2, [r3, #0]
          bd_addr_0 = (p_bd_addr[0] & 0xF);
10044c3c:	687b      	ldr	r3, [r7, #4]
10044c3e:	781a      	ldrb	r2, [r3, #0]
10044c40:	2312      	movs	r3, #18
10044c42:	18fb      	adds	r3, r7, r3
10044c44:	210f      	movs	r1, #15
10044c46:	400a      	ands	r2, r1
10044c48:	701a      	strb	r2, [r3, #0]
          if(bd_addr_1 > 0x09)
10044c4a:	0029      	movs	r1, r5
10044c4c:	187b      	adds	r3, r7, r1
10044c4e:	781b      	ldrb	r3, [r3, #0]
10044c50:	2b09      	cmp	r3, #9
10044c52:	d90d      	bls.n	10044c70 <fill_advData+0xd8>
            p_adv_data[i + ad_length - 1] = bd_addr_1 + '7';
10044c54:	183b      	adds	r3, r7, r0
10044c56:	881a      	ldrh	r2, [r3, #0]
10044c58:	193b      	adds	r3, r7, r4
10044c5a:	781b      	ldrb	r3, [r3, #0]
10044c5c:	18d3      	adds	r3, r2, r3
10044c5e:	3b01      	subs	r3, #1
10044c60:	68fa      	ldr	r2, [r7, #12]
10044c62:	18d3      	adds	r3, r2, r3
10044c64:	187a      	adds	r2, r7, r1
10044c66:	7812      	ldrb	r2, [r2, #0]
10044c68:	3237      	adds	r2, #55	@ 0x37
10044c6a:	b2d2      	uxtb	r2, r2
10044c6c:	701a      	strb	r2, [r3, #0]
10044c6e:	e00f      	b.n	10044c90 <fill_advData+0xf8>
            p_adv_data[i + ad_length - 1] = bd_addr_1 + '0';
10044c70:	2316      	movs	r3, #22
10044c72:	18fb      	adds	r3, r7, r3
10044c74:	881a      	ldrh	r2, [r3, #0]
10044c76:	2315      	movs	r3, #21
10044c78:	18fb      	adds	r3, r7, r3
10044c7a:	781b      	ldrb	r3, [r3, #0]
10044c7c:	18d3      	adds	r3, r2, r3
10044c7e:	3b01      	subs	r3, #1
10044c80:	68fa      	ldr	r2, [r7, #12]
10044c82:	18d3      	adds	r3, r2, r3
10044c84:	2213      	movs	r2, #19
10044c86:	18ba      	adds	r2, r7, r2
10044c88:	7812      	ldrb	r2, [r2, #0]
10044c8a:	3230      	adds	r2, #48	@ 0x30
10044c8c:	b2d2      	uxtb	r2, r2
10044c8e:	701a      	strb	r2, [r3, #0]
          if(bd_addr_0 > 0x09)
10044c90:	2112      	movs	r1, #18
10044c92:	187b      	adds	r3, r7, r1
10044c94:	781b      	ldrb	r3, [r3, #0]
10044c96:	2b09      	cmp	r3, #9
10044c98:	d90f      	bls.n	10044cba <fill_advData+0x122>
            p_adv_data[i + ad_length] = bd_addr_0 + '7';
10044c9a:	2316      	movs	r3, #22
10044c9c:	18fb      	adds	r3, r7, r3
10044c9e:	881a      	ldrh	r2, [r3, #0]
10044ca0:	2315      	movs	r3, #21
10044ca2:	18fb      	adds	r3, r7, r3
10044ca4:	781b      	ldrb	r3, [r3, #0]
10044ca6:	18d3      	adds	r3, r2, r3
10044ca8:	001a      	movs	r2, r3
10044caa:	68fb      	ldr	r3, [r7, #12]
10044cac:	189b      	adds	r3, r3, r2
10044cae:	187a      	adds	r2, r7, r1
10044cb0:	7812      	ldrb	r2, [r2, #0]
10044cb2:	3237      	adds	r2, #55	@ 0x37
10044cb4:	b2d2      	uxtb	r2, r2
10044cb6:	701a      	strb	r2, [r3, #0]
        break;
10044cb8:	e085      	b.n	10044dc6 <fill_advData+0x22e>
            p_adv_data[i + ad_length] = bd_addr_0 + '0';
10044cba:	2316      	movs	r3, #22
10044cbc:	18fb      	adds	r3, r7, r3
10044cbe:	881a      	ldrh	r2, [r3, #0]
10044cc0:	2315      	movs	r3, #21
10044cc2:	18fb      	adds	r3, r7, r3
10044cc4:	781b      	ldrb	r3, [r3, #0]
10044cc6:	18d3      	adds	r3, r2, r3
10044cc8:	001a      	movs	r2, r3
10044cca:	68fb      	ldr	r3, [r7, #12]
10044ccc:	189b      	adds	r3, r3, r2
10044cce:	2212      	movs	r2, #18
10044cd0:	18ba      	adds	r2, r7, r2
10044cd2:	7812      	ldrb	r2, [r2, #0]
10044cd4:	3230      	adds	r2, #48	@ 0x30
10044cd6:	b2d2      	uxtb	r2, r2
10044cd8:	701a      	strb	r2, [r3, #0]
        break;
10044cda:	e074      	b.n	10044dc6 <fill_advData+0x22e>
        p_adv_data[i+2] = ST_MANUF_ID_LSB;
10044cdc:	2016      	movs	r0, #22
10044cde:	183b      	adds	r3, r7, r0
10044ce0:	881b      	ldrh	r3, [r3, #0]
10044ce2:	3302      	adds	r3, #2
10044ce4:	68fa      	ldr	r2, [r7, #12]
10044ce6:	18d3      	adds	r3, r2, r3
10044ce8:	2230      	movs	r2, #48	@ 0x30
10044cea:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+3] = ST_MANUF_ID_MSB;
10044cec:	183b      	adds	r3, r7, r0
10044cee:	881b      	ldrh	r3, [r3, #0]
10044cf0:	3303      	adds	r3, #3
10044cf2:	68fa      	ldr	r2, [r7, #12]
10044cf4:	18d3      	adds	r3, r2, r3
10044cf6:	2200      	movs	r2, #0
10044cf8:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+4] = BLUESTSDK_V2; /* blueST SDK version */
10044cfa:	183b      	adds	r3, r7, r0
10044cfc:	881b      	ldrh	r3, [r3, #0]
10044cfe:	3304      	adds	r3, #4
10044d00:	68fa      	ldr	r2, [r7, #12]
10044d02:	18d3      	adds	r3, r2, r3
10044d04:	2202      	movs	r2, #2
10044d06:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+5] = BOARD_ID_NUCLEO_WB0; /* Board ID */
10044d08:	183b      	adds	r3, r7, r0
10044d0a:	881b      	ldrh	r3, [r3, #0]
10044d0c:	3305      	adds	r3, #5
10044d0e:	68fa      	ldr	r2, [r7, #12]
10044d10:	18d3      	adds	r3, r2, r3
10044d12:	228d      	movs	r2, #141	@ 0x8d
10044d14:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+6] = FW_ID_P2P_SERVER; /* FW ID */
10044d16:	183b      	adds	r3, r7, r0
10044d18:	881b      	ldrh	r3, [r3, #0]
10044d1a:	3306      	adds	r3, #6
10044d1c:	68fa      	ldr	r2, [r7, #12]
10044d1e:	18d3      	adds	r3, r2, r3
10044d20:	2283      	movs	r2, #131	@ 0x83
10044d22:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+7] = 0x00; /* FW data 1 */
10044d24:	183b      	adds	r3, r7, r0
10044d26:	881b      	ldrh	r3, [r3, #0]
10044d28:	3307      	adds	r3, #7
10044d2a:	68fa      	ldr	r2, [r7, #12]
10044d2c:	18d3      	adds	r3, r2, r3
10044d2e:	2200      	movs	r2, #0
10044d30:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+8] = 0x00; /* FW data 2 */
10044d32:	183b      	adds	r3, r7, r0
10044d34:	881b      	ldrh	r3, [r3, #0]
10044d36:	3308      	adds	r3, #8
10044d38:	68fa      	ldr	r2, [r7, #12]
10044d3a:	18d3      	adds	r3, r2, r3
10044d3c:	2200      	movs	r2, #0
10044d3e:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+9] = 0x00; /* FW data 3 */
10044d40:	183b      	adds	r3, r7, r0
10044d42:	881b      	ldrh	r3, [r3, #0]
10044d44:	3309      	adds	r3, #9
10044d46:	68fa      	ldr	r2, [r7, #12]
10044d48:	18d3      	adds	r3, r2, r3
10044d4a:	2200      	movs	r2, #0
10044d4c:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+10] = p_bd_addr[5]; /* MSB BD address */
10044d4e:	687b      	ldr	r3, [r7, #4]
10044d50:	1d5a      	adds	r2, r3, #5
10044d52:	183b      	adds	r3, r7, r0
10044d54:	881b      	ldrh	r3, [r3, #0]
10044d56:	330a      	adds	r3, #10
10044d58:	68f9      	ldr	r1, [r7, #12]
10044d5a:	18cb      	adds	r3, r1, r3
10044d5c:	7812      	ldrb	r2, [r2, #0]
10044d5e:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+11] = p_bd_addr[4];
10044d60:	687b      	ldr	r3, [r7, #4]
10044d62:	1d1a      	adds	r2, r3, #4
10044d64:	183b      	adds	r3, r7, r0
10044d66:	881b      	ldrh	r3, [r3, #0]
10044d68:	330b      	adds	r3, #11
10044d6a:	68f9      	ldr	r1, [r7, #12]
10044d6c:	18cb      	adds	r3, r1, r3
10044d6e:	7812      	ldrb	r2, [r2, #0]
10044d70:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+12] = p_bd_addr[3];
10044d72:	687b      	ldr	r3, [r7, #4]
10044d74:	1cda      	adds	r2, r3, #3
10044d76:	183b      	adds	r3, r7, r0
10044d78:	881b      	ldrh	r3, [r3, #0]
10044d7a:	330c      	adds	r3, #12
10044d7c:	68f9      	ldr	r1, [r7, #12]
10044d7e:	18cb      	adds	r3, r1, r3
10044d80:	7812      	ldrb	r2, [r2, #0]
10044d82:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+13] = p_bd_addr[2];
10044d84:	687b      	ldr	r3, [r7, #4]
10044d86:	1c9a      	adds	r2, r3, #2
10044d88:	183b      	adds	r3, r7, r0
10044d8a:	881b      	ldrh	r3, [r3, #0]
10044d8c:	330d      	adds	r3, #13
10044d8e:	68f9      	ldr	r1, [r7, #12]
10044d90:	18cb      	adds	r3, r1, r3
10044d92:	7812      	ldrb	r2, [r2, #0]
10044d94:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+14] = p_bd_addr[1];
10044d96:	687b      	ldr	r3, [r7, #4]
10044d98:	1c5a      	adds	r2, r3, #1
10044d9a:	183b      	adds	r3, r7, r0
10044d9c:	881b      	ldrh	r3, [r3, #0]
10044d9e:	330e      	adds	r3, #14
10044da0:	68f9      	ldr	r1, [r7, #12]
10044da2:	18cb      	adds	r3, r1, r3
10044da4:	7812      	ldrb	r2, [r2, #0]
10044da6:	701a      	strb	r2, [r3, #0]
        p_adv_data[i+15] = p_bd_addr[0]; /* LSB BD address */
10044da8:	183b      	adds	r3, r7, r0
10044daa:	881b      	ldrh	r3, [r3, #0]
10044dac:	330f      	adds	r3, #15
10044dae:	68fa      	ldr	r2, [r7, #12]
10044db0:	18d3      	adds	r3, r2, r3
10044db2:	687a      	ldr	r2, [r7, #4]
10044db4:	7812      	ldrb	r2, [r2, #0]
10044db6:	701a      	strb	r2, [r3, #0]
        break;
10044db8:	e006      	b.n	10044dc8 <fill_advData+0x230>
      break;
10044dba:	46c0      	nop			@ (mov r8, r8)
10044dbc:	e004      	b.n	10044dc8 <fill_advData+0x230>
      break;
10044dbe:	46c0      	nop			@ (mov r8, r8)
10044dc0:	e002      	b.n	10044dc8 <fill_advData+0x230>
      break;
10044dc2:	46c0      	nop			@ (mov r8, r8)
10044dc4:	e000      	b.n	10044dc8 <fill_advData+0x230>
        break;
10044dc6:	46c0      	nop			@ (mov r8, r8)
    }
    i += ad_length + 1; /* increment the iterator to go on next element*/
10044dc8:	2315      	movs	r3, #21
10044dca:	18fb      	adds	r3, r7, r3
10044dcc:	781b      	ldrb	r3, [r3, #0]
10044dce:	b29a      	uxth	r2, r3
10044dd0:	2116      	movs	r1, #22
10044dd2:	187b      	adds	r3, r7, r1
10044dd4:	881b      	ldrh	r3, [r3, #0]
10044dd6:	18d3      	adds	r3, r2, r3
10044dd8:	b29a      	uxth	r2, r3
10044dda:	187b      	adds	r3, r7, r1
10044ddc:	3201      	adds	r2, #1
10044dde:	801a      	strh	r2, [r3, #0]
  while(i < tab_size)
10044de0:	230b      	movs	r3, #11
10044de2:	18fb      	adds	r3, r7, r3
10044de4:	781b      	ldrb	r3, [r3, #0]
10044de6:	b29b      	uxth	r3, r3
10044de8:	2216      	movs	r2, #22
10044dea:	18ba      	adds	r2, r7, r2
10044dec:	8812      	ldrh	r2, [r2, #0]
10044dee:	429a      	cmp	r2, r3
10044df0:	d200      	bcs.n	10044df4 <fill_advData+0x25c>
10044df2:	e6df      	b.n	10044bb4 <fill_advData+0x1c>
  }
}
10044df4:	46c0      	nop			@ (mov r8, r8)
10044df6:	46c0      	nop			@ (mov r8, r8)
10044df8:	46bd      	mov	sp, r7
10044dfa:	b006      	add	sp, #24
10044dfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

10044e00 <APPE_Button1Action>:
/* USER CODE END FD_LOCAL_FUNCTION */

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
#if (CFG_BUTTON_SUPPORTED == 1)
void APPE_Button1Action(void)
{    
10044e00:	b580      	push	{r7, lr}
10044e02:	af00      	add	r7, sp, #0
  if (bleAppContext.Device_Connection_Status == APP_BLE_IDLE)
10044e04:	4b0c      	ldr	r3, [pc, #48]	@ (10044e38 <APPE_Button1Action+0x38>)
10044e06:	7b9b      	ldrb	r3, [r3, #14]
10044e08:	2b00      	cmp	r3, #0
10044e0a:	d109      	bne.n	10044e20 <APPE_Button1Action+0x20>
  {
    /* Relaunch advertising */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10044e0c:	2001      	movs	r0, #1
10044e0e:	f7ff fd2f 	bl	10044870 <APP_BLE_Procedure_Gap_Peripheral>
    HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
10044e12:	4a0a      	ldr	r2, [pc, #40]	@ (10044e3c <APPE_Button1Action+0x3c>)
10044e14:	4b0a      	ldr	r3, [pc, #40]	@ (10044e40 <APPE_Button1Action+0x40>)
10044e16:	0011      	movs	r1, r2
10044e18:	0018      	movs	r0, r3
10044e1a:	f009 fd6b 	bl	1004e8f4 <HAL_RADIO_TIMER_StartVirtualTimer>
  else if (bleAppContext.Device_Connection_Status == APP_BLE_CONNECTED_SERVER)
  {
    UTIL_SEQ_SetTask( 1<<CFG_TASK_SEND_NOTIF_ID, CFG_SEQ_PRIO_0);
  }
  
  return;
10044e1e:	e008      	b.n	10044e32 <APPE_Button1Action+0x32>
  else if (bleAppContext.Device_Connection_Status == APP_BLE_CONNECTED_SERVER)
10044e20:	4b05      	ldr	r3, [pc, #20]	@ (10044e38 <APPE_Button1Action+0x38>)
10044e22:	7b9b      	ldrb	r3, [r3, #14]
10044e24:	2b02      	cmp	r3, #2
10044e26:	d104      	bne.n	10044e32 <APPE_Button1Action+0x32>
    UTIL_SEQ_SetTask( 1<<CFG_TASK_SEND_NOTIF_ID, CFG_SEQ_PRIO_0);
10044e28:	2100      	movs	r1, #0
10044e2a:	2080      	movs	r0, #128	@ 0x80
10044e2c:	f00d fd0a 	bl	10052844 <UTIL_SEQ_SetTask>
  return;
10044e30:	46c0      	nop			@ (mov r8, r8)
10044e32:	46c0      	nop			@ (mov r8, r8)
}
10044e34:	46bd      	mov	sp, r7
10044e36:	bd80      	pop	{r7, pc}
10044e38:	200003f0 	.word	0x200003f0
10044e3c:	0000ea60 	.word	0x0000ea60
10044e40:	20000400 	.word	0x20000400

10044e44 <APPE_Button2Action>:

void APPE_Button2Action(void)
{
10044e44:	b590      	push	{r4, r7, lr}
10044e46:	b083      	sub	sp, #12
10044e48:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
10044e4a:	1dfb      	adds	r3, r7, #7
10044e4c:	2212      	movs	r2, #18
10044e4e:	701a      	strb	r2, [r3, #0]
  
  if (bleAppContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
10044e50:	4b13      	ldr	r3, [pc, #76]	@ (10044ea0 <APPE_Button2Action+0x5c>)
10044e52:	7b9b      	ldrb	r3, [r3, #14]
10044e54:	2b02      	cmp	r3, #2
10044e56:	d015      	beq.n	10044e84 <APPE_Button2Action+0x40>
  {
    ret = aci_gap_clear_security_db();
10044e58:	1dfc      	adds	r4, r7, #7
10044e5a:	f00d fa57 	bl	1005230c <aci_gap_clear_security_db>
10044e5e:	0003      	movs	r3, r0
10044e60:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
10044e62:	1dfb      	adds	r3, r7, #7
10044e64:	781b      	ldrb	r3, [r3, #0]
10044e66:	2b00      	cmp	r3, #0
10044e68:	d007      	beq.n	10044e7a <APPE_Button2Action+0x36>
    {
      APP_DBG_MSG("==>> aci_gap_clear_security_db - Fail, result: 0x%02X\n", ret);
10044e6a:	1dfb      	adds	r3, r7, #7
10044e6c:	781a      	ldrb	r2, [r3, #0]
10044e6e:	4b0d      	ldr	r3, [pc, #52]	@ (10044ea4 <APPE_Button2Action+0x60>)
10044e70:	0011      	movs	r1, r2
10044e72:	0018      	movs	r0, r3
10044e74:	f022 fb0a 	bl	1006748c <iprintf>
    /* Launch advertising for multi connection */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
    HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
  }

  return;
10044e78:	e00e      	b.n	10044e98 <APPE_Button2Action+0x54>
      APP_DBG_MSG("==>> aci_gap_clear_security_db - Success\n");
10044e7a:	4b0b      	ldr	r3, [pc, #44]	@ (10044ea8 <APPE_Button2Action+0x64>)
10044e7c:	0018      	movs	r0, r3
10044e7e:	f022 fb75 	bl	1006756c <puts>
  return;
10044e82:	e009      	b.n	10044e98 <APPE_Button2Action+0x54>
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10044e84:	2001      	movs	r0, #1
10044e86:	f7ff fcf3 	bl	10044870 <APP_BLE_Procedure_Gap_Peripheral>
    HAL_RADIO_TIMER_StartVirtualTimer(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
10044e8a:	4a08      	ldr	r2, [pc, #32]	@ (10044eac <APPE_Button2Action+0x68>)
10044e8c:	4b08      	ldr	r3, [pc, #32]	@ (10044eb0 <APPE_Button2Action+0x6c>)
10044e8e:	0011      	movs	r1, r2
10044e90:	0018      	movs	r0, r3
10044e92:	f009 fd2f 	bl	1004e8f4 <HAL_RADIO_TIMER_StartVirtualTimer>
  return;
10044e96:	46c0      	nop			@ (mov r8, r8)
}
10044e98:	46bd      	mov	sp, r7
10044e9a:	b003      	add	sp, #12
10044e9c:	bd90      	pop	{r4, r7, pc}
10044e9e:	46c0      	nop			@ (mov r8, r8)
10044ea0:	200003f0 	.word	0x200003f0
10044ea4:	1006c3bc 	.word	0x1006c3bc
10044ea8:	1006c3f4 	.word	0x1006c3f4
10044eac:	0000ea60 	.word	0x0000ea60
10044eb0:	20000400 	.word	0x20000400

10044eb4 <APPE_Button3Action>:

void APPE_Button3Action(void)
{
10044eb4:	b580      	push	{r7, lr}
10044eb6:	af00      	add	r7, sp, #0
  if (bleAppContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
10044eb8:	4b05      	ldr	r3, [pc, #20]	@ (10044ed0 <APPE_Button3Action+0x1c>)
10044eba:	7b9b      	ldrb	r3, [r3, #14]
10044ebc:	2b02      	cmp	r3, #2
10044ebe:	d103      	bne.n	10044ec8 <APPE_Button3Action+0x14>
  {

  }
  else
  {
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_CONN_PARAM_UPDATE);
10044ec0:	2004      	movs	r0, #4
10044ec2:	f7ff fcd5 	bl	10044870 <APP_BLE_Procedure_Gap_Peripheral>
  }

  return;
10044ec6:	46c0      	nop			@ (mov r8, r8)
10044ec8:	46c0      	nop			@ (mov r8, r8)
}
10044eca:	46bd      	mov	sp, r7
10044ecc:	bd80      	pop	{r7, pc}
10044ece:	46c0      	nop			@ (mov r8, r8)
10044ed0:	200003f0 	.word	0x200003f0

10044ed4 <EM_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static BLEEVT_EvtAckStatus_t EM_EventHandler(aci_blecore_event *p_evt)
{
10044ed4:	b590      	push	{r4, r7, lr}
10044ed6:	b08d      	sub	sp, #52	@ 0x34
10044ed8:	af00      	add	r7, sp, #0
10044eda:	6078      	str	r0, [r7, #4]
  BLEEVT_EvtAckStatus_t return_value = BLEEVT_NoAck;
10044edc:	232f      	movs	r3, #47	@ 0x2f
10044ede:	18fb      	adds	r3, r7, r3
10044ee0:	2200      	movs	r2, #0
10044ee2:	701a      	strb	r2, [r3, #0]
  EM_NotificationEvt_t notification;
  /* USER CODE BEGIN Service2_EventHandler_1 */

  /* USER CODE END Service2_EventHandler_1 */

  switch(p_evt->ecode)
10044ee4:	687b      	ldr	r3, [r7, #4]
10044ee6:	781a      	ldrb	r2, [r3, #0]
10044ee8:	785b      	ldrb	r3, [r3, #1]
10044eea:	021b      	lsls	r3, r3, #8
10044eec:	4313      	orrs	r3, r2
10044eee:	b29b      	uxth	r3, r3
10044ef0:	4a54      	ldr	r2, [pc, #336]	@ (10045044 <EM_EventHandler+0x170>)
10044ef2:	4694      	mov	ip, r2
10044ef4:	4463      	add	r3, ip
10044ef6:	2b19      	cmp	r3, #25
10044ef8:	d900      	bls.n	10044efc <EM_EventHandler+0x28>
10044efa:	e097      	b.n	1004502c <EM_EventHandler+0x158>
10044efc:	009a      	lsls	r2, r3, #2
10044efe:	4b52      	ldr	r3, [pc, #328]	@ (10045048 <EM_EventHandler+0x174>)
10044f00:	18d3      	adds	r3, r2, r3
10044f02:	681b      	ldr	r3, [r3, #0]
10044f04:	469f      	mov	pc, r3
    case ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      p_attribute_modified = (aci_gatt_srv_attribute_modified_event_rp0*)p_evt->data;
10044f06:	687b      	ldr	r3, [r7, #4]
10044f08:	3302      	adds	r3, #2
10044f0a:	61fb      	str	r3, [r7, #28]
      notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
10044f0c:	69fb      	ldr	r3, [r7, #28]
10044f0e:	781a      	ldrb	r2, [r3, #0]
10044f10:	785b      	ldrb	r3, [r3, #1]
10044f12:	021b      	lsls	r3, r3, #8
10044f14:	4313      	orrs	r3, r2
10044f16:	b29a      	uxth	r2, r3
10044f18:	2108      	movs	r1, #8
10044f1a:	187b      	adds	r3, r7, r1
10044f1c:	819a      	strh	r2, [r3, #12]
      notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
10044f1e:	69fb      	ldr	r3, [r7, #28]
10044f20:	791a      	ldrb	r2, [r3, #4]
10044f22:	795b      	ldrb	r3, [r3, #5]
10044f24:	021b      	lsls	r3, r3, #8
10044f26:	4313      	orrs	r3, r2
10044f28:	b29a      	uxth	r2, r3
10044f2a:	187b      	adds	r3, r7, r1
10044f2c:	81da      	strh	r2, [r3, #14]
      notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
10044f2e:	69fb      	ldr	r3, [r7, #28]
10044f30:	799a      	ldrb	r2, [r3, #6]
10044f32:	79db      	ldrb	r3, [r3, #7]
10044f34:	021b      	lsls	r3, r3, #8
10044f36:	4313      	orrs	r3, r2
10044f38:	b29b      	uxth	r3, r3
10044f3a:	b2da      	uxtb	r2, r3
10044f3c:	187b      	adds	r3, r7, r1
10044f3e:	721a      	strb	r2, [r3, #8]
      notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10044f40:	69fb      	ldr	r3, [r7, #28]
10044f42:	3308      	adds	r3, #8
10044f44:	001a      	movs	r2, r3
10044f46:	187b      	adds	r3, r7, r1
10044f48:	605a      	str	r2, [r3, #4]
      if(p_attribute_modified->Attr_Handle == (EM_Context.RsCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
10044f4a:	69fb      	ldr	r3, [r7, #28]
10044f4c:	791a      	ldrb	r2, [r3, #4]
10044f4e:	795b      	ldrb	r3, [r3, #5]
10044f50:	021b      	lsls	r3, r3, #8
10044f52:	4313      	orrs	r3, r2
10044f54:	b29b      	uxth	r3, r3
10044f56:	001a      	movs	r2, r3
10044f58:	4b3c      	ldr	r3, [pc, #240]	@ (1004504c <EM_EventHandler+0x178>)
10044f5a:	889b      	ldrh	r3, [r3, #4]
10044f5c:	3302      	adds	r3, #2
10044f5e:	429a      	cmp	r2, r3
10044f60:	d11c      	bne.n	10044f9c <EM_EventHandler+0xc8>
      {
        return_value = BLEEVT_Ack;
10044f62:	232f      	movs	r3, #47	@ 0x2f
10044f64:	18fb      	adds	r3, r7, r3
10044f66:	2201      	movs	r2, #1
10044f68:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service2_Char_2 */

        /* USER CODE END Service2_Char_2 */
        switch(p_attribute_modified->Attr_Data[0])
10044f6a:	69fb      	ldr	r3, [r7, #28]
10044f6c:	7a1b      	ldrb	r3, [r3, #8]
10044f6e:	2b00      	cmp	r3, #0
10044f70:	d002      	beq.n	10044f78 <EM_EventHandler+0xa4>
10044f72:	2b01      	cmp	r3, #1
10044f74:	d009      	beq.n	10044f8a <EM_EventHandler+0xb6>

        default:
          /* USER CODE BEGIN Service2_Char_2_default */

          /* USER CODE END Service2_Char_2_default */
          break;
10044f76:	e03c      	b.n	10044ff2 <EM_EventHandler+0x11e>
          notification.EvtOpcode = EM_RS_NOTIFY_DISABLED_EVT;
10044f78:	2108      	movs	r1, #8
10044f7a:	187b      	adds	r3, r7, r1
10044f7c:	2202      	movs	r2, #2
10044f7e:	701a      	strb	r2, [r3, #0]
          EM_Notification(&notification);
10044f80:	187b      	adds	r3, r7, r1
10044f82:	0018      	movs	r0, r3
10044f84:	f000 f96c 	bl	10045260 <EM_Notification>
          break;
10044f88:	e033      	b.n	10044ff2 <EM_EventHandler+0x11e>
          notification.EvtOpcode = EM_RS_NOTIFY_ENABLED_EVT;
10044f8a:	2108      	movs	r1, #8
10044f8c:	187b      	adds	r3, r7, r1
10044f8e:	2201      	movs	r2, #1
10044f90:	701a      	strb	r2, [r3, #0]
          EM_Notification(&notification);
10044f92:	187b      	adds	r3, r7, r1
10044f94:	0018      	movs	r0, r3
10044f96:	f000 f963 	bl	10045260 <EM_Notification>
          break;
10044f9a:	e02a      	b.n	10044ff2 <EM_EventHandler+0x11e>
        }
      }  /* if(p_attribute_modified->Attr_Handle == (EM_Context.RsCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

      else if(p_attribute_modified->Attr_Handle == (EM_Context.RqCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10044f9c:	69fb      	ldr	r3, [r7, #28]
10044f9e:	791a      	ldrb	r2, [r3, #4]
10044fa0:	795b      	ldrb	r3, [r3, #5]
10044fa2:	021b      	lsls	r3, r3, #8
10044fa4:	4313      	orrs	r3, r2
10044fa6:	b29b      	uxth	r3, r3
10044fa8:	001a      	movs	r2, r3
10044faa:	4b28      	ldr	r3, [pc, #160]	@ (1004504c <EM_EventHandler+0x178>)
10044fac:	885b      	ldrh	r3, [r3, #2]
10044fae:	3301      	adds	r3, #1
10044fb0:	429a      	cmp	r2, r3
10044fb2:	d13d      	bne.n	10045030 <EM_EventHandler+0x15c>
      {
        return_value = BLEEVT_Ack;
10044fb4:	232f      	movs	r3, #47	@ 0x2f
10044fb6:	18fb      	adds	r3, r7, r3
10044fb8:	2201      	movs	r2, #1
10044fba:	701a      	strb	r2, [r3, #0]

        notification.EvtOpcode = EM_RQ_WRITE_NO_RESP_EVT;
10044fbc:	2408      	movs	r4, #8
10044fbe:	193b      	adds	r3, r7, r4
10044fc0:	2200      	movs	r2, #0
10044fc2:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service2_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        APP_DBG_MSG("-- GATT : MODBUS CONFIGURATION RECEIVED\n");
10044fc4:	4b22      	ldr	r3, [pc, #136]	@ (10045050 <EM_EventHandler+0x17c>)
10044fc6:	0018      	movs	r0, r3
10044fc8:	f022 fad0 	bl	1006756c <puts>
               notification.DataTransfered.Length = p_attribute_modified->Attr_Data_Length;
10044fcc:	69fb      	ldr	r3, [r7, #28]
10044fce:	799a      	ldrb	r2, [r3, #6]
10044fd0:	79db      	ldrb	r3, [r3, #7]
10044fd2:	021b      	lsls	r3, r3, #8
10044fd4:	4313      	orrs	r3, r2
10044fd6:	b29b      	uxth	r3, r3
10044fd8:	b2da      	uxtb	r2, r3
10044fda:	193b      	adds	r3, r7, r4
10044fdc:	721a      	strb	r2, [r3, #8]
               notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10044fde:	69fb      	ldr	r3, [r7, #28]
10044fe0:	3308      	adds	r3, #8
10044fe2:	001a      	movs	r2, r3
10044fe4:	193b      	adds	r3, r7, r4
10044fe6:	605a      	str	r2, [r3, #4]
        /* USER CODE END Service2_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        EM_Notification(&notification);
10044fe8:	193b      	adds	r3, r7, r4
10044fea:	0018      	movs	r0, r3
10044fec:	f000 f938 	bl	10045260 <EM_Notification>
      } /* if(p_attribute_modified->Attr_Handle == (EM_Context.RqCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10044ff0:	e01e      	b.n	10045030 <EM_EventHandler+0x15c>
10044ff2:	e01d      	b.n	10045030 <EM_EventHandler+0x15c>
    case ACI_GATT_SRV_WRITE_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_SRV_GATT_BEGIN */

      /* USER CODE END EVT_BLUE_SRV_GATT_BEGIN */
      p_write = (aci_gatt_srv_write_event_rp0*)p_evt->data;
10044ff4:	687b      	ldr	r3, [r7, #4]
10044ff6:	3302      	adds	r3, #2
10044ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(p_write->Attribute_Handle == (EM_Context.RqCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10044ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10044ffc:	795a      	ldrb	r2, [r3, #5]
10044ffe:	799b      	ldrb	r3, [r3, #6]
10045000:	021b      	lsls	r3, r3, #8
10045002:	4313      	orrs	r3, r2
10045004:	b29b      	uxth	r3, r3
10045006:	001a      	movs	r2, r3
10045008:	4b10      	ldr	r3, [pc, #64]	@ (1004504c <EM_EventHandler+0x178>)
1004500a:	885b      	ldrh	r3, [r3, #2]
1004500c:	3301      	adds	r3, #1
1004500e:	429a      	cmp	r2, r3
10045010:	d110      	bne.n	10045034 <EM_EventHandler+0x160>
      {
        return_value = BLEEVT_Ack;
10045012:	232f      	movs	r3, #47	@ 0x2f
10045014:	18fb      	adds	r3, r7, r3
10045016:	2201      	movs	r2, #1
10045018:	701a      	strb	r2, [r3, #0]
      } /*if(p_write->Attribute_Handle == (EM_Context.RqCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_WRITE_END */

      /* USER CODE END EVT_BLUE_GATT_SRV_WRITE_END */
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
1004501a:	e00b      	b.n	10045034 <EM_EventHandler+0x160>
    }
    case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
    {
      aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
      p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_evt->data;
1004501c:	687b      	ldr	r3, [r7, #4]
1004501e:	3302      	adds	r3, #2
10045020:	627b      	str	r3, [r7, #36]	@ 0x24
      UNUSED(p_tx_pool_available_event);

      /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */

      /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
10045022:	e008      	b.n	10045036 <EM_EventHandler+0x162>
    }
    case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
    {
      aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
      p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_evt->data;
10045024:	687b      	ldr	r3, [r7, #4]
10045026:	3302      	adds	r3, #2
10045028:	623b      	str	r3, [r7, #32]
      UNUSED(p_exchange_mtu);

      /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */

      /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
1004502a:	e004      	b.n	10045036 <EM_EventHandler+0x162>
    /* USER CODE END BLECORE_EVT */
  default:
    /* USER CODE BEGIN EVT_DEFAULT */

    /* USER CODE END EVT_DEFAULT */
    break;
1004502c:	46c0      	nop			@ (mov r8, r8)
1004502e:	e002      	b.n	10045036 <EM_EventHandler+0x162>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10045030:	46c0      	nop			@ (mov r8, r8)
10045032:	e000      	b.n	10045036 <EM_EventHandler+0x162>
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10045034:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service2_EventHandler_2 */

  /* USER CODE END Service2_EventHandler_2 */

  return(return_value);
10045036:	232f      	movs	r3, #47	@ 0x2f
10045038:	18fb      	adds	r3, r7, r3
1004503a:	781b      	ldrb	r3, [r3, #0]
}/* end EM_EventHandler */
1004503c:	0018      	movs	r0, r3
1004503e:	46bd      	mov	sp, r7
10045040:	b00d      	add	sp, #52	@ 0x34
10045042:	bd90      	pop	{r4, r7, pc}
10045044:	fffff3ff 	.word	0xfffff3ff
10045048:	1006caa0 	.word	0x1006caa0
1004504c:	20000440 	.word	0x20000440
10045050:	1006c420 	.word	0x1006c420

10045054 <EM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void EM_Init(void)
{
10045054:	b590      	push	{r4, r7, lr}
10045056:	b083      	sub	sp, #12
10045058:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
1004505a:	1dfb      	adds	r3, r7, #7
1004505c:	2212      	movs	r2, #18
1004505e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END InitService2Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  BLEEVT_RegisterGattEvtHandler(EM_EventHandler);
10045060:	4b1f      	ldr	r3, [pc, #124]	@ (100450e0 <EM_Init+0x8c>)
10045062:	0018      	movs	r0, r3
10045064:	f00c fd12 	bl	10051a8c <BLEEVT_RegisterGattEvtHandler>

  ret = aci_gatt_srv_add_service((ble_gatt_srv_def_t *)&em_service);
10045068:	1dfc      	adds	r4, r7, #7
1004506a:	4b1e      	ldr	r3, [pc, #120]	@ (100450e4 <EM_Init+0x90>)
1004506c:	0018      	movs	r0, r3
1004506e:	f00d f955 	bl	1005231c <aci_gatt_srv_add_service>
10045072:	0003      	movs	r3, r0
10045074:	7023      	strb	r3, [r4, #0]

  if (ret != BLE_STATUS_SUCCESS)
10045076:	1dfb      	adds	r3, r7, #7
10045078:	781b      	ldrb	r3, [r3, #0]
1004507a:	2b00      	cmp	r3, #0
1004507c:	d007      	beq.n	1004508e <EM_Init+0x3a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_srv_add_service command: EM, error code: 0x%x \n", ret);
1004507e:	1dfb      	adds	r3, r7, #7
10045080:	781a      	ldrb	r2, [r3, #0]
10045082:	4b19      	ldr	r3, [pc, #100]	@ (100450e8 <EM_Init+0x94>)
10045084:	0011      	movs	r1, r2
10045086:	0018      	movs	r0, r3
10045088:	f022 fa00 	bl	1006748c <iprintf>
1004508c:	e003      	b.n	10045096 <EM_Init+0x42>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_add_service command: EM \n");
1004508e:	4b17      	ldr	r3, [pc, #92]	@ (100450ec <EM_Init+0x98>)
10045090:	0018      	movs	r0, r3
10045092:	f022 fa6b 	bl	1006756c <puts>
  }

  EM_Context.EmSvcHdle = aci_gatt_srv_get_service_handle((ble_gatt_srv_def_t *) &em_service);
10045096:	4b13      	ldr	r3, [pc, #76]	@ (100450e4 <EM_Init+0x90>)
10045098:	0018      	movs	r0, r3
1004509a:	f00d f94c 	bl	10052336 <aci_gatt_srv_get_service_handle>
1004509e:	0003      	movs	r3, r0
100450a0:	001a      	movs	r2, r3
100450a2:	4b13      	ldr	r3, [pc, #76]	@ (100450f0 <EM_Init+0x9c>)
100450a4:	801a      	strh	r2, [r3, #0]
  EM_Context.RqCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&em_chars[0]);
100450a6:	4b13      	ldr	r3, [pc, #76]	@ (100450f4 <EM_Init+0xa0>)
100450a8:	0018      	movs	r0, r3
100450aa:	f00d f964 	bl	10052376 <aci_gatt_srv_get_char_decl_handle>
100450ae:	0003      	movs	r3, r0
100450b0:	001a      	movs	r2, r3
100450b2:	4b0f      	ldr	r3, [pc, #60]	@ (100450f0 <EM_Init+0x9c>)
100450b4:	805a      	strh	r2, [r3, #2]
  EM_Context.RsCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&em_chars[1]);
100450b6:	4b10      	ldr	r3, [pc, #64]	@ (100450f8 <EM_Init+0xa4>)
100450b8:	0018      	movs	r0, r3
100450ba:	f00d f95c 	bl	10052376 <aci_gatt_srv_get_char_decl_handle>
100450be:	0003      	movs	r3, r0
100450c0:	001a      	movs	r2, r3
100450c2:	4b0b      	ldr	r3, [pc, #44]	@ (100450f0 <EM_Init+0x9c>)
100450c4:	809a      	strh	r2, [r3, #4]

  /* USER CODE BEGIN InitService1Svc_2 */

  /* USER CODE END InitService1Svc_2 */

  if (ret != BLE_STATUS_SUCCESS)
100450c6:	1dfb      	adds	r3, r7, #7
100450c8:	781b      	ldrb	r3, [r3, #0]
100450ca:	2b00      	cmp	r3, #0
100450cc:	d004      	beq.n	100450d8 <EM_Init+0x84>
  {
    APP_DBG_MSG("  Fail registering EM handlers\n");
100450ce:	4b0b      	ldr	r3, [pc, #44]	@ (100450fc <EM_Init+0xa8>)
100450d0:	0018      	movs	r0, r3
100450d2:	f022 fa4b 	bl	1006756c <puts>
  }

  return;
100450d6:	46c0      	nop			@ (mov r8, r8)
100450d8:	46c0      	nop			@ (mov r8, r8)
}
100450da:	46bd      	mov	sp, r7
100450dc:	b003      	add	sp, #12
100450de:	bd90      	pop	{r4, r7, pc}
100450e0:	10044ed5 	.word	0x10044ed5
100450e4:	1006ca78 	.word	0x1006ca78
100450e8:	1006c448 	.word	0x1006c448
100450ec:	1006c48c 	.word	0x1006c48c
100450f0:	20000440 	.word	0x20000440
100450f4:	1006ca30 	.word	0x1006ca30
100450f8:	1006ca54 	.word	0x1006ca54
100450fc:	1006c4c0 	.word	0x1006c4c0

10045100 <EM_NotifyValue>:
 * @param  pData: pointer to the data to be notified to the client
 * @param  ConnectionHandle: connection handle identifying the client to be notified.
 *
 */
tBleStatus EM_NotifyValue(EM_CharOpcode_t CharOpcode, EM_Data_t *pData, uint16_t ConnectionHandle)
{
10045100:	b5f0      	push	{r4, r5, r6, r7, lr}
10045102:	b087      	sub	sp, #28
10045104:	af02      	add	r7, sp, #8
10045106:	6039      	str	r1, [r7, #0]
10045108:	0011      	movs	r1, r2
1004510a:	1dfb      	adds	r3, r7, #7
1004510c:	1c02      	adds	r2, r0, #0
1004510e:	701a      	strb	r2, [r3, #0]
10045110:	1d3b      	adds	r3, r7, #4
10045112:	1c0a      	adds	r2, r1, #0
10045114:	801a      	strh	r2, [r3, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
10045116:	230f      	movs	r3, #15
10045118:	18fb      	adds	r3, r7, r3
1004511a:	2212      	movs	r2, #18
1004511c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN Service2_App_Notify_Char_1 */

  /* USER CODE END Service2_App_Notify_Char_1 */

  switch(CharOpcode)
1004511e:	1dfb      	adds	r3, r7, #7
10045120:	781b      	ldrb	r3, [r3, #0]
10045122:	2b01      	cmp	r3, #1
10045124:	d136      	bne.n	10045194 <EM_NotifyValue+0x94>
  {

    case EM_RS:
      memcpy(rs_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(rs_val_buffer)));
10045126:	683b      	ldr	r3, [r7, #0]
10045128:	6819      	ldr	r1, [r3, #0]
1004512a:	683b      	ldr	r3, [r7, #0]
1004512c:	791b      	ldrb	r3, [r3, #4]
1004512e:	b25b      	sxtb	r3, r3
10045130:	2b00      	cmp	r3, #0
10045132:	db03      	blt.n	1004513c <EM_NotifyValue+0x3c>
10045134:	683b      	ldr	r3, [r7, #0]
10045136:	791b      	ldrb	r3, [r3, #4]
10045138:	001a      	movs	r2, r3
1004513a:	e000      	b.n	1004513e <EM_NotifyValue+0x3e>
1004513c:	2280      	movs	r2, #128	@ 0x80
1004513e:	4b19      	ldr	r3, [pc, #100]	@ (100451a4 <EM_NotifyValue+0xa4>)
10045140:	0018      	movs	r0, r3
10045142:	f022 fc66 	bl	10067a12 <memcpy>
      ret = aci_gatt_srv_notify(ConnectionHandle,
                                BLE_GATT_UNENHANCED_ATT_L2CAP_CID,
                                EM_Context.RsCharHdle + 1,
10045146:	4b18      	ldr	r3, [pc, #96]	@ (100451a8 <EM_NotifyValue+0xa8>)
10045148:	889b      	ldrh	r3, [r3, #4]
      ret = aci_gatt_srv_notify(ConnectionHandle,
1004514a:	3301      	adds	r3, #1
1004514c:	b299      	uxth	r1, r3
                                GATT_NOTIFICATION,
                                pData->Length, /* charValueLen */
1004514e:	683b      	ldr	r3, [r7, #0]
10045150:	791b      	ldrb	r3, [r3, #4]
      ret = aci_gatt_srv_notify(ConnectionHandle,
10045152:	001d      	movs	r5, r3
10045154:	683b      	ldr	r3, [r7, #0]
10045156:	681b      	ldr	r3, [r3, #0]
10045158:	260f      	movs	r6, #15
1004515a:	19bc      	adds	r4, r7, r6
1004515c:	1d3a      	adds	r2, r7, #4
1004515e:	8810      	ldrh	r0, [r2, #0]
10045160:	9301      	str	r3, [sp, #4]
10045162:	9500      	str	r5, [sp, #0]
10045164:	2300      	movs	r3, #0
10045166:	000a      	movs	r2, r1
10045168:	2104      	movs	r1, #4
1004516a:	f00d f911 	bl	10052390 <aci_gatt_srv_notify>
1004516e:	0003      	movs	r3, r0
10045170:	7023      	strb	r3, [r4, #0]
                                (uint8_t *)pData->p_Payload);
      if (ret != BLE_STATUS_SUCCESS)
10045172:	19bb      	adds	r3, r7, r6
10045174:	781b      	ldrb	r3, [r3, #0]
10045176:	2b00      	cmp	r3, #0
10045178:	d007      	beq.n	1004518a <EM_NotifyValue+0x8a>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_srv_notify RS command, error code: 0x%2X\n", ret);
1004517a:	19bb      	adds	r3, r7, r6
1004517c:	781a      	ldrb	r2, [r3, #0]
1004517e:	4b0b      	ldr	r3, [pc, #44]	@ (100451ac <EM_NotifyValue+0xac>)
10045180:	0011      	movs	r1, r2
10045182:	0018      	movs	r0, r3
10045184:	f022 f982 	bl	1006748c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_srv_notify RS command\n");
      }
      /* USER CODE BEGIN Service2_Char_Value_2*/

      /* USER CODE END Service2_Char_Value_2*/
      break;
10045188:	e005      	b.n	10045196 <EM_NotifyValue+0x96>
        APP_DBG_MSG("  Success: aci_gatt_srv_notify RS command\n");
1004518a:	4b09      	ldr	r3, [pc, #36]	@ (100451b0 <EM_NotifyValue+0xb0>)
1004518c:	0018      	movs	r0, r3
1004518e:	f022 f9ed 	bl	1006756c <puts>
      break;
10045192:	e000      	b.n	10045196 <EM_NotifyValue+0x96>

    default:
      break;
10045194:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service2_App_Notify_Char_2 */

  /* USER CODE END Service2_App_Notify_Char_2 */

  return ret;
10045196:	230f      	movs	r3, #15
10045198:	18fb      	adds	r3, r7, r3
1004519a:	781b      	ldrb	r3, [r3, #0]
}
1004519c:	0018      	movs	r0, r3
1004519e:	46bd      	mov	sp, r7
100451a0:	b005      	add	sp, #20
100451a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100451a4:	200004cc 	.word	0x200004cc
100451a8:	20000440 	.word	0x20000440
100451ac:	1006c4e0 	.word	0x1006c4e0
100451b0:	1006c520 	.word	0x1006c520

100451b4 <Modbus_CRC16>:

/* Functions Definition ------------------------------------------------------*/

/* Modbus CRC16 calculation function */
static uint16_t Modbus_CRC16(uint8_t *buffer, uint16_t length)
{
100451b4:	b580      	push	{r7, lr}
100451b6:	b084      	sub	sp, #16
100451b8:	af00      	add	r7, sp, #0
100451ba:	6078      	str	r0, [r7, #4]
100451bc:	000a      	movs	r2, r1
100451be:	1cbb      	adds	r3, r7, #2
100451c0:	801a      	strh	r2, [r3, #0]
  uint16_t crc = 0xFFFF;
100451c2:	230e      	movs	r3, #14
100451c4:	18fb      	adds	r3, r7, r3
100451c6:	2201      	movs	r2, #1
100451c8:	4252      	negs	r2, r2
100451ca:	801a      	strh	r2, [r3, #0]
  for (uint16_t pos = 0; pos < length; pos++)
100451cc:	230c      	movs	r3, #12
100451ce:	18fb      	adds	r3, r7, r3
100451d0:	2200      	movs	r2, #0
100451d2:	801a      	strh	r2, [r3, #0]
100451d4:	e033      	b.n	1004523e <Modbus_CRC16+0x8a>
  {
    crc ^= (uint16_t)buffer[pos];
100451d6:	230c      	movs	r3, #12
100451d8:	18fb      	adds	r3, r7, r3
100451da:	881b      	ldrh	r3, [r3, #0]
100451dc:	687a      	ldr	r2, [r7, #4]
100451de:	18d3      	adds	r3, r2, r3
100451e0:	781b      	ldrb	r3, [r3, #0]
100451e2:	0019      	movs	r1, r3
100451e4:	220e      	movs	r2, #14
100451e6:	18bb      	adds	r3, r7, r2
100451e8:	18ba      	adds	r2, r7, r2
100451ea:	8812      	ldrh	r2, [r2, #0]
100451ec:	404a      	eors	r2, r1
100451ee:	801a      	strh	r2, [r3, #0]
    for (int i = 8; i != 0; i--)
100451f0:	2308      	movs	r3, #8
100451f2:	60bb      	str	r3, [r7, #8]
100451f4:	e01a      	b.n	1004522c <Modbus_CRC16+0x78>
    {
      if ((crc & 0x0001) != 0)
100451f6:	210e      	movs	r1, #14
100451f8:	187b      	adds	r3, r7, r1
100451fa:	881b      	ldrh	r3, [r3, #0]
100451fc:	2201      	movs	r2, #1
100451fe:	4013      	ands	r3, r2
10045200:	d00b      	beq.n	1004521a <Modbus_CRC16+0x66>
      {
        crc >>= 1;
10045202:	187b      	adds	r3, r7, r1
10045204:	187a      	adds	r2, r7, r1
10045206:	8812      	ldrh	r2, [r2, #0]
10045208:	0852      	lsrs	r2, r2, #1
1004520a:	801a      	strh	r2, [r3, #0]
        crc ^= 0xA001;
1004520c:	187b      	adds	r3, r7, r1
1004520e:	187a      	adds	r2, r7, r1
10045210:	8812      	ldrh	r2, [r2, #0]
10045212:	4912      	ldr	r1, [pc, #72]	@ (1004525c <Modbus_CRC16+0xa8>)
10045214:	404a      	eors	r2, r1
10045216:	801a      	strh	r2, [r3, #0]
10045218:	e005      	b.n	10045226 <Modbus_CRC16+0x72>
      }
      else
      {
        crc >>= 1;
1004521a:	220e      	movs	r2, #14
1004521c:	18bb      	adds	r3, r7, r2
1004521e:	18ba      	adds	r2, r7, r2
10045220:	8812      	ldrh	r2, [r2, #0]
10045222:	0852      	lsrs	r2, r2, #1
10045224:	801a      	strh	r2, [r3, #0]
    for (int i = 8; i != 0; i--)
10045226:	68bb      	ldr	r3, [r7, #8]
10045228:	3b01      	subs	r3, #1
1004522a:	60bb      	str	r3, [r7, #8]
1004522c:	68bb      	ldr	r3, [r7, #8]
1004522e:	2b00      	cmp	r3, #0
10045230:	d1e1      	bne.n	100451f6 <Modbus_CRC16+0x42>
  for (uint16_t pos = 0; pos < length; pos++)
10045232:	210c      	movs	r1, #12
10045234:	187b      	adds	r3, r7, r1
10045236:	881a      	ldrh	r2, [r3, #0]
10045238:	187b      	adds	r3, r7, r1
1004523a:	3201      	adds	r2, #1
1004523c:	801a      	strh	r2, [r3, #0]
1004523e:	230c      	movs	r3, #12
10045240:	18fa      	adds	r2, r7, r3
10045242:	1cbb      	adds	r3, r7, #2
10045244:	8812      	ldrh	r2, [r2, #0]
10045246:	881b      	ldrh	r3, [r3, #0]
10045248:	429a      	cmp	r2, r3
1004524a:	d3c4      	bcc.n	100451d6 <Modbus_CRC16+0x22>
      }
    }
  }
  return crc;
1004524c:	230e      	movs	r3, #14
1004524e:	18fb      	adds	r3, r7, r3
10045250:	881b      	ldrh	r3, [r3, #0]
}
10045252:	0018      	movs	r0, r3
10045254:	46bd      	mov	sp, r7
10045256:	b004      	add	sp, #16
10045258:	bd80      	pop	{r7, pc}
1004525a:	46c0      	nop			@ (mov r8, r8)
1004525c:	ffffa001 	.word	0xffffa001

10045260 <EM_Notification>:
 * - Length of incoming payload is at least 6 bytes.
 * - You want to send this request over RS485 with appended CRC.
 * - Then receive response dynamically based on requested register count.
 */
void EM_Notification(EM_NotificationEvt_t *p_Notification)
{
10045260:	b590      	push	{r4, r7, lr}
10045262:	b085      	sub	sp, #20
10045264:	af00      	add	r7, sp, #0
10045266:	6078      	str	r0, [r7, #4]
  switch(p_Notification->EvtOpcode)
10045268:	687b      	ldr	r3, [r7, #4]
1004526a:	781b      	ldrb	r3, [r3, #0]
1004526c:	2b02      	cmp	r3, #2
1004526e:	d044      	beq.n	100452fa <EM_Notification+0x9a>
10045270:	dc47      	bgt.n	10045302 <EM_Notification+0xa2>
10045272:	2b00      	cmp	r3, #0
10045274:	d002      	beq.n	1004527c <EM_Notification+0x1c>
10045276:	2b01      	cmp	r3, #1
10045278:	d03b      	beq.n	100452f2 <EM_Notification+0x92>
      // Optional: handle notification disable event
      EM_APP_Context.Rs_Notification_Status = Rs_NOTIFICATION_OFF;
      break;

    default:
      break;
1004527a:	e042      	b.n	10045302 <EM_Notification+0xa2>
      APP_DBG_MSG("-- EM_RQ_WRITE_NO_RESP_EVT\n");
1004527c:	4b23      	ldr	r3, [pc, #140]	@ (1004530c <EM_Notification+0xac>)
1004527e:	0018      	movs	r0, r3
10045280:	f022 f974 	bl	1006756c <puts>
      for(uint8_t i=0; i < p_Notification->DataTransfered.Length; i++) {
10045284:	230f      	movs	r3, #15
10045286:	18fb      	adds	r3, r7, r3
10045288:	2200      	movs	r2, #0
1004528a:	701a      	strb	r2, [r3, #0]
1004528c:	e01b      	b.n	100452c6 <EM_Notification+0x66>
        APP_DBG_MSG("%02X ", p_Notification->DataTransfered.p_Payload[i]);
1004528e:	687b      	ldr	r3, [r7, #4]
10045290:	685a      	ldr	r2, [r3, #4]
10045292:	240f      	movs	r4, #15
10045294:	193b      	adds	r3, r7, r4
10045296:	781b      	ldrb	r3, [r3, #0]
10045298:	18d3      	adds	r3, r2, r3
1004529a:	781b      	ldrb	r3, [r3, #0]
1004529c:	001a      	movs	r2, r3
1004529e:	4b1c      	ldr	r3, [pc, #112]	@ (10045310 <EM_Notification+0xb0>)
100452a0:	0011      	movs	r1, r2
100452a2:	0018      	movs	r0, r3
100452a4:	f022 f8f2 	bl	1006748c <iprintf>
        request[i]=p_Notification->DataTransfered.p_Payload[i];
100452a8:	687b      	ldr	r3, [r7, #4]
100452aa:	685a      	ldr	r2, [r3, #4]
100452ac:	193b      	adds	r3, r7, r4
100452ae:	781b      	ldrb	r3, [r3, #0]
100452b0:	18d2      	adds	r2, r2, r3
100452b2:	193b      	adds	r3, r7, r4
100452b4:	781b      	ldrb	r3, [r3, #0]
100452b6:	7811      	ldrb	r1, [r2, #0]
100452b8:	4a16      	ldr	r2, [pc, #88]	@ (10045314 <EM_Notification+0xb4>)
100452ba:	54d1      	strb	r1, [r2, r3]
      for(uint8_t i=0; i < p_Notification->DataTransfered.Length; i++) {
100452bc:	193b      	adds	r3, r7, r4
100452be:	781a      	ldrb	r2, [r3, #0]
100452c0:	193b      	adds	r3, r7, r4
100452c2:	3201      	adds	r2, #1
100452c4:	701a      	strb	r2, [r3, #0]
100452c6:	687b      	ldr	r3, [r7, #4]
100452c8:	7a1b      	ldrb	r3, [r3, #8]
100452ca:	220f      	movs	r2, #15
100452cc:	18ba      	adds	r2, r7, r2
100452ce:	7812      	ldrb	r2, [r2, #0]
100452d0:	429a      	cmp	r2, r3
100452d2:	d3dc      	bcc.n	1004528e <EM_Notification+0x2e>
      APP_DBG_MSG("\n");
100452d4:	200a      	movs	r0, #10
100452d6:	f022 f8e9 	bl	100674ac <putchar>
      reqLen= p_Notification->DataTransfered.Length;
100452da:	687b      	ldr	r3, [r7, #4]
100452dc:	7a1b      	ldrb	r3, [r3, #8]
100452de:	001a      	movs	r2, r3
100452e0:	4b0d      	ldr	r3, [pc, #52]	@ (10045318 <EM_Notification+0xb8>)
100452e2:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask( 1<<CFG_TASK_MODBUS_ID, CFG_SEQ_PRIO_0);
100452e4:	2380      	movs	r3, #128	@ 0x80
100452e6:	009b      	lsls	r3, r3, #2
100452e8:	2100      	movs	r1, #0
100452ea:	0018      	movs	r0, r3
100452ec:	f00d faaa 	bl	10052844 <UTIL_SEQ_SetTask>
      break;
100452f0:	e008      	b.n	10045304 <EM_Notification+0xa4>
      EM_APP_Context.Rs_Notification_Status = Rs_NOTIFICATION_ON;
100452f2:	4b0a      	ldr	r3, [pc, #40]	@ (1004531c <EM_Notification+0xbc>)
100452f4:	2201      	movs	r2, #1
100452f6:	701a      	strb	r2, [r3, #0]
      break;
100452f8:	e004      	b.n	10045304 <EM_Notification+0xa4>
      EM_APP_Context.Rs_Notification_Status = Rs_NOTIFICATION_OFF;
100452fa:	4b08      	ldr	r3, [pc, #32]	@ (1004531c <EM_Notification+0xbc>)
100452fc:	2200      	movs	r2, #0
100452fe:	701a      	strb	r2, [r3, #0]
      break;
10045300:	e000      	b.n	10045304 <EM_Notification+0xa4>
      break;
10045302:	46c0      	nop			@ (mov r8, r8)
  }
  return;
10045304:	46c0      	nop			@ (mov r8, r8)
}
10045306:	46bd      	mov	sp, r7
10045308:	b005      	add	sp, #20
1004530a:	bd90      	pop	{r4, r7, pc}
1004530c:	1006c54c 	.word	0x1006c54c
10045310:	1006c568 	.word	0x1006c568
10045314:	2000054c 	.word	0x2000054c
10045318:	2000064c 	.word	0x2000064c
1004531c:	20000650 	.word	0x20000650

10045320 <EM_APP_EvtRx>:

void EM_APP_EvtRx(EM_APP_ConnHandleNotEvt_t *p_Notification)
{
10045320:	b580      	push	{r7, lr}
10045322:	b082      	sub	sp, #8
10045324:	af00      	add	r7, sp, #0
10045326:	6078      	str	r0, [r7, #4]
  switch(p_Notification->EvtOpcode)
10045328:	687b      	ldr	r3, [r7, #4]
1004532a:	781b      	ldrb	r3, [r3, #0]
1004532c:	2b00      	cmp	r3, #0
1004532e:	d002      	beq.n	10045336 <EM_APP_EvtRx+0x16>
10045330:	2b01      	cmp	r3, #1
10045332:	d005      	beq.n	10045340 <EM_APP_EvtRx+0x20>
    case EM_DISCON_HANDLE_EVT:
      EM_APP_Context.ConnectionHandle = 0xFFFF;
      break;

    default:
      break;
10045334:	e009      	b.n	1004534a <EM_APP_EvtRx+0x2a>
      EM_APP_Context.ConnectionHandle = p_Notification->ConnectionHandle;
10045336:	687b      	ldr	r3, [r7, #4]
10045338:	885a      	ldrh	r2, [r3, #2]
1004533a:	4b06      	ldr	r3, [pc, #24]	@ (10045354 <EM_APP_EvtRx+0x34>)
1004533c:	805a      	strh	r2, [r3, #2]
      break;
1004533e:	e004      	b.n	1004534a <EM_APP_EvtRx+0x2a>
      EM_APP_Context.ConnectionHandle = 0xFFFF;
10045340:	4b04      	ldr	r3, [pc, #16]	@ (10045354 <EM_APP_EvtRx+0x34>)
10045342:	2201      	movs	r2, #1
10045344:	4252      	negs	r2, r2
10045346:	805a      	strh	r2, [r3, #2]
      break;
10045348:	46c0      	nop			@ (mov r8, r8)
  }
  return;
1004534a:	46c0      	nop			@ (mov r8, r8)
}
1004534c:	46bd      	mov	sp, r7
1004534e:	b002      	add	sp, #8
10045350:	bd80      	pop	{r7, pc}
10045352:	46c0      	nop			@ (mov r8, r8)
10045354:	20000650 	.word	0x20000650

10045358 <EM_APP_Init>:

void EM_APP_Init(void)
{
10045358:	b580      	push	{r7, lr}
1004535a:	af00      	add	r7, sp, #0
  EM_APP_Context.ConnectionHandle = 0xFFFF;
1004535c:	4b0b      	ldr	r3, [pc, #44]	@ (1004538c <EM_APP_Init+0x34>)
1004535e:	2201      	movs	r2, #1
10045360:	4252      	negs	r2, r2
10045362:	805a      	strh	r2, [r3, #2]
  EM_Init();
10045364:	f7ff fe76 	bl	10045054 <EM_Init>

  UTIL_SEQ_RegTask( 1U << CFG_TASK_MODBUS_ID, UTIL_SEQ_RFU, modbusProcess);
10045368:	4a09      	ldr	r2, [pc, #36]	@ (10045390 <EM_APP_Init+0x38>)
1004536a:	2380      	movs	r3, #128	@ 0x80
1004536c:	009b      	lsls	r3, r3, #2
1004536e:	2100      	movs	r1, #0
10045370:	0018      	movs	r0, r3
10045372:	f00d fa43 	bl	100527fc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1U << CFG_TASK_NOTIFY_BLE_ID, UTIL_SEQ_RFU, notifyBleTask);
10045376:	4a07      	ldr	r2, [pc, #28]	@ (10045394 <EM_APP_Init+0x3c>)
10045378:	2380      	movs	r3, #128	@ 0x80
1004537a:	005b      	lsls	r3, r3, #1
1004537c:	2100      	movs	r1, #0
1004537e:	0018      	movs	r0, r3
10045380:	f00d fa3c 	bl	100527fc <UTIL_SEQ_RegTask>

  return;
10045384:	46c0      	nop			@ (mov r8, r8)
}
10045386:	46bd      	mov	sp, r7
10045388:	bd80      	pop	{r7, pc}
1004538a:	46c0      	nop			@ (mov r8, r8)
1004538c:	20000650 	.word	0x20000650
10045390:	10045399 	.word	0x10045399
10045394:	10045649 	.word	0x10045649

10045398 <modbusProcess>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void modbusProcess(void)
{
10045398:	b5b0      	push	{r4, r5, r7, lr}
1004539a:	b0c6      	sub	sp, #280	@ 0x118
1004539c:	af00      	add	r7, sp, #0
    // Append CRC16 at the end of request (2 bytes)
    uint16_t crc = Modbus_CRC16(request, reqLen);
1004539e:	4b9a      	ldr	r3, [pc, #616]	@ (10045608 <modbusProcess+0x270>)
100453a0:	881a      	ldrh	r2, [r3, #0]
100453a2:	2587      	movs	r5, #135	@ 0x87
100453a4:	006d      	lsls	r5, r5, #1
100453a6:	197c      	adds	r4, r7, r5
100453a8:	4b98      	ldr	r3, [pc, #608]	@ (1004560c <modbusProcess+0x274>)
100453aa:	0011      	movs	r1, r2
100453ac:	0018      	movs	r0, r3
100453ae:	f7ff ff01 	bl	100451b4 <Modbus_CRC16>
100453b2:	0003      	movs	r3, r0
100453b4:	8023      	strh	r3, [r4, #0]
    request[reqLen] = crc & 0xFF;           // CRC Low byte
100453b6:	4b94      	ldr	r3, [pc, #592]	@ (10045608 <modbusProcess+0x270>)
100453b8:	881b      	ldrh	r3, [r3, #0]
100453ba:	001a      	movs	r2, r3
100453bc:	197b      	adds	r3, r7, r5
100453be:	881b      	ldrh	r3, [r3, #0]
100453c0:	b2d9      	uxtb	r1, r3
100453c2:	4b92      	ldr	r3, [pc, #584]	@ (1004560c <modbusProcess+0x274>)
100453c4:	5499      	strb	r1, [r3, r2]
    request[reqLen + 1] = (crc >> 8) & 0xFF; // CRC High byte
100453c6:	197b      	adds	r3, r7, r5
100453c8:	881b      	ldrh	r3, [r3, #0]
100453ca:	0a1b      	lsrs	r3, r3, #8
100453cc:	b29a      	uxth	r2, r3
100453ce:	4b8e      	ldr	r3, [pc, #568]	@ (10045608 <modbusProcess+0x270>)
100453d0:	881b      	ldrh	r3, [r3, #0]
100453d2:	3301      	adds	r3, #1
100453d4:	b2d1      	uxtb	r1, r2
100453d6:	4a8d      	ldr	r2, [pc, #564]	@ (1004560c <modbusProcess+0x274>)
100453d8:	54d1      	strb	r1, [r2, r3]
    reqLen += 2; // Now total request length including CRC
100453da:	4b8b      	ldr	r3, [pc, #556]	@ (10045608 <modbusProcess+0x270>)
100453dc:	881b      	ldrh	r3, [r3, #0]
100453de:	3302      	adds	r3, #2
100453e0:	b29a      	uxth	r2, r3
100453e2:	4b89      	ldr	r3, [pc, #548]	@ (10045608 <modbusProcess+0x270>)
100453e4:	801a      	strh	r2, [r3, #0]

    // Debug print full request with CRC
    APP_DBG_MSG("RS485 Request: ");
100453e6:	4b8a      	ldr	r3, [pc, #552]	@ (10045610 <modbusProcess+0x278>)
100453e8:	0018      	movs	r0, r3
100453ea:	f022 f84f 	bl	1006748c <iprintf>
    for (int i = 0; i < reqLen; i++)
100453ee:	2300      	movs	r3, #0
100453f0:	228a      	movs	r2, #138	@ 0x8a
100453f2:	0052      	lsls	r2, r2, #1
100453f4:	18ba      	adds	r2, r7, r2
100453f6:	6013      	str	r3, [r2, #0]
100453f8:	e011      	b.n	1004541e <modbusProcess+0x86>
      APP_DBG_MSG("%02X ", request[i]);
100453fa:	4a84      	ldr	r2, [pc, #528]	@ (1004560c <modbusProcess+0x274>)
100453fc:	248a      	movs	r4, #138	@ 0x8a
100453fe:	0064      	lsls	r4, r4, #1
10045400:	193b      	adds	r3, r7, r4
10045402:	681b      	ldr	r3, [r3, #0]
10045404:	18d3      	adds	r3, r2, r3
10045406:	781b      	ldrb	r3, [r3, #0]
10045408:	001a      	movs	r2, r3
1004540a:	4b82      	ldr	r3, [pc, #520]	@ (10045614 <modbusProcess+0x27c>)
1004540c:	0011      	movs	r1, r2
1004540e:	0018      	movs	r0, r3
10045410:	f022 f83c 	bl	1006748c <iprintf>
    for (int i = 0; i < reqLen; i++)
10045414:	193b      	adds	r3, r7, r4
10045416:	681b      	ldr	r3, [r3, #0]
10045418:	3301      	adds	r3, #1
1004541a:	193a      	adds	r2, r7, r4
1004541c:	6013      	str	r3, [r2, #0]
1004541e:	4b7a      	ldr	r3, [pc, #488]	@ (10045608 <modbusProcess+0x270>)
10045420:	881b      	ldrh	r3, [r3, #0]
10045422:	001a      	movs	r2, r3
10045424:	238a      	movs	r3, #138	@ 0x8a
10045426:	005b      	lsls	r3, r3, #1
10045428:	18fb      	adds	r3, r7, r3
1004542a:	681b      	ldr	r3, [r3, #0]
1004542c:	4293      	cmp	r3, r2
1004542e:	dbe4      	blt.n	100453fa <modbusProcess+0x62>
    APP_DBG_MSG("\n");
10045430:	200a      	movs	r0, #10
10045432:	f022 f83b 	bl	100674ac <putchar>

    // Send request via UART RS485
    if (HAL_UART_Transmit(&hlpuart1, request, reqLen, 1000) == HAL_OK)
10045436:	4b74      	ldr	r3, [pc, #464]	@ (10045608 <modbusProcess+0x270>)
10045438:	881a      	ldrh	r2, [r3, #0]
1004543a:	23fa      	movs	r3, #250	@ 0xfa
1004543c:	009b      	lsls	r3, r3, #2
1004543e:	4973      	ldr	r1, [pc, #460]	@ (1004560c <modbusProcess+0x274>)
10045440:	4875      	ldr	r0, [pc, #468]	@ (10045618 <modbusProcess+0x280>)
10045442:	f00b f895 	bl	10050570 <HAL_UART_Transmit>
10045446:	1e03      	subs	r3, r0, #0
10045448:	d104      	bne.n	10045454 <modbusProcess+0xbc>
    {
      APP_DBG_MSG("RS485 Request Sent\n");
1004544a:	4b74      	ldr	r3, [pc, #464]	@ (1004561c <modbusProcess+0x284>)
1004544c:	0018      	movs	r0, r3
1004544e:	f022 f88d 	bl	1006756c <puts>
10045452:	e003      	b.n	1004545c <modbusProcess+0xc4>
    }
    else
    {
      APP_DBG_MSG("RS485 Transmit Error\n");
10045454:	4b72      	ldr	r3, [pc, #456]	@ (10045620 <modbusProcess+0x288>)
10045456:	0018      	movs	r0, r3
10045458:	f022 f888 	bl	1006756c <puts>
    // Byte 2: Byte count = RegisterCount * 2
    // Bytes 3..N: Data bytes (RegisterCount * 2 bytes)
    // Last 2 bytes: CRC16

    // Extract number of registers requested
    uint16_t registerCount = ((uint16_t)request[4] << 8) | request[5];
1004545c:	4b6b      	ldr	r3, [pc, #428]	@ (1004560c <modbusProcess+0x274>)
1004545e:	791b      	ldrb	r3, [r3, #4]
10045460:	b21b      	sxth	r3, r3
10045462:	021b      	lsls	r3, r3, #8
10045464:	b21a      	sxth	r2, r3
10045466:	4b69      	ldr	r3, [pc, #420]	@ (1004560c <modbusProcess+0x274>)
10045468:	795b      	ldrb	r3, [r3, #5]
1004546a:	b21b      	sxth	r3, r3
1004546c:	4313      	orrs	r3, r2
1004546e:	b21a      	sxth	r2, r3
10045470:	2186      	movs	r1, #134	@ 0x86
10045472:	0049      	lsls	r1, r1, #1
10045474:	187b      	adds	r3, r7, r1
10045476:	801a      	strh	r2, [r3, #0]
    uint16_t respLen = 5 + (registerCount * 2);  // 1+1+1+data+2 CRC = 5 + N*2
10045478:	187b      	adds	r3, r7, r1
1004547a:	881b      	ldrh	r3, [r3, #0]
1004547c:	18db      	adds	r3, r3, r3
1004547e:	b29a      	uxth	r2, r3
10045480:	2385      	movs	r3, #133	@ 0x85
10045482:	005b      	lsls	r3, r3, #1
10045484:	18fb      	adds	r3, r7, r3
10045486:	3205      	adds	r2, #5
10045488:	801a      	strh	r2, [r3, #0]

    // Sanity check on register count to avoid large buffer overflow
    if (registerCount == 0 || registerCount > 120) // Modbus max registers at once ~125
1004548a:	187b      	adds	r3, r7, r1
1004548c:	881b      	ldrh	r3, [r3, #0]
1004548e:	2b00      	cmp	r3, #0
10045490:	d003      	beq.n	1004549a <modbusProcess+0x102>
10045492:	187b      	adds	r3, r7, r1
10045494:	881b      	ldrh	r3, [r3, #0]
10045496:	2b78      	cmp	r3, #120	@ 0x78
10045498:	d909      	bls.n	100454ae <modbusProcess+0x116>
    {
      APP_DBG_MSG("Invalid Register Count: %d\n", registerCount);
1004549a:	2386      	movs	r3, #134	@ 0x86
1004549c:	005b      	lsls	r3, r3, #1
1004549e:	18fb      	adds	r3, r7, r3
100454a0:	881a      	ldrh	r2, [r3, #0]
100454a2:	4b60      	ldr	r3, [pc, #384]	@ (10045624 <modbusProcess+0x28c>)
100454a4:	0011      	movs	r1, r2
100454a6:	0018      	movs	r0, r3
100454a8:	f021 fff0 	bl	1006748c <iprintf>
100454ac:	e0a9      	b.n	10045602 <modbusProcess+0x26a>
      return;
    }

    // Buffer for response
    uint8_t response[256] = {0};
100454ae:	4b5e      	ldr	r3, [pc, #376]	@ (10045628 <modbusProcess+0x290>)
100454b0:	228c      	movs	r2, #140	@ 0x8c
100454b2:	0052      	lsls	r2, r2, #1
100454b4:	189b      	adds	r3, r3, r2
100454b6:	19db      	adds	r3, r3, r7
100454b8:	0018      	movs	r0, r3
100454ba:	2380      	movs	r3, #128	@ 0x80
100454bc:	005b      	lsls	r3, r3, #1
100454be:	001a      	movs	r2, r3
100454c0:	2100      	movs	r1, #0
100454c2:	f022 fa2f 	bl	10067924 <memset>

    // Receive response (blocking with timeout)
    if (HAL_UART_Receive(&hlpuart1, response, respLen, 1000) == HAL_OK)
100454c6:	23fa      	movs	r3, #250	@ 0xfa
100454c8:	009c      	lsls	r4, r3, #2
100454ca:	2385      	movs	r3, #133	@ 0x85
100454cc:	005b      	lsls	r3, r3, #1
100454ce:	18fb      	adds	r3, r7, r3
100454d0:	881a      	ldrh	r2, [r3, #0]
100454d2:	1d39      	adds	r1, r7, #4
100454d4:	4850      	ldr	r0, [pc, #320]	@ (10045618 <modbusProcess+0x280>)
100454d6:	0023      	movs	r3, r4
100454d8:	f00b f8ee 	bl	100506b8 <HAL_UART_Receive>
100454dc:	1e03      	subs	r3, r0, #0
100454de:	d000      	beq.n	100454e2 <modbusProcess+0x14a>
100454e0:	e08b      	b.n	100455fa <modbusProcess+0x262>
    {
      APP_DBG_MSG("RS485 Response: ");
100454e2:	4b52      	ldr	r3, [pc, #328]	@ (1004562c <modbusProcess+0x294>)
100454e4:	0018      	movs	r0, r3
100454e6:	f021 ffd1 	bl	1006748c <iprintf>
      for (int i = 0; i < respLen; i++)
100454ea:	2300      	movs	r3, #0
100454ec:	2288      	movs	r2, #136	@ 0x88
100454ee:	0052      	lsls	r2, r2, #1
100454f0:	18ba      	adds	r2, r7, r2
100454f2:	6013      	str	r3, [r2, #0]
100454f4:	e015      	b.n	10045522 <modbusProcess+0x18a>
        APP_DBG_MSG("%02X ", response[i]);
100454f6:	4b4c      	ldr	r3, [pc, #304]	@ (10045628 <modbusProcess+0x290>)
100454f8:	228c      	movs	r2, #140	@ 0x8c
100454fa:	0052      	lsls	r2, r2, #1
100454fc:	189b      	adds	r3, r3, r2
100454fe:	19da      	adds	r2, r3, r7
10045500:	2488      	movs	r4, #136	@ 0x88
10045502:	0064      	lsls	r4, r4, #1
10045504:	193b      	adds	r3, r7, r4
10045506:	681b      	ldr	r3, [r3, #0]
10045508:	18d3      	adds	r3, r2, r3
1004550a:	781b      	ldrb	r3, [r3, #0]
1004550c:	001a      	movs	r2, r3
1004550e:	4b41      	ldr	r3, [pc, #260]	@ (10045614 <modbusProcess+0x27c>)
10045510:	0011      	movs	r1, r2
10045512:	0018      	movs	r0, r3
10045514:	f021 ffba 	bl	1006748c <iprintf>
      for (int i = 0; i < respLen; i++)
10045518:	193b      	adds	r3, r7, r4
1004551a:	681b      	ldr	r3, [r3, #0]
1004551c:	3301      	adds	r3, #1
1004551e:	193a      	adds	r2, r7, r4
10045520:	6013      	str	r3, [r2, #0]
10045522:	2485      	movs	r4, #133	@ 0x85
10045524:	0064      	lsls	r4, r4, #1
10045526:	193b      	adds	r3, r7, r4
10045528:	881b      	ldrh	r3, [r3, #0]
1004552a:	2288      	movs	r2, #136	@ 0x88
1004552c:	0052      	lsls	r2, r2, #1
1004552e:	18ba      	adds	r2, r7, r2
10045530:	6812      	ldr	r2, [r2, #0]
10045532:	429a      	cmp	r2, r3
10045534:	dbdf      	blt.n	100454f6 <modbusProcess+0x15e>
      APP_DBG_MSG("\n");
10045536:	200a      	movs	r0, #10
10045538:	f021 ffb8 	bl	100674ac <putchar>

      // CRC check on response
      uint16_t rx_crc = (response[respLen - 1] << 8) | response[respLen - 2];
1004553c:	0020      	movs	r0, r4
1004553e:	183b      	adds	r3, r7, r0
10045540:	881b      	ldrh	r3, [r3, #0]
10045542:	3b01      	subs	r3, #1
10045544:	4a38      	ldr	r2, [pc, #224]	@ (10045628 <modbusProcess+0x290>)
10045546:	248c      	movs	r4, #140	@ 0x8c
10045548:	0064      	lsls	r4, r4, #1
1004554a:	1912      	adds	r2, r2, r4
1004554c:	19d2      	adds	r2, r2, r7
1004554e:	5cd3      	ldrb	r3, [r2, r3]
10045550:	b21b      	sxth	r3, r3
10045552:	021b      	lsls	r3, r3, #8
10045554:	b21a      	sxth	r2, r3
10045556:	183b      	adds	r3, r7, r0
10045558:	881b      	ldrh	r3, [r3, #0]
1004555a:	3b02      	subs	r3, #2
1004555c:	4932      	ldr	r1, [pc, #200]	@ (10045628 <modbusProcess+0x290>)
1004555e:	1909      	adds	r1, r1, r4
10045560:	19c9      	adds	r1, r1, r7
10045562:	5ccb      	ldrb	r3, [r1, r3]
10045564:	b21b      	sxth	r3, r3
10045566:	4313      	orrs	r3, r2
10045568:	b21a      	sxth	r2, r3
1004556a:	2584      	movs	r5, #132	@ 0x84
1004556c:	006d      	lsls	r5, r5, #1
1004556e:	197b      	adds	r3, r7, r5
10045570:	801a      	strh	r2, [r3, #0]
      uint16_t calc_crc = Modbus_CRC16(response, respLen - 2);
10045572:	183b      	adds	r3, r7, r0
10045574:	881b      	ldrh	r3, [r3, #0]
10045576:	3b02      	subs	r3, #2
10045578:	b29a      	uxth	r2, r3
1004557a:	1dfc      	adds	r4, r7, #7
1004557c:	34ff      	adds	r4, #255	@ 0xff
1004557e:	1d3b      	adds	r3, r7, #4
10045580:	0011      	movs	r1, r2
10045582:	0018      	movs	r0, r3
10045584:	f7ff fe16 	bl	100451b4 <Modbus_CRC16>
10045588:	0003      	movs	r3, r0
1004558a:	8023      	strh	r3, [r4, #0]

      if (rx_crc == calc_crc)
1004558c:	197a      	adds	r2, r7, r5
1004558e:	1dfb      	adds	r3, r7, #7
10045590:	33ff      	adds	r3, #255	@ 0xff
10045592:	8812      	ldrh	r2, [r2, #0]
10045594:	881b      	ldrh	r3, [r3, #0]
10045596:	429a      	cmp	r2, r3
10045598:	d12a      	bne.n	100455f0 <modbusProcess+0x258>
      {
        APP_DBG_MSG("CRC OK\n");
1004559a:	4b25      	ldr	r3, [pc, #148]	@ (10045630 <modbusProcess+0x298>)
1004559c:	0018      	movs	r0, r3
1004559e:	f021 ffe5 	bl	1006756c <puts>

        // Copy the data bytes part (starting from byte 3, length = registerCount * 2)
        if ((registerCount * 2) <= sizeof(a_EM_UpdateCharData))
100455a2:	2486      	movs	r4, #134	@ 0x86
100455a4:	0064      	lsls	r4, r4, #1
100455a6:	193b      	adds	r3, r7, r4
100455a8:	881b      	ldrh	r3, [r3, #0]
100455aa:	005b      	lsls	r3, r3, #1
100455ac:	2bf7      	cmp	r3, #247	@ 0xf7
100455ae:	d81a      	bhi.n	100455e6 <modbusProcess+0x24e>
        {
          memcpy(a_EM_UpdateCharData, &response[3], registerCount * 2);
100455b0:	193b      	adds	r3, r7, r4
100455b2:	881b      	ldrh	r3, [r3, #0]
100455b4:	005b      	lsls	r3, r3, #1
100455b6:	001a      	movs	r2, r3
100455b8:	1d3b      	adds	r3, r7, #4
100455ba:	1cd9      	adds	r1, r3, #3
100455bc:	4b1d      	ldr	r3, [pc, #116]	@ (10045634 <modbusProcess+0x29c>)
100455be:	0018      	movs	r0, r3
100455c0:	f022 fa27 	bl	10067a12 <memcpy>

          bleNotifyData.p_Payload = a_EM_UpdateCharData;
100455c4:	4b1c      	ldr	r3, [pc, #112]	@ (10045638 <modbusProcess+0x2a0>)
100455c6:	4a1b      	ldr	r2, [pc, #108]	@ (10045634 <modbusProcess+0x29c>)
100455c8:	601a      	str	r2, [r3, #0]
          bleNotifyData.Length = registerCount * 2;
100455ca:	193b      	adds	r3, r7, r4
100455cc:	881b      	ldrh	r3, [r3, #0]
100455ce:	b2db      	uxtb	r3, r3
100455d0:	18db      	adds	r3, r3, r3
100455d2:	b2da      	uxtb	r2, r3
100455d4:	4b18      	ldr	r3, [pc, #96]	@ (10045638 <modbusProcess+0x2a0>)
100455d6:	711a      	strb	r2, [r3, #4]

          // Schedule BLE notify task
          UTIL_SEQ_SetTask(1U << CFG_TASK_NOTIFY_BLE_ID, CFG_SEQ_PRIO_0);
100455d8:	2380      	movs	r3, #128	@ 0x80
100455da:	005b      	lsls	r3, r3, #1
100455dc:	2100      	movs	r1, #0
100455de:	0018      	movs	r0, r3
100455e0:	f00d f930 	bl	10052844 <UTIL_SEQ_SetTask>
100455e4:	e00d      	b.n	10045602 <modbusProcess+0x26a>
        }
        else
        {
          APP_DBG_MSG("Data too large for BLE buffer\n");
100455e6:	4b15      	ldr	r3, [pc, #84]	@ (1004563c <modbusProcess+0x2a4>)
100455e8:	0018      	movs	r0, r3
100455ea:	f021 ffbf 	bl	1006756c <puts>
100455ee:	e008      	b.n	10045602 <modbusProcess+0x26a>
        }
      }
      else
      {
        APP_DBG_MSG("CRC Error\n");
100455f0:	4b13      	ldr	r3, [pc, #76]	@ (10045640 <modbusProcess+0x2a8>)
100455f2:	0018      	movs	r0, r3
100455f4:	f021 ffba 	bl	1006756c <puts>
100455f8:	e003      	b.n	10045602 <modbusProcess+0x26a>
      }
    }
    else
    {
      APP_DBG_MSG("RS485 Receive Timeout/Error\n");
100455fa:	4b12      	ldr	r3, [pc, #72]	@ (10045644 <modbusProcess+0x2ac>)
100455fc:	0018      	movs	r0, r3
100455fe:	f021 ffb5 	bl	1006756c <puts>
    }
}
10045602:	46bd      	mov	sp, r7
10045604:	b046      	add	sp, #280	@ 0x118
10045606:	bdb0      	pop	{r4, r5, r7, pc}
10045608:	2000064c 	.word	0x2000064c
1004560c:	2000054c 	.word	0x2000054c
10045610:	1006c570 	.word	0x1006c570
10045614:	1006c568 	.word	0x1006c568
10045618:	20000314 	.word	0x20000314
1004561c:	1006c580 	.word	0x1006c580
10045620:	1006c594 	.word	0x1006c594
10045624:	1006c5ac 	.word	0x1006c5ac
10045628:	fffffeec 	.word	0xfffffeec
1004562c:	1006c5c8 	.word	0x1006c5c8
10045630:	1006c5dc 	.word	0x1006c5dc
10045634:	20000654 	.word	0x20000654
10045638:	2000074c 	.word	0x2000074c
1004563c:	1006c5e4 	.word	0x1006c5e4
10045640:	1006c604 	.word	0x1006c604
10045644:	1006c610 	.word	0x1006c610

10045648 <notifyBleTask>:

static void notifyBleTask(void)
{
10045648:	b590      	push	{r4, r7, lr}
1004564a:	b083      	sub	sp, #12
1004564c:	af00      	add	r7, sp, #0
    if (EM_APP_Context.Rs_Notification_Status == Rs_NOTIFICATION_ON &&
1004564e:	4b12      	ldr	r3, [pc, #72]	@ (10045698 <notifyBleTask+0x50>)
10045650:	781b      	ldrb	r3, [r3, #0]
10045652:	2b01      	cmp	r3, #1
10045654:	d116      	bne.n	10045684 <notifyBleTask+0x3c>
        EM_APP_Context.ConnectionHandle != 0xFFFF)
10045656:	4b10      	ldr	r3, [pc, #64]	@ (10045698 <notifyBleTask+0x50>)
10045658:	885b      	ldrh	r3, [r3, #2]
    if (EM_APP_Context.Rs_Notification_Status == Rs_NOTIFICATION_ON &&
1004565a:	4a10      	ldr	r2, [pc, #64]	@ (1004569c <notifyBleTask+0x54>)
1004565c:	4293      	cmp	r3, r2
1004565e:	d011      	beq.n	10045684 <notifyBleTask+0x3c>
    {
        tBleStatus status = EM_NotifyValue(EM_RS, &bleNotifyData, EM_APP_Context.ConnectionHandle);
10045660:	4b0d      	ldr	r3, [pc, #52]	@ (10045698 <notifyBleTask+0x50>)
10045662:	885a      	ldrh	r2, [r3, #2]
10045664:	1dfc      	adds	r4, r7, #7
10045666:	4b0e      	ldr	r3, [pc, #56]	@ (100456a0 <notifyBleTask+0x58>)
10045668:	0019      	movs	r1, r3
1004566a:	2001      	movs	r0, #1
1004566c:	f7ff fd48 	bl	10045100 <EM_NotifyValue>
10045670:	0003      	movs	r3, r0
10045672:	7023      	strb	r3, [r4, #0]
        APP_DBG_MSG("BLE Notify Status: 0x%02X\n", status);
10045674:	1dfb      	adds	r3, r7, #7
10045676:	781a      	ldrb	r2, [r3, #0]
10045678:	4b0a      	ldr	r3, [pc, #40]	@ (100456a4 <notifyBleTask+0x5c>)
1004567a:	0011      	movs	r1, r2
1004567c:	0018      	movs	r0, r3
1004567e:	f021 ff05 	bl	1006748c <iprintf>
    {
10045682:	e004      	b.n	1004568e <notifyBleTask+0x46>
    }
    else
    {
        APP_DBG_MSG("Notification disabled or no BLE connection\n");
10045684:	4b08      	ldr	r3, [pc, #32]	@ (100456a8 <notifyBleTask+0x60>)
10045686:	0018      	movs	r0, r3
10045688:	f021 ff70 	bl	1006756c <puts>
    }
}
1004568c:	46c0      	nop			@ (mov r8, r8)
1004568e:	46c0      	nop			@ (mov r8, r8)
10045690:	46bd      	mov	sp, r7
10045692:	b003      	add	sp, #12
10045694:	bd90      	pop	{r4, r7, pc}
10045696:	46c0      	nop			@ (mov r8, r8)
10045698:	20000650 	.word	0x20000650
1004569c:	0000ffff 	.word	0x0000ffff
100456a0:	2000074c 	.word	0x2000074c
100456a4:	1006c62c 	.word	0x1006c62c
100456a8:	1006c648 	.word	0x1006c648

100456ac <P2P_SERVER_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static BLEEVT_EvtAckStatus_t P2P_SERVER_EventHandler(aci_blecore_event *p_evt)
{
100456ac:	b5b0      	push	{r4, r5, r7, lr}
100456ae:	b090      	sub	sp, #64	@ 0x40
100456b0:	af00      	add	r7, sp, #0
100456b2:	6078      	str	r0, [r7, #4]
  BLEEVT_EvtAckStatus_t return_value = BLEEVT_NoAck;
100456b4:	233f      	movs	r3, #63	@ 0x3f
100456b6:	18fb      	adds	r3, r7, r3
100456b8:	2200      	movs	r2, #0
100456ba:	701a      	strb	r2, [r3, #0]
  P2P_SERVER_NotificationEvt_t notification;
  /* USER CODE BEGIN Service1_EventHandler_1 */

  /* USER CODE END Service1_EventHandler_1 */

  switch(p_evt->ecode)
100456bc:	687b      	ldr	r3, [r7, #4]
100456be:	781a      	ldrb	r2, [r3, #0]
100456c0:	785b      	ldrb	r3, [r3, #1]
100456c2:	021b      	lsls	r3, r3, #8
100456c4:	4313      	orrs	r3, r2
100456c6:	b29b      	uxth	r3, r3
100456c8:	4a73      	ldr	r2, [pc, #460]	@ (10045898 <P2P_SERVER_EventHandler+0x1ec>)
100456ca:	4694      	mov	ip, r2
100456cc:	4463      	add	r3, ip
100456ce:	2b19      	cmp	r3, #25
100456d0:	d900      	bls.n	100456d4 <P2P_SERVER_EventHandler+0x28>
100456d2:	e0d2      	b.n	1004587a <P2P_SERVER_EventHandler+0x1ce>
100456d4:	009a      	lsls	r2, r3, #2
100456d6:	4b71      	ldr	r3, [pc, #452]	@ (1004589c <P2P_SERVER_EventHandler+0x1f0>)
100456d8:	18d3      	adds	r3, r2, r3
100456da:	681b      	ldr	r3, [r3, #0]
100456dc:	469f      	mov	pc, r3
    case ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      p_attribute_modified = (aci_gatt_srv_attribute_modified_event_rp0*)p_evt->data;
100456de:	687b      	ldr	r3, [r7, #4]
100456e0:	3302      	adds	r3, #2
100456e2:	623b      	str	r3, [r7, #32]
      notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
100456e4:	6a3b      	ldr	r3, [r7, #32]
100456e6:	781a      	ldrb	r2, [r3, #0]
100456e8:	785b      	ldrb	r3, [r3, #1]
100456ea:	021b      	lsls	r3, r3, #8
100456ec:	4313      	orrs	r3, r2
100456ee:	b29a      	uxth	r2, r3
100456f0:	210c      	movs	r1, #12
100456f2:	187b      	adds	r3, r7, r1
100456f4:	819a      	strh	r2, [r3, #12]
      notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
100456f6:	6a3b      	ldr	r3, [r7, #32]
100456f8:	791a      	ldrb	r2, [r3, #4]
100456fa:	795b      	ldrb	r3, [r3, #5]
100456fc:	021b      	lsls	r3, r3, #8
100456fe:	4313      	orrs	r3, r2
10045700:	b29a      	uxth	r2, r3
10045702:	187b      	adds	r3, r7, r1
10045704:	81da      	strh	r2, [r3, #14]
      notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
10045706:	6a3b      	ldr	r3, [r7, #32]
10045708:	799a      	ldrb	r2, [r3, #6]
1004570a:	79db      	ldrb	r3, [r3, #7]
1004570c:	021b      	lsls	r3, r3, #8
1004570e:	4313      	orrs	r3, r2
10045710:	b29b      	uxth	r3, r3
10045712:	b2da      	uxtb	r2, r3
10045714:	187b      	adds	r3, r7, r1
10045716:	721a      	strb	r2, [r3, #8]
      notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10045718:	6a3b      	ldr	r3, [r7, #32]
1004571a:	3308      	adds	r3, #8
1004571c:	001a      	movs	r2, r3
1004571e:	187b      	adds	r3, r7, r1
10045720:	605a      	str	r2, [r3, #4]
      if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Switch_CCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
10045722:	6a3b      	ldr	r3, [r7, #32]
10045724:	791a      	ldrb	r2, [r3, #4]
10045726:	795b      	ldrb	r3, [r3, #5]
10045728:	021b      	lsls	r3, r3, #8
1004572a:	4313      	orrs	r3, r2
1004572c:	b29b      	uxth	r3, r3
1004572e:	001a      	movs	r2, r3
10045730:	4b5b      	ldr	r3, [pc, #364]	@ (100458a0 <P2P_SERVER_EventHandler+0x1f4>)
10045732:	889b      	ldrh	r3, [r3, #4]
10045734:	3302      	adds	r3, #2
10045736:	429a      	cmp	r2, r3
10045738:	d11c      	bne.n	10045774 <P2P_SERVER_EventHandler+0xc8>
      {
        return_value = BLEEVT_Ack;
1004573a:	233f      	movs	r3, #63	@ 0x3f
1004573c:	18fb      	adds	r3, r7, r3
1004573e:	2201      	movs	r2, #1
10045740:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service1_Char_2 */

        /* USER CODE END Service1_Char_2 */
        switch(p_attribute_modified->Attr_Data[0])
10045742:	6a3b      	ldr	r3, [r7, #32]
10045744:	7a1b      	ldrb	r3, [r3, #8]
10045746:	2b00      	cmp	r3, #0
10045748:	d002      	beq.n	10045750 <P2P_SERVER_EventHandler+0xa4>
1004574a:	2b01      	cmp	r3, #1
1004574c:	d009      	beq.n	10045762 <P2P_SERVER_EventHandler+0xb6>

        default:
          /* USER CODE BEGIN Service1_Char_2_default */

          /* USER CODE END Service1_Char_2_default */
          break;
1004574e:	e03d      	b.n	100457cc <P2P_SERVER_EventHandler+0x120>
          notification.EvtOpcode = P2P_SERVER_SWITCH_C_NOTIFY_DISABLED_EVT;
10045750:	210c      	movs	r1, #12
10045752:	187b      	adds	r3, r7, r1
10045754:	2203      	movs	r2, #3
10045756:	701a      	strb	r2, [r3, #0]
          P2P_SERVER_Notification(&notification);
10045758:	187b      	adds	r3, r7, r1
1004575a:	0018      	movs	r0, r3
1004575c:	f000 f958 	bl	10045a10 <P2P_SERVER_Notification>
          break;
10045760:	e034      	b.n	100457cc <P2P_SERVER_EventHandler+0x120>
          notification.EvtOpcode = P2P_SERVER_SWITCH_C_NOTIFY_ENABLED_EVT;
10045762:	210c      	movs	r1, #12
10045764:	187b      	adds	r3, r7, r1
10045766:	2202      	movs	r2, #2
10045768:	701a      	strb	r2, [r3, #0]
          P2P_SERVER_Notification(&notification);
1004576a:	187b      	adds	r3, r7, r1
1004576c:	0018      	movs	r0, r3
1004576e:	f000 f94f 	bl	10045a10 <P2P_SERVER_Notification>
          break;
10045772:	e02b      	b.n	100457cc <P2P_SERVER_EventHandler+0x120>
        }
      }  /* if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Switch_CCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

      else if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10045774:	6a3b      	ldr	r3, [r7, #32]
10045776:	791a      	ldrb	r2, [r3, #4]
10045778:	795b      	ldrb	r3, [r3, #5]
1004577a:	021b      	lsls	r3, r3, #8
1004577c:	4313      	orrs	r3, r2
1004577e:	b29b      	uxth	r3, r3
10045780:	001a      	movs	r2, r3
10045782:	4b47      	ldr	r3, [pc, #284]	@ (100458a0 <P2P_SERVER_EventHandler+0x1f4>)
10045784:	885b      	ldrh	r3, [r3, #2]
10045786:	3301      	adds	r3, #1
10045788:	429a      	cmp	r2, r3
1004578a:	d000      	beq.n	1004578e <P2P_SERVER_EventHandler+0xe2>
1004578c:	e077      	b.n	1004587e <P2P_SERVER_EventHandler+0x1d2>
      {
        return_value = BLEEVT_Ack;
1004578e:	233f      	movs	r3, #63	@ 0x3f
10045790:	18fb      	adds	r3, r7, r3
10045792:	2201      	movs	r2, #1
10045794:	701a      	strb	r2, [r3, #0]

        notification.EvtOpcode = P2P_SERVER_LED_C_WRITE_NO_RESP_EVT;
10045796:	240c      	movs	r4, #12
10045798:	193b      	adds	r3, r7, r4
1004579a:	2201      	movs	r2, #1
1004579c:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        APP_DBG_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
1004579e:	4b41      	ldr	r3, [pc, #260]	@ (100458a4 <P2P_SERVER_EventHandler+0x1f8>)
100457a0:	0018      	movs	r0, r3
100457a2:	f021 fee3 	bl	1006756c <puts>
        notification.DataTransfered.Length = p_attribute_modified->Attr_Data_Length;
100457a6:	6a3b      	ldr	r3, [r7, #32]
100457a8:	799a      	ldrb	r2, [r3, #6]
100457aa:	79db      	ldrb	r3, [r3, #7]
100457ac:	021b      	lsls	r3, r3, #8
100457ae:	4313      	orrs	r3, r2
100457b0:	b29b      	uxth	r3, r3
100457b2:	b2da      	uxtb	r2, r3
100457b4:	193b      	adds	r3, r7, r4
100457b6:	721a      	strb	r2, [r3, #8]
        notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
100457b8:	6a3b      	ldr	r3, [r7, #32]
100457ba:	3308      	adds	r3, #8
100457bc:	001a      	movs	r2, r3
100457be:	193b      	adds	r3, r7, r4
100457c0:	605a      	str	r2, [r3, #4]
        /* USER CODE END Service1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        P2P_SERVER_Notification(&notification);
100457c2:	193b      	adds	r3, r7, r4
100457c4:	0018      	movs	r0, r3
100457c6:	f000 f923 	bl	10045a10 <P2P_SERVER_Notification>
      } /* if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
100457ca:	e058      	b.n	1004587e <P2P_SERVER_EventHandler+0x1d2>
100457cc:	e057      	b.n	1004587e <P2P_SERVER_EventHandler+0x1d2>
    case ACI_GATT_SRV_READ_VSEVT_CODE :
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_SRV_READ_BEGIN */
      p_read = (aci_gatt_srv_read_event_rp0*)p_evt->data;
100457ce:	687b      	ldr	r3, [r7, #4]
100457d0:	3302      	adds	r3, #2
100457d2:	637b      	str	r3, [r7, #52]	@ 0x34
	  if(p_read->Attribute_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
100457d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100457d6:	791a      	ldrb	r2, [r3, #4]
100457d8:	795b      	ldrb	r3, [r3, #5]
100457da:	021b      	lsls	r3, r3, #8
100457dc:	4313      	orrs	r3, r2
100457de:	b29b      	uxth	r3, r3
100457e0:	001a      	movs	r2, r3
100457e2:	4b2f      	ldr	r3, [pc, #188]	@ (100458a0 <P2P_SERVER_EventHandler+0x1f4>)
100457e4:	885b      	ldrh	r3, [r3, #2]
100457e6:	3301      	adds	r3, #1
100457e8:	429a      	cmp	r2, r3
100457ea:	d14a      	bne.n	10045882 <P2P_SERVER_EventHandler+0x1d6>
	  {
		return_value = BLEEVT_Ack;
100457ec:	233f      	movs	r3, #63	@ 0x3f
100457ee:	18fb      	adds	r3, r7, r3
100457f0:	2201      	movs	r2, #1
100457f2:	701a      	strb	r2, [r3, #0]
	  } /* if(p_read->Attribute_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_END */

      /* USER CODE END EVT_EVT_BLUE_GATT_SRV_READ_END */
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
100457f4:	e045      	b.n	10045882 <P2P_SERVER_EventHandler+0x1d6>
    case ACI_GATT_SRV_WRITE_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_SRV_GATT_BEGIN */

      /* USER CODE END EVT_BLUE_SRV_GATT_BEGIN */
      p_write = (aci_gatt_srv_write_event_rp0*)p_evt->data;
100457f6:	687b      	ldr	r3, [r7, #4]
100457f8:	3302      	adds	r3, #2
100457fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if(p_write->Attribute_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
100457fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100457fe:	795a      	ldrb	r2, [r3, #5]
10045800:	799b      	ldrb	r3, [r3, #6]
10045802:	021b      	lsls	r3, r3, #8
10045804:	4313      	orrs	r3, r2
10045806:	b29b      	uxth	r3, r3
10045808:	001a      	movs	r2, r3
1004580a:	4b25      	ldr	r3, [pc, #148]	@ (100458a0 <P2P_SERVER_EventHandler+0x1f4>)
1004580c:	885b      	ldrh	r3, [r3, #2]
1004580e:	3301      	adds	r3, #1
10045810:	429a      	cmp	r2, r3
10045812:	d138      	bne.n	10045886 <P2P_SERVER_EventHandler+0x1da>
      {
        return_value = BLEEVT_Ack;
10045814:	233f      	movs	r3, #63	@ 0x3f
10045816:	18fb      	adds	r3, r7, r3
10045818:	2201      	movs	r2, #1
1004581a:	701a      	strb	r2, [r3, #0]
      } /*if(p_write->Attribute_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_WRITE_END */

      /* USER CODE END EVT_BLUE_GATT_SRV_WRITE_END */
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
1004581c:	e033      	b.n	10045886 <P2P_SERVER_EventHandler+0x1da>
    }
    case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
    {
      aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
      p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_evt->data;
1004581e:	687b      	ldr	r3, [r7, #4]
10045820:	3302      	adds	r3, #2
10045822:	633b      	str	r3, [r7, #48]	@ 0x30
      UNUSED(p_tx_pool_available_event);

      /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */

      /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
10045824:	e030      	b.n	10045888 <P2P_SERVER_EventHandler+0x1dc>
    }
    case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
    {
      aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
      p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_evt->data;
10045826:	687b      	ldr	r3, [r7, #4]
10045828:	3302      	adds	r3, #2
1004582a:	627b      	str	r3, [r7, #36]	@ 0x24
      UNUSED(p_exchange_mtu);

      /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */

      /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
1004582c:	e02c      	b.n	10045888 <P2P_SERVER_EventHandler+0x1dc>
    }
    /* USER CODE BEGIN BLECORE_EVT */
    /* Manage ACI_GATT_INDICATION_VSEVT_CODE occurring on Android 12 */   
  case ACI_GATT_CLT_INDICATION_VSEVT_CODE:
    {
      tBleStatus status = BLE_STATUS_FAILED;
1004582e:	212f      	movs	r1, #47	@ 0x2f
10045830:	187b      	adds	r3, r7, r1
10045832:	2281      	movs	r2, #129	@ 0x81
10045834:	701a      	strb	r2, [r3, #0]
      aci_gatt_clt_indication_event_rp0 *pr = (void*)p_evt->data;
10045836:	687b      	ldr	r3, [r7, #4]
10045838:	3302      	adds	r3, #2
1004583a:	62bb      	str	r3, [r7, #40]	@ 0x28
      status = aci_gatt_clt_confirm_indication(pr->Connection_Handle, BLE_GATT_UNENHANCED_ATT_L2CAP_CID);
1004583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004583e:	781a      	ldrb	r2, [r3, #0]
10045840:	785b      	ldrb	r3, [r3, #1]
10045842:	021b      	lsls	r3, r3, #8
10045844:	4313      	orrs	r3, r2
10045846:	b29b      	uxth	r3, r3
10045848:	000d      	movs	r5, r1
1004584a:	187c      	adds	r4, r7, r1
1004584c:	2104      	movs	r1, #4
1004584e:	0018      	movs	r0, r3
10045850:	f00c fdf0 	bl	10052434 <aci_gatt_clt_confirm_indication>
10045854:	0003      	movs	r3, r0
10045856:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10045858:	197b      	adds	r3, r7, r5
1004585a:	781b      	ldrb	r3, [r3, #0]
1004585c:	2b00      	cmp	r3, #0
1004585e:	d007      	beq.n	10045870 <P2P_SERVER_EventHandler+0x1c4>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_confirm_indication command, result: 0x%x \n", status);
10045860:	197b      	adds	r3, r7, r5
10045862:	781a      	ldrb	r2, [r3, #0]
10045864:	4b10      	ldr	r3, [pc, #64]	@ (100458a8 <P2P_SERVER_EventHandler+0x1fc>)
10045866:	0011      	movs	r1, r2
10045868:	0018      	movs	r0, r3
1004586a:	f021 fe0f 	bl	1006748c <iprintf>
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_confirm_indication command\n");
      }   
    }
    break; /* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
1004586e:	e00b      	b.n	10045888 <P2P_SERVER_EventHandler+0x1dc>
        APP_DBG_MSG("  Success: aci_gatt_confirm_indication command\n");
10045870:	4b0e      	ldr	r3, [pc, #56]	@ (100458ac <P2P_SERVER_EventHandler+0x200>)
10045872:	0018      	movs	r0, r3
10045874:	f021 fe7a 	bl	1006756c <puts>
    break; /* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
10045878:	e006      	b.n	10045888 <P2P_SERVER_EventHandler+0x1dc>
    /* USER CODE END BLECORE_EVT */
  default:
    /* USER CODE BEGIN EVT_DEFAULT */

    /* USER CODE END EVT_DEFAULT */
    break;
1004587a:	46c0      	nop			@ (mov r8, r8)
1004587c:	e004      	b.n	10045888 <P2P_SERVER_EventHandler+0x1dc>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
1004587e:	46c0      	nop			@ (mov r8, r8)
10045880:	e002      	b.n	10045888 <P2P_SERVER_EventHandler+0x1dc>
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10045882:	46c0      	nop			@ (mov r8, r8)
10045884:	e000      	b.n	10045888 <P2P_SERVER_EventHandler+0x1dc>
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10045886:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_EventHandler_2 */

  /* USER CODE END Service1_EventHandler_2 */

  return(return_value);
10045888:	233f      	movs	r3, #63	@ 0x3f
1004588a:	18fb      	adds	r3, r7, r3
1004588c:	781b      	ldrb	r3, [r3, #0]
}/* end P2P_SERVER_EventHandler */
1004588e:	0018      	movs	r0, r3
10045890:	46bd      	mov	sp, r7
10045892:	b010      	add	sp, #64	@ 0x40
10045894:	bdb0      	pop	{r4, r5, r7, pc}
10045896:	46c0      	nop			@ (mov r8, r8)
10045898:	fffff3ff 	.word	0xfffff3ff
1004589c:	1006cb84 	.word	0x1006cb84
100458a0:	20000754 	.word	0x20000754
100458a4:	1006c674 	.word	0x1006c674
100458a8:	1006c69c 	.word	0x1006c69c
100458ac:	1006c6dc 	.word	0x1006c6dc

100458b0 <P2P_SERVER_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2P_SERVER_Init(void)
{
100458b0:	b590      	push	{r4, r7, lr}
100458b2:	b083      	sub	sp, #12
100458b4:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
100458b6:	1dfb      	adds	r3, r7, #7
100458b8:	2212      	movs	r2, #18
100458ba:	701a      	strb	r2, [r3, #0]
  /* USER CODE END InitService1Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  BLEEVT_RegisterGattEvtHandler(P2P_SERVER_EventHandler);
100458bc:	4b1f      	ldr	r3, [pc, #124]	@ (1004593c <P2P_SERVER_Init+0x8c>)
100458be:	0018      	movs	r0, r3
100458c0:	f00c f8e4 	bl	10051a8c <BLEEVT_RegisterGattEvtHandler>

  ret = aci_gatt_srv_add_service((ble_gatt_srv_def_t *)&p2p_server_service);
100458c4:	1dfc      	adds	r4, r7, #7
100458c6:	4b1e      	ldr	r3, [pc, #120]	@ (10045940 <P2P_SERVER_Init+0x90>)
100458c8:	0018      	movs	r0, r3
100458ca:	f00c fd27 	bl	1005231c <aci_gatt_srv_add_service>
100458ce:	0003      	movs	r3, r0
100458d0:	7023      	strb	r3, [r4, #0]

  if (ret != BLE_STATUS_SUCCESS)
100458d2:	1dfb      	adds	r3, r7, #7
100458d4:	781b      	ldrb	r3, [r3, #0]
100458d6:	2b00      	cmp	r3, #0
100458d8:	d007      	beq.n	100458ea <P2P_SERVER_Init+0x3a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_srv_add_service command: p2p_Server, error code: 0x%x \n", ret);
100458da:	1dfb      	adds	r3, r7, #7
100458dc:	781a      	ldrb	r2, [r3, #0]
100458de:	4b19      	ldr	r3, [pc, #100]	@ (10045944 <P2P_SERVER_Init+0x94>)
100458e0:	0011      	movs	r1, r2
100458e2:	0018      	movs	r0, r3
100458e4:	f021 fdd2 	bl	1006748c <iprintf>
100458e8:	e003      	b.n	100458f2 <P2P_SERVER_Init+0x42>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_add_service command: p2p_Server \n");
100458ea:	4b17      	ldr	r3, [pc, #92]	@ (10045948 <P2P_SERVER_Init+0x98>)
100458ec:	0018      	movs	r0, r3
100458ee:	f021 fe3d 	bl	1006756c <puts>
  }

  P2P_SERVER_Context.P2p_serverSvcHdle = aci_gatt_srv_get_service_handle((ble_gatt_srv_def_t *) &p2p_server_service);
100458f2:	4b13      	ldr	r3, [pc, #76]	@ (10045940 <P2P_SERVER_Init+0x90>)
100458f4:	0018      	movs	r0, r3
100458f6:	f00c fd1e 	bl	10052336 <aci_gatt_srv_get_service_handle>
100458fa:	0003      	movs	r3, r0
100458fc:	001a      	movs	r2, r3
100458fe:	4b13      	ldr	r3, [pc, #76]	@ (1004594c <P2P_SERVER_Init+0x9c>)
10045900:	801a      	strh	r2, [r3, #0]
  P2P_SERVER_Context.Led_CCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&p2p_server_chars[0]);
10045902:	4b13      	ldr	r3, [pc, #76]	@ (10045950 <P2P_SERVER_Init+0xa0>)
10045904:	0018      	movs	r0, r3
10045906:	f00c fd36 	bl	10052376 <aci_gatt_srv_get_char_decl_handle>
1004590a:	0003      	movs	r3, r0
1004590c:	001a      	movs	r2, r3
1004590e:	4b0f      	ldr	r3, [pc, #60]	@ (1004594c <P2P_SERVER_Init+0x9c>)
10045910:	805a      	strh	r2, [r3, #2]
  P2P_SERVER_Context.Switch_CCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&p2p_server_chars[1]);
10045912:	4b10      	ldr	r3, [pc, #64]	@ (10045954 <P2P_SERVER_Init+0xa4>)
10045914:	0018      	movs	r0, r3
10045916:	f00c fd2e 	bl	10052376 <aci_gatt_srv_get_char_decl_handle>
1004591a:	0003      	movs	r3, r0
1004591c:	001a      	movs	r2, r3
1004591e:	4b0b      	ldr	r3, [pc, #44]	@ (1004594c <P2P_SERVER_Init+0x9c>)
10045920:	809a      	strh	r2, [r3, #4]

  /* USER CODE BEGIN InitService1Svc_2 */

  /* USER CODE END InitService1Svc_2 */

  if (ret != BLE_STATUS_SUCCESS)
10045922:	1dfb      	adds	r3, r7, #7
10045924:	781b      	ldrb	r3, [r3, #0]
10045926:	2b00      	cmp	r3, #0
10045928:	d004      	beq.n	10045934 <P2P_SERVER_Init+0x84>
  {
    APP_DBG_MSG("  Fail registering p2p_Server handlers\n");
1004592a:	4b0b      	ldr	r3, [pc, #44]	@ (10045958 <P2P_SERVER_Init+0xa8>)
1004592c:	0018      	movs	r0, r3
1004592e:	f021 fe1d 	bl	1006756c <puts>
  }

  return;
10045932:	46c0      	nop			@ (mov r8, r8)
10045934:	46c0      	nop			@ (mov r8, r8)
}
10045936:	46bd      	mov	sp, r7
10045938:	b003      	add	sp, #12
1004593a:	bd90      	pop	{r4, r7, pc}
1004593c:	100456ad 	.word	0x100456ad
10045940:	1006cb5c 	.word	0x1006cb5c
10045944:	1006c70c 	.word	0x1006c70c
10045948:	1006c758 	.word	0x1006c758
1004594c:	20000754 	.word	0x20000754
10045950:	1006cb14 	.word	0x1006cb14
10045954:	1006cb38 	.word	0x1006cb38
10045958:	1006c794 	.word	0x1006c794

1004595c <P2P_SERVER_NotifyValue>:
 * @param  pData: pointer to the data to be notified to the client
 * @param  ConnectionHandle: connection handle identifying the client to be notified.
 *
 */
tBleStatus P2P_SERVER_NotifyValue(P2P_SERVER_CharOpcode_t CharOpcode, P2P_SERVER_Data_t *pData, uint16_t ConnectionHandle)
{
1004595c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004595e:	b087      	sub	sp, #28
10045960:	af02      	add	r7, sp, #8
10045962:	6039      	str	r1, [r7, #0]
10045964:	0011      	movs	r1, r2
10045966:	1dfb      	adds	r3, r7, #7
10045968:	1c02      	adds	r2, r0, #0
1004596a:	701a      	strb	r2, [r3, #0]
1004596c:	1d3b      	adds	r3, r7, #4
1004596e:	1c0a      	adds	r2, r1, #0
10045970:	801a      	strh	r2, [r3, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
10045972:	230f      	movs	r3, #15
10045974:	18fb      	adds	r3, r7, r3
10045976:	2212      	movs	r2, #18
10045978:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN Service1_App_Notify_Char_1 */

  /* USER CODE END Service1_App_Notify_Char_1 */

  switch(CharOpcode)
1004597a:	1dfb      	adds	r3, r7, #7
1004597c:	781b      	ldrb	r3, [r3, #0]
1004597e:	2b01      	cmp	r3, #1
10045980:	d136      	bne.n	100459f0 <P2P_SERVER_NotifyValue+0x94>
  {

    case P2P_SERVER_SWITCH_C:
      memcpy(switch_c_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(switch_c_val_buffer)));
10045982:	683b      	ldr	r3, [r7, #0]
10045984:	6819      	ldr	r1, [r3, #0]
10045986:	683b      	ldr	r3, [r7, #0]
10045988:	791b      	ldrb	r3, [r3, #4]
1004598a:	1c1a      	adds	r2, r3, #0
1004598c:	b2d3      	uxtb	r3, r2
1004598e:	2b02      	cmp	r3, #2
10045990:	d901      	bls.n	10045996 <P2P_SERVER_NotifyValue+0x3a>
10045992:	2302      	movs	r3, #2
10045994:	1c1a      	adds	r2, r3, #0
10045996:	b2d3      	uxtb	r3, r2
10045998:	001a      	movs	r2, r3
1004599a:	4b19      	ldr	r3, [pc, #100]	@ (10045a00 <P2P_SERVER_NotifyValue+0xa4>)
1004599c:	0018      	movs	r0, r3
1004599e:	f022 f838 	bl	10067a12 <memcpy>
      ret = aci_gatt_srv_notify(ConnectionHandle,
                                BLE_GATT_UNENHANCED_ATT_L2CAP_CID,
                                P2P_SERVER_Context.Switch_CCharHdle + 1,
100459a2:	4b18      	ldr	r3, [pc, #96]	@ (10045a04 <P2P_SERVER_NotifyValue+0xa8>)
100459a4:	889b      	ldrh	r3, [r3, #4]
      ret = aci_gatt_srv_notify(ConnectionHandle,
100459a6:	3301      	adds	r3, #1
100459a8:	b299      	uxth	r1, r3
                                GATT_NOTIFICATION,
                                pData->Length, /* charValueLen */
100459aa:	683b      	ldr	r3, [r7, #0]
100459ac:	791b      	ldrb	r3, [r3, #4]
      ret = aci_gatt_srv_notify(ConnectionHandle,
100459ae:	001d      	movs	r5, r3
100459b0:	683b      	ldr	r3, [r7, #0]
100459b2:	681b      	ldr	r3, [r3, #0]
100459b4:	260f      	movs	r6, #15
100459b6:	19bc      	adds	r4, r7, r6
100459b8:	1d3a      	adds	r2, r7, #4
100459ba:	8810      	ldrh	r0, [r2, #0]
100459bc:	9301      	str	r3, [sp, #4]
100459be:	9500      	str	r5, [sp, #0]
100459c0:	2300      	movs	r3, #0
100459c2:	000a      	movs	r2, r1
100459c4:	2104      	movs	r1, #4
100459c6:	f00c fce3 	bl	10052390 <aci_gatt_srv_notify>
100459ca:	0003      	movs	r3, r0
100459cc:	7023      	strb	r3, [r4, #0]
                                (uint8_t *)pData->p_Payload);
      if (ret != BLE_STATUS_SUCCESS)
100459ce:	19bb      	adds	r3, r7, r6
100459d0:	781b      	ldrb	r3, [r3, #0]
100459d2:	2b00      	cmp	r3, #0
100459d4:	d007      	beq.n	100459e6 <P2P_SERVER_NotifyValue+0x8a>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_srv_notify SWITCH_C command, error code: 0x%2X\n", ret);
100459d6:	19bb      	adds	r3, r7, r6
100459d8:	781a      	ldrb	r2, [r3, #0]
100459da:	4b0b      	ldr	r3, [pc, #44]	@ (10045a08 <P2P_SERVER_NotifyValue+0xac>)
100459dc:	0011      	movs	r1, r2
100459de:	0018      	movs	r0, r3
100459e0:	f021 fd54 	bl	1006748c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_srv_notify SWITCH_C command\n");
      }
      /* USER CODE BEGIN Service1_Char_Value_2*/

      /* USER CODE END Service1_Char_Value_2*/
      break;
100459e4:	e005      	b.n	100459f2 <P2P_SERVER_NotifyValue+0x96>
        APP_DBG_MSG("  Success: aci_gatt_srv_notify SWITCH_C command\n");
100459e6:	4b09      	ldr	r3, [pc, #36]	@ (10045a0c <P2P_SERVER_NotifyValue+0xb0>)
100459e8:	0018      	movs	r0, r3
100459ea:	f021 fdbf 	bl	1006756c <puts>
      break;
100459ee:	e000      	b.n	100459f2 <P2P_SERVER_NotifyValue+0x96>

    default:
      break;
100459f0:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_App_Notify_Char_2 */

  /* USER CODE END Service1_App_Notify_Char_2 */

  return ret;
100459f2:	230f      	movs	r3, #15
100459f4:	18fb      	adds	r3, r7, r3
100459f6:	781b      	ldrb	r3, [r3, #0]
}
100459f8:	0018      	movs	r0, r3
100459fa:	46bd      	mov	sp, r7
100459fc:	b005      	add	sp, #20
100459fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10045a00:	20000764 	.word	0x20000764
10045a04:	20000754 	.word	0x20000754
10045a08:	1006c7bc 	.word	0x1006c7bc
10045a0c:	1006c800 	.word	0x1006c800

10045a10 <P2P_SERVER_Notification>:
static void P2P_SERVER_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2P_SERVER_Notification(P2P_SERVER_NotificationEvt_t *p_Notification)
{
10045a10:	b580      	push	{r7, lr}
10045a12:	b082      	sub	sp, #8
10045a14:	af00      	add	r7, sp, #0
10045a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_Notification_1 */

  /* USER CODE END Service1_Notification_1 */
  switch(p_Notification->EvtOpcode)
10045a18:	687b      	ldr	r3, [r7, #4]
10045a1a:	781b      	ldrb	r3, [r3, #0]
10045a1c:	2b03      	cmp	r3, #3
10045a1e:	d035      	beq.n	10045a8c <P2P_SERVER_Notification+0x7c>
10045a20:	dc40      	bgt.n	10045aa4 <P2P_SERVER_Notification+0x94>
10045a22:	2b02      	cmp	r3, #2
10045a24:	d026      	beq.n	10045a74 <P2P_SERVER_Notification+0x64>
10045a26:	dc3d      	bgt.n	10045aa4 <P2P_SERVER_Notification+0x94>
10045a28:	2b00      	cmp	r3, #0
10045a2a:	d03d      	beq.n	10045aa8 <P2P_SERVER_Notification+0x98>
10045a2c:	2b01      	cmp	r3, #1
10045a2e:	d000      	beq.n	10045a32 <P2P_SERVER_Notification+0x22>

    default:
      /* USER CODE BEGIN Service1_Notification_default */

      /* USER CODE END Service1_Notification_default */
      break;
10045a30:	e038      	b.n	10045aa4 <P2P_SERVER_Notification+0x94>
      if(p_Notification->DataTransfered.p_Payload[1] == 0x01)
10045a32:	687b      	ldr	r3, [r7, #4]
10045a34:	685b      	ldr	r3, [r3, #4]
10045a36:	3301      	adds	r3, #1
10045a38:	781b      	ldrb	r3, [r3, #0]
10045a3a:	2b01      	cmp	r3, #1
10045a3c:	d109      	bne.n	10045a52 <P2P_SERVER_Notification+0x42>
        BSP_LED_On(LED_BLUE);
10045a3e:	2000      	movs	r0, #0
10045a40:	f005 fe46 	bl	1004b6d0 <BSP_LED_On>
        APP_DBG_MSG("-- P2P APPLICATION SERVER : LED1 ON\n"); 
10045a44:	4b1c      	ldr	r3, [pc, #112]	@ (10045ab8 <P2P_SERVER_Notification+0xa8>)
10045a46:	0018      	movs	r0, r3
10045a48:	f021 fd90 	bl	1006756c <puts>
        P2P_SERVER_APP_Context.LedControl.Led1 = 0x01; /* LED1 ON */
10045a4c:	4b1b      	ldr	r3, [pc, #108]	@ (10045abc <P2P_SERVER_Notification+0xac>)
10045a4e:	2201      	movs	r2, #1
10045a50:	709a      	strb	r2, [r3, #2]
      if(p_Notification->DataTransfered.p_Payload[1] == 0x00)
10045a52:	687b      	ldr	r3, [r7, #4]
10045a54:	685b      	ldr	r3, [r3, #4]
10045a56:	3301      	adds	r3, #1
10045a58:	781b      	ldrb	r3, [r3, #0]
10045a5a:	2b00      	cmp	r3, #0
10045a5c:	d126      	bne.n	10045aac <P2P_SERVER_Notification+0x9c>
        BSP_LED_Off(LED_BLUE);
10045a5e:	2000      	movs	r0, #0
10045a60:	f005 fe54 	bl	1004b70c <BSP_LED_Off>
        APP_DBG_MSG("-- P2P APPLICATION SERVER : LED1 OFF\n"); 
10045a64:	4b16      	ldr	r3, [pc, #88]	@ (10045ac0 <P2P_SERVER_Notification+0xb0>)
10045a66:	0018      	movs	r0, r3
10045a68:	f021 fd80 	bl	1006756c <puts>
        P2P_SERVER_APP_Context.LedControl.Led1 = 0x00; /* LED1 OFF */
10045a6c:	4b13      	ldr	r3, [pc, #76]	@ (10045abc <P2P_SERVER_Notification+0xac>)
10045a6e:	2200      	movs	r2, #0
10045a70:	709a      	strb	r2, [r3, #2]
      break;
10045a72:	e01b      	b.n	10045aac <P2P_SERVER_Notification+0x9c>
      P2P_SERVER_APP_Context.Switch_c_Notification_Status = Switch_c_NOTIFICATION_ON;
10045a74:	4b11      	ldr	r3, [pc, #68]	@ (10045abc <P2P_SERVER_Notification+0xac>)
10045a76:	2201      	movs	r2, #1
10045a78:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
10045a7a:	4b12      	ldr	r3, [pc, #72]	@ (10045ac4 <P2P_SERVER_Notification+0xb4>)
10045a7c:	0018      	movs	r0, r3
10045a7e:	f021 fd75 	bl	1006756c <puts>
      APP_DBG_MSG(" \n\r");
10045a82:	4b11      	ldr	r3, [pc, #68]	@ (10045ac8 <P2P_SERVER_Notification+0xb8>)
10045a84:	0018      	movs	r0, r3
10045a86:	f021 fd01 	bl	1006748c <iprintf>
      break;
10045a8a:	e010      	b.n	10045aae <P2P_SERVER_Notification+0x9e>
      P2P_SERVER_APP_Context.Switch_c_Notification_Status = Switch_c_NOTIFICATION_OFF;
10045a8c:	4b0b      	ldr	r3, [pc, #44]	@ (10045abc <P2P_SERVER_Notification+0xac>)
10045a8e:	2200      	movs	r2, #0
10045a90:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n"); 
10045a92:	4b0e      	ldr	r3, [pc, #56]	@ (10045acc <P2P_SERVER_Notification+0xbc>)
10045a94:	0018      	movs	r0, r3
10045a96:	f021 fd69 	bl	1006756c <puts>
      APP_DBG_MSG(" \n\r");
10045a9a:	4b0b      	ldr	r3, [pc, #44]	@ (10045ac8 <P2P_SERVER_Notification+0xb8>)
10045a9c:	0018      	movs	r0, r3
10045a9e:	f021 fcf5 	bl	1006748c <iprintf>
      break;
10045aa2:	e004      	b.n	10045aae <P2P_SERVER_Notification+0x9e>
      break;
10045aa4:	46c0      	nop			@ (mov r8, r8)
10045aa6:	e002      	b.n	10045aae <P2P_SERVER_Notification+0x9e>
      break;
10045aa8:	46c0      	nop			@ (mov r8, r8)
10045aaa:	e000      	b.n	10045aae <P2P_SERVER_Notification+0x9e>
      break;
10045aac:	46c0      	nop			@ (mov r8, r8)
  }
  /* USER CODE BEGIN Service1_Notification_2 */

  /* USER CODE END Service1_Notification_2 */
  return;
10045aae:	46c0      	nop			@ (mov r8, r8)
}
10045ab0:	46bd      	mov	sp, r7
10045ab2:	b002      	add	sp, #8
10045ab4:	bd80      	pop	{r7, pc}
10045ab6:	46c0      	nop			@ (mov r8, r8)
10045ab8:	1006c830 	.word	0x1006c830
10045abc:	20000768 	.word	0x20000768
10045ac0:	1006c854 	.word	0x1006c854
10045ac4:	1006c87c 	.word	0x1006c87c
10045ac8:	1006c8b0 	.word	0x1006c8b0
10045acc:	1006c8b4 	.word	0x1006c8b4

10045ad0 <P2P_SERVER_APP_EvtRx>:

void P2P_SERVER_APP_EvtRx(P2P_SERVER_APP_ConnHandleNotEvt_t *p_Notification)
{
10045ad0:	b580      	push	{r7, lr}
10045ad2:	b082      	sub	sp, #8
10045ad4:	af00      	add	r7, sp, #0
10045ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_APP_EvtRx_1 */

  /* USER CODE END Service1_APP_EvtRx_1 */

  switch(p_Notification->EvtOpcode)
10045ad8:	687b      	ldr	r3, [r7, #4]
10045ada:	781b      	ldrb	r3, [r3, #0]
10045adc:	2b00      	cmp	r3, #0
10045ade:	d002      	beq.n	10045ae6 <P2P_SERVER_APP_EvtRx+0x16>
10045ae0:	2b01      	cmp	r3, #1
10045ae2:	d005      	beq.n	10045af0 <P2P_SERVER_APP_EvtRx+0x20>

    default:
      /* USER CODE BEGIN Service1_APP_EvtRx_default */

      /* USER CODE END Service1_APP_EvtRx_default */
      break;
10045ae4:	e00b      	b.n	10045afe <P2P_SERVER_APP_EvtRx+0x2e>
      P2P_SERVER_APP_Context.ConnectionHandle = p_Notification->ConnectionHandle;
10045ae6:	687b      	ldr	r3, [r7, #4]
10045ae8:	885a      	ldrh	r2, [r3, #2]
10045aea:	4b07      	ldr	r3, [pc, #28]	@ (10045b08 <P2P_SERVER_APP_EvtRx+0x38>)
10045aec:	80da      	strh	r2, [r3, #6]
      break;
10045aee:	e006      	b.n	10045afe <P2P_SERVER_APP_EvtRx+0x2e>
      P2P_SERVER_APP_Context.ConnectionHandle = 0xFFFF;
10045af0:	4b05      	ldr	r3, [pc, #20]	@ (10045b08 <P2P_SERVER_APP_EvtRx+0x38>)
10045af2:	2201      	movs	r2, #1
10045af4:	4252      	negs	r2, r2
10045af6:	80da      	strh	r2, [r3, #6]
      P2P_SERVER_APP_LED_BUTTON_context_Init();
10045af8:	f000 f822 	bl	10045b40 <P2P_SERVER_APP_LED_BUTTON_context_Init>
      break;
10045afc:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_APP_EvtRx_2 */

  /* USER CODE END Service1_APP_EvtRx_2 */

  return;
10045afe:	46c0      	nop			@ (mov r8, r8)
}
10045b00:	46bd      	mov	sp, r7
10045b02:	b002      	add	sp, #8
10045b04:	bd80      	pop	{r7, pc}
10045b06:	46c0      	nop			@ (mov r8, r8)
10045b08:	20000768 	.word	0x20000768

10045b0c <P2P_SERVER_APP_Init>:

void P2P_SERVER_APP_Init(void)
{
10045b0c:	b580      	push	{r7, lr}
10045b0e:	af00      	add	r7, sp, #0
  P2P_SERVER_APP_Context.ConnectionHandle = 0xFFFF;
10045b10:	4b09      	ldr	r3, [pc, #36]	@ (10045b38 <P2P_SERVER_APP_Init+0x2c>)
10045b12:	2201      	movs	r2, #1
10045b14:	4252      	negs	r2, r2
10045b16:	80da      	strh	r2, [r3, #6]
  P2P_SERVER_Init();
10045b18:	f7ff feca 	bl	100458b0 <P2P_SERVER_Init>

  /* USER CODE BEGIN Service1_APP_Init */
  UTIL_SEQ_RegTask( 1U << CFG_TASK_SEND_NOTIF_ID, UTIL_SEQ_RFU, P2P_SERVER_Switch_c_SendNotification);
10045b1c:	4b07      	ldr	r3, [pc, #28]	@ (10045b3c <P2P_SERVER_APP_Init+0x30>)
10045b1e:	001a      	movs	r2, r3
10045b20:	2100      	movs	r1, #0
10045b22:	2080      	movs	r0, #128	@ 0x80
10045b24:	f00c fe6a 	bl	100527fc <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_SERVER_APP_Context.Switch_c_Notification_Status= Switch_c_NOTIFICATION_OFF;
10045b28:	4b03      	ldr	r3, [pc, #12]	@ (10045b38 <P2P_SERVER_APP_Init+0x2c>)
10045b2a:	2200      	movs	r2, #0
10045b2c:	701a      	strb	r2, [r3, #0]
  P2P_SERVER_APP_LED_BUTTON_context_Init();
10045b2e:	f000 f807 	bl	10045b40 <P2P_SERVER_APP_LED_BUTTON_context_Init>
  /* USER CODE END Service1_APP_Init */
  return;
10045b32:	46c0      	nop			@ (mov r8, r8)
}
10045b34:	46bd      	mov	sp, r7
10045b36:	bd80      	pop	{r7, pc}
10045b38:	20000768 	.word	0x20000768
10045b3c:	10045b6d 	.word	0x10045b6d

10045b40 <P2P_SERVER_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2P_SERVER_APP_LED_BUTTON_context_Init(void)
{  
10045b40:	b580      	push	{r7, lr}
10045b42:	af00      	add	r7, sp, #0
  BSP_LED_Off(LED_BLUE);
10045b44:	2000      	movs	r0, #0
10045b46:	f005 fde1 	bl	1004b70c <BSP_LED_Off>
  P2P_SERVER_APP_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
10045b4a:	4b07      	ldr	r3, [pc, #28]	@ (10045b68 <P2P_SERVER_APP_LED_BUTTON_context_Init+0x28>)
10045b4c:	2201      	movs	r2, #1
10045b4e:	705a      	strb	r2, [r3, #1]
  P2P_SERVER_APP_Context.LedControl.Led1=0x00; /* led OFF */
10045b50:	4b05      	ldr	r3, [pc, #20]	@ (10045b68 <P2P_SERVER_APP_LED_BUTTON_context_Init+0x28>)
10045b52:	2200      	movs	r2, #0
10045b54:	709a      	strb	r2, [r3, #2]
  P2P_SERVER_APP_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
10045b56:	4b04      	ldr	r3, [pc, #16]	@ (10045b68 <P2P_SERVER_APP_LED_BUTTON_context_Init+0x28>)
10045b58:	2201      	movs	r2, #1
10045b5a:	70da      	strb	r2, [r3, #3]
  P2P_SERVER_APP_Context.ButtonControl.ButtonStatus=0x00;
10045b5c:	4b02      	ldr	r3, [pc, #8]	@ (10045b68 <P2P_SERVER_APP_LED_BUTTON_context_Init+0x28>)
10045b5e:	2200      	movs	r2, #0
10045b60:	711a      	strb	r2, [r3, #4]

  return;
10045b62:	46c0      	nop			@ (mov r8, r8)
}
10045b64:	46bd      	mov	sp, r7
10045b66:	bd80      	pop	{r7, pc}
10045b68:	20000768 	.word	0x20000768

10045b6c <P2P_SERVER_Switch_c_SendNotification>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
__USED void P2P_SERVER_Switch_c_SendNotification(void) /* Property Notification */
{
10045b6c:	b580      	push	{r7, lr}
10045b6e:	b084      	sub	sp, #16
10045b70:	af00      	add	r7, sp, #0
  P2P_SERVER_APP_SendInformation_t notification_on_off = Switch_c_NOTIFICATION_OFF;
10045b72:	230f      	movs	r3, #15
10045b74:	18fb      	adds	r3, r7, r3
10045b76:	2200      	movs	r2, #0
10045b78:	701a      	strb	r2, [r3, #0]
  P2P_SERVER_Data_t p2p_server_notification_data;

  p2p_server_notification_data.p_Payload = (uint8_t*)a_P2P_SERVER_UpdateCharData;
10045b7a:	1d3b      	adds	r3, r7, #4
10045b7c:	4a21      	ldr	r2, [pc, #132]	@ (10045c04 <P2P_SERVER_Switch_c_SendNotification+0x98>)
10045b7e:	601a      	str	r2, [r3, #0]
  p2p_server_notification_data.Length = 0;
10045b80:	1d3b      	adds	r3, r7, #4
10045b82:	2200      	movs	r2, #0
10045b84:	711a      	strb	r2, [r3, #4]

  /* USER CODE BEGIN Service1Char2_NS_1*/

  if(P2P_SERVER_APP_Context.ButtonControl.ButtonStatus == 0x00)
10045b86:	4b20      	ldr	r3, [pc, #128]	@ (10045c08 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045b88:	791b      	ldrb	r3, [r3, #4]
10045b8a:	2b00      	cmp	r3, #0
10045b8c:	d103      	bne.n	10045b96 <P2P_SERVER_Switch_c_SendNotification+0x2a>
  {
    P2P_SERVER_APP_Context.ButtonControl.ButtonStatus = 0x01;
10045b8e:	4b1e      	ldr	r3, [pc, #120]	@ (10045c08 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045b90:	2201      	movs	r2, #1
10045b92:	711a      	strb	r2, [r3, #4]
10045b94:	e002      	b.n	10045b9c <P2P_SERVER_Switch_c_SendNotification+0x30>
  } 
  else
  {
    P2P_SERVER_APP_Context.ButtonControl.ButtonStatus = 0x00;
10045b96:	4b1c      	ldr	r3, [pc, #112]	@ (10045c08 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045b98:	2200      	movs	r2, #0
10045b9a:	711a      	strb	r2, [r3, #4]
  }
  a_P2P_SERVER_UpdateCharData[0] = 0x01; /* Device Led selection */
10045b9c:	4b19      	ldr	r3, [pc, #100]	@ (10045c04 <P2P_SERVER_Switch_c_SendNotification+0x98>)
10045b9e:	2201      	movs	r2, #1
10045ba0:	701a      	strb	r2, [r3, #0]
  a_P2P_SERVER_UpdateCharData[1] = P2P_SERVER_APP_Context.ButtonControl.ButtonStatus;
10045ba2:	4b19      	ldr	r3, [pc, #100]	@ (10045c08 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045ba4:	791a      	ldrb	r2, [r3, #4]
10045ba6:	4b17      	ldr	r3, [pc, #92]	@ (10045c04 <P2P_SERVER_Switch_c_SendNotification+0x98>)
10045ba8:	705a      	strb	r2, [r3, #1]
  /* Update notification data length */
  p2p_server_notification_data.Length = (p2p_server_notification_data.Length) + 2; 
10045baa:	1d3b      	adds	r3, r7, #4
10045bac:	791b      	ldrb	r3, [r3, #4]
10045bae:	3302      	adds	r3, #2
10045bb0:	b2da      	uxtb	r2, r3
10045bb2:	1d3b      	adds	r3, r7, #4
10045bb4:	711a      	strb	r2, [r3, #4]
  
  if(P2P_SERVER_APP_Context.Switch_c_Notification_Status == Switch_c_NOTIFICATION_ON)
10045bb6:	4b14      	ldr	r3, [pc, #80]	@ (10045c08 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045bb8:	781b      	ldrb	r3, [r3, #0]
10045bba:	2b01      	cmp	r3, #1
10045bbc:	d108      	bne.n	10045bd0 <P2P_SERVER_Switch_c_SendNotification+0x64>
  { 
    APP_DBG_MSG("-- P2P APPLICATION SERVER : INFORM CLIENT BUTTON 1 PUSHED\n");
10045bbe:	4b13      	ldr	r3, [pc, #76]	@ (10045c0c <P2P_SERVER_Switch_c_SendNotification+0xa0>)
10045bc0:	0018      	movs	r0, r3
10045bc2:	f021 fcd3 	bl	1006756c <puts>
    notification_on_off = Switch_c_NOTIFICATION_ON;
10045bc6:	230f      	movs	r3, #15
10045bc8:	18fb      	adds	r3, r7, r3
10045bca:	2201      	movs	r2, #1
10045bcc:	701a      	strb	r2, [r3, #0]
10045bce:	e003      	b.n	10045bd8 <P2P_SERVER_Switch_c_SendNotification+0x6c>
  } 
  else
  {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n"); 
10045bd0:	4b0f      	ldr	r3, [pc, #60]	@ (10045c10 <P2P_SERVER_Switch_c_SendNotification+0xa4>)
10045bd2:	0018      	movs	r0, r3
10045bd4:	f021 fcca 	bl	1006756c <puts>
  }
  /* USER CODE END Service1Char2_NS_1*/

  if (notification_on_off != Switch_c_NOTIFICATION_OFF && P2P_SERVER_APP_Context.ConnectionHandle != 0xFFFF)
10045bd8:	230f      	movs	r3, #15
10045bda:	18fb      	adds	r3, r7, r3
10045bdc:	781b      	ldrb	r3, [r3, #0]
10045bde:	2b00      	cmp	r3, #0
10045be0:	d00c      	beq.n	10045bfc <P2P_SERVER_Switch_c_SendNotification+0x90>
10045be2:	4b09      	ldr	r3, [pc, #36]	@ (10045c08 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045be4:	88db      	ldrh	r3, [r3, #6]
10045be6:	4a0b      	ldr	r2, [pc, #44]	@ (10045c14 <P2P_SERVER_Switch_c_SendNotification+0xa8>)
10045be8:	4293      	cmp	r3, r2
10045bea:	d007      	beq.n	10045bfc <P2P_SERVER_Switch_c_SendNotification+0x90>
  {
    P2P_SERVER_NotifyValue(P2P_SERVER_SWITCH_C, &p2p_server_notification_data, P2P_SERVER_APP_Context.ConnectionHandle);
10045bec:	4b06      	ldr	r3, [pc, #24]	@ (10045c08 <P2P_SERVER_Switch_c_SendNotification+0x9c>)
10045bee:	88da      	ldrh	r2, [r3, #6]
10045bf0:	1d3b      	adds	r3, r7, #4
10045bf2:	0019      	movs	r1, r3
10045bf4:	2001      	movs	r0, #1
10045bf6:	f7ff feb1 	bl	1004595c <P2P_SERVER_NotifyValue>

  /* USER CODE BEGIN Service1Char2_NS_Last*/

  /* USER CODE END Service1Char2_NS_Last*/

  return;
10045bfa:	46c0      	nop			@ (mov r8, r8)
10045bfc:	46c0      	nop			@ (mov r8, r8)
}
10045bfe:	46bd      	mov	sp, r7
10045c00:	b004      	add	sp, #16
10045c02:	bd80      	pop	{r7, pc}
10045c04:	20000770 	.word	0x20000770
10045c08:	20000768 	.word	0x20000768
10045c0c:	1006c8e8 	.word	0x1006c8e8
10045c10:	1006c924 	.word	0x1006c924
10045c14:	0000ffff 	.word	0x0000ffff

10045c18 <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
10045c18:	b580      	push	{r7, lr}
10045c1a:	af00      	add	r7, sp, #0
  NVMDB_Init();
10045c1c:	f004 f990 	bl	10049f40 <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
10045c20:	4b07      	ldr	r3, [pc, #28]	@ (10045c40 <BLENVM_Init+0x28>)
10045c22:	0019      	movs	r1, r3
10045c24:	2000      	movs	r0, #0
10045c26:	f004 fae9 	bl	1004a1fc <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
10045c2a:	4b06      	ldr	r3, [pc, #24]	@ (10045c44 <BLENVM_Init+0x2c>)
10045c2c:	0019      	movs	r1, r3
10045c2e:	2001      	movs	r0, #1
10045c30:	f004 fae4 	bl	1004a1fc <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
10045c34:	4b04      	ldr	r3, [pc, #16]	@ (10045c48 <BLENVM_Init+0x30>)
10045c36:	4a02      	ldr	r2, [pc, #8]	@ (10045c40 <BLENVM_Init+0x28>)
10045c38:	601a      	str	r2, [r3, #0]
}
10045c3a:	46c0      	nop			@ (mov r8, r8)
10045c3c:	46bd      	mov	sp, r7
10045c3e:	bd80      	pop	{r7, pc}
10045c40:	20000868 	.word	0x20000868
10045c44:	20000878 	.word	0x20000878
10045c48:	20000888 	.word	0x20000888

10045c4c <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
10045c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10045c4e:	b089      	sub	sp, #36	@ 0x24
10045c50:	af02      	add	r7, sp, #8
10045c52:	60b9      	str	r1, [r7, #8]
10045c54:	0011      	movs	r1, r2
10045c56:	607b      	str	r3, [r7, #4]
10045c58:	240f      	movs	r4, #15
10045c5a:	193b      	adds	r3, r7, r4
10045c5c:	1c02      	adds	r2, r0, #0
10045c5e:	701a      	strb	r2, [r3, #0]
10045c60:	230c      	movs	r3, #12
10045c62:	18fb      	adds	r3, r7, r3
10045c64:	1c0a      	adds	r2, r1, #0
10045c66:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10045c68:	193b      	adds	r3, r7, r4
10045c6a:	781b      	ldrb	r3, [r3, #0]
10045c6c:	2b02      	cmp	r3, #2
10045c6e:	d103      	bne.n	10045c78 <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
10045c70:	4b1a      	ldr	r3, [pc, #104]	@ (10045cdc <BLEPLAT_NvmAdd+0x90>)
10045c72:	4a1b      	ldr	r2, [pc, #108]	@ (10045ce0 <BLEPLAT_NvmAdd+0x94>)
10045c74:	601a      	str	r2, [r3, #0]
10045c76:	e002      	b.n	10045c7e <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10045c78:	4b18      	ldr	r3, [pc, #96]	@ (10045cdc <BLEPLAT_NvmAdd+0x90>)
10045c7a:	4a1a      	ldr	r2, [pc, #104]	@ (10045ce4 <BLEPLAT_NvmAdd+0x98>)
10045c7c:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
10045c7e:	4b17      	ldr	r3, [pc, #92]	@ (10045cdc <BLEPLAT_NvmAdd+0x90>)
10045c80:	6818      	ldr	r0, [r3, #0]
10045c82:	2617      	movs	r6, #23
10045c84:	19bc      	adds	r4, r7, r6
10045c86:	68bd      	ldr	r5, [r7, #8]
10045c88:	230c      	movs	r3, #12
10045c8a:	18fb      	adds	r3, r7, r3
10045c8c:	881b      	ldrh	r3, [r3, #0]
10045c8e:	469c      	mov	ip, r3
10045c90:	230f      	movs	r3, #15
10045c92:	18fb      	adds	r3, r7, r3
10045c94:	7819      	ldrb	r1, [r3, #0]
10045c96:	687b      	ldr	r3, [r7, #4]
10045c98:	9301      	str	r3, [sp, #4]
10045c9a:	2328      	movs	r3, #40	@ 0x28
10045c9c:	2208      	movs	r2, #8
10045c9e:	189b      	adds	r3, r3, r2
10045ca0:	19db      	adds	r3, r3, r7
10045ca2:	881b      	ldrh	r3, [r3, #0]
10045ca4:	9300      	str	r3, [sp, #0]
10045ca6:	002b      	movs	r3, r5
10045ca8:	4662      	mov	r2, ip
10045caa:	f004 fb49 	bl	1004a340 <NVMDB_AppendRecord>
10045cae:	0003      	movs	r3, r0
10045cb0:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
10045cb2:	19bb      	adds	r3, r7, r6
10045cb4:	781b      	ldrb	r3, [r3, #0]
10045cb6:	2b00      	cmp	r3, #0
10045cb8:	d101      	bne.n	10045cbe <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
10045cba:	2300      	movs	r3, #0
10045cbc:	e009      	b.n	10045cd2 <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
10045cbe:	2317      	movs	r3, #23
10045cc0:	18fb      	adds	r3, r7, r3
10045cc2:	781b      	ldrb	r3, [r3, #0]
10045cc4:	2b02      	cmp	r3, #2
10045cc6:	d102      	bne.n	10045cce <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
10045cc8:	2301      	movs	r3, #1
10045cca:	425b      	negs	r3, r3
10045ccc:	e001      	b.n	10045cd2 <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
10045cce:	2302      	movs	r3, #2
10045cd0:	425b      	negs	r3, r3
}
10045cd2:	0018      	movs	r0, r3
10045cd4:	46bd      	mov	sp, r7
10045cd6:	b007      	add	sp, #28
10045cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10045cda:	46c0      	nop			@ (mov r8, r8)
10045cdc:	20000888 	.word	0x20000888
10045ce0:	20000878 	.word	0x20000878
10045ce4:	20000868 	.word	0x20000868

10045ce8 <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
10045ce8:	b5b0      	push	{r4, r5, r7, lr}
10045cea:	b086      	sub	sp, #24
10045cec:	af02      	add	r7, sp, #8
10045cee:	0004      	movs	r4, r0
10045cf0:	0008      	movs	r0, r1
10045cf2:	0011      	movs	r1, r2
10045cf4:	603b      	str	r3, [r7, #0]
10045cf6:	1dfb      	adds	r3, r7, #7
10045cf8:	1c22      	adds	r2, r4, #0
10045cfa:	701a      	strb	r2, [r3, #0]
10045cfc:	1dbb      	adds	r3, r7, #6
10045cfe:	1c02      	adds	r2, r0, #0
10045d00:	701a      	strb	r2, [r3, #0]
10045d02:	1d3b      	adds	r3, r7, #4
10045d04:	1c0a      	adds	r2, r1, #0
10045d06:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10045d08:	1dbb      	adds	r3, r7, #6
10045d0a:	781b      	ldrb	r3, [r3, #0]
10045d0c:	2b02      	cmp	r3, #2
10045d0e:	d107      	bne.n	10045d20 <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
10045d10:	4b2e      	ldr	r3, [pc, #184]	@ (10045dcc <BLEPLAT_NvmGet+0xe4>)
10045d12:	4a2f      	ldr	r2, [pc, #188]	@ (10045dd0 <BLEPLAT_NvmGet+0xe8>)
10045d14:	601a      	str	r2, [r3, #0]
    db_id = 1;
10045d16:	230e      	movs	r3, #14
10045d18:	18fb      	adds	r3, r7, r3
10045d1a:	2201      	movs	r2, #1
10045d1c:	701a      	strb	r2, [r3, #0]
10045d1e:	e006      	b.n	10045d2e <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10045d20:	4b2a      	ldr	r3, [pc, #168]	@ (10045dcc <BLEPLAT_NvmGet+0xe4>)
10045d22:	4a2c      	ldr	r2, [pc, #176]	@ (10045dd4 <BLEPLAT_NvmGet+0xec>)
10045d24:	601a      	str	r2, [r3, #0]
    db_id = 0;
10045d26:	230e      	movs	r3, #14
10045d28:	18fb      	adds	r3, r7, r3
10045d2a:	2200      	movs	r2, #0
10045d2c:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
10045d2e:	1dfb      	adds	r3, r7, #7
10045d30:	781b      	ldrb	r3, [r3, #0]
10045d32:	2b02      	cmp	r3, #2
10045d34:	d112      	bne.n	10045d5c <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
10045d36:	4b25      	ldr	r3, [pc, #148]	@ (10045dcc <BLEPLAT_NvmGet+0xe4>)
10045d38:	6818      	ldr	r0, [r3, #0]
10045d3a:	230f      	movs	r3, #15
10045d3c:	18fc      	adds	r4, r7, r3
10045d3e:	2320      	movs	r3, #32
10045d40:	18fb      	adds	r3, r7, r3
10045d42:	881d      	ldrh	r5, [r3, #0]
10045d44:	683a      	ldr	r2, [r7, #0]
10045d46:	1d3b      	adds	r3, r7, #4
10045d48:	8819      	ldrh	r1, [r3, #0]
10045d4a:	230c      	movs	r3, #12
10045d4c:	18fb      	adds	r3, r7, r3
10045d4e:	9300      	str	r3, [sp, #0]
10045d50:	002b      	movs	r3, r5
10045d52:	f004 fac1 	bl	1004a2d8 <NVMDB_ReadCurrentRecord>
10045d56:	0003      	movs	r3, r0
10045d58:	7023      	strb	r3, [r4, #0]
10045d5a:	e021      	b.n	10045da0 <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
10045d5c:	1dfb      	adds	r3, r7, #7
10045d5e:	781b      	ldrb	r3, [r3, #0]
10045d60:	2b00      	cmp	r3, #0
10045d62:	d108      	bne.n	10045d76 <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
10045d64:	4b19      	ldr	r3, [pc, #100]	@ (10045dcc <BLEPLAT_NvmGet+0xe4>)
10045d66:	681a      	ldr	r2, [r3, #0]
10045d68:	230e      	movs	r3, #14
10045d6a:	18fb      	adds	r3, r7, r3
10045d6c:	781b      	ldrb	r3, [r3, #0]
10045d6e:	0011      	movs	r1, r2
10045d70:	0018      	movs	r0, r3
10045d72:	f004 fa43 	bl	1004a1fc <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
10045d76:	4b15      	ldr	r3, [pc, #84]	@ (10045dcc <BLEPLAT_NvmGet+0xe4>)
10045d78:	6818      	ldr	r0, [r3, #0]
10045d7a:	230f      	movs	r3, #15
10045d7c:	18fc      	adds	r4, r7, r3
10045d7e:	683d      	ldr	r5, [r7, #0]
10045d80:	1d3b      	adds	r3, r7, #4
10045d82:	881a      	ldrh	r2, [r3, #0]
10045d84:	1dbb      	adds	r3, r7, #6
10045d86:	7819      	ldrb	r1, [r3, #0]
10045d88:	230c      	movs	r3, #12
10045d8a:	18fb      	adds	r3, r7, r3
10045d8c:	9301      	str	r3, [sp, #4]
10045d8e:	2320      	movs	r3, #32
10045d90:	18fb      	adds	r3, r7, r3
10045d92:	881b      	ldrh	r3, [r3, #0]
10045d94:	9300      	str	r3, [sp, #0]
10045d96:	002b      	movs	r3, r5
10045d98:	f004 fa64 	bl	1004a264 <NVMDB_ReadNextRecord>
10045d9c:	0003      	movs	r3, r0
10045d9e:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
10045da0:	230f      	movs	r3, #15
10045da2:	18fb      	adds	r3, r7, r3
10045da4:	781b      	ldrb	r3, [r3, #0]
10045da6:	2b00      	cmp	r3, #0
10045da8:	d101      	bne.n	10045dae <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
10045daa:	2300      	movs	r3, #0
10045dac:	e009      	b.n	10045dc2 <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
10045dae:	230f      	movs	r3, #15
10045db0:	18fb      	adds	r3, r7, r3
10045db2:	781b      	ldrb	r3, [r3, #0]
10045db4:	2b04      	cmp	r3, #4
10045db6:	d102      	bne.n	10045dbe <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
10045db8:	2303      	movs	r3, #3
10045dba:	425b      	negs	r3, r3
10045dbc:	e001      	b.n	10045dc2 <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
10045dbe:	2302      	movs	r3, #2
10045dc0:	425b      	negs	r3, r3
}
10045dc2:	0018      	movs	r0, r3
10045dc4:	46bd      	mov	sp, r7
10045dc6:	b004      	add	sp, #16
10045dc8:	bdb0      	pop	{r4, r5, r7, pc}
10045dca:	46c0      	nop			@ (mov r8, r8)
10045dcc:	20000888 	.word	0x20000888
10045dd0:	20000878 	.word	0x20000878
10045dd4:	20000868 	.word	0x20000868

10045dd8 <BLEPLAT_NvmCompare>:

int BLEPLAT_NvmCompare(uint16_t Offset, const uint8_t* pData, uint16_t Size)
{
10045dd8:	b590      	push	{r4, r7, lr}
10045dda:	b085      	sub	sp, #20
10045ddc:	af00      	add	r7, sp, #0
10045dde:	6039      	str	r1, [r7, #0]
10045de0:	0011      	movs	r1, r2
10045de2:	1dbb      	adds	r3, r7, #6
10045de4:	1c02      	adds	r2, r0, #0
10045de6:	801a      	strh	r2, [r3, #0]
10045de8:	1d3b      	adds	r3, r7, #4
10045dea:	1c0a      	adds	r2, r1, #0
10045dec:	801a      	strh	r2, [r3, #0]
  int ret;

  ret = NVMDB_CompareCurrentRecord(curr_handle_p, Offset, pData, Size);
10045dee:	4b0e      	ldr	r3, [pc, #56]	@ (10045e28 <BLEPLAT_NvmCompare+0x50>)
10045df0:	6818      	ldr	r0, [r3, #0]
10045df2:	1d3b      	adds	r3, r7, #4
10045df4:	881c      	ldrh	r4, [r3, #0]
10045df6:	683a      	ldr	r2, [r7, #0]
10045df8:	1dbb      	adds	r3, r7, #6
10045dfa:	8819      	ldrh	r1, [r3, #0]
10045dfc:	0023      	movs	r3, r4
10045dfe:	f003 fa67 	bl	100492d0 <NVMDB_CompareCurrentRecord>
10045e02:	0003      	movs	r3, r0
10045e04:	60fb      	str	r3, [r7, #12]

  if(ret == 0)
10045e06:	68fb      	ldr	r3, [r7, #12]
10045e08:	2b00      	cmp	r3, #0
10045e0a:	d101      	bne.n	10045e10 <BLEPLAT_NvmCompare+0x38>
  {
    return BLEPLAT_OK;
10045e0c:	2300      	movs	r3, #0
10045e0e:	e007      	b.n	10045e20 <BLEPLAT_NvmCompare+0x48>
  }
  else if(ret < 0)
10045e10:	68fb      	ldr	r3, [r7, #12]
10045e12:	2b00      	cmp	r3, #0
10045e14:	da02      	bge.n	10045e1c <BLEPLAT_NvmCompare+0x44>
  {
    return Size;
10045e16:	1d3b      	adds	r3, r7, #4
10045e18:	881b      	ldrh	r3, [r3, #0]
10045e1a:	e001      	b.n	10045e20 <BLEPLAT_NvmCompare+0x48>
  }
  else
  {
    return BLEPLAT_EOF;
10045e1c:	2303      	movs	r3, #3
10045e1e:	425b      	negs	r3, r3
  }
}
10045e20:	0018      	movs	r0, r3
10045e22:	46bd      	mov	sp, r7
10045e24:	b005      	add	sp, #20
10045e26:	bd90      	pop	{r4, r7, pc}
10045e28:	20000888 	.word	0x20000888

10045e2c <BLEPLAT_NvmDiscard>:

void BLEPLAT_NvmDiscard(BLEPLAT_NvmSeekModeTypeDef Mode)
{
10045e2c:	b580      	push	{r7, lr}
10045e2e:	b082      	sub	sp, #8
10045e30:	af00      	add	r7, sp, #0
10045e32:	0002      	movs	r2, r0
10045e34:	1dfb      	adds	r3, r7, #7
10045e36:	701a      	strb	r2, [r3, #0]
  DEBUG_GPIO2_HIGH();
  if(Mode == BLEPLAT_NVM_CURRENT)
10045e38:	1dfb      	adds	r3, r7, #7
10045e3a:	781b      	ldrb	r3, [r3, #0]
10045e3c:	2b02      	cmp	r3, #2
10045e3e:	d10a      	bne.n	10045e56 <BLEPLAT_NvmDiscard+0x2a>
  {
    if(curr_handle_p == &device_id_db_h) // Do not allow to erase device ID data.
10045e40:	4b0b      	ldr	r3, [pc, #44]	@ (10045e70 <BLEPLAT_NvmDiscard+0x44>)
10045e42:	681a      	ldr	r2, [r3, #0]
10045e44:	4b0b      	ldr	r3, [pc, #44]	@ (10045e74 <BLEPLAT_NvmDiscard+0x48>)
10045e46:	429a      	cmp	r2, r3
10045e48:	d00d      	beq.n	10045e66 <BLEPLAT_NvmDiscard+0x3a>
    {
      return;
    }
    NVMDB_DeleteRecord(curr_handle_p);
10045e4a:	4b09      	ldr	r3, [pc, #36]	@ (10045e70 <BLEPLAT_NvmDiscard+0x44>)
10045e4c:	681b      	ldr	r3, [r3, #0]
10045e4e:	0018      	movs	r0, r3
10045e50:	f004 fadc 	bl	1004a40c <NVMDB_DeleteRecord>
10045e54:	e008      	b.n	10045e68 <BLEPLAT_NvmDiscard+0x3c>
  }
  else if(Mode == BLEPLAT_NVM_ALL)
10045e56:	1dfb      	adds	r3, r7, #7
10045e58:	781b      	ldrb	r3, [r3, #0]
10045e5a:	2b03      	cmp	r3, #3
10045e5c:	d104      	bne.n	10045e68 <BLEPLAT_NvmDiscard+0x3c>
  {

    NVMDB_Erase(SEC_GATT_BD);
10045e5e:	2000      	movs	r0, #0
10045e60:	f004 fae2 	bl	1004a428 <NVMDB_Erase>
10045e64:	e000      	b.n	10045e68 <BLEPLAT_NvmDiscard+0x3c>
      return;
10045e66:	46c0      	nop			@ (mov r8, r8)
       else
        return;
       }*/
  }
  DEBUG_GPIO2_LOW();
}
10045e68:	46bd      	mov	sp, r7
10045e6a:	b002      	add	sp, #8
10045e6c:	bd80      	pop	{r7, pc}
10045e6e:	46c0      	nop			@ (mov r8, r8)
10045e70:	20000888 	.word	0x20000888
10045e74:	20000878 	.word	0x20000878

10045e78 <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
10045e78:	b580      	push	{r7, lr}
10045e7a:	b084      	sub	sp, #16
10045e7c:	af00      	add	r7, sp, #0
10045e7e:	60f8      	str	r0, [r7, #12]
10045e80:	60b9      	str	r1, [r7, #8]
10045e82:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
10045e84:	687a      	ldr	r2, [r7, #4]
10045e86:	68b9      	ldr	r1, [r7, #8]
10045e88:	68fb      	ldr	r3, [r7, #12]
10045e8a:	0018      	movs	r0, r3
10045e8c:	f7fa f93a 	bl	10040104 <Osal_MemCpy>
}
10045e90:	46c0      	nop			@ (mov r8, r8)
10045e92:	46bd      	mov	sp, r7
10045e94:	b004      	add	sp, #16
10045e96:	bd80      	pop	{r7, pc}

10045e98 <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
10045e98:	b580      	push	{r7, lr}
10045e9a:	b084      	sub	sp, #16
10045e9c:	af00      	add	r7, sp, #0
10045e9e:	60f8      	str	r0, [r7, #12]
10045ea0:	60b9      	str	r1, [r7, #8]
10045ea2:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
10045ea4:	687a      	ldr	r2, [r7, #4]
10045ea6:	68b9      	ldr	r1, [r7, #8]
10045ea8:	68fb      	ldr	r3, [r7, #12]
10045eaa:	0018      	movs	r0, r3
10045eac:	f021 fd3a 	bl	10067924 <memset>
}
10045eb0:	46c0      	nop			@ (mov r8, r8)
10045eb2:	46bd      	mov	sp, r7
10045eb4:	b004      	add	sp, #16
10045eb6:	bd80      	pop	{r7, pc}

10045eb8 <BLEPLAT_MemCmp>:

int BLEPLAT_MemCmp(void *S1, void *S2, unsigned int Size)
{
10045eb8:	b580      	push	{r7, lr}
10045eba:	b084      	sub	sp, #16
10045ebc:	af00      	add	r7, sp, #0
10045ebe:	60f8      	str	r0, [r7, #12]
10045ec0:	60b9      	str	r1, [r7, #8]
10045ec2:	607a      	str	r2, [r7, #4]
  return memcmp(S1, S2, Size);
10045ec4:	687a      	ldr	r2, [r7, #4]
10045ec6:	68b9      	ldr	r1, [r7, #8]
10045ec8:	68fb      	ldr	r3, [r7, #12]
10045eca:	0018      	movs	r0, r3
10045ecc:	f021 fd1c 	bl	10067908 <memcmp>
10045ed0:	0003      	movs	r3, r0
}
10045ed2:	0018      	movs	r0, r3
10045ed4:	46bd      	mov	sp, r7
10045ed6:	b004      	add	sp, #16
10045ed8:	bd80      	pop	{r7, pc}

10045eda <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
10045eda:	b590      	push	{r4, r7, lr}
10045edc:	b089      	sub	sp, #36	@ 0x24
10045ede:	af00      	add	r7, sp, #0
10045ee0:	60f8      	str	r0, [r7, #12]
10045ee2:	60b9      	str	r1, [r7, #8]
10045ee4:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
10045ee6:	2410      	movs	r4, #16
10045ee8:	193b      	adds	r3, r7, r4
10045eea:	0018      	movs	r0, r3
10045eec:	f004 ff6a 	bl	1004adc4 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
10045ef0:	0021      	movs	r1, r4
10045ef2:	187b      	adds	r3, r7, r1
10045ef4:	781a      	ldrb	r2, [r3, #0]
10045ef6:	68fb      	ldr	r3, [r7, #12]
10045ef8:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
10045efa:	187b      	adds	r3, r7, r1
10045efc:	785a      	ldrb	r2, [r3, #1]
10045efe:	68bb      	ldr	r3, [r7, #8]
10045f00:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
10045f02:	187b      	adds	r3, r7, r1
10045f04:	789a      	ldrb	r2, [r3, #2]
10045f06:	687b      	ldr	r3, [r7, #4]
10045f08:	701a      	strb	r2, [r3, #0]
}
10045f0a:	46c0      	nop			@ (mov r8, r8)
10045f0c:	46bd      	mov	sp, r7
10045f0e:	b009      	add	sp, #36	@ 0x24
10045f10:	bd90      	pop	{r4, r7, pc}

10045f12 <BLEPLAT_PkaStartP256Key>:

BLEPLAT_PkaStatusTypeDef BLEPLAT_PkaStartP256Key(const uint32_t *private_key, BLEPLAT_PkaFuncCb funcCb)
{
10045f12:	b580      	push	{r7, lr}
10045f14:	b082      	sub	sp, #8
10045f16:	af00      	add	r7, sp, #0
10045f18:	6078      	str	r0, [r7, #4]
10045f1a:	6039      	str	r1, [r7, #0]
  return (BLEPLAT_PkaStatusTypeDef)PKAMGR_StartP256PublicKeyGeneration(private_key, (PKAMGR_funcCB)funcCb);
10045f1c:	683a      	ldr	r2, [r7, #0]
10045f1e:	687b      	ldr	r3, [r7, #4]
10045f20:	0011      	movs	r1, r2
10045f22:	0018      	movs	r0, r3
10045f24:	f004 fc42 	bl	1004a7ac <PKAMGR_StartP256PublicKeyGeneration>
10045f28:	0003      	movs	r3, r0
}
10045f2a:	0018      	movs	r0, r3
10045f2c:	46bd      	mov	sp, r7
10045f2e:	b002      	add	sp, #8
10045f30:	bd80      	pop	{r7, pc}

10045f32 <BLEPLAT_PkaStartDHkey>:

BLEPLAT_PkaStatusTypeDef BLEPLAT_PkaStartDHkey(uint32_t* private_key,
                                         uint32_t* public_key,
                                         BLEPLAT_PkaFuncCb funcCb)
{
10045f32:	b580      	push	{r7, lr}
10045f34:	b084      	sub	sp, #16
10045f36:	af00      	add	r7, sp, #0
10045f38:	60f8      	str	r0, [r7, #12]
10045f3a:	60b9      	str	r1, [r7, #8]
10045f3c:	607a      	str	r2, [r7, #4]
  return (BLEPLAT_PkaStatusTypeDef)HW_PKA_StartP256DHkeyGeneration(private_key, public_key, (PKAMGR_funcCB)funcCb);
10045f3e:	687a      	ldr	r2, [r7, #4]
10045f40:	68b9      	ldr	r1, [r7, #8]
10045f42:	68fb      	ldr	r3, [r7, #12]
10045f44:	0018      	movs	r0, r3
10045f46:	f002 f943 	bl	100481d0 <HW_PKA_StartP256DHkeyGeneration>
10045f4a:	0003      	movs	r3, r0
}
10045f4c:	0018      	movs	r0, r3
10045f4e:	46bd      	mov	sp, r7
10045f50:	b004      	add	sp, #16
10045f52:	bd80      	pop	{r7, pc}

10045f54 <BLEPLAT_AesEcbEncrypt>:

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
10045f54:	b580      	push	{r7, lr}
10045f56:	b084      	sub	sp, #16
10045f58:	af00      	add	r7, sp, #0
10045f5a:	60f8      	str	r0, [r7, #12]
10045f5c:	60b9      	str	r1, [r7, #8]
10045f5e:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
10045f60:	687a      	ldr	r2, [r7, #4]
10045f62:	68b9      	ldr	r1, [r7, #8]
10045f64:	68fb      	ldr	r3, [r7, #12]
10045f66:	0018      	movs	r0, r3
10045f68:	f001 ff64 	bl	10047e34 <HW_AES_Encrypt>
}
10045f6c:	46c0      	nop			@ (mov r8, r8)
10045f6e:	46bd      	mov	sp, r7
10045f70:	b004      	add	sp, #16
10045f72:	bd80      	pop	{r7, pc}

10045f74 <BLEPLAT_AesCMACEncryptInit>:

int32_t BLEPLAT_AesCMACEncryptInit(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx)
{
10045f74:	b580      	push	{r7, lr}
10045f76:	b082      	sub	sp, #8
10045f78:	af00      	add	r7, sp, #0
10045f7a:	6078      	str	r0, [r7, #4]
  return AES_CMAC_Encrypt_Init((AESCMACctx_stt*)pAESCMACctx);
10045f7c:	687b      	ldr	r3, [r7, #4]
10045f7e:	0018      	movs	r0, r3
10045f80:	f025 fa62 	bl	1006b448 <AES_CMAC_Encrypt_Init>
10045f84:	0003      	movs	r3, r0
}
10045f86:	0018      	movs	r0, r3
10045f88:	46bd      	mov	sp, r7
10045f8a:	b002      	add	sp, #8
10045f8c:	bd80      	pop	{r7, pc}

10045f8e <BLEPLAT_AesCMACEncryptAppend>:

int32_t BLEPLAT_AesCMACEncryptAppend(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     const uint8_t  *pInputBuffer,
                                     int32_t InputSize)
{
10045f8e:	b580      	push	{r7, lr}
10045f90:	b084      	sub	sp, #16
10045f92:	af00      	add	r7, sp, #0
10045f94:	60f8      	str	r0, [r7, #12]
10045f96:	60b9      	str	r1, [r7, #8]
10045f98:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Append((AESCMACctx_stt*)pAESCMACctx, pInputBuffer, InputSize);
10045f9a:	687a      	ldr	r2, [r7, #4]
10045f9c:	68b9      	ldr	r1, [r7, #8]
10045f9e:	68fb      	ldr	r3, [r7, #12]
10045fa0:	0018      	movs	r0, r3
10045fa2:	f025 f8e7 	bl	1006b174 <AES_CMAC_Encrypt_Append>
10045fa6:	0003      	movs	r3, r0
}
10045fa8:	0018      	movs	r0, r3
10045faa:	46bd      	mov	sp, r7
10045fac:	b004      	add	sp, #16
10045fae:	bd80      	pop	{r7, pc}

10045fb0 <BLEPLAT_AesCMACEncryptFinish>:

int32_t BLEPLAT_AesCMACEncryptFinish(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     uint8_t *pOutputBuffer,
                                     int32_t *pOutputSize)
{
10045fb0:	b580      	push	{r7, lr}
10045fb2:	b084      	sub	sp, #16
10045fb4:	af00      	add	r7, sp, #0
10045fb6:	60f8      	str	r0, [r7, #12]
10045fb8:	60b9      	str	r1, [r7, #8]
10045fba:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
10045fbc:	687a      	ldr	r2, [r7, #4]
10045fbe:	68b9      	ldr	r1, [r7, #8]
10045fc0:	68fb      	ldr	r3, [r7, #12]
10045fc2:	0018      	movs	r0, r3
10045fc4:	f025 fa0a 	bl	1006b3dc <AES_CMAC_Encrypt_Finish>
10045fc8:	0003      	movs	r3, r0
}
10045fca:	0018      	movs	r0, r3
10045fcc:	46bd      	mov	sp, r7
10045fce:	b004      	add	sp, #16
10045fd0:	bd80      	pop	{r7, pc}

10045fd2 <BLEPLAT_RngGetRandom16>:

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
10045fd2:	b580      	push	{r7, lr}
10045fd4:	b082      	sub	sp, #8
10045fd6:	af00      	add	r7, sp, #0
10045fd8:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
10045fda:	687b      	ldr	r3, [r7, #4]
10045fdc:	0018      	movs	r0, r3
10045fde:	f002 fc97 	bl	10048910 <HW_RNG_GetRandom16>
}
10045fe2:	46c0      	nop			@ (mov r8, r8)
10045fe4:	46bd      	mov	sp, r7
10045fe6:	b002      	add	sp, #8
10045fe8:	bd80      	pop	{r7, pc}

10045fea <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
10045fea:	b580      	push	{r7, lr}
10045fec:	b082      	sub	sp, #8
10045fee:	af00      	add	r7, sp, #0
10045ff0:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
10045ff2:	687b      	ldr	r3, [r7, #4]
10045ff4:	0018      	movs	r0, r3
10045ff6:	f002 fca5 	bl	10048944 <HW_RNG_GetRandom32>
}
10045ffa:	46c0      	nop			@ (mov r8, r8)
10045ffc:	46bd      	mov	sp, r7
10045ffe:	b002      	add	sp, #8
10046000:	bd80      	pop	{r7, pc}

10046002 <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
10046002:	b580      	push	{r7, lr}
10046004:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
10046006:	f004 fe31 	bl	1004ac6c <RADIO_GetMaxPALevel>
1004600a:	0003      	movs	r3, r0
}
1004600c:	0018      	movs	r0, r3
1004600e:	46bd      	mov	sp, r7
10046010:	bd80      	pop	{r7, pc}

10046012 <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
10046012:	b580      	push	{r7, lr}
10046014:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
10046016:	f004 fe2f 	bl	1004ac78 <RADIO_GetDefaultPALevel>
1004601a:	0003      	movs	r3, r0
}
1004601c:	0018      	movs	r0, r3
1004601e:	46bd      	mov	sp, r7
10046020:	bd80      	pop	{r7, pc}

10046022 <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
10046022:	b580      	push	{r7, lr}
10046024:	b082      	sub	sp, #8
10046026:	af00      	add	r7, sp, #0
10046028:	0002      	movs	r2, r0
1004602a:	1dfb      	adds	r3, r7, #7
1004602c:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
1004602e:	1dfb      	adds	r3, r7, #7
10046030:	781b      	ldrb	r3, [r3, #0]
10046032:	0018      	movs	r0, r3
10046034:	f004 fe26 	bl	1004ac84 <RADIO_SetHighPower>
}
10046038:	46c0      	nop			@ (mov r8, r8)
1004603a:	46bd      	mov	sp, r7
1004603c:	b002      	add	sp, #8
1004603e:	bd80      	pop	{r7, pc}

10046040 <BLEPLAT_CalculateRSSI>:

int8_t BLEPLAT_CalculateRSSI(void)
{
10046040:	b580      	push	{r7, lr}
10046042:	af00      	add	r7, sp, #0
  return HAL_RADIO_ReadRSSI();
10046044:	f007 fdec 	bl	1004dc20 <HAL_RADIO_ReadRSSI>
10046048:	0003      	movs	r3, r0
}
1004604a:	0018      	movs	r0, r3
1004604c:	46bd      	mov	sp, r7
1004604e:	bd80      	pop	{r7, pc}

10046050 <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
10046050:	b580      	push	{r7, lr}
10046052:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
10046054:	f008 fc3c 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046058:	0002      	movs	r2, r0
1004605a:	000b      	movs	r3, r1

}
1004605c:	0010      	movs	r0, r2
1004605e:	0019      	movs	r1, r3
10046060:	46bd      	mov	sp, r7
10046062:	bd80      	pop	{r7, pc}

10046064 <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
10046064:	b580      	push	{r7, lr}
10046066:	b084      	sub	sp, #16
10046068:	af00      	add	r7, sp, #0
1004606a:	60f8      	str	r0, [r7, #12]
1004606c:	603a      	str	r2, [r7, #0]
1004606e:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
10046070:	683a      	ldr	r2, [r7, #0]
10046072:	687b      	ldr	r3, [r7, #4]
10046074:	68f9      	ldr	r1, [r7, #12]
10046076:	0008      	movs	r0, r1
10046078:	f008 fc72 	bl	1004e960 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
1004607c:	0003      	movs	r3, r0
}
1004607e:	0018      	movs	r0, r3
10046080:	46bd      	mov	sp, r7
10046082:	b004      	add	sp, #16
10046084:	bd80      	pop	{r7, pc}

10046086 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10046086:	b580      	push	{r7, lr}
10046088:	b082      	sub	sp, #8
1004608a:	af00      	add	r7, sp, #0
1004608c:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
1004608e:	687b      	ldr	r3, [r7, #4]
10046090:	0018      	movs	r0, r3
10046092:	f008 fc7f 	bl	1004e994 <HAL_RADIO_TIMER_StopVirtualTimer>
}
10046096:	46c0      	nop			@ (mov r8, r8)
10046098:	46bd      	mov	sp, r7
1004609a:	b002      	add	sp, #8
1004609c:	bd80      	pop	{r7, pc}

1004609e <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
1004609e:	b580      	push	{r7, lr}
100460a0:	b082      	sub	sp, #8
100460a2:	af00      	add	r7, sp, #0
100460a4:	6078      	str	r0, [r7, #4]
100460a6:	0008      	movs	r0, r1
100460a8:	0011      	movs	r1, r2
100460aa:	1cfb      	adds	r3, r7, #3
100460ac:	1c02      	adds	r2, r0, #0
100460ae:	701a      	strb	r2, [r3, #0]
100460b0:	1cbb      	adds	r3, r7, #2
100460b2:	1c0a      	adds	r2, r1, #0
100460b4:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
100460b6:	1cbb      	adds	r3, r7, #2
100460b8:	781a      	ldrb	r2, [r3, #0]
100460ba:	1cfb      	adds	r3, r7, #3
100460bc:	7819      	ldrb	r1, [r3, #0]
100460be:	687b      	ldr	r3, [r7, #4]
100460c0:	0018      	movs	r0, r3
100460c2:	f008 faef 	bl	1004e6a4 <HAL_RADIO_TIMER_SetRadioTimerValue>
100460c6:	0003      	movs	r3, r0
100460c8:	b2db      	uxtb	r3, r3
}
100460ca:	0018      	movs	r0, r3
100460cc:	46bd      	mov	sp, r7
100460ce:	b002      	add	sp, #8
100460d0:	bd80      	pop	{r7, pc}

100460d2 <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
100460d2:	b580      	push	{r7, lr}
100460d4:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
100460d6:	f008 fb35 	bl	1004e744 <HAL_RADIO_TIMER_ClearRadioTimerValue>
100460da:	0003      	movs	r3, r0
100460dc:	b2db      	uxtb	r3, r3
}
100460de:	0018      	movs	r0, r3
100460e0:	46bd      	mov	sp, r7
100460e2:	bd80      	pop	{r7, pc}

100460e4 <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
100460e4:	b580      	push	{r7, lr}
100460e6:	b082      	sub	sp, #8
100460e8:	af00      	add	r7, sp, #0
100460ea:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
100460ec:	687b      	ldr	r3, [r7, #4]
100460ee:	0018      	movs	r0, r3
100460f0:	f008 f9fa 	bl	1004e4e8 <HAL_RADIO_TIMER_GetAnchorPoint>
100460f4:	0002      	movs	r2, r0
100460f6:	000b      	movs	r3, r1
}
100460f8:	0010      	movs	r0, r2
100460fa:	0019      	movs	r1, r3
100460fc:	46bd      	mov	sp, r7
100460fe:	b002      	add	sp, #8
10046100:	bd80      	pop	{r7, pc}

10046102 <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
10046102:	b580      	push	{r7, lr}
10046104:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
10046106:	f008 fb91 	bl	1004e82c <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
1004610a:	46c0      	nop			@ (mov r8, r8)
1004610c:	46bd      	mov	sp, r7
1004610e:	bd80      	pop	{r7, pc}

10046110 <LL_RADIO_SetCurrentConnectionMachineNumber>:
  * @rmtoll WORD1          CURSTMACHNUM       LL_RADIO_SetCurrentConnectionMachineNumber
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCurrentConnectionMachineNumber(uint32_t value)
{
10046110:	b580      	push	{r7, lr}
10046112:	b082      	sub	sp, #8
10046114:	af00      	add	r7, sp, #0
10046116:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
10046118:	4b07      	ldr	r3, [pc, #28]	@ (10046138 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
1004611a:	685b      	ldr	r3, [r3, #4]
1004611c:	227f      	movs	r2, #127	@ 0x7f
1004611e:	4393      	bics	r3, r2
10046120:	0019      	movs	r1, r3
10046122:	687b      	ldr	r3, [r7, #4]
10046124:	227f      	movs	r2, #127	@ 0x7f
10046126:	401a      	ands	r2, r3
10046128:	4b03      	ldr	r3, [pc, #12]	@ (10046138 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
1004612a:	430a      	orrs	r2, r1
1004612c:	605a      	str	r2, [r3, #4]
}
1004612e:	46c0      	nop			@ (mov r8, r8)
10046130:	46bd      	mov	sp, r7
10046132:	b002      	add	sp, #8
10046134:	bd80      	pop	{r7, pc}
10046136:	46c0      	nop			@ (mov r8, r8)
10046138:	200000c0 	.word	0x200000c0

1004613c <LL_RADIO_GlobalEnableBlue>:
  * @brief  RADIO Enable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalEnableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalEnableBlue(void)
{
1004613c:	b580      	push	{r7, lr}
1004613e:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10046140:	4b04      	ldr	r3, [pc, #16]	@ (10046154 <LL_RADIO_GlobalEnableBlue+0x18>)
10046142:	685a      	ldr	r2, [r3, #4]
10046144:	4b03      	ldr	r3, [pc, #12]	@ (10046154 <LL_RADIO_GlobalEnableBlue+0x18>)
10046146:	2180      	movs	r1, #128	@ 0x80
10046148:	430a      	orrs	r2, r1
1004614a:	605a      	str	r2, [r3, #4]
}
1004614c:	46c0      	nop			@ (mov r8, r8)
1004614e:	46bd      	mov	sp, r7
10046150:	bd80      	pop	{r7, pc}
10046152:	46c0      	nop			@ (mov r8, r8)
10046154:	200000c0 	.word	0x200000c0

10046158 <LL_RADIO_GlobalDisableBlue>:
  * @brief  RADIO Disable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalDisableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalDisableBlue(void)
{
10046158:	b580      	push	{r7, lr}
1004615a:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
1004615c:	4b04      	ldr	r3, [pc, #16]	@ (10046170 <LL_RADIO_GlobalDisableBlue+0x18>)
1004615e:	685a      	ldr	r2, [r3, #4]
10046160:	4b03      	ldr	r3, [pc, #12]	@ (10046170 <LL_RADIO_GlobalDisableBlue+0x18>)
10046162:	2180      	movs	r1, #128	@ 0x80
10046164:	438a      	bics	r2, r1
10046166:	605a      	str	r2, [r3, #4]
}
10046168:	46c0      	nop			@ (mov r8, r8)
1004616a:	46bd      	mov	sp, r7
1004616c:	bd80      	pop	{r7, pc}
1004616e:	46c0      	nop			@ (mov r8, r8)
10046170:	200000c0 	.word	0x200000c0

10046174 <LL_RADIO_SetReceiveWindowTimeout>:
  * @rmtoll WORD4          RCVTIMEOUT       LL_RADIO_SetReceiveWindowTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceiveWindowTimeout(uint32_t value)
{
10046174:	b580      	push	{r7, lr}
10046176:	b082      	sub	sp, #8
10046178:	af00      	add	r7, sp, #0
1004617a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
1004617c:	4b07      	ldr	r3, [pc, #28]	@ (1004619c <LL_RADIO_SetReceiveWindowTimeout+0x28>)
1004617e:	691b      	ldr	r3, [r3, #16]
10046180:	4a07      	ldr	r2, [pc, #28]	@ (100461a0 <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
10046182:	4013      	ands	r3, r2
10046184:	0019      	movs	r1, r3
10046186:	687b      	ldr	r3, [r7, #4]
10046188:	021b      	lsls	r3, r3, #8
1004618a:	4a06      	ldr	r2, [pc, #24]	@ (100461a4 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
1004618c:	401a      	ands	r2, r3
1004618e:	4b03      	ldr	r3, [pc, #12]	@ (1004619c <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10046190:	430a      	orrs	r2, r1
10046192:	611a      	str	r2, [r3, #16]
}
10046194:	46c0      	nop			@ (mov r8, r8)
10046196:	46bd      	mov	sp, r7
10046198:	b002      	add	sp, #8
1004619a:	bd80      	pop	{r7, pc}
1004619c:	200000c0 	.word	0x200000c0
100461a0:	f00000ff 	.word	0xf00000ff
100461a4:	0fffff00 	.word	0x0fffff00

100461a8 <LL_RADIO_SetUnmappedChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUnmappedChannel(uint8_t stateMachineNo, uint32_t value)
{
100461a8:	b580      	push	{r7, lr}
100461aa:	b082      	sub	sp, #8
100461ac:	af00      	add	r7, sp, #0
100461ae:	0002      	movs	r2, r0
100461b0:	6039      	str	r1, [r7, #0]
100461b2:	1dfb      	adds	r3, r7, #7
100461b4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_UCHAN, value);
100461b6:	1dfb      	adds	r3, r7, #7
100461b8:	781b      	ldrb	r3, [r3, #0]
100461ba:	225c      	movs	r2, #92	@ 0x5c
100461bc:	4353      	muls	r3, r2
100461be:	4a0b      	ldr	r2, [pc, #44]	@ (100461ec <LL_RADIO_SetUnmappedChannel+0x44>)
100461c0:	4694      	mov	ip, r2
100461c2:	4463      	add	r3, ip
100461c4:	681b      	ldr	r3, [r3, #0]
100461c6:	223f      	movs	r2, #63	@ 0x3f
100461c8:	4393      	bics	r3, r2
100461ca:	0019      	movs	r1, r3
100461cc:	683b      	ldr	r3, [r7, #0]
100461ce:	223f      	movs	r2, #63	@ 0x3f
100461d0:	401a      	ands	r2, r3
100461d2:	1dfb      	adds	r3, r7, #7
100461d4:	781b      	ldrb	r3, [r3, #0]
100461d6:	205c      	movs	r0, #92	@ 0x5c
100461d8:	4343      	muls	r3, r0
100461da:	4804      	ldr	r0, [pc, #16]	@ (100461ec <LL_RADIO_SetUnmappedChannel+0x44>)
100461dc:	4684      	mov	ip, r0
100461de:	4463      	add	r3, ip
100461e0:	430a      	orrs	r2, r1
100461e2:	601a      	str	r2, [r3, #0]
}
100461e4:	46c0      	nop			@ (mov r8, r8)
100461e6:	46bd      	mov	sp, r7
100461e8:	b002      	add	sp, #8
100461ea:	bd80      	pop	{r7, pc}
100461ec:	200000dc 	.word	0x200000dc

100461f0 <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
100461f0:	b580      	push	{r7, lr}
100461f2:	b082      	sub	sp, #8
100461f4:	af00      	add	r7, sp, #0
100461f6:	0002      	movs	r2, r0
100461f8:	1dfb      	adds	r3, r7, #7
100461fa:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
100461fc:	1dfb      	adds	r3, r7, #7
100461fe:	781b      	ldrb	r3, [r3, #0]
10046200:	225c      	movs	r2, #92	@ 0x5c
10046202:	4353      	muls	r3, r2
10046204:	4a08      	ldr	r2, [pc, #32]	@ (10046228 <LL_RADIO_RadioCommandList_Enable+0x38>)
10046206:	4694      	mov	ip, r2
10046208:	4463      	add	r3, ip
1004620a:	681a      	ldr	r2, [r3, #0]
1004620c:	1dfb      	adds	r3, r7, #7
1004620e:	781b      	ldrb	r3, [r3, #0]
10046210:	215c      	movs	r1, #92	@ 0x5c
10046212:	434b      	muls	r3, r1
10046214:	4904      	ldr	r1, [pc, #16]	@ (10046228 <LL_RADIO_RadioCommandList_Enable+0x38>)
10046216:	468c      	mov	ip, r1
10046218:	4463      	add	r3, ip
1004621a:	2140      	movs	r1, #64	@ 0x40
1004621c:	430a      	orrs	r2, r1
1004621e:	601a      	str	r2, [r3, #0]
}
10046220:	46c0      	nop			@ (mov r8, r8)
10046222:	46bd      	mov	sp, r7
10046224:	b002      	add	sp, #8
10046226:	bd80      	pop	{r7, pc}
10046228:	200000dc 	.word	0x200000dc

1004622c <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
1004622c:	b580      	push	{r7, lr}
1004622e:	b082      	sub	sp, #8
10046230:	af00      	add	r7, sp, #0
10046232:	0002      	movs	r2, r0
10046234:	1dfb      	adds	r3, r7, #7
10046236:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10046238:	1dfb      	adds	r3, r7, #7
1004623a:	781b      	ldrb	r3, [r3, #0]
1004623c:	225c      	movs	r2, #92	@ 0x5c
1004623e:	4353      	muls	r3, r2
10046240:	4a08      	ldr	r2, [pc, #32]	@ (10046264 <LL_RADIO_RadioCommandList_Disable+0x38>)
10046242:	4694      	mov	ip, r2
10046244:	4463      	add	r3, ip
10046246:	681a      	ldr	r2, [r3, #0]
10046248:	1dfb      	adds	r3, r7, #7
1004624a:	781b      	ldrb	r3, [r3, #0]
1004624c:	215c      	movs	r1, #92	@ 0x5c
1004624e:	434b      	muls	r3, r1
10046250:	4904      	ldr	r1, [pc, #16]	@ (10046264 <LL_RADIO_RadioCommandList_Disable+0x38>)
10046252:	468c      	mov	ip, r1
10046254:	4463      	add	r3, ip
10046256:	2140      	movs	r1, #64	@ 0x40
10046258:	438a      	bics	r2, r1
1004625a:	601a      	str	r2, [r3, #0]
}
1004625c:	46c0      	nop			@ (mov r8, r8)
1004625e:	46bd      	mov	sp, r7
10046260:	b002      	add	sp, #8
10046262:	bd80      	pop	{r7, pc}
10046264:	200000dc 	.word	0x200000dc

10046268 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
10046268:	b580      	push	{r7, lr}
1004626a:	b082      	sub	sp, #8
1004626c:	af00      	add	r7, sp, #0
1004626e:	0002      	movs	r2, r0
10046270:	1dfb      	adds	r3, r7, #7
10046272:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10046274:	1dfb      	adds	r3, r7, #7
10046276:	781b      	ldrb	r3, [r3, #0]
10046278:	225c      	movs	r2, #92	@ 0x5c
1004627a:	4353      	muls	r3, r2
1004627c:	4a08      	ldr	r2, [pc, #32]	@ (100462a0 <LL_RADIO_TxMode_Enable+0x38>)
1004627e:	4694      	mov	ip, r2
10046280:	4463      	add	r3, ip
10046282:	681a      	ldr	r2, [r3, #0]
10046284:	1dfb      	adds	r3, r7, #7
10046286:	781b      	ldrb	r3, [r3, #0]
10046288:	215c      	movs	r1, #92	@ 0x5c
1004628a:	434b      	muls	r3, r1
1004628c:	4904      	ldr	r1, [pc, #16]	@ (100462a0 <LL_RADIO_TxMode_Enable+0x38>)
1004628e:	468c      	mov	ip, r1
10046290:	4463      	add	r3, ip
10046292:	2180      	movs	r1, #128	@ 0x80
10046294:	430a      	orrs	r2, r1
10046296:	601a      	str	r2, [r3, #0]
}
10046298:	46c0      	nop			@ (mov r8, r8)
1004629a:	46bd      	mov	sp, r7
1004629c:	b002      	add	sp, #8
1004629e:	bd80      	pop	{r7, pc}
100462a0:	200000dc 	.word	0x200000dc

100462a4 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
100462a4:	b580      	push	{r7, lr}
100462a6:	b082      	sub	sp, #8
100462a8:	af00      	add	r7, sp, #0
100462aa:	0002      	movs	r2, r0
100462ac:	1dfb      	adds	r3, r7, #7
100462ae:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
100462b0:	1dfb      	adds	r3, r7, #7
100462b2:	781b      	ldrb	r3, [r3, #0]
100462b4:	225c      	movs	r2, #92	@ 0x5c
100462b6:	4353      	muls	r3, r2
100462b8:	4a08      	ldr	r2, [pc, #32]	@ (100462dc <LL_RADIO_TxMode_Disable+0x38>)
100462ba:	4694      	mov	ip, r2
100462bc:	4463      	add	r3, ip
100462be:	681a      	ldr	r2, [r3, #0]
100462c0:	1dfb      	adds	r3, r7, #7
100462c2:	781b      	ldrb	r3, [r3, #0]
100462c4:	215c      	movs	r1, #92	@ 0x5c
100462c6:	434b      	muls	r3, r1
100462c8:	4904      	ldr	r1, [pc, #16]	@ (100462dc <LL_RADIO_TxMode_Disable+0x38>)
100462ca:	468c      	mov	ip, r1
100462cc:	4463      	add	r3, ip
100462ce:	2180      	movs	r1, #128	@ 0x80
100462d0:	438a      	bics	r2, r1
100462d2:	601a      	str	r2, [r3, #0]
}
100462d4:	46c0      	nop			@ (mov r8, r8)
100462d6:	46bd      	mov	sp, r7
100462d8:	b002      	add	sp, #8
100462da:	bd80      	pop	{r7, pc}
100462dc:	200000dc 	.word	0x200000dc

100462e0 <LL_RADIO_TxMode_IsEnabled>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_IsEnabled
  * @param  stateMachineNo
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TxMode_IsEnabled(uint8_t stateMachineNo)
{
100462e0:	b580      	push	{r7, lr}
100462e2:	b082      	sub	sp, #8
100462e4:	af00      	add	r7, sp, #0
100462e6:	0002      	movs	r2, r0
100462e8:	1dfb      	adds	r3, r7, #7
100462ea:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE) == (STATEMACH_WORD0_TXMODE)) ? 1U : 0U);
100462ec:	1dfb      	adds	r3, r7, #7
100462ee:	781b      	ldrb	r3, [r3, #0]
100462f0:	225c      	movs	r2, #92	@ 0x5c
100462f2:	4353      	muls	r3, r2
100462f4:	4a07      	ldr	r2, [pc, #28]	@ (10046314 <LL_RADIO_TxMode_IsEnabled+0x34>)
100462f6:	4694      	mov	ip, r2
100462f8:	4463      	add	r3, ip
100462fa:	681b      	ldr	r3, [r3, #0]
100462fc:	2280      	movs	r2, #128	@ 0x80
100462fe:	4013      	ands	r3, r2
10046300:	2b80      	cmp	r3, #128	@ 0x80
10046302:	d101      	bne.n	10046308 <LL_RADIO_TxMode_IsEnabled+0x28>
10046304:	2301      	movs	r3, #1
10046306:	e000      	b.n	1004630a <LL_RADIO_TxMode_IsEnabled+0x2a>
10046308:	2300      	movs	r3, #0
}
1004630a:	0018      	movs	r0, r3
1004630c:	46bd      	mov	sp, r7
1004630e:	b002      	add	sp, #8
10046310:	bd80      	pop	{r7, pc}
10046312:	46c0      	nop			@ (mov r8, r8)
10046314:	200000dc 	.word	0x200000dc

10046318 <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
10046318:	b580      	push	{r7, lr}
1004631a:	b082      	sub	sp, #8
1004631c:	af00      	add	r7, sp, #0
1004631e:	0002      	movs	r2, r0
10046320:	6039      	str	r1, [r7, #0]
10046322:	1dfb      	adds	r3, r7, #7
10046324:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
10046326:	1dfb      	adds	r3, r7, #7
10046328:	781b      	ldrb	r3, [r3, #0]
1004632a:	225c      	movs	r2, #92	@ 0x5c
1004632c:	4353      	muls	r3, r2
1004632e:	4a0c      	ldr	r2, [pc, #48]	@ (10046360 <LL_RADIO_SetRemapChannel+0x48>)
10046330:	4694      	mov	ip, r2
10046332:	4463      	add	r3, ip
10046334:	681b      	ldr	r3, [r3, #0]
10046336:	4a0b      	ldr	r2, [pc, #44]	@ (10046364 <LL_RADIO_SetRemapChannel+0x4c>)
10046338:	4013      	ands	r3, r2
1004633a:	0019      	movs	r1, r3
1004633c:	683b      	ldr	r3, [r7, #0]
1004633e:	021a      	lsls	r2, r3, #8
10046340:	23fc      	movs	r3, #252	@ 0xfc
10046342:	019b      	lsls	r3, r3, #6
10046344:	401a      	ands	r2, r3
10046346:	1dfb      	adds	r3, r7, #7
10046348:	781b      	ldrb	r3, [r3, #0]
1004634a:	205c      	movs	r0, #92	@ 0x5c
1004634c:	4343      	muls	r3, r0
1004634e:	4804      	ldr	r0, [pc, #16]	@ (10046360 <LL_RADIO_SetRemapChannel+0x48>)
10046350:	4684      	mov	ip, r0
10046352:	4463      	add	r3, ip
10046354:	430a      	orrs	r2, r1
10046356:	601a      	str	r2, [r3, #0]
}
10046358:	46c0      	nop			@ (mov r8, r8)
1004635a:	46bd      	mov	sp, r7
1004635c:	b002      	add	sp, #8
1004635e:	bd80      	pop	{r7, pc}
10046360:	200000dc 	.word	0x200000dc
10046364:	ffffc0ff 	.word	0xffffc0ff

10046368 <LL_RADIO_GetRemapChannel>:
  * @rmtoll WORD0          REMAP_CHAN       LL_RADIO_GetRemapChannel
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetRemapChannel(uint8_t stateMachineNo)
{
10046368:	b580      	push	{r7, lr}
1004636a:	b082      	sub	sp, #8
1004636c:	af00      	add	r7, sp, #0
1004636e:	0002      	movs	r2, r0
10046370:	1dfb      	adds	r3, r7, #7
10046372:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0,
10046374:	1dfb      	adds	r3, r7, #7
10046376:	781b      	ldrb	r3, [r3, #0]
10046378:	225c      	movs	r2, #92	@ 0x5c
1004637a:	4353      	muls	r3, r2
1004637c:	4a05      	ldr	r2, [pc, #20]	@ (10046394 <LL_RADIO_GetRemapChannel+0x2c>)
1004637e:	4694      	mov	ip, r2
10046380:	4463      	add	r3, ip
10046382:	681b      	ldr	r3, [r3, #0]
10046384:	0a1b      	lsrs	r3, r3, #8
10046386:	223f      	movs	r2, #63	@ 0x3f
10046388:	4013      	ands	r3, r2
                             STATEMACH_WORD0_REMAP_CHAN) >> STATEMACH_WORD0_REMAP_CHAN_Pos);
}
1004638a:	0018      	movs	r0, r3
1004638c:	46bd      	mov	sp, r7
1004638e:	b002      	add	sp, #8
10046390:	bd80      	pop	{r7, pc}
10046392:	46c0      	nop			@ (mov r8, r8)
10046394:	200000dc 	.word	0x200000dc

10046398 <LL_RADIO_ToggleNextExpectedSequenceNumber>:
  * @rmtoll WORD0          NESN       LL_RADIO_ToggleNextExpectedSequenceNumber
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ToggleNextExpectedSequenceNumber(uint8_t stateMachineNo)
{
10046398:	b580      	push	{r7, lr}
1004639a:	b082      	sub	sp, #8
1004639c:	af00      	add	r7, sp, #0
1004639e:	0002      	movs	r2, r0
100463a0:	1dfb      	adds	r3, r7, #7
100463a2:	701a      	strb	r2, [r3, #0]
  TOGGLE_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_NESN);
100463a4:	1dfb      	adds	r3, r7, #7
100463a6:	781b      	ldrb	r3, [r3, #0]
100463a8:	225c      	movs	r2, #92	@ 0x5c
100463aa:	4353      	muls	r3, r2
100463ac:	4a09      	ldr	r2, [pc, #36]	@ (100463d4 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
100463ae:	4694      	mov	ip, r2
100463b0:	4463      	add	r3, ip
100463b2:	681a      	ldr	r2, [r3, #0]
100463b4:	1dfb      	adds	r3, r7, #7
100463b6:	781b      	ldrb	r3, [r3, #0]
100463b8:	215c      	movs	r1, #92	@ 0x5c
100463ba:	434b      	muls	r3, r1
100463bc:	4905      	ldr	r1, [pc, #20]	@ (100463d4 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
100463be:	468c      	mov	ip, r1
100463c0:	4463      	add	r3, ip
100463c2:	2180      	movs	r1, #128	@ 0x80
100463c4:	0209      	lsls	r1, r1, #8
100463c6:	404a      	eors	r2, r1
100463c8:	601a      	str	r2, [r3, #0]
}
100463ca:	46c0      	nop			@ (mov r8, r8)
100463cc:	46bd      	mov	sp, r7
100463ce:	b002      	add	sp, #8
100463d0:	bd80      	pop	{r7, pc}
100463d2:	46c0      	nop			@ (mov r8, r8)
100463d4:	200000dc 	.word	0x200000dc

100463d8 <LL_RADIO_Encryption_Enable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Enable(uint8_t stateMachineNo)
{
100463d8:	b580      	push	{r7, lr}
100463da:	b082      	sub	sp, #8
100463dc:	af00      	add	r7, sp, #0
100463de:	0002      	movs	r2, r0
100463e0:	1dfb      	adds	r3, r7, #7
100463e2:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
100463e4:	1dfb      	adds	r3, r7, #7
100463e6:	781b      	ldrb	r3, [r3, #0]
100463e8:	225c      	movs	r2, #92	@ 0x5c
100463ea:	4353      	muls	r3, r2
100463ec:	4a09      	ldr	r2, [pc, #36]	@ (10046414 <LL_RADIO_Encryption_Enable+0x3c>)
100463ee:	4694      	mov	ip, r2
100463f0:	4463      	add	r3, ip
100463f2:	681a      	ldr	r2, [r3, #0]
100463f4:	1dfb      	adds	r3, r7, #7
100463f6:	781b      	ldrb	r3, [r3, #0]
100463f8:	215c      	movs	r1, #92	@ 0x5c
100463fa:	434b      	muls	r3, r1
100463fc:	4905      	ldr	r1, [pc, #20]	@ (10046414 <LL_RADIO_Encryption_Enable+0x3c>)
100463fe:	468c      	mov	ip, r1
10046400:	4463      	add	r3, ip
10046402:	2180      	movs	r1, #128	@ 0x80
10046404:	0389      	lsls	r1, r1, #14
10046406:	430a      	orrs	r2, r1
10046408:	601a      	str	r2, [r3, #0]
}
1004640a:	46c0      	nop			@ (mov r8, r8)
1004640c:	46bd      	mov	sp, r7
1004640e:	b002      	add	sp, #8
10046410:	bd80      	pop	{r7, pc}
10046412:	46c0      	nop			@ (mov r8, r8)
10046414:	200000dc 	.word	0x200000dc

10046418 <LL_RADIO_Encryption_Disable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Disable(uint8_t stateMachineNo)
{
10046418:	b580      	push	{r7, lr}
1004641a:	b082      	sub	sp, #8
1004641c:	af00      	add	r7, sp, #0
1004641e:	0002      	movs	r2, r0
10046420:	1dfb      	adds	r3, r7, #7
10046422:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
10046424:	1dfb      	adds	r3, r7, #7
10046426:	781b      	ldrb	r3, [r3, #0]
10046428:	225c      	movs	r2, #92	@ 0x5c
1004642a:	4353      	muls	r3, r2
1004642c:	4a08      	ldr	r2, [pc, #32]	@ (10046450 <LL_RADIO_Encryption_Disable+0x38>)
1004642e:	4694      	mov	ip, r2
10046430:	4463      	add	r3, ip
10046432:	681a      	ldr	r2, [r3, #0]
10046434:	1dfb      	adds	r3, r7, #7
10046436:	781b      	ldrb	r3, [r3, #0]
10046438:	215c      	movs	r1, #92	@ 0x5c
1004643a:	434b      	muls	r3, r1
1004643c:	4904      	ldr	r1, [pc, #16]	@ (10046450 <LL_RADIO_Encryption_Disable+0x38>)
1004643e:	468c      	mov	ip, r1
10046440:	4463      	add	r3, ip
10046442:	4904      	ldr	r1, [pc, #16]	@ (10046454 <LL_RADIO_Encryption_Disable+0x3c>)
10046444:	400a      	ands	r2, r1
10046446:	601a      	str	r2, [r3, #0]
}
10046448:	46c0      	nop			@ (mov r8, r8)
1004644a:	46bd      	mov	sp, r7
1004644c:	b002      	add	sp, #8
1004644e:	bd80      	pop	{r7, pc}
10046450:	200000dc 	.word	0x200000dc
10046454:	ffdfffff 	.word	0xffdfffff

10046458 <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
10046458:	b580      	push	{r7, lr}
1004645a:	b082      	sub	sp, #8
1004645c:	af00      	add	r7, sp, #0
1004645e:	0002      	movs	r2, r0
10046460:	6039      	str	r1, [r7, #0]
10046462:	1dfb      	adds	r3, r7, #7
10046464:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
10046466:	1dfb      	adds	r3, r7, #7
10046468:	781b      	ldrb	r3, [r3, #0]
1004646a:	225c      	movs	r2, #92	@ 0x5c
1004646c:	4353      	muls	r3, r2
1004646e:	4a0c      	ldr	r2, [pc, #48]	@ (100464a0 <LL_RADIO_SetTransmissionPhy+0x48>)
10046470:	4694      	mov	ip, r2
10046472:	4463      	add	r3, ip
10046474:	681b      	ldr	r3, [r3, #0]
10046476:	4a0b      	ldr	r2, [pc, #44]	@ (100464a4 <LL_RADIO_SetTransmissionPhy+0x4c>)
10046478:	4013      	ands	r3, r2
1004647a:	0019      	movs	r1, r3
1004647c:	683b      	ldr	r3, [r7, #0]
1004647e:	061a      	lsls	r2, r3, #24
10046480:	23e0      	movs	r3, #224	@ 0xe0
10046482:	04db      	lsls	r3, r3, #19
10046484:	401a      	ands	r2, r3
10046486:	1dfb      	adds	r3, r7, #7
10046488:	781b      	ldrb	r3, [r3, #0]
1004648a:	205c      	movs	r0, #92	@ 0x5c
1004648c:	4343      	muls	r3, r0
1004648e:	4804      	ldr	r0, [pc, #16]	@ (100464a0 <LL_RADIO_SetTransmissionPhy+0x48>)
10046490:	4684      	mov	ip, r0
10046492:	4463      	add	r3, ip
10046494:	430a      	orrs	r2, r1
10046496:	601a      	str	r2, [r3, #0]
}
10046498:	46c0      	nop			@ (mov r8, r8)
1004649a:	46bd      	mov	sp, r7
1004649c:	b002      	add	sp, #8
1004649e:	bd80      	pop	{r7, pc}
100464a0:	200000dc 	.word	0x200000dc
100464a4:	f8ffffff 	.word	0xf8ffffff

100464a8 <LL_RADIO_GetTransmissionPhy>:
  * @rmtoll WORD0          TXPHY       LL_RADIO_GetTransmissionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetTransmissionPhy(uint8_t stateMachineNo)
{
100464a8:	b580      	push	{r7, lr}
100464aa:	b082      	sub	sp, #8
100464ac:	af00      	add	r7, sp, #0
100464ae:	0002      	movs	r2, r0
100464b0:	1dfb      	adds	r3, r7, #7
100464b2:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY) >> STATEMACH_WORD0_TXPHY_Pos);
100464b4:	1dfb      	adds	r3, r7, #7
100464b6:	781b      	ldrb	r3, [r3, #0]
100464b8:	225c      	movs	r2, #92	@ 0x5c
100464ba:	4353      	muls	r3, r2
100464bc:	4a05      	ldr	r2, [pc, #20]	@ (100464d4 <LL_RADIO_GetTransmissionPhy+0x2c>)
100464be:	4694      	mov	ip, r2
100464c0:	4463      	add	r3, ip
100464c2:	681b      	ldr	r3, [r3, #0]
100464c4:	0e1b      	lsrs	r3, r3, #24
100464c6:	2207      	movs	r2, #7
100464c8:	4013      	ands	r3, r2
}
100464ca:	0018      	movs	r0, r3
100464cc:	46bd      	mov	sp, r7
100464ce:	b002      	add	sp, #8
100464d0:	bd80      	pop	{r7, pc}
100464d2:	46c0      	nop			@ (mov r8, r8)
100464d4:	200000dc 	.word	0x200000dc

100464d8 <LL_RADIO_SetCTEDisable>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEDisable(uint8_t stateMachineNo, uint32_t value)
{
100464d8:	b580      	push	{r7, lr}
100464da:	b082      	sub	sp, #8
100464dc:	af00      	add	r7, sp, #0
100464de:	0002      	movs	r2, r0
100464e0:	6039      	str	r1, [r7, #0]
100464e2:	1dfb      	adds	r3, r7, #7
100464e4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_CTEDISABLE, value);
100464e6:	1dfb      	adds	r3, r7, #7
100464e8:	781b      	ldrb	r3, [r3, #0]
100464ea:	225c      	movs	r2, #92	@ 0x5c
100464ec:	4353      	muls	r3, r2
100464ee:	4a0c      	ldr	r2, [pc, #48]	@ (10046520 <LL_RADIO_SetCTEDisable+0x48>)
100464f0:	4694      	mov	ip, r2
100464f2:	4463      	add	r3, ip
100464f4:	681b      	ldr	r3, [r3, #0]
100464f6:	4a0b      	ldr	r2, [pc, #44]	@ (10046524 <LL_RADIO_SetCTEDisable+0x4c>)
100464f8:	4013      	ands	r3, r2
100464fa:	0019      	movs	r1, r3
100464fc:	683b      	ldr	r3, [r7, #0]
100464fe:	06da      	lsls	r2, r3, #27
10046500:	2380      	movs	r3, #128	@ 0x80
10046502:	051b      	lsls	r3, r3, #20
10046504:	401a      	ands	r2, r3
10046506:	1dfb      	adds	r3, r7, #7
10046508:	781b      	ldrb	r3, [r3, #0]
1004650a:	205c      	movs	r0, #92	@ 0x5c
1004650c:	4343      	muls	r3, r0
1004650e:	4804      	ldr	r0, [pc, #16]	@ (10046520 <LL_RADIO_SetCTEDisable+0x48>)
10046510:	4684      	mov	ip, r0
10046512:	4463      	add	r3, ip
10046514:	430a      	orrs	r2, r1
10046516:	601a      	str	r2, [r3, #0]
}
10046518:	46c0      	nop			@ (mov r8, r8)
1004651a:	46bd      	mov	sp, r7
1004651c:	b002      	add	sp, #8
1004651e:	bd80      	pop	{r7, pc}
10046520:	200000dc 	.word	0x200000dc
10046524:	f7ffffff 	.word	0xf7ffffff

10046528 <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
10046528:	b580      	push	{r7, lr}
1004652a:	b082      	sub	sp, #8
1004652c:	af00      	add	r7, sp, #0
1004652e:	0002      	movs	r2, r0
10046530:	6039      	str	r1, [r7, #0]
10046532:	1dfb      	adds	r3, r7, #7
10046534:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
10046536:	1dfb      	adds	r3, r7, #7
10046538:	781b      	ldrb	r3, [r3, #0]
1004653a:	225c      	movs	r2, #92	@ 0x5c
1004653c:	4353      	muls	r3, r2
1004653e:	4a0c      	ldr	r2, [pc, #48]	@ (10046570 <LL_RADIO_SetReceptionPhy+0x48>)
10046540:	4694      	mov	ip, r2
10046542:	4463      	add	r3, ip
10046544:	681b      	ldr	r3, [r3, #0]
10046546:	4a0b      	ldr	r2, [pc, #44]	@ (10046574 <LL_RADIO_SetReceptionPhy+0x4c>)
10046548:	4013      	ands	r3, r2
1004654a:	0019      	movs	r1, r3
1004654c:	683b      	ldr	r3, [r7, #0]
1004654e:	071a      	lsls	r2, r3, #28
10046550:	23e0      	movs	r3, #224	@ 0xe0
10046552:	05db      	lsls	r3, r3, #23
10046554:	401a      	ands	r2, r3
10046556:	1dfb      	adds	r3, r7, #7
10046558:	781b      	ldrb	r3, [r3, #0]
1004655a:	205c      	movs	r0, #92	@ 0x5c
1004655c:	4343      	muls	r3, r0
1004655e:	4804      	ldr	r0, [pc, #16]	@ (10046570 <LL_RADIO_SetReceptionPhy+0x48>)
10046560:	4684      	mov	ip, r0
10046562:	4463      	add	r3, ip
10046564:	430a      	orrs	r2, r1
10046566:	601a      	str	r2, [r3, #0]
}
10046568:	46c0      	nop			@ (mov r8, r8)
1004656a:	46bd      	mov	sp, r7
1004656c:	b002      	add	sp, #8
1004656e:	bd80      	pop	{r7, pc}
10046570:	200000dc 	.word	0x200000dc
10046574:	8fffffff 	.word	0x8fffffff

10046578 <LL_RADIO_GetReceptionPhy>:
  * @rmtoll WORD0          RXPHY       LL_RADIO_GetReceptionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetReceptionPhy(uint8_t stateMachineNo)
{
10046578:	b580      	push	{r7, lr}
1004657a:	b082      	sub	sp, #8
1004657c:	af00      	add	r7, sp, #0
1004657e:	0002      	movs	r2, r0
10046580:	1dfb      	adds	r3, r7, #7
10046582:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY) >> STATEMACH_WORD0_RXPHY_Pos);
10046584:	1dfb      	adds	r3, r7, #7
10046586:	781b      	ldrb	r3, [r3, #0]
10046588:	225c      	movs	r2, #92	@ 0x5c
1004658a:	4353      	muls	r3, r2
1004658c:	4a05      	ldr	r2, [pc, #20]	@ (100465a4 <LL_RADIO_GetReceptionPhy+0x2c>)
1004658e:	4694      	mov	ip, r2
10046590:	4463      	add	r3, ip
10046592:	681b      	ldr	r3, [r3, #0]
10046594:	0f1b      	lsrs	r3, r3, #28
10046596:	2207      	movs	r2, #7
10046598:	4013      	ands	r3, r2
}
1004659a:	0018      	movs	r0, r3
1004659c:	46bd      	mov	sp, r7
1004659e:	b002      	add	sp, #8
100465a0:	bd80      	pop	{r7, pc}
100465a2:	46c0      	nop			@ (mov r8, r8)
100465a4:	200000dc 	.word	0x200000dc

100465a8 <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
100465a8:	b580      	push	{r7, lr}
100465aa:	b082      	sub	sp, #8
100465ac:	af00      	add	r7, sp, #0
100465ae:	0002      	movs	r2, r0
100465b0:	6039      	str	r1, [r7, #0]
100465b2:	1dfb      	adds	r3, r7, #7
100465b4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
100465b6:	1dfb      	adds	r3, r7, #7
100465b8:	781b      	ldrb	r3, [r3, #0]
100465ba:	225c      	movs	r2, #92	@ 0x5c
100465bc:	4353      	muls	r3, r2
100465be:	4a08      	ldr	r2, [pc, #32]	@ (100465e0 <LL_RADIO_SetTxPoint+0x38>)
100465c0:	4694      	mov	ip, r2
100465c2:	4463      	add	r3, ip
100465c4:	685b      	ldr	r3, [r3, #4]
100465c6:	1dfb      	adds	r3, r7, #7
100465c8:	781b      	ldrb	r3, [r3, #0]
100465ca:	225c      	movs	r2, #92	@ 0x5c
100465cc:	4353      	muls	r3, r2
100465ce:	4a04      	ldr	r2, [pc, #16]	@ (100465e0 <LL_RADIO_SetTxPoint+0x38>)
100465d0:	4694      	mov	ip, r2
100465d2:	4463      	add	r3, ip
100465d4:	683a      	ldr	r2, [r7, #0]
100465d6:	605a      	str	r2, [r3, #4]
}
100465d8:	46c0      	nop			@ (mov r8, r8)
100465da:	46bd      	mov	sp, r7
100465dc:	b002      	add	sp, #8
100465de:	bd80      	pop	{r7, pc}
100465e0:	200000dc 	.word	0x200000dc

100465e4 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
100465e4:	b580      	push	{r7, lr}
100465e6:	b082      	sub	sp, #8
100465e8:	af00      	add	r7, sp, #0
100465ea:	0002      	movs	r2, r0
100465ec:	6039      	str	r1, [r7, #0]
100465ee:	1dfb      	adds	r3, r7, #7
100465f0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
100465f2:	1dfb      	adds	r3, r7, #7
100465f4:	781b      	ldrb	r3, [r3, #0]
100465f6:	225c      	movs	r2, #92	@ 0x5c
100465f8:	4353      	muls	r3, r2
100465fa:	4a08      	ldr	r2, [pc, #32]	@ (1004661c <LL_RADIO_SetRcvPoint+0x38>)
100465fc:	4694      	mov	ip, r2
100465fe:	4463      	add	r3, ip
10046600:	689b      	ldr	r3, [r3, #8]
10046602:	1dfb      	adds	r3, r7, #7
10046604:	781b      	ldrb	r3, [r3, #0]
10046606:	225c      	movs	r2, #92	@ 0x5c
10046608:	4353      	muls	r3, r2
1004660a:	4a04      	ldr	r2, [pc, #16]	@ (1004661c <LL_RADIO_SetRcvPoint+0x38>)
1004660c:	4694      	mov	ip, r2
1004660e:	4463      	add	r3, ip
10046610:	683a      	ldr	r2, [r7, #0]
10046612:	609a      	str	r2, [r3, #8]
}
10046614:	46c0      	nop			@ (mov r8, r8)
10046616:	46bd      	mov	sp, r7
10046618:	b002      	add	sp, #8
1004661a:	bd80      	pop	{r7, pc}
1004661c:	200000dc 	.word	0x200000dc

10046620 <LL_RADIO_SetPacketCounterTx_31_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_31_0(uint8_t stateMachineNo, uint32_t value)
{
10046620:	b580      	push	{r7, lr}
10046622:	b082      	sub	sp, #8
10046624:	af00      	add	r7, sp, #0
10046626:	0002      	movs	r2, r0
10046628:	6039      	str	r1, [r7, #0]
1004662a:	1dfb      	adds	r3, r7, #7
1004662c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD6, STATEMACH_WORD6_PCNTTX_31_0, value);
1004662e:	1dfb      	adds	r3, r7, #7
10046630:	781b      	ldrb	r3, [r3, #0]
10046632:	225c      	movs	r2, #92	@ 0x5c
10046634:	4353      	muls	r3, r2
10046636:	4a08      	ldr	r2, [pc, #32]	@ (10046658 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10046638:	4694      	mov	ip, r2
1004663a:	4463      	add	r3, ip
1004663c:	699b      	ldr	r3, [r3, #24]
1004663e:	1dfb      	adds	r3, r7, #7
10046640:	781b      	ldrb	r3, [r3, #0]
10046642:	225c      	movs	r2, #92	@ 0x5c
10046644:	4353      	muls	r3, r2
10046646:	4a04      	ldr	r2, [pc, #16]	@ (10046658 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10046648:	4694      	mov	ip, r2
1004664a:	4463      	add	r3, ip
1004664c:	683a      	ldr	r2, [r7, #0]
1004664e:	619a      	str	r2, [r3, #24]
}
10046650:	46c0      	nop			@ (mov r8, r8)
10046652:	46bd      	mov	sp, r7
10046654:	b002      	add	sp, #8
10046656:	bd80      	pop	{r7, pc}
10046658:	200000dc 	.word	0x200000dc

1004665c <LL_RADIO_SetPacketCounterTx_39_32>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_39_32(uint8_t stateMachineNo, uint32_t value)
{
1004665c:	b580      	push	{r7, lr}
1004665e:	b082      	sub	sp, #8
10046660:	af00      	add	r7, sp, #0
10046662:	0002      	movs	r2, r0
10046664:	6039      	str	r1, [r7, #0]
10046666:	1dfb      	adds	r3, r7, #7
10046668:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTTX_39_32, value);
1004666a:	1dfb      	adds	r3, r7, #7
1004666c:	781b      	ldrb	r3, [r3, #0]
1004666e:	225c      	movs	r2, #92	@ 0x5c
10046670:	4353      	muls	r3, r2
10046672:	4a0b      	ldr	r2, [pc, #44]	@ (100466a0 <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10046674:	4694      	mov	ip, r2
10046676:	4463      	add	r3, ip
10046678:	69db      	ldr	r3, [r3, #28]
1004667a:	22ff      	movs	r2, #255	@ 0xff
1004667c:	4393      	bics	r3, r2
1004667e:	0019      	movs	r1, r3
10046680:	683b      	ldr	r3, [r7, #0]
10046682:	22ff      	movs	r2, #255	@ 0xff
10046684:	401a      	ands	r2, r3
10046686:	1dfb      	adds	r3, r7, #7
10046688:	781b      	ldrb	r3, [r3, #0]
1004668a:	205c      	movs	r0, #92	@ 0x5c
1004668c:	4343      	muls	r3, r0
1004668e:	4804      	ldr	r0, [pc, #16]	@ (100466a0 <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10046690:	4684      	mov	ip, r0
10046692:	4463      	add	r3, ip
10046694:	430a      	orrs	r2, r1
10046696:	61da      	str	r2, [r3, #28]
}
10046698:	46c0      	nop			@ (mov r8, r8)
1004669a:	46bd      	mov	sp, r7
1004669c:	b002      	add	sp, #8
1004669e:	bd80      	pop	{r7, pc}
100466a0:	200000dc 	.word	0x200000dc

100466a4 <LL_RADIO_GetPacketCounterTx_39_32>:
  * @rmtoll WORD7          PCNTTX_39_32       LL_RADIO_GetPacketCounterTx_39_32
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterTx_39_32(uint8_t stateMachineNo)
{
100466a4:	b580      	push	{r7, lr}
100466a6:	b082      	sub	sp, #8
100466a8:	af00      	add	r7, sp, #0
100466aa:	0002      	movs	r2, r0
100466ac:	1dfb      	adds	r3, r7, #7
100466ae:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
100466b0:	1dfb      	adds	r3, r7, #7
100466b2:	781b      	ldrb	r3, [r3, #0]
100466b4:	225c      	movs	r2, #92	@ 0x5c
100466b6:	4353      	muls	r3, r2
100466b8:	4a04      	ldr	r2, [pc, #16]	@ (100466cc <LL_RADIO_GetPacketCounterTx_39_32+0x28>)
100466ba:	4694      	mov	ip, r2
100466bc:	4463      	add	r3, ip
100466be:	69db      	ldr	r3, [r3, #28]
100466c0:	22ff      	movs	r2, #255	@ 0xff
100466c2:	4013      	ands	r3, r2
                             STATEMACH_WORD7_PCNTTX_39_32) >> STATEMACH_WORD7_PCNTTX_39_32_Pos);
}
100466c4:	0018      	movs	r0, r3
100466c6:	46bd      	mov	sp, r7
100466c8:	b002      	add	sp, #8
100466ca:	bd80      	pop	{r7, pc}
100466cc:	200000dc 	.word	0x200000dc

100466d0 <LL_RADIO_SetPacketCounterRx_23_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_23_0(uint8_t stateMachineNo, uint32_t value)
{
100466d0:	b580      	push	{r7, lr}
100466d2:	b082      	sub	sp, #8
100466d4:	af00      	add	r7, sp, #0
100466d6:	0002      	movs	r2, r0
100466d8:	6039      	str	r1, [r7, #0]
100466da:	1dfb      	adds	r3, r7, #7
100466dc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTRCV_23_0, value);
100466de:	1dfb      	adds	r3, r7, #7
100466e0:	781b      	ldrb	r3, [r3, #0]
100466e2:	225c      	movs	r2, #92	@ 0x5c
100466e4:	4353      	muls	r3, r2
100466e6:	4a0b      	ldr	r2, [pc, #44]	@ (10046714 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
100466e8:	4694      	mov	ip, r2
100466ea:	4463      	add	r3, ip
100466ec:	69db      	ldr	r3, [r3, #28]
100466ee:	22ff      	movs	r2, #255	@ 0xff
100466f0:	4013      	ands	r3, r2
100466f2:	0019      	movs	r1, r3
100466f4:	683b      	ldr	r3, [r7, #0]
100466f6:	021a      	lsls	r2, r3, #8
100466f8:	1dfb      	adds	r3, r7, #7
100466fa:	781b      	ldrb	r3, [r3, #0]
100466fc:	205c      	movs	r0, #92	@ 0x5c
100466fe:	4343      	muls	r3, r0
10046700:	4804      	ldr	r0, [pc, #16]	@ (10046714 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
10046702:	4684      	mov	ip, r0
10046704:	4463      	add	r3, ip
10046706:	430a      	orrs	r2, r1
10046708:	61da      	str	r2, [r3, #28]
}
1004670a:	46c0      	nop			@ (mov r8, r8)
1004670c:	46bd      	mov	sp, r7
1004670e:	b002      	add	sp, #8
10046710:	bd80      	pop	{r7, pc}
10046712:	46c0      	nop			@ (mov r8, r8)
10046714:	200000dc 	.word	0x200000dc

10046718 <LL_RADIO_GetPacketCounterRx_23_0>:
  * @rmtoll WORD7          PCNTRCV_23_0       LL_RADIO_GetPacketCounterRx_23_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_23_0(uint8_t stateMachineNo)
{
10046718:	b580      	push	{r7, lr}
1004671a:	b082      	sub	sp, #8
1004671c:	af00      	add	r7, sp, #0
1004671e:	0002      	movs	r2, r0
10046720:	1dfb      	adds	r3, r7, #7
10046722:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10046724:	1dfb      	adds	r3, r7, #7
10046726:	781b      	ldrb	r3, [r3, #0]
10046728:	225c      	movs	r2, #92	@ 0x5c
1004672a:	4353      	muls	r3, r2
1004672c:	4a05      	ldr	r2, [pc, #20]	@ (10046744 <LL_RADIO_GetPacketCounterRx_23_0+0x2c>)
1004672e:	4694      	mov	ip, r2
10046730:	4463      	add	r3, ip
10046732:	69db      	ldr	r3, [r3, #28]
10046734:	0a1b      	lsrs	r3, r3, #8
10046736:	021b      	lsls	r3, r3, #8
10046738:	0a1b      	lsrs	r3, r3, #8
                             STATEMACH_WORD7_PCNTRCV_23_0) >> STATEMACH_WORD7_PCNTRCV_23_0_Pos);
}
1004673a:	0018      	movs	r0, r3
1004673c:	46bd      	mov	sp, r7
1004673e:	b002      	add	sp, #8
10046740:	bd80      	pop	{r7, pc}
10046742:	46c0      	nop			@ (mov r8, r8)
10046744:	200000dc 	.word	0x200000dc

10046748 <LL_RADIO_SetPacketCounterRx_39_24>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_39_24(uint8_t stateMachineNo, uint32_t value)
{
10046748:	b580      	push	{r7, lr}
1004674a:	b082      	sub	sp, #8
1004674c:	af00      	add	r7, sp, #0
1004674e:	0002      	movs	r2, r0
10046750:	6039      	str	r1, [r7, #0]
10046752:	1dfb      	adds	r3, r7, #7
10046754:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_PCNTRCV_39_24, value);
10046756:	1dfb      	adds	r3, r7, #7
10046758:	781b      	ldrb	r3, [r3, #0]
1004675a:	225c      	movs	r2, #92	@ 0x5c
1004675c:	4353      	muls	r3, r2
1004675e:	4a0b      	ldr	r2, [pc, #44]	@ (1004678c <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
10046760:	4694      	mov	ip, r2
10046762:	4463      	add	r3, ip
10046764:	6a1b      	ldr	r3, [r3, #32]
10046766:	0c1b      	lsrs	r3, r3, #16
10046768:	0419      	lsls	r1, r3, #16
1004676a:	683b      	ldr	r3, [r7, #0]
1004676c:	041b      	lsls	r3, r3, #16
1004676e:	0c1a      	lsrs	r2, r3, #16
10046770:	1dfb      	adds	r3, r7, #7
10046772:	781b      	ldrb	r3, [r3, #0]
10046774:	205c      	movs	r0, #92	@ 0x5c
10046776:	4343      	muls	r3, r0
10046778:	4804      	ldr	r0, [pc, #16]	@ (1004678c <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
1004677a:	4684      	mov	ip, r0
1004677c:	4463      	add	r3, ip
1004677e:	430a      	orrs	r2, r1
10046780:	621a      	str	r2, [r3, #32]
}
10046782:	46c0      	nop			@ (mov r8, r8)
10046784:	46bd      	mov	sp, r7
10046786:	b002      	add	sp, #8
10046788:	bd80      	pop	{r7, pc}
1004678a:	46c0      	nop			@ (mov r8, r8)
1004678c:	200000dc 	.word	0x200000dc

10046790 <LL_RADIO_GetPacketCounterRx_39_24>:
  * @rmtoll WORD8          PCNTRCV_39_24       LL_RADIO_GetPacketCounterRx_39_24
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_39_24(uint8_t stateMachineNo)
{
10046790:	b580      	push	{r7, lr}
10046792:	b082      	sub	sp, #8
10046794:	af00      	add	r7, sp, #0
10046796:	0002      	movs	r2, r0
10046798:	1dfb      	adds	r3, r7, #7
1004679a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD8,
1004679c:	1dfb      	adds	r3, r7, #7
1004679e:	781b      	ldrb	r3, [r3, #0]
100467a0:	225c      	movs	r2, #92	@ 0x5c
100467a2:	4353      	muls	r3, r2
100467a4:	4a04      	ldr	r2, [pc, #16]	@ (100467b8 <LL_RADIO_GetPacketCounterRx_39_24+0x28>)
100467a6:	4694      	mov	ip, r2
100467a8:	4463      	add	r3, ip
100467aa:	6a1b      	ldr	r3, [r3, #32]
100467ac:	041b      	lsls	r3, r3, #16
100467ae:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORD8_PCNTRCV_39_24) >> STATEMACH_WORD8_PCNTRCV_39_24_Pos);
}
100467b0:	0018      	movs	r0, r3
100467b2:	46bd      	mov	sp, r7
100467b4:	b002      	add	sp, #8
100467b6:	bd80      	pop	{r7, pc}
100467b8:	200000dc 	.word	0x200000dc

100467bc <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(uint8_t stateMachineNo)
{
100467bc:	b580      	push	{r7, lr}
100467be:	b082      	sub	sp, #8
100467c0:	af00      	add	r7, sp, #0
100467c2:	0002      	movs	r2, r0
100467c4:	1dfb      	adds	r3, r7, #7
100467c6:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
100467c8:	1dfb      	adds	r3, r7, #7
100467ca:	781b      	ldrb	r3, [r3, #0]
100467cc:	225c      	movs	r2, #92	@ 0x5c
100467ce:	4353      	muls	r3, r2
100467d0:	4a09      	ldr	r2, [pc, #36]	@ (100467f8 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
100467d2:	4694      	mov	ip, r2
100467d4:	4463      	add	r3, ip
100467d6:	6a1a      	ldr	r2, [r3, #32]
100467d8:	1dfb      	adds	r3, r7, #7
100467da:	781b      	ldrb	r3, [r3, #0]
100467dc:	215c      	movs	r1, #92	@ 0x5c
100467de:	434b      	muls	r3, r1
100467e0:	4905      	ldr	r1, [pc, #20]	@ (100467f8 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
100467e2:	468c      	mov	ip, r1
100467e4:	4463      	add	r3, ip
100467e6:	2180      	movs	r1, #128	@ 0x80
100467e8:	0589      	lsls	r1, r1, #22
100467ea:	430a      	orrs	r2, r1
100467ec:	621a      	str	r2, [r3, #32]
}
100467ee:	46c0      	nop			@ (mov r8, r8)
100467f0:	46bd      	mov	sp, r7
100467f2:	b002      	add	sp, #8
100467f4:	bd80      	pop	{r7, pc}
100467f6:	46c0      	nop			@ (mov r8, r8)
100467f8:	200000dc 	.word	0x200000dc

100467fc <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(uint8_t stateMachineNo)
{
100467fc:	b580      	push	{r7, lr}
100467fe:	b082      	sub	sp, #8
10046800:	af00      	add	r7, sp, #0
10046802:	0002      	movs	r2, r0
10046804:	1dfb      	adds	r3, r7, #7
10046806:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
10046808:	1dfb      	adds	r3, r7, #7
1004680a:	781b      	ldrb	r3, [r3, #0]
1004680c:	225c      	movs	r2, #92	@ 0x5c
1004680e:	4353      	muls	r3, r2
10046810:	4a08      	ldr	r2, [pc, #32]	@ (10046834 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
10046812:	4694      	mov	ip, r2
10046814:	4463      	add	r3, ip
10046816:	6a1a      	ldr	r2, [r3, #32]
10046818:	1dfb      	adds	r3, r7, #7
1004681a:	781b      	ldrb	r3, [r3, #0]
1004681c:	215c      	movs	r1, #92	@ 0x5c
1004681e:	434b      	muls	r3, r1
10046820:	4904      	ldr	r1, [pc, #16]	@ (10046834 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
10046822:	468c      	mov	ip, r1
10046824:	4463      	add	r3, ip
10046826:	4904      	ldr	r1, [pc, #16]	@ (10046838 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x3c>)
10046828:	400a      	ands	r2, r1
1004682a:	621a      	str	r2, [r3, #32]
}
1004682c:	46c0      	nop			@ (mov r8, r8)
1004682e:	46bd      	mov	sp, r7
10046830:	b002      	add	sp, #8
10046832:	bd80      	pop	{r7, pc}
10046834:	200000dc 	.word	0x200000dc
10046838:	dfffffff 	.word	0xdfffffff

1004683c <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
1004683c:	b580      	push	{r7, lr}
1004683e:	b082      	sub	sp, #8
10046840:	af00      	add	r7, sp, #0
10046842:	0002      	movs	r2, r0
10046844:	6039      	str	r1, [r7, #0]
10046846:	1dfb      	adds	r3, r7, #7
10046848:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
1004684a:	1dfb      	adds	r3, r7, #7
1004684c:	781b      	ldrb	r3, [r3, #0]
1004684e:	225c      	movs	r2, #92	@ 0x5c
10046850:	4353      	muls	r3, r2
10046852:	4a08      	ldr	r2, [pc, #32]	@ (10046874 <LL_RADIO_SetAccessAddress+0x38>)
10046854:	4694      	mov	ip, r2
10046856:	4463      	add	r3, ip
10046858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004685a:	1dfb      	adds	r3, r7, #7
1004685c:	781b      	ldrb	r3, [r3, #0]
1004685e:	225c      	movs	r2, #92	@ 0x5c
10046860:	4353      	muls	r3, r2
10046862:	4a04      	ldr	r2, [pc, #16]	@ (10046874 <LL_RADIO_SetAccessAddress+0x38>)
10046864:	4694      	mov	ip, r2
10046866:	4463      	add	r3, ip
10046868:	683a      	ldr	r2, [r7, #0]
1004686a:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004686c:	46c0      	nop			@ (mov r8, r8)
1004686e:	46bd      	mov	sp, r7
10046870:	b002      	add	sp, #8
10046872:	bd80      	pop	{r7, pc}
10046874:	200000dc 	.word	0x200000dc

10046878 <LL_RADIO_GetAccessAddress>:
  * @rmtoll WORD9          ACCADDR       LL_RADIO_GetAccessAddress
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetAccessAddress(uint8_t stateMachineNo)
{
10046878:	b580      	push	{r7, lr}
1004687a:	b082      	sub	sp, #8
1004687c:	af00      	add	r7, sp, #0
1004687e:	0002      	movs	r2, r0
10046880:	1dfb      	adds	r3, r7, #7
10046882:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD9,
10046884:	1dfb      	adds	r3, r7, #7
10046886:	781b      	ldrb	r3, [r3, #0]
10046888:	225c      	movs	r2, #92	@ 0x5c
1004688a:	4353      	muls	r3, r2
1004688c:	4a03      	ldr	r2, [pc, #12]	@ (1004689c <LL_RADIO_GetAccessAddress+0x24>)
1004688e:	4694      	mov	ip, r2
10046890:	4463      	add	r3, ip
10046892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                             STATEMACH_WORD9_ACCADDR) >> STATEMACH_WORD9_ACCADDR_Pos);
}
10046894:	0018      	movs	r0, r3
10046896:	46bd      	mov	sp, r7
10046898:	b002      	add	sp, #8
1004689a:	bd80      	pop	{r7, pc}
1004689c:	200000dc 	.word	0x200000dc

100468a0 <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
100468a0:	b580      	push	{r7, lr}
100468a2:	b082      	sub	sp, #8
100468a4:	af00      	add	r7, sp, #0
100468a6:	0002      	movs	r2, r0
100468a8:	6039      	str	r1, [r7, #0]
100468aa:	1dfb      	adds	r3, r7, #7
100468ac:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
100468ae:	1dfb      	adds	r3, r7, #7
100468b0:	781b      	ldrb	r3, [r3, #0]
100468b2:	225c      	movs	r2, #92	@ 0x5c
100468b4:	4353      	muls	r3, r2
100468b6:	4a0b      	ldr	r2, [pc, #44]	@ (100468e4 <LL_RADIO_SetCRCInitializationValue+0x44>)
100468b8:	4694      	mov	ip, r2
100468ba:	4463      	add	r3, ip
100468bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100468be:	0e1b      	lsrs	r3, r3, #24
100468c0:	0619      	lsls	r1, r3, #24
100468c2:	683b      	ldr	r3, [r7, #0]
100468c4:	021b      	lsls	r3, r3, #8
100468c6:	0a1a      	lsrs	r2, r3, #8
100468c8:	1dfb      	adds	r3, r7, #7
100468ca:	781b      	ldrb	r3, [r3, #0]
100468cc:	205c      	movs	r0, #92	@ 0x5c
100468ce:	4343      	muls	r3, r0
100468d0:	4804      	ldr	r0, [pc, #16]	@ (100468e4 <LL_RADIO_SetCRCInitializationValue+0x44>)
100468d2:	4684      	mov	ip, r0
100468d4:	4463      	add	r3, ip
100468d6:	430a      	orrs	r2, r1
100468d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
100468da:	46c0      	nop			@ (mov r8, r8)
100468dc:	46bd      	mov	sp, r7
100468de:	b002      	add	sp, #8
100468e0:	bd80      	pop	{r7, pc}
100468e2:	46c0      	nop			@ (mov r8, r8)
100468e4:	200000dc 	.word	0x200000dc

100468e8 <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
100468e8:	b580      	push	{r7, lr}
100468ea:	b082      	sub	sp, #8
100468ec:	af00      	add	r7, sp, #0
100468ee:	0002      	movs	r2, r0
100468f0:	6039      	str	r1, [r7, #0]
100468f2:	1dfb      	adds	r3, r7, #7
100468f4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
100468f6:	1dfb      	adds	r3, r7, #7
100468f8:	781b      	ldrb	r3, [r3, #0]
100468fa:	225c      	movs	r2, #92	@ 0x5c
100468fc:	4353      	muls	r3, r2
100468fe:	4a0a      	ldr	r2, [pc, #40]	@ (10046928 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10046900:	4694      	mov	ip, r2
10046902:	4463      	add	r3, ip
10046904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046906:	021b      	lsls	r3, r3, #8
10046908:	0a19      	lsrs	r1, r3, #8
1004690a:	683b      	ldr	r3, [r7, #0]
1004690c:	061a      	lsls	r2, r3, #24
1004690e:	1dfb      	adds	r3, r7, #7
10046910:	781b      	ldrb	r3, [r3, #0]
10046912:	205c      	movs	r0, #92	@ 0x5c
10046914:	4343      	muls	r3, r0
10046916:	4804      	ldr	r0, [pc, #16]	@ (10046928 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10046918:	4684      	mov	ip, r0
1004691a:	4463      	add	r3, ip
1004691c:	430a      	orrs	r2, r1
1004691e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046920:	46c0      	nop			@ (mov r8, r8)
10046922:	46bd      	mov	sp, r7
10046924:	b002      	add	sp, #8
10046926:	bd80      	pop	{r7, pc}
10046928:	200000dc 	.word	0x200000dc

1004692c <LL_RADIO_TxHp_Enable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Enable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Enable(uint8_t stateMachineNo)
{
1004692c:	b580      	push	{r7, lr}
1004692e:	b082      	sub	sp, #8
10046930:	af00      	add	r7, sp, #0
10046932:	0002      	movs	r2, r0
10046934:	1dfb      	adds	r3, r7, #7
10046936:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10046938:	1dfb      	adds	r3, r7, #7
1004693a:	781b      	ldrb	r3, [r3, #0]
1004693c:	225c      	movs	r2, #92	@ 0x5c
1004693e:	4353      	muls	r3, r2
10046940:	4a08      	ldr	r2, [pc, #32]	@ (10046964 <LL_RADIO_TxHp_Enable+0x38>)
10046942:	4694      	mov	ip, r2
10046944:	4463      	add	r3, ip
10046946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10046948:	1dfb      	adds	r3, r7, #7
1004694a:	781b      	ldrb	r3, [r3, #0]
1004694c:	215c      	movs	r1, #92	@ 0x5c
1004694e:	434b      	muls	r3, r1
10046950:	4904      	ldr	r1, [pc, #16]	@ (10046964 <LL_RADIO_TxHp_Enable+0x38>)
10046952:	468c      	mov	ip, r1
10046954:	4463      	add	r3, ip
10046956:	2180      	movs	r1, #128	@ 0x80
10046958:	430a      	orrs	r2, r1
1004695a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004695c:	46c0      	nop			@ (mov r8, r8)
1004695e:	46bd      	mov	sp, r7
10046960:	b002      	add	sp, #8
10046962:	bd80      	pop	{r7, pc}
10046964:	200000dc 	.word	0x200000dc

10046968 <LL_RADIO_TxHp_Disable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Disable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Disable(uint8_t stateMachineNo)
{
10046968:	b580      	push	{r7, lr}
1004696a:	b082      	sub	sp, #8
1004696c:	af00      	add	r7, sp, #0
1004696e:	0002      	movs	r2, r0
10046970:	1dfb      	adds	r3, r7, #7
10046972:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10046974:	1dfb      	adds	r3, r7, #7
10046976:	781b      	ldrb	r3, [r3, #0]
10046978:	225c      	movs	r2, #92	@ 0x5c
1004697a:	4353      	muls	r3, r2
1004697c:	4a08      	ldr	r2, [pc, #32]	@ (100469a0 <LL_RADIO_TxHp_Disable+0x38>)
1004697e:	4694      	mov	ip, r2
10046980:	4463      	add	r3, ip
10046982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10046984:	1dfb      	adds	r3, r7, #7
10046986:	781b      	ldrb	r3, [r3, #0]
10046988:	215c      	movs	r1, #92	@ 0x5c
1004698a:	434b      	muls	r3, r1
1004698c:	4904      	ldr	r1, [pc, #16]	@ (100469a0 <LL_RADIO_TxHp_Disable+0x38>)
1004698e:	468c      	mov	ip, r1
10046990:	4463      	add	r3, ip
10046992:	2180      	movs	r1, #128	@ 0x80
10046994:	438a      	bics	r2, r1
10046996:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046998:	46c0      	nop			@ (mov r8, r8)
1004699a:	46bd      	mov	sp, r7
1004699c:	b002      	add	sp, #8
1004699e:	bd80      	pop	{r7, pc}
100469a0:	200000dc 	.word	0x200000dc

100469a4 <LL_RADIO_TxHp_IsEnabled>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_IsEnabled
  * @param  stateMachineNo
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TxHp_IsEnabled(uint8_t stateMachineNo)
{
100469a4:	b580      	push	{r7, lr}
100469a6:	b082      	sub	sp, #8
100469a8:	af00      	add	r7, sp, #0
100469aa:	0002      	movs	r2, r0
100469ac:	1dfb      	adds	r3, r7, #7
100469ae:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP) == (STATEMACH_WORDB_TXHP)) ? 1U : 0U);
100469b0:	1dfb      	adds	r3, r7, #7
100469b2:	781b      	ldrb	r3, [r3, #0]
100469b4:	225c      	movs	r2, #92	@ 0x5c
100469b6:	4353      	muls	r3, r2
100469b8:	4a07      	ldr	r2, [pc, #28]	@ (100469d8 <LL_RADIO_TxHp_IsEnabled+0x34>)
100469ba:	4694      	mov	ip, r2
100469bc:	4463      	add	r3, ip
100469be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100469c0:	2280      	movs	r2, #128	@ 0x80
100469c2:	4013      	ands	r3, r2
100469c4:	2b80      	cmp	r3, #128	@ 0x80
100469c6:	d101      	bne.n	100469cc <LL_RADIO_TxHp_IsEnabled+0x28>
100469c8:	2301      	movs	r3, #1
100469ca:	e000      	b.n	100469ce <LL_RADIO_TxHp_IsEnabled+0x2a>
100469cc:	2300      	movs	r3, #0
}
100469ce:	0018      	movs	r0, r3
100469d0:	46bd      	mov	sp, r7
100469d2:	b002      	add	sp, #8
100469d4:	bd80      	pop	{r7, pc}
100469d6:	46c0      	nop			@ (mov r8, r8)
100469d8:	200000dc 	.word	0x200000dc

100469dc <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
100469dc:	b580      	push	{r7, lr}
100469de:	b082      	sub	sp, #8
100469e0:	af00      	add	r7, sp, #0
100469e2:	0002      	movs	r2, r0
100469e4:	6039      	str	r1, [r7, #0]
100469e6:	1dfb      	adds	r3, r7, #7
100469e8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
100469ea:	1dfb      	adds	r3, r7, #7
100469ec:	781b      	ldrb	r3, [r3, #0]
100469ee:	225c      	movs	r2, #92	@ 0x5c
100469f0:	4353      	muls	r3, r2
100469f2:	4a0b      	ldr	r2, [pc, #44]	@ (10046a20 <LL_RADIO_SetPAPower+0x44>)
100469f4:	4694      	mov	ip, r2
100469f6:	4463      	add	r3, ip
100469f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100469fa:	221f      	movs	r2, #31
100469fc:	4393      	bics	r3, r2
100469fe:	0019      	movs	r1, r3
10046a00:	683b      	ldr	r3, [r7, #0]
10046a02:	221f      	movs	r2, #31
10046a04:	401a      	ands	r2, r3
10046a06:	1dfb      	adds	r3, r7, #7
10046a08:	781b      	ldrb	r3, [r3, #0]
10046a0a:	205c      	movs	r0, #92	@ 0x5c
10046a0c:	4343      	muls	r3, r0
10046a0e:	4804      	ldr	r0, [pc, #16]	@ (10046a20 <LL_RADIO_SetPAPower+0x44>)
10046a10:	4684      	mov	ip, r0
10046a12:	4463      	add	r3, ip
10046a14:	430a      	orrs	r2, r1
10046a16:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046a18:	46c0      	nop			@ (mov r8, r8)
10046a1a:	46bd      	mov	sp, r7
10046a1c:	b002      	add	sp, #8
10046a1e:	bd80      	pop	{r7, pc}
10046a20:	200000dc 	.word	0x200000dc

10046a24 <LL_RADIO_GetPAPower>:
  * @rmtoll WORDB          PAPOWER       LL_RADIO_GetPAPower
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPAPower(uint8_t stateMachineNo)
{
10046a24:	b580      	push	{r7, lr}
10046a26:	b082      	sub	sp, #8
10046a28:	af00      	add	r7, sp, #0
10046a2a:	0002      	movs	r2, r0
10046a2c:	1dfb      	adds	r3, r7, #7
10046a2e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10046a30:	1dfb      	adds	r3, r7, #7
10046a32:	781b      	ldrb	r3, [r3, #0]
10046a34:	225c      	movs	r2, #92	@ 0x5c
10046a36:	4353      	muls	r3, r2
10046a38:	4a04      	ldr	r2, [pc, #16]	@ (10046a4c <LL_RADIO_GetPAPower+0x28>)
10046a3a:	4694      	mov	ip, r2
10046a3c:	4463      	add	r3, ip
10046a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046a40:	221f      	movs	r2, #31
10046a42:	4013      	ands	r3, r2
                             STATEMACH_WORDB_PAPOWER) >> STATEMACH_WORDB_PAPOWER_Pos);
}
10046a44:	0018      	movs	r0, r3
10046a46:	46bd      	mov	sp, r7
10046a48:	b002      	add	sp, #8
10046a4a:	bd80      	pop	{r7, pc}
10046a4c:	200000dc 	.word	0x200000dc

10046a50 <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
10046a50:	b580      	push	{r7, lr}
10046a52:	b082      	sub	sp, #8
10046a54:	af00      	add	r7, sp, #0
10046a56:	0002      	movs	r2, r0
10046a58:	6039      	str	r1, [r7, #0]
10046a5a:	1dfb      	adds	r3, r7, #7
10046a5c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
10046a5e:	1dfb      	adds	r3, r7, #7
10046a60:	781b      	ldrb	r3, [r3, #0]
10046a62:	225c      	movs	r2, #92	@ 0x5c
10046a64:	4353      	muls	r3, r2
10046a66:	4a0c      	ldr	r2, [pc, #48]	@ (10046a98 <LL_RADIO_SetHopIncrement+0x48>)
10046a68:	4694      	mov	ip, r2
10046a6a:	4463      	add	r3, ip
10046a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046a6e:	4a0b      	ldr	r2, [pc, #44]	@ (10046a9c <LL_RADIO_SetHopIncrement+0x4c>)
10046a70:	4013      	ands	r3, r2
10046a72:	0019      	movs	r1, r3
10046a74:	683b      	ldr	r3, [r7, #0]
10046a76:	021a      	lsls	r2, r3, #8
10046a78:	23fc      	movs	r3, #252	@ 0xfc
10046a7a:	019b      	lsls	r3, r3, #6
10046a7c:	401a      	ands	r2, r3
10046a7e:	1dfb      	adds	r3, r7, #7
10046a80:	781b      	ldrb	r3, [r3, #0]
10046a82:	205c      	movs	r0, #92	@ 0x5c
10046a84:	4343      	muls	r3, r0
10046a86:	4804      	ldr	r0, [pc, #16]	@ (10046a98 <LL_RADIO_SetHopIncrement+0x48>)
10046a88:	4684      	mov	ip, r0
10046a8a:	4463      	add	r3, ip
10046a8c:	430a      	orrs	r2, r1
10046a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046a90:	46c0      	nop			@ (mov r8, r8)
10046a92:	46bd      	mov	sp, r7
10046a94:	b002      	add	sp, #8
10046a96:	bd80      	pop	{r7, pc}
10046a98:	200000dc 	.word	0x200000dc
10046a9c:	ffffc0ff 	.word	0xffffc0ff

10046aa0 <LL_RADIO_GetHopIncrement>:
  * @rmtoll WORDB          HOPINCR       LL_RADIO_GetHopIncrement
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetHopIncrement(uint8_t stateMachineNo)
{
10046aa0:	b580      	push	{r7, lr}
10046aa2:	b082      	sub	sp, #8
10046aa4:	af00      	add	r7, sp, #0
10046aa6:	0002      	movs	r2, r0
10046aa8:	1dfb      	adds	r3, r7, #7
10046aaa:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10046aac:	1dfb      	adds	r3, r7, #7
10046aae:	781b      	ldrb	r3, [r3, #0]
10046ab0:	225c      	movs	r2, #92	@ 0x5c
10046ab2:	4353      	muls	r3, r2
10046ab4:	4a05      	ldr	r2, [pc, #20]	@ (10046acc <LL_RADIO_GetHopIncrement+0x2c>)
10046ab6:	4694      	mov	ip, r2
10046ab8:	4463      	add	r3, ip
10046aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046abc:	0a1b      	lsrs	r3, r3, #8
10046abe:	223f      	movs	r2, #63	@ 0x3f
10046ac0:	4013      	ands	r3, r2
                             STATEMACH_WORDB_HOPINCR) >> STATEMACH_WORDB_HOPINCR_Pos);
}
10046ac2:	0018      	movs	r0, r3
10046ac4:	46bd      	mov	sp, r7
10046ac6:	b002      	add	sp, #8
10046ac8:	bd80      	pop	{r7, pc}
10046aca:	46c0      	nop			@ (mov r8, r8)
10046acc:	200000dc 	.word	0x200000dc

10046ad0 <LL_RADIO_SetUsedChannelFlags_15_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_15_0(uint8_t stateMachineNo, uint32_t value)
{
10046ad0:	b580      	push	{r7, lr}
10046ad2:	b082      	sub	sp, #8
10046ad4:	af00      	add	r7, sp, #0
10046ad6:	0002      	movs	r2, r0
10046ad8:	6039      	str	r1, [r7, #0]
10046ada:	1dfb      	adds	r3, r7, #7
10046adc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_USEDCHANNELFLAGS_15_0, value);
10046ade:	1dfb      	adds	r3, r7, #7
10046ae0:	781b      	ldrb	r3, [r3, #0]
10046ae2:	225c      	movs	r2, #92	@ 0x5c
10046ae4:	4353      	muls	r3, r2
10046ae6:	4a0a      	ldr	r2, [pc, #40]	@ (10046b10 <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
10046ae8:	4694      	mov	ip, r2
10046aea:	4463      	add	r3, ip
10046aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046aee:	041b      	lsls	r3, r3, #16
10046af0:	0c19      	lsrs	r1, r3, #16
10046af2:	683b      	ldr	r3, [r7, #0]
10046af4:	041a      	lsls	r2, r3, #16
10046af6:	1dfb      	adds	r3, r7, #7
10046af8:	781b      	ldrb	r3, [r3, #0]
10046afa:	205c      	movs	r0, #92	@ 0x5c
10046afc:	4343      	muls	r3, r0
10046afe:	4804      	ldr	r0, [pc, #16]	@ (10046b10 <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
10046b00:	4684      	mov	ip, r0
10046b02:	4463      	add	r3, ip
10046b04:	430a      	orrs	r2, r1
10046b06:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10046b08:	46c0      	nop			@ (mov r8, r8)
10046b0a:	46bd      	mov	sp, r7
10046b0c:	b002      	add	sp, #8
10046b0e:	bd80      	pop	{r7, pc}
10046b10:	200000dc 	.word	0x200000dc

10046b14 <LL_RADIO_GetUsedChannelFlags_15_0>:
  * @rmtoll WORDB          USEDCHANNELFLAGS_15_0       LL_RADIO_GetUsedChannelFlags_15_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_15_0(uint8_t stateMachineNo)
{
10046b14:	b580      	push	{r7, lr}
10046b16:	b082      	sub	sp, #8
10046b18:	af00      	add	r7, sp, #0
10046b1a:	0002      	movs	r2, r0
10046b1c:	1dfb      	adds	r3, r7, #7
10046b1e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10046b20:	1dfb      	adds	r3, r7, #7
10046b22:	781b      	ldrb	r3, [r3, #0]
10046b24:	225c      	movs	r2, #92	@ 0x5c
10046b26:	4353      	muls	r3, r2
10046b28:	4a05      	ldr	r2, [pc, #20]	@ (10046b40 <LL_RADIO_GetUsedChannelFlags_15_0+0x2c>)
10046b2a:	4694      	mov	ip, r2
10046b2c:	4463      	add	r3, ip
10046b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046b30:	0c1b      	lsrs	r3, r3, #16
10046b32:	041b      	lsls	r3, r3, #16
10046b34:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORDB_USEDCHANNELFLAGS_15_0) >> STATEMACH_WORDB_USEDCHANNELFLAGS_15_0_Pos);
}
10046b36:	0018      	movs	r0, r3
10046b38:	46bd      	mov	sp, r7
10046b3a:	b002      	add	sp, #8
10046b3c:	bd80      	pop	{r7, pc}
10046b3e:	46c0      	nop			@ (mov r8, r8)
10046b40:	200000dc 	.word	0x200000dc

10046b44 <LL_RADIO_SetUsedChannelFlags_36_16>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_36_16(uint8_t stateMachineNo, uint32_t value)
{
10046b44:	b580      	push	{r7, lr}
10046b46:	b082      	sub	sp, #8
10046b48:	af00      	add	r7, sp, #0
10046b4a:	0002      	movs	r2, r0
10046b4c:	6039      	str	r1, [r7, #0]
10046b4e:	1dfb      	adds	r3, r7, #7
10046b50:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDC, STATEMACH_WORDC_USEDCHANNELFLAGS_36_16, value);
10046b52:	1dfb      	adds	r3, r7, #7
10046b54:	781b      	ldrb	r3, [r3, #0]
10046b56:	225c      	movs	r2, #92	@ 0x5c
10046b58:	4353      	muls	r3, r2
10046b5a:	4a0b      	ldr	r2, [pc, #44]	@ (10046b88 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10046b5c:	4694      	mov	ip, r2
10046b5e:	4463      	add	r3, ip
10046b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046b62:	0d9b      	lsrs	r3, r3, #22
10046b64:	0599      	lsls	r1, r3, #22
10046b66:	683b      	ldr	r3, [r7, #0]
10046b68:	029b      	lsls	r3, r3, #10
10046b6a:	0a9a      	lsrs	r2, r3, #10
10046b6c:	1dfb      	adds	r3, r7, #7
10046b6e:	781b      	ldrb	r3, [r3, #0]
10046b70:	205c      	movs	r0, #92	@ 0x5c
10046b72:	4343      	muls	r3, r0
10046b74:	4804      	ldr	r0, [pc, #16]	@ (10046b88 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10046b76:	4684      	mov	ip, r0
10046b78:	4463      	add	r3, ip
10046b7a:	430a      	orrs	r2, r1
10046b7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046b7e:	46c0      	nop			@ (mov r8, r8)
10046b80:	46bd      	mov	sp, r7
10046b82:	b002      	add	sp, #8
10046b84:	bd80      	pop	{r7, pc}
10046b86:	46c0      	nop			@ (mov r8, r8)
10046b88:	200000dc 	.word	0x200000dc

10046b8c <LL_RADIO_GetUsedChannelFlags_36_16>:
  * @rmtoll WORDC          USEDCHANNELFLAGS_36_16       LL_RADIO_GetUsedChannelFlags_36_16
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_36_16(uint8_t stateMachineNo)
{
10046b8c:	b580      	push	{r7, lr}
10046b8e:	b082      	sub	sp, #8
10046b90:	af00      	add	r7, sp, #0
10046b92:	0002      	movs	r2, r0
10046b94:	1dfb      	adds	r3, r7, #7
10046b96:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDC,
10046b98:	1dfb      	adds	r3, r7, #7
10046b9a:	781b      	ldrb	r3, [r3, #0]
10046b9c:	225c      	movs	r2, #92	@ 0x5c
10046b9e:	4353      	muls	r3, r2
10046ba0:	4a04      	ldr	r2, [pc, #16]	@ (10046bb4 <LL_RADIO_GetUsedChannelFlags_36_16+0x28>)
10046ba2:	4694      	mov	ip, r2
10046ba4:	4463      	add	r3, ip
10046ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046ba8:	029b      	lsls	r3, r3, #10
10046baa:	0a9b      	lsrs	r3, r3, #10
                             STATEMACH_WORDC_USEDCHANNELFLAGS_36_16) >> STATEMACH_WORDC_USEDCHANNELFLAGS_36_16_Pos);
}
10046bac:	0018      	movs	r0, r3
10046bae:	46bd      	mov	sp, r7
10046bb0:	b002      	add	sp, #8
10046bb2:	bd80      	pop	{r7, pc}
10046bb4:	200000dc 	.word	0x200000dc

10046bb8 <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10046bb8:	b580      	push	{r7, lr}
10046bba:	b082      	sub	sp, #8
10046bbc:	af00      	add	r7, sp, #0
10046bbe:	6078      	str	r0, [r7, #4]
10046bc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
10046bc2:	687b      	ldr	r3, [r7, #4]
10046bc4:	681b      	ldr	r3, [r3, #0]
10046bc6:	687b      	ldr	r3, [r7, #4]
10046bc8:	683a      	ldr	r2, [r7, #0]
10046bca:	601a      	str	r2, [r3, #0]
}
10046bcc:	46c0      	nop			@ (mov r8, r8)
10046bce:	46bd      	mov	sp, r7
10046bd0:	b002      	add	sp, #8
10046bd2:	bd80      	pop	{r7, pc}

10046bd4 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10046bd4:	b580      	push	{r7, lr}
10046bd6:	b082      	sub	sp, #8
10046bd8:	af00      	add	r7, sp, #0
10046bda:	6078      	str	r0, [r7, #4]
10046bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
10046bde:	687b      	ldr	r3, [r7, #4]
10046be0:	685b      	ldr	r3, [r3, #4]
10046be2:	2201      	movs	r2, #1
10046be4:	4393      	bics	r3, r2
10046be6:	001a      	movs	r2, r3
10046be8:	683b      	ldr	r3, [r7, #0]
10046bea:	2101      	movs	r1, #1
10046bec:	400b      	ands	r3, r1
10046bee:	431a      	orrs	r2, r3
10046bf0:	687b      	ldr	r3, [r7, #4]
10046bf2:	605a      	str	r2, [r3, #4]
}
10046bf4:	46c0      	nop			@ (mov r8, r8)
10046bf6:	46bd      	mov	sp, r7
10046bf8:	b002      	add	sp, #8
10046bfa:	bd80      	pop	{r7, pc}

10046bfc <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10046bfc:	b580      	push	{r7, lr}
10046bfe:	b082      	sub	sp, #8
10046c00:	af00      	add	r7, sp, #0
10046c02:	6078      	str	r0, [r7, #4]
10046c04:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
10046c06:	687b      	ldr	r3, [r7, #4]
10046c08:	685b      	ldr	r3, [r3, #4]
10046c0a:	2204      	movs	r2, #4
10046c0c:	4393      	bics	r3, r2
10046c0e:	001a      	movs	r2, r3
10046c10:	683b      	ldr	r3, [r7, #0]
10046c12:	009b      	lsls	r3, r3, #2
10046c14:	2104      	movs	r1, #4
10046c16:	400b      	ands	r3, r1
10046c18:	431a      	orrs	r2, r3
10046c1a:	687b      	ldr	r3, [r7, #4]
10046c1c:	605a      	str	r2, [r3, #4]
}
10046c1e:	46c0      	nop			@ (mov r8, r8)
10046c20:	46bd      	mov	sp, r7
10046c22:	b002      	add	sp, #8
10046c24:	bd80      	pop	{r7, pc}

10046c26 <LL_RADIO_SetCTEAndSamplingEnable>:
  * @rmtoll WORD1          CTEANDSAMPLINGENABLE        LL_RADIO_SetCTEAndSamplingEnable
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEAndSamplingEnable(TXRXPACK_TypeDef *p, uint32_t value)
{
10046c26:	b580      	push	{r7, lr}
10046c28:	b082      	sub	sp, #8
10046c2a:	af00      	add	r7, sp, #0
10046c2c:	6078      	str	r0, [r7, #4]
10046c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CTEANDSAMPLINGENABLE, value);
10046c30:	687b      	ldr	r3, [r7, #4]
10046c32:	685b      	ldr	r3, [r3, #4]
10046c34:	2208      	movs	r2, #8
10046c36:	4393      	bics	r3, r2
10046c38:	001a      	movs	r2, r3
10046c3a:	683b      	ldr	r3, [r7, #0]
10046c3c:	00db      	lsls	r3, r3, #3
10046c3e:	2108      	movs	r1, #8
10046c40:	400b      	ands	r3, r1
10046c42:	431a      	orrs	r2, r3
10046c44:	687b      	ldr	r3, [r7, #4]
10046c46:	605a      	str	r2, [r3, #4]
}
10046c48:	46c0      	nop			@ (mov r8, r8)
10046c4a:	46bd      	mov	sp, r7
10046c4c:	b002      	add	sp, #8
10046c4e:	bd80      	pop	{r7, pc}

10046c50 <LL_RADIO_SetCRCInitializationSelector>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationSelector(TXRXPACK_TypeDef *p, uint32_t value)
{
10046c50:	b580      	push	{r7, lr}
10046c52:	b082      	sub	sp, #8
10046c54:	af00      	add	r7, sp, #0
10046c56:	6078      	str	r0, [r7, #4]
10046c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CRCINITSEL, value);
10046c5a:	687b      	ldr	r3, [r7, #4]
10046c5c:	685b      	ldr	r3, [r3, #4]
10046c5e:	2210      	movs	r2, #16
10046c60:	4393      	bics	r3, r2
10046c62:	001a      	movs	r2, r3
10046c64:	683b      	ldr	r3, [r7, #0]
10046c66:	011b      	lsls	r3, r3, #4
10046c68:	2110      	movs	r1, #16
10046c6a:	400b      	ands	r3, r1
10046c6c:	431a      	orrs	r2, r3
10046c6e:	687b      	ldr	r3, [r7, #4]
10046c70:	605a      	str	r2, [r3, #4]
}
10046c72:	46c0      	nop			@ (mov r8, r8)
10046c74:	46bd      	mov	sp, r7
10046c76:	b002      	add	sp, #8
10046c78:	bd80      	pop	{r7, pc}

10046c7a <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
10046c7a:	b580      	push	{r7, lr}
10046c7c:	b082      	sub	sp, #8
10046c7e:	af00      	add	r7, sp, #0
10046c80:	6078      	str	r0, [r7, #4]
10046c82:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10046c84:	687b      	ldr	r3, [r7, #4]
10046c86:	685b      	ldr	r3, [r3, #4]
10046c88:	2220      	movs	r2, #32
10046c8a:	4393      	bics	r3, r2
10046c8c:	001a      	movs	r2, r3
10046c8e:	683b      	ldr	r3, [r7, #0]
10046c90:	015b      	lsls	r3, r3, #5
10046c92:	2120      	movs	r1, #32
10046c94:	400b      	ands	r3, r1
10046c96:	431a      	orrs	r2, r3
10046c98:	687b      	ldr	r3, [r7, #4]
10046c9a:	605a      	str	r2, [r3, #4]
}
10046c9c:	46c0      	nop			@ (mov r8, r8)
10046c9e:	46bd      	mov	sp, r7
10046ca0:	b002      	add	sp, #8
10046ca2:	bd80      	pop	{r7, pc}

10046ca4 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>:
  * @rmtoll WORD1          SN_EN            LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable(TXRXPACK_TypeDef *p)
{
10046ca4:	b580      	push	{r7, lr}
10046ca6:	b082      	sub	sp, #8
10046ca8:	af00      	add	r7, sp, #0
10046caa:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_SN_EN);
10046cac:	687b      	ldr	r3, [r7, #4]
10046cae:	685b      	ldr	r3, [r3, #4]
10046cb0:	2240      	movs	r2, #64	@ 0x40
10046cb2:	431a      	orrs	r2, r3
10046cb4:	687b      	ldr	r3, [r7, #4]
10046cb6:	605a      	str	r2, [r3, #4]
}
10046cb8:	46c0      	nop			@ (mov r8, r8)
10046cba:	46bd      	mov	sp, r7
10046cbc:	b002      	add	sp, #8
10046cbe:	bd80      	pop	{r7, pc}

10046cc0 <LL_RADIO_IncrementerChannel_Enable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Enable(TXRXPACK_TypeDef *p)
{
10046cc0:	b580      	push	{r7, lr}
10046cc2:	b082      	sub	sp, #8
10046cc4:	af00      	add	r7, sp, #0
10046cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
10046cc8:	687b      	ldr	r3, [r7, #4]
10046cca:	685b      	ldr	r3, [r3, #4]
10046ccc:	2280      	movs	r2, #128	@ 0x80
10046cce:	431a      	orrs	r2, r3
10046cd0:	687b      	ldr	r3, [r7, #4]
10046cd2:	605a      	str	r2, [r3, #4]
}
10046cd4:	46c0      	nop			@ (mov r8, r8)
10046cd6:	46bd      	mov	sp, r7
10046cd8:	b002      	add	sp, #8
10046cda:	bd80      	pop	{r7, pc}

10046cdc <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
10046cdc:	b580      	push	{r7, lr}
10046cde:	b082      	sub	sp, #8
10046ce0:	af00      	add	r7, sp, #0
10046ce2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
10046ce4:	687b      	ldr	r3, [r7, #4]
10046ce6:	685b      	ldr	r3, [r3, #4]
10046ce8:	2280      	movs	r2, #128	@ 0x80
10046cea:	4393      	bics	r3, r2
10046cec:	001a      	movs	r2, r3
10046cee:	687b      	ldr	r3, [r7, #4]
10046cf0:	605a      	str	r2, [r3, #4]
}
10046cf2:	46c0      	nop			@ (mov r8, r8)
10046cf4:	46bd      	mov	sp, r7
10046cf6:	b002      	add	sp, #8
10046cf8:	bd80      	pop	{r7, pc}
	...

10046cfc <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
10046cfc:	b580      	push	{r7, lr}
10046cfe:	b082      	sub	sp, #8
10046d00:	af00      	add	r7, sp, #0
10046d02:	6078      	str	r0, [r7, #4]
10046d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
10046d06:	687b      	ldr	r3, [r7, #4]
10046d08:	685b      	ldr	r3, [r3, #4]
10046d0a:	4a07      	ldr	r2, [pc, #28]	@ (10046d28 <LL_RADIO_SetNextTxMode+0x2c>)
10046d0c:	401a      	ands	r2, r3
10046d0e:	683b      	ldr	r3, [r7, #0]
10046d10:	0219      	lsls	r1, r3, #8
10046d12:	2380      	movs	r3, #128	@ 0x80
10046d14:	005b      	lsls	r3, r3, #1
10046d16:	400b      	ands	r3, r1
10046d18:	431a      	orrs	r2, r3
10046d1a:	687b      	ldr	r3, [r7, #4]
10046d1c:	605a      	str	r2, [r3, #4]
}
10046d1e:	46c0      	nop			@ (mov r8, r8)
10046d20:	46bd      	mov	sp, r7
10046d22:	b002      	add	sp, #8
10046d24:	bd80      	pop	{r7, pc}
10046d26:	46c0      	nop			@ (mov r8, r8)
10046d28:	fffffeff 	.word	0xfffffeff

10046d2c <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10046d2c:	b580      	push	{r7, lr}
10046d2e:	b082      	sub	sp, #8
10046d30:	af00      	add	r7, sp, #0
10046d32:	6078      	str	r0, [r7, #4]
10046d34:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
10046d36:	687b      	ldr	r3, [r7, #4]
10046d38:	685b      	ldr	r3, [r3, #4]
10046d3a:	4a07      	ldr	r2, [pc, #28]	@ (10046d58 <LL_RADIO_SetAllTableDataReady+0x2c>)
10046d3c:	401a      	ands	r2, r3
10046d3e:	683b      	ldr	r3, [r7, #0]
10046d40:	0259      	lsls	r1, r3, #9
10046d42:	2380      	movs	r3, #128	@ 0x80
10046d44:	009b      	lsls	r3, r3, #2
10046d46:	400b      	ands	r3, r1
10046d48:	431a      	orrs	r2, r3
10046d4a:	687b      	ldr	r3, [r7, #4]
10046d4c:	605a      	str	r2, [r3, #4]
}
10046d4e:	46c0      	nop			@ (mov r8, r8)
10046d50:	46bd      	mov	sp, r7
10046d52:	b002      	add	sp, #8
10046d54:	bd80      	pop	{r7, pc}
10046d56:	46c0      	nop			@ (mov r8, r8)
10046d58:	fffffdff 	.word	0xfffffdff

10046d5c <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10046d5c:	b580      	push	{r7, lr}
10046d5e:	b082      	sub	sp, #8
10046d60:	af00      	add	r7, sp, #0
10046d62:	6078      	str	r0, [r7, #4]
10046d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
10046d66:	687b      	ldr	r3, [r7, #4]
10046d68:	685b      	ldr	r3, [r3, #4]
10046d6a:	4a07      	ldr	r2, [pc, #28]	@ (10046d88 <LL_RADIO_SetTransmissionDataReady+0x2c>)
10046d6c:	401a      	ands	r2, r3
10046d6e:	683b      	ldr	r3, [r7, #0]
10046d70:	0299      	lsls	r1, r3, #10
10046d72:	2380      	movs	r3, #128	@ 0x80
10046d74:	00db      	lsls	r3, r3, #3
10046d76:	400b      	ands	r3, r1
10046d78:	431a      	orrs	r2, r3
10046d7a:	687b      	ldr	r3, [r7, #4]
10046d7c:	605a      	str	r2, [r3, #4]
}
10046d7e:	46c0      	nop			@ (mov r8, r8)
10046d80:	46bd      	mov	sp, r7
10046d82:	b002      	add	sp, #8
10046d84:	bd80      	pop	{r7, pc}
10046d86:	46c0      	nop			@ (mov r8, r8)
10046d88:	fffffbff 	.word	0xfffffbff

10046d8c <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10046d8c:	b580      	push	{r7, lr}
10046d8e:	b082      	sub	sp, #8
10046d90:	af00      	add	r7, sp, #0
10046d92:	6078      	str	r0, [r7, #4]
10046d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
10046d96:	687b      	ldr	r3, [r7, #4]
10046d98:	689b      	ldr	r3, [r3, #8]
10046d9a:	687b      	ldr	r3, [r7, #4]
10046d9c:	683a      	ldr	r2, [r7, #0]
10046d9e:	609a      	str	r2, [r3, #8]
}
10046da0:	46c0      	nop			@ (mov r8, r8)
10046da2:	46bd      	mov	sp, r7
10046da4:	b002      	add	sp, #8
10046da6:	bd80      	pop	{r7, pc}

10046da8 <LL_RADIO_GetDataPointer>:
  * @rmtoll WORD2          DATAPTR       LL_RADIO_GetDataPointer
  * @param  p RADIO Instance
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetDataPointer(TXRXPACK_TypeDef *p)
{
10046da8:	b580      	push	{r7, lr}
10046daa:	b082      	sub	sp, #8
10046dac:	af00      	add	r7, sp, #0
10046dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR) >> TXRXPACK_WORD2_DATAPTR_Pos);
10046db0:	687b      	ldr	r3, [r7, #4]
10046db2:	689b      	ldr	r3, [r3, #8]
}
10046db4:	0018      	movs	r0, r3
10046db6:	46bd      	mov	sp, r7
10046db8:	b002      	add	sp, #8
10046dba:	bd80      	pop	{r7, pc}

10046dbc <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
10046dbc:	b580      	push	{r7, lr}
10046dbe:	b082      	sub	sp, #8
10046dc0:	af00      	add	r7, sp, #0
10046dc2:	6078      	str	r0, [r7, #4]
10046dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
10046dc6:	687b      	ldr	r3, [r7, #4]
10046dc8:	68db      	ldr	r3, [r3, #12]
10046dca:	0d1b      	lsrs	r3, r3, #20
10046dcc:	051a      	lsls	r2, r3, #20
10046dce:	683b      	ldr	r3, [r7, #0]
10046dd0:	031b      	lsls	r3, r3, #12
10046dd2:	0b1b      	lsrs	r3, r3, #12
10046dd4:	431a      	orrs	r2, r3
10046dd6:	687b      	ldr	r3, [r7, #4]
10046dd8:	60da      	str	r2, [r3, #12]
}
10046dda:	46c0      	nop			@ (mov r8, r8)
10046ddc:	46bd      	mov	sp, r7
10046dde:	b002      	add	sp, #8
10046de0:	bd80      	pop	{r7, pc}

10046de2 <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
10046de2:	b580      	push	{r7, lr}
10046de4:	b082      	sub	sp, #8
10046de6:	af00      	add	r7, sp, #0
10046de8:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
10046dea:	687b      	ldr	r3, [r7, #4]
10046dec:	68db      	ldr	r3, [r3, #12]
10046dee:	2280      	movs	r2, #128	@ 0x80
10046df0:	0352      	lsls	r2, r2, #13
10046df2:	431a      	orrs	r2, r3
10046df4:	687b      	ldr	r3, [r7, #4]
10046df6:	60da      	str	r2, [r3, #12]
}
10046df8:	46c0      	nop			@ (mov r8, r8)
10046dfa:	46bd      	mov	sp, r7
10046dfc:	b002      	add	sp, #8
10046dfe:	bd80      	pop	{r7, pc}

10046e00 <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
10046e00:	b580      	push	{r7, lr}
10046e02:	b082      	sub	sp, #8
10046e04:	af00      	add	r7, sp, #0
10046e06:	6078      	str	r0, [r7, #4]
10046e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
10046e0a:	687b      	ldr	r3, [r7, #4]
10046e0c:	68db      	ldr	r3, [r3, #12]
10046e0e:	4a07      	ldr	r2, [pc, #28]	@ (10046e2c <LL_RADIO_SetTrigRcv+0x2c>)
10046e10:	401a      	ands	r2, r3
10046e12:	683b      	ldr	r3, [r7, #0]
10046e14:	0599      	lsls	r1, r3, #22
10046e16:	2380      	movs	r3, #128	@ 0x80
10046e18:	03db      	lsls	r3, r3, #15
10046e1a:	400b      	ands	r3, r1
10046e1c:	431a      	orrs	r2, r3
10046e1e:	687b      	ldr	r3, [r7, #4]
10046e20:	60da      	str	r2, [r3, #12]
}
10046e22:	46c0      	nop			@ (mov r8, r8)
10046e24:	46bd      	mov	sp, r7
10046e26:	b002      	add	sp, #8
10046e28:	bd80      	pop	{r7, pc}
10046e2a:	46c0      	nop			@ (mov r8, r8)
10046e2c:	ffbfffff 	.word	0xffbfffff

10046e30 <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
10046e30:	b580      	push	{r7, lr}
10046e32:	b082      	sub	sp, #8
10046e34:	af00      	add	r7, sp, #0
10046e36:	6078      	str	r0, [r7, #4]
10046e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
10046e3a:	687b      	ldr	r3, [r7, #4]
10046e3c:	68db      	ldr	r3, [r3, #12]
10046e3e:	4a07      	ldr	r2, [pc, #28]	@ (10046e5c <LL_RADIO_SetTrigDone+0x2c>)
10046e40:	401a      	ands	r2, r3
10046e42:	683b      	ldr	r3, [r7, #0]
10046e44:	05d9      	lsls	r1, r3, #23
10046e46:	2380      	movs	r3, #128	@ 0x80
10046e48:	041b      	lsls	r3, r3, #16
10046e4a:	400b      	ands	r3, r1
10046e4c:	431a      	orrs	r2, r3
10046e4e:	687b      	ldr	r3, [r7, #4]
10046e50:	60da      	str	r2, [r3, #12]
}
10046e52:	46c0      	nop			@ (mov r8, r8)
10046e54:	46bd      	mov	sp, r7
10046e56:	b002      	add	sp, #8
10046e58:	bd80      	pop	{r7, pc}
10046e5a:	46c0      	nop			@ (mov r8, r8)
10046e5c:	ff7fffff 	.word	0xff7fffff

10046e60 <LL_RADIO_SetIntTxOk>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetIntTxOk(TXRXPACK_TypeDef *p, uint32_t value)
{
10046e60:	b580      	push	{r7, lr}
10046e62:	b082      	sub	sp, #8
10046e64:	af00      	add	r7, sp, #0
10046e66:	6078      	str	r0, [r7, #4]
10046e68:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTTXOK, value);
10046e6a:	687b      	ldr	r3, [r7, #4]
10046e6c:	68db      	ldr	r3, [r3, #12]
10046e6e:	4a07      	ldr	r2, [pc, #28]	@ (10046e8c <LL_RADIO_SetIntTxOk+0x2c>)
10046e70:	401a      	ands	r2, r3
10046e72:	683b      	ldr	r3, [r7, #0]
10046e74:	0619      	lsls	r1, r3, #24
10046e76:	2380      	movs	r3, #128	@ 0x80
10046e78:	045b      	lsls	r3, r3, #17
10046e7a:	400b      	ands	r3, r1
10046e7c:	431a      	orrs	r2, r3
10046e7e:	687b      	ldr	r3, [r7, #4]
10046e80:	60da      	str	r2, [r3, #12]
}
10046e82:	46c0      	nop			@ (mov r8, r8)
10046e84:	46bd      	mov	sp, r7
10046e86:	b002      	add	sp, #8
10046e88:	bd80      	pop	{r7, pc}
10046e8a:	46c0      	nop			@ (mov r8, r8)
10046e8c:	feffffff 	.word	0xfeffffff

10046e90 <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
10046e90:	b580      	push	{r7, lr}
10046e92:	b082      	sub	sp, #8
10046e94:	af00      	add	r7, sp, #0
10046e96:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
10046e98:	687b      	ldr	r3, [r7, #4]
10046e9a:	68db      	ldr	r3, [r3, #12]
10046e9c:	2280      	movs	r2, #128	@ 0x80
10046e9e:	0492      	lsls	r2, r2, #18
10046ea0:	431a      	orrs	r2, r3
10046ea2:	687b      	ldr	r3, [r7, #4]
10046ea4:	60da      	str	r2, [r3, #12]
}
10046ea6:	46c0      	nop			@ (mov r8, r8)
10046ea8:	46bd      	mov	sp, r7
10046eaa:	b002      	add	sp, #8
10046eac:	bd80      	pop	{r7, pc}

10046eae <LL_RADIO_IntRcvTimeout_Enable>:
  * @rmtoll WORD3          INTRCVTIMEOUT            LL_RADIO_IntRcvTimeout_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvTimeout_Enable(TXRXPACK_TypeDef *p)
{
10046eae:	b580      	push	{r7, lr}
10046eb0:	b082      	sub	sp, #8
10046eb2:	af00      	add	r7, sp, #0
10046eb4:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVTIMEOUT);
10046eb6:	687b      	ldr	r3, [r7, #4]
10046eb8:	68db      	ldr	r3, [r3, #12]
10046eba:	2280      	movs	r2, #128	@ 0x80
10046ebc:	04d2      	lsls	r2, r2, #19
10046ebe:	431a      	orrs	r2, r3
10046ec0:	687b      	ldr	r3, [r7, #4]
10046ec2:	60da      	str	r2, [r3, #12]
}
10046ec4:	46c0      	nop			@ (mov r8, r8)
10046ec6:	46bd      	mov	sp, r7
10046ec8:	b002      	add	sp, #8
10046eca:	bd80      	pop	{r7, pc}

10046ecc <LL_RADIO_IntRcvCRCErr_Enable>:
  * @rmtoll WORD3          INTRCVCRCERR            LL_RADIO_IntRcvCRCErr_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvCRCErr_Enable(TXRXPACK_TypeDef *p)
{
10046ecc:	b580      	push	{r7, lr}
10046ece:	b082      	sub	sp, #8
10046ed0:	af00      	add	r7, sp, #0
10046ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVCRCERR);
10046ed4:	687b      	ldr	r3, [r7, #4]
10046ed6:	68db      	ldr	r3, [r3, #12]
10046ed8:	2280      	movs	r2, #128	@ 0x80
10046eda:	05d2      	lsls	r2, r2, #23
10046edc:	431a      	orrs	r2, r3
10046ede:	687b      	ldr	r3, [r7, #4]
10046ee0:	60da      	str	r2, [r3, #12]
}
10046ee2:	46c0      	nop			@ (mov r8, r8)
10046ee4:	46bd      	mov	sp, r7
10046ee6:	b002      	add	sp, #8
10046ee8:	bd80      	pop	{r7, pc}

10046eea <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
10046eea:	b580      	push	{r7, lr}
10046eec:	b082      	sub	sp, #8
10046eee:	af00      	add	r7, sp, #0
10046ef0:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
10046ef2:	687b      	ldr	r3, [r7, #4]
10046ef4:	68db      	ldr	r3, [r3, #12]
10046ef6:	2280      	movs	r2, #128	@ 0x80
10046ef8:	0612      	lsls	r2, r2, #24
10046efa:	431a      	orrs	r2, r3
10046efc:	687b      	ldr	r3, [r7, #4]
10046efe:	60da      	str	r2, [r3, #12]
}
10046f00:	46c0      	nop			@ (mov r8, r8)
10046f02:	46bd      	mov	sp, r7
10046f04:	b002      	add	sp, #8
10046f06:	bd80      	pop	{r7, pc}

10046f08 <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
10046f08:	b580      	push	{r7, lr}
10046f0a:	b082      	sub	sp, #8
10046f0c:	af00      	add	r7, sp, #0
10046f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
10046f10:	23c0      	movs	r3, #192	@ 0xc0
10046f12:	05db      	lsls	r3, r3, #23
10046f14:	685b      	ldr	r3, [r3, #4]
10046f16:	4a07      	ldr	r2, [pc, #28]	@ (10046f34 <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
10046f18:	4013      	ands	r3, r2
10046f1a:	0019      	movs	r1, r3
10046f1c:	687b      	ldr	r3, [r7, #4]
10046f1e:	4a06      	ldr	r2, [pc, #24]	@ (10046f38 <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
10046f20:	401a      	ands	r2, r3
10046f22:	23c0      	movs	r3, #192	@ 0xc0
10046f24:	05db      	lsls	r3, r3, #23
10046f26:	430a      	orrs	r2, r1
10046f28:	605a      	str	r2, [r3, #4]
}
10046f2a:	46c0      	nop			@ (mov r8, r8)
10046f2c:	46bd      	mov	sp, r7
10046f2e:	b002      	add	sp, #8
10046f30:	bd80      	pop	{r7, pc}
10046f32:	46c0      	nop			@ (mov r8, r8)
10046f34:	0002004f 	.word	0x0002004f
10046f38:	fffdffb0 	.word	0xfffdffb0

10046f3c <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
10046f3c:	b580      	push	{r7, lr}
10046f3e:	b082      	sub	sp, #8
10046f40:	af00      	add	r7, sp, #0
10046f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
10046f44:	23c0      	movs	r3, #192	@ 0xc0
10046f46:	05db      	lsls	r3, r3, #23
10046f48:	699b      	ldr	r3, [r3, #24]
10046f4a:	2208      	movs	r2, #8
10046f4c:	4393      	bics	r3, r2
10046f4e:	0019      	movs	r1, r3
10046f50:	687b      	ldr	r3, [r7, #4]
10046f52:	00db      	lsls	r3, r3, #3
10046f54:	2208      	movs	r2, #8
10046f56:	401a      	ands	r2, r3
10046f58:	23c0      	movs	r3, #192	@ 0xc0
10046f5a:	05db      	lsls	r3, r3, #23
10046f5c:	430a      	orrs	r2, r1
10046f5e:	619a      	str	r2, [r3, #24]
}
10046f60:	46c0      	nop			@ (mov r8, r8)
10046f62:	46bd      	mov	sp, r7
10046f64:	b002      	add	sp, #8
10046f66:	bd80      	pop	{r7, pc}

10046f68 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
10046f68:	b580      	push	{r7, lr}
10046f6a:	b088      	sub	sp, #32
10046f6c:	af00      	add	r7, sp, #0
10046f6e:	6078      	str	r0, [r7, #4]
10046f70:	0008      	movs	r0, r1
10046f72:	0011      	movs	r1, r2
10046f74:	1cfb      	adds	r3, r7, #3
10046f76:	1c02      	adds	r2, r0, #0
10046f78:	701a      	strb	r2, [r3, #0]
10046f7a:	1cbb      	adds	r3, r7, #2
10046f7c:	1c0a      	adds	r2, r1, #0
10046f7e:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
10046f80:	687b      	ldr	r3, [r7, #4]
10046f82:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
10046f84:	1cfb      	adds	r3, r7, #3
10046f86:	781b      	ldrb	r3, [r3, #0]
10046f88:	2b01      	cmp	r3, #1
10046f8a:	d105      	bne.n	10046f98 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 6;
10046f8c:	2306      	movs	r3, #6
10046f8e:	60bb      	str	r3, [r7, #8]
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
10046f90:	68bb      	ldr	r3, [r7, #8]
10046f92:	3302      	adds	r3, #2
10046f94:	61fb      	str	r3, [r7, #28]
10046f96:	e015      	b.n	10046fc4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
10046f98:	1cfb      	adds	r3, r7, #3
10046f9a:	781b      	ldrb	r3, [r3, #0]
10046f9c:	2b00      	cmp	r3, #0
10046f9e:	d105      	bne.n	10046fac <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 4;
10046fa0:	2304      	movs	r3, #4
10046fa2:	60fb      	str	r3, [r7, #12]
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
10046fa4:	68fb      	ldr	r3, [r7, #12]
10046fa6:	3302      	adds	r3, #2
10046fa8:	61fb      	str	r3, [r7, #28]
10046faa:	e00b      	b.n	10046fc4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
10046fac:	1cfb      	adds	r3, r7, #3
10046fae:	781b      	ldrb	r3, [r3, #0]
10046fb0:	2b02      	cmp	r3, #2
10046fb2:	d105      	bne.n	10046fc0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
#else
        const int32_t Adjust_Value = 2;
10046fb4:	2302      	movs	r3, #2
10046fb6:	613b      	str	r3, [r7, #16]
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
10046fb8:	693b      	ldr	r3, [r7, #16]
10046fba:	3304      	adds	r3, #4
10046fbc:	61fb      	str	r3, [r7, #28]
10046fbe:	e001      	b.n	10046fc4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
10046fc0:	2300      	movs	r3, #0
10046fc2:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
10046fc4:	1cfb      	adds	r3, r7, #3
10046fc6:	781b      	ldrb	r3, [r3, #0]
10046fc8:	2b01      	cmp	r3, #1
10046fca:	d003      	beq.n	10046fd4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
10046fcc:	1cfb      	adds	r3, r7, #3
10046fce:	781b      	ldrb	r3, [r3, #0]
10046fd0:	2b02      	cmp	r3, #2
10046fd2:	d109      	bne.n	10046fe8 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
10046fd4:	1cbb      	adds	r3, r7, #2
10046fd6:	781b      	ldrb	r3, [r3, #0]
10046fd8:	2b01      	cmp	r3, #1
10046fda:	d102      	bne.n	10046fe2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
10046fdc:	239b      	movs	r3, #155	@ 0x9b
10046fde:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
10046fe0:	e013      	b.n	1004700a <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
10046fe2:	233d      	movs	r3, #61	@ 0x3d
10046fe4:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
10046fe6:	e010      	b.n	1004700a <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
10046fe8:	1cfb      	adds	r3, r7, #3
10046fea:	781b      	ldrb	r3, [r3, #0]
10046fec:	2b00      	cmp	r3, #0
10046fee:	d003      	beq.n	10046ff8 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
10046ff0:	1cfb      	adds	r3, r7, #3
10046ff2:	781b      	ldrb	r3, [r3, #0]
10046ff4:	2b03      	cmp	r3, #3
10046ff6:	d108      	bne.n	1004700a <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
10046ff8:	1cbb      	adds	r3, r7, #2
10046ffa:	781b      	ldrb	r3, [r3, #0]
10046ffc:	2b01      	cmp	r3, #1
10046ffe:	d102      	bne.n	10047006 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
10047000:	2399      	movs	r3, #153	@ 0x99
10047002:	61bb      	str	r3, [r7, #24]
10047004:	e001      	b.n	1004700a <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
10047006:	233b      	movs	r3, #59	@ 0x3b
10047008:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
1004700a:	69ba      	ldr	r2, [r7, #24]
1004700c:	69fb      	ldr	r3, [r7, #28]
1004700e:	18d3      	adds	r3, r2, r3
10047010:	697a      	ldr	r2, [r7, #20]
10047012:	1ad3      	subs	r3, r2, r3
10047014:	617b      	str	r3, [r7, #20]

    return Timeout;
10047016:	697b      	ldr	r3, [r7, #20]
}
10047018:	0018      	movs	r0, r3
1004701a:	46bd      	mov	sp, r7
1004701c:	b008      	add	sp, #32
1004701e:	bd80      	pop	{r7, pc}

10047020 <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
10047020:	b580      	push	{r7, lr}
10047022:	b082      	sub	sp, #8
10047024:	af00      	add	r7, sp, #0
10047026:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
10047028:	687b      	ldr	r3, [r7, #4]
1004702a:	0018      	movs	r0, r3
1004702c:	f7ff ff6c 	bl	10046f08 <LL_RADIO_BlueSetInterrupt1RegRegister>
}
10047030:	46c0      	nop			@ (mov r8, r8)
10047032:	46bd      	mov	sp, r7
10047034:	b002      	add	sp, #8
10047036:	bd80      	pop	{r7, pc}

10047038 <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
10047038:	b580      	push	{r7, lr}
1004703a:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
1004703c:	2001      	movs	r0, #1
1004703e:	f7ff ff7d 	bl	10046f3c <LL_RADIO_BlueSetClearSemaphoreRequest>
}
10047042:	46c0      	nop			@ (mov r8, r8)
10047044:	46bd      	mov	sp, r7
10047046:	bd80      	pop	{r7, pc}

10047048 <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
10047048:	b580      	push	{r7, lr}
1004704a:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
1004704c:	f7ff f884 	bl	10046158 <LL_RADIO_GlobalDisableBlue>
}
10047050:	46c0      	nop			@ (mov r8, r8)
10047052:	46bd      	mov	sp, r7
10047054:	bd80      	pop	{r7, pc}

10047056 <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
10047056:	b580      	push	{r7, lr}
10047058:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
1004705a:	f7ff f86f 	bl	1004613c <LL_RADIO_GlobalEnableBlue>
}
1004705e:	46c0      	nop			@ (mov r8, r8)
10047060:	46bd      	mov	sp, r7
10047062:	bd80      	pop	{r7, pc}

10047064 <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
10047064:	b580      	push	{r7, lr}
10047066:	b082      	sub	sp, #8
10047068:	af00      	add	r7, sp, #0
1004706a:	0002      	movs	r2, r0
1004706c:	1dfb      	adds	r3, r7, #7
1004706e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
10047070:	1dfb      	adds	r3, r7, #7
10047072:	781b      	ldrb	r3, [r3, #0]
10047074:	0018      	movs	r0, r3
10047076:	f7ff f84b 	bl	10046110 <LL_RADIO_SetCurrentConnectionMachineNumber>
}
1004707a:	46c0      	nop			@ (mov r8, r8)
1004707c:	46bd      	mov	sp, r7
1004707e:	b002      	add	sp, #8
10047080:	bd80      	pop	{r7, pc}
	...

10047084 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
10047084:	b580      	push	{r7, lr}
10047086:	b082      	sub	sp, #8
10047088:	af00      	add	r7, sp, #0
1004708a:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
1004708c:	687b      	ldr	r3, [r7, #4]
1004708e:	4a03      	ldr	r2, [pc, #12]	@ (1004709c <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
10047090:	4013      	ands	r3, r2
}
10047092:	0018      	movs	r0, r3
10047094:	46bd      	mov	sp, r7
10047096:	b002      	add	sp, #8
10047098:	bd80      	pop	{r7, pc}
1004709a:	46c0      	nop			@ (mov r8, r8)
1004709c:	00c9df30 	.word	0x00c9df30

100470a0 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
100470a0:	b580      	push	{r7, lr}
100470a2:	b082      	sub	sp, #8
100470a4:	af00      	add	r7, sp, #0
100470a6:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
100470a8:	687a      	ldr	r2, [r7, #4]
100470aa:	2380      	movs	r3, #128	@ 0x80
100470ac:	03db      	lsls	r3, r3, #15
100470ae:	4013      	ands	r3, r2
}
100470b0:	0018      	movs	r0, r3
100470b2:	46bd      	mov	sp, r7
100470b4:	b002      	add	sp, #8
100470b6:	bd80      	pop	{r7, pc}

100470b8 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
100470b8:	b580      	push	{r7, lr}
100470ba:	b082      	sub	sp, #8
100470bc:	af00      	add	r7, sp, #0
100470be:	6078      	str	r0, [r7, #4]
    return 0;
100470c0:	2300      	movs	r3, #0
}
100470c2:	0018      	movs	r0, r3
100470c4:	46bd      	mov	sp, r7
100470c6:	b002      	add	sp, #8
100470c8:	bd80      	pop	{r7, pc}

100470ca <BLEPLAT_CNTR_IntGetIntStatusCrcErr>:

#if defined(BLUE_STATUSREG_RCVCRCERR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusCrcErr(uint32_t x)
{
100470ca:	b580      	push	{r7, lr}
100470cc:	b082      	sub	sp, #8
100470ce:	af00      	add	r7, sp, #0
100470d0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVCRCERR_Msk);
100470d2:	687a      	ldr	r2, [r7, #4]
100470d4:	2380      	movs	r3, #128	@ 0x80
100470d6:	05db      	lsls	r3, r3, #23
100470d8:	4013      	ands	r3, r2
}
100470da:	0018      	movs	r0, r3
100470dc:	46bd      	mov	sp, r7
100470de:	b002      	add	sp, #8
100470e0:	bd80      	pop	{r7, pc}

100470e2 <BLEPLAT_CNTR_IntGetIntStatusDone>:
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
100470e2:	b580      	push	{r7, lr}
100470e4:	b082      	sub	sp, #8
100470e6:	af00      	add	r7, sp, #0
100470e8:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
100470ea:	687a      	ldr	r2, [r7, #4]
100470ec:	2380      	movs	r3, #128	@ 0x80
100470ee:	049b      	lsls	r3, r3, #18
100470f0:	4013      	ands	r3, r2
}
100470f2:	0018      	movs	r0, r3
100470f4:	46bd      	mov	sp, r7
100470f6:	b002      	add	sp, #8
100470f8:	bd80      	pop	{r7, pc}

100470fa <BLEPLAT_CNTR_IntGetIntStatusEncErr>:
#endif

#if defined(BLUE_STATUSREG_ENCERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusEncErr(uint32_t x)
{
100470fa:	b580      	push	{r7, lr}
100470fc:	b082      	sub	sp, #8
100470fe:	af00      	add	r7, sp, #0
10047100:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ENCERROR_Msk);
10047102:	687a      	ldr	r2, [r7, #4]
10047104:	2380      	movs	r3, #128	@ 0x80
10047106:	019b      	lsls	r3, r3, #6
10047108:	4013      	ands	r3, r2
}
1004710a:	0018      	movs	r0, r3
1004710c:	46bd      	mov	sp, r7
1004710e:	b002      	add	sp, #8
10047110:	bd80      	pop	{r7, pc}

10047112 <BLEPLAT_CNTR_IntGetIntStatusLenErr>:
#endif

#if defined(BLUE_STATUSREG_RCVLENGTHERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusLenErr(uint32_t x)
{
10047112:	b580      	push	{r7, lr}
10047114:	b082      	sub	sp, #8
10047116:	af00      	add	r7, sp, #0
10047118:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVLENGTHERROR_Msk);
1004711a:	687a      	ldr	r2, [r7, #4]
1004711c:	2380      	movs	r3, #128	@ 0x80
1004711e:	02db      	lsls	r3, r3, #11
10047120:	4013      	ands	r3, r2
}
10047122:	0018      	movs	r0, r3
10047124:	46bd      	mov	sp, r7
10047126:	b002      	add	sp, #8
10047128:	bd80      	pop	{r7, pc}

1004712a <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
1004712a:	b580      	push	{r7, lr}
1004712c:	b082      	sub	sp, #8
1004712e:	af00      	add	r7, sp, #0
10047130:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
10047132:	687a      	ldr	r2, [r7, #4]
10047134:	2380      	movs	r3, #128	@ 0x80
10047136:	025b      	lsls	r3, r3, #9
10047138:	4013      	ands	r3, r2
}
1004713a:	0018      	movs	r0, r3
1004713c:	46bd      	mov	sp, r7
1004713e:	b002      	add	sp, #8
10047140:	bd80      	pop	{r7, pc}

10047142 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
10047142:	b580      	push	{r7, lr}
10047144:	b082      	sub	sp, #8
10047146:	af00      	add	r7, sp, #0
10047148:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
1004714a:	687a      	ldr	r2, [r7, #4]
1004714c:	2380      	movs	r3, #128	@ 0x80
1004714e:	039b      	lsls	r3, r3, #14
10047150:	4013      	ands	r3, r2
}
10047152:	0018      	movs	r0, r3
10047154:	46bd      	mov	sp, r7
10047156:	b002      	add	sp, #8
10047158:	bd80      	pop	{r7, pc}

1004715a <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
1004715a:	b580      	push	{r7, lr}
1004715c:	b082      	sub	sp, #8
1004715e:	af00      	add	r7, sp, #0
10047160:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
10047162:	687a      	ldr	r2, [r7, #4]
10047164:	2380      	movs	r3, #128	@ 0x80
10047166:	009b      	lsls	r3, r3, #2
10047168:	4013      	ands	r3, r2
}
1004716a:	0018      	movs	r0, r3
1004716c:	46bd      	mov	sp, r7
1004716e:	b002      	add	sp, #8
10047170:	bd80      	pop	{r7, pc}

10047172 <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
10047172:	b580      	push	{r7, lr}
10047174:	b082      	sub	sp, #8
10047176:	af00      	add	r7, sp, #0
10047178:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
1004717a:	687a      	ldr	r2, [r7, #4]
1004717c:	2380      	movs	r3, #128	@ 0x80
1004717e:	011b      	lsls	r3, r3, #4
10047180:	4013      	ands	r3, r2
}
10047182:	0018      	movs	r0, r3
10047184:	46bd      	mov	sp, r7
10047186:	b002      	add	sp, #8
10047188:	bd80      	pop	{r7, pc}

1004718a <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
1004718a:	b580      	push	{r7, lr}
1004718c:	b082      	sub	sp, #8
1004718e:	af00      	add	r7, sp, #0
10047190:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
10047192:	687b      	ldr	r3, [r7, #4]
10047194:	0fdb      	lsrs	r3, r3, #31
10047196:	07db      	lsls	r3, r3, #31
}
10047198:	0018      	movs	r0, r3
1004719a:	46bd      	mov	sp, r7
1004719c:	b002      	add	sp, #8
1004719e:	bd80      	pop	{r7, pc}

100471a0 <BLEPLAT_CNTR_IntGetIntStatusTimeout>:
#endif

#if defined(BLUE_STATUSREG_RCVTIMEOUT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTimeout(uint32_t x)
{
100471a0:	b580      	push	{r7, lr}
100471a2:	b082      	sub	sp, #8
100471a4:	af00      	add	r7, sp, #0
100471a6:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVTIMEOUT_Msk);
100471a8:	687a      	ldr	r2, [r7, #4]
100471aa:	2380      	movs	r3, #128	@ 0x80
100471ac:	04db      	lsls	r3, r3, #19
100471ae:	4013      	ands	r3, r2
}
100471b0:	0018      	movs	r0, r3
100471b2:	46bd      	mov	sp, r7
100471b4:	b002      	add	sp, #8
100471b6:	bd80      	pop	{r7, pc}

100471b8 <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
100471b8:	b580      	push	{r7, lr}
100471ba:	b082      	sub	sp, #8
100471bc:	af00      	add	r7, sp, #0
100471be:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
100471c0:	687b      	ldr	r3, [r7, #4]
100471c2:	2240      	movs	r2, #64	@ 0x40
100471c4:	4013      	ands	r3, r2
}
100471c6:	0018      	movs	r0, r3
100471c8:	46bd      	mov	sp, r7
100471ca:	b002      	add	sp, #8
100471cc:	bd80      	pop	{r7, pc}

100471ce <BLEPLAT_CNTR_IntGetIntStatusTxOk>:
#endif

#if defined(BLUE_STATUSREG_TXOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxOk(uint32_t x)
{
100471ce:	b580      	push	{r7, lr}
100471d0:	b082      	sub	sp, #8
100471d2:	af00      	add	r7, sp, #0
100471d4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXOK_Msk);
100471d6:	687a      	ldr	r2, [r7, #4]
100471d8:	2380      	movs	r3, #128	@ 0x80
100471da:	045b      	lsls	r3, r3, #17
100471dc:	4013      	ands	r3, r2
}
100471de:	0018      	movs	r0, r3
100471e0:	46bd      	mov	sp, r7
100471e2:	b002      	add	sp, #8
100471e4:	bd80      	pop	{r7, pc}

100471e6 <BLEPLAT_CNTR_PacketClrCteSamplingEn>:
{
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketClrCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100471e6:	b580      	push	{r7, lr}
100471e8:	b082      	sub	sp, #8
100471ea:	af00      	add	r7, sp, #0
100471ec:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x0);
100471ee:	687b      	ldr	r3, [r7, #4]
100471f0:	2100      	movs	r1, #0
100471f2:	0018      	movs	r0, r3
100471f4:	f7ff fd17 	bl	10046c26 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
100471f8:	46c0      	nop			@ (mov r8, r8)
100471fa:	46bd      	mov	sp, r7
100471fc:	b002      	add	sp, #8
100471fe:	bd80      	pop	{r7, pc}

10047200 <BLEPLAT_CNTR_PacketClrIncChan>:

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047200:	b580      	push	{r7, lr}
10047202:	b082      	sub	sp, #8
10047204:	af00      	add	r7, sp, #0
10047206:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
10047208:	687b      	ldr	r3, [r7, #4]
1004720a:	0018      	movs	r0, r3
1004720c:	f7ff fd66 	bl	10046cdc <LL_RADIO_IncrementerChannel_Disable>
}
10047210:	46c0      	nop			@ (mov r8, r8)
10047212:	46bd      	mov	sp, r7
10047214:	b002      	add	sp, #8
10047216:	bd80      	pop	{r7, pc}

10047218 <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047218:	b580      	push	{r7, lr}
1004721a:	b082      	sub	sp, #8
1004721c:	af00      	add	r7, sp, #0
1004721e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10047220:	687b      	ldr	r3, [r7, #4]
10047222:	2100      	movs	r1, #0
10047224:	0018      	movs	r0, r3
10047226:	f7ff fcd5 	bl	10046bd4 <LL_RADIO_SetCalibrationRequest>
}
1004722a:	46c0      	nop			@ (mov r8, r8)
1004722c:	46bd      	mov	sp, r7
1004722e:	b002      	add	sp, #8
10047230:	bd80      	pop	{r7, pc}

10047232 <BLEPLAT_CNTR_PacketGetDataPtr>:
#endif

}

uint8_t* BLEPLAT_CNTR_PacketGetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047232:	b580      	push	{r7, lr}
10047234:	b082      	sub	sp, #8
10047236:	af00      	add	r7, sp, #0
10047238:	6078      	str	r0, [r7, #4]
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
1004723a:	687b      	ldr	r3, [r7, #4]
1004723c:	0018      	movs	r0, r3
1004723e:	f7ff fdb3 	bl	10046da8 <LL_RADIO_GetDataPointer>
10047242:	0003      	movs	r3, r0
}
10047244:	0018      	movs	r0, r3
10047246:	46bd      	mov	sp, r7
10047248:	b002      	add	sp, #8
1004724a:	bd80      	pop	{r7, pc}

1004724c <BLEPLAT_CNTR_PacketInitTo0>:

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004724c:	b580      	push	{r7, lr}
1004724e:	b082      	sub	sp, #8
10047250:	af00      	add	r7, sp, #0
10047252:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10047254:	687b      	ldr	r3, [r7, #4]
10047256:	2210      	movs	r2, #16
10047258:	2100      	movs	r1, #0
1004725a:	0018      	movs	r0, r3
1004725c:	f020 fb62 	bl	10067924 <memset>
}
10047260:	46c0      	nop			@ (mov r8, r8)
10047262:	46bd      	mov	sp, r7
10047264:	b002      	add	sp, #8
10047266:	bd80      	pop	{r7, pc}

10047268 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047268:	b580      	push	{r7, lr}
1004726a:	b082      	sub	sp, #8
1004726c:	af00      	add	r7, sp, #0
1004726e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10047270:	687b      	ldr	r3, [r7, #4]
10047272:	2101      	movs	r1, #1
10047274:	0018      	movs	r0, r3
10047276:	f7ff fd00 	bl	10046c7a <LL_RADIO_SetAdvertise>
}
1004727a:	46c0      	nop			@ (mov r8, r8)
1004727c:	46bd      	mov	sp, r7
1004727e:	b002      	add	sp, #8
10047280:	bd80      	pop	{r7, pc}

10047282 <BLEPLAT_CNTR_PacketSetCrcinitSel>:

void BLEPLAT_CNTR_PacketSetCrcinitSel(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047282:	b580      	push	{r7, lr}
10047284:	b082      	sub	sp, #8
10047286:	af00      	add	r7, sp, #0
10047288:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004728a:	687b      	ldr	r3, [r7, #4]
1004728c:	2101      	movs	r1, #1
1004728e:	0018      	movs	r0, r3
10047290:	f7ff fcde 	bl	10046c50 <LL_RADIO_SetCRCInitializationSelector>
}
10047294:	46c0      	nop			@ (mov r8, r8)
10047296:	46bd      	mov	sp, r7
10047298:	b002      	add	sp, #8
1004729a:	bd80      	pop	{r7, pc}

1004729c <BLEPLAT_CNTR_PacketSetCteSamplingEn>:

void BLEPLAT_CNTR_PacketSetCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004729c:	b580      	push	{r7, lr}
1004729e:	b082      	sub	sp, #8
100472a0:	af00      	add	r7, sp, #0
100472a2:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x01);
100472a4:	687b      	ldr	r3, [r7, #4]
100472a6:	2101      	movs	r1, #1
100472a8:	0018      	movs	r0, r3
100472aa:	f7ff fcbc 	bl	10046c26 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
100472ae:	46c0      	nop			@ (mov r8, r8)
100472b0:	46bd      	mov	sp, r7
100472b2:	b002      	add	sp, #8
100472b4:	bd80      	pop	{r7, pc}

100472b6 <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
100472b6:	b580      	push	{r7, lr}
100472b8:	b082      	sub	sp, #8
100472ba:	af00      	add	r7, sp, #0
100472bc:	6078      	str	r0, [r7, #4]
100472be:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
100472c0:	683a      	ldr	r2, [r7, #0]
100472c2:	687b      	ldr	r3, [r7, #4]
100472c4:	0011      	movs	r1, r2
100472c6:	0018      	movs	r0, r3
100472c8:	f7ff fd60 	bl	10046d8c <LL_RADIO_SetDataPointer>
}
100472cc:	46c0      	nop			@ (mov r8, r8)
100472ce:	46bd      	mov	sp, r7
100472d0:	b002      	add	sp, #8
100472d2:	bd80      	pop	{r7, pc}

100472d4 <BLEPLAT_CNTR_PacketSetIncChan>:

void BLEPLAT_CNTR_PacketSetIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100472d4:	b580      	push	{r7, lr}
100472d6:	b082      	sub	sp, #8
100472d8:	af00      	add	r7, sp, #0
100472da:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Enable((TXRXPACK_TypeDef*)packetP);
100472dc:	687b      	ldr	r3, [r7, #4]
100472de:	0018      	movs	r0, r3
100472e0:	f7ff fcee 	bl	10046cc0 <LL_RADIO_IncrementerChannel_Enable>
}
100472e4:	46c0      	nop			@ (mov r8, r8)
100472e6:	46bd      	mov	sp, r7
100472e8:	b002      	add	sp, #8
100472ea:	bd80      	pop	{r7, pc}

100472ec <BLEPLAT_CNTR_PacketSetIntCrcErr>:

void BLEPLAT_CNTR_PacketSetIntCrcErr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100472ec:	b580      	push	{r7, lr}
100472ee:	b082      	sub	sp, #8
100472f0:	af00      	add	r7, sp, #0
100472f2:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
100472f4:	687b      	ldr	r3, [r7, #4]
100472f6:	0018      	movs	r0, r3
100472f8:	f7ff fde8 	bl	10046ecc <LL_RADIO_IntRcvCRCErr_Enable>
}
100472fc:	46c0      	nop			@ (mov r8, r8)
100472fe:	46bd      	mov	sp, r7
10047300:	b002      	add	sp, #8
10047302:	bd80      	pop	{r7, pc}

10047304 <BLEPLAT_CNTR_PacketSetIntDone>:

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047304:	b580      	push	{r7, lr}
10047306:	b082      	sub	sp, #8
10047308:	af00      	add	r7, sp, #0
1004730a:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
1004730c:	687b      	ldr	r3, [r7, #4]
1004730e:	0018      	movs	r0, r3
10047310:	f7ff fdbe 	bl	10046e90 <LL_RADIO_IntDone_Enable>
}
10047314:	46c0      	nop			@ (mov r8, r8)
10047316:	46bd      	mov	sp, r7
10047318:	b002      	add	sp, #8
1004731a:	bd80      	pop	{r7, pc}

1004731c <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004731c:	b580      	push	{r7, lr}
1004731e:	b082      	sub	sp, #8
10047320:	af00      	add	r7, sp, #0
10047322:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
10047324:	687b      	ldr	r3, [r7, #4]
10047326:	0018      	movs	r0, r3
10047328:	f7ff fddf 	bl	10046eea <LL_RADIO_IntRcvOk_Enable>
}
1004732c:	46c0      	nop			@ (mov r8, r8)
1004732e:	46bd      	mov	sp, r7
10047330:	b002      	add	sp, #8
10047332:	bd80      	pop	{r7, pc}

10047334 <BLEPLAT_CNTR_PacketSetIntTimeout>:

void BLEPLAT_CNTR_PacketSetIntTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047334:	b580      	push	{r7, lr}
10047336:	b082      	sub	sp, #8
10047338:	af00      	add	r7, sp, #0
1004733a:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvTimeout_Enable((TXRXPACK_TypeDef*)packetP);
1004733c:	687b      	ldr	r3, [r7, #4]
1004733e:	0018      	movs	r0, r3
10047340:	f7ff fdb5 	bl	10046eae <LL_RADIO_IntRcvTimeout_Enable>
}
10047344:	46c0      	nop			@ (mov r8, r8)
10047346:	46bd      	mov	sp, r7
10047348:	b002      	add	sp, #8
1004734a:	bd80      	pop	{r7, pc}

1004734c <BLEPLAT_CNTR_PacketSetIntTxOk>:
{
  LL_RADIO_SetIntTimeCapture((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1U);
}

void BLEPLAT_CNTR_PacketSetIntTxOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004734c:	b580      	push	{r7, lr}
1004734e:	b082      	sub	sp, #8
10047350:	af00      	add	r7, sp, #0
10047352:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10047354:	687b      	ldr	r3, [r7, #4]
10047356:	2101      	movs	r1, #1
10047358:	0018      	movs	r0, r3
1004735a:	f7ff fd81 	bl	10046e60 <LL_RADIO_SetIntTxOk>
}
1004735e:	46c0      	nop			@ (mov r8, r8)
10047360:	46bd      	mov	sp, r7
10047362:	b002      	add	sp, #8
10047364:	bd80      	pop	{r7, pc}

10047366 <BLEPLAT_CNTR_PacketSetKeepsemareq>:

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047366:	b580      	push	{r7, lr}
10047368:	b082      	sub	sp, #8
1004736a:	af00      	add	r7, sp, #0
1004736c:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004736e:	687b      	ldr	r3, [r7, #4]
10047370:	2101      	movs	r1, #1
10047372:	0018      	movs	r0, r3
10047374:	f7ff fc42 	bl	10046bfc <LL_RADIO_SetKeepSemaRequest>
}
10047378:	46c0      	nop			@ (mov r8, r8)
1004737a:	46bd      	mov	sp, r7
1004737c:	b002      	add	sp, #8
1004737e:	bd80      	pop	{r7, pc}

10047380 <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
10047380:	b580      	push	{r7, lr}
10047382:	b082      	sub	sp, #8
10047384:	af00      	add	r7, sp, #0
10047386:	6078      	str	r0, [r7, #4]
10047388:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
1004738a:	683a      	ldr	r2, [r7, #0]
1004738c:	687b      	ldr	r3, [r7, #4]
1004738e:	0011      	movs	r1, r2
10047390:	0018      	movs	r0, r3
10047392:	f7ff fc11 	bl	10046bb8 <LL_RADIO_SetNextPointer>
}
10047396:	46c0      	nop			@ (mov r8, r8)
10047398:	46bd      	mov	sp, r7
1004739a:	b002      	add	sp, #8
1004739c:	bd80      	pop	{r7, pc}

1004739e <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004739e:	b580      	push	{r7, lr}
100473a0:	b082      	sub	sp, #8
100473a2:	af00      	add	r7, sp, #0
100473a4:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
100473a6:	687b      	ldr	r3, [r7, #4]
100473a8:	2100      	movs	r1, #0
100473aa:	0018      	movs	r0, r3
100473ac:	f7ff fca6 	bl	10046cfc <LL_RADIO_SetNextTxMode>
}
100473b0:	46c0      	nop			@ (mov r8, r8)
100473b2:	46bd      	mov	sp, r7
100473b4:	b002      	add	sp, #8
100473b6:	bd80      	pop	{r7, pc}

100473b8 <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
100473b8:	b580      	push	{r7, lr}
100473ba:	b082      	sub	sp, #8
100473bc:	af00      	add	r7, sp, #0
100473be:	6078      	str	r0, [r7, #4]
100473c0:	000a      	movs	r2, r1
100473c2:	1cfb      	adds	r3, r7, #3
100473c4:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
100473c6:	46c0      	nop			@ (mov r8, r8)
100473c8:	46bd      	mov	sp, r7
100473ca:	b002      	add	sp, #8
100473cc:	bd80      	pop	{r7, pc}

100473ce <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100473ce:	b580      	push	{r7, lr}
100473d0:	b082      	sub	sp, #8
100473d2:	af00      	add	r7, sp, #0
100473d4:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100473d6:	687b      	ldr	r3, [r7, #4]
100473d8:	2101      	movs	r1, #1
100473da:	0018      	movs	r0, r3
100473dc:	f7ff fc8e 	bl	10046cfc <LL_RADIO_SetNextTxMode>
}
100473e0:	46c0      	nop			@ (mov r8, r8)
100473e2:	46bd      	mov	sp, r7
100473e4:	b002      	add	sp, #8
100473e6:	bd80      	pop	{r7, pc}

100473e8 <BLEPLAT_CNTR_PacketSetNsEn>:

void BLEPLAT_CNTR_PacketSetNsEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100473e8:	b580      	push	{r7, lr}
100473ea:	b082      	sub	sp, #8
100473ec:	af00      	add	r7, sp, #0
100473ee:	6078      	str	r0, [r7, #4]
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
100473f0:	687b      	ldr	r3, [r7, #4]
100473f2:	0018      	movs	r0, r3
100473f4:	f7ff fc56 	bl	10046ca4 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>
}
100473f8:	46c0      	nop			@ (mov r8, r8)
100473fa:	46bd      	mov	sp, r7
100473fc:	b002      	add	sp, #8
100473fe:	bd80      	pop	{r7, pc}

10047400 <BLEPLAT_CNTR_PacketSetPllTrig>:

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047400:	b580      	push	{r7, lr}
10047402:	b082      	sub	sp, #8
10047404:	af00      	add	r7, sp, #0
10047406:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10047408:	687b      	ldr	r3, [r7, #4]
1004740a:	2101      	movs	r1, #1
1004740c:	0018      	movs	r0, r3
1004740e:	f7ff fbe1 	bl	10046bd4 <LL_RADIO_SetCalibrationRequest>
}
10047412:	46c0      	nop			@ (mov r8, r8)
10047414:	46bd      	mov	sp, r7
10047416:	b002      	add	sp, #8
10047418:	bd80      	pop	{r7, pc}

1004741a <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004741a:	b580      	push	{r7, lr}
1004741c:	b082      	sub	sp, #8
1004741e:	af00      	add	r7, sp, #0
10047420:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10047422:	687b      	ldr	r3, [r7, #4]
10047424:	2101      	movs	r1, #1
10047426:	0018      	movs	r0, r3
10047428:	f7ff fc80 	bl	10046d2c <LL_RADIO_SetAllTableDataReady>
}
1004742c:	46c0      	nop			@ (mov r8, r8)
1004742e:	46bd      	mov	sp, r7
10047430:	b002      	add	sp, #8
10047432:	bd80      	pop	{r7, pc}

10047434 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
10047434:	b580      	push	{r7, lr}
10047436:	b082      	sub	sp, #8
10047438:	af00      	add	r7, sp, #0
1004743a:	6078      	str	r0, [r7, #4]
1004743c:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
1004743e:	683a      	ldr	r2, [r7, #0]
10047440:	687b      	ldr	r3, [r7, #4]
10047442:	0011      	movs	r1, r2
10047444:	0018      	movs	r0, r3
10047446:	f7ff fcb9 	bl	10046dbc <LL_RADIO_SetTimer2Triggering>
}
1004744a:	46c0      	nop			@ (mov r8, r8)
1004744c:	46bd      	mov	sp, r7
1004744e:	b002      	add	sp, #8
10047450:	bd80      	pop	{r7, pc}

10047452 <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047452:	b580      	push	{r7, lr}
10047454:	b082      	sub	sp, #8
10047456:	af00      	add	r7, sp, #0
10047458:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
1004745a:	687b      	ldr	r3, [r7, #4]
1004745c:	0018      	movs	r0, r3
1004745e:	f7ff fcc0 	bl	10046de2 <LL_RADIO_Timer2_Enable>
}
10047462:	46c0      	nop			@ (mov r8, r8)
10047464:	46bd      	mov	sp, r7
10047466:	b002      	add	sp, #8
10047468:	bd80      	pop	{r7, pc}

1004746a <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004746a:	b580      	push	{r7, lr}
1004746c:	b082      	sub	sp, #8
1004746e:	af00      	add	r7, sp, #0
10047470:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10047472:	687b      	ldr	r3, [r7, #4]
10047474:	2101      	movs	r1, #1
10047476:	0018      	movs	r0, r3
10047478:	f7ff fcda 	bl	10046e30 <LL_RADIO_SetTrigDone>
}
1004747c:	46c0      	nop			@ (mov r8, r8)
1004747e:	46bd      	mov	sp, r7
10047480:	b002      	add	sp, #8
10047482:	bd80      	pop	{r7, pc}

10047484 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047484:	b580      	push	{r7, lr}
10047486:	b082      	sub	sp, #8
10047488:	af00      	add	r7, sp, #0
1004748a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004748c:	687b      	ldr	r3, [r7, #4]
1004748e:	2101      	movs	r1, #1
10047490:	0018      	movs	r0, r3
10047492:	f7ff fcb5 	bl	10046e00 <LL_RADIO_SetTrigRcv>
}
10047496:	46c0      	nop			@ (mov r8, r8)
10047498:	46bd      	mov	sp, r7
1004749a:	b002      	add	sp, #8
1004749c:	bd80      	pop	{r7, pc}

1004749e <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004749e:	b580      	push	{r7, lr}
100474a0:	b082      	sub	sp, #8
100474a2:	af00      	add	r7, sp, #0
100474a4:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100474a6:	687b      	ldr	r3, [r7, #4]
100474a8:	2101      	movs	r1, #1
100474aa:	0018      	movs	r0, r3
100474ac:	f7ff fc56 	bl	10046d5c <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100474b0:	687b      	ldr	r3, [r7, #4]
100474b2:	2101      	movs	r1, #1
100474b4:	0018      	movs	r0, r3
100474b6:	f7ff fc39 	bl	10046d2c <LL_RADIO_SetAllTableDataReady>
}
100474ba:	46c0      	nop			@ (mov r8, r8)
100474bc:	46bd      	mov	sp, r7
100474be:	b002      	add	sp, #8
100474c0:	bd80      	pop	{r7, pc}

100474c2 <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
100474c2:	b580      	push	{r7, lr}
100474c4:	b082      	sub	sp, #8
100474c6:	af00      	add	r7, sp, #0
100474c8:	6078      	str	r0, [r7, #4]
100474ca:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
100474cc:	683b      	ldr	r3, [r7, #0]
100474ce:	031b      	lsls	r3, r3, #12
100474d0:	0b1b      	lsrs	r3, r3, #12
100474d2:	0018      	movs	r0, r3
100474d4:	f7fe fe4e 	bl	10046174 <LL_RADIO_SetReceiveWindowTimeout>
}
100474d8:	46c0      	nop			@ (mov r8, r8)
100474da:	46bd      	mov	sp, r7
100474dc:	b002      	add	sp, #8
100474de:	bd80      	pop	{r7, pc}

100474e0 <BLEPLAT_CNTR_SmCteOff>:

void BLEPLAT_CNTR_SmCteOff(uint8_t smNo)
{
100474e0:	b580      	push	{r7, lr}
100474e2:	b082      	sub	sp, #8
100474e4:	af00      	add	r7, sp, #0
100474e6:	0002      	movs	r2, r0
100474e8:	1dfb      	adds	r3, r7, #7
100474ea:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEDisable(smNo, 0x01);
100474ec:	1dfb      	adds	r3, r7, #7
100474ee:	781b      	ldrb	r3, [r3, #0]
100474f0:	2101      	movs	r1, #1
100474f2:	0018      	movs	r0, r3
100474f4:	f7fe fff0 	bl	100464d8 <LL_RADIO_SetCTEDisable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
100474f8:	46c0      	nop			@ (mov r8, r8)
100474fa:	46bd      	mov	sp, r7
100474fc:	b002      	add	sp, #8
100474fe:	bd80      	pop	{r7, pc}

10047500 <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
10047500:	b580      	push	{r7, lr}
10047502:	b082      	sub	sp, #8
10047504:	af00      	add	r7, sp, #0
10047506:	0002      	movs	r2, r0
10047508:	6039      	str	r1, [r7, #0]
1004750a:	1dfb      	adds	r3, r7, #7
1004750c:	701a      	strb	r2, [r3, #0]
    if(enable)
1004750e:	683b      	ldr	r3, [r7, #0]
10047510:	2b00      	cmp	r3, #0
10047512:	d005      	beq.n	10047520 <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
10047514:	1dfb      	adds	r3, r7, #7
10047516:	781b      	ldrb	r3, [r3, #0]
10047518:	0018      	movs	r0, r3
1004751a:	f7fe fe69 	bl	100461f0 <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
1004751e:	e004      	b.n	1004752a <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
10047520:	1dfb      	adds	r3, r7, #7
10047522:	781b      	ldrb	r3, [r3, #0]
10047524:	0018      	movs	r0, r3
10047526:	f7fe fe81 	bl	1004622c <LL_RADIO_RadioCommandList_Disable>
}
1004752a:	46c0      	nop			@ (mov r8, r8)
1004752c:	46bd      	mov	sp, r7
1004752e:	b002      	add	sp, #8
10047530:	bd80      	pop	{r7, pc}

10047532 <BLEPLAT_CNTR_SmEncOff>:

void BLEPLAT_CNTR_SmEncOff(uint8_t smNo)
{
10047532:	b580      	push	{r7, lr}
10047534:	b082      	sub	sp, #8
10047536:	af00      	add	r7, sp, #0
10047538:	0002      	movs	r2, r0
1004753a:	1dfb      	adds	r3, r7, #7
1004753c:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Disable(smNo);
1004753e:	1dfb      	adds	r3, r7, #7
10047540:	781b      	ldrb	r3, [r3, #0]
10047542:	0018      	movs	r0, r3
10047544:	f7fe ff68 	bl	10046418 <LL_RADIO_Encryption_Disable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(smNo);
10047548:	1dfb      	adds	r3, r7, #7
1004754a:	781b      	ldrb	r3, [r3, #0]
1004754c:	0018      	movs	r0, r3
1004754e:	f7ff f955 	bl	100467fc <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>
}
10047552:	46c0      	nop			@ (mov r8, r8)
10047554:	46bd      	mov	sp, r7
10047556:	b002      	add	sp, #8
10047558:	bd80      	pop	{r7, pc}

1004755a <BLEPLAT_CNTR_SmEncOn>:

void BLEPLAT_CNTR_SmEncOn(uint8_t smNo)
{
1004755a:	b580      	push	{r7, lr}
1004755c:	b082      	sub	sp, #8
1004755e:	af00      	add	r7, sp, #0
10047560:	0002      	movs	r2, r0
10047562:	1dfb      	adds	r3, r7, #7
10047564:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Enable(smNo);
10047566:	1dfb      	adds	r3, r7, #7
10047568:	781b      	ldrb	r3, [r3, #0]
1004756a:	0018      	movs	r0, r3
1004756c:	f7fe ff34 	bl	100463d8 <LL_RADIO_Encryption_Enable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(smNo);
10047570:	1dfb      	adds	r3, r7, #7
10047572:	781b      	ldrb	r3, [r3, #0]
10047574:	0018      	movs	r0, r3
10047576:	f7ff f921 	bl	100467bc <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>
}
1004757a:	46c0      	nop			@ (mov r8, r8)
1004757c:	46bd      	mov	sp, r7
1004757e:	b002      	add	sp, #8
10047580:	bd80      	pop	{r7, pc}

10047582 <BLEPLAT_CNTR_SmGetAccessAddr>:

uint32_t BLEPLAT_CNTR_SmGetAccessAddr(uint8_t smNo)
{
10047582:	b580      	push	{r7, lr}
10047584:	b082      	sub	sp, #8
10047586:	af00      	add	r7, sp, #0
10047588:	0002      	movs	r2, r0
1004758a:	1dfb      	adds	r3, r7, #7
1004758c:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_GetAccessAddress(smNo);
1004758e:	1dfb      	adds	r3, r7, #7
10047590:	781b      	ldrb	r3, [r3, #0]
10047592:	0018      	movs	r0, r3
10047594:	f7ff f970 	bl	10046878 <LL_RADIO_GetAccessAddress>
10047598:	0003      	movs	r3, r0
}
1004759a:	0018      	movs	r0, r3
1004759c:	46bd      	mov	sp, r7
1004759e:	b002      	add	sp, #8
100475a0:	bd80      	pop	{r7, pc}

100475a2 <BLEPLAT_CNTR_SmGetChannelMap>:

void BLEPLAT_CNTR_SmGetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
100475a2:	b580      	push	{r7, lr}
100475a4:	b082      	sub	sp, #8
100475a6:	af00      	add	r7, sp, #0
100475a8:	0002      	movs	r2, r0
100475aa:	6039      	str	r1, [r7, #0]
100475ac:	1dfb      	adds	r3, r7, #7
100475ae:	701a      	strb	r2, [r3, #0]
    chanMap[0] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo));
100475b0:	1dfb      	adds	r3, r7, #7
100475b2:	781b      	ldrb	r3, [r3, #0]
100475b4:	0018      	movs	r0, r3
100475b6:	f7ff faad 	bl	10046b14 <LL_RADIO_GetUsedChannelFlags_15_0>
100475ba:	0003      	movs	r3, r0
100475bc:	b2da      	uxtb	r2, r3
100475be:	683b      	ldr	r3, [r7, #0]
100475c0:	701a      	strb	r2, [r3, #0]
    chanMap[1] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo) >> 8U);
100475c2:	1dfb      	adds	r3, r7, #7
100475c4:	781b      	ldrb	r3, [r3, #0]
100475c6:	0018      	movs	r0, r3
100475c8:	f7ff faa4 	bl	10046b14 <LL_RADIO_GetUsedChannelFlags_15_0>
100475cc:	0003      	movs	r3, r0
100475ce:	0a1a      	lsrs	r2, r3, #8
100475d0:	683b      	ldr	r3, [r7, #0]
100475d2:	3301      	adds	r3, #1
100475d4:	b2d2      	uxtb	r2, r2
100475d6:	701a      	strb	r2, [r3, #0]
    chanMap[2] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo));
100475d8:	1dfb      	adds	r3, r7, #7
100475da:	781b      	ldrb	r3, [r3, #0]
100475dc:	0018      	movs	r0, r3
100475de:	f7ff fad5 	bl	10046b8c <LL_RADIO_GetUsedChannelFlags_36_16>
100475e2:	0002      	movs	r2, r0
100475e4:	683b      	ldr	r3, [r7, #0]
100475e6:	3302      	adds	r3, #2
100475e8:	b2d2      	uxtb	r2, r2
100475ea:	701a      	strb	r2, [r3, #0]
    chanMap[3] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 8U);
100475ec:	1dfb      	adds	r3, r7, #7
100475ee:	781b      	ldrb	r3, [r3, #0]
100475f0:	0018      	movs	r0, r3
100475f2:	f7ff facb 	bl	10046b8c <LL_RADIO_GetUsedChannelFlags_36_16>
100475f6:	0003      	movs	r3, r0
100475f8:	0a1a      	lsrs	r2, r3, #8
100475fa:	683b      	ldr	r3, [r7, #0]
100475fc:	3303      	adds	r3, #3
100475fe:	b2d2      	uxtb	r2, r2
10047600:	701a      	strb	r2, [r3, #0]
    chanMap[4] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 16U);
10047602:	1dfb      	adds	r3, r7, #7
10047604:	781b      	ldrb	r3, [r3, #0]
10047606:	0018      	movs	r0, r3
10047608:	f7ff fac0 	bl	10046b8c <LL_RADIO_GetUsedChannelFlags_36_16>
1004760c:	0003      	movs	r3, r0
1004760e:	0c1a      	lsrs	r2, r3, #16
10047610:	683b      	ldr	r3, [r7, #0]
10047612:	3304      	adds	r3, #4
10047614:	b2d2      	uxtb	r2, r2
10047616:	701a      	strb	r2, [r3, #0]
}
10047618:	46c0      	nop			@ (mov r8, r8)
1004761a:	46bd      	mov	sp, r7
1004761c:	b002      	add	sp, #8
1004761e:	bd80      	pop	{r7, pc}

10047620 <BLEPLAT_CNTR_SmGetEncIvPtr>:
  return (uint8_t)0;
#endif
}

uint32_t* BLEPLAT_CNTR_SmGetEncIvPtr(uint8_t smNo)
{
10047620:	b580      	push	{r7, lr}
10047622:	b082      	sub	sp, #8
10047624:	af00      	add	r7, sp, #0
10047626:	0002      	movs	r2, r0
10047628:	1dfb      	adds	r3, r7, #7
1004762a:	701a      	strb	r2, [r3, #0]
    return (uint32_t*)&(bluedata + smNo)->ENCRYPTIV[0];
1004762c:	1dfb      	adds	r3, r7, #7
1004762e:	781b      	ldrb	r3, [r3, #0]
10047630:	225c      	movs	r2, #92	@ 0x5c
10047632:	4353      	muls	r3, r2
10047634:	4a03      	ldr	r2, [pc, #12]	@ (10047644 <BLEPLAT_CNTR_SmGetEncIvPtr+0x24>)
10047636:	4694      	mov	ip, r2
10047638:	4463      	add	r3, ip
1004763a:	3338      	adds	r3, #56	@ 0x38
}
1004763c:	0018      	movs	r0, r3
1004763e:	46bd      	mov	sp, r7
10047640:	b002      	add	sp, #8
10047642:	bd80      	pop	{r7, pc}
10047644:	200000dc 	.word	0x200000dc

10047648 <BLEPLAT_CNTR_SmGetEncKeyPtr>:

uint32_t* BLEPLAT_CNTR_SmGetEncKeyPtr(uint8_t smNo)
{
10047648:	b580      	push	{r7, lr}
1004764a:	b082      	sub	sp, #8
1004764c:	af00      	add	r7, sp, #0
1004764e:	0002      	movs	r2, r0
10047650:	1dfb      	adds	r3, r7, #7
10047652:	701a      	strb	r2, [r3, #0]
	return (uint32_t*)&(bluedata + smNo)->ENCRYPTK[0];
10047654:	1dfb      	adds	r3, r7, #7
10047656:	781b      	ldrb	r3, [r3, #0]
10047658:	225c      	movs	r2, #92	@ 0x5c
1004765a:	4353      	muls	r3, r2
1004765c:	4a03      	ldr	r2, [pc, #12]	@ (1004766c <BLEPLAT_CNTR_SmGetEncKeyPtr+0x24>)
1004765e:	4694      	mov	ip, r2
10047660:	4463      	add	r3, ip
10047662:	3340      	adds	r3, #64	@ 0x40
}
10047664:	0018      	movs	r0, r3
10047666:	46bd      	mov	sp, r7
10047668:	b002      	add	sp, #8
1004766a:	bd80      	pop	{r7, pc}
1004766c:	200000dc 	.word	0x200000dc

10047670 <BLEPLAT_CNTR_SmGetHopIncr>:
{
    return (uint8_t)LL_RADIO_Encryption_IsEnabled(smNo);
}

uint8_t BLEPLAT_CNTR_SmGetHopIncr(uint8_t smNo)
{
10047670:	b580      	push	{r7, lr}
10047672:	b082      	sub	sp, #8
10047674:	af00      	add	r7, sp, #0
10047676:	0002      	movs	r2, r0
10047678:	1dfb      	adds	r3, r7, #7
1004767a:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetHopIncrement(smNo);
1004767c:	1dfb      	adds	r3, r7, #7
1004767e:	781b      	ldrb	r3, [r3, #0]
10047680:	0018      	movs	r0, r3
10047682:	f7ff fa0d 	bl	10046aa0 <LL_RADIO_GetHopIncrement>
10047686:	0003      	movs	r3, r0
10047688:	b2db      	uxtb	r3, r3
}
1004768a:	0018      	movs	r0, r3
1004768c:	46bd      	mov	sp, r7
1004768e:	b002      	add	sp, #8
10047690:	bd80      	pop	{r7, pc}

10047692 <BLEPLAT_CNTR_SmGetMode>:

uint8_t BLEPLAT_CNTR_SmGetMode(uint8_t smNo)
{
10047692:	b580      	push	{r7, lr}
10047694:	b082      	sub	sp, #8
10047696:	af00      	add	r7, sp, #0
10047698:	0002      	movs	r2, r0
1004769a:	1dfb      	adds	r3, r7, #7
1004769c:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_TxMode_IsEnabled(smNo);
1004769e:	1dfb      	adds	r3, r7, #7
100476a0:	781b      	ldrb	r3, [r3, #0]
100476a2:	0018      	movs	r0, r3
100476a4:	f7fe fe1c 	bl	100462e0 <LL_RADIO_TxMode_IsEnabled>
100476a8:	0003      	movs	r3, r0
100476aa:	b2db      	uxtb	r3, r3
}
100476ac:	0018      	movs	r0, r3
100476ae:	46bd      	mov	sp, r7
100476b0:	b002      	add	sp, #8
100476b2:	bd80      	pop	{r7, pc}

100476b4 <BLEPLAT_CNTR_SmGetRemapChan>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPointPrevious(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetRemapChan(uint8_t smNo)
{
100476b4:	b580      	push	{r7, lr}
100476b6:	b082      	sub	sp, #8
100476b8:	af00      	add	r7, sp, #0
100476ba:	0002      	movs	r2, r0
100476bc:	1dfb      	adds	r3, r7, #7
100476be:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetRemapChannel(smNo);
100476c0:	1dfb      	adds	r3, r7, #7
100476c2:	781b      	ldrb	r3, [r3, #0]
100476c4:	0018      	movs	r0, r3
100476c6:	f7fe fe4f 	bl	10046368 <LL_RADIO_GetRemapChannel>
100476ca:	0003      	movs	r3, r0
100476cc:	b2db      	uxtb	r3, r3
}
100476ce:	0018      	movs	r0, r3
100476d0:	46bd      	mov	sp, r7
100476d2:	b002      	add	sp, #8
100476d4:	bd80      	pop	{r7, pc}

100476d6 <BLEPLAT_CNTR_SmGetRxCount>:

void BLEPLAT_CNTR_SmGetRxCount(uint8_t smNo, uint32_t* packetCount)
{
100476d6:	b590      	push	{r4, r7, lr}
100476d8:	b083      	sub	sp, #12
100476da:	af00      	add	r7, sp, #0
100476dc:	0002      	movs	r2, r0
100476de:	6039      	str	r1, [r7, #0]
100476e0:	1dfb      	adds	r3, r7, #7
100476e2:	701a      	strb	r2, [r3, #0]

    packetCount[0] = LL_RADIO_GetPacketCounterRx_23_0(smNo);
100476e4:	1dfb      	adds	r3, r7, #7
100476e6:	781b      	ldrb	r3, [r3, #0]
100476e8:	0018      	movs	r0, r3
100476ea:	f7ff f815 	bl	10046718 <LL_RADIO_GetPacketCounterRx_23_0>
100476ee:	0002      	movs	r2, r0
100476f0:	683b      	ldr	r3, [r7, #0]
100476f2:	601a      	str	r2, [r3, #0]
    packetCount[0] = packetCount[0] | ((uint32_t)LL_RADIO_GetPacketCounterRx_39_24(smNo) << 24U);
100476f4:	683b      	ldr	r3, [r7, #0]
100476f6:	681c      	ldr	r4, [r3, #0]
100476f8:	1dfb      	adds	r3, r7, #7
100476fa:	781b      	ldrb	r3, [r3, #0]
100476fc:	0018      	movs	r0, r3
100476fe:	f7ff f847 	bl	10046790 <LL_RADIO_GetPacketCounterRx_39_24>
10047702:	0003      	movs	r3, r0
10047704:	061b      	lsls	r3, r3, #24
10047706:	0022      	movs	r2, r4
10047708:	431a      	orrs	r2, r3
1004770a:	683b      	ldr	r3, [r7, #0]
1004770c:	601a      	str	r2, [r3, #0]
    packetCount[1] = LL_RADIO_GetPacketCounterRx_39_24(smNo) >> 8U;
1004770e:	1dfb      	adds	r3, r7, #7
10047710:	781b      	ldrb	r3, [r3, #0]
10047712:	0018      	movs	r0, r3
10047714:	f7ff f83c 	bl	10046790 <LL_RADIO_GetPacketCounterRx_39_24>
10047718:	0002      	movs	r2, r0
1004771a:	683b      	ldr	r3, [r7, #0]
1004771c:	3304      	adds	r3, #4
1004771e:	0a12      	lsrs	r2, r2, #8
10047720:	601a      	str	r2, [r3, #0]
}
10047722:	46c0      	nop			@ (mov r8, r8)
10047724:	46bd      	mov	sp, r7
10047726:	b003      	add	sp, #12
10047728:	bd90      	pop	{r4, r7, pc}

1004772a <BLEPLAT_CNTR_SmGetRxPhy>:

uint8_t BLEPLAT_CNTR_SmGetRxPhy(uint8_t smNo)
{
1004772a:	b580      	push	{r7, lr}
1004772c:	b082      	sub	sp, #8
1004772e:	af00      	add	r7, sp, #0
10047730:	0002      	movs	r2, r0
10047732:	1dfb      	adds	r3, r7, #7
10047734:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetReceptionPhy(smNo);
10047736:	1dfb      	adds	r3, r7, #7
10047738:	781b      	ldrb	r3, [r3, #0]
1004773a:	0018      	movs	r0, r3
1004773c:	f7fe ff1c 	bl	10046578 <LL_RADIO_GetReceptionPhy>
10047740:	0003      	movs	r3, r0
10047742:	b2db      	uxtb	r3, r3
}
10047744:	0018      	movs	r0, r3
10047746:	46bd      	mov	sp, r7
10047748:	b002      	add	sp, #8
1004774a:	bd80      	pop	{r7, pc}

1004774c <BLEPLAT_CNTR_SmGetTxPhy>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPoint(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetTxPhy(uint8_t smNo)
{
1004774c:	b580      	push	{r7, lr}
1004774e:	b082      	sub	sp, #8
10047750:	af00      	add	r7, sp, #0
10047752:	0002      	movs	r2, r0
10047754:	1dfb      	adds	r3, r7, #7
10047756:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetTransmissionPhy(smNo);
10047758:	1dfb      	adds	r3, r7, #7
1004775a:	781b      	ldrb	r3, [r3, #0]
1004775c:	0018      	movs	r0, r3
1004775e:	f7fe fea3 	bl	100464a8 <LL_RADIO_GetTransmissionPhy>
10047762:	0003      	movs	r3, r0
10047764:	b2db      	uxtb	r3, r3
}
10047766:	0018      	movs	r0, r3
10047768:	46bd      	mov	sp, r7
1004776a:	b002      	add	sp, #8
1004776c:	bd80      	pop	{r7, pc}

1004776e <BLEPLAT_CNTR_SmGetTxPwr>:

uint8_t BLEPLAT_CNTR_SmGetTxPwr(uint8_t smNo)
{
1004776e:	b590      	push	{r4, r7, lr}
10047770:	b085      	sub	sp, #20
10047772:	af00      	add	r7, sp, #0
10047774:	0002      	movs	r2, r0
10047776:	1dfb      	adds	r3, r7, #7
10047778:	701a      	strb	r2, [r3, #0]
    uint8_t pa_level = LL_RADIO_GetPAPower(smNo);
1004777a:	1dfb      	adds	r3, r7, #7
1004777c:	781b      	ldrb	r3, [r3, #0]
1004777e:	0018      	movs	r0, r3
10047780:	f7ff f950 	bl	10046a24 <LL_RADIO_GetPAPower>
10047784:	0002      	movs	r2, r0
10047786:	240f      	movs	r4, #15
10047788:	193b      	adds	r3, r7, r4
1004778a:	701a      	strb	r2, [r3, #0]

#if defined(STM32WB09)
    if (LL_RADIO_TxHp_IsEnabled(smNo) && (pa_level == MAX_PA_LEVEL))
1004778c:	1dfb      	adds	r3, r7, #7
1004778e:	781b      	ldrb	r3, [r3, #0]
10047790:	0018      	movs	r0, r3
10047792:	f7ff f907 	bl	100469a4 <LL_RADIO_TxHp_IsEnabled>
10047796:	1e03      	subs	r3, r0, #0
10047798:	d006      	beq.n	100477a8 <BLEPLAT_CNTR_SmGetTxPwr+0x3a>
1004779a:	193b      	adds	r3, r7, r4
1004779c:	781b      	ldrb	r3, [r3, #0]
1004779e:	2b1f      	cmp	r3, #31
100477a0:	d102      	bne.n	100477a8 <BLEPLAT_CNTR_SmGetTxPwr+0x3a>
    {
        pa_level = HP_PA_LEVEL;
100477a2:	193b      	adds	r3, r7, r4
100477a4:	2220      	movs	r2, #32
100477a6:	701a      	strb	r2, [r3, #0]
    }
#endif
    return pa_level;
100477a8:	230f      	movs	r3, #15
100477aa:	18fb      	adds	r3, r7, r3
100477ac:	781b      	ldrb	r3, [r3, #0]
}
100477ae:	0018      	movs	r0, r3
100477b0:	46bd      	mov	sp, r7
100477b2:	b005      	add	sp, #20
100477b4:	bd90      	pop	{r4, r7, pc}
	...

100477b8 <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
100477b8:	b580      	push	{r7, lr}
100477ba:	b082      	sub	sp, #8
100477bc:	af00      	add	r7, sp, #0
100477be:	0002      	movs	r2, r0
100477c0:	1dfb      	adds	r3, r7, #7
100477c2:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
100477c4:	1dfb      	adds	r3, r7, #7
100477c6:	781b      	ldrb	r3, [r3, #0]
100477c8:	225c      	movs	r2, #92	@ 0x5c
100477ca:	4353      	muls	r3, r2
100477cc:	4a08      	ldr	r2, [pc, #32]	@ (100477f0 <BLEPLAT_CNTR_SmInitTo0+0x38>)
100477ce:	4694      	mov	ip, r2
100477d0:	4463      	add	r3, ip
100477d2:	225c      	movs	r2, #92	@ 0x5c
100477d4:	2100      	movs	r1, #0
100477d6:	0018      	movs	r0, r3
100477d8:	f020 f8a4 	bl	10067924 <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
100477dc:	1dfb      	adds	r3, r7, #7
100477de:	781b      	ldrb	r3, [r3, #0]
100477e0:	2101      	movs	r1, #1
100477e2:	0018      	movs	r0, r3
100477e4:	f7ff fe8c 	bl	10047500 <BLEPLAT_CNTR_SmEnRadioConfig>
}
100477e8:	46c0      	nop			@ (mov r8, r8)
100477ea:	46bd      	mov	sp, r7
100477ec:	b002      	add	sp, #8
100477ee:	bd80      	pop	{r7, pc}
100477f0:	200000dc 	.word	0x200000dc

100477f4 <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
100477f4:	b580      	push	{r7, lr}
100477f6:	b082      	sub	sp, #8
100477f8:	af00      	add	r7, sp, #0
100477fa:	0002      	movs	r2, r0
100477fc:	6039      	str	r1, [r7, #0]
100477fe:	1dfb      	adds	r3, r7, #7
10047800:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
10047802:	683a      	ldr	r2, [r7, #0]
10047804:	1dfb      	adds	r3, r7, #7
10047806:	781b      	ldrb	r3, [r3, #0]
10047808:	0011      	movs	r1, r2
1004780a:	0018      	movs	r0, r3
1004780c:	f7ff f816 	bl	1004683c <LL_RADIO_SetAccessAddress>
}
10047810:	46c0      	nop			@ (mov r8, r8)
10047812:	46bd      	mov	sp, r7
10047814:	b002      	add	sp, #8
10047816:	bd80      	pop	{r7, pc}

10047818 <BLEPLAT_CNTR_SmSetChannelMap>:

void BLEPLAT_CNTR_SmSetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
10047818:	b580      	push	{r7, lr}
1004781a:	b084      	sub	sp, #16
1004781c:	af00      	add	r7, sp, #0
1004781e:	0002      	movs	r2, r0
10047820:	6039      	str	r1, [r7, #0]
10047822:	1dfb      	adds	r3, r7, #7
10047824:	701a      	strb	r2, [r3, #0]
    uint32_t value = (uint32_t)chanMap[0] | ((uint32_t)chanMap[1] << 8U);
10047826:	683b      	ldr	r3, [r7, #0]
10047828:	781b      	ldrb	r3, [r3, #0]
1004782a:	001a      	movs	r2, r3
1004782c:	683b      	ldr	r3, [r7, #0]
1004782e:	3301      	adds	r3, #1
10047830:	781b      	ldrb	r3, [r3, #0]
10047832:	021b      	lsls	r3, r3, #8
10047834:	4313      	orrs	r3, r2
10047836:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_15_0(smNo, value);
10047838:	68fa      	ldr	r2, [r7, #12]
1004783a:	1dfb      	adds	r3, r7, #7
1004783c:	781b      	ldrb	r3, [r3, #0]
1004783e:	0011      	movs	r1, r2
10047840:	0018      	movs	r0, r3
10047842:	f7ff f945 	bl	10046ad0 <LL_RADIO_SetUsedChannelFlags_15_0>
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
10047846:	683b      	ldr	r3, [r7, #0]
10047848:	3302      	adds	r3, #2
1004784a:	781b      	ldrb	r3, [r3, #0]
1004784c:	001a      	movs	r2, r3
1004784e:	683b      	ldr	r3, [r7, #0]
10047850:	3303      	adds	r3, #3
10047852:	781b      	ldrb	r3, [r3, #0]
10047854:	021b      	lsls	r3, r3, #8
10047856:	431a      	orrs	r2, r3
10047858:	683b      	ldr	r3, [r7, #0]
1004785a:	3304      	adds	r3, #4
1004785c:	781b      	ldrb	r3, [r3, #0]
1004785e:	041b      	lsls	r3, r3, #16
10047860:	4313      	orrs	r3, r2
10047862:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
10047864:	68fa      	ldr	r2, [r7, #12]
10047866:	1dfb      	adds	r3, r7, #7
10047868:	781b      	ldrb	r3, [r3, #0]
1004786a:	0011      	movs	r1, r2
1004786c:	0018      	movs	r0, r3
1004786e:	f7ff f969 	bl	10046b44 <LL_RADIO_SetUsedChannelFlags_36_16>
}
10047872:	46c0      	nop			@ (mov r8, r8)
10047874:	46bd      	mov	sp, r7
10047876:	b004      	add	sp, #16
10047878:	bd80      	pop	{r7, pc}

1004787a <BLEPLAT_CNTR_SmSetCrcInit>:

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
1004787a:	b580      	push	{r7, lr}
1004787c:	b082      	sub	sp, #8
1004787e:	af00      	add	r7, sp, #0
10047880:	0002      	movs	r2, r0
10047882:	6039      	str	r1, [r7, #0]
10047884:	1dfb      	adds	r3, r7, #7
10047886:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
10047888:	683a      	ldr	r2, [r7, #0]
1004788a:	1dfb      	adds	r3, r7, #7
1004788c:	781b      	ldrb	r3, [r3, #0]
1004788e:	0011      	movs	r1, r2
10047890:	0018      	movs	r0, r3
10047892:	f7ff f805 	bl	100468a0 <LL_RADIO_SetCRCInitializationValue>
}
10047896:	46c0      	nop			@ (mov r8, r8)
10047898:	46bd      	mov	sp, r7
1004789a:	b002      	add	sp, #8
1004789c:	bd80      	pop	{r7, pc}

1004789e <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
1004789e:	b580      	push	{r7, lr}
100478a0:	b082      	sub	sp, #8
100478a2:	af00      	add	r7, sp, #0
100478a4:	0002      	movs	r2, r0
100478a6:	1dfb      	adds	r3, r7, #7
100478a8:	701a      	strb	r2, [r3, #0]
100478aa:	1dbb      	adds	r3, r7, #6
100478ac:	1c0a      	adds	r2, r1, #0
100478ae:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
100478b0:	1dbb      	adds	r3, r7, #6
100478b2:	781a      	ldrb	r2, [r3, #0]
100478b4:	1dfb      	adds	r3, r7, #7
100478b6:	781b      	ldrb	r3, [r3, #0]
100478b8:	0011      	movs	r1, r2
100478ba:	0018      	movs	r0, r3
100478bc:	f7ff f814 	bl	100468e8 <LL_RADIO_SetMaximumReceiveLength>
}
100478c0:	46c0      	nop			@ (mov r8, r8)
100478c2:	46bd      	mov	sp, r7
100478c4:	b002      	add	sp, #8
100478c6:	bd80      	pop	{r7, pc}

100478c8 <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
100478c8:	b580      	push	{r7, lr}
100478ca:	b082      	sub	sp, #8
100478cc:	af00      	add	r7, sp, #0
100478ce:	0002      	movs	r2, r0
100478d0:	1dfb      	adds	r3, r7, #7
100478d2:	701a      	strb	r2, [r3, #0]
100478d4:	1dbb      	adds	r3, r7, #6
100478d6:	1c0a      	adds	r2, r1, #0
100478d8:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
100478da:	1dbb      	adds	r3, r7, #6
100478dc:	781a      	ldrb	r2, [r3, #0]
100478de:	1dfb      	adds	r3, r7, #7
100478e0:	781b      	ldrb	r3, [r3, #0]
100478e2:	0011      	movs	r1, r2
100478e4:	0018      	movs	r0, r3
100478e6:	f7ff f8b3 	bl	10046a50 <LL_RADIO_SetHopIncrement>
}
100478ea:	46c0      	nop			@ (mov r8, r8)
100478ec:	46bd      	mov	sp, r7
100478ee:	b002      	add	sp, #8
100478f0:	bd80      	pop	{r7, pc}

100478f2 <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
100478f2:	b580      	push	{r7, lr}
100478f4:	b082      	sub	sp, #8
100478f6:	af00      	add	r7, sp, #0
100478f8:	0002      	movs	r2, r0
100478fa:	1dfb      	adds	r3, r7, #7
100478fc:	701a      	strb	r2, [r3, #0]
100478fe:	1dbb      	adds	r3, r7, #6
10047900:	1c0a      	adds	r2, r1, #0
10047902:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
10047904:	1dbb      	adds	r3, r7, #6
10047906:	781a      	ldrb	r2, [r3, #0]
10047908:	1dfb      	adds	r3, r7, #7
1004790a:	781b      	ldrb	r3, [r3, #0]
1004790c:	0011      	movs	r1, r2
1004790e:	0018      	movs	r0, r3
10047910:	f7fe fd02 	bl	10046318 <LL_RADIO_SetRemapChannel>
}
10047914:	46c0      	nop			@ (mov r8, r8)
10047916:	46bd      	mov	sp, r7
10047918:	b002      	add	sp, #8
1004791a:	bd80      	pop	{r7, pc}

1004791c <BLEPLAT_CNTR_SmSetRxCount>:

void BLEPLAT_CNTR_SmSetRxCount(uint8_t smNo, uint32_t* packetCount)
{
1004791c:	b580      	push	{r7, lr}
1004791e:	b084      	sub	sp, #16
10047920:	af00      	add	r7, sp, #0
10047922:	0002      	movs	r2, r0
10047924:	6039      	str	r1, [r7, #0]
10047926:	1dfb      	adds	r3, r7, #7
10047928:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterRx_23_0(smNo, (uint32_t) packetCount[0]);
1004792a:	683b      	ldr	r3, [r7, #0]
1004792c:	681a      	ldr	r2, [r3, #0]
1004792e:	1dfb      	adds	r3, r7, #7
10047930:	781b      	ldrb	r3, [r3, #0]
10047932:	0011      	movs	r1, r2
10047934:	0018      	movs	r0, r3
10047936:	f7fe fecb 	bl	100466d0 <LL_RADIO_SetPacketCounterRx_23_0>
    uint32_t value = (uint32_t)(packetCount[1] << 8U) | (uint32_t)(packetCount[0] >> 24U);
1004793a:	683b      	ldr	r3, [r7, #0]
1004793c:	3304      	adds	r3, #4
1004793e:	681b      	ldr	r3, [r3, #0]
10047940:	021a      	lsls	r2, r3, #8
10047942:	683b      	ldr	r3, [r7, #0]
10047944:	681b      	ldr	r3, [r3, #0]
10047946:	0e1b      	lsrs	r3, r3, #24
10047948:	4313      	orrs	r3, r2
1004794a:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
1004794c:	68fa      	ldr	r2, [r7, #12]
1004794e:	1dfb      	adds	r3, r7, #7
10047950:	781b      	ldrb	r3, [r3, #0]
10047952:	0011      	movs	r1, r2
10047954:	0018      	movs	r0, r3
10047956:	f7fe fef7 	bl	10046748 <LL_RADIO_SetPacketCounterRx_39_24>
}
1004795a:	46c0      	nop			@ (mov r8, r8)
1004795c:	46bd      	mov	sp, r7
1004795e:	b004      	add	sp, #16
10047960:	bd80      	pop	{r7, pc}

10047962 <BLEPLAT_CNTR_SmSetRxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetRxCountDirectionBit(uint8_t smNo)
{
10047962:	b580      	push	{r7, lr}
10047964:	b084      	sub	sp, #16
10047966:	af00      	add	r7, sp, #0
10047968:	0002      	movs	r2, r0
1004796a:	1dfb      	adds	r3, r7, #7
1004796c:	701a      	strb	r2, [r3, #0]
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
1004796e:	1dfb      	adds	r3, r7, #7
10047970:	781b      	ldrb	r3, [r3, #0]
10047972:	0018      	movs	r0, r3
10047974:	f7fe ff0c 	bl	10046790 <LL_RADIO_GetPacketCounterRx_39_24>
10047978:	0002      	movs	r2, r0
1004797a:	2380      	movs	r3, #128	@ 0x80
1004797c:	021b      	lsls	r3, r3, #8
1004797e:	4313      	orrs	r3, r2
10047980:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10047982:	68fa      	ldr	r2, [r7, #12]
10047984:	1dfb      	adds	r3, r7, #7
10047986:	781b      	ldrb	r3, [r3, #0]
10047988:	0011      	movs	r1, r2
1004798a:	0018      	movs	r0, r3
1004798c:	f7fe fedc 	bl	10046748 <LL_RADIO_SetPacketCounterRx_39_24>
}
10047990:	46c0      	nop			@ (mov r8, r8)
10047992:	46bd      	mov	sp, r7
10047994:	b004      	add	sp, #16
10047996:	bd80      	pop	{r7, pc}

10047998 <BLEPLAT_CNTR_SmSetRxMode>:

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
10047998:	b580      	push	{r7, lr}
1004799a:	b082      	sub	sp, #8
1004799c:	af00      	add	r7, sp, #0
1004799e:	0002      	movs	r2, r0
100479a0:	1dfb      	adds	r3, r7, #7
100479a2:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
100479a4:	1dfb      	adds	r3, r7, #7
100479a6:	781b      	ldrb	r3, [r3, #0]
100479a8:	0018      	movs	r0, r3
100479aa:	f7fe fc7b 	bl	100462a4 <LL_RADIO_TxMode_Disable>
}
100479ae:	46c0      	nop			@ (mov r8, r8)
100479b0:	46bd      	mov	sp, r7
100479b2:	b002      	add	sp, #8
100479b4:	bd80      	pop	{r7, pc}

100479b6 <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100479b6:	b580      	push	{r7, lr}
100479b8:	b082      	sub	sp, #8
100479ba:	af00      	add	r7, sp, #0
100479bc:	0002      	movs	r2, r0
100479be:	6039      	str	r1, [r7, #0]
100479c0:	1dfb      	adds	r3, r7, #7
100479c2:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
100479c4:	683a      	ldr	r2, [r7, #0]
100479c6:	1dfb      	adds	r3, r7, #7
100479c8:	781b      	ldrb	r3, [r3, #0]
100479ca:	0011      	movs	r1, r2
100479cc:	0018      	movs	r0, r3
100479ce:	f7fe fe09 	bl	100465e4 <LL_RADIO_SetRcvPoint>
}
100479d2:	46c0      	nop			@ (mov r8, r8)
100479d4:	46bd      	mov	sp, r7
100479d6:	b002      	add	sp, #8
100479d8:	bd80      	pop	{r7, pc}

100479da <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
100479da:	b580      	push	{r7, lr}
100479dc:	b082      	sub	sp, #8
100479de:	af00      	add	r7, sp, #0
100479e0:	0002      	movs	r2, r0
100479e2:	1dfb      	adds	r3, r7, #7
100479e4:	701a      	strb	r2, [r3, #0]
100479e6:	1dbb      	adds	r3, r7, #6
100479e8:	1c0a      	adds	r2, r1, #0
100479ea:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
100479ec:	1dbb      	adds	r3, r7, #6
100479ee:	781a      	ldrb	r2, [r3, #0]
100479f0:	1dfb      	adds	r3, r7, #7
100479f2:	781b      	ldrb	r3, [r3, #0]
100479f4:	0011      	movs	r1, r2
100479f6:	0018      	movs	r0, r3
100479f8:	f7fe fd96 	bl	10046528 <LL_RADIO_SetReceptionPhy>
}
100479fc:	46c0      	nop			@ (mov r8, r8)
100479fe:	46bd      	mov	sp, r7
10047a00:	b002      	add	sp, #8
10047a02:	bd80      	pop	{r7, pc}

10047a04 <BLEPLAT_CNTR_SmSetTxCount>:

void BLEPLAT_CNTR_SmSetTxCount(uint8_t smNo, uint32_t* packetCount)
{
10047a04:	b580      	push	{r7, lr}
10047a06:	b082      	sub	sp, #8
10047a08:	af00      	add	r7, sp, #0
10047a0a:	0002      	movs	r2, r0
10047a0c:	6039      	str	r1, [r7, #0]
10047a0e:	1dfb      	adds	r3, r7, #7
10047a10:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterTx_31_0(smNo, (uint32_t) packetCount[0]);
10047a12:	683b      	ldr	r3, [r7, #0]
10047a14:	681a      	ldr	r2, [r3, #0]
10047a16:	1dfb      	adds	r3, r7, #7
10047a18:	781b      	ldrb	r3, [r3, #0]
10047a1a:	0011      	movs	r1, r2
10047a1c:	0018      	movs	r0, r3
10047a1e:	f7fe fdff 	bl	10046620 <LL_RADIO_SetPacketCounterTx_31_0>
    LL_RADIO_SetPacketCounterTx_39_32(smNo, (uint32_t) packetCount[1]);
10047a22:	683b      	ldr	r3, [r7, #0]
10047a24:	3304      	adds	r3, #4
10047a26:	681a      	ldr	r2, [r3, #0]
10047a28:	1dfb      	adds	r3, r7, #7
10047a2a:	781b      	ldrb	r3, [r3, #0]
10047a2c:	0011      	movs	r1, r2
10047a2e:	0018      	movs	r0, r3
10047a30:	f7fe fe14 	bl	1004665c <LL_RADIO_SetPacketCounterTx_39_32>
}
10047a34:	46c0      	nop			@ (mov r8, r8)
10047a36:	46bd      	mov	sp, r7
10047a38:	b002      	add	sp, #8
10047a3a:	bd80      	pop	{r7, pc}

10047a3c <BLEPLAT_CNTR_SmSetTxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetTxCountDirectionBit(uint8_t smNo)
{
10047a3c:	b580      	push	{r7, lr}
10047a3e:	b084      	sub	sp, #16
10047a40:	af00      	add	r7, sp, #0
10047a42:	0002      	movs	r2, r0
10047a44:	1dfb      	adds	r3, r7, #7
10047a46:	701a      	strb	r2, [r3, #0]
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
10047a48:	1dfb      	adds	r3, r7, #7
10047a4a:	781b      	ldrb	r3, [r3, #0]
10047a4c:	0018      	movs	r0, r3
10047a4e:	f7fe fe29 	bl	100466a4 <LL_RADIO_GetPacketCounterTx_39_32>
10047a52:	0003      	movs	r3, r0
10047a54:	2280      	movs	r2, #128	@ 0x80
10047a56:	4313      	orrs	r3, r2
10047a58:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
10047a5a:	68fa      	ldr	r2, [r7, #12]
10047a5c:	1dfb      	adds	r3, r7, #7
10047a5e:	781b      	ldrb	r3, [r3, #0]
10047a60:	0011      	movs	r1, r2
10047a62:	0018      	movs	r0, r3
10047a64:	f7fe fdfa 	bl	1004665c <LL_RADIO_SetPacketCounterTx_39_32>
}
10047a68:	46c0      	nop			@ (mov r8, r8)
10047a6a:	46bd      	mov	sp, r7
10047a6c:	b004      	add	sp, #16
10047a6e:	bd80      	pop	{r7, pc}

10047a70 <BLEPLAT_CNTR_SmSetTxMode>:

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
10047a70:	b580      	push	{r7, lr}
10047a72:	b082      	sub	sp, #8
10047a74:	af00      	add	r7, sp, #0
10047a76:	0002      	movs	r2, r0
10047a78:	1dfb      	adds	r3, r7, #7
10047a7a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
10047a7c:	1dfb      	adds	r3, r7, #7
10047a7e:	781b      	ldrb	r3, [r3, #0]
10047a80:	0018      	movs	r0, r3
10047a82:	f7fe fbf1 	bl	10046268 <LL_RADIO_TxMode_Enable>
}
10047a86:	46c0      	nop			@ (mov r8, r8)
10047a88:	46bd      	mov	sp, r7
10047a8a:	b002      	add	sp, #8
10047a8c:	bd80      	pop	{r7, pc}

10047a8e <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10047a8e:	b580      	push	{r7, lr}
10047a90:	b082      	sub	sp, #8
10047a92:	af00      	add	r7, sp, #0
10047a94:	0002      	movs	r2, r0
10047a96:	6039      	str	r1, [r7, #0]
10047a98:	1dfb      	adds	r3, r7, #7
10047a9a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10047a9c:	683a      	ldr	r2, [r7, #0]
10047a9e:	1dfb      	adds	r3, r7, #7
10047aa0:	781b      	ldrb	r3, [r3, #0]
10047aa2:	0011      	movs	r1, r2
10047aa4:	0018      	movs	r0, r3
10047aa6:	f7fe fd7f 	bl	100465a8 <LL_RADIO_SetTxPoint>
}
10047aaa:	46c0      	nop			@ (mov r8, r8)
10047aac:	46bd      	mov	sp, r7
10047aae:	b002      	add	sp, #8
10047ab0:	bd80      	pop	{r7, pc}

10047ab2 <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
10047ab2:	b580      	push	{r7, lr}
10047ab4:	b082      	sub	sp, #8
10047ab6:	af00      	add	r7, sp, #0
10047ab8:	0002      	movs	r2, r0
10047aba:	1dfb      	adds	r3, r7, #7
10047abc:	701a      	strb	r2, [r3, #0]
10047abe:	1dbb      	adds	r3, r7, #6
10047ac0:	1c0a      	adds	r2, r1, #0
10047ac2:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10047ac4:	1dbb      	adds	r3, r7, #6
10047ac6:	781a      	ldrb	r2, [r3, #0]
10047ac8:	1dfb      	adds	r3, r7, #7
10047aca:	781b      	ldrb	r3, [r3, #0]
10047acc:	0011      	movs	r1, r2
10047ace:	0018      	movs	r0, r3
10047ad0:	f7fe fcc2 	bl	10046458 <LL_RADIO_SetTransmissionPhy>
}
10047ad4:	46c0      	nop			@ (mov r8, r8)
10047ad6:	46bd      	mov	sp, r7
10047ad8:	b002      	add	sp, #8
10047ada:	bd80      	pop	{r7, pc}

10047adc <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
10047adc:	b580      	push	{r7, lr}
10047ade:	b082      	sub	sp, #8
10047ae0:	af00      	add	r7, sp, #0
10047ae2:	0002      	movs	r2, r0
10047ae4:	1dfb      	adds	r3, r7, #7
10047ae6:	701a      	strb	r2, [r3, #0]
10047ae8:	1dbb      	adds	r3, r7, #6
10047aea:	1c0a      	adds	r2, r1, #0
10047aec:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  if(paLevel == HP_PA_LEVEL)
10047aee:	1dbb      	adds	r3, r7, #6
10047af0:	781b      	ldrb	r3, [r3, #0]
10047af2:	2b20      	cmp	r3, #32
10047af4:	d108      	bne.n	10047b08 <BLEPLAT_CNTR_SmSetTxPwr+0x2c>
  {
    LL_RADIO_TxHp_Enable(smNo);
10047af6:	1dfb      	adds	r3, r7, #7
10047af8:	781b      	ldrb	r3, [r3, #0]
10047afa:	0018      	movs	r0, r3
10047afc:	f7fe ff16 	bl	1004692c <LL_RADIO_TxHp_Enable>
    paLevel = MAX_PA_LEVEL;
10047b00:	1dbb      	adds	r3, r7, #6
10047b02:	221f      	movs	r2, #31
10047b04:	701a      	strb	r2, [r3, #0]
10047b06:	e004      	b.n	10047b12 <BLEPLAT_CNTR_SmSetTxPwr+0x36>
  }
  else
  {
    LL_RADIO_TxHp_Disable(smNo);
10047b08:	1dfb      	adds	r3, r7, #7
10047b0a:	781b      	ldrb	r3, [r3, #0]
10047b0c:	0018      	movs	r0, r3
10047b0e:	f7fe ff2b 	bl	10046968 <LL_RADIO_TxHp_Disable>
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
10047b12:	1dbb      	adds	r3, r7, #6
10047b14:	781a      	ldrb	r2, [r3, #0]
10047b16:	1dfb      	adds	r3, r7, #7
10047b18:	781b      	ldrb	r3, [r3, #0]
10047b1a:	0011      	movs	r1, r2
10047b1c:	0018      	movs	r0, r3
10047b1e:	f7fe ff5d 	bl	100469dc <LL_RADIO_SetPAPower>
}
10047b22:	46c0      	nop			@ (mov r8, r8)
10047b24:	46bd      	mov	sp, r7
10047b26:	b002      	add	sp, #8
10047b28:	bd80      	pop	{r7, pc}

10047b2a <BLEPLAT_CNTR_SmSetUnmappedChan>:

void BLEPLAT_CNTR_SmSetUnmappedChan(uint8_t smNo, uint8_t chan)
{
10047b2a:	b580      	push	{r7, lr}
10047b2c:	b082      	sub	sp, #8
10047b2e:	af00      	add	r7, sp, #0
10047b30:	0002      	movs	r2, r0
10047b32:	1dfb      	adds	r3, r7, #7
10047b34:	701a      	strb	r2, [r3, #0]
10047b36:	1dbb      	adds	r3, r7, #6
10047b38:	1c0a      	adds	r2, r1, #0
10047b3a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetUnmappedChannel(smNo, (uint32_t) chan);
10047b3c:	1dbb      	adds	r3, r7, #6
10047b3e:	781a      	ldrb	r2, [r3, #0]
10047b40:	1dfb      	adds	r3, r7, #7
10047b42:	781b      	ldrb	r3, [r3, #0]
10047b44:	0011      	movs	r1, r2
10047b46:	0018      	movs	r0, r3
10047b48:	f7fe fb2e 	bl	100461a8 <LL_RADIO_SetUnmappedChannel>
}
10047b4c:	46c0      	nop			@ (mov r8, r8)
10047b4e:	46bd      	mov	sp, r7
10047b50:	b002      	add	sp, #8
10047b52:	bd80      	pop	{r7, pc}

10047b54 <BLEPLAT_CNTR_SmToggleNesn>:

void BLEPLAT_CNTR_SmToggleNesn(uint8_t smNo)
{
10047b54:	b580      	push	{r7, lr}
10047b56:	b082      	sub	sp, #8
10047b58:	af00      	add	r7, sp, #0
10047b5a:	0002      	movs	r2, r0
10047b5c:	1dfb      	adds	r3, r7, #7
10047b5e:	701a      	strb	r2, [r3, #0]
  LL_RADIO_ToggleNextExpectedSequenceNumber(smNo);
10047b60:	1dfb      	adds	r3, r7, #7
10047b62:	781b      	ldrb	r3, [r3, #0]
10047b64:	0018      	movs	r0, r3
10047b66:	f7fe fc17 	bl	10046398 <LL_RADIO_ToggleNextExpectedSequenceNumber>
}
10047b6a:	46c0      	nop			@ (mov r8, r8)
10047b6c:	46bd      	mov	sp, r7
10047b6e:	b002      	add	sp, #8
10047b70:	bd80      	pop	{r7, pc}

10047b72 <BLEPLAT_CNTR_DemodDelaySt>:
{
    return (uint32_t)(x - y);
}

uint8_t BLEPLAT_CNTR_DemodDelaySt(uint8_t RxPHY)
{
10047b72:	b580      	push	{r7, lr}
10047b74:	b082      	sub	sp, #8
10047b76:	af00      	add	r7, sp, #0
10047b78:	0002      	movs	r2, r0
10047b7a:	1dfb      	adds	r3, r7, #7
10047b7c:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((LL_PHY_CODED == RxPHY) ? 0x9DU : 0x12U);
10047b7e:	1dfb      	adds	r3, r7, #7
10047b80:	781b      	ldrb	r3, [r3, #0]
10047b82:	2b04      	cmp	r3, #4
10047b84:	d101      	bne.n	10047b8a <BLEPLAT_CNTR_DemodDelaySt+0x18>
10047b86:	239d      	movs	r3, #157	@ 0x9d
10047b88:	e000      	b.n	10047b8c <BLEPLAT_CNTR_DemodDelaySt+0x1a>
10047b8a:	2312      	movs	r3, #18
}
10047b8c:	0018      	movs	r0, r3
10047b8e:	46bd      	mov	sp, r7
10047b90:	b002      	add	sp, #8
10047b92:	bd80      	pop	{r7, pc}

10047b94 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10047b94:	4810      	ldr	r0, [pc, #64]	@ (10047bd8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10047b96:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10047b98:	f004 f886 	bl	1004bca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10047b9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10047b9e:	e003      	b.n	10047ba8 <LoopCopyDataInit>

10047ba0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10047ba0:	4b0e      	ldr	r3, [pc, #56]	@ (10047bdc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10047ba2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10047ba4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10047ba6:	3104      	adds	r1, #4

10047ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10047ba8:	480d      	ldr	r0, [pc, #52]	@ (10047be0 <LoopForever+0xa>)
  ldr  r3, =_edata
10047baa:	4b0e      	ldr	r3, [pc, #56]	@ (10047be4 <LoopForever+0xe>)
  adds  r2, r0, r1
10047bac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10047bae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10047bb0:	d3f6      	bcc.n	10047ba0 <CopyDataInit>
  ldr  r2, =_sbss
10047bb2:	4a0d      	ldr	r2, [pc, #52]	@ (10047be8 <LoopForever+0x12>)
  b  LoopFillZerobss
10047bb4:	e002      	b.n	10047bbc <LoopFillZerobss>

10047bb6 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10047bb6:	2300      	movs	r3, #0
  str  r3, [r2]
10047bb8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10047bba:	3204      	adds	r2, #4

10047bbc <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10047bbc:	4b0b      	ldr	r3, [pc, #44]	@ (10047bec <LoopForever+0x16>)
  cmp  r2, r3
10047bbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
10047bc0:	d3f9      	bcc.n	10047bb6 <FillZerobss>
  ldr  r2, =_sbssblue
10047bc2:	4a0b      	ldr	r2, [pc, #44]	@ (10047bf0 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10047bc4:	e002      	b.n	10047bcc <LoopFillZeroBlueRam>

10047bc6 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10047bc6:	2300      	movs	r3, #0
  str  r3, [r2]
10047bc8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10047bca:	3204      	adds	r2, #4

10047bcc <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10047bcc:	4b09      	ldr	r3, [pc, #36]	@ (10047bf4 <LoopForever+0x1e>)
  cmp  r2, r3
10047bce:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10047bd0:	d3f9      	bcc.n	10047bc6 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10047bd2:	f7fb fae9 	bl	100431a8 <main>

10047bd6 <LoopForever>:

LoopForever:
    b LoopForever
10047bd6:	e7fe      	b.n	10047bd6 <LoopForever>
   ldr   r0, =_estack
10047bd8:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
10047bdc:	1006d62c 	.word	0x1006d62c
  ldr  r0, =_sdata
10047be0:	20001318 	.word	0x20001318
  ldr  r3, =_edata
10047be4:	200016ec 	.word	0x200016ec
  ldr  r2, =_sbss
10047be8:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10047bec:	20001318 	.word	0x20001318
  ldr  r2, =_sbssblue
10047bf0:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10047bf4:	20000194 	.word	0x20000194

10047bf8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10047bf8:	e7fe      	b.n	10047bf8 <ADC_IRQHandler>

10047bfa <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
10047bfa:	b580      	push	{r7, lr}
10047bfc:	b082      	sub	sp, #8
10047bfe:	af00      	add	r7, sp, #0
10047c00:	0002      	movs	r2, r0
10047c02:	1dfb      	adds	r3, r7, #7
10047c04:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10047c06:	46c0      	nop			@ (mov r8, r8)
10047c08:	46bd      	mov	sp, r7
10047c0a:	b002      	add	sp, #8
10047c0c:	bd80      	pop	{r7, pc}

10047c0e <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10047c0e:	b580      	push	{r7, lr}
10047c10:	b082      	sub	sp, #8
10047c12:	af00      	add	r7, sp, #0
10047c14:	0002      	movs	r2, r0
10047c16:	1dfb      	adds	r3, r7, #7
10047c18:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10047c1a:	46c0      	nop			@ (mov r8, r8)
10047c1c:	46bd      	mov	sp, r7
10047c1e:	b002      	add	sp, #8
10047c20:	bd80      	pop	{r7, pc}

10047c22 <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10047c22:	b580      	push	{r7, lr}
10047c24:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
10047c26:	46c0      	nop			@ (mov r8, r8)
10047c28:	46bd      	mov	sp, r7
10047c2a:	bd80      	pop	{r7, pc}

10047c2c <AES_128_HW_enc>:

/* Implementation of the AES 128 required by the crypto library. */
void AES_128_HW_enc(const uint32_t *P_pInputBuffer,
                    uint32_t *P_pOutputBuffer,
                    const uint8_t *P_pKey)
{
10047c2c:	b580      	push	{r7, lr}
10047c2e:	b094      	sub	sp, #80	@ 0x50
10047c30:	af00      	add	r7, sp, #0
10047c32:	60f8      	str	r0, [r7, #12]
10047c34:	60b9      	str	r1, [r7, #8]
10047c36:	607a      	str	r2, [r7, #4]
  uint32_t tmp_key_32[4], input_32[4], output_32[4];
  uint8_t *tmp_key = (uint8_t *)tmp_key_32;
10047c38:	2330      	movs	r3, #48	@ 0x30
10047c3a:	18fb      	adds	r3, r7, r3
10047c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *input = (uint8_t *)input_32;
10047c3e:	2320      	movs	r3, #32
10047c40:	18fb      	adds	r3, r7, r3
10047c42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *output = (uint8_t *)output_32;
10047c44:	2310      	movs	r3, #16
10047c46:	18fb      	adds	r3, r7, r3
10047c48:	643b      	str	r3, [r7, #64]	@ 0x40
  int32_t i;

  for (i = 0; i < 16; i++)
10047c4a:	2300      	movs	r3, #0
10047c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047c4e:	e00d      	b.n	10047c6c <AES_128_HW_enc+0x40>
  {
    tmp_key[15 - i] =  P_pKey[i];
10047c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047c52:	687a      	ldr	r2, [r7, #4]
10047c54:	18d2      	adds	r2, r2, r3
10047c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047c58:	210f      	movs	r1, #15
10047c5a:	1acb      	subs	r3, r1, r3
10047c5c:	0019      	movs	r1, r3
10047c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10047c60:	185b      	adds	r3, r3, r1
10047c62:	7812      	ldrb	r2, [r2, #0]
10047c64:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++)
10047c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047c68:	3301      	adds	r3, #1
10047c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047c6e:	2b0f      	cmp	r3, #15
10047c70:	ddee      	ble.n	10047c50 <AES_128_HW_enc+0x24>
  }

  for (i = 0; i < AES_BLOCK_SIZE; i++)
10047c72:	2300      	movs	r3, #0
10047c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047c76:	e03d      	b.n	10047cf4 <AES_128_HW_enc+0xc8>
  {
    LEW32_2_BUFFER(input, i * 4, P_pInputBuffer[3 - i]);
10047c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047c7a:	2203      	movs	r2, #3
10047c7c:	1ad3      	subs	r3, r2, r3
10047c7e:	009b      	lsls	r3, r3, #2
10047c80:	68fa      	ldr	r2, [r7, #12]
10047c82:	18d3      	adds	r3, r2, r3
10047c84:	681a      	ldr	r2, [r3, #0]
10047c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047c88:	009b      	lsls	r3, r3, #2
10047c8a:	0019      	movs	r1, r3
10047c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10047c8e:	185b      	adds	r3, r3, r1
10047c90:	b2d2      	uxtb	r2, r2
10047c92:	701a      	strb	r2, [r3, #0]
10047c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047c96:	2203      	movs	r2, #3
10047c98:	1ad3      	subs	r3, r2, r3
10047c9a:	009b      	lsls	r3, r3, #2
10047c9c:	68fa      	ldr	r2, [r7, #12]
10047c9e:	18d3      	adds	r3, r2, r3
10047ca0:	681b      	ldr	r3, [r3, #0]
10047ca2:	0a19      	lsrs	r1, r3, #8
10047ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047ca6:	009b      	lsls	r3, r3, #2
10047ca8:	3301      	adds	r3, #1
10047caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10047cac:	18d3      	adds	r3, r2, r3
10047cae:	b2ca      	uxtb	r2, r1
10047cb0:	701a      	strb	r2, [r3, #0]
10047cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047cb4:	2203      	movs	r2, #3
10047cb6:	1ad3      	subs	r3, r2, r3
10047cb8:	009b      	lsls	r3, r3, #2
10047cba:	68fa      	ldr	r2, [r7, #12]
10047cbc:	18d3      	adds	r3, r2, r3
10047cbe:	681b      	ldr	r3, [r3, #0]
10047cc0:	0c19      	lsrs	r1, r3, #16
10047cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047cc4:	009b      	lsls	r3, r3, #2
10047cc6:	3302      	adds	r3, #2
10047cc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10047cca:	18d3      	adds	r3, r2, r3
10047ccc:	b2ca      	uxtb	r2, r1
10047cce:	701a      	strb	r2, [r3, #0]
10047cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047cd2:	2203      	movs	r2, #3
10047cd4:	1ad3      	subs	r3, r2, r3
10047cd6:	009b      	lsls	r3, r3, #2
10047cd8:	68fa      	ldr	r2, [r7, #12]
10047cda:	18d3      	adds	r3, r2, r3
10047cdc:	681b      	ldr	r3, [r3, #0]
10047cde:	0e19      	lsrs	r1, r3, #24
10047ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047ce2:	009b      	lsls	r3, r3, #2
10047ce4:	3303      	adds	r3, #3
10047ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10047ce8:	18d3      	adds	r3, r2, r3
10047cea:	b2ca      	uxtb	r2, r1
10047cec:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
10047cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047cf0:	3301      	adds	r3, #1
10047cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047cf6:	2b03      	cmp	r3, #3
10047cf8:	ddbe      	ble.n	10047c78 <AES_128_HW_enc+0x4c>
  }

  HW_AES_Encrypt(input_32, tmp_key_32, output_32);
10047cfa:	2310      	movs	r3, #16
10047cfc:	18fa      	adds	r2, r7, r3
10047cfe:	2330      	movs	r3, #48	@ 0x30
10047d00:	18f9      	adds	r1, r7, r3
10047d02:	2320      	movs	r3, #32
10047d04:	18fb      	adds	r3, r7, r3
10047d06:	0018      	movs	r0, r3
10047d08:	f000 f894 	bl	10047e34 <HW_AES_Encrypt>

  for (i = 0; i < AES_BLOCK_SIZE; i++)
10047d0c:	2300      	movs	r3, #0
10047d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047d10:	e028      	b.n	10047d64 <AES_128_HW_enc+0x138>
  {
    P_pOutputBuffer[3 - i] = BUFFER_2_LEW32(output, i * 4);
10047d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047d14:	009b      	lsls	r3, r3, #2
10047d16:	3303      	adds	r3, #3
10047d18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10047d1a:	18d3      	adds	r3, r2, r3
10047d1c:	781b      	ldrb	r3, [r3, #0]
10047d1e:	061a      	lsls	r2, r3, #24
10047d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047d22:	009b      	lsls	r3, r3, #2
10047d24:	3302      	adds	r3, #2
10047d26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
10047d28:	18cb      	adds	r3, r1, r3
10047d2a:	781b      	ldrb	r3, [r3, #0]
10047d2c:	041b      	lsls	r3, r3, #16
10047d2e:	431a      	orrs	r2, r3
10047d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047d32:	009b      	lsls	r3, r3, #2
10047d34:	3301      	adds	r3, #1
10047d36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
10047d38:	18cb      	adds	r3, r1, r3
10047d3a:	781b      	ldrb	r3, [r3, #0]
10047d3c:	021b      	lsls	r3, r3, #8
10047d3e:	431a      	orrs	r2, r3
10047d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047d42:	009b      	lsls	r3, r3, #2
10047d44:	0019      	movs	r1, r3
10047d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10047d48:	185b      	adds	r3, r3, r1
10047d4a:	781b      	ldrb	r3, [r3, #0]
10047d4c:	0018      	movs	r0, r3
10047d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047d50:	2103      	movs	r1, #3
10047d52:	1acb      	subs	r3, r1, r3
10047d54:	009b      	lsls	r3, r3, #2
10047d56:	68b9      	ldr	r1, [r7, #8]
10047d58:	18cb      	adds	r3, r1, r3
10047d5a:	4302      	orrs	r2, r0
10047d5c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
10047d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047d60:	3301      	adds	r3, #1
10047d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
10047d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10047d66:	2b03      	cmp	r3, #3
10047d68:	ddd3      	ble.n	10047d12 <AES_128_HW_enc+0xe6>
  }
}
10047d6a:	46c0      	nop			@ (mov r8, r8)
10047d6c:	46c0      	nop			@ (mov r8, r8)
10047d6e:	46bd      	mov	sp, r7
10047d70:	b014      	add	sp, #80	@ 0x50
10047d72:	bd80      	pop	{r7, pc}

10047d74 <LL_APB2_GRP1_EnableClock>:
{
10047d74:	b580      	push	{r7, lr}
10047d76:	b084      	sub	sp, #16
10047d78:	af00      	add	r7, sp, #0
10047d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10047d7c:	4b07      	ldr	r3, [pc, #28]	@ (10047d9c <LL_APB2_GRP1_EnableClock+0x28>)
10047d7e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10047d80:	4b06      	ldr	r3, [pc, #24]	@ (10047d9c <LL_APB2_GRP1_EnableClock+0x28>)
10047d82:	687a      	ldr	r2, [r7, #4]
10047d84:	430a      	orrs	r2, r1
10047d86:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10047d88:	4b04      	ldr	r3, [pc, #16]	@ (10047d9c <LL_APB2_GRP1_EnableClock+0x28>)
10047d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10047d8c:	687a      	ldr	r2, [r7, #4]
10047d8e:	4013      	ands	r3, r2
10047d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047d92:	68fb      	ldr	r3, [r7, #12]
}
10047d94:	46c0      	nop			@ (mov r8, r8)
10047d96:	46bd      	mov	sp, r7
10047d98:	b004      	add	sp, #16
10047d9a:	bd80      	pop	{r7, pc}
10047d9c:	48400000 	.word	0x48400000

10047da0 <LL_APB2_GRP1_IsEnabledClock>:
{
10047da0:	b580      	push	{r7, lr}
10047da2:	b082      	sub	sp, #8
10047da4:	af00      	add	r7, sp, #0
10047da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10047da8:	4b06      	ldr	r3, [pc, #24]	@ (10047dc4 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10047daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10047dac:	687a      	ldr	r2, [r7, #4]
10047dae:	4013      	ands	r3, r2
10047db0:	687a      	ldr	r2, [r7, #4]
10047db2:	429a      	cmp	r2, r3
10047db4:	d101      	bne.n	10047dba <LL_APB2_GRP1_IsEnabledClock+0x1a>
10047db6:	2301      	movs	r3, #1
10047db8:	e000      	b.n	10047dbc <LL_APB2_GRP1_IsEnabledClock+0x1c>
10047dba:	2300      	movs	r3, #0
}
10047dbc:	0018      	movs	r0, r3
10047dbe:	46bd      	mov	sp, r7
10047dc0:	b002      	add	sp, #8
10047dc2:	bd80      	pop	{r7, pc}
10047dc4:	48400000 	.word	0x48400000

10047dc8 <LL_APB2_GRP1_ForceReset>:
{
10047dc8:	b580      	push	{r7, lr}
10047dca:	b082      	sub	sp, #8
10047dcc:	af00      	add	r7, sp, #0
10047dce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10047dd0:	4b04      	ldr	r3, [pc, #16]	@ (10047de4 <LL_APB2_GRP1_ForceReset+0x1c>)
10047dd2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10047dd4:	4b03      	ldr	r3, [pc, #12]	@ (10047de4 <LL_APB2_GRP1_ForceReset+0x1c>)
10047dd6:	687a      	ldr	r2, [r7, #4]
10047dd8:	430a      	orrs	r2, r1
10047dda:	641a      	str	r2, [r3, #64]	@ 0x40
}
10047ddc:	46c0      	nop			@ (mov r8, r8)
10047dde:	46bd      	mov	sp, r7
10047de0:	b002      	add	sp, #8
10047de2:	bd80      	pop	{r7, pc}
10047de4:	48400000 	.word	0x48400000

10047de8 <LL_APB2_GRP1_ReleaseReset>:
{
10047de8:	b580      	push	{r7, lr}
10047dea:	b082      	sub	sp, #8
10047dec:	af00      	add	r7, sp, #0
10047dee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10047df0:	4b05      	ldr	r3, [pc, #20]	@ (10047e08 <LL_APB2_GRP1_ReleaseReset+0x20>)
10047df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10047df4:	687b      	ldr	r3, [r7, #4]
10047df6:	43d9      	mvns	r1, r3
10047df8:	4b03      	ldr	r3, [pc, #12]	@ (10047e08 <LL_APB2_GRP1_ReleaseReset+0x20>)
10047dfa:	400a      	ands	r2, r1
10047dfc:	641a      	str	r2, [r3, #64]	@ 0x40
}
10047dfe:	46c0      	nop			@ (mov r8, r8)
10047e00:	46bd      	mov	sp, r7
10047e02:	b002      	add	sp, #8
10047e04:	bd80      	pop	{r7, pc}
10047e06:	46c0      	nop			@ (mov r8, r8)
10047e08:	48400000 	.word	0x48400000

10047e0c <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
10047e0c:	b580      	push	{r7, lr}
10047e0e:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10047e10:	2001      	movs	r0, #1
10047e12:	f7ff ffc5 	bl	10047da0 <LL_APB2_GRP1_IsEnabledClock>
10047e16:	1e03      	subs	r3, r0, #0
10047e18:	d108      	bne.n	10047e2c <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
10047e1a:	2001      	movs	r0, #1
10047e1c:	f7ff ffd4 	bl	10047dc8 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
10047e20:	2001      	movs	r0, #1
10047e22:	f7ff ffe1 	bl	10047de8 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
10047e26:	2001      	movs	r0, #1
10047e28:	f7ff ffa4 	bl	10047d74 <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
10047e2c:	2300      	movs	r3, #0
}
10047e2e:	0018      	movs	r0, r3
10047e30:	46bd      	mov	sp, r7
10047e32:	bd80      	pop	{r7, pc}

10047e34 <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
10047e34:	b590      	push	{r4, r7, lr}
10047e36:	b087      	sub	sp, #28
10047e38:	af00      	add	r7, sp, #0
10047e3a:	60f8      	str	r0, [r7, #12]
10047e3c:	60b9      	str	r1, [r7, #8]
10047e3e:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
10047e40:	4b31      	ldr	r3, [pc, #196]	@ (10047f08 <HW_AES_Encrypt+0xd4>)
10047e42:	781b      	ldrb	r3, [r3, #0]
10047e44:	b2db      	uxtb	r3, r3
10047e46:	3301      	adds	r3, #1
10047e48:	b2da      	uxtb	r2, r3
10047e4a:	4b2f      	ldr	r3, [pc, #188]	@ (10047f08 <HW_AES_Encrypt+0xd4>)
10047e4c:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
10047e4e:	2417      	movs	r4, #23
10047e50:	193b      	adds	r3, r7, r4
10047e52:	4a2d      	ldr	r2, [pc, #180]	@ (10047f08 <HW_AES_Encrypt+0xd4>)
10047e54:	7812      	ldrb	r2, [r2, #0]
10047e56:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
10047e58:	23c0      	movs	r3, #192	@ 0xc0
10047e5a:	05db      	lsls	r3, r3, #23
10047e5c:	68ba      	ldr	r2, [r7, #8]
10047e5e:	6812      	ldr	r2, [r2, #0]
10047e60:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
10047e62:	68bb      	ldr	r3, [r7, #8]
10047e64:	1d1a      	adds	r2, r3, #4
10047e66:	23c0      	movs	r3, #192	@ 0xc0
10047e68:	05db      	lsls	r3, r3, #23
10047e6a:	6812      	ldr	r2, [r2, #0]
10047e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
10047e6e:	68bb      	ldr	r3, [r7, #8]
10047e70:	3308      	adds	r3, #8
10047e72:	001a      	movs	r2, r3
10047e74:	23c0      	movs	r3, #192	@ 0xc0
10047e76:	05db      	lsls	r3, r3, #23
10047e78:	6812      	ldr	r2, [r2, #0]
10047e7a:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
10047e7c:	68bb      	ldr	r3, [r7, #8]
10047e7e:	330c      	adds	r3, #12
10047e80:	001a      	movs	r2, r3
10047e82:	23c0      	movs	r3, #192	@ 0xc0
10047e84:	05db      	lsls	r3, r3, #23
10047e86:	6812      	ldr	r2, [r2, #0]
10047e88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
10047e8a:	23c0      	movs	r3, #192	@ 0xc0
10047e8c:	05db      	lsls	r3, r3, #23
10047e8e:	68fa      	ldr	r2, [r7, #12]
10047e90:	6812      	ldr	r2, [r2, #0]
10047e92:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
10047e94:	68fb      	ldr	r3, [r7, #12]
10047e96:	1d1a      	adds	r2, r3, #4
10047e98:	23c0      	movs	r3, #192	@ 0xc0
10047e9a:	05db      	lsls	r3, r3, #23
10047e9c:	6812      	ldr	r2, [r2, #0]
10047e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
10047ea0:	68fb      	ldr	r3, [r7, #12]
10047ea2:	3308      	adds	r3, #8
10047ea4:	001a      	movs	r2, r3
10047ea6:	23c0      	movs	r3, #192	@ 0xc0
10047ea8:	05db      	lsls	r3, r3, #23
10047eaa:	6812      	ldr	r2, [r2, #0]
10047eac:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
10047eae:	68fb      	ldr	r3, [r7, #12]
10047eb0:	330c      	adds	r3, #12
10047eb2:	001a      	movs	r2, r3
10047eb4:	23c0      	movs	r3, #192	@ 0xc0
10047eb6:	05db      	lsls	r3, r3, #23
10047eb8:	6812      	ldr	r2, [r2, #0]
10047eba:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
10047ebc:	f000 f826 	bl	10047f0c <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
10047ec0:	23c0      	movs	r3, #192	@ 0xc0
10047ec2:	05db      	lsls	r3, r3, #23
10047ec4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10047ec6:	687b      	ldr	r3, [r7, #4]
10047ec8:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
10047eca:	23c0      	movs	r3, #192	@ 0xc0
10047ecc:	05da      	lsls	r2, r3, #23
10047ece:	687b      	ldr	r3, [r7, #4]
10047ed0:	3304      	adds	r3, #4
10047ed2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
10047ed4:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
10047ed6:	23c0      	movs	r3, #192	@ 0xc0
10047ed8:	05da      	lsls	r2, r3, #23
10047eda:	687b      	ldr	r3, [r7, #4]
10047edc:	3308      	adds	r3, #8
10047ede:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10047ee0:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
10047ee2:	23c0      	movs	r3, #192	@ 0xc0
10047ee4:	05da      	lsls	r2, r3, #23
10047ee6:	687b      	ldr	r3, [r7, #4]
10047ee8:	330c      	adds	r3, #12
10047eea:	6d52      	ldr	r2, [r2, #84]	@ 0x54
10047eec:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
10047eee:	4b06      	ldr	r3, [pc, #24]	@ (10047f08 <HW_AES_Encrypt+0xd4>)
10047ef0:	781b      	ldrb	r3, [r3, #0]
10047ef2:	b2db      	uxtb	r3, r3
10047ef4:	193a      	adds	r2, r7, r4
10047ef6:	7812      	ldrb	r2, [r2, #0]
10047ef8:	429a      	cmp	r2, r3
10047efa:	d1a8      	bne.n	10047e4e <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
10047efc:	2300      	movs	r3, #0
}
10047efe:	0018      	movs	r0, r3
10047f00:	46bd      	mov	sp, r7
10047f02:	b007      	add	sp, #28
10047f04:	bd90      	pop	{r4, r7, pc}
10047f06:	46c0      	nop			@ (mov r8, r8)
10047f08:	2000088c 	.word	0x2000088c

10047f0c <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
10047f0c:	b580      	push	{r7, lr}
10047f0e:	b082      	sub	sp, #8
10047f10:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
10047f12:	1dfb      	adds	r3, r7, #7
10047f14:	2264      	movs	r2, #100	@ 0x64
10047f16:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
10047f18:	23c0      	movs	r3, #192	@ 0xc0
10047f1a:	05db      	lsls	r3, r3, #23
10047f1c:	0018      	movs	r0, r3
10047f1e:	f000 f81c 	bl	10047f5a <LL_AES_StartManualEncription>
    do
    {
        i--;
10047f22:	1dfb      	adds	r3, r7, #7
10047f24:	781b      	ldrb	r3, [r3, #0]
10047f26:	b2db      	uxtb	r3, r3
10047f28:	3b01      	subs	r3, #1
10047f2a:	b2da      	uxtb	r2, r3
10047f2c:	1dfb      	adds	r3, r7, #7
10047f2e:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
10047f30:	23c0      	movs	r3, #192	@ 0xc0
10047f32:	05db      	lsls	r3, r3, #23
10047f34:	0018      	movs	r0, r3
10047f36:	f000 f81e 	bl	10047f76 <LL_AES_IsBusy>
10047f3a:	1e03      	subs	r3, r0, #0
10047f3c:	d005      	beq.n	10047f4a <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
10047f3e:	1dfb      	adds	r3, r7, #7
10047f40:	781b      	ldrb	r3, [r3, #0]
10047f42:	b2db      	uxtb	r3, r3
10047f44:	2b00      	cmp	r3, #0
10047f46:	d1ec      	bne.n	10047f22 <HW_AES_Start+0x16>
10047f48:	e000      	b.n	10047f4c <HW_AES_Start+0x40>
            break;
10047f4a:	46c0      	nop			@ (mov r8, r8)

    return i;
10047f4c:	1dfb      	adds	r3, r7, #7
10047f4e:	781b      	ldrb	r3, [r3, #0]
10047f50:	b2db      	uxtb	r3, r3
}
10047f52:	0018      	movs	r0, r3
10047f54:	46bd      	mov	sp, r7
10047f56:	b002      	add	sp, #8
10047f58:	bd80      	pop	{r7, pc}

10047f5a <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
10047f5a:	b580      	push	{r7, lr}
10047f5c:	b082      	sub	sp, #8
10047f5e:	af00      	add	r7, sp, #0
10047f60:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
10047f62:	687b      	ldr	r3, [r7, #4]
10047f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10047f66:	2201      	movs	r2, #1
10047f68:	431a      	orrs	r2, r3
10047f6a:	687b      	ldr	r3, [r7, #4]
10047f6c:	659a      	str	r2, [r3, #88]	@ 0x58
}
10047f6e:	46c0      	nop			@ (mov r8, r8)
10047f70:	46bd      	mov	sp, r7
10047f72:	b002      	add	sp, #8
10047f74:	bd80      	pop	{r7, pc}

10047f76 <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
10047f76:	b580      	push	{r7, lr}
10047f78:	b082      	sub	sp, #8
10047f7a:	af00      	add	r7, sp, #0
10047f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
10047f7e:	687b      	ldr	r3, [r7, #4]
10047f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10047f82:	2201      	movs	r2, #1
10047f84:	4013      	ands	r3, r2
10047f86:	2b01      	cmp	r3, #1
10047f88:	d101      	bne.n	10047f8e <LL_AES_IsBusy+0x18>
10047f8a:	2301      	movs	r3, #1
10047f8c:	e000      	b.n	10047f90 <LL_AES_IsBusy+0x1a>
10047f8e:	2300      	movs	r3, #0
}
10047f90:	0018      	movs	r0, r3
10047f92:	46bd      	mov	sp, r7
10047f94:	b002      	add	sp, #8
10047f96:	bd80      	pop	{r7, pc}

10047f98 <LL_PKA_Config>:
  *         @arg @ref LL_PKA_MODE_DOUBLE_BASE_LADDER
  *         @arg @ref LL_PKA_MODE_ECC_COMPLETE_ADD
  */

__STATIC_INLINE void LL_PKA_Config(PKA_TypeDef *PKAx, uint32_t Mode)
{
10047f98:	b580      	push	{r7, lr}
10047f9a:	b082      	sub	sp, #8
10047f9c:	af00      	add	r7, sp, #0
10047f9e:	6078      	str	r0, [r7, #4]
10047fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(PKAx->CR, (PKA_CR_MODE), (Mode << PKA_CR_MODE_Pos));
10047fa2:	687b      	ldr	r3, [r7, #4]
10047fa4:	681b      	ldr	r3, [r3, #0]
10047fa6:	4a05      	ldr	r2, [pc, #20]	@ (10047fbc <LL_PKA_Config+0x24>)
10047fa8:	401a      	ands	r2, r3
10047faa:	683b      	ldr	r3, [r7, #0]
10047fac:	021b      	lsls	r3, r3, #8
10047fae:	431a      	orrs	r2, r3
10047fb0:	687b      	ldr	r3, [r7, #4]
10047fb2:	601a      	str	r2, [r3, #0]
}
10047fb4:	46c0      	nop			@ (mov r8, r8)
10047fb6:	46bd      	mov	sp, r7
10047fb8:	b002      	add	sp, #8
10047fba:	bd80      	pop	{r7, pc}
10047fbc:	ffffc0ff 	.word	0xffffc0ff

10047fc0 <LL_PKA_SetMode>:
  *         @arg @ref LL_PKA_MODE_ECC_COMPLETE_ADD
  * @retval None
  */

__STATIC_INLINE void LL_PKA_SetMode(PKA_TypeDef *PKAx, uint32_t Mode)
{
10047fc0:	b580      	push	{r7, lr}
10047fc2:	b082      	sub	sp, #8
10047fc4:	af00      	add	r7, sp, #0
10047fc6:	6078      	str	r0, [r7, #4]
10047fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(PKAx->CR, PKA_CR_MODE, Mode << PKA_CR_MODE_Pos);
10047fca:	687b      	ldr	r3, [r7, #4]
10047fcc:	681b      	ldr	r3, [r3, #0]
10047fce:	4a05      	ldr	r2, [pc, #20]	@ (10047fe4 <LL_PKA_SetMode+0x24>)
10047fd0:	401a      	ands	r2, r3
10047fd2:	683b      	ldr	r3, [r7, #0]
10047fd4:	021b      	lsls	r3, r3, #8
10047fd6:	431a      	orrs	r2, r3
10047fd8:	687b      	ldr	r3, [r7, #4]
10047fda:	601a      	str	r2, [r3, #0]
}
10047fdc:	46c0      	nop			@ (mov r8, r8)
10047fde:	46bd      	mov	sp, r7
10047fe0:	b002      	add	sp, #8
10047fe2:	bd80      	pop	{r7, pc}
10047fe4:	ffffc0ff 	.word	0xffffc0ff

10047fe8 <LL_PKA_SetSecurityLevel>:
  *         @arg @ref LL_PKA_SECURITY_LEVEL_ENABLE
  * @param  PKAx PKA Instance.
  * @retval NONE
  */
__STATIC_INLINE void LL_PKA_SetSecurityLevel(PKA_TypeDef *PKAx, uint32_t arg)
{
10047fe8:	b580      	push	{r7, lr}
10047fea:	b082      	sub	sp, #8
10047fec:	af00      	add	r7, sp, #0
10047fee:	6078      	str	r0, [r7, #4]
10047ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(PKAx->CR, PKA_CR_SECLVL, (arg << PKA_CR_SECLVL_Pos));
10047ff2:	687b      	ldr	r3, [r7, #4]
10047ff4:	681b      	ldr	r3, [r3, #0]
10047ff6:	2204      	movs	r2, #4
10047ff8:	4393      	bics	r3, r2
10047ffa:	001a      	movs	r2, r3
10047ffc:	683b      	ldr	r3, [r7, #0]
10047ffe:	009b      	lsls	r3, r3, #2
10048000:	431a      	orrs	r2, r3
10048002:	687b      	ldr	r3, [r7, #4]
10048004:	601a      	str	r2, [r3, #0]
}
10048006:	46c0      	nop			@ (mov r8, r8)
10048008:	46bd      	mov	sp, r7
1004800a:	b002      	add	sp, #8
1004800c:	bd80      	pop	{r7, pc}

1004800e <LL_PKA_Start>:
  * @rmtoll CR           START         LL_PKA_Start
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_Start(PKA_TypeDef *PKAx)
{
1004800e:	b580      	push	{r7, lr}
10048010:	b082      	sub	sp, #8
10048012:	af00      	add	r7, sp, #0
10048014:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_START);
10048016:	687b      	ldr	r3, [r7, #4]
10048018:	681b      	ldr	r3, [r3, #0]
1004801a:	2202      	movs	r2, #2
1004801c:	431a      	orrs	r2, r3
1004801e:	687b      	ldr	r3, [r7, #4]
10048020:	601a      	str	r2, [r3, #0]
}
10048022:	46c0      	nop			@ (mov r8, r8)
10048024:	46bd      	mov	sp, r7
10048026:	b002      	add	sp, #8
10048028:	bd80      	pop	{r7, pc}

1004802a <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
1004802a:	b580      	push	{r7, lr}
1004802c:	b082      	sub	sp, #8
1004802e:	af00      	add	r7, sp, #0
10048030:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
10048032:	687b      	ldr	r3, [r7, #4]
10048034:	681b      	ldr	r3, [r3, #0]
10048036:	2280      	movs	r2, #128	@ 0x80
10048038:	0352      	lsls	r2, r2, #13
1004803a:	431a      	orrs	r2, r3
1004803c:	687b      	ldr	r3, [r7, #4]
1004803e:	601a      	str	r2, [r3, #0]
}
10048040:	46c0      	nop			@ (mov r8, r8)
10048042:	46bd      	mov	sp, r7
10048044:	b002      	add	sp, #8
10048046:	bd80      	pop	{r7, pc}

10048048 <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
10048048:	b580      	push	{r7, lr}
1004804a:	b082      	sub	sp, #8
1004804c:	af00      	add	r7, sp, #0
1004804e:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
10048050:	687b      	ldr	r3, [r7, #4]
10048052:	681b      	ldr	r3, [r3, #0]
10048054:	2280      	movs	r2, #128	@ 0x80
10048056:	0312      	lsls	r2, r2, #12
10048058:	431a      	orrs	r2, r3
1004805a:	687b      	ldr	r3, [r7, #4]
1004805c:	601a      	str	r2, [r3, #0]
}
1004805e:	46c0      	nop			@ (mov r8, r8)
10048060:	46bd      	mov	sp, r7
10048062:	b002      	add	sp, #8
10048064:	bd80      	pop	{r7, pc}

10048066 <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
10048066:	b580      	push	{r7, lr}
10048068:	b082      	sub	sp, #8
1004806a:	af00      	add	r7, sp, #0
1004806c:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
1004806e:	687b      	ldr	r3, [r7, #4]
10048070:	681b      	ldr	r3, [r3, #0]
10048072:	2280      	movs	r2, #128	@ 0x80
10048074:	0292      	lsls	r2, r2, #10
10048076:	431a      	orrs	r2, r3
10048078:	687b      	ldr	r3, [r7, #4]
1004807a:	601a      	str	r2, [r3, #0]
}
1004807c:	46c0      	nop			@ (mov r8, r8)
1004807e:	46bd      	mov	sp, r7
10048080:	b002      	add	sp, #8
10048082:	bd80      	pop	{r7, pc}

10048084 <LL_PKA_IsActiveFlag_BUSY>:
  * @rmtoll SR           BUSY          LL_PKA_IsActiveFlag_BUSY
  * @param  PKAx PKA Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PKA_IsActiveFlag_BUSY(const PKA_TypeDef *PKAx)
{
10048084:	b580      	push	{r7, lr}
10048086:	b082      	sub	sp, #8
10048088:	af00      	add	r7, sp, #0
1004808a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(PKAx->SR, PKA_SR_BUSY) == (PKA_SR_BUSY)) ? 1UL : 0UL);
1004808c:	687b      	ldr	r3, [r7, #4]
1004808e:	685a      	ldr	r2, [r3, #4]
10048090:	2380      	movs	r3, #128	@ 0x80
10048092:	025b      	lsls	r3, r3, #9
10048094:	401a      	ands	r2, r3
10048096:	2380      	movs	r3, #128	@ 0x80
10048098:	025b      	lsls	r3, r3, #9
1004809a:	429a      	cmp	r2, r3
1004809c:	d101      	bne.n	100480a2 <LL_PKA_IsActiveFlag_BUSY+0x1e>
1004809e:	2301      	movs	r3, #1
100480a0:	e000      	b.n	100480a4 <LL_PKA_IsActiveFlag_BUSY+0x20>
100480a2:	2300      	movs	r3, #0
}
100480a4:	0018      	movs	r0, r3
100480a6:	46bd      	mov	sp, r7
100480a8:	b002      	add	sp, #8
100480aa:	bd80      	pop	{r7, pc}

100480ac <HW_PKA_WriteSingleInput>:
*/

#if defined STM32WB09

void HW_PKA_WriteSingleInput( uint32_t index,  int size, const uint32_t* word )
{
100480ac:	b580      	push	{r7, lr}
100480ae:	b086      	sub	sp, #24
100480b0:	af00      	add	r7, sp, #0
100480b2:	60f8      	str	r0, [r7, #12]
100480b4:	60b9      	str	r1, [r7, #8]
100480b6:	607a      	str	r2, [r7, #4]
  /* Write the single word into PKA RAM */
  for(int i=0; i<size; i++)
100480b8:	2300      	movs	r3, #0
100480ba:	617b      	str	r3, [r7, #20]
100480bc:	e00e      	b.n	100480dc <HW_PKA_WriteSingleInput+0x30>
  {
    PKA->RAM[index++] = *word++;
100480be:	687b      	ldr	r3, [r7, #4]
100480c0:	1d1a      	adds	r2, r3, #4
100480c2:	607a      	str	r2, [r7, #4]
100480c4:	480a      	ldr	r0, [pc, #40]	@ (100480f0 <HW_PKA_WriteSingleInput+0x44>)
100480c6:	68fa      	ldr	r2, [r7, #12]
100480c8:	1c51      	adds	r1, r2, #1
100480ca:	60f9      	str	r1, [r7, #12]
100480cc:	6819      	ldr	r1, [r3, #0]
100480ce:	1c53      	adds	r3, r2, #1
100480d0:	33ff      	adds	r3, #255	@ 0xff
100480d2:	009b      	lsls	r3, r3, #2
100480d4:	5019      	str	r1, [r3, r0]
  for(int i=0; i<size; i++)
100480d6:	697b      	ldr	r3, [r7, #20]
100480d8:	3301      	adds	r3, #1
100480da:	617b      	str	r3, [r7, #20]
100480dc:	697a      	ldr	r2, [r7, #20]
100480de:	68bb      	ldr	r3, [r7, #8]
100480e0:	429a      	cmp	r2, r3
100480e2:	dbec      	blt.n	100480be <HW_PKA_WriteSingleInput+0x12>
  }
}
100480e4:	46c0      	nop			@ (mov r8, r8)
100480e6:	46c0      	nop			@ (mov r8, r8)
100480e8:	46bd      	mov	sp, r7
100480ea:	b006      	add	sp, #24
100480ec:	bd80      	pop	{r7, pc}
100480ee:	46c0      	nop			@ (mov r8, r8)
100480f0:	48300000 	.word	0x48300000

100480f4 <HW_PKA_WriteOperand>:
#endif

#if defined STM32WB09

void HW_PKA_WriteOperand( uint32_t index, int size, const uint32_t* in )
  {
100480f4:	b580      	push	{r7, lr}
100480f6:	b086      	sub	sp, #24
100480f8:	af00      	add	r7, sp, #0
100480fa:	60f8      	str	r0, [r7, #12]
100480fc:	60b9      	str	r1, [r7, #8]
100480fe:	607a      	str	r2, [r7, #4]
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
10048100:	68fb      	ldr	r3, [r7, #12]
10048102:	009b      	lsls	r3, r3, #2
10048104:	4a0f      	ldr	r2, [pc, #60]	@ (10048144 <HW_PKA_WriteOperand+0x50>)
10048106:	4694      	mov	ip, r2
10048108:	4463      	add	r3, ip
1004810a:	617b      	str	r3, [r7, #20]
  /* Write the input data into PKA RAM */
  for ( ; size > 0; size-- )
1004810c:	e00a      	b.n	10048124 <HW_PKA_WriteOperand+0x30>
  {
    *pka_ram++ = *in++;
1004810e:	687a      	ldr	r2, [r7, #4]
10048110:	1d13      	adds	r3, r2, #4
10048112:	607b      	str	r3, [r7, #4]
10048114:	697b      	ldr	r3, [r7, #20]
10048116:	1d19      	adds	r1, r3, #4
10048118:	6179      	str	r1, [r7, #20]
1004811a:	6812      	ldr	r2, [r2, #0]
1004811c:	601a      	str	r2, [r3, #0]
  for ( ; size > 0; size-- )
1004811e:	68bb      	ldr	r3, [r7, #8]
10048120:	3b01      	subs	r3, #1
10048122:	60bb      	str	r3, [r7, #8]
10048124:	68bb      	ldr	r3, [r7, #8]
10048126:	2b00      	cmp	r3, #0
10048128:	dcf1      	bgt.n	1004810e <HW_PKA_WriteOperand+0x1a>
  }
  /* Write extra zeros into PKA RAM */
  *pka_ram++ = 0;
1004812a:	697b      	ldr	r3, [r7, #20]
1004812c:	1d1a      	adds	r2, r3, #4
1004812e:	617a      	str	r2, [r7, #20]
10048130:	2200      	movs	r2, #0
10048132:	601a      	str	r2, [r3, #0]
  *pka_ram = 0;
10048134:	697b      	ldr	r3, [r7, #20]
10048136:	2200      	movs	r2, #0
10048138:	601a      	str	r2, [r3, #0]
}
1004813a:	46c0      	nop			@ (mov r8, r8)
1004813c:	46bd      	mov	sp, r7
1004813e:	b006      	add	sp, #24
10048140:	bd80      	pop	{r7, pc}
10048142:	46c0      	nop			@ (mov r8, r8)
10048144:	48300400 	.word	0x48300400

10048148 <HW_PKA_ReadResult>:

#endif

#if defined(STM32WB05) || defined(STM32WB09)
void HW_PKA_ReadResult( uint32_t index, int size, uint32_t* out )
{
10048148:	b580      	push	{r7, lr}
1004814a:	b086      	sub	sp, #24
1004814c:	af00      	add	r7, sp, #0
1004814e:	60f8      	str	r0, [r7, #12]
10048150:	60b9      	str	r1, [r7, #8]
10048152:	607a      	str	r2, [r7, #4]
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
10048154:	68fb      	ldr	r3, [r7, #12]
10048156:	009b      	lsls	r3, r3, #2
10048158:	4a0b      	ldr	r2, [pc, #44]	@ (10048188 <HW_PKA_ReadResult+0x40>)
1004815a:	4694      	mov	ip, r2
1004815c:	4463      	add	r3, ip
1004815e:	617b      	str	r3, [r7, #20]
  /* Read from PKA RAM */
  for ( ; size > 0; size-- )
10048160:	e00a      	b.n	10048178 <HW_PKA_ReadResult+0x30>
  {
    *out++ = *pka_ram++;
10048162:	697a      	ldr	r2, [r7, #20]
10048164:	1d13      	adds	r3, r2, #4
10048166:	617b      	str	r3, [r7, #20]
10048168:	687b      	ldr	r3, [r7, #4]
1004816a:	1d19      	adds	r1, r3, #4
1004816c:	6079      	str	r1, [r7, #4]
1004816e:	6812      	ldr	r2, [r2, #0]
10048170:	601a      	str	r2, [r3, #0]
  for ( ; size > 0; size-- )
10048172:	68bb      	ldr	r3, [r7, #8]
10048174:	3b01      	subs	r3, #1
10048176:	60bb      	str	r3, [r7, #8]
10048178:	68bb      	ldr	r3, [r7, #8]
1004817a:	2b00      	cmp	r3, #0
1004817c:	dcf1      	bgt.n	10048162 <HW_PKA_ReadResult+0x1a>
  }
}
1004817e:	46c0      	nop			@ (mov r8, r8)
10048180:	46c0      	nop			@ (mov r8, r8)
10048182:	46bd      	mov	sp, r7
10048184:	b006      	add	sp, #24
10048186:	bd80      	pop	{r7, pc}
10048188:	48300400 	.word	0x48300400

1004818c <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
1004818c:	b580      	push	{r7, lr}
1004818e:	af00      	add	r7, sp, #0
  PKAMGR_Init();
10048190:	f002 fa96 	bl	1004a6c0 <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
10048194:	4b07      	ldr	r3, [pc, #28]	@ (100481b4 <HW_PKA_Init+0x28>)
10048196:	0018      	movs	r0, r3
10048198:	f7ff ff47 	bl	1004802a <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
1004819c:	4b05      	ldr	r3, [pc, #20]	@ (100481b4 <HW_PKA_Init+0x28>)
1004819e:	0018      	movs	r0, r3
100481a0:	f7ff ff52 	bl	10048048 <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
100481a4:	4b03      	ldr	r3, [pc, #12]	@ (100481b4 <HW_PKA_Init+0x28>)
100481a6:	0018      	movs	r0, r3
100481a8:	f7ff ff5d 	bl	10048066 <LL_PKA_EnableIT_PROCEND>
}
100481ac:	46c0      	nop			@ (mov r8, r8)
100481ae:	46bd      	mov	sp, r7
100481b0:	bd80      	pop	{r7, pc}
100481b2:	46c0      	nop			@ (mov r8, r8)
100481b4:	48300000 	.word	0x48300000

100481b8 <HW_PKA_PowerSaveLevelCheck>:

uint8_t HW_PKA_PowerSaveLevelCheck(void)
{
100481b8:	b580      	push	{r7, lr}
100481ba:	af00      	add	r7, sp, #0
  if(PKAMGR_SleepCheck()==PKAMGR_SUCCESS)
100481bc:	f002 fa8c 	bl	1004a6d8 <PKAMGR_SleepCheck>
100481c0:	1e03      	subs	r3, r0, #0
100481c2:	d101      	bne.n	100481c8 <HW_PKA_PowerSaveLevelCheck+0x10>
  {
    return POWER_SAVE_LEVEL_STOP;
100481c4:	2303      	movs	r3, #3
100481c6:	e000      	b.n	100481ca <HW_PKA_PowerSaveLevelCheck+0x12>
  }
  else // PKA on going
  {
    return POWER_SAVE_LEVEL_CPU_HALT;
100481c8:	2301      	movs	r3, #1
  }
}
100481ca:	0018      	movs	r0, r3
100481cc:	46bd      	mov	sp, r7
100481ce:	bd80      	pop	{r7, pc}

100481d0 <HW_PKA_StartP256DHkeyGeneration>:
  * @param
  * @param
  *
  */
PKAMGR_ResultStatus HW_PKA_StartP256DHkeyGeneration(const uint32_t* secretKey, const uint32_t* publicKey, PKAMGR_funcCB funcCB)
{
100481d0:	b580      	push	{r7, lr}
100481d2:	b086      	sub	sp, #24
100481d4:	af00      	add	r7, sp, #0
100481d6:	60f8      	str	r0, [r7, #12]
100481d8:	60b9      	str	r1, [r7, #8]
100481da:	607a      	str	r2, [r7, #4]
  /* Set the PKA internal state to busy */
  if(PKAMGR_Lock()!=PKAMGR_SUCCESS)
100481dc:	f002 fa92 	bl	1004a704 <PKAMGR_Lock>
100481e0:	1e03      	subs	r3, r0, #0
100481e2:	d002      	beq.n	100481ea <HW_PKA_StartP256DHkeyGeneration+0x1a>
    return PKAMGR_ERR_BUSY;
100481e4:	2302      	movs	r3, #2
100481e6:	425b      	negs	r3, r3
100481e8:	e096      	b.n	10048318 <HW_PKA_StartP256DHkeyGeneration+0x148>

  HW_PKA_funcCB_LP = funcCB;
100481ea:	4b4d      	ldr	r3, [pc, #308]	@ (10048320 <HW_PKA_StartP256DHkeyGeneration+0x150>)
100481ec:	687a      	ldr	r2, [r7, #4]
100481ee:	601a      	str	r2, [r3, #0]
#if defined(STM32WB09) || defined(STM32WB05)
  /* Save input data */
  for(int i=0;i<8;i++)
100481f0:	2300      	movs	r3, #0
100481f2:	617b      	str	r3, [r7, #20]
100481f4:	e00b      	b.n	1004820e <HW_PKA_StartP256DHkeyGeneration+0x3e>
    bufferSecretKey[i] = secretKey[i];
100481f6:	697b      	ldr	r3, [r7, #20]
100481f8:	009b      	lsls	r3, r3, #2
100481fa:	68fa      	ldr	r2, [r7, #12]
100481fc:	18d3      	adds	r3, r2, r3
100481fe:	6819      	ldr	r1, [r3, #0]
10048200:	4b48      	ldr	r3, [pc, #288]	@ (10048324 <HW_PKA_StartP256DHkeyGeneration+0x154>)
10048202:	697a      	ldr	r2, [r7, #20]
10048204:	0092      	lsls	r2, r2, #2
10048206:	50d1      	str	r1, [r2, r3]
  for(int i=0;i<8;i++)
10048208:	697b      	ldr	r3, [r7, #20]
1004820a:	3301      	adds	r3, #1
1004820c:	617b      	str	r3, [r7, #20]
1004820e:	697b      	ldr	r3, [r7, #20]
10048210:	2b07      	cmp	r3, #7
10048212:	ddf0      	ble.n	100481f6 <HW_PKA_StartP256DHkeyGeneration+0x26>
  for(int i=0;i<16;i++)
10048214:	2300      	movs	r3, #0
10048216:	613b      	str	r3, [r7, #16]
10048218:	e00b      	b.n	10048232 <HW_PKA_StartP256DHkeyGeneration+0x62>
    bufferPublicKey[i] = publicKey[i];
1004821a:	693b      	ldr	r3, [r7, #16]
1004821c:	009b      	lsls	r3, r3, #2
1004821e:	68ba      	ldr	r2, [r7, #8]
10048220:	18d3      	adds	r3, r2, r3
10048222:	6819      	ldr	r1, [r3, #0]
10048224:	4b40      	ldr	r3, [pc, #256]	@ (10048328 <HW_PKA_StartP256DHkeyGeneration+0x158>)
10048226:	693a      	ldr	r2, [r7, #16]
10048228:	0092      	lsls	r2, r2, #2
1004822a:	50d1      	str	r1, [r2, r3]
  for(int i=0;i<16;i++)
1004822c:	693b      	ldr	r3, [r7, #16]
1004822e:	3301      	adds	r3, #1
10048230:	613b      	str	r3, [r7, #16]
10048232:	693b      	ldr	r3, [r7, #16]
10048234:	2b0f      	cmp	r3, #15
10048236:	ddf0      	ble.n	1004821a <HW_PKA_StartP256DHkeyGeneration+0x4a>

  if(HW_PKA_isStartPoint(publicKey))
10048238:	68bb      	ldr	r3, [r7, #8]
1004823a:	0018      	movs	r0, r3
1004823c:	f000 fa8e 	bl	1004875c <HW_PKA_isStartPoint>
10048240:	1e03      	subs	r3, r0, #0
10048242:	d00e      	beq.n	10048262 <HW_PKA_StartP256DHkeyGeneration+0x92>
  {
    /* p256 public key generation */
    internalStateMachine_Step = HW_PKA_STEP_3;
10048244:	4b39      	ldr	r3, [pc, #228]	@ (1004832c <HW_PKA_StartP256DHkeyGeneration+0x15c>)
10048246:	2203      	movs	r2, #3
10048248:	601a      	str	r2, [r3, #0]
    internalStateMachine_Operation = HW_PKA_OPERATION_P256;
1004824a:	4b39      	ldr	r3, [pc, #228]	@ (10048330 <HW_PKA_StartP256DHkeyGeneration+0x160>)
1004824c:	2201      	movs	r2, #1
1004824e:	601a      	str	r2, [r3, #0]
    HW_PKA_P256_StartEccScalarMul( secretKey, (uint32_t *)&publicKey[0], (uint32_t *)&publicKey[8] );
10048250:	68bb      	ldr	r3, [r7, #8]
10048252:	3320      	adds	r3, #32
10048254:	001a      	movs	r2, r3
10048256:	68b9      	ldr	r1, [r7, #8]
10048258:	68fb      	ldr	r3, [r7, #12]
1004825a:	0018      	movs	r0, r3
1004825c:	f000 f976 	bl	1004854c <HW_PKA_P256_StartEccScalarMul>
10048260:	e059      	b.n	10048316 <HW_PKA_StartP256DHkeyGeneration+0x146>
  }
  else
  {
    /* p256 dhkey generation */
    internalStateMachine_Step = HW_PKA_STEP_0;
10048262:	4b32      	ldr	r3, [pc, #200]	@ (1004832c <HW_PKA_StartP256DHkeyGeneration+0x15c>)
10048264:	2200      	movs	r2, #0
10048266:	601a      	str	r2, [r3, #0]
    internalStateMachine_Operation = HW_PKA_OPERATION_P256;
10048268:	4b31      	ldr	r3, [pc, #196]	@ (10048330 <HW_PKA_StartP256DHkeyGeneration+0x160>)
1004826a:	2201      	movs	r2, #1
1004826c:	601a      	str	r2, [r3, #0]
    /* Call the PKA range check operation for public key X coordinate */
    HW_PKA_Comparison(HW_PKA_oplen, (uint32_t *)&publicKey[0], HW_PKA_P256_gfp);
1004826e:	4a31      	ldr	r2, [pc, #196]	@ (10048334 <HW_PKA_StartP256DHkeyGeneration+0x164>)
10048270:	68b9      	ldr	r1, [r7, #8]
10048272:	4b31      	ldr	r3, [pc, #196]	@ (10048338 <HW_PKA_StartP256DHkeyGeneration+0x168>)
10048274:	0018      	movs	r0, r3
10048276:	f000 f9cd 	bl	10048614 <HW_PKA_Comparison>

#if !defined(ASYNC_MODE)
    // blocking mode (initial check steps interval time: 0.476ms)
    while(internalStateMachine_Step!=HW_PKA_STEP_1);
1004827a:	46c0      	nop			@ (mov r8, r8)
1004827c:	4b2b      	ldr	r3, [pc, #172]	@ (1004832c <HW_PKA_StartP256DHkeyGeneration+0x15c>)
1004827e:	681b      	ldr	r3, [r3, #0]
10048280:	2b01      	cmp	r3, #1
10048282:	d1fb      	bne.n	1004827c <HW_PKA_StartP256DHkeyGeneration+0xac>

    /* Test result of range check operation for public key X coordinate */
    if( !HW_PKA_IsRangeCheckOk() )
10048284:	f000 f942 	bl	1004850c <HW_PKA_IsRangeCheckOk>
10048288:	1e03      	subs	r3, r0, #0
1004828a:	d10a      	bne.n	100482a2 <HW_PKA_StartP256DHkeyGeneration+0xd2>
    {
      internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
1004828c:	4b28      	ldr	r3, [pc, #160]	@ (10048330 <HW_PKA_StartP256DHkeyGeneration+0x160>)
1004828e:	2200      	movs	r2, #0
10048290:	601a      	str	r2, [r3, #0]
      internalStateMachine_Step = HW_PKA_STEP_0;
10048292:	4b26      	ldr	r3, [pc, #152]	@ (1004832c <HW_PKA_StartP256DHkeyGeneration+0x15c>)
10048294:	2200      	movs	r2, #0
10048296:	601a      	str	r2, [r3, #0]
      PKAMGR_Unlock();
10048298:	f002 fa5e 	bl	1004a758 <PKAMGR_Unlock>
      return PKAMGR_ERR_PARAM;
1004829c:	2303      	movs	r3, #3
1004829e:	425b      	negs	r3, r3
100482a0:	e03a      	b.n	10048318 <HW_PKA_StartP256DHkeyGeneration+0x148>
    }
    else
    {
      /* Call the PKA range check operation for public key Y coordinate */
      HW_PKA_Comparison(HW_PKA_oplen, (uint32_t *)&bufferPublicKey[8], HW_PKA_P256_gfp);
100482a2:	4a24      	ldr	r2, [pc, #144]	@ (10048334 <HW_PKA_StartP256DHkeyGeneration+0x164>)
100482a4:	4925      	ldr	r1, [pc, #148]	@ (1004833c <HW_PKA_StartP256DHkeyGeneration+0x16c>)
100482a6:	4b24      	ldr	r3, [pc, #144]	@ (10048338 <HW_PKA_StartP256DHkeyGeneration+0x168>)
100482a8:	0018      	movs	r0, r3
100482aa:	f000 f9b3 	bl	10048614 <HW_PKA_Comparison>
    }

    while(internalStateMachine_Step!=HW_PKA_STEP_2);
100482ae:	46c0      	nop			@ (mov r8, r8)
100482b0:	4b1e      	ldr	r3, [pc, #120]	@ (1004832c <HW_PKA_StartP256DHkeyGeneration+0x15c>)
100482b2:	681b      	ldr	r3, [r3, #0]
100482b4:	2b02      	cmp	r3, #2
100482b6:	d1fb      	bne.n	100482b0 <HW_PKA_StartP256DHkeyGeneration+0xe0>

    /* Test result of range check operation for public key X coordinate */
    if( !HW_PKA_IsRangeCheckOk() )
100482b8:	f000 f928 	bl	1004850c <HW_PKA_IsRangeCheckOk>
100482bc:	1e03      	subs	r3, r0, #0
100482be:	d10a      	bne.n	100482d6 <HW_PKA_StartP256DHkeyGeneration+0x106>
    {
      internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
100482c0:	4b1b      	ldr	r3, [pc, #108]	@ (10048330 <HW_PKA_StartP256DHkeyGeneration+0x160>)
100482c2:	2200      	movs	r2, #0
100482c4:	601a      	str	r2, [r3, #0]
      internalStateMachine_Step = HW_PKA_STEP_0;
100482c6:	4b19      	ldr	r3, [pc, #100]	@ (1004832c <HW_PKA_StartP256DHkeyGeneration+0x15c>)
100482c8:	2200      	movs	r2, #0
100482ca:	601a      	str	r2, [r3, #0]
      PKAMGR_Unlock();
100482cc:	f002 fa44 	bl	1004a758 <PKAMGR_Unlock>
      return PKAMGR_ERR_PARAM;
100482d0:	2303      	movs	r3, #3
100482d2:	425b      	negs	r3, r3
100482d4:	e020      	b.n	10048318 <HW_PKA_StartP256DHkeyGeneration+0x148>
    }
    else
    {
      /* Call the PKA point check operation for remote public key */
      HW_PKA_P256_StartPointCheck( (uint32_t *)&bufferPublicKey[0], (uint32_t *)&bufferPublicKey[8] );
100482d6:	4a19      	ldr	r2, [pc, #100]	@ (1004833c <HW_PKA_StartP256DHkeyGeneration+0x16c>)
100482d8:	4b13      	ldr	r3, [pc, #76]	@ (10048328 <HW_PKA_StartP256DHkeyGeneration+0x158>)
100482da:	0011      	movs	r1, r2
100482dc:	0018      	movs	r0, r3
100482de:	f000 f9c9 	bl	10048674 <HW_PKA_P256_StartPointCheck>
    }

    while(internalStateMachine_Step!=HW_PKA_STEP_3);
100482e2:	46c0      	nop			@ (mov r8, r8)
100482e4:	4b11      	ldr	r3, [pc, #68]	@ (1004832c <HW_PKA_StartP256DHkeyGeneration+0x15c>)
100482e6:	681b      	ldr	r3, [r3, #0]
100482e8:	2b03      	cmp	r3, #3
100482ea:	d1fb      	bne.n	100482e4 <HW_PKA_StartP256DHkeyGeneration+0x114>

    /* Test result of point check operation for remote public key */
    if ( !HW_PKA_IsPointCheckOk() )
100482ec:	f000 f8ee 	bl	100484cc <HW_PKA_IsPointCheckOk>
100482f0:	1e03      	subs	r3, r0, #0
100482f2:	d10a      	bne.n	1004830a <HW_PKA_StartP256DHkeyGeneration+0x13a>
    {
      internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
100482f4:	4b0e      	ldr	r3, [pc, #56]	@ (10048330 <HW_PKA_StartP256DHkeyGeneration+0x160>)
100482f6:	2200      	movs	r2, #0
100482f8:	601a      	str	r2, [r3, #0]
      internalStateMachine_Step = HW_PKA_STEP_0;
100482fa:	4b0c      	ldr	r3, [pc, #48]	@ (1004832c <HW_PKA_StartP256DHkeyGeneration+0x15c>)
100482fc:	2200      	movs	r2, #0
100482fe:	601a      	str	r2, [r3, #0]
      PKAMGR_Unlock();
10048300:	f002 fa2a 	bl	1004a758 <PKAMGR_Unlock>
      return PKAMGR_ERR_PARAM;
10048304:	2303      	movs	r3, #3
10048306:	425b      	negs	r3, r3
10048308:	e006      	b.n	10048318 <HW_PKA_StartP256DHkeyGeneration+0x148>
    else
    {
      /* Call the PKA scalar multiplication with the local private key
         as k and the remote public key as starting point,
         in order to compute the DH key */
      HW_PKA_P256_StartEccScalarMul( (uint32_t *)&bufferSecretKey[0], (uint32_t *)&bufferPublicKey[0], (uint32_t *)&bufferPublicKey[8] );
1004830a:	4a0c      	ldr	r2, [pc, #48]	@ (1004833c <HW_PKA_StartP256DHkeyGeneration+0x16c>)
1004830c:	4906      	ldr	r1, [pc, #24]	@ (10048328 <HW_PKA_StartP256DHkeyGeneration+0x158>)
1004830e:	4b05      	ldr	r3, [pc, #20]	@ (10048324 <HW_PKA_StartP256DHkeyGeneration+0x154>)
10048310:	0018      	movs	r0, r3
10048312:	f000 f91b 	bl	1004854c <HW_PKA_P256_StartEccScalarMul>

  /* Launch the computation in interrupt mode */
  LL_PKA_Start(PKA);
#endif /* STM32WB06 STM32WB07 */

  return PKAMGR_SUCCESS;
10048316:	2300      	movs	r3, #0
}
10048318:	0018      	movs	r0, r3
1004831a:	46bd      	mov	sp, r7
1004831c:	b006      	add	sp, #24
1004831e:	bd80      	pop	{r7, pc}
10048320:	20000958 	.word	0x20000958
10048324:	200008f8 	.word	0x200008f8
10048328:	20000918 	.word	0x20000918
1004832c:	200008f4 	.word	0x200008f4
10048330:	200008f0 	.word	0x200008f0
10048334:	1006cc4c 	.word	0x1006cc4c
10048338:	1006cc2c 	.word	0x1006cc2c
1004833c:	20000938 	.word	0x20000938

10048340 <HW_PKA_ExitWithError>:
  * @param
  * @param
  *
  */
void HW_PKA_ExitWithError(uint32_t errorCode)
{
10048340:	b580      	push	{r7, lr}
10048342:	b084      	sub	sp, #16
10048344:	af00      	add	r7, sp, #0
10048346:	6078      	str	r0, [r7, #4]
  internalStateMachine_Operation = 0;
10048348:	4b14      	ldr	r3, [pc, #80]	@ (1004839c <HW_PKA_ExitWithError+0x5c>)
1004834a:	2200      	movs	r2, #0
1004834c:	601a      	str	r2, [r3, #0]
  internalStateMachine_Step = 0;
1004834e:	4b14      	ldr	r3, [pc, #80]	@ (100483a0 <HW_PKA_ExitWithError+0x60>)
10048350:	2200      	movs	r2, #0
10048352:	601a      	str	r2, [r3, #0]
  PKAMGR_Unlock();
10048354:	f002 fa00 	bl	1004a758 <PKAMGR_Unlock>
  ret[0]=errorCode;
10048358:	4b12      	ldr	r3, [pc, #72]	@ (100483a4 <HW_PKA_ExitWithError+0x64>)
1004835a:	687a      	ldr	r2, [r7, #4]
1004835c:	601a      	str	r2, [r3, #0]
  for(int i=0; i<8; i++)
1004835e:	2300      	movs	r3, #0
10048360:	60fb      	str	r3, [r7, #12]
10048362:	e00c      	b.n	1004837e <HW_PKA_ExitWithError+0x3e>
  {
    ret[i+16] = bufferSecretKey[i];
10048364:	68fb      	ldr	r3, [r7, #12]
10048366:	3310      	adds	r3, #16
10048368:	001a      	movs	r2, r3
1004836a:	4b0f      	ldr	r3, [pc, #60]	@ (100483a8 <HW_PKA_ExitWithError+0x68>)
1004836c:	68f9      	ldr	r1, [r7, #12]
1004836e:	0089      	lsls	r1, r1, #2
10048370:	58c9      	ldr	r1, [r1, r3]
10048372:	4b0c      	ldr	r3, [pc, #48]	@ (100483a4 <HW_PKA_ExitWithError+0x64>)
10048374:	0092      	lsls	r2, r2, #2
10048376:	50d1      	str	r1, [r2, r3]
  for(int i=0; i<8; i++)
10048378:	68fb      	ldr	r3, [r7, #12]
1004837a:	3301      	adds	r3, #1
1004837c:	60fb      	str	r3, [r7, #12]
1004837e:	68fb      	ldr	r3, [r7, #12]
10048380:	2b07      	cmp	r3, #7
10048382:	ddef      	ble.n	10048364 <HW_PKA_ExitWithError+0x24>
  }
  HW_PKA_funcCB_LP(PKAMGR_ERROR, ret);
10048384:	4b09      	ldr	r3, [pc, #36]	@ (100483ac <HW_PKA_ExitWithError+0x6c>)
10048386:	681b      	ldr	r3, [r3, #0]
10048388:	4906      	ldr	r1, [pc, #24]	@ (100483a4 <HW_PKA_ExitWithError+0x64>)
1004838a:	2201      	movs	r2, #1
1004838c:	4252      	negs	r2, r2
1004838e:	0010      	movs	r0, r2
10048390:	4798      	blx	r3
}
10048392:	46c0      	nop			@ (mov r8, r8)
10048394:	46bd      	mov	sp, r7
10048396:	b004      	add	sp, #16
10048398:	bd80      	pop	{r7, pc}
1004839a:	46c0      	nop			@ (mov r8, r8)
1004839c:	200008f0 	.word	0x200008f0
100483a0:	200008f4 	.word	0x200008f4
100483a4:	20000890 	.word	0x20000890
100483a8:	200008f8 	.word	0x200008f8
100483ac:	20000958 	.word	0x20000958

100483b0 <HW_PKA_ProcEnd_StateMachine>:
  * @param
  * @param
  *
  */
void HW_PKA_ProcEnd_StateMachine(void)
{
100483b0:	b580      	push	{r7, lr}
100483b2:	b082      	sub	sp, #8
100483b4:	af00      	add	r7, sp, #0
  if(internalStateMachine_Operation == HW_PKA_OPERATION_P256)
100483b6:	4b2f      	ldr	r3, [pc, #188]	@ (10048474 <HW_PKA_ProcEnd_StateMachine+0xc4>)
100483b8:	681b      	ldr	r3, [r3, #0]
100483ba:	2b01      	cmp	r3, #1
100483bc:	d155      	bne.n	1004846a <HW_PKA_ProcEnd_StateMachine+0xba>
  {
    switch(internalStateMachine_Step)
100483be:	4b2e      	ldr	r3, [pc, #184]	@ (10048478 <HW_PKA_ProcEnd_StateMachine+0xc8>)
100483c0:	681b      	ldr	r3, [r3, #0]
100483c2:	2b0e      	cmp	r3, #14
100483c4:	d84d      	bhi.n	10048462 <HW_PKA_ProcEnd_StateMachine+0xb2>
100483c6:	009a      	lsls	r2, r3, #2
100483c8:	4b2c      	ldr	r3, [pc, #176]	@ (1004847c <HW_PKA_ProcEnd_StateMachine+0xcc>)
100483ca:	18d3      	adds	r3, r2, r3
100483cc:	681b      	ldr	r3, [r3, #0]
100483ce:	469f      	mov	pc, r3
    {
      case HW_PKA_STEP_0:
        internalStateMachine_Step = HW_PKA_STEP_1;
100483d0:	4b29      	ldr	r3, [pc, #164]	@ (10048478 <HW_PKA_ProcEnd_StateMachine+0xc8>)
100483d2:	2201      	movs	r2, #1
100483d4:	601a      	str	r2, [r3, #0]

      break;
100483d6:	e048      	b.n	1004846a <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_1:
        internalStateMachine_Step = HW_PKA_STEP_2;
100483d8:	4b27      	ldr	r3, [pc, #156]	@ (10048478 <HW_PKA_ProcEnd_StateMachine+0xc8>)
100483da:	2202      	movs	r2, #2
100483dc:	601a      	str	r2, [r3, #0]
        break;
100483de:	e044      	b.n	1004846a <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_2:
          internalStateMachine_Step = HW_PKA_STEP_3;
100483e0:	4b25      	ldr	r3, [pc, #148]	@ (10048478 <HW_PKA_ProcEnd_StateMachine+0xc8>)
100483e2:	2203      	movs	r2, #3
100483e4:	601a      	str	r2, [r3, #0]
          break;
100483e6:	e040      	b.n	1004846a <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_3:
            /* Read the PKA scalar multiplication result which is the DH key */
            for(int i=0;i<8;i++)
100483e8:	2300      	movs	r3, #0
100483ea:	607b      	str	r3, [r7, #4]
100483ec:	e00a      	b.n	10048404 <HW_PKA_ProcEnd_StateMachine+0x54>
              ret[i] = bufferSecretKey[i];
100483ee:	4b24      	ldr	r3, [pc, #144]	@ (10048480 <HW_PKA_ProcEnd_StateMachine+0xd0>)
100483f0:	687a      	ldr	r2, [r7, #4]
100483f2:	0092      	lsls	r2, r2, #2
100483f4:	58d1      	ldr	r1, [r2, r3]
100483f6:	4b23      	ldr	r3, [pc, #140]	@ (10048484 <HW_PKA_ProcEnd_StateMachine+0xd4>)
100483f8:	687a      	ldr	r2, [r7, #4]
100483fa:	0092      	lsls	r2, r2, #2
100483fc:	50d1      	str	r1, [r2, r3]
            for(int i=0;i<8;i++)
100483fe:	687b      	ldr	r3, [r7, #4]
10048400:	3301      	adds	r3, #1
10048402:	607b      	str	r3, [r7, #4]
10048404:	687b      	ldr	r3, [r7, #4]
10048406:	2b07      	cmp	r3, #7
10048408:	ddf1      	ble.n	100483ee <HW_PKA_ProcEnd_StateMachine+0x3e>
            HW_PKA_P256_ReadEccScalarMul( (uint32_t *)&ret[8], (uint32_t *)&ret[16] );
1004840a:	4a1f      	ldr	r2, [pc, #124]	@ (10048488 <HW_PKA_ProcEnd_StateMachine+0xd8>)
1004840c:	4b1f      	ldr	r3, [pc, #124]	@ (1004848c <HW_PKA_ProcEnd_StateMachine+0xdc>)
1004840e:	0011      	movs	r1, r2
10048410:	0018      	movs	r0, r3
10048412:	f000 f987 	bl	10048724 <HW_PKA_P256_ReadEccScalarMul>
#ifdef STM32WB09
            internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
10048416:	4b18      	ldr	r3, [pc, #96]	@ (10048478 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10048418:	220e      	movs	r2, #14
1004841a:	601a      	str	r2, [r3, #0]
            HW_PKA_ProcEnd_StateMachine();
1004841c:	f7ff ffc8 	bl	100483b0 <HW_PKA_ProcEnd_StateMachine>
         {
           internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
           HW_PKA_ProcEnd_StateMachine();
         }
#endif /* STM32WB05 */
          break;
10048420:	e023      	b.n	1004846a <HW_PKA_ProcEnd_StateMachine+0xba>
       case HW_PKA_STEP_END_SUCCESS:
          internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
10048422:	4b14      	ldr	r3, [pc, #80]	@ (10048474 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10048424:	2200      	movs	r2, #0
10048426:	601a      	str	r2, [r3, #0]
          internalStateMachine_Step = HW_PKA_STEP_0;
10048428:	4b13      	ldr	r3, [pc, #76]	@ (10048478 <HW_PKA_ProcEnd_StateMachine+0xc8>)
1004842a:	2200      	movs	r2, #0
1004842c:	601a      	str	r2, [r3, #0]
          PKAMGR_Unlock();
1004842e:	f002 f993 	bl	1004a758 <PKAMGR_Unlock>
          for(int i=0;i<8;i++)
10048432:	2300      	movs	r3, #0
10048434:	603b      	str	r3, [r7, #0]
10048436:	e00a      	b.n	1004844e <HW_PKA_ProcEnd_StateMachine+0x9e>
            ret[i] = bufferSecretKey[i];
10048438:	4b11      	ldr	r3, [pc, #68]	@ (10048480 <HW_PKA_ProcEnd_StateMachine+0xd0>)
1004843a:	683a      	ldr	r2, [r7, #0]
1004843c:	0092      	lsls	r2, r2, #2
1004843e:	58d1      	ldr	r1, [r2, r3]
10048440:	4b10      	ldr	r3, [pc, #64]	@ (10048484 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10048442:	683a      	ldr	r2, [r7, #0]
10048444:	0092      	lsls	r2, r2, #2
10048446:	50d1      	str	r1, [r2, r3]
          for(int i=0;i<8;i++)
10048448:	683b      	ldr	r3, [r7, #0]
1004844a:	3301      	adds	r3, #1
1004844c:	603b      	str	r3, [r7, #0]
1004844e:	683b      	ldr	r3, [r7, #0]
10048450:	2b07      	cmp	r3, #7
10048452:	ddf1      	ble.n	10048438 <HW_PKA_ProcEnd_StateMachine+0x88>
          HW_PKA_funcCB_LP(PKAMGR_SUCCESS, ret);
10048454:	4b0e      	ldr	r3, [pc, #56]	@ (10048490 <HW_PKA_ProcEnd_StateMachine+0xe0>)
10048456:	681b      	ldr	r3, [r3, #0]
10048458:	4a0a      	ldr	r2, [pc, #40]	@ (10048484 <HW_PKA_ProcEnd_StateMachine+0xd4>)
1004845a:	0011      	movs	r1, r2
1004845c:	2000      	movs	r0, #0
1004845e:	4798      	blx	r3
          break;
10048460:	e003      	b.n	1004846a <HW_PKA_ProcEnd_StateMachine+0xba>
       default:
          HW_PKA_ExitWithError(0xA0);
10048462:	20a0      	movs	r0, #160	@ 0xa0
10048464:	f7ff ff6c 	bl	10048340 <HW_PKA_ExitWithError>
    }
  }
}
10048468:	e7ff      	b.n	1004846a <HW_PKA_ProcEnd_StateMachine+0xba>
1004846a:	46c0      	nop			@ (mov r8, r8)
1004846c:	46bd      	mov	sp, r7
1004846e:	b002      	add	sp, #8
10048470:	bd80      	pop	{r7, pc}
10048472:	46c0      	nop			@ (mov r8, r8)
10048474:	200008f0 	.word	0x200008f0
10048478:	200008f4 	.word	0x200008f4
1004847c:	1006cccc 	.word	0x1006cccc
10048480:	200008f8 	.word	0x200008f8
10048484:	20000890 	.word	0x20000890
10048488:	200008d0 	.word	0x200008d0
1004848c:	200008b0 	.word	0x200008b0
10048490:	20000958 	.word	0x20000958

10048494 <HAL_PKA_OperationCpltCallback>:
    HW_PKA_ProcEnd_StateMachine();
  }
}

void HAL_PKA_OperationCpltCallback(PKA_HandleTypeDef *hpka)
{
10048494:	b580      	push	{r7, lr}
10048496:	b082      	sub	sp, #8
10048498:	af00      	add	r7, sp, #0
1004849a:	6078      	str	r0, [r7, #4]
  HW_PKA_ProcEnd_StateMachine();
1004849c:	f7ff ff88 	bl	100483b0 <HW_PKA_ProcEnd_StateMachine>
  PKAMGR_IRQCallback();
100484a0:	f002 f996 	bl	1004a7d0 <PKAMGR_IRQCallback>
}
100484a4:	46c0      	nop			@ (mov r8, r8)
100484a6:	46bd      	mov	sp, r7
100484a8:	b002      	add	sp, #8
100484aa:	bd80      	pop	{r7, pc}

100484ac <HAL_PKA_ErrorCallback>:

void HAL_PKA_ErrorCallback(PKA_HandleTypeDef *hpka)
{
100484ac:	b580      	push	{r7, lr}
100484ae:	b082      	sub	sp, #8
100484b0:	af00      	add	r7, sp, #0
100484b2:	6078      	str	r0, [r7, #4]
  HW_PKA_ExitWithError(hpka->ErrorCode);
100484b4:	687b      	ldr	r3, [r7, #4]
100484b6:	689b      	ldr	r3, [r3, #8]
100484b8:	0018      	movs	r0, r3
100484ba:	f7ff ff41 	bl	10048340 <HW_PKA_ExitWithError>
  PKAMGR_IRQCallback();
100484be:	f002 f987 	bl	1004a7d0 <PKAMGR_IRQCallback>
}
100484c2:	46c0      	nop			@ (mov r8, r8)
100484c4:	46bd      	mov	sp, r7
100484c6:	b002      	add	sp, #8
100484c8:	bd80      	pop	{r7, pc}
	...

100484cc <HW_PKA_IsPointCheckOk>:
  * @param
  * @param
  *
  */
uint32_t HW_PKA_IsPointCheckOk(void)
{
100484cc:	b580      	push	{r7, lr}
100484ce:	b082      	sub	sp, #8
100484d0:	af00      	add	r7, sp, #0
#ifdef STM32WB09
  uint32_t result[2] = {0};
100484d2:	003b      	movs	r3, r7
100484d4:	0018      	movs	r0, r3
100484d6:	2308      	movs	r3, #8
100484d8:	001a      	movs	r2, r3
100484da:	2100      	movs	r1, #0
100484dc:	f01f fa22 	bl	10067924 <memset>
  HW_PKA_ReadResult( PKA_POINT_CHECK_OUT_ERROR, 2, &result[0] );
100484e0:	003a      	movs	r2, r7
100484e2:	23b8      	movs	r3, #184	@ 0xb8
100484e4:	009b      	lsls	r3, r3, #2
100484e6:	2102      	movs	r1, #2
100484e8:	0018      	movs	r0, r3
100484ea:	f7ff fe2d 	bl	10048148 <HW_PKA_ReadResult>
  return ( result[0] == 0xD60D);
100484ee:	003b      	movs	r3, r7
100484f0:	681b      	ldr	r3, [r3, #0]
100484f2:	4a05      	ldr	r2, [pc, #20]	@ (10048508 <HW_PKA_IsPointCheckOk+0x3c>)
100484f4:	4694      	mov	ip, r2
100484f6:	4463      	add	r3, ip
100484f8:	425a      	negs	r2, r3
100484fa:	4153      	adcs	r3, r2
100484fc:	b2db      	uxtb	r3, r3
#endif /* STM32WB09 */

#ifdef STM32WB05
  return (HW_PKA_ReadSingleOutput( 0 ) == 0);
#endif /* STM32WB05 */
}
100484fe:	0018      	movs	r0, r3
10048500:	46bd      	mov	sp, r7
10048502:	b002      	add	sp, #8
10048504:	bd80      	pop	{r7, pc}
10048506:	46c0      	nop			@ (mov r8, r8)
10048508:	ffff29f3 	.word	0xffff29f3

1004850c <HW_PKA_IsRangeCheckOk>:
  * @param
  * @param
  *
  */
uint32_t HW_PKA_IsRangeCheckOk(void)
{
1004850c:	b580      	push	{r7, lr}
1004850e:	b082      	sub	sp, #8
10048510:	af00      	add	r7, sp, #0
#ifdef STM32WB09
  uint32_t result[2] = {0};
10048512:	003b      	movs	r3, r7
10048514:	0018      	movs	r0, r3
10048516:	2308      	movs	r3, #8
10048518:	001a      	movs	r2, r3
1004851a:	2100      	movs	r1, #0
1004851c:	f01f fa02 	bl	10067924 <memset>
  HW_PKA_ReadResult( PKA_COMPARISON_OUT_RESULT, 2, &result[0] );
10048520:	003a      	movs	r2, r7
10048522:	23a6      	movs	r3, #166	@ 0xa6
10048524:	009b      	lsls	r3, r3, #2
10048526:	2102      	movs	r1, #2
10048528:	0018      	movs	r0, r3
1004852a:	f7ff fe0d 	bl	10048148 <HW_PKA_ReadResult>
  return ( result[0] == 0x916A);
1004852e:	003b      	movs	r3, r7
10048530:	681b      	ldr	r3, [r3, #0]
10048532:	4a05      	ldr	r2, [pc, #20]	@ (10048548 <HW_PKA_IsRangeCheckOk+0x3c>)
10048534:	4694      	mov	ip, r2
10048536:	4463      	add	r3, ip
10048538:	425a      	negs	r2, r3
1004853a:	4153      	adcs	r3, r2
1004853c:	b2db      	uxtb	r3, r3
#endif /* STM32WB09 */

#ifdef STM32WB05
  return (HW_PKA_ReadSingleOutput( 500 ) == 2);
#endif /* STM32WB05 */
}
1004853e:	0018      	movs	r0, r3
10048540:	46bd      	mov	sp, r7
10048542:	b002      	add	sp, #8
10048544:	bd80      	pop	{r7, pc}
10048546:	46c0      	nop			@ (mov r8, r8)
10048548:	ffff6e96 	.word	0xffff6e96

1004854c <HW_PKA_P256_StartEccScalarMul>:
  * @param
  * @param
  *
  */
void HW_PKA_P256_StartEccScalarMul( const uint32_t* k, const uint32_t* pX, const uint32_t* pY )
{
1004854c:	b580      	push	{r7, lr}
1004854e:	b084      	sub	sp, #16
10048550:	af00      	add	r7, sp, #0
10048552:	60f8      	str	r0, [r7, #12]
10048554:	60b9      	str	r1, [r7, #8]
10048556:	607a      	str	r2, [r7, #4]
  /* Set the configuration */
  LL_PKA_Config( PKA, LL_PKA_MODE_ECC_KP_PRIMITIVE );
10048558:	4b27      	ldr	r3, [pc, #156]	@ (100485f8 <HW_PKA_P256_StartEccScalarMul+0xac>)
1004855a:	2122      	movs	r1, #34	@ 0x22
1004855c:	0018      	movs	r0, r3
1004855e:	f7ff fd1b 	bl	10047f98 <LL_PKA_Config>

  /* Enable the Security level */
  LL_PKA_SetSecurityLevel(PKA, LL_PKA_SECURITY_LEVEL_ENABLE);
10048562:	4b25      	ldr	r3, [pc, #148]	@ (100485f8 <HW_PKA_P256_StartEccScalarMul+0xac>)
10048564:	2101      	movs	r1, #1
10048566:	0018      	movs	r0, r3
10048568:	f7ff fd3e 	bl	10047fe8 <LL_PKA_SetSecurityLevel>

#ifdef STM32WB09
  /* Set the scalar multiplier k length */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_EXP_NB_BITS, 2, HW_PKA_nbits_k);
1004856c:	4b23      	ldr	r3, [pc, #140]	@ (100485fc <HW_PKA_P256_StartEccScalarMul+0xb0>)
1004856e:	001a      	movs	r2, r3
10048570:	2102      	movs	r1, #2
10048572:	2000      	movs	r0, #0
10048574:	f7ff fd9a 	bl	100480ac <HW_PKA_WriteSingleInput>
  /* Set the modulus length */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS, 2, HW_PKA_nbits_m);
10048578:	4b21      	ldr	r3, [pc, #132]	@ (10048600 <HW_PKA_P256_StartEccScalarMul+0xb4>)
1004857a:	001a      	movs	r2, r3
1004857c:	2102      	movs	r1, #2
1004857e:	2002      	movs	r0, #2
10048580:	f7ff fd94 	bl	100480ac <HW_PKA_WriteSingleInput>
  /* Set the coefficient a sign */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_A_COEFF_SIGN, 2, HW_PKA_a_coeff_sign);
10048584:	4b1f      	ldr	r3, [pc, #124]	@ (10048604 <HW_PKA_P256_StartEccScalarMul+0xb8>)
10048586:	001a      	movs	r2, r3
10048588:	2102      	movs	r1, #2
1004858a:	2004      	movs	r0, #4
1004858c:	f7ff fd8e 	bl	100480ac <HW_PKA_WriteSingleInput>
  /* Set the coefficient |a| */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_A_COEFF, 8, HW_PKA_P256_a );
10048590:	4b1d      	ldr	r3, [pc, #116]	@ (10048608 <HW_PKA_P256_StartEccScalarMul+0xbc>)
10048592:	001a      	movs	r2, r3
10048594:	2108      	movs	r1, #8
10048596:	2006      	movs	r0, #6
10048598:	f7ff fdac 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the modulus value p */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_MOD_GF, 8, HW_PKA_P256_gfp );
1004859c:	4b1b      	ldr	r3, [pc, #108]	@ (1004860c <HW_PKA_P256_StartEccScalarMul+0xc0>)
1004859e:	001a      	movs	r2, r3
100485a0:	2108      	movs	r1, #8
100485a2:	201c      	movs	r0, #28
100485a4:	f7ff fda6 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the Montgomery parameter */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_MONTGOMERY_PARAM, 8, HW_PKA_P256_r2 );
100485a8:	4b19      	ldr	r3, [pc, #100]	@ (10048610 <HW_PKA_P256_StartEccScalarMul+0xc4>)
100485aa:	001a      	movs	r2, r3
100485ac:	2108      	movs	r1, #8
100485ae:	2032      	movs	r0, #50	@ 0x32
100485b0:	f7ff fda0 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the scalar multiplier k */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_K, 8, k );
100485b4:	68fb      	ldr	r3, [r7, #12]
100485b6:	001a      	movs	r2, r3
100485b8:	2108      	movs	r1, #8
100485ba:	2048      	movs	r0, #72	@ 0x48
100485bc:	f7ff fd9a 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the point P coordinate x */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_X, 8, pX );
100485c0:	68bb      	ldr	r3, [r7, #8]
100485c2:	001a      	movs	r2, r3
100485c4:	2108      	movs	r1, #8
100485c6:	205e      	movs	r0, #94	@ 0x5e
100485c8:	f7ff fd94 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the point P coordinate y */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_Y, 8, pY );
100485cc:	687b      	ldr	r3, [r7, #4]
100485ce:	001a      	movs	r2, r3
100485d0:	2108      	movs	r1, #8
100485d2:	2074      	movs	r0, #116	@ 0x74
100485d4:	f7ff fd8e 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the point P coordinate y */
  HW_PKA_WriteOperand( 108, 8, pY );
#endif /* STM32WB05 */

  /* Wait for  PKA busy flag equal to 0 */
  while(LL_PKA_IsActiveFlag_BUSY(PKA));
100485d8:	46c0      	nop			@ (mov r8, r8)
100485da:	4b07      	ldr	r3, [pc, #28]	@ (100485f8 <HW_PKA_P256_StartEccScalarMul+0xac>)
100485dc:	0018      	movs	r0, r3
100485de:	f7ff fd51 	bl	10048084 <LL_PKA_IsActiveFlag_BUSY>
100485e2:	1e03      	subs	r3, r0, #0
100485e4:	d1f9      	bne.n	100485da <HW_PKA_P256_StartEccScalarMul+0x8e>

  /* Start the PKA processing */
  LL_PKA_Start( PKA );
100485e6:	4b04      	ldr	r3, [pc, #16]	@ (100485f8 <HW_PKA_P256_StartEccScalarMul+0xac>)
100485e8:	0018      	movs	r0, r3
100485ea:	f7ff fd10 	bl	1004800e <LL_PKA_Start>
}
100485ee:	46c0      	nop			@ (mov r8, r8)
100485f0:	46bd      	mov	sp, r7
100485f2:	b004      	add	sp, #16
100485f4:	bd80      	pop	{r7, pc}
100485f6:	46c0      	nop			@ (mov r8, r8)
100485f8:	48300000 	.word	0x48300000
100485fc:	1006cc34 	.word	0x1006cc34
10048600:	1006cc3c 	.word	0x1006cc3c
10048604:	1006cc44 	.word	0x1006cc44
10048608:	1006cc8c 	.word	0x1006cc8c
1004860c:	1006cc4c 	.word	0x1006cc4c
10048610:	1006cc6c 	.word	0x1006cc6c

10048614 <HW_PKA_Comparison>:
  * @param
  * @param
  *
  */
void HW_PKA_Comparison( const uint32_t* opLen, const uint32_t* op1 , const uint32_t* op2 )
{
10048614:	b580      	push	{r7, lr}
10048616:	b084      	sub	sp, #16
10048618:	af00      	add	r7, sp, #0
1004861a:	60f8      	str	r0, [r7, #12]
1004861c:	60b9      	str	r1, [r7, #8]
1004861e:	607a      	str	r2, [r7, #4]
  LL_PKA_SetMode(PKA, LL_PKA_MODE_COMPARISON );
10048620:	4b13      	ldr	r3, [pc, #76]	@ (10048670 <HW_PKA_Comparison+0x5c>)
10048622:	210c      	movs	r1, #12
10048624:	0018      	movs	r0, r3
10048626:	f7ff fccb 	bl	10047fc0 <LL_PKA_SetMode>
#ifdef STM32WB09
  /* Loads the input buffers to PKA RAM */
   /* Set the muber of bits of P */
  HW_PKA_WriteSingleInput( PKA_COMPARISON_NB_BITS, 2, opLen );
1004862a:	68fb      	ldr	r3, [r7, #12]
1004862c:	001a      	movs	r2, r3
1004862e:	2102      	movs	r1, #2
10048630:	2002      	movs	r0, #2
10048632:	f7ff fd3b 	bl	100480ac <HW_PKA_WriteSingleInput>
  /* Set the op1 */
  HW_PKA_WriteOperand( PKA_COMPARISON_IN_OP1, 8, op1 );
10048636:	68ba      	ldr	r2, [r7, #8]
10048638:	23c8      	movs	r3, #200	@ 0xc8
1004863a:	005b      	lsls	r3, r3, #1
1004863c:	2108      	movs	r1, #8
1004863e:	0018      	movs	r0, r3
10048640:	f7ff fd58 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the op2 */
  HW_PKA_WriteOperand( PKA_COMPARISON_IN_OP2, 8, op2 );
10048644:	687a      	ldr	r2, [r7, #4]
10048646:	2385      	movs	r3, #133	@ 0x85
10048648:	009b      	lsls	r3, r3, #2
1004864a:	2108      	movs	r1, #8
1004864c:	0018      	movs	r0, r3
1004864e:	f7ff fd51 	bl	100480f4 <HW_PKA_WriteOperand>
  HW_PKA_WriteOperand( 301, 8, op1 );
  /* Set the op2 */
  HW_PKA_WriteOperand( 401, 8, op2 );
#endif /* STM32WB05 */
  /* Wait for  PKA busy flag equal to 0 */
  while(LL_PKA_IsActiveFlag_BUSY(PKA));
10048652:	46c0      	nop			@ (mov r8, r8)
10048654:	4b06      	ldr	r3, [pc, #24]	@ (10048670 <HW_PKA_Comparison+0x5c>)
10048656:	0018      	movs	r0, r3
10048658:	f7ff fd14 	bl	10048084 <LL_PKA_IsActiveFlag_BUSY>
1004865c:	1e03      	subs	r3, r0, #0
1004865e:	d1f9      	bne.n	10048654 <HW_PKA_Comparison+0x40>

  /* Launch the computation in interrupt mode */
  LL_PKA_Start(PKA);
10048660:	4b03      	ldr	r3, [pc, #12]	@ (10048670 <HW_PKA_Comparison+0x5c>)
10048662:	0018      	movs	r0, r3
10048664:	f7ff fcd3 	bl	1004800e <LL_PKA_Start>
}
10048668:	46c0      	nop			@ (mov r8, r8)
1004866a:	46bd      	mov	sp, r7
1004866c:	b004      	add	sp, #16
1004866e:	bd80      	pop	{r7, pc}
10048670:	48300000 	.word	0x48300000

10048674 <HW_PKA_P256_StartPointCheck>:

void HW_PKA_P256_StartPointCheck( const uint32_t* x, const uint32_t* y )
{
10048674:	b580      	push	{r7, lr}
10048676:	b082      	sub	sp, #8
10048678:	af00      	add	r7, sp, #0
1004867a:	6078      	str	r0, [r7, #4]
1004867c:	6039      	str	r1, [r7, #0]
  /* Set the configuration */
  LL_PKA_Config( PKA, LL_PKA_MODE_POINT_CHECK );
1004867e:	4b22      	ldr	r3, [pc, #136]	@ (10048708 <HW_PKA_P256_StartPointCheck+0x94>)
10048680:	2128      	movs	r1, #40	@ 0x28
10048682:	0018      	movs	r0, r3
10048684:	f7ff fc88 	bl	10047f98 <LL_PKA_Config>
#ifdef STM32WB09
  /* Set the muber of bits of p */
  HW_PKA_WriteSingleInput(  PKA_POINT_CHECK_IN_MOD_NB_BITS, 2, HW_PKA_nbits_m);
10048688:	4b20      	ldr	r3, [pc, #128]	@ (1004870c <HW_PKA_P256_StartPointCheck+0x98>)
1004868a:	001a      	movs	r2, r3
1004868c:	2102      	movs	r1, #2
1004868e:	2002      	movs	r0, #2
10048690:	f7ff fd0c 	bl	100480ac <HW_PKA_WriteSingleInput>
  /* Set the coefficient a sign */
  HW_PKA_WriteSingleInput( PKA_POINT_CHECK_IN_A_COEFF_SIGN, 2, HW_PKA_a_coeff_sign);
10048694:	4b1e      	ldr	r3, [pc, #120]	@ (10048710 <HW_PKA_P256_StartPointCheck+0x9c>)
10048696:	001a      	movs	r2, r3
10048698:	2102      	movs	r1, #2
1004869a:	2004      	movs	r0, #4
1004869c:	f7ff fd06 	bl	100480ac <HW_PKA_WriteSingleInput>
  /* Set the coefficient |a| */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_A_COEFF, 8, HW_PKA_P256_a );
100486a0:	4b1c      	ldr	r3, [pc, #112]	@ (10048714 <HW_PKA_P256_StartPointCheck+0xa0>)
100486a2:	001a      	movs	r2, r3
100486a4:	2108      	movs	r1, #8
100486a6:	2006      	movs	r0, #6
100486a8:	f7ff fd24 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the modulus value p */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_MOD_GF, 8, HW_PKA_P256_gfp );
100486ac:	4b1a      	ldr	r3, [pc, #104]	@ (10048718 <HW_PKA_P256_StartPointCheck+0xa4>)
100486ae:	001a      	movs	r2, r3
100486b0:	2108      	movs	r1, #8
100486b2:	201c      	movs	r0, #28
100486b4:	f7ff fd1e 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the point coordinate x */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_INITIAL_POINT_X, 8, x );
100486b8:	687b      	ldr	r3, [r7, #4]
100486ba:	001a      	movs	r2, r3
100486bc:	2108      	movs	r1, #8
100486be:	205e      	movs	r0, #94	@ 0x5e
100486c0:	f7ff fd18 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the point coordinate y */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_INITIAL_POINT_Y, 8, y );
100486c4:	683b      	ldr	r3, [r7, #0]
100486c6:	001a      	movs	r2, r3
100486c8:	2108      	movs	r1, #8
100486ca:	2074      	movs	r0, #116	@ 0x74
100486cc:	f7ff fd12 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the Montgomery parameter */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_MONTGOMERY, 8, HW_PKA_P256_r2 );
100486d0:	4b12      	ldr	r3, [pc, #72]	@ (1004871c <HW_PKA_P256_StartPointCheck+0xa8>)
100486d2:	001a      	movs	r2, r3
100486d4:	2108      	movs	r1, #8
100486d6:	2032      	movs	r0, #50	@ 0x32
100486d8:	f7ff fd0c 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the coefficient |b| */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_B_COEFF, 8, HW_PKA_P256_b );
100486dc:	4b10      	ldr	r3, [pc, #64]	@ (10048720 <HW_PKA_P256_StartPointCheck+0xac>)
100486de:	001a      	movs	r2, r3
100486e0:	2108      	movs	r1, #8
100486e2:	2048      	movs	r0, #72	@ 0x48
100486e4:	f7ff fd06 	bl	100480f4 <HW_PKA_WriteOperand>
  /* Set the coefficient |b| */
  HW_PKA_WriteOperand( 255, 8, HW_PKA_P256_b );
#endif /* STM32WB05 */

  /* Wait for  PKA busy flag equal to 0 */
  while(LL_PKA_IsActiveFlag_BUSY(PKA));
100486e8:	46c0      	nop			@ (mov r8, r8)
100486ea:	4b07      	ldr	r3, [pc, #28]	@ (10048708 <HW_PKA_P256_StartPointCheck+0x94>)
100486ec:	0018      	movs	r0, r3
100486ee:	f7ff fcc9 	bl	10048084 <LL_PKA_IsActiveFlag_BUSY>
100486f2:	1e03      	subs	r3, r0, #0
100486f4:	d1f9      	bne.n	100486ea <HW_PKA_P256_StartPointCheck+0x76>

  /* Start the PKA processing */
  LL_PKA_Start( PKA );
100486f6:	4b04      	ldr	r3, [pc, #16]	@ (10048708 <HW_PKA_P256_StartPointCheck+0x94>)
100486f8:	0018      	movs	r0, r3
100486fa:	f7ff fc88 	bl	1004800e <LL_PKA_Start>
}
100486fe:	46c0      	nop			@ (mov r8, r8)
10048700:	46bd      	mov	sp, r7
10048702:	b002      	add	sp, #8
10048704:	bd80      	pop	{r7, pc}
10048706:	46c0      	nop			@ (mov r8, r8)
10048708:	48300000 	.word	0x48300000
1004870c:	1006cc3c 	.word	0x1006cc3c
10048710:	1006cc44 	.word	0x1006cc44
10048714:	1006cc8c 	.word	0x1006cc8c
10048718:	1006cc4c 	.word	0x1006cc4c
1004871c:	1006cc6c 	.word	0x1006cc6c
10048720:	1006ccac 	.word	0x1006ccac

10048724 <HW_PKA_P256_ReadEccScalarMul>:
  * @param
  * @param
  *
  */
void HW_PKA_P256_ReadEccScalarMul( uint32_t* pX, uint32_t* pY )
{
10048724:	b580      	push	{r7, lr}
10048726:	b082      	sub	sp, #8
10048728:	af00      	add	r7, sp, #0
1004872a:	6078      	str	r0, [r7, #4]
1004872c:	6039      	str	r1, [r7, #0]
#ifdef STM32WB09
  /* Read the output point X */
  if( pX )
1004872e:	687b      	ldr	r3, [r7, #4]
10048730:	2b00      	cmp	r3, #0
10048732:	d005      	beq.n	10048740 <HW_PKA_P256_ReadEccScalarMul+0x1c>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_X, 8, pX );
10048734:	687b      	ldr	r3, [r7, #4]
10048736:	001a      	movs	r2, r3
10048738:	2108      	movs	r1, #8
1004873a:	205e      	movs	r0, #94	@ 0x5e
1004873c:	f7ff fd04 	bl	10048148 <HW_PKA_ReadResult>
  }
  /* Read the output point Y as the second half of the result */
  if( pY )
10048740:	683b      	ldr	r3, [r7, #0]
10048742:	2b00      	cmp	r3, #0
10048744:	d005      	beq.n	10048752 <HW_PKA_P256_ReadEccScalarMul+0x2e>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_Y, 8, pY );
10048746:	683b      	ldr	r3, [r7, #0]
10048748:	001a      	movs	r2, r3
1004874a:	2108      	movs	r1, #8
1004874c:	2074      	movs	r0, #116	@ 0x74
1004874e:	f7ff fcfb 	bl	10048148 <HW_PKA_ReadResult>
  if( pY )
  {
    HW_PKA_ReadResult( 108, 8, pY );
  }
#endif /* STM32WB05 */
}
10048752:	46c0      	nop			@ (mov r8, r8)
10048754:	46bd      	mov	sp, r7
10048756:	b002      	add	sp, #8
10048758:	bd80      	pop	{r7, pc}
	...

1004875c <HW_PKA_isStartPoint>:
  * Brief   This function checks if the param p is equal to the Start Point.
  * Param   Publick key p
  * Retval  1 if p is equal to the Start Point. 0 in other cases.
  */
uint32_t HW_PKA_isStartPoint(const uint32_t* p)
{
1004875c:	b580      	push	{r7, lr}
1004875e:	b084      	sub	sp, #16
10048760:	af00      	add	r7, sp, #0
10048762:	6078      	str	r0, [r7, #4]
  for(int i=0; i<16; i++)
10048764:	2300      	movs	r3, #0
10048766:	60fb      	str	r3, [r7, #12]
10048768:	e00f      	b.n	1004878a <HW_PKA_isStartPoint+0x2e>
  {
    if(PKAStartPoint[i]!=p[i])
1004876a:	4b0c      	ldr	r3, [pc, #48]	@ (1004879c <HW_PKA_isStartPoint+0x40>)
1004876c:	68fa      	ldr	r2, [r7, #12]
1004876e:	0092      	lsls	r2, r2, #2
10048770:	58d2      	ldr	r2, [r2, r3]
10048772:	68fb      	ldr	r3, [r7, #12]
10048774:	009b      	lsls	r3, r3, #2
10048776:	6879      	ldr	r1, [r7, #4]
10048778:	18cb      	adds	r3, r1, r3
1004877a:	681b      	ldr	r3, [r3, #0]
1004877c:	429a      	cmp	r2, r3
1004877e:	d001      	beq.n	10048784 <HW_PKA_isStartPoint+0x28>
      return 0;
10048780:	2300      	movs	r3, #0
10048782:	e006      	b.n	10048792 <HW_PKA_isStartPoint+0x36>
  for(int i=0; i<16; i++)
10048784:	68fb      	ldr	r3, [r7, #12]
10048786:	3301      	adds	r3, #1
10048788:	60fb      	str	r3, [r7, #12]
1004878a:	68fb      	ldr	r3, [r7, #12]
1004878c:	2b0f      	cmp	r3, #15
1004878e:	ddec      	ble.n	1004876a <HW_PKA_isStartPoint+0xe>
  }
  return 1;
10048790:	2301      	movs	r3, #1
}
10048792:	0018      	movs	r0, r3
10048794:	46bd      	mov	sp, r7
10048796:	b004      	add	sp, #16
10048798:	bd80      	pop	{r7, pc}
1004879a:	46c0      	nop			@ (mov r8, r8)
1004879c:	1006cbec 	.word	0x1006cbec

100487a0 <LL_AHB1_GRP1_EnableClock>:
{
100487a0:	b580      	push	{r7, lr}
100487a2:	b084      	sub	sp, #16
100487a4:	af00      	add	r7, sp, #0
100487a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100487a8:	4b07      	ldr	r3, [pc, #28]	@ (100487c8 <LL_AHB1_GRP1_EnableClock+0x28>)
100487aa:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100487ac:	4b06      	ldr	r3, [pc, #24]	@ (100487c8 <LL_AHB1_GRP1_EnableClock+0x28>)
100487ae:	687a      	ldr	r2, [r7, #4]
100487b0:	430a      	orrs	r2, r1
100487b2:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100487b4:	4b04      	ldr	r3, [pc, #16]	@ (100487c8 <LL_AHB1_GRP1_EnableClock+0x28>)
100487b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100487b8:	687a      	ldr	r2, [r7, #4]
100487ba:	4013      	ands	r3, r2
100487bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100487be:	68fb      	ldr	r3, [r7, #12]
}
100487c0:	46c0      	nop			@ (mov r8, r8)
100487c2:	46bd      	mov	sp, r7
100487c4:	b004      	add	sp, #16
100487c6:	bd80      	pop	{r7, pc}
100487c8:	48400000 	.word	0x48400000

100487cc <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
100487cc:	b580      	push	{r7, lr}
100487ce:	b082      	sub	sp, #8
100487d0:	af00      	add	r7, sp, #0
100487d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RNGx->CR, RNG_CR_DISABLE, LL_RNG_CR_DISABLE_0);
100487d4:	687b      	ldr	r3, [r7, #4]
100487d6:	681b      	ldr	r3, [r3, #0]
100487d8:	2201      	movs	r2, #1
100487da:	4393      	bics	r3, r2
100487dc:	001a      	movs	r2, r3
100487de:	687b      	ldr	r3, [r7, #4]
100487e0:	601a      	str	r2, [r3, #0]
}
100487e2:	46c0      	nop			@ (mov r8, r8)
100487e4:	46bd      	mov	sp, r7
100487e6:	b002      	add	sp, #8
100487e8:	bd80      	pop	{r7, pc}
	...

100487ec <LL_RNG_SetSamplingClockEnableDivider>:
  * @param  RNGx RNG Instance
  * @param  value parameter must be a number between 0 and 65535 (form 0x0 to 0xffff)
  * @retval None
  */
__STATIC_INLINE void LL_RNG_SetSamplingClockEnableDivider(RNG_TypeDef *RNGx, uint32_t value)
{
100487ec:	b580      	push	{r7, lr}
100487ee:	b082      	sub	sp, #8
100487f0:	af00      	add	r7, sp, #0
100487f2:	6078      	str	r0, [r7, #4]
100487f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RNGx->CR, RNG_CR_CLKDIV_15_0, value << RNG_CR_CLKDIV_15_0_Pos);
100487f6:	687b      	ldr	r3, [r7, #4]
100487f8:	681b      	ldr	r3, [r3, #0]
100487fa:	4a05      	ldr	r2, [pc, #20]	@ (10048810 <LL_RNG_SetSamplingClockEnableDivider+0x24>)
100487fc:	401a      	ands	r2, r3
100487fe:	683b      	ldr	r3, [r7, #0]
10048800:	021b      	lsls	r3, r3, #8
10048802:	431a      	orrs	r2, r3
10048804:	687b      	ldr	r3, [r7, #4]
10048806:	601a      	str	r2, [r3, #0]
}
10048808:	46c0      	nop			@ (mov r8, r8)
1004880a:	46bd      	mov	sp, r7
1004880c:	b002      	add	sp, #8
1004880e:	bd80      	pop	{r7, pc}
10048810:	ff0000ff 	.word	0xff0000ff

10048814 <LL_RNG_GetSamplingClockEnableDivider>:
    @note   dividing by a factor equal to CLKDIV[15:0] + 1, values being in the range of 0 to 65535
  * @rmtoll CR          CLKDIV_15_0       LL_RNG_GetSamplingClockEnableDivider
  * @retval can be one of the following values
  */
__STATIC_INLINE uint32_t LL_RNG_GetSamplingClockEnableDivider(RNG_TypeDef *RNGx)
{
10048814:	b580      	push	{r7, lr}
10048816:	b082      	sub	sp, #8
10048818:	af00      	add	r7, sp, #0
1004881a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->CR, RNG_CR_CLKDIV_15_0) >> RNG_CR_CLKDIV_15_0_Pos);
1004881c:	687b      	ldr	r3, [r7, #4]
1004881e:	681b      	ldr	r3, [r3, #0]
10048820:	0a1b      	lsrs	r3, r3, #8
10048822:	041b      	lsls	r3, r3, #16
10048824:	0c1b      	lsrs	r3, r3, #16
}
10048826:	0018      	movs	r0, r3
10048828:	46bd      	mov	sp, r7
1004882a:	b002      	add	sp, #8
1004882c:	bd80      	pop	{r7, pc}

1004882e <LL_RNG_IsActiveFlag_DISABLED>:
  * @rmtoll SR          DISABLED            LL_RNG_IsActiveFlag_DISABLED
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_DISABLED(RNG_TypeDef *RNGx)
{
1004882e:	b580      	push	{r7, lr}
10048830:	b082      	sub	sp, #8
10048832:	af00      	add	r7, sp, #0
10048834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_DISABLED) == (RNG_SR_DISABLED)) ? 1U : 0U);
10048836:	687b      	ldr	r3, [r7, #4]
10048838:	685b      	ldr	r3, [r3, #4]
1004883a:	2201      	movs	r2, #1
1004883c:	4013      	ands	r3, r2
1004883e:	2b01      	cmp	r3, #1
10048840:	d101      	bne.n	10048846 <LL_RNG_IsActiveFlag_DISABLED+0x18>
10048842:	2301      	movs	r3, #1
10048844:	e000      	b.n	10048848 <LL_RNG_IsActiveFlag_DISABLED+0x1a>
10048846:	2300      	movs	r3, #0
}
10048848:	0018      	movs	r0, r3
1004884a:	46bd      	mov	sp, r7
1004884c:	b002      	add	sp, #8
1004884e:	bd80      	pop	{r7, pc}

10048850 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>:
  * @rmtoll SR          REVEAL_CLK_ERR            LL_RNG_IsActiveFlag_REVEAL_CLK_ERR
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG_TypeDef *RNGx)
{
10048850:	b580      	push	{r7, lr}
10048852:	b082      	sub	sp, #8
10048854:	af00      	add	r7, sp, #0
10048856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_REVEAL_CLK_ERR) == (RNG_SR_REVEAL_CLK_ERR)) ? 1U : 0U);
10048858:	687b      	ldr	r3, [r7, #4]
1004885a:	685b      	ldr	r3, [r3, #4]
1004885c:	2204      	movs	r2, #4
1004885e:	4013      	ands	r3, r2
10048860:	2b04      	cmp	r3, #4
10048862:	d101      	bne.n	10048868 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x18>
10048864:	2301      	movs	r3, #1
10048866:	e000      	b.n	1004886a <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x1a>
10048868:	2300      	movs	r3, #0
}
1004886a:	0018      	movs	r0, r3
1004886c:	46bd      	mov	sp, r7
1004886e:	b002      	add	sp, #8
10048870:	bd80      	pop	{r7, pc}

10048872 <LL_RNG_IsActiveFlag_VAL_READY>:
  * @rmtoll SR          VAL_READY            LL_RNG_IsActiveFlag_VAL_READY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_VAL_READY(RNG_TypeDef *RNGx)
{
10048872:	b580      	push	{r7, lr}
10048874:	b082      	sub	sp, #8
10048876:	af00      	add	r7, sp, #0
10048878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_VAL_READY) == (RNG_SR_VAL_READY)) ? 1U : 0U);
1004887a:	687b      	ldr	r3, [r7, #4]
1004887c:	685b      	ldr	r3, [r3, #4]
1004887e:	2210      	movs	r2, #16
10048880:	4013      	ands	r3, r2
10048882:	2b10      	cmp	r3, #16
10048884:	d101      	bne.n	1004888a <LL_RNG_IsActiveFlag_VAL_READY+0x18>
10048886:	2301      	movs	r3, #1
10048888:	e000      	b.n	1004888c <LL_RNG_IsActiveFlag_VAL_READY+0x1a>
1004888a:	2300      	movs	r3, #0
}
1004888c:	0018      	movs	r0, r3
1004888e:	46bd      	mov	sp, r7
10048890:	b002      	add	sp, #8
10048892:	bd80      	pop	{r7, pc}

10048894 <LL_RNG_GetRndVal>:
  available in FIFO by ready VAL_READY flag before starting a read otherwise a null value will be returned
  * @rmtoll VAL          RND_VAL       LL_RNG_GetRndVal
  * @retval a 32-bit Random Value
  */
__STATIC_INLINE uint32_t LL_RNG_GetRndVal(RNG_TypeDef *RNGx)
{
10048894:	b580      	push	{r7, lr}
10048896:	b082      	sub	sp, #8
10048898:	af00      	add	r7, sp, #0
1004889a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->VAL, RNG_VAL_RND_VAL) >> RNG_VAL_RND_VAL_Pos);
1004889c:	687b      	ldr	r3, [r7, #4]
1004889e:	689b      	ldr	r3, [r3, #8]
}
100488a0:	0018      	movs	r0, r3
100488a2:	46bd      	mov	sp, r7
100488a4:	b002      	add	sp, #8
100488a6:	bd80      	pop	{r7, pc}

100488a8 <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
100488a8:	b580      	push	{r7, lr}
100488aa:	b082      	sub	sp, #8
100488ac:	af00      	add	r7, sp, #0
#ifdef STM32WB09
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
100488ae:	2380      	movs	r3, #128	@ 0x80
100488b0:	02db      	lsls	r3, r3, #11
100488b2:	0018      	movs	r0, r3
100488b4:	f7ff ff74 	bl	100487a0 <LL_AHB1_GRP1_EnableClock>

  uint32_t SamplingClockDivider = 0;
100488b8:	2300      	movs	r3, #0
100488ba:	607b      	str	r3, [r7, #4]

  /* Check that the divider value is equal to the one to configure. If not, it must redo the write and checking. */
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
100488bc:	e005      	b.n	100488ca <HW_RNG_Init+0x22>
  {
     /* While the new divider value is being resynchronized with the TRNG core clock domain, it is not possible to write another new value. */
     LL_RNG_SetSamplingClockEnableDivider(RNG, SamplingClockDivider);
100488be:	687b      	ldr	r3, [r7, #4]
100488c0:	4a12      	ldr	r2, [pc, #72]	@ (1004890c <HW_RNG_Init+0x64>)
100488c2:	0019      	movs	r1, r3
100488c4:	0010      	movs	r0, r2
100488c6:	f7ff ff91 	bl	100487ec <LL_RNG_SetSamplingClockEnableDivider>
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
100488ca:	4b10      	ldr	r3, [pc, #64]	@ (1004890c <HW_RNG_Init+0x64>)
100488cc:	0018      	movs	r0, r3
100488ce:	f7ff ffa1 	bl	10048814 <LL_RNG_GetSamplingClockEnableDivider>
100488d2:	0002      	movs	r2, r0
100488d4:	687b      	ldr	r3, [r7, #4]
100488d6:	4293      	cmp	r3, r2
100488d8:	d1f1      	bne.n	100488be <HW_RNG_Init+0x16>
  }

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
100488da:	4b0c      	ldr	r3, [pc, #48]	@ (1004890c <HW_RNG_Init+0x64>)
100488dc:	0018      	movs	r0, r3
100488de:	f7ff ff75 	bl	100487cc <LL_RNG_Enable>

  /* Wait for RNG enable operation */
  while (LL_RNG_IsActiveFlag_DISABLED(RNG));
100488e2:	46c0      	nop			@ (mov r8, r8)
100488e4:	4b09      	ldr	r3, [pc, #36]	@ (1004890c <HW_RNG_Init+0x64>)
100488e6:	0018      	movs	r0, r3
100488e8:	f7ff ffa1 	bl	1004882e <LL_RNG_IsActiveFlag_DISABLED>
100488ec:	1e03      	subs	r3, r0, #0
100488ee:	d1f9      	bne.n	100488e4 <HW_RNG_Init+0x3c>

  /* Check if internal clock error occurs */
  if (LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG))
100488f0:	4b06      	ldr	r3, [pc, #24]	@ (1004890c <HW_RNG_Init+0x64>)
100488f2:	0018      	movs	r0, r3
100488f4:	f7ff ffac 	bl	10048850 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>
100488f8:	1e03      	subs	r3, r0, #0
100488fa:	d001      	beq.n	10048900 <HW_RNG_Init+0x58>
  {
    return HW_RNG_ERROR;
100488fc:	2301      	movs	r3, #1
100488fe:	e000      	b.n	10048902 <HW_RNG_Init+0x5a>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
10048900:	2300      	movs	r3, #0
}
10048902:	0018      	movs	r0, r3
10048904:	46bd      	mov	sp, r7
10048906:	b002      	add	sp, #8
10048908:	bd80      	pop	{r7, pc}
1004890a:	46c0      	nop			@ (mov r8, r8)
1004890c:	48600000 	.word	0x48600000

10048910 <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
10048910:	b580      	push	{r7, lr}
10048912:	b082      	sub	sp, #8
10048914:	af00      	add	r7, sp, #0
10048916:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
10048918:	46c0      	nop			@ (mov r8, r8)
1004891a:	4b09      	ldr	r3, [pc, #36]	@ (10048940 <HW_RNG_GetRandom16+0x30>)
1004891c:	0018      	movs	r0, r3
1004891e:	f7ff ffa8 	bl	10048872 <LL_RNG_IsActiveFlag_VAL_READY>
10048922:	1e03      	subs	r3, r0, #0
10048924:	d0f9      	beq.n	1004891a <HW_RNG_GetRandom16+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
10048926:	4b06      	ldr	r3, [pc, #24]	@ (10048940 <HW_RNG_GetRandom16+0x30>)
10048928:	0018      	movs	r0, r3
1004892a:	f7ff ffb3 	bl	10048894 <LL_RNG_GetRndVal>
1004892e:	0003      	movs	r3, r0
10048930:	b29a      	uxth	r2, r3
10048932:	687b      	ldr	r3, [r7, #4]
10048934:	801a      	strh	r2, [r3, #0]

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
10048936:	2300      	movs	r3, #0
}
10048938:	0018      	movs	r0, r3
1004893a:	46bd      	mov	sp, r7
1004893c:	b002      	add	sp, #8
1004893e:	bd80      	pop	{r7, pc}
10048940:	48600000 	.word	0x48600000

10048944 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
10048944:	b580      	push	{r7, lr}
10048946:	b082      	sub	sp, #8
10048948:	af00      	add	r7, sp, #0
1004894a:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
1004894c:	46c0      	nop			@ (mov r8, r8)
1004894e:	4b09      	ldr	r3, [pc, #36]	@ (10048974 <HW_RNG_GetRandom32+0x30>)
10048950:	0018      	movs	r0, r3
10048952:	f7ff ff8e 	bl	10048872 <LL_RNG_IsActiveFlag_VAL_READY>
10048956:	1e03      	subs	r3, r0, #0
10048958:	d0f9      	beq.n	1004894e <HW_RNG_GetRandom32+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
1004895a:	4b06      	ldr	r3, [pc, #24]	@ (10048974 <HW_RNG_GetRandom32+0x30>)
1004895c:	0018      	movs	r0, r3
1004895e:	f7ff ff99 	bl	10048894 <LL_RNG_GetRndVal>
10048962:	0002      	movs	r2, r0
10048964:	687b      	ldr	r3, [r7, #4]
10048966:	601a      	str	r2, [r3, #0]
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
10048968:	2300      	movs	r3, #0
}
1004896a:	0018      	movs	r0, r3
1004896c:	46bd      	mov	sp, r7
1004896e:	b002      	add	sp, #8
10048970:	bd80      	pop	{r7, pc}
10048972:	46c0      	nop			@ (mov r8, r8)
10048974:	48600000 	.word	0x48600000

10048978 <LL_PWR_SetPowerMode>:
  *         @arg LL_PWR_MODE_DEEPSTOP
  *         @arg LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
10048978:	b580      	push	{r7, lr}
1004897a:	b082      	sub	sp, #8
1004897c:	af00      	add	r7, sp, #0
1004897e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
10048980:	4b06      	ldr	r3, [pc, #24]	@ (1004899c <LL_PWR_SetPowerMode+0x24>)
10048982:	681b      	ldr	r3, [r3, #0]
10048984:	2201      	movs	r2, #1
10048986:	4393      	bics	r3, r2
10048988:	0019      	movs	r1, r3
1004898a:	4b04      	ldr	r3, [pc, #16]	@ (1004899c <LL_PWR_SetPowerMode+0x24>)
1004898c:	687a      	ldr	r2, [r7, #4]
1004898e:	430a      	orrs	r2, r1
10048990:	601a      	str	r2, [r3, #0]
}
10048992:	46c0      	nop			@ (mov r8, r8)
10048994:	46bd      	mov	sp, r7
10048996:	b002      	add	sp, #8
10048998:	bd80      	pop	{r7, pc}
1004899a:	46c0      	nop			@ (mov r8, r8)
1004899c:	48500000 	.word	0x48500000

100489a0 <LL_PWR_DisableGPIORET>:
  * @brief  Disable the GPIORET feature, don't retain their status during DEEPSTOP and exiting from DEEPSTOP.
  * @rmtoll CR2         GPIORET      LL_PWR_DisableGPIORET
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableGPIORET(void)
{
100489a0:	b580      	push	{r7, lr}
100489a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
100489a4:	4b04      	ldr	r3, [pc, #16]	@ (100489b8 <LL_PWR_DisableGPIORET+0x18>)
100489a6:	685a      	ldr	r2, [r3, #4]
100489a8:	4b03      	ldr	r3, [pc, #12]	@ (100489b8 <LL_PWR_DisableGPIORET+0x18>)
100489aa:	4904      	ldr	r1, [pc, #16]	@ (100489bc <LL_PWR_DisableGPIORET+0x1c>)
100489ac:	400a      	ands	r2, r1
100489ae:	605a      	str	r2, [r3, #4]
}
100489b0:	46c0      	nop			@ (mov r8, r8)
100489b2:	46bd      	mov	sp, r7
100489b4:	bd80      	pop	{r7, pc}
100489b6:	46c0      	nop			@ (mov r8, r8)
100489b8:	48500000 	.word	0x48500000
100489bc:	fffffeff 	.word	0xfffffeff

100489c0 <LL_PWR_ClearWakeupSource>:
  *         (*) Not available on devices STM32WB05 and STM32WB09
  *         (**) Not available on devices STM32WB07
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearWakeupSource(uint32_t source)
{
100489c0:	b580      	push	{r7, lr}
100489c2:	b082      	sub	sp, #8
100489c4:	af00      	add	r7, sp, #0
100489c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(PWR->SR1, (source & 0x0000FFFF));
100489c8:	4b06      	ldr	r3, [pc, #24]	@ (100489e4 <LL_PWR_ClearWakeupSource+0x24>)
100489ca:	687a      	ldr	r2, [r7, #4]
100489cc:	0412      	lsls	r2, r2, #16
100489ce:	0c12      	lsrs	r2, r2, #16
100489d0:	611a      	str	r2, [r3, #16]
  WRITE_REG(PWR->SR3, (source >> 16));
100489d2:	4b04      	ldr	r3, [pc, #16]	@ (100489e4 <LL_PWR_ClearWakeupSource+0x24>)
100489d4:	687a      	ldr	r2, [r7, #4]
100489d6:	0c12      	lsrs	r2, r2, #16
100489d8:	639a      	str	r2, [r3, #56]	@ 0x38
}
100489da:	46c0      	nop			@ (mov r8, r8)
100489dc:	46bd      	mov	sp, r7
100489de:	b002      	add	sp, #8
100489e0:	bd80      	pop	{r7, pc}
100489e2:	46c0      	nop			@ (mov r8, r8)
100489e4:	48500000 	.word	0x48500000

100489e8 <LL_PWR_IsActiveFlag_REGLPS>:
  * @brief  Indicate whether or not the low-power regulator is ready
  * @rmtoll SR2      REGLPS         LL_PWR_IsActiveFlag_REGLPS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGLPS(void)
{
100489e8:	b580      	push	{r7, lr}
100489ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_REGLPS) == (PWR_SR2_REGLPS)) ? 1UL : 0UL);
100489ec:	4b07      	ldr	r3, [pc, #28]	@ (10048a0c <LL_PWR_IsActiveFlag_REGLPS+0x24>)
100489ee:	695a      	ldr	r2, [r3, #20]
100489f0:	2380      	movs	r3, #128	@ 0x80
100489f2:	005b      	lsls	r3, r3, #1
100489f4:	401a      	ands	r2, r3
100489f6:	2380      	movs	r3, #128	@ 0x80
100489f8:	005b      	lsls	r3, r3, #1
100489fa:	429a      	cmp	r2, r3
100489fc:	d101      	bne.n	10048a02 <LL_PWR_IsActiveFlag_REGLPS+0x1a>
100489fe:	2301      	movs	r3, #1
10048a00:	e000      	b.n	10048a04 <LL_PWR_IsActiveFlag_REGLPS+0x1c>
10048a02:	2300      	movs	r3, #0
}
10048a04:	0018      	movs	r0, r3
10048a06:	46bd      	mov	sp, r7
10048a08:	bd80      	pop	{r7, pc}
10048a0a:	46c0      	nop			@ (mov r8, r8)
10048a0c:	48500000 	.word	0x48500000

10048a10 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10048a10:	b580      	push	{r7, lr}
10048a12:	b082      	sub	sp, #8
10048a14:	af00      	add	r7, sp, #0
10048a16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10048a18:	4b08      	ldr	r3, [pc, #32]	@ (10048a3c <LL_PWR_SetNoPullB+0x2c>)
10048a1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10048a1c:	687b      	ldr	r3, [r7, #4]
10048a1e:	43d9      	mvns	r1, r3
10048a20:	4b06      	ldr	r3, [pc, #24]	@ (10048a3c <LL_PWR_SetNoPullB+0x2c>)
10048a22:	400a      	ands	r2, r1
10048a24:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10048a26:	4b05      	ldr	r3, [pc, #20]	@ (10048a3c <LL_PWR_SetNoPullB+0x2c>)
10048a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10048a2a:	687b      	ldr	r3, [r7, #4]
10048a2c:	43d9      	mvns	r1, r3
10048a2e:	4b03      	ldr	r3, [pc, #12]	@ (10048a3c <LL_PWR_SetNoPullB+0x2c>)
10048a30:	400a      	ands	r2, r1
10048a32:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10048a34:	46c0      	nop			@ (mov r8, r8)
10048a36:	46bd      	mov	sp, r7
10048a38:	b002      	add	sp, #8
10048a3a:	bd80      	pop	{r7, pc}
10048a3c:	48500000 	.word	0x48500000

10048a40 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
10048a40:	b580      	push	{r7, lr}
10048a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10048a44:	4b07      	ldr	r3, [pc, #28]	@ (10048a64 <LL_RCC_HSE_IsReady+0x24>)
10048a46:	681a      	ldr	r2, [r3, #0]
10048a48:	2380      	movs	r3, #128	@ 0x80
10048a4a:	029b      	lsls	r3, r3, #10
10048a4c:	401a      	ands	r2, r3
10048a4e:	2380      	movs	r3, #128	@ 0x80
10048a50:	029b      	lsls	r3, r3, #10
10048a52:	429a      	cmp	r2, r3
10048a54:	d101      	bne.n	10048a5a <LL_RCC_HSE_IsReady+0x1a>
10048a56:	2301      	movs	r3, #1
10048a58:	e000      	b.n	10048a5c <LL_RCC_HSE_IsReady+0x1c>
10048a5a:	2300      	movs	r3, #0
}
10048a5c:	0018      	movs	r0, r3
10048a5e:	46bd      	mov	sp, r7
10048a60:	bd80      	pop	{r7, pc}
10048a62:	46c0      	nop			@ (mov r8, r8)
10048a64:	48400000 	.word	0x48400000

10048a68 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10048a68:	b580      	push	{r7, lr}
10048a6a:	b082      	sub	sp, #8
10048a6c:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10048a6e:	46c0      	nop			@ (mov r8, r8)
10048a70:	4b0f      	ldr	r3, [pc, #60]	@ (10048ab0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048a72:	681a      	ldr	r2, [r3, #0]
10048a74:	2380      	movs	r3, #128	@ 0x80
10048a76:	029b      	lsls	r3, r3, #10
10048a78:	4013      	ands	r3, r2
10048a7a:	d0f9      	beq.n	10048a70 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048a7c:	4b0c      	ldr	r3, [pc, #48]	@ (10048ab0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048a7e:	689a      	ldr	r2, [r3, #8]
10048a80:	4b0b      	ldr	r3, [pc, #44]	@ (10048ab0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048a82:	2102      	movs	r1, #2
10048a84:	430a      	orrs	r2, r1
10048a86:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10048a88:	2300      	movs	r3, #0
10048a8a:	607b      	str	r3, [r7, #4]
10048a8c:	e003      	b.n	10048a96 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
10048a8e:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10048a90:	687b      	ldr	r3, [r7, #4]
10048a92:	3301      	adds	r3, #1
10048a94:	607b      	str	r3, [r7, #4]
10048a96:	687b      	ldr	r3, [r7, #4]
10048a98:	2b05      	cmp	r3, #5
10048a9a:	ddf8      	ble.n	10048a8e <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10048a9c:	4b04      	ldr	r3, [pc, #16]	@ (10048ab0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048a9e:	689a      	ldr	r2, [r3, #8]
10048aa0:	4b03      	ldr	r3, [pc, #12]	@ (10048ab0 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048aa2:	2104      	movs	r1, #4
10048aa4:	430a      	orrs	r2, r1
10048aa6:	609a      	str	r2, [r3, #8]
}
10048aa8:	46c0      	nop			@ (mov r8, r8)
10048aaa:	46bd      	mov	sp, r7
10048aac:	b002      	add	sp, #8
10048aae:	bd80      	pop	{r7, pc}
10048ab0:	48400000 	.word	0x48400000

10048ab4 <LL_RCC_DIRECT_HSE_IsEnabled>:
  * @brief  Check if DIRECT_HSE mode is ready
  * @rmtoll CFGR           HSESEL/STOPHSI  LL_RCC_DIRECT_HSE_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_DIRECT_HSE_IsEnabled(void)
{
10048ab4:	b580      	push	{r7, lr}
10048ab6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR_HSESEL_STATUS)
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10048ab8:	4b05      	ldr	r3, [pc, #20]	@ (10048ad0 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
10048aba:	689b      	ldr	r3, [r3, #8]
10048abc:	2208      	movs	r2, #8
10048abe:	4013      	ands	r3, r2
10048ac0:	2b08      	cmp	r3, #8
10048ac2:	d101      	bne.n	10048ac8 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10048ac4:	2301      	movs	r3, #1
10048ac6:	e000      	b.n	10048aca <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10048ac8:	2300      	movs	r3, #0
#else
  return (((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL) == (RCC_CFGR_HSESEL)) && (READ_BIT(RCC->CFGR, RCC_CFGR_STOPHSI) == (RCC_CFGR_STOPHSI))) ? 1UL : 0UL);
#endif
}
10048aca:	0018      	movs	r0, r3
10048acc:	46bd      	mov	sp, r7
10048ace:	bd80      	pop	{r7, pc}
10048ad0:	48400000 	.word	0x48400000

10048ad4 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10048ad4:	b580      	push	{r7, lr}
10048ad6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10048ad8:	4b04      	ldr	r3, [pc, #16]	@ (10048aec <LL_RCC_LSE_Enable+0x18>)
10048ada:	681a      	ldr	r2, [r3, #0]
10048adc:	4b03      	ldr	r3, [pc, #12]	@ (10048aec <LL_RCC_LSE_Enable+0x18>)
10048ade:	2110      	movs	r1, #16
10048ae0:	430a      	orrs	r2, r1
10048ae2:	601a      	str	r2, [r3, #0]
}
10048ae4:	46c0      	nop			@ (mov r8, r8)
10048ae6:	46bd      	mov	sp, r7
10048ae8:	bd80      	pop	{r7, pc}
10048aea:	46c0      	nop			@ (mov r8, r8)
10048aec:	48400000 	.word	0x48400000

10048af0 <LL_RCC_LSE_IsEnabled>:
  * @brief  Check if Low Speed External (LSE) crystal has been enabled or not
  * @rmtoll CR         LSEON         LL_RCC_LSE_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsEnabled(void)
{
10048af0:	b580      	push	{r7, lr}
10048af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEON) == (RCC_CR_LSEON)) ? 1UL : 0UL);
10048af4:	4b05      	ldr	r3, [pc, #20]	@ (10048b0c <LL_RCC_LSE_IsEnabled+0x1c>)
10048af6:	681b      	ldr	r3, [r3, #0]
10048af8:	2210      	movs	r2, #16
10048afa:	4013      	ands	r3, r2
10048afc:	2b10      	cmp	r3, #16
10048afe:	d101      	bne.n	10048b04 <LL_RCC_LSE_IsEnabled+0x14>
10048b00:	2301      	movs	r3, #1
10048b02:	e000      	b.n	10048b06 <LL_RCC_LSE_IsEnabled+0x16>
10048b04:	2300      	movs	r3, #0
}
10048b06:	0018      	movs	r0, r3
10048b08:	46bd      	mov	sp, r7
10048b0a:	bd80      	pop	{r7, pc}
10048b0c:	48400000 	.word	0x48400000

10048b10 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
10048b10:	b580      	push	{r7, lr}
10048b12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10048b14:	4b05      	ldr	r3, [pc, #20]	@ (10048b2c <LL_RCC_LSE_IsReady+0x1c>)
10048b16:	681b      	ldr	r3, [r3, #0]
10048b18:	2220      	movs	r2, #32
10048b1a:	4013      	ands	r3, r2
10048b1c:	2b20      	cmp	r3, #32
10048b1e:	d101      	bne.n	10048b24 <LL_RCC_LSE_IsReady+0x14>
10048b20:	2301      	movs	r3, #1
10048b22:	e000      	b.n	10048b26 <LL_RCC_LSE_IsReady+0x16>
10048b24:	2300      	movs	r3, #0
}
10048b26:	0018      	movs	r0, r3
10048b28:	46bd      	mov	sp, r7
10048b2a:	bd80      	pop	{r7, pc}
10048b2c:	48400000 	.word	0x48400000

10048b30 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
10048b30:	b580      	push	{r7, lr}
10048b32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10048b34:	4b04      	ldr	r3, [pc, #16]	@ (10048b48 <LL_RCC_LSI_Enable+0x18>)
10048b36:	681a      	ldr	r2, [r3, #0]
10048b38:	4b03      	ldr	r3, [pc, #12]	@ (10048b48 <LL_RCC_LSI_Enable+0x18>)
10048b3a:	2104      	movs	r1, #4
10048b3c:	430a      	orrs	r2, r1
10048b3e:	601a      	str	r2, [r3, #0]
}
10048b40:	46c0      	nop			@ (mov r8, r8)
10048b42:	46bd      	mov	sp, r7
10048b44:	bd80      	pop	{r7, pc}
10048b46:	46c0      	nop			@ (mov r8, r8)
10048b48:	48400000 	.word	0x48400000

10048b4c <LL_RCC_LSI_IsEnabled>:
  * @brief  Check if LSI crystal oscillator is enabled.
  * @rmtoll CR         LSION        LL_RCC_LSI_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsEnabled(void)
{
10048b4c:	b580      	push	{r7, lr}
10048b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSION) == (RCC_CR_LSION)) ? 1UL : 0UL);
10048b50:	4b05      	ldr	r3, [pc, #20]	@ (10048b68 <LL_RCC_LSI_IsEnabled+0x1c>)
10048b52:	681b      	ldr	r3, [r3, #0]
10048b54:	2204      	movs	r2, #4
10048b56:	4013      	ands	r3, r2
10048b58:	2b04      	cmp	r3, #4
10048b5a:	d101      	bne.n	10048b60 <LL_RCC_LSI_IsEnabled+0x14>
10048b5c:	2301      	movs	r3, #1
10048b5e:	e000      	b.n	10048b62 <LL_RCC_LSI_IsEnabled+0x16>
10048b60:	2300      	movs	r3, #0
}
10048b62:	0018      	movs	r0, r3
10048b64:	46bd      	mov	sp, r7
10048b66:	bd80      	pop	{r7, pc}
10048b68:	48400000 	.word	0x48400000

10048b6c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
10048b6c:	b580      	push	{r7, lr}
10048b6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10048b70:	4b05      	ldr	r3, [pc, #20]	@ (10048b88 <LL_RCC_LSI_IsReady+0x1c>)
10048b72:	681b      	ldr	r3, [r3, #0]
10048b74:	2208      	movs	r2, #8
10048b76:	4013      	ands	r3, r2
10048b78:	2b08      	cmp	r3, #8
10048b7a:	d101      	bne.n	10048b80 <LL_RCC_LSI_IsReady+0x14>
10048b7c:	2301      	movs	r3, #1
10048b7e:	e000      	b.n	10048b82 <LL_RCC_LSI_IsReady+0x16>
10048b80:	2300      	movs	r3, #0
}
10048b82:	0018      	movs	r0, r3
10048b84:	46bd      	mov	sp, r7
10048b86:	bd80      	pop	{r7, pc}
10048b88:	48400000 	.word	0x48400000

10048b8c <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
10048b8c:	b580      	push	{r7, lr}
10048b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10048b90:	4b04      	ldr	r3, [pc, #16]	@ (10048ba4 <LL_RCC_RC64MPLL_Disable+0x18>)
10048b92:	681a      	ldr	r2, [r3, #0]
10048b94:	4b03      	ldr	r3, [pc, #12]	@ (10048ba4 <LL_RCC_RC64MPLL_Disable+0x18>)
10048b96:	4904      	ldr	r1, [pc, #16]	@ (10048ba8 <LL_RCC_RC64MPLL_Disable+0x1c>)
10048b98:	400a      	ands	r2, r1
10048b9a:	601a      	str	r2, [r3, #0]
}
10048b9c:	46c0      	nop			@ (mov r8, r8)
10048b9e:	46bd      	mov	sp, r7
10048ba0:	bd80      	pop	{r7, pc}
10048ba2:	46c0      	nop			@ (mov r8, r8)
10048ba4:	48400000 	.word	0x48400000
10048ba8:	ffffdfff 	.word	0xffffdfff

10048bac <LL_APB2_GRP1_IsEnabledClock>:
{
10048bac:	b580      	push	{r7, lr}
10048bae:	b082      	sub	sp, #8
10048bb0:	af00      	add	r7, sp, #0
10048bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10048bb4:	4b06      	ldr	r3, [pc, #24]	@ (10048bd0 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10048bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10048bb8:	687a      	ldr	r2, [r7, #4]
10048bba:	4013      	ands	r3, r2
10048bbc:	687a      	ldr	r2, [r7, #4]
10048bbe:	429a      	cmp	r2, r3
10048bc0:	d101      	bne.n	10048bc6 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10048bc2:	2301      	movs	r3, #1
10048bc4:	e000      	b.n	10048bc8 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10048bc6:	2300      	movs	r3, #0
}
10048bc8:	0018      	movs	r0, r3
10048bca:	46bd      	mov	sp, r7
10048bcc:	b002      	add	sp, #8
10048bce:	bd80      	pop	{r7, pc}
10048bd0:	48400000 	.word	0x48400000

10048bd4 <PWR_EnterOffMode>:
/** @addtogroup TINY_LPM_IF_Exported_functions
 * @{
 */

void PWR_EnterOffMode( void )
{
10048bd4:	b590      	push	{r4, r7, lr}
10048bd6:	b085      	sub	sp, #20
10048bd8:	af02      	add	r7, sp, #8
  PWR_DEEPSTOPTypeDef configDS;

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_ENTER);
10048bda:	2003      	movs	r0, #3
10048bdc:	f002 f89f 	bl	1004ad1e <SYSTEM_DEBUG_SIGNAL_SET>
  /* USER CODE BEGIN PWR_EnterOffMode_1 */

  /* USER CODE END PWR_EnterOffMode_1 */

  /* Save the clock configuration */
  clockContext.directHSEenabled = FALSE;
10048be0:	4b2c      	ldr	r3, [pc, #176]	@ (10048c94 <PWR_EnterOffMode+0xc0>)
10048be2:	2200      	movs	r2, #0
10048be4:	701a      	strb	r2, [r3, #0]
  clockContext.LSEenabled = FALSE;
10048be6:	4b2b      	ldr	r3, [pc, #172]	@ (10048c94 <PWR_EnterOffMode+0xc0>)
10048be8:	2200      	movs	r2, #0
10048bea:	705a      	strb	r2, [r3, #1]
  clockContext.LSIenabled = FALSE;
10048bec:	4b29      	ldr	r3, [pc, #164]	@ (10048c94 <PWR_EnterOffMode+0xc0>)
10048bee:	2200      	movs	r2, #0
10048bf0:	709a      	strb	r2, [r3, #2]
  if (LL_RCC_DIRECT_HSE_IsEnabled())
10048bf2:	f7ff ff5f 	bl	10048ab4 <LL_RCC_DIRECT_HSE_IsEnabled>
10048bf6:	1e03      	subs	r3, r0, #0
10048bf8:	d002      	beq.n	10048c00 <PWR_EnterOffMode+0x2c>
  {
    clockContext.directHSEenabled = TRUE;
10048bfa:	4b26      	ldr	r3, [pc, #152]	@ (10048c94 <PWR_EnterOffMode+0xc0>)
10048bfc:	2201      	movs	r2, #1
10048bfe:	701a      	strb	r2, [r3, #0]
  }
  if (LL_RCC_LSE_IsEnabled())
10048c00:	f7ff ff76 	bl	10048af0 <LL_RCC_LSE_IsEnabled>
10048c04:	1e03      	subs	r3, r0, #0
10048c06:	d00e      	beq.n	10048c26 <PWR_EnterOffMode+0x52>
  {
    clockContext.LSEenabled = TRUE;
10048c08:	4b22      	ldr	r3, [pc, #136]	@ (10048c94 <PWR_EnterOffMode+0xc0>)
10048c0a:	2201      	movs	r2, #1
10048c0c:	705a      	strb	r2, [r3, #1]
    /* Enable pull down for LSE pins */
    HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_12);
10048c0e:	2380      	movs	r3, #128	@ 0x80
10048c10:	015b      	lsls	r3, r3, #5
10048c12:	0019      	movs	r1, r3
10048c14:	2001      	movs	r0, #1
10048c16:	f004 faad 	bl	1004d174 <HAL_PWREx_EnableGPIOPullDown>
    HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_13);
10048c1a:	2380      	movs	r3, #128	@ 0x80
10048c1c:	019b      	lsls	r3, r3, #6
10048c1e:	0019      	movs	r1, r3
10048c20:	2001      	movs	r0, #1
10048c22:	f004 faa7 	bl	1004d174 <HAL_PWREx_EnableGPIOPullDown>
  }
  if (LL_RCC_LSI_IsEnabled())
10048c26:	f7ff ff91 	bl	10048b4c <LL_RCC_LSI_IsEnabled>
10048c2a:	1e03      	subs	r3, r0, #0
10048c2c:	d002      	beq.n	10048c34 <PWR_EnterOffMode+0x60>
  {
    clockContext.LSIenabled = TRUE;
10048c2e:	4b19      	ldr	r3, [pc, #100]	@ (10048c94 <PWR_EnterOffMode+0xc0>)
10048c30:	2201      	movs	r2, #1
10048c32:	709a      	strb	r2, [r3, #2]
  }

  /* This signal cannot be reset later otherwise the GPIO output will be
     automatically restored to high at wakeup. */
  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_ENTER);
10048c34:	2003      	movs	r0, #3
10048c36:	f002 f87c 	bl	1004ad32 <SYSTEM_DEBUG_SIGNAL_RESET>

  /* Save all the peripheral registers and CPU peripipheral configuration */
  apb0.deepstop_wdg_state = ENABLE;
10048c3a:	4a17      	ldr	r2, [pc, #92]	@ (10048c98 <PWR_EnterOffMode+0xc4>)
10048c3c:	23ba      	movs	r3, #186	@ 0xba
10048c3e:	005b      	lsls	r3, r3, #1
10048c40:	2101      	movs	r1, #1
10048c42:	50d1      	str	r1, [r2, r3]
  prepareDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
10048c44:	4c15      	ldr	r4, [pc, #84]	@ (10048c9c <PWR_EnterOffMode+0xc8>)
10048c46:	4a16      	ldr	r2, [pc, #88]	@ (10048ca0 <PWR_EnterOffMode+0xcc>)
10048c48:	4916      	ldr	r1, [pc, #88]	@ (10048ca4 <PWR_EnterOffMode+0xd0>)
10048c4a:	4813      	ldr	r0, [pc, #76]	@ (10048c98 <PWR_EnterOffMode+0xc4>)
10048c4c:	4b16      	ldr	r3, [pc, #88]	@ (10048ca8 <PWR_EnterOffMode+0xd4>)
10048c4e:	9301      	str	r3, [sp, #4]
10048c50:	4b16      	ldr	r3, [pc, #88]	@ (10048cac <PWR_EnterOffMode+0xd8>)
10048c52:	9300      	str	r3, [sp, #0]
10048c54:	0023      	movs	r3, r4
10048c56:	f002 fc03 	bl	1004b460 <prepareDeviceLowPower>

  /* DEEPSTOP configuration */
  configDS.deepStopMode = PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF;
10048c5a:	2300      	movs	r3, #0
10048c5c:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigDEEPSTOP(&configDS);
10048c5e:	1d3b      	adds	r3, r7, #4
10048c60:	0018      	movs	r0, r3
10048c62:	f004 f9b9 	bl	1004cfd8 <HAL_PWR_ConfigDEEPSTOP>

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(LL_PWR_WAKEUP_ALL);
10048c66:	4b12      	ldr	r3, [pc, #72]	@ (10048cb0 <PWR_EnterOffMode+0xdc>)
10048c68:	0018      	movs	r0, r3
10048c6a:	f7ff fea9 	bl	100489c0 <LL_PWR_ClearWakeupSource>

  /* Enable the device DEEPSTOP configuration */
  LL_PWR_SetPowerMode(LL_PWR_MODE_DEEPSTOP);
10048c6e:	2000      	movs	r0, #0
10048c70:	f7ff fe82 	bl	10048978 <LL_PWR_SetPowerMode>

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10048c74:	4b0f      	ldr	r3, [pc, #60]	@ (10048cb4 <PWR_EnterOffMode+0xe0>)
10048c76:	691a      	ldr	r2, [r3, #16]
10048c78:	4b0e      	ldr	r3, [pc, #56]	@ (10048cb4 <PWR_EnterOffMode+0xe0>)
10048c7a:	2104      	movs	r1, #4
10048c7c:	430a      	orrs	r2, r1
10048c7e:	611a      	str	r2, [r3, #16]

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_ACTIVE);
10048c80:	2005      	movs	r0, #5
10048c82:	f002 f84c 	bl	1004ad1e <SYSTEM_DEBUG_SIGNAL_SET>

  /* Save the CPU context & Wait for Interrupt Request to enter in DEEPSTOP */
  CPUcontextSave();
10048c86:	f7f7 fa95 	bl	100401b4 <CPUcontextSave>

  /* USER CODE BEGIN PWR_EnterOffMode_2 */

  /* USER CODE END PWR_EnterOffMode_2 */
}
10048c8a:	46c0      	nop			@ (mov r8, r8)
10048c8c:	46bd      	mov	sp, r7
10048c8e:	b003      	add	sp, #12
10048c90:	bd90      	pop	{r4, r7, pc}
10048c92:	46c0      	nop			@ (mov r8, r8)
10048c94:	20000e34 	.word	0x20000e34
10048c98:	2000095c 	.word	0x2000095c
10048c9c:	20000be0 	.word	0x20000be0
10048ca0:	20000bdc 	.word	0x20000bdc
10048ca4:	20000ad4 	.word	0x20000ad4
10048ca8:	20000de4 	.word	0x20000de4
10048cac:	20000db0 	.word	0x20000db0
10048cb0:	00ffffff 	.word	0x00ffffff
10048cb4:	e000ed00 	.word	0xe000ed00

10048cb8 <PWR_ExitOffMode>:

void PWR_ExitOffMode( void )
{
10048cb8:	b590      	push	{r4, r7, lr}
10048cba:	b083      	sub	sp, #12
10048cbc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN PWR_ExitOffMode_1 */

  /* USER CODE END PWR_ExitOffMode_1 */

  /* Restore low speed clock configuration */
  if (clockContext.LSEenabled == TRUE)
10048cbe:	4b32      	ldr	r3, [pc, #200]	@ (10048d88 <PWR_ExitOffMode+0xd0>)
10048cc0:	785b      	ldrb	r3, [r3, #1]
10048cc2:	2b01      	cmp	r3, #1
10048cc4:	d106      	bne.n	10048cd4 <PWR_ExitOffMode+0x1c>
  {
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 | LL_PWR_GPIO_BIT_13);
10048cc6:	23c0      	movs	r3, #192	@ 0xc0
10048cc8:	019b      	lsls	r3, r3, #6
10048cca:	0018      	movs	r0, r3
10048ccc:	f7ff fea0 	bl	10048a10 <LL_PWR_SetNoPullB>
    LL_RCC_LSE_Enable();
10048cd0:	f7ff ff00 	bl	10048ad4 <LL_RCC_LSE_Enable>
  }
  if (clockContext.LSIenabled == TRUE)
10048cd4:	4b2c      	ldr	r3, [pc, #176]	@ (10048d88 <PWR_ExitOffMode+0xd0>)
10048cd6:	789b      	ldrb	r3, [r3, #2]
10048cd8:	2b01      	cmp	r3, #1
10048cda:	d101      	bne.n	10048ce0 <PWR_ExitOffMode+0x28>
  {
    LL_RCC_LSI_Enable();
10048cdc:	f7ff ff28 	bl	10048b30 <LL_RCC_LSI_Enable>
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10048ce0:	4b2a      	ldr	r3, [pc, #168]	@ (10048d8c <PWR_ExitOffMode+0xd4>)
10048ce2:	691a      	ldr	r2, [r3, #16]
10048ce4:	4b29      	ldr	r3, [pc, #164]	@ (10048d8c <PWR_ExitOffMode+0xd4>)
10048ce6:	2104      	movs	r1, #4
10048ce8:	438a      	bics	r2, r1
10048cea:	611a      	str	r2, [r3, #16]

  /* Restore all the peripheral registers and CPU peripipheral configuration */
  restoreDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
10048cec:	4c28      	ldr	r4, [pc, #160]	@ (10048d90 <PWR_ExitOffMode+0xd8>)
10048cee:	4a29      	ldr	r2, [pc, #164]	@ (10048d94 <PWR_ExitOffMode+0xdc>)
10048cf0:	4929      	ldr	r1, [pc, #164]	@ (10048d98 <PWR_ExitOffMode+0xe0>)
10048cf2:	482a      	ldr	r0, [pc, #168]	@ (10048d9c <PWR_ExitOffMode+0xe4>)
10048cf4:	4b2a      	ldr	r3, [pc, #168]	@ (10048da0 <PWR_ExitOffMode+0xe8>)
10048cf6:	9301      	str	r3, [sp, #4]
10048cf8:	4b2a      	ldr	r3, [pc, #168]	@ (10048da4 <PWR_ExitOffMode+0xec>)
10048cfa:	9300      	str	r3, [sp, #0]
10048cfc:	0023      	movs	r3, r4
10048cfe:	f002 fbcb 	bl	1004b498 <restoreDeviceLowPower>

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_ACTIVE);
10048d02:	2005      	movs	r0, #5
10048d04:	f002 f815 	bl	1004ad32 <SYSTEM_DEBUG_SIGNAL_RESET>
  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_EXIT);
10048d08:	2004      	movs	r0, #4
10048d0a:	f002 f808 	bl	1004ad1e <SYSTEM_DEBUG_SIGNAL_SET>

#if defined(PWR_CR2_GPIORET)
  /* Disable the GPIO retention at wake DEEPSTOP configuration */
  LL_PWR_DisableGPIORET();
10048d0e:	f7ff fe47 	bl	100489a0 <LL_PWR_DisableGPIORET>
#endif

  /* Wait until the HSE is ready */
  while(LL_RCC_HSE_IsReady() == 0U);
10048d12:	46c0      	nop			@ (mov r8, r8)
10048d14:	f7ff fe94 	bl	10048a40 <LL_RCC_HSE_IsReady>
10048d18:	1e03      	subs	r3, r0, #0
10048d1a:	d0fb      	beq.n	10048d14 <PWR_ExitOffMode+0x5c>

  /* Restore the DIRECT_HSE configuration */
  if (clockContext.directHSEenabled == TRUE)
10048d1c:	4b1a      	ldr	r3, [pc, #104]	@ (10048d88 <PWR_ExitOffMode+0xd0>)
10048d1e:	781b      	ldrb	r3, [r3, #0]
10048d20:	2b01      	cmp	r3, #1
10048d22:	d103      	bne.n	10048d2c <PWR_ExitOffMode+0x74>
  {
    LL_RCC_DIRECT_HSE_Enable();
10048d24:	f7ff fea0 	bl	10048a68 <LL_RCC_DIRECT_HSE_Enable>
    LL_RCC_RC64MPLL_Disable();
10048d28:	f7ff ff30 	bl	10048b8c <LL_RCC_RC64MPLL_Disable>
  }
  if (clockContext.LSEenabled == TRUE)
10048d2c:	4b16      	ldr	r3, [pc, #88]	@ (10048d88 <PWR_ExitOffMode+0xd0>)
10048d2e:	785b      	ldrb	r3, [r3, #1]
10048d30:	2b01      	cmp	r3, #1
10048d32:	d104      	bne.n	10048d3e <PWR_ExitOffMode+0x86>
  {
    /* Wait until the LSE is ready */
    while(LL_RCC_LSE_IsReady() == 0U);
10048d34:	46c0      	nop			@ (mov r8, r8)
10048d36:	f7ff feeb 	bl	10048b10 <LL_RCC_LSE_IsReady>
10048d3a:	1e03      	subs	r3, r0, #0
10048d3c:	d0fb      	beq.n	10048d36 <PWR_ExitOffMode+0x7e>
  }
  if (clockContext.LSIenabled == TRUE)
10048d3e:	4b12      	ldr	r3, [pc, #72]	@ (10048d88 <PWR_ExitOffMode+0xd0>)
10048d40:	789b      	ldrb	r3, [r3, #2]
10048d42:	2b01      	cmp	r3, #1
10048d44:	d104      	bne.n	10048d50 <PWR_ExitOffMode+0x98>
  {
    /* Wait until the LSI is ready */
    while(LL_RCC_LSI_IsReady() == 0U);
10048d46:	46c0      	nop			@ (mov r8, r8)
10048d48:	f7ff ff10 	bl	10048b6c <LL_RCC_LSI_IsReady>
10048d4c:	1e03      	subs	r3, r0, #0
10048d4e:	d0fb      	beq.n	10048d48 <PWR_ExitOffMode+0x90>
  }
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10048d50:	2001      	movs	r0, #1
10048d52:	f7ff ff2b 	bl	10048bac <LL_APB2_GRP1_IsEnabledClock>
10048d56:	1e03      	subs	r3, r0, #0
10048d58:	d004      	beq.n	10048d64 <PWR_ExitOffMode+0xac>
  {
    /* Wait untile the ABSOLUTE TIME clock correctly */
    while(WAKEUP->ABSOLUTE_TIME == 0xF);
10048d5a:	46c0      	nop			@ (mov r8, r8)
10048d5c:	4b12      	ldr	r3, [pc, #72]	@ (10048da8 <PWR_ExitOffMode+0xf0>)
10048d5e:	691b      	ldr	r3, [r3, #16]
10048d60:	2b0f      	cmp	r3, #15
10048d62:	d0fb      	beq.n	10048d5c <PWR_ExitOffMode+0xa4>
  }

  if(RAM_VR.WakeupFromSleepFlag)
10048d64:	4b11      	ldr	r3, [pc, #68]	@ (10048dac <PWR_ExitOffMode+0xf4>)
10048d66:	689b      	ldr	r3, [r3, #8]
10048d68:	2b00      	cmp	r3, #0
10048d6a:	d001      	beq.n	10048d70 <PWR_ExitOffMode+0xb8>
  {
    /* Handler to manage the IOs IRQ if needed */
    HAL_PWR_WKUP_IRQHandler();
10048d6c:	f004 f988 	bl	1004d080 <HAL_PWR_WKUP_IRQHandler>
  }
  
  /* Wait until the Low Power regulator is ready */
  while(LL_PWR_IsActiveFlag_REGLPS() == 0);
10048d70:	46c0      	nop			@ (mov r8, r8)
10048d72:	f7ff fe39 	bl	100489e8 <LL_PWR_IsActiveFlag_REGLPS>
10048d76:	1e03      	subs	r3, r0, #0
10048d78:	d0fb      	beq.n	10048d72 <PWR_ExitOffMode+0xba>

  /* USER CODE BEGIN PWR_ExitOffMode_2 */

  /* USER CODE END PWR_ExitOffMode_2 */

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_EXIT);
10048d7a:	2004      	movs	r0, #4
10048d7c:	f001 ffd9 	bl	1004ad32 <SYSTEM_DEBUG_SIGNAL_RESET>
}
10048d80:	46c0      	nop			@ (mov r8, r8)
10048d82:	46bd      	mov	sp, r7
10048d84:	b001      	add	sp, #4
10048d86:	bd90      	pop	{r4, r7, pc}
10048d88:	20000e34 	.word	0x20000e34
10048d8c:	e000ed00 	.word	0xe000ed00
10048d90:	20000be0 	.word	0x20000be0
10048d94:	20000bdc 	.word	0x20000bdc
10048d98:	20000ad4 	.word	0x20000ad4
10048d9c:	2000095c 	.word	0x2000095c
10048da0:	20000de4 	.word	0x20000de4
10048da4:	20000db0 	.word	0x20000db0
10048da8:	60001800 	.word	0x60001800
10048dac:	20000004 	.word	0x20000004

10048db0 <PWR_EnterStopMode>:

void PWR_EnterStopMode( void )
{
10048db0:	b590      	push	{r4, r7, lr}
10048db2:	b085      	sub	sp, #20
10048db4:	af02      	add	r7, sp, #8
  PWR_DEEPSTOPTypeDef configDS;

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_ENTER);
10048db6:	2000      	movs	r0, #0
10048db8:	f001 ffb1 	bl	1004ad1e <SYSTEM_DEBUG_SIGNAL_SET>
  /* USER CODE BEGIN PWR_EnterStopMode_1 */

  /* USER CODE END PWR_EnterStopMode_1 */

  /* Save the clock configuration */
  clockContext.directHSEenabled = FALSE;
10048dbc:	4b23      	ldr	r3, [pc, #140]	@ (10048e4c <PWR_EnterStopMode+0x9c>)
10048dbe:	2200      	movs	r2, #0
10048dc0:	701a      	strb	r2, [r3, #0]
  clockContext.LSEenabled = FALSE;
10048dc2:	4b22      	ldr	r3, [pc, #136]	@ (10048e4c <PWR_EnterStopMode+0x9c>)
10048dc4:	2200      	movs	r2, #0
10048dc6:	705a      	strb	r2, [r3, #1]
  clockContext.LSIenabled = FALSE;
10048dc8:	4b20      	ldr	r3, [pc, #128]	@ (10048e4c <PWR_EnterStopMode+0x9c>)
10048dca:	2200      	movs	r2, #0
10048dcc:	709a      	strb	r2, [r3, #2]
  if (LL_RCC_DIRECT_HSE_IsEnabled())
10048dce:	f7ff fe71 	bl	10048ab4 <LL_RCC_DIRECT_HSE_IsEnabled>
10048dd2:	1e03      	subs	r3, r0, #0
10048dd4:	d002      	beq.n	10048ddc <PWR_EnterStopMode+0x2c>
  {
    clockContext.directHSEenabled = TRUE;
10048dd6:	4b1d      	ldr	r3, [pc, #116]	@ (10048e4c <PWR_EnterStopMode+0x9c>)
10048dd8:	2201      	movs	r2, #1
10048dda:	701a      	strb	r2, [r3, #0]
  }

  /* Setup the wakeup sources */
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_BLEHOST|PWR_WAKEUP_BLE, 0);
10048ddc:	23c0      	movs	r3, #192	@ 0xc0
10048dde:	019b      	lsls	r3, r3, #6
10048de0:	2100      	movs	r1, #0
10048de2:	0018      	movs	r0, r3
10048de4:	f004 f89c 	bl	1004cf20 <HAL_PWR_EnableWakeUpPin>

  /* This signal cannot be reset later otherwise the GPIO output will be
     automatically restored to high at wakeup. */
  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_ENTER);
10048de8:	2000      	movs	r0, #0
10048dea:	f001 ffa2 	bl	1004ad32 <SYSTEM_DEBUG_SIGNAL_RESET>

  /* Save all the peripheral registers and CPU peripipheral configuration */
  apb0.deepstop_wdg_state = ENABLE;
10048dee:	4a18      	ldr	r2, [pc, #96]	@ (10048e50 <PWR_EnterStopMode+0xa0>)
10048df0:	23ba      	movs	r3, #186	@ 0xba
10048df2:	005b      	lsls	r3, r3, #1
10048df4:	2101      	movs	r1, #1
10048df6:	50d1      	str	r1, [r2, r3]
  prepareDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
10048df8:	4c16      	ldr	r4, [pc, #88]	@ (10048e54 <PWR_EnterStopMode+0xa4>)
10048dfa:	4a17      	ldr	r2, [pc, #92]	@ (10048e58 <PWR_EnterStopMode+0xa8>)
10048dfc:	4917      	ldr	r1, [pc, #92]	@ (10048e5c <PWR_EnterStopMode+0xac>)
10048dfe:	4814      	ldr	r0, [pc, #80]	@ (10048e50 <PWR_EnterStopMode+0xa0>)
10048e00:	4b17      	ldr	r3, [pc, #92]	@ (10048e60 <PWR_EnterStopMode+0xb0>)
10048e02:	9301      	str	r3, [sp, #4]
10048e04:	4b17      	ldr	r3, [pc, #92]	@ (10048e64 <PWR_EnterStopMode+0xb4>)
10048e06:	9300      	str	r3, [sp, #0]
10048e08:	0023      	movs	r3, r4
10048e0a:	f002 fb29 	bl	1004b460 <prepareDeviceLowPower>

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(LL_PWR_WAKEUP_ALL);
10048e0e:	4b16      	ldr	r3, [pc, #88]	@ (10048e68 <PWR_EnterStopMode+0xb8>)
10048e10:	0018      	movs	r0, r3
10048e12:	f7ff fdd5 	bl	100489c0 <LL_PWR_ClearWakeupSource>

  /* DEEPSTOP configuration */
  configDS.deepStopMode = PWR_DEEPSTOP_WITH_SLOW_CLOCK_ON;
10048e16:	2301      	movs	r3, #1
10048e18:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigDEEPSTOP(&configDS);
10048e1a:	1d3b      	adds	r3, r7, #4
10048e1c:	0018      	movs	r0, r3
10048e1e:	f004 f8db 	bl	1004cfd8 <HAL_PWR_ConfigDEEPSTOP>

  /* Enable the device DEEPSTOP configuration */
  LL_PWR_SetPowerMode(LL_PWR_MODE_DEEPSTOP);
10048e22:	2000      	movs	r0, #0
10048e24:	f7ff fda8 	bl	10048978 <LL_PWR_SetPowerMode>

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10048e28:	4b10      	ldr	r3, [pc, #64]	@ (10048e6c <PWR_EnterStopMode+0xbc>)
10048e2a:	691a      	ldr	r2, [r3, #16]
10048e2c:	4b0f      	ldr	r3, [pc, #60]	@ (10048e6c <PWR_EnterStopMode+0xbc>)
10048e2e:	2104      	movs	r1, #4
10048e30:	430a      	orrs	r2, r1
10048e32:	611a      	str	r2, [r3, #16]
  
  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_ACTIVE);
10048e34:	2002      	movs	r0, #2
10048e36:	f001 ff72 	bl	1004ad1e <SYSTEM_DEBUG_SIGNAL_SET>
#endif
  LL_PWR_EnableDEEPSTOP2();
#endif

  /* Save the CPU context & Wait for Interrupt Request to enter in DEEPSTOP */
  CPUcontextSave();
10048e3a:	f7f7 f9bb 	bl	100401b4 <CPUcontextSave>

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_ACTIVE);
10048e3e:	2002      	movs	r0, #2
10048e40:	f001 ff77 	bl	1004ad32 <SYSTEM_DEBUG_SIGNAL_RESET>

  /* USER CODE BEGIN PWR_EnterStopMode_2 */

  /* USER CODE END PWR_EnterStopMode_2 */
}
10048e44:	46c0      	nop			@ (mov r8, r8)
10048e46:	46bd      	mov	sp, r7
10048e48:	b003      	add	sp, #12
10048e4a:	bd90      	pop	{r4, r7, pc}
10048e4c:	20000e34 	.word	0x20000e34
10048e50:	2000095c 	.word	0x2000095c
10048e54:	20000be0 	.word	0x20000be0
10048e58:	20000bdc 	.word	0x20000bdc
10048e5c:	20000ad4 	.word	0x20000ad4
10048e60:	20000de4 	.word	0x20000de4
10048e64:	20000db0 	.word	0x20000db0
10048e68:	00ffffff 	.word	0x00ffffff
10048e6c:	e000ed00 	.word	0xe000ed00

10048e70 <PWR_ExitStopMode>:

void PWR_ExitStopMode( void )
{
10048e70:	b590      	push	{r4, r7, lr}
10048e72:	b083      	sub	sp, #12
10048e74:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN PWR_ExitStopMode_1 */

  /* USER CODE END PWR_ExitStopMode_1 */
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10048e76:	4b1a      	ldr	r3, [pc, #104]	@ (10048ee0 <PWR_ExitStopMode+0x70>)
10048e78:	691a      	ldr	r2, [r3, #16]
10048e7a:	4b19      	ldr	r3, [pc, #100]	@ (10048ee0 <PWR_ExitStopMode+0x70>)
10048e7c:	2104      	movs	r1, #4
10048e7e:	438a      	bics	r2, r1
10048e80:	611a      	str	r2, [r3, #16]

  /* Restore all the peripheral registers and CPU peripipheral configuration */
  restoreDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
10048e82:	4c18      	ldr	r4, [pc, #96]	@ (10048ee4 <PWR_ExitStopMode+0x74>)
10048e84:	4a18      	ldr	r2, [pc, #96]	@ (10048ee8 <PWR_ExitStopMode+0x78>)
10048e86:	4919      	ldr	r1, [pc, #100]	@ (10048eec <PWR_ExitStopMode+0x7c>)
10048e88:	4819      	ldr	r0, [pc, #100]	@ (10048ef0 <PWR_ExitStopMode+0x80>)
10048e8a:	4b1a      	ldr	r3, [pc, #104]	@ (10048ef4 <PWR_ExitStopMode+0x84>)
10048e8c:	9301      	str	r3, [sp, #4]
10048e8e:	4b1a      	ldr	r3, [pc, #104]	@ (10048ef8 <PWR_ExitStopMode+0x88>)
10048e90:	9300      	str	r3, [sp, #0]
10048e92:	0023      	movs	r3, r4
10048e94:	f002 fb00 	bl	1004b498 <restoreDeviceLowPower>

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_EXIT);
10048e98:	2001      	movs	r0, #1
10048e9a:	f001 ff40 	bl	1004ad1e <SYSTEM_DEBUG_SIGNAL_SET>

#if defined(PWR_CR2_GPIORET)
  /* Disable the GPIO retention at wake DEEPSTOP configuration */
  LL_PWR_DisableGPIORET();
10048e9e:	f7ff fd7f 	bl	100489a0 <LL_PWR_DisableGPIORET>
#endif

  /* Wait until the HSE is ready */
  while(LL_RCC_HSE_IsReady() == 0U);
10048ea2:	46c0      	nop			@ (mov r8, r8)
10048ea4:	f7ff fdcc 	bl	10048a40 <LL_RCC_HSE_IsReady>
10048ea8:	1e03      	subs	r3, r0, #0
10048eaa:	d0fb      	beq.n	10048ea4 <PWR_ExitStopMode+0x34>

  /* Restore the DIRECT_HSE configuration */
  if (clockContext.directHSEenabled == TRUE)
10048eac:	4b13      	ldr	r3, [pc, #76]	@ (10048efc <PWR_ExitStopMode+0x8c>)
10048eae:	781b      	ldrb	r3, [r3, #0]
10048eb0:	2b01      	cmp	r3, #1
10048eb2:	d103      	bne.n	10048ebc <PWR_ExitStopMode+0x4c>
  {
    LL_RCC_DIRECT_HSE_Enable();
10048eb4:	f7ff fdd8 	bl	10048a68 <LL_RCC_DIRECT_HSE_Enable>
    LL_RCC_RC64MPLL_Disable();
10048eb8:	f7ff fe68 	bl	10048b8c <LL_RCC_RC64MPLL_Disable>
  }

  if(RAM_VR.WakeupFromSleepFlag)
10048ebc:	4b10      	ldr	r3, [pc, #64]	@ (10048f00 <PWR_ExitStopMode+0x90>)
10048ebe:	689b      	ldr	r3, [r3, #8]
10048ec0:	2b00      	cmp	r3, #0
10048ec2:	d001      	beq.n	10048ec8 <PWR_ExitStopMode+0x58>
  {
    /* Handler to manage the IOs IRQ if needed */
    HAL_PWR_WKUP_IRQHandler();
10048ec4:	f004 f8dc 	bl	1004d080 <HAL_PWR_WKUP_IRQHandler>
  }
  
  /* Wait until the Low Power regulator is ready */
  while(LL_PWR_IsActiveFlag_REGLPS() == 0);
10048ec8:	46c0      	nop			@ (mov r8, r8)
10048eca:	f7ff fd8d 	bl	100489e8 <LL_PWR_IsActiveFlag_REGLPS>
10048ece:	1e03      	subs	r3, r0, #0
10048ed0:	d0fb      	beq.n	10048eca <PWR_ExitStopMode+0x5a>

  /* USER CODE BEGIN PWR_ExitStopMode_2 */

  /* USER CODE END PWR_ExitStopMode_2 */

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_EXIT);
10048ed2:	2001      	movs	r0, #1
10048ed4:	f001 ff2d 	bl	1004ad32 <SYSTEM_DEBUG_SIGNAL_RESET>
}
10048ed8:	46c0      	nop			@ (mov r8, r8)
10048eda:	46bd      	mov	sp, r7
10048edc:	b001      	add	sp, #4
10048ede:	bd90      	pop	{r4, r7, pc}
10048ee0:	e000ed00 	.word	0xe000ed00
10048ee4:	20000be0 	.word	0x20000be0
10048ee8:	20000bdc 	.word	0x20000bdc
10048eec:	20000ad4 	.word	0x20000ad4
10048ef0:	2000095c 	.word	0x2000095c
10048ef4:	20000de4 	.word	0x20000de4
10048ef8:	20000db0 	.word	0x20000db0
10048efc:	20000e34 	.word	0x20000e34
10048f00:	20000004 	.word	0x20000004

10048f04 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode( void )
{
10048f04:	b580      	push	{r7, lr}
10048f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PWR_EnterSleepMode */
  HAL_SuspendTick();
10048f08:	f003 f86a 	bl	1004bfe0 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode();
10048f0c:	f004 f856 	bl	1004cfbc <HAL_PWR_EnterSLEEPMode>
  /* USER CODE END PWR_EnterSleepMode */
}
10048f10:	46c0      	nop			@ (mov r8, r8)
10048f12:	46bd      	mov	sp, r7
10048f14:	bd80      	pop	{r7, pc}

10048f16 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode( void )
{
10048f16:	b580      	push	{r7, lr}
10048f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PWR_ExitSleepMode */
  HAL_ResumeTick();
10048f1a:	f003 f86f 	bl	1004bffc <HAL_ResumeTick>
  /* USER CODE END PWR_ExitSleepMode */
}
10048f1e:	46c0      	nop			@ (mov r8, r8)
10048f20:	46bd      	mov	sp, r7
10048f22:	bd80      	pop	{r7, pc}

10048f24 <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
10048f24:	b580      	push	{r7, lr}
10048f26:	b084      	sub	sp, #16
10048f28:	af00      	add	r7, sp, #0
10048f2a:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
10048f2c:	687b      	ldr	r3, [r7, #4]
10048f2e:	681b      	ldr	r3, [r3, #0]
10048f30:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
10048f32:	687b      	ldr	r3, [r7, #4]
10048f34:	2200      	movs	r2, #0
10048f36:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
10048f38:	687b      	ldr	r3, [r7, #4]
10048f3a:	2200      	movs	r2, #0
10048f3c:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
10048f3e:	687b      	ldr	r3, [r7, #4]
10048f40:	2200      	movs	r2, #0
10048f42:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
10048f44:	687b      	ldr	r3, [r7, #4]
10048f46:	2200      	movs	r2, #0
10048f48:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
10048f4a:	68fb      	ldr	r3, [r7, #12]
10048f4c:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
10048f4e:	68bb      	ldr	r3, [r7, #8]
10048f50:	781b      	ldrb	r3, [r3, #0]
10048f52:	2bff      	cmp	r3, #255	@ 0xff
10048f54:	d10c      	bne.n	10048f70 <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
10048f56:	687b      	ldr	r3, [r7, #4]
10048f58:	685b      	ldr	r3, [r3, #4]
10048f5a:	b29a      	uxth	r2, r3
10048f5c:	68fb      	ldr	r3, [r7, #12]
10048f5e:	b29b      	uxth	r3, r3
10048f60:	1ad3      	subs	r3, r2, r3
10048f62:	b29b      	uxth	r3, r3
10048f64:	3b04      	subs	r3, #4
10048f66:	b29a      	uxth	r2, r3
10048f68:	687b      	ldr	r3, [r7, #4]
10048f6a:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
10048f6c:	2300      	movs	r3, #0
10048f6e:	e028      	b.n	10048fc2 <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
10048f70:	68bb      	ldr	r3, [r7, #8]
10048f72:	781b      	ldrb	r3, [r3, #0]
10048f74:	2bfe      	cmp	r3, #254	@ 0xfe
10048f76:	d106      	bne.n	10048f86 <NVMDB_get_info+0x62>
    {
      info->valid_records++;
10048f78:	687b      	ldr	r3, [r7, #4]
10048f7a:	891b      	ldrh	r3, [r3, #8]
10048f7c:	3301      	adds	r3, #1
10048f7e:	b29a      	uxth	r2, r3
10048f80:	687b      	ldr	r3, [r7, #4]
10048f82:	811a      	strh	r2, [r3, #8]
10048f84:	e00c      	b.n	10048fa0 <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
10048f86:	68bb      	ldr	r3, [r7, #8]
10048f88:	781b      	ldrb	r3, [r3, #0]
10048f8a:	2b00      	cmp	r3, #0
10048f8c:	d106      	bne.n	10048f9c <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
10048f8e:	687b      	ldr	r3, [r7, #4]
10048f90:	895b      	ldrh	r3, [r3, #10]
10048f92:	3301      	adds	r3, #1
10048f94:	b29a      	uxth	r2, r3
10048f96:	687b      	ldr	r3, [r7, #4]
10048f98:	815a      	strh	r2, [r3, #10]
10048f9a:	e001      	b.n	10048fa0 <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
10048f9c:	2303      	movs	r3, #3
10048f9e:	e010      	b.n	10048fc2 <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10048fa0:	68bb      	ldr	r3, [r7, #8]
10048fa2:	885b      	ldrh	r3, [r3, #2]
10048fa4:	3303      	adds	r3, #3
10048fa6:	2203      	movs	r2, #3
10048fa8:	4313      	orrs	r3, r2
10048faa:	001a      	movs	r2, r3
10048fac:	68fb      	ldr	r3, [r7, #12]
10048fae:	18d3      	adds	r3, r2, r3
10048fb0:	3301      	adds	r3, #1
10048fb2:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
10048fb4:	68fb      	ldr	r3, [r7, #12]
10048fb6:	1d5a      	adds	r2, r3, #5
10048fb8:	687b      	ldr	r3, [r7, #4]
10048fba:	685b      	ldr	r3, [r3, #4]
10048fbc:	429a      	cmp	r2, r3
10048fbe:	d3c4      	bcc.n	10048f4a <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
10048fc0:	2300      	movs	r3, #0
    }
  }
}
10048fc2:	0018      	movs	r0, r3
10048fc4:	46bd      	mov	sp, r7
10048fc6:	b004      	add	sp, #16
10048fc8:	bd80      	pop	{r7, pc}

10048fca <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
10048fca:	b580      	push	{r7, lr}
10048fcc:	b086      	sub	sp, #24
10048fce:	af00      	add	r7, sp, #0
10048fd0:	60f8      	str	r0, [r7, #12]
10048fd2:	607a      	str	r2, [r7, #4]
10048fd4:	603b      	str	r3, [r7, #0]
10048fd6:	230b      	movs	r3, #11
10048fd8:	18fb      	adds	r3, r7, r3
10048fda:	1c0a      	adds	r2, r1, #0
10048fdc:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
10048fde:	2020      	movs	r0, #32
10048fe0:	183b      	adds	r3, r7, r0
10048fe2:	881b      	ldrh	r3, [r3, #0]
10048fe4:	2b00      	cmp	r3, #0
10048fe6:	d00a      	beq.n	10048ffe <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
10048fe8:	2110      	movs	r1, #16
10048fea:	187a      	adds	r2, r7, r1
10048fec:	183b      	adds	r3, r7, r0
10048fee:	881b      	ldrh	r3, [r3, #0]
10048ff0:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
10048ff2:	187b      	adds	r3, r7, r1
10048ff4:	22fe      	movs	r2, #254	@ 0xfe
10048ff6:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
10048ff8:	187b      	adds	r3, r7, r1
10048ffa:	617b      	str	r3, [r7, #20]
10048ffc:	e002      	b.n	10049004 <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10048ffe:	68fb      	ldr	r3, [r7, #12]
10049000:	685b      	ldr	r3, [r3, #4]
10049002:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10049004:	68fb      	ldr	r3, [r7, #12]
10049006:	685a      	ldr	r2, [r3, #4]
10049008:	68fb      	ldr	r3, [r7, #12]
1004900a:	689b      	ldr	r3, [r3, #8]
1004900c:	429a      	cmp	r2, r3
1004900e:	d203      	bcs.n	10049018 <NextRecordNoLock+0x4e>
10049010:	697b      	ldr	r3, [r7, #20]
10049012:	781b      	ldrb	r3, [r3, #0]
10049014:	2bff      	cmp	r3, #255	@ 0xff
10049016:	d101      	bne.n	1004901c <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
10049018:	2304      	movs	r3, #4
1004901a:	e04b      	b.n	100490b4 <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
1004901c:	68fb      	ldr	r3, [r7, #12]
1004901e:	7b1b      	ldrb	r3, [r3, #12]
10049020:	2b00      	cmp	r3, #0
10049022:	d003      	beq.n	1004902c <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
10049024:	68fb      	ldr	r3, [r7, #12]
10049026:	2200      	movs	r2, #0
10049028:	731a      	strb	r2, [r3, #12]
1004902a:	e019      	b.n	10049060 <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004902c:	68fb      	ldr	r3, [r7, #12]
1004902e:	685b      	ldr	r3, [r3, #4]
10049030:	697a      	ldr	r2, [r7, #20]
10049032:	8852      	ldrh	r2, [r2, #2]
10049034:	3203      	adds	r2, #3
10049036:	2103      	movs	r1, #3
10049038:	430a      	orrs	r2, r1
1004903a:	189b      	adds	r3, r3, r2
1004903c:	1c5a      	adds	r2, r3, #1
1004903e:	68fb      	ldr	r3, [r7, #12]
10049040:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
10049042:	68fb      	ldr	r3, [r7, #12]
10049044:	685b      	ldr	r3, [r3, #4]
10049046:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10049048:	68fb      	ldr	r3, [r7, #12]
1004904a:	685a      	ldr	r2, [r3, #4]
1004904c:	68fb      	ldr	r3, [r7, #12]
1004904e:	689b      	ldr	r3, [r3, #8]
10049050:	429a      	cmp	r2, r3
10049052:	d203      	bcs.n	1004905c <NextRecordNoLock+0x92>
10049054:	697b      	ldr	r3, [r7, #20]
10049056:	781b      	ldrb	r3, [r3, #0]
10049058:	2bff      	cmp	r3, #255	@ 0xff
1004905a:	d101      	bne.n	10049060 <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
1004905c:	2304      	movs	r3, #4
1004905e:	e029      	b.n	100490b4 <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
10049060:	697b      	ldr	r3, [r7, #20]
10049062:	781b      	ldrb	r3, [r3, #0]
10049064:	2b00      	cmp	r3, #0
10049066:	d023      	beq.n	100490b0 <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
10049068:	697b      	ldr	r3, [r7, #20]
1004906a:	781b      	ldrb	r3, [r3, #0]
1004906c:	2bfe      	cmp	r3, #254	@ 0xfe
1004906e:	d001      	beq.n	10049074 <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
10049070:	2303      	movs	r3, #3
10049072:	e01f      	b.n	100490b4 <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
10049074:	220b      	movs	r2, #11
10049076:	18bb      	adds	r3, r7, r2
10049078:	781b      	ldrb	r3, [r3, #0]
1004907a:	2bff      	cmp	r3, #255	@ 0xff
1004907c:	d005      	beq.n	1004908a <NextRecordNoLock+0xc0>
1004907e:	697b      	ldr	r3, [r7, #20]
10049080:	785b      	ldrb	r3, [r3, #1]
10049082:	18ba      	adds	r2, r7, r2
10049084:	7812      	ldrb	r2, [r2, #0]
10049086:	429a      	cmp	r2, r3
10049088:	d1c8      	bne.n	1004901c <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
1004908a:	68fb      	ldr	r3, [r7, #12]
1004908c:	685b      	ldr	r3, [r3, #4]
1004908e:	3304      	adds	r3, #4
10049090:	001a      	movs	r2, r3
10049092:	687b      	ldr	r3, [r7, #4]
10049094:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
10049096:	697b      	ldr	r3, [r7, #20]
10049098:	885a      	ldrh	r2, [r3, #2]
1004909a:	683b      	ldr	r3, [r7, #0]
1004909c:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
1004909e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100490a0:	2b00      	cmp	r3, #0
100490a2:	d003      	beq.n	100490ac <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
100490a4:	697b      	ldr	r3, [r7, #20]
100490a6:	785a      	ldrb	r2, [r3, #1]
100490a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100490aa:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
100490ac:	2300      	movs	r3, #0
100490ae:	e001      	b.n	100490b4 <NextRecordNoLock+0xea>
      continue;
100490b0:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
100490b2:	e7b3      	b.n	1004901c <NextRecordNoLock+0x52>
    }
  }
}
100490b4:	0018      	movs	r0, r3
100490b6:	46bd      	mov	sp, r7
100490b8:	b006      	add	sp, #24
100490ba:	bd80      	pop	{r7, pc}

100490bc <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
100490bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100490be:	b08b      	sub	sp, #44	@ 0x2c
100490c0:	af02      	add	r7, sp, #8
100490c2:	60f8      	str	r0, [r7, #12]
100490c4:	0008      	movs	r0, r1
100490c6:	0011      	movs	r1, r2
100490c8:	607b      	str	r3, [r7, #4]
100490ca:	230b      	movs	r3, #11
100490cc:	18fb      	adds	r3, r7, r3
100490ce:	1c02      	adds	r2, r0, #0
100490d0:	701a      	strb	r2, [r3, #0]
100490d2:	2208      	movs	r2, #8
100490d4:	0010      	movs	r0, r2
100490d6:	18bb      	adds	r3, r7, r2
100490d8:	1c0a      	adds	r2, r1, #0
100490da:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
100490dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100490de:	2200      	movs	r2, #0
100490e0:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
100490e2:	261f      	movs	r6, #31
100490e4:	19bc      	adds	r4, r7, r6
100490e6:	2216      	movs	r2, #22
100490e8:	18bd      	adds	r5, r7, r2
100490ea:	2218      	movs	r2, #24
100490ec:	18ba      	adds	r2, r7, r2
100490ee:	230b      	movs	r3, #11
100490f0:	18fb      	adds	r3, r7, r3
100490f2:	7819      	ldrb	r1, [r3, #0]
100490f4:	68fb      	ldr	r3, [r7, #12]
100490f6:	469c      	mov	ip, r3
100490f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100490fa:	9301      	str	r3, [sp, #4]
100490fc:	2338      	movs	r3, #56	@ 0x38
100490fe:	181b      	adds	r3, r3, r0
10049100:	19db      	adds	r3, r3, r7
10049102:	881b      	ldrh	r3, [r3, #0]
10049104:	9300      	str	r3, [sp, #0]
10049106:	002b      	movs	r3, r5
10049108:	4660      	mov	r0, ip
1004910a:	f7ff ff5e 	bl	10048fca <NextRecordNoLock>
1004910e:	0003      	movs	r3, r0
10049110:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
10049112:	19bb      	adds	r3, r7, r6
10049114:	781b      	ldrb	r3, [r3, #0]
10049116:	2b00      	cmp	r3, #0
10049118:	d002      	beq.n	10049120 <ReadNextRecordNoLock+0x64>
  {
    return status;
1004911a:	19bb      	adds	r3, r7, r6
1004911c:	781b      	ldrb	r3, [r3, #0]
1004911e:	e027      	b.n	10049170 <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
10049120:	2316      	movs	r3, #22
10049122:	18fb      	adds	r3, r7, r3
10049124:	881b      	ldrh	r3, [r3, #0]
10049126:	2208      	movs	r2, #8
10049128:	18ba      	adds	r2, r7, r2
1004912a:	8812      	ldrh	r2, [r2, #0]
1004912c:	429a      	cmp	r2, r3
1004912e:	d301      	bcc.n	10049134 <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
10049130:	2306      	movs	r3, #6
10049132:	e01d      	b.n	10049170 <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
10049134:	69ba      	ldr	r2, [r7, #24]
10049136:	2408      	movs	r4, #8
10049138:	193b      	adds	r3, r7, r4
1004913a:	881b      	ldrh	r3, [r3, #0]
1004913c:	18d1      	adds	r1, r2, r3
1004913e:	2330      	movs	r3, #48	@ 0x30
10049140:	2208      	movs	r2, #8
10049142:	189b      	adds	r3, r3, r2
10049144:	19db      	adds	r3, r3, r7
10049146:	881a      	ldrh	r2, [r3, #0]
10049148:	2316      	movs	r3, #22
1004914a:	18fb      	adds	r3, r7, r3
1004914c:	881b      	ldrh	r3, [r3, #0]
1004914e:	0018      	movs	r0, r3
10049150:	193b      	adds	r3, r7, r4
10049152:	881b      	ldrh	r3, [r3, #0]
10049154:	1ac3      	subs	r3, r0, r3
10049156:	429a      	cmp	r2, r3
10049158:	dd00      	ble.n	1004915c <ReadNextRecordNoLock+0xa0>
1004915a:	001a      	movs	r2, r3
1004915c:	687b      	ldr	r3, [r7, #4]
1004915e:	0018      	movs	r0, r3
10049160:	f01e fc57 	bl	10067a12 <memcpy>
  *size_p = data_len;
10049164:	2316      	movs	r3, #22
10049166:	18fb      	adds	r3, r7, r3
10049168:	881a      	ldrh	r2, [r3, #0]
1004916a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004916c:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004916e:	2300      	movs	r3, #0
}
10049170:	0018      	movs	r0, r3
10049172:	46bd      	mov	sp, r7
10049174:	b009      	add	sp, #36	@ 0x24
10049176:	bdf0      	pop	{r4, r5, r6, r7, pc}

10049178 <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
10049178:	b590      	push	{r4, r7, lr}
1004917a:	b089      	sub	sp, #36	@ 0x24
1004917c:	af00      	add	r7, sp, #0
1004917e:	60f8      	str	r0, [r7, #12]
10049180:	607a      	str	r2, [r7, #4]
10049182:	200a      	movs	r0, #10
10049184:	183b      	adds	r3, r7, r0
10049186:	1c0a      	adds	r2, r1, #0
10049188:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
1004918a:	687b      	ldr	r3, [r7, #4]
1004918c:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
1004918e:	0001      	movs	r1, r0
10049190:	187b      	adds	r3, r7, r1
10049192:	881b      	ldrh	r3, [r3, #0]
10049194:	089b      	lsrs	r3, r3, #2
10049196:	b29a      	uxth	r2, r3
10049198:	2016      	movs	r0, #22
1004919a:	183b      	adds	r3, r7, r0
1004919c:	0092      	lsls	r2, r2, #2
1004919e:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
100491a0:	187b      	adds	r3, r7, r1
100491a2:	881b      	ldrh	r3, [r3, #0]
100491a4:	b2d9      	uxtb	r1, r3
100491a6:	183b      	adds	r3, r7, r0
100491a8:	881b      	ldrh	r3, [r3, #0]
100491aa:	b2da      	uxtb	r2, r3
100491ac:	2315      	movs	r3, #21
100491ae:	18fb      	adds	r3, r7, r3
100491b0:	1a8a      	subs	r2, r1, r2
100491b2:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
100491b4:	2300      	movs	r3, #0
100491b6:	61fb      	str	r3, [r7, #28]
100491b8:	e013      	b.n	100491e2 <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
100491ba:	69fb      	ldr	r3, [r7, #28]
100491bc:	69ba      	ldr	r2, [r7, #24]
100491be:	18d1      	adds	r1, r2, r3
100491c0:	2310      	movs	r3, #16
100491c2:	18fb      	adds	r3, r7, r3
100491c4:	2204      	movs	r2, #4
100491c6:	0018      	movs	r0, r3
100491c8:	f01e fc23 	bl	10067a12 <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
100491cc:	69fa      	ldr	r2, [r7, #28]
100491ce:	68fb      	ldr	r3, [r7, #12]
100491d0:	18d3      	adds	r3, r2, r3
100491d2:	693a      	ldr	r2, [r7, #16]
100491d4:	0019      	movs	r1, r3
100491d6:	2000      	movs	r0, #0
100491d8:	f003 f882 	bl	1004c2e0 <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
100491dc:	69fb      	ldr	r3, [r7, #28]
100491de:	3304      	adds	r3, #4
100491e0:	61fb      	str	r3, [r7, #28]
100491e2:	2416      	movs	r4, #22
100491e4:	193b      	adds	r3, r7, r4
100491e6:	881b      	ldrh	r3, [r3, #0]
100491e8:	69fa      	ldr	r2, [r7, #28]
100491ea:	429a      	cmp	r2, r3
100491ec:	dbe5      	blt.n	100491ba <write_data+0x42>
  }
  word = 0xFFFFFFFF;
100491ee:	2301      	movs	r3, #1
100491f0:	425b      	negs	r3, r3
100491f2:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
100491f4:	193b      	adds	r3, r7, r4
100491f6:	881b      	ldrh	r3, [r3, #0]
100491f8:	69ba      	ldr	r2, [r7, #24]
100491fa:	18d1      	adds	r1, r2, r3
100491fc:	2315      	movs	r3, #21
100491fe:	18fb      	adds	r3, r7, r3
10049200:	781a      	ldrb	r2, [r3, #0]
10049202:	2310      	movs	r3, #16
10049204:	18fb      	adds	r3, r7, r3
10049206:	0018      	movs	r0, r3
10049208:	f01e fc03 	bl	10067a12 <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
1004920c:	193b      	adds	r3, r7, r4
1004920e:	881a      	ldrh	r2, [r3, #0]
10049210:	68fb      	ldr	r3, [r7, #12]
10049212:	18d3      	adds	r3, r2, r3
10049214:	693a      	ldr	r2, [r7, #16]
10049216:	0019      	movs	r1, r3
10049218:	2000      	movs	r0, #0
1004921a:	f003 f861 	bl	1004c2e0 <HAL_FLASH_Program>
}
1004921e:	46c0      	nop			@ (mov r8, r8)
10049220:	46bd      	mov	sp, r7
10049222:	b009      	add	sp, #36	@ 0x24
10049224:	bd90      	pop	{r4, r7, pc}

10049226 <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
10049226:	b5f0      	push	{r4, r5, r6, r7, lr}
10049228:	b087      	sub	sp, #28
1004922a:	af00      	add	r7, sp, #0
1004922c:	60f8      	str	r0, [r7, #12]
1004922e:	0008      	movs	r0, r1
10049230:	0011      	movs	r1, r2
10049232:	607b      	str	r3, [r7, #4]
10049234:	250b      	movs	r5, #11
10049236:	197b      	adds	r3, r7, r5
10049238:	1c02      	adds	r2, r0, #0
1004923a:	701a      	strb	r2, [r3, #0]
1004923c:	2408      	movs	r4, #8
1004923e:	193b      	adds	r3, r7, r4
10049240:	1c0a      	adds	r2, r1, #0
10049242:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
10049244:	2310      	movs	r3, #16
10049246:	18fb      	adds	r3, r7, r3
10049248:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
1004924a:	193b      	adds	r3, r7, r4
1004924c:	881b      	ldrh	r3, [r3, #0]
1004924e:	3b01      	subs	r3, #1
10049250:	b29b      	uxth	r3, r3
10049252:	b21b      	sxth	r3, r3
10049254:	2203      	movs	r2, #3
10049256:	4313      	orrs	r3, r2
10049258:	b21b      	sxth	r3, r3
1004925a:	b29a      	uxth	r2, r3
1004925c:	193b      	adds	r3, r7, r4
1004925e:	3201      	adds	r2, #1
10049260:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
10049262:	697b      	ldr	r3, [r7, #20]
10049264:	22fe      	movs	r2, #254	@ 0xfe
10049266:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
10049268:	697b      	ldr	r3, [r7, #20]
1004926a:	197a      	adds	r2, r7, r5
1004926c:	7812      	ldrb	r2, [r2, #0]
1004926e:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
10049270:	193a      	adds	r2, r7, r4
10049272:	2520      	movs	r5, #32
10049274:	2608      	movs	r6, #8
10049276:	19ab      	adds	r3, r5, r6
10049278:	2108      	movs	r1, #8
1004927a:	468c      	mov	ip, r1
1004927c:	44bc      	add	ip, r7
1004927e:	4463      	add	r3, ip
10049280:	8812      	ldrh	r2, [r2, #0]
10049282:	881b      	ldrh	r3, [r3, #0]
10049284:	18d3      	adds	r3, r2, r3
10049286:	b29a      	uxth	r2, r3
10049288:	697b      	ldr	r3, [r7, #20]
1004928a:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
1004928c:	693a      	ldr	r2, [r7, #16]
1004928e:	68fb      	ldr	r3, [r7, #12]
10049290:	0019      	movs	r1, r3
10049292:	2000      	movs	r0, #0
10049294:	f003 f824 	bl	1004c2e0 <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
10049298:	68fb      	ldr	r3, [r7, #12]
1004929a:	1d18      	adds	r0, r3, #4
1004929c:	687a      	ldr	r2, [r7, #4]
1004929e:	193b      	adds	r3, r7, r4
100492a0:	881b      	ldrh	r3, [r3, #0]
100492a2:	0019      	movs	r1, r3
100492a4:	f7ff ff68 	bl	10049178 <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
100492a8:	193b      	adds	r3, r7, r4
100492aa:	881a      	ldrh	r2, [r3, #0]
100492ac:	68fb      	ldr	r3, [r7, #12]
100492ae:	18d3      	adds	r3, r2, r3
100492b0:	1d18      	adds	r0, r3, #4
100492b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100492b4:	19ab      	adds	r3, r5, r6
100492b6:	2108      	movs	r1, #8
100492b8:	468c      	mov	ip, r1
100492ba:	44bc      	add	ip, r7
100492bc:	4463      	add	r3, ip
100492be:	881b      	ldrh	r3, [r3, #0]
100492c0:	0019      	movs	r1, r3
100492c2:	f7ff ff59 	bl	10049178 <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
100492c6:	2300      	movs	r3, #0
}
100492c8:	0018      	movs	r0, r3
100492ca:	46bd      	mov	sp, r7
100492cc:	b007      	add	sp, #28
100492ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

100492d0 <NVMDB_CompareCurrentRecord>:

int NVMDB_CompareCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, const uint8_t *data_p, NVMDB_RecordSizeType size)
{
100492d0:	b580      	push	{r7, lr}
100492d2:	b086      	sub	sp, #24
100492d4:	af00      	add	r7, sp, #0
100492d6:	60f8      	str	r0, [r7, #12]
100492d8:	0008      	movs	r0, r1
100492da:	607a      	str	r2, [r7, #4]
100492dc:	0019      	movs	r1, r3
100492de:	230a      	movs	r3, #10
100492e0:	18fb      	adds	r3, r7, r3
100492e2:	1c02      	adds	r2, r0, #0
100492e4:	801a      	strh	r2, [r3, #0]
100492e6:	2308      	movs	r3, #8
100492e8:	18fb      	adds	r3, r7, r3
100492ea:	1c0a      	adds	r2, r1, #0
100492ec:	801a      	strh	r2, [r3, #0]
    }
  }

#endif

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
100492ee:	68fb      	ldr	r3, [r7, #12]
100492f0:	685b      	ldr	r3, [r3, #4]
100492f2:	617b      	str	r3, [r7, #20]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
100492f4:	68fb      	ldr	r3, [r7, #12]
100492f6:	685a      	ldr	r2, [r3, #4]
100492f8:	68fb      	ldr	r3, [r7, #12]
100492fa:	689b      	ldr	r3, [r3, #8]
100492fc:	429a      	cmp	r2, r3
100492fe:	d203      	bcs.n	10049308 <NVMDB_CompareCurrentRecord+0x38>
10049300:	697b      	ldr	r3, [r7, #20]
10049302:	781b      	ldrb	r3, [r3, #0]
10049304:	2bff      	cmp	r3, #255	@ 0xff
10049306:	d101      	bne.n	1004930c <NVMDB_CompareCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_END_OF_DB;
10049308:	2304      	movs	r3, #4
1004930a:	e02a      	b.n	10049362 <NVMDB_CompareCurrentRecord+0x92>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004930c:	68fb      	ldr	r3, [r7, #12]
1004930e:	7b1b      	ldrb	r3, [r3, #12]
10049310:	2b00      	cmp	r3, #0
10049312:	d103      	bne.n	1004931c <NVMDB_CompareCurrentRecord+0x4c>
10049314:	697b      	ldr	r3, [r7, #20]
10049316:	781b      	ldrb	r3, [r3, #0]
10049318:	2bfe      	cmp	r3, #254	@ 0xfe
1004931a:	d001      	beq.n	10049320 <NVMDB_CompareCurrentRecord+0x50>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004931c:	2305      	movs	r3, #5
1004931e:	e020      	b.n	10049362 <NVMDB_CompareCurrentRecord+0x92>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
10049320:	697b      	ldr	r3, [r7, #20]
10049322:	885b      	ldrh	r3, [r3, #2]
10049324:	220a      	movs	r2, #10
10049326:	18ba      	adds	r2, r7, r2
10049328:	8812      	ldrh	r2, [r2, #0]
1004932a:	429a      	cmp	r2, r3
1004932c:	d301      	bcc.n	10049332 <NVMDB_CompareCurrentRecord+0x62>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004932e:	2306      	movs	r3, #6
10049330:	e017      	b.n	10049362 <NVMDB_CompareCurrentRecord+0x92>
  }

  handle_p->first_read = FALSE;
10049332:	68fb      	ldr	r3, [r7, #12]
10049334:	2200      	movs	r2, #0
10049336:	731a      	strb	r2, [r3, #12]

  if(memcmp(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, size) == 0)
10049338:	230a      	movs	r3, #10
1004933a:	18fb      	adds	r3, r7, r3
1004933c:	881a      	ldrh	r2, [r3, #0]
1004933e:	68fb      	ldr	r3, [r7, #12]
10049340:	685b      	ldr	r3, [r3, #4]
10049342:	18d3      	adds	r3, r2, r3
10049344:	3304      	adds	r3, #4
10049346:	0019      	movs	r1, r3
10049348:	2308      	movs	r3, #8
1004934a:	18fb      	adds	r3, r7, r3
1004934c:	881a      	ldrh	r2, [r3, #0]
1004934e:	687b      	ldr	r3, [r7, #4]
10049350:	0018      	movs	r0, r3
10049352:	f01e fad9 	bl	10067908 <memcmp>
10049356:	1e03      	subs	r3, r0, #0
10049358:	d101      	bne.n	1004935e <NVMDB_CompareCurrentRecord+0x8e>
  {
    return NVMDB_STATUS_OK;
1004935a:	2300      	movs	r3, #0
1004935c:	e001      	b.n	10049362 <NVMDB_CompareCurrentRecord+0x92>
  }
  else
  {
    return -1;
1004935e:	2301      	movs	r3, #1
10049360:	425b      	negs	r3, r3
  }
}
10049362:	0018      	movs	r0, r3
10049364:	46bd      	mov	sp, r7
10049366:	b006      	add	sp, #24
10049368:	bd80      	pop	{r7, pc}

1004936a <ReadCurrentRecordNoLock>:

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
1004936a:	b590      	push	{r4, r7, lr}
1004936c:	b087      	sub	sp, #28
1004936e:	af00      	add	r7, sp, #0
10049370:	60f8      	str	r0, [r7, #12]
10049372:	0008      	movs	r0, r1
10049374:	607a      	str	r2, [r7, #4]
10049376:	0019      	movs	r1, r3
10049378:	230a      	movs	r3, #10
1004937a:	18fb      	adds	r3, r7, r3
1004937c:	1c02      	adds	r2, r0, #0
1004937e:	801a      	strh	r2, [r3, #0]
10049380:	2308      	movs	r3, #8
10049382:	0018      	movs	r0, r3
10049384:	18fb      	adds	r3, r7, r3
10049386:	1c0a      	adds	r2, r1, #0
10049388:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
1004938a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004938c:	2200      	movs	r2, #0
1004938e:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
10049390:	2224      	movs	r2, #36	@ 0x24
10049392:	1813      	adds	r3, r2, r0
10049394:	19db      	adds	r3, r3, r7
10049396:	881b      	ldrh	r3, [r3, #0]
10049398:	2b00      	cmp	r3, #0
1004939a:	d00b      	beq.n	100493b4 <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
1004939c:	2110      	movs	r1, #16
1004939e:	187b      	adds	r3, r7, r1
100493a0:	1812      	adds	r2, r2, r0
100493a2:	19d2      	adds	r2, r2, r7
100493a4:	8812      	ldrh	r2, [r2, #0]
100493a6:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
100493a8:	187b      	adds	r3, r7, r1
100493aa:	22fe      	movs	r2, #254	@ 0xfe
100493ac:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
100493ae:	187b      	adds	r3, r7, r1
100493b0:	617b      	str	r3, [r7, #20]
100493b2:	e002      	b.n	100493ba <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
100493b4:	68fb      	ldr	r3, [r7, #12]
100493b6:	685b      	ldr	r3, [r3, #4]
100493b8:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
100493ba:	68fb      	ldr	r3, [r7, #12]
100493bc:	685a      	ldr	r2, [r3, #4]
100493be:	68fb      	ldr	r3, [r7, #12]
100493c0:	689b      	ldr	r3, [r3, #8]
100493c2:	429a      	cmp	r2, r3
100493c4:	d203      	bcs.n	100493ce <ReadCurrentRecordNoLock+0x64>
100493c6:	697b      	ldr	r3, [r7, #20]
100493c8:	781b      	ldrb	r3, [r3, #0]
100493ca:	2bff      	cmp	r3, #255	@ 0xff
100493cc:	d101      	bne.n	100493d2 <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
100493ce:	2304      	movs	r3, #4
100493d0:	e033      	b.n	1004943a <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
100493d2:	68fb      	ldr	r3, [r7, #12]
100493d4:	7b1b      	ldrb	r3, [r3, #12]
100493d6:	2b00      	cmp	r3, #0
100493d8:	d103      	bne.n	100493e2 <ReadCurrentRecordNoLock+0x78>
100493da:	697b      	ldr	r3, [r7, #20]
100493dc:	781b      	ldrb	r3, [r3, #0]
100493de:	2bfe      	cmp	r3, #254	@ 0xfe
100493e0:	d001      	beq.n	100493e6 <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
100493e2:	2305      	movs	r3, #5
100493e4:	e029      	b.n	1004943a <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
100493e6:	697b      	ldr	r3, [r7, #20]
100493e8:	885b      	ldrh	r3, [r3, #2]
100493ea:	220a      	movs	r2, #10
100493ec:	18ba      	adds	r2, r7, r2
100493ee:	8812      	ldrh	r2, [r2, #0]
100493f0:	429a      	cmp	r2, r3
100493f2:	d301      	bcc.n	100493f8 <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
100493f4:	2306      	movs	r3, #6
100493f6:	e020      	b.n	1004943a <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
100493f8:	68fb      	ldr	r3, [r7, #12]
100493fa:	2200      	movs	r2, #0
100493fc:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
100493fe:	240a      	movs	r4, #10
10049400:	193b      	adds	r3, r7, r4
10049402:	881a      	ldrh	r2, [r3, #0]
10049404:	68fb      	ldr	r3, [r7, #12]
10049406:	685b      	ldr	r3, [r3, #4]
10049408:	18d3      	adds	r3, r2, r3
1004940a:	3304      	adds	r3, #4
1004940c:	0018      	movs	r0, r3
1004940e:	2308      	movs	r3, #8
10049410:	18fb      	adds	r3, r7, r3
10049412:	881a      	ldrh	r2, [r3, #0]
10049414:	697b      	ldr	r3, [r7, #20]
10049416:	885b      	ldrh	r3, [r3, #2]
10049418:	0019      	movs	r1, r3
1004941a:	193b      	adds	r3, r7, r4
1004941c:	881b      	ldrh	r3, [r3, #0]
1004941e:	1acb      	subs	r3, r1, r3
10049420:	429a      	cmp	r2, r3
10049422:	dd00      	ble.n	10049426 <ReadCurrentRecordNoLock+0xbc>
10049424:	001a      	movs	r2, r3
10049426:	687b      	ldr	r3, [r7, #4]
10049428:	0001      	movs	r1, r0
1004942a:	0018      	movs	r0, r3
1004942c:	f01e faf1 	bl	10067a12 <memcpy>
  *size_p = record_p->header.length;
10049430:	697b      	ldr	r3, [r7, #20]
10049432:	885a      	ldrh	r2, [r3, #2]
10049434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10049436:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10049438:	2300      	movs	r3, #0
}
1004943a:	0018      	movs	r0, r3
1004943c:	46bd      	mov	sp, r7
1004943e:	b007      	add	sp, #28
10049440:	bd90      	pop	{r4, r7, pc}
	...

10049444 <InvalidateRecord>:

static NVMDB_status_t InvalidateRecord(uint32_t address)
{
10049444:	b580      	push	{r7, lr}
10049446:	b084      	sub	sp, #16
10049448:	af00      	add	r7, sp, #0
1004944a:	6078      	str	r0, [r7, #4]
  uint32_t word = 0xFFFFFF00;
1004944c:	4b06      	ldr	r3, [pc, #24]	@ (10049468 <InvalidateRecord+0x24>)
1004944e:	60fb      	str	r3, [r7, #12]
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif
  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_WRITE(address, word);
10049450:	68fa      	ldr	r2, [r7, #12]
10049452:	687b      	ldr	r3, [r7, #4]
10049454:	0019      	movs	r1, r3
10049456:	2000      	movs	r0, #0
10049458:	f002 ff42 	bl	1004c2e0 <HAL_FLASH_Program>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004945c:	2300      	movs	r3, #0
}
1004945e:	0018      	movs	r0, r3
10049460:	46bd      	mov	sp, r7
10049462:	b004      	add	sp, #16
10049464:	bd80      	pop	{r7, pc}
10049466:	46c0      	nop			@ (mov r8, r8)
10049468:	ffffff00 	.word	0xffffff00

1004946c <NVMDB_DeleteRecordNoCache>:

static NVMDB_status_t NVMDB_DeleteRecordNoCache(const NVMDB_HandleType *handle_p)
{
1004946c:	b5b0      	push	{r4, r5, r7, lr}
1004946e:	b084      	sub	sp, #16
10049470:	af00      	add	r7, sp, #0
10049472:	6078      	str	r0, [r7, #4]
  NVMDB_RecordType *record_p;
  NVMDB_status_t status;

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
10049474:	687b      	ldr	r3, [r7, #4]
10049476:	685b      	ldr	r3, [r3, #4]
10049478:	60fb      	str	r3, [r7, #12]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004947a:	687b      	ldr	r3, [r7, #4]
1004947c:	685a      	ldr	r2, [r3, #4]
1004947e:	687b      	ldr	r3, [r7, #4]
10049480:	689b      	ldr	r3, [r3, #8]
10049482:	429a      	cmp	r2, r3
10049484:	d203      	bcs.n	1004948e <NVMDB_DeleteRecordNoCache+0x22>
10049486:	68fb      	ldr	r3, [r7, #12]
10049488:	781b      	ldrb	r3, [r3, #0]
1004948a:	2bff      	cmp	r3, #255	@ 0xff
1004948c:	d101      	bne.n	10049492 <NVMDB_DeleteRecordNoCache+0x26>
  {
    return NVMDB_STATUS_END_OF_DB;
1004948e:	2304      	movs	r3, #4
10049490:	e041      	b.n	10049516 <NVMDB_DeleteRecordNoCache+0xaa>
  }
  if(record_p->header.valid_flag == VALID_RECORD)
10049492:	68fb      	ldr	r3, [r7, #12]
10049494:	781b      	ldrb	r3, [r3, #0]
10049496:	2bfe      	cmp	r3, #254	@ 0xfe
10049498:	d13c      	bne.n	10049514 <NVMDB_DeleteRecordNoCache+0xa8>
  {

    status = InvalidateRecord((uint32_t)record_p);
1004949a:	68fb      	ldr	r3, [r7, #12]
1004949c:	250b      	movs	r5, #11
1004949e:	197c      	adds	r4, r7, r5
100494a0:	0018      	movs	r0, r3
100494a2:	f7ff ffcf 	bl	10049444 <InvalidateRecord>
100494a6:	0003      	movs	r3, r0
100494a8:	7023      	strb	r3, [r4, #0]
    if(status)
100494aa:	197b      	adds	r3, r7, r5
100494ac:	781b      	ldrb	r3, [r3, #0]
100494ae:	2b00      	cmp	r3, #0
100494b0:	d002      	beq.n	100494b8 <NVMDB_DeleteRecordNoCache+0x4c>
    {
      return status;
100494b2:	197b      	adds	r3, r7, r5
100494b4:	781b      	ldrb	r3, [r3, #0]
100494b6:	e02e      	b.n	10049516 <NVMDB_DeleteRecordNoCache+0xaa>
    }

    DBInfo[handle_p->id].valid_records--;
100494b8:	687b      	ldr	r3, [r7, #4]
100494ba:	781b      	ldrb	r3, [r3, #0]
100494bc:	001a      	movs	r2, r3
100494be:	4918      	ldr	r1, [pc, #96]	@ (10049520 <NVMDB_DeleteRecordNoCache+0xb4>)
100494c0:	0013      	movs	r3, r2
100494c2:	009b      	lsls	r3, r3, #2
100494c4:	189b      	adds	r3, r3, r2
100494c6:	009b      	lsls	r3, r3, #2
100494c8:	18cb      	adds	r3, r1, r3
100494ca:	3308      	adds	r3, #8
100494cc:	881b      	ldrh	r3, [r3, #0]
100494ce:	3b01      	subs	r3, #1
100494d0:	b298      	uxth	r0, r3
100494d2:	4913      	ldr	r1, [pc, #76]	@ (10049520 <NVMDB_DeleteRecordNoCache+0xb4>)
100494d4:	0013      	movs	r3, r2
100494d6:	009b      	lsls	r3, r3, #2
100494d8:	189b      	adds	r3, r3, r2
100494da:	009b      	lsls	r3, r3, #2
100494dc:	18cb      	adds	r3, r1, r3
100494de:	3308      	adds	r3, #8
100494e0:	1c02      	adds	r2, r0, #0
100494e2:	801a      	strh	r2, [r3, #0]
    DBInfo[handle_p->id].invalid_records++;
100494e4:	687b      	ldr	r3, [r7, #4]
100494e6:	781b      	ldrb	r3, [r3, #0]
100494e8:	001a      	movs	r2, r3
100494ea:	490d      	ldr	r1, [pc, #52]	@ (10049520 <NVMDB_DeleteRecordNoCache+0xb4>)
100494ec:	0013      	movs	r3, r2
100494ee:	009b      	lsls	r3, r3, #2
100494f0:	189b      	adds	r3, r3, r2
100494f2:	009b      	lsls	r3, r3, #2
100494f4:	18cb      	adds	r3, r1, r3
100494f6:	330a      	adds	r3, #10
100494f8:	881b      	ldrh	r3, [r3, #0]
100494fa:	3301      	adds	r3, #1
100494fc:	b298      	uxth	r0, r3
100494fe:	4908      	ldr	r1, [pc, #32]	@ (10049520 <NVMDB_DeleteRecordNoCache+0xb4>)
10049500:	0013      	movs	r3, r2
10049502:	009b      	lsls	r3, r3, #2
10049504:	189b      	adds	r3, r3, r2
10049506:	009b      	lsls	r3, r3, #2
10049508:	18cb      	adds	r3, r1, r3
1004950a:	330a      	adds	r3, #10
1004950c:	1c02      	adds	r2, r0, #0
1004950e:	801a      	strh	r2, [r3, #0]

    return NVMDB_STATUS_OK;
10049510:	2300      	movs	r3, #0
10049512:	e000      	b.n	10049516 <NVMDB_DeleteRecordNoCache+0xaa>
  }
  else
  {
    return NVMDB_STATUS_INVALID_RECORD;
10049514:	2305      	movs	r3, #5
  }
}
10049516:	0018      	movs	r0, r3
10049518:	46bd      	mov	sp, r7
1004951a:	b004      	add	sp, #16
1004951c:	bdb0      	pop	{r4, r5, r7, pc}
1004951e:	46c0      	nop			@ (mov r8, r8)
10049520:	20000e38 	.word	0x20000e38

10049524 <ErasePage>:

static void ErasePage(uint32_t address, uint8_t num_pages)
{
10049524:	b580      	push	{r7, lr}
10049526:	b088      	sub	sp, #32
10049528:	af00      	add	r7, sp, #0
1004952a:	6078      	str	r0, [r7, #4]
1004952c:	000a      	movs	r2, r1
1004952e:	1cfb      	adds	r3, r7, #3
10049530:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10049532:	687b      	ldr	r3, [r7, #4]
10049534:	4a0d      	ldr	r2, [pc, #52]	@ (1004956c <ErasePage+0x48>)
10049536:	4694      	mov	ip, r2
10049538:	4463      	add	r3, ip
1004953a:	0adb      	lsrs	r3, r3, #11
1004953c:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
1004953e:	2110      	movs	r1, #16
10049540:	187b      	adds	r3, r7, r1
10049542:	2200      	movs	r2, #0
10049544:	601a      	str	r2, [r3, #0]
10049546:	69fa      	ldr	r2, [r7, #28]
10049548:	187b      	adds	r3, r7, r1
1004954a:	605a      	str	r2, [r3, #4]
1004954c:	1cfb      	adds	r3, r7, #3
1004954e:	781a      	ldrb	r2, [r3, #0]
10049550:	187b      	adds	r3, r7, r1
10049552:	609a      	str	r2, [r3, #8]
10049554:	230c      	movs	r3, #12
10049556:	18fa      	adds	r2, r7, r3
10049558:	187b      	adds	r3, r7, r1
1004955a:	0011      	movs	r1, r2
1004955c:	0018      	movs	r0, r3
1004955e:	f002 ff99 	bl	1004c494 <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
10049562:	46c0      	nop			@ (mov r8, r8)
10049564:	46bd      	mov	sp, r7
10049566:	b008      	add	sp, #32
10049568:	bd80      	pop	{r7, pc}
1004956a:	46c0      	nop			@ (mov r8, r8)
1004956c:	effc0000 	.word	0xeffc0000

10049570 <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
10049570:	b580      	push	{r7, lr}
10049572:	b086      	sub	sp, #24
10049574:	af00      	add	r7, sp, #0
10049576:	60f8      	str	r0, [r7, #12]
10049578:	60b9      	str	r1, [r7, #8]
1004957a:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
1004957c:	687b      	ldr	r3, [r7, #4]
1004957e:	055b      	lsls	r3, r3, #21
10049580:	0d5b      	lsrs	r3, r3, #21
10049582:	d107      	bne.n	10049594 <WriteBufferToFlash+0x24>
10049584:	68fb      	ldr	r3, [r7, #12]
10049586:	687a      	ldr	r2, [r7, #4]
10049588:	68b9      	ldr	r1, [r7, #8]
1004958a:	0018      	movs	r0, r3
1004958c:	f01e f9bc 	bl	10067908 <memcmp>
10049590:	1e03      	subs	r3, r0, #0
10049592:	d026      	beq.n	100495e2 <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
10049594:	687b      	ldr	r3, [r7, #4]
10049596:	3b01      	subs	r3, #1
10049598:	4a14      	ldr	r2, [pc, #80]	@ (100495ec <WriteBufferToFlash+0x7c>)
1004959a:	4313      	orrs	r3, r2
1004959c:	3301      	adds	r3, #1
1004959e:	0adb      	lsrs	r3, r3, #11
100495a0:	b2da      	uxtb	r2, r3
100495a2:	68fb      	ldr	r3, [r7, #12]
100495a4:	0011      	movs	r1, r2
100495a6:	0018      	movs	r0, r3
100495a8:	f7ff ffbc 	bl	10049524 <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
100495ac:	2300      	movs	r3, #0
100495ae:	617b      	str	r3, [r7, #20]
100495b0:	e012      	b.n	100495d8 <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
100495b2:	697a      	ldr	r2, [r7, #20]
100495b4:	68fb      	ldr	r3, [r7, #12]
100495b6:	18d1      	adds	r1, r2, r3
100495b8:	697b      	ldr	r3, [r7, #20]
100495ba:	2b00      	cmp	r3, #0
100495bc:	da00      	bge.n	100495c0 <WriteBufferToFlash+0x50>
100495be:	3303      	adds	r3, #3
100495c0:	109b      	asrs	r3, r3, #2
100495c2:	009b      	lsls	r3, r3, #2
100495c4:	68ba      	ldr	r2, [r7, #8]
100495c6:	18d3      	adds	r3, r2, r3
100495c8:	681b      	ldr	r3, [r3, #0]
100495ca:	001a      	movs	r2, r3
100495cc:	2000      	movs	r0, #0
100495ce:	f002 fe87 	bl	1004c2e0 <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
100495d2:	697b      	ldr	r3, [r7, #20]
100495d4:	3304      	adds	r3, #4
100495d6:	617b      	str	r3, [r7, #20]
100495d8:	697b      	ldr	r3, [r7, #20]
100495da:	687a      	ldr	r2, [r7, #4]
100495dc:	429a      	cmp	r2, r3
100495de:	d8e8      	bhi.n	100495b2 <WriteBufferToFlash+0x42>
100495e0:	e000      	b.n	100495e4 <WriteBufferToFlash+0x74>
    return;
100495e2:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
100495e4:	46bd      	mov	sp, r7
100495e6:	b006      	add	sp, #24
100495e8:	bd80      	pop	{r7, pc}
100495ea:	46c0      	nop			@ (mov r8, r8)
100495ec:	000007ff 	.word	0x000007ff

100495f0 <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
100495f0:	b580      	push	{r7, lr}
100495f2:	b082      	sub	sp, #8
100495f4:	af00      	add	r7, sp, #0
100495f6:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
100495f8:	687b      	ldr	r3, [r7, #4]
100495fa:	2201      	movs	r2, #1
100495fc:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
100495fe:	687b      	ldr	r3, [r7, #4]
10049600:	2200      	movs	r2, #0
10049602:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
10049604:	687b      	ldr	r3, [r7, #4]
10049606:	2200      	movs	r2, #0
10049608:	809a      	strh	r2, [r3, #4]
}
1004960a:	46c0      	nop			@ (mov r8, r8)
1004960c:	46bd      	mov	sp, r7
1004960e:	b002      	add	sp, #8
10049610:	bd80      	pop	{r7, pc}

10049612 <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
10049612:	b5f0      	push	{r4, r5, r6, r7, lr}
10049614:	b08d      	sub	sp, #52	@ 0x34
10049616:	af04      	add	r7, sp, #16
10049618:	60f8      	str	r0, [r7, #12]
1004961a:	60b9      	str	r1, [r7, #8]
1004961c:	603b      	str	r3, [r7, #0]
1004961e:	1dbb      	adds	r3, r7, #6
10049620:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
10049622:	231e      	movs	r3, #30
10049624:	18fb      	adds	r3, r7, r3
10049626:	2200      	movs	r2, #0
10049628:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
1004962a:	1dbb      	adds	r3, r7, #6
1004962c:	881a      	ldrh	r2, [r3, #0]
1004962e:	68bb      	ldr	r3, [r7, #8]
10049630:	21ff      	movs	r1, #255	@ 0xff
10049632:	0018      	movs	r0, r3
10049634:	f01e f976 	bl	10067924 <memset>

  header.valid_flag = VALID_RECORD;
10049638:	2310      	movs	r3, #16
1004963a:	18fb      	adds	r3, r7, r3
1004963c:	22fe      	movs	r2, #254	@ 0xfe
1004963e:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10049640:	1dba      	adds	r2, r7, #6
10049642:	251e      	movs	r5, #30
10049644:	197b      	adds	r3, r7, r5
10049646:	8812      	ldrh	r2, [r2, #0]
10049648:	881b      	ldrh	r3, [r3, #0]
1004964a:	1ad3      	subs	r3, r2, r3
1004964c:	b29a      	uxth	r2, r3
1004964e:	231c      	movs	r3, #28
10049650:	18fb      	adds	r3, r7, r3
10049652:	3a04      	subs	r2, #4
10049654:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
10049656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049658:	781b      	ldrb	r3, [r3, #0]
1004965a:	2b00      	cmp	r3, #0
1004965c:	d04e      	beq.n	100496fc <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
1004965e:	197b      	adds	r3, r7, r5
10049660:	881b      	ldrh	r3, [r3, #0]
10049662:	3304      	adds	r3, #4
10049664:	68ba      	ldr	r2, [r7, #8]
10049666:	18d1      	adds	r1, r2, r3
10049668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004966a:	889b      	ldrh	r3, [r3, #4]
1004966c:	261b      	movs	r6, #27
1004966e:	19bc      	adds	r4, r7, r6
10049670:	68f8      	ldr	r0, [r7, #12]
10049672:	2210      	movs	r2, #16
10049674:	18ba      	adds	r2, r7, r2
10049676:	3201      	adds	r2, #1
10049678:	9203      	str	r2, [sp, #12]
1004967a:	9302      	str	r3, [sp, #8]
1004967c:	2216      	movs	r2, #22
1004967e:	18bb      	adds	r3, r7, r2
10049680:	9301      	str	r3, [sp, #4]
10049682:	231c      	movs	r3, #28
10049684:	18fb      	adds	r3, r7, r3
10049686:	881b      	ldrh	r3, [r3, #0]
10049688:	9300      	str	r3, [sp, #0]
1004968a:	000b      	movs	r3, r1
1004968c:	2200      	movs	r2, #0
1004968e:	21ff      	movs	r1, #255	@ 0xff
10049690:	f7ff fd14 	bl	100490bc <ReadNextRecordNoLock>
10049694:	0003      	movs	r3, r0
10049696:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
10049698:	2216      	movs	r2, #22
1004969a:	18bb      	adds	r3, r7, r2
1004969c:	881a      	ldrh	r2, [r3, #0]
1004969e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100496a0:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
100496a2:	19bb      	adds	r3, r7, r6
100496a4:	781b      	ldrb	r3, [r3, #0]
100496a6:	2b00      	cmp	r3, #0
100496a8:	d006      	beq.n	100496b8 <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
100496aa:	683b      	ldr	r3, [r7, #0]
100496ac:	197a      	adds	r2, r7, r5
100496ae:	8812      	ldrh	r2, [r2, #0]
100496b0:	801a      	strh	r2, [r3, #0]
        return status;
100496b2:	19bb      	adds	r3, r7, r6
100496b4:	781b      	ldrb	r3, [r3, #0]
100496b6:	e0a1      	b.n	100497fc <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
100496b8:	2316      	movs	r3, #22
100496ba:	18fb      	adds	r3, r7, r3
100496bc:	881a      	ldrh	r2, [r3, #0]
100496be:	2110      	movs	r1, #16
100496c0:	187b      	adds	r3, r7, r1
100496c2:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
100496c4:	251e      	movs	r5, #30
100496c6:	197b      	adds	r3, r7, r5
100496c8:	881b      	ldrh	r3, [r3, #0]
100496ca:	68ba      	ldr	r2, [r7, #8]
100496cc:	18d3      	adds	r3, r2, r3
100496ce:	000c      	movs	r4, r1
100496d0:	1879      	adds	r1, r7, r1
100496d2:	2204      	movs	r2, #4
100496d4:	0018      	movs	r0, r3
100496d6:	f01e f99c 	bl	10067a12 <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
100496da:	193b      	adds	r3, r7, r4
100496dc:	885b      	ldrh	r3, [r3, #2]
100496de:	3303      	adds	r3, #3
100496e0:	b29b      	uxth	r3, r3
100496e2:	b21b      	sxth	r3, r3
100496e4:	2203      	movs	r2, #3
100496e6:	4313      	orrs	r3, r2
100496e8:	b21b      	sxth	r3, r3
100496ea:	b29a      	uxth	r2, r3
100496ec:	197b      	adds	r3, r7, r5
100496ee:	881b      	ldrh	r3, [r3, #0]
100496f0:	18d3      	adds	r3, r2, r3
100496f2:	b29a      	uxth	r2, r3
100496f4:	197b      	adds	r3, r7, r5
100496f6:	3201      	adds	r2, #1
100496f8:	801a      	strh	r2, [r3, #0]
100496fa:	e031      	b.n	10049760 <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
100496fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100496fe:	8859      	ldrh	r1, [r3, #2]
10049700:	231e      	movs	r3, #30
10049702:	18fb      	adds	r3, r7, r3
10049704:	881b      	ldrh	r3, [r3, #0]
10049706:	68ba      	ldr	r2, [r7, #8]
10049708:	18d5      	adds	r5, r2, r3
1004970a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004970c:	889b      	ldrh	r3, [r3, #4]
1004970e:	261b      	movs	r6, #27
10049710:	19bc      	adds	r4, r7, r6
10049712:	221c      	movs	r2, #28
10049714:	18ba      	adds	r2, r7, r2
10049716:	8812      	ldrh	r2, [r2, #0]
10049718:	68f8      	ldr	r0, [r7, #12]
1004971a:	9301      	str	r3, [sp, #4]
1004971c:	2316      	movs	r3, #22
1004971e:	18fb      	adds	r3, r7, r3
10049720:	9300      	str	r3, [sp, #0]
10049722:	0013      	movs	r3, r2
10049724:	002a      	movs	r2, r5
10049726:	f7ff fe20 	bl	1004936a <ReadCurrentRecordNoLock>
1004972a:	0003      	movs	r3, r0
1004972c:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
1004972e:	19bb      	adds	r3, r7, r6
10049730:	781b      	ldrb	r3, [r3, #0]
10049732:	2b00      	cmp	r3, #0
10049734:	d002      	beq.n	1004973c <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
10049736:	19bb      	adds	r3, r7, r6
10049738:	781b      	ldrb	r3, [r3, #0]
1004973a:	e05f      	b.n	100497fc <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
1004973c:	2316      	movs	r3, #22
1004973e:	18fb      	adds	r3, r7, r3
10049740:	881a      	ldrh	r2, [r3, #0]
10049742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049744:	885b      	ldrh	r3, [r3, #2]
10049746:	1ad3      	subs	r3, r2, r3
10049748:	b29b      	uxth	r3, r3
1004974a:	3b01      	subs	r3, #1
1004974c:	b29b      	uxth	r3, r3
1004974e:	b21b      	sxth	r3, r3
10049750:	2203      	movs	r2, #3
10049752:	4313      	orrs	r3, r2
10049754:	b21b      	sxth	r3, r3
10049756:	b29a      	uxth	r2, r3
10049758:	231e      	movs	r3, #30
1004975a:	18fb      	adds	r3, r7, r3
1004975c:	3201      	adds	r2, #1
1004975e:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
10049760:	2316      	movs	r3, #22
10049762:	18fb      	adds	r3, r7, r3
10049764:	881a      	ldrh	r2, [r3, #0]
10049766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049768:	885b      	ldrh	r3, [r3, #2]
1004976a:	1ad3      	subs	r3, r2, r3
1004976c:	b29b      	uxth	r3, r3
1004976e:	3b01      	subs	r3, #1
10049770:	b29b      	uxth	r3, r3
10049772:	b21b      	sxth	r3, r3
10049774:	2203      	movs	r2, #3
10049776:	4313      	orrs	r3, r2
10049778:	b21b      	sxth	r3, r3
1004977a:	b29a      	uxth	r2, r3
1004977c:	2118      	movs	r1, #24
1004977e:	187b      	adds	r3, r7, r1
10049780:	3201      	adds	r2, #1
10049782:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
10049784:	187a      	adds	r2, r7, r1
10049786:	211c      	movs	r1, #28
10049788:	187b      	adds	r3, r7, r1
1004978a:	8812      	ldrh	r2, [r2, #0]
1004978c:	881b      	ldrh	r3, [r3, #0]
1004978e:	429a      	cmp	r2, r3
10049790:	d910      	bls.n	100497b4 <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
10049792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049794:	2200      	movs	r2, #0
10049796:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
10049798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004979a:	885a      	ldrh	r2, [r3, #2]
1004979c:	187b      	adds	r3, r7, r1
1004979e:	881b      	ldrh	r3, [r3, #0]
100497a0:	18d3      	adds	r3, r2, r3
100497a2:	b29a      	uxth	r2, r3
100497a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100497a6:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
100497a8:	683b      	ldr	r3, [r7, #0]
100497aa:	1dba      	adds	r2, r7, #6
100497ac:	8812      	ldrh	r2, [r2, #0]
100497ae:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
100497b0:	2300      	movs	r3, #0
100497b2:	e023      	b.n	100497fc <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
100497b4:	2318      	movs	r3, #24
100497b6:	18fa      	adds	r2, r7, r3
100497b8:	231c      	movs	r3, #28
100497ba:	18fb      	adds	r3, r7, r3
100497bc:	8812      	ldrh	r2, [r2, #0]
100497be:	881b      	ldrh	r3, [r3, #0]
100497c0:	429a      	cmp	r2, r3
100497c2:	d10b      	bne.n	100497dc <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
100497c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100497c6:	2201      	movs	r2, #1
100497c8:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
100497ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100497cc:	2200      	movs	r2, #0
100497ce:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
100497d0:	683b      	ldr	r3, [r7, #0]
100497d2:	1dba      	adds	r2, r7, #6
100497d4:	8812      	ldrh	r2, [r2, #0]
100497d6:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
100497d8:	2300      	movs	r3, #0
100497da:	e00f      	b.n	100497fc <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
100497dc:	2318      	movs	r3, #24
100497de:	18fa      	adds	r2, r7, r3
100497e0:	231c      	movs	r3, #28
100497e2:	18fb      	adds	r3, r7, r3
100497e4:	8812      	ldrh	r2, [r2, #0]
100497e6:	881b      	ldrh	r3, [r3, #0]
100497e8:	429a      	cmp	r2, r3
100497ea:	d300      	bcc.n	100497ee <LoadDBToRAM+0x1dc>
100497ec:	e728      	b.n	10049640 <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
100497ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100497f0:	2201      	movs	r2, #1
100497f2:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
100497f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100497f6:	2200      	movs	r2, #0
100497f8:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
100497fa:	e721      	b.n	10049640 <LoadDBToRAM+0x2e>
    }
  }
}
100497fc:	0018      	movs	r0, r3
100497fe:	46bd      	mov	sp, r7
10049800:	b009      	add	sp, #36	@ 0x24
10049802:	bdf0      	pop	{r4, r5, r6, r7, pc}

10049804 <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
10049804:	b5f0      	push	{r4, r5, r6, r7, lr}
10049806:	4c60      	ldr	r4, [pc, #384]	@ (10049988 <CleanLargeDB+0x184>)
10049808:	44a5      	add	sp, r4
1004980a:	af02      	add	r7, sp, #8
1004980c:	0002      	movs	r2, r0
1004980e:	4b5f      	ldr	r3, [pc, #380]	@ (1004998c <CleanLargeDB+0x188>)
10049810:	2184      	movs	r1, #132	@ 0x84
10049812:	0109      	lsls	r1, r1, #4
10049814:	185b      	adds	r3, r3, r1
10049816:	19db      	adds	r3, r3, r7
10049818:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
1004981a:	4b5c      	ldr	r3, [pc, #368]	@ (1004998c <CleanLargeDB+0x188>)
1004981c:	185b      	adds	r3, r3, r1
1004981e:	19db      	adds	r3, r3, r7
10049820:	781a      	ldrb	r2, [r3, #0]
10049822:	495b      	ldr	r1, [pc, #364]	@ (10049990 <CleanLargeDB+0x18c>)
10049824:	0013      	movs	r3, r2
10049826:	009b      	lsls	r3, r3, #2
10049828:	189b      	adds	r3, r3, r2
1004982a:	009b      	lsls	r3, r3, #2
1004982c:	18cb      	adds	r3, r1, r3
1004982e:	330a      	adds	r3, #10
10049830:	881b      	ldrh	r3, [r3, #0]
10049832:	2b00      	cmp	r3, #0
10049834:	d101      	bne.n	1004983a <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
10049836:	2300      	movs	r3, #0
10049838:	e0a0      	b.n	1004997c <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
1004983a:	4b56      	ldr	r3, [pc, #344]	@ (10049994 <CleanLargeDB+0x190>)
1004983c:	18fc      	adds	r4, r7, r3
1004983e:	4d56      	ldr	r5, [pc, #344]	@ (10049998 <CleanLargeDB+0x194>)
10049840:	197a      	adds	r2, r7, r5
10049842:	4b52      	ldr	r3, [pc, #328]	@ (1004998c <CleanLargeDB+0x188>)
10049844:	2184      	movs	r1, #132	@ 0x84
10049846:	0109      	lsls	r1, r1, #4
10049848:	185b      	adds	r3, r3, r1
1004984a:	19db      	adds	r3, r3, r7
1004984c:	781b      	ldrb	r3, [r3, #0]
1004984e:	0011      	movs	r1, r2
10049850:	0018      	movs	r0, r3
10049852:	f000 fcd3 	bl	1004a1fc <NVMDB_HandleInit>
10049856:	0003      	movs	r3, r0
10049858:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
1004985a:	197b      	adds	r3, r7, r5
1004985c:	685b      	ldr	r3, [r3, #4]
1004985e:	4a4f      	ldr	r2, [pc, #316]	@ (1004999c <CleanLargeDB+0x198>)
10049860:	18ba      	adds	r2, r7, r2
10049862:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
10049864:	4b4e      	ldr	r3, [pc, #312]	@ (100499a0 <CleanLargeDB+0x19c>)
10049866:	18fb      	adds	r3, r7, r3
10049868:	0018      	movs	r0, r3
1004986a:	f7ff fec1 	bl	100495f0 <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
1004986e:	4e49      	ldr	r6, [pc, #292]	@ (10049994 <CleanLargeDB+0x190>)
10049870:	19bc      	adds	r4, r7, r6
10049872:	4b4c      	ldr	r3, [pc, #304]	@ (100499a4 <CleanLargeDB+0x1a0>)
10049874:	18fd      	adds	r5, r7, r3
10049876:	2380      	movs	r3, #128	@ 0x80
10049878:	011a      	lsls	r2, r3, #4
1004987a:	230c      	movs	r3, #12
1004987c:	18f9      	adds	r1, r7, r3
1004987e:	4b46      	ldr	r3, [pc, #280]	@ (10049998 <CleanLargeDB+0x194>)
10049880:	18f8      	adds	r0, r7, r3
10049882:	4b47      	ldr	r3, [pc, #284]	@ (100499a0 <CleanLargeDB+0x19c>)
10049884:	18fb      	adds	r3, r7, r3
10049886:	9300      	str	r3, [sp, #0]
10049888:	002b      	movs	r3, r5
1004988a:	f7ff fec2 	bl	10049612 <LoadDBToRAM>
1004988e:	0003      	movs	r3, r0
10049890:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
10049892:	19bb      	adds	r3, r7, r6
10049894:	781b      	ldrb	r3, [r3, #0]
10049896:	2b04      	cmp	r3, #4
10049898:	d006      	beq.n	100498a8 <CleanLargeDB+0xa4>
1004989a:	19bb      	adds	r3, r7, r6
1004989c:	781b      	ldrb	r3, [r3, #0]
1004989e:	2b00      	cmp	r3, #0
100498a0:	d002      	beq.n	100498a8 <CleanLargeDB+0xa4>
    {
      return status;
100498a2:	19bb      	adds	r3, r7, r6
100498a4:	781b      	ldrb	r3, [r3, #0]
100498a6:	e069      	b.n	1004997c <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
100498a8:	4b3e      	ldr	r3, [pc, #248]	@ (100499a4 <CleanLargeDB+0x1a0>)
100498aa:	18fb      	adds	r3, r7, r3
100498ac:	881a      	ldrh	r2, [r3, #0]
100498ae:	2380      	movs	r3, #128	@ 0x80
100498b0:	011b      	lsls	r3, r3, #4
100498b2:	429a      	cmp	r2, r3
100498b4:	d004      	beq.n	100498c0 <CleanLargeDB+0xbc>
100498b6:	4b37      	ldr	r3, [pc, #220]	@ (10049994 <CleanLargeDB+0x190>)
100498b8:	18fb      	adds	r3, r7, r3
100498ba:	781b      	ldrb	r3, [r3, #0]
100498bc:	2b00      	cmp	r3, #0
100498be:	d0d6      	beq.n	1004986e <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
100498c0:	4a38      	ldr	r2, [pc, #224]	@ (100499a4 <CleanLargeDB+0x1a0>)
100498c2:	18bb      	adds	r3, r7, r2
100498c4:	881b      	ldrh	r3, [r3, #0]
100498c6:	2b00      	cmp	r3, #0
100498c8:	d019      	beq.n	100498fe <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
100498ca:	18bb      	adds	r3, r7, r2
100498cc:	881b      	ldrh	r3, [r3, #0]
100498ce:	001a      	movs	r2, r3
100498d0:	230c      	movs	r3, #12
100498d2:	18f9      	adds	r1, r7, r3
100498d4:	4c31      	ldr	r4, [pc, #196]	@ (1004999c <CleanLargeDB+0x198>)
100498d6:	193b      	adds	r3, r7, r4
100498d8:	681b      	ldr	r3, [r3, #0]
100498da:	0018      	movs	r0, r3
100498dc:	f7ff fe48 	bl	10049570 <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
100498e0:	0022      	movs	r2, r4
100498e2:	18bb      	adds	r3, r7, r2
100498e4:	681b      	ldr	r3, [r3, #0]
100498e6:	2180      	movs	r1, #128	@ 0x80
100498e8:	0109      	lsls	r1, r1, #4
100498ea:	468c      	mov	ip, r1
100498ec:	4463      	add	r3, ip
100498ee:	18ba      	adds	r2, r7, r2
100498f0:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
100498f2:	4b28      	ldr	r3, [pc, #160]	@ (10049994 <CleanLargeDB+0x190>)
100498f4:	18fb      	adds	r3, r7, r3
100498f6:	781b      	ldrb	r3, [r3, #0]
100498f8:	2b00      	cmp	r3, #0
100498fa:	d102      	bne.n	10049902 <CleanLargeDB+0xfe>
  {
100498fc:	e7b7      	b.n	1004986e <CleanLargeDB+0x6a>
        break;
100498fe:	46c0      	nop			@ (mov r8, r8)
10049900:	e000      	b.n	10049904 <CleanLargeDB+0x100>
      {
        break;
10049902:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
10049904:	4b24      	ldr	r3, [pc, #144]	@ (10049998 <CleanLargeDB+0x194>)
10049906:	18fb      	adds	r3, r7, r3
10049908:	689b      	ldr	r3, [r3, #8]
1004990a:	3b01      	subs	r3, #1
1004990c:	4a26      	ldr	r2, [pc, #152]	@ (100499a8 <CleanLargeDB+0x1a4>)
1004990e:	431a      	orrs	r2, r3
10049910:	4922      	ldr	r1, [pc, #136]	@ (1004999c <CleanLargeDB+0x198>)
10049912:	187b      	adds	r3, r7, r1
10049914:	681b      	ldr	r3, [r3, #0]
10049916:	1ad3      	subs	r3, r2, r3
10049918:	3301      	adds	r3, #1
1004991a:	0ada      	lsrs	r2, r3, #11
1004991c:	4823      	ldr	r0, [pc, #140]	@ (100499ac <CleanLargeDB+0x1a8>)
1004991e:	183b      	adds	r3, r7, r0
10049920:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10049922:	187b      	adds	r3, r7, r1
10049924:	681b      	ldr	r3, [r3, #0]
10049926:	4a22      	ldr	r2, [pc, #136]	@ (100499b0 <CleanLargeDB+0x1ac>)
10049928:	4694      	mov	ip, r2
1004992a:	4463      	add	r3, ip
1004992c:	0ada      	lsrs	r2, r3, #11
1004992e:	4c21      	ldr	r4, [pc, #132]	@ (100499b4 <CleanLargeDB+0x1b0>)
10049930:	193b      	adds	r3, r7, r4
10049932:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
10049934:	2181      	movs	r1, #129	@ 0x81
10049936:	0109      	lsls	r1, r1, #4
10049938:	187b      	adds	r3, r7, r1
1004993a:	2200      	movs	r2, #0
1004993c:	601a      	str	r2, [r3, #0]
1004993e:	193b      	adds	r3, r7, r4
10049940:	781a      	ldrb	r2, [r3, #0]
10049942:	187b      	adds	r3, r7, r1
10049944:	605a      	str	r2, [r3, #4]
10049946:	183b      	adds	r3, r7, r0
10049948:	781a      	ldrb	r2, [r3, #0]
1004994a:	187b      	adds	r3, r7, r1
1004994c:	609a      	str	r2, [r3, #8]
1004994e:	4b1a      	ldr	r3, [pc, #104]	@ (100499b8 <CleanLargeDB+0x1b4>)
10049950:	18fa      	adds	r2, r7, r3
10049952:	187b      	adds	r3, r7, r1
10049954:	0011      	movs	r1, r2
10049956:	0018      	movs	r0, r3
10049958:	f002 fd9c 	bl	1004c494 <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
1004995c:	4b0b      	ldr	r3, [pc, #44]	@ (1004998c <CleanLargeDB+0x188>)
1004995e:	2284      	movs	r2, #132	@ 0x84
10049960:	0112      	lsls	r2, r2, #4
10049962:	189b      	adds	r3, r3, r2
10049964:	19db      	adds	r3, r3, r7
10049966:	781a      	ldrb	r2, [r3, #0]
10049968:	0013      	movs	r3, r2
1004996a:	009b      	lsls	r3, r3, #2
1004996c:	189b      	adds	r3, r3, r2
1004996e:	009b      	lsls	r3, r3, #2
10049970:	4a07      	ldr	r2, [pc, #28]	@ (10049990 <CleanLargeDB+0x18c>)
10049972:	189b      	adds	r3, r3, r2
10049974:	0018      	movs	r0, r3
10049976:	f7ff fad5 	bl	10048f24 <NVMDB_get_info>
1004997a:	0003      	movs	r3, r0
}
1004997c:	0018      	movs	r0, r3
1004997e:	46bd      	mov	sp, r7
10049980:	4b0e      	ldr	r3, [pc, #56]	@ (100499bc <CleanLargeDB+0x1b8>)
10049982:	449d      	add	sp, r3
10049984:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049986:	46c0      	nop			@ (mov r8, r8)
10049988:	fffff7b4 	.word	0xfffff7b4
1004998c:	fffff7c7 	.word	0xfffff7c7
10049990:	20000e38 	.word	0x20000e38
10049994:	0000083b 	.word	0x0000083b
10049998:	00000824 	.word	0x00000824
1004999c:	0000083c 	.word	0x0000083c
100499a0:	0000081c 	.word	0x0000081c
100499a4:	00000836 	.word	0x00000836
100499a8:	000007ff 	.word	0x000007ff
100499ac:	0000083a 	.word	0x0000083a
100499b0:	effc0000 	.word	0xeffc0000
100499b4:	00000839 	.word	0x00000839
100499b8:	0000080c 	.word	0x0000080c
100499bc:	00000844 	.word	0x00000844

100499c0 <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
100499c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100499c2:	4c7a      	ldr	r4, [pc, #488]	@ (10049bac <CleanPage+0x1ec>)
100499c4:	44a5      	add	sp, r4
100499c6:	af02      	add	r7, sp, #8
100499c8:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
100499ca:	4b79      	ldr	r3, [pc, #484]	@ (10049bb0 <CleanPage+0x1f0>)
100499cc:	18fb      	adds	r3, r7, r3
100499ce:	2200      	movs	r2, #0
100499d0:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
100499d2:	4b78      	ldr	r3, [pc, #480]	@ (10049bb4 <CleanPage+0x1f4>)
100499d4:	18fb      	adds	r3, r7, r3
100499d6:	2200      	movs	r2, #0
100499d8:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
100499da:	2300      	movs	r3, #0
100499dc:	4a76      	ldr	r2, [pc, #472]	@ (10049bb8 <CleanPage+0x1f8>)
100499de:	18ba      	adds	r2, r7, r2
100499e0:	6013      	str	r3, [r2, #0]
100499e2:	e023      	b.n	10049a2c <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
100499e4:	687b      	ldr	r3, [r7, #4]
100499e6:	6899      	ldr	r1, [r3, #8]
100499e8:	4b73      	ldr	r3, [pc, #460]	@ (10049bb8 <CleanPage+0x1f8>)
100499ea:	18fb      	adds	r3, r7, r3
100499ec:	681a      	ldr	r2, [r3, #0]
100499ee:	0013      	movs	r3, r2
100499f0:	005b      	lsls	r3, r3, #1
100499f2:	189b      	adds	r3, r3, r2
100499f4:	009b      	lsls	r3, r3, #2
100499f6:	18ca      	adds	r2, r1, r3
100499f8:	4970      	ldr	r1, [pc, #448]	@ (10049bbc <CleanPage+0x1fc>)
100499fa:	187b      	adds	r3, r7, r1
100499fc:	7812      	ldrb	r2, [r2, #0]
100499fe:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
10049a00:	187b      	adds	r3, r7, r1
10049a02:	781a      	ldrb	r2, [r3, #0]
10049a04:	496e      	ldr	r1, [pc, #440]	@ (10049bc0 <CleanPage+0x200>)
10049a06:	0013      	movs	r3, r2
10049a08:	009b      	lsls	r3, r3, #2
10049a0a:	189b      	adds	r3, r3, r2
10049a0c:	009b      	lsls	r3, r3, #2
10049a0e:	18cb      	adds	r3, r1, r3
10049a10:	330a      	adds	r3, #10
10049a12:	881b      	ldrh	r3, [r3, #0]
10049a14:	2b00      	cmp	r3, #0
10049a16:	d003      	beq.n	10049a20 <CleanPage+0x60>
    {
      found = TRUE;
10049a18:	4b66      	ldr	r3, [pc, #408]	@ (10049bb4 <CleanPage+0x1f4>)
10049a1a:	18fb      	adds	r3, r7, r3
10049a1c:	2201      	movs	r2, #1
10049a1e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10049a20:	4a65      	ldr	r2, [pc, #404]	@ (10049bb8 <CleanPage+0x1f8>)
10049a22:	18bb      	adds	r3, r7, r2
10049a24:	681b      	ldr	r3, [r3, #0]
10049a26:	3301      	adds	r3, #1
10049a28:	18ba      	adds	r2, r7, r2
10049a2a:	6013      	str	r3, [r2, #0]
10049a2c:	687b      	ldr	r3, [r7, #4]
10049a2e:	791b      	ldrb	r3, [r3, #4]
10049a30:	001a      	movs	r2, r3
10049a32:	4b61      	ldr	r3, [pc, #388]	@ (10049bb8 <CleanPage+0x1f8>)
10049a34:	18fb      	adds	r3, r7, r3
10049a36:	681b      	ldr	r3, [r3, #0]
10049a38:	4293      	cmp	r3, r2
10049a3a:	dbd3      	blt.n	100499e4 <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
10049a3c:	4b5d      	ldr	r3, [pc, #372]	@ (10049bb4 <CleanPage+0x1f4>)
10049a3e:	18fb      	adds	r3, r7, r3
10049a40:	781b      	ldrb	r3, [r3, #0]
10049a42:	2b00      	cmp	r3, #0
10049a44:	d101      	bne.n	10049a4a <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
10049a46:	2300      	movs	r3, #0
10049a48:	e0ab      	b.n	10049ba2 <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
10049a4a:	2380      	movs	r3, #128	@ 0x80
10049a4c:	011a      	lsls	r2, r3, #4
10049a4e:	2308      	movs	r3, #8
10049a50:	18fb      	adds	r3, r7, r3
10049a52:	21ff      	movs	r1, #255	@ 0xff
10049a54:	0018      	movs	r0, r3
10049a56:	f01d ff65 	bl	10067924 <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10049a5a:	2300      	movs	r3, #0
10049a5c:	4a56      	ldr	r2, [pc, #344]	@ (10049bb8 <CleanPage+0x1f8>)
10049a5e:	18ba      	adds	r2, r7, r2
10049a60:	6013      	str	r3, [r2, #0]
10049a62:	e051      	b.n	10049b08 <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10049a64:	687b      	ldr	r3, [r7, #4]
10049a66:	6899      	ldr	r1, [r3, #8]
10049a68:	4853      	ldr	r0, [pc, #332]	@ (10049bb8 <CleanPage+0x1f8>)
10049a6a:	183b      	adds	r3, r7, r0
10049a6c:	681a      	ldr	r2, [r3, #0]
10049a6e:	0013      	movs	r3, r2
10049a70:	005b      	lsls	r3, r3, #1
10049a72:	189b      	adds	r3, r3, r2
10049a74:	009b      	lsls	r3, r3, #2
10049a76:	18ca      	adds	r2, r1, r3
10049a78:	4d50      	ldr	r5, [pc, #320]	@ (10049bbc <CleanPage+0x1fc>)
10049a7a:	197b      	adds	r3, r7, r5
10049a7c:	7812      	ldrb	r2, [r2, #0]
10049a7e:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
10049a80:	687b      	ldr	r3, [r7, #4]
10049a82:	6899      	ldr	r1, [r3, #8]
10049a84:	183b      	adds	r3, r7, r0
10049a86:	681a      	ldr	r2, [r3, #0]
10049a88:	0013      	movs	r3, r2
10049a8a:	005b      	lsls	r3, r3, #1
10049a8c:	189b      	adds	r3, r3, r2
10049a8e:	009b      	lsls	r3, r3, #2
10049a90:	18cb      	adds	r3, r1, r3
10049a92:	685b      	ldr	r3, [r3, #4]
10049a94:	2282      	movs	r2, #130	@ 0x82
10049a96:	0112      	lsls	r2, r2, #4
10049a98:	18ba      	adds	r2, r7, r2
10049a9a:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
10049a9c:	4e49      	ldr	r6, [pc, #292]	@ (10049bc4 <CleanPage+0x204>)
10049a9e:	19bc      	adds	r4, r7, r6
10049aa0:	2381      	movs	r3, #129	@ 0x81
10049aa2:	011b      	lsls	r3, r3, #4
10049aa4:	18fa      	adds	r2, r7, r3
10049aa6:	197b      	adds	r3, r7, r5
10049aa8:	781b      	ldrb	r3, [r3, #0]
10049aaa:	0011      	movs	r1, r2
10049aac:	0018      	movs	r0, r3
10049aae:	f000 fba5 	bl	1004a1fc <NVMDB_HandleInit>
10049ab2:	0003      	movs	r3, r0
10049ab4:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
10049ab6:	19bb      	adds	r3, r7, r6
10049ab8:	781b      	ldrb	r3, [r3, #0]
10049aba:	2b00      	cmp	r3, #0
10049abc:	d001      	beq.n	10049ac2 <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
10049abe:	2300      	movs	r3, #0
10049ac0:	e06f      	b.n	10049ba2 <CleanPage+0x1e2>
    }

    InitReadState(&state);
10049ac2:	4d41      	ldr	r5, [pc, #260]	@ (10049bc8 <CleanPage+0x208>)
10049ac4:	197b      	adds	r3, r7, r5
10049ac6:	0018      	movs	r0, r3
10049ac8:	f7ff fd92 	bl	100495f0 <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
10049acc:	2308      	movs	r3, #8
10049ace:	18fa      	adds	r2, r7, r3
10049ad0:	2082      	movs	r0, #130	@ 0x82
10049ad2:	0100      	lsls	r0, r0, #4
10049ad4:	183b      	adds	r3, r7, r0
10049ad6:	681b      	ldr	r3, [r3, #0]
10049ad8:	18d1      	adds	r1, r2, r3
10049ada:	183b      	adds	r3, r7, r0
10049adc:	681b      	ldr	r3, [r3, #0]
10049ade:	b29b      	uxth	r3, r3
10049ae0:	2280      	movs	r2, #128	@ 0x80
10049ae2:	0112      	lsls	r2, r2, #4
10049ae4:	1ad3      	subs	r3, r2, r3
10049ae6:	b29a      	uxth	r2, r3
10049ae8:	4b38      	ldr	r3, [pc, #224]	@ (10049bcc <CleanPage+0x20c>)
10049aea:	18fc      	adds	r4, r7, r3
10049aec:	2381      	movs	r3, #129	@ 0x81
10049aee:	011b      	lsls	r3, r3, #4
10049af0:	18f8      	adds	r0, r7, r3
10049af2:	197b      	adds	r3, r7, r5
10049af4:	9300      	str	r3, [sp, #0]
10049af6:	0023      	movs	r3, r4
10049af8:	f7ff fd8b 	bl	10049612 <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10049afc:	4a2e      	ldr	r2, [pc, #184]	@ (10049bb8 <CleanPage+0x1f8>)
10049afe:	18bb      	adds	r3, r7, r2
10049b00:	681b      	ldr	r3, [r3, #0]
10049b02:	3301      	adds	r3, #1
10049b04:	18ba      	adds	r2, r7, r2
10049b06:	6013      	str	r3, [r2, #0]
10049b08:	687b      	ldr	r3, [r7, #4]
10049b0a:	791b      	ldrb	r3, [r3, #4]
10049b0c:	001a      	movs	r2, r3
10049b0e:	4c2a      	ldr	r4, [pc, #168]	@ (10049bb8 <CleanPage+0x1f8>)
10049b10:	193b      	adds	r3, r7, r4
10049b12:	681b      	ldr	r3, [r3, #0]
10049b14:	4293      	cmp	r3, r2
10049b16:	dba5      	blt.n	10049a64 <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
10049b18:	687b      	ldr	r3, [r7, #4]
10049b1a:	681b      	ldr	r3, [r3, #0]
10049b1c:	2280      	movs	r2, #128	@ 0x80
10049b1e:	0112      	lsls	r2, r2, #4
10049b20:	2108      	movs	r1, #8
10049b22:	1879      	adds	r1, r7, r1
10049b24:	0018      	movs	r0, r3
10049b26:	f7ff fd23 	bl	10049570 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10049b2a:	2300      	movs	r3, #0
10049b2c:	193a      	adds	r2, r7, r4
10049b2e:	6013      	str	r3, [r2, #0]
10049b30:	e02c      	b.n	10049b8c <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10049b32:	687b      	ldr	r3, [r7, #4]
10049b34:	6899      	ldr	r1, [r3, #8]
10049b36:	4b20      	ldr	r3, [pc, #128]	@ (10049bb8 <CleanPage+0x1f8>)
10049b38:	18fb      	adds	r3, r7, r3
10049b3a:	681a      	ldr	r2, [r3, #0]
10049b3c:	0013      	movs	r3, r2
10049b3e:	005b      	lsls	r3, r3, #1
10049b40:	189b      	adds	r3, r3, r2
10049b42:	009b      	lsls	r3, r3, #2
10049b44:	18ca      	adds	r2, r1, r3
10049b46:	491d      	ldr	r1, [pc, #116]	@ (10049bbc <CleanPage+0x1fc>)
10049b48:	187b      	adds	r3, r7, r1
10049b4a:	7812      	ldrb	r2, [r2, #0]
10049b4c:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
10049b4e:	187b      	adds	r3, r7, r1
10049b50:	781a      	ldrb	r2, [r3, #0]
10049b52:	0013      	movs	r3, r2
10049b54:	009b      	lsls	r3, r3, #2
10049b56:	189b      	adds	r3, r3, r2
10049b58:	009b      	lsls	r3, r3, #2
10049b5a:	4a19      	ldr	r2, [pc, #100]	@ (10049bc0 <CleanPage+0x200>)
10049b5c:	189b      	adds	r3, r3, r2
10049b5e:	4d19      	ldr	r5, [pc, #100]	@ (10049bc4 <CleanPage+0x204>)
10049b60:	197c      	adds	r4, r7, r5
10049b62:	0018      	movs	r0, r3
10049b64:	f7ff f9de 	bl	10048f24 <NVMDB_get_info>
10049b68:	0003      	movs	r3, r0
10049b6a:	7023      	strb	r3, [r4, #0]
    if(status)
10049b6c:	002a      	movs	r2, r5
10049b6e:	18bb      	adds	r3, r7, r2
10049b70:	781b      	ldrb	r3, [r3, #0]
10049b72:	2b00      	cmp	r3, #0
10049b74:	d004      	beq.n	10049b80 <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
10049b76:	4b0e      	ldr	r3, [pc, #56]	@ (10049bb0 <CleanPage+0x1f0>)
10049b78:	18fb      	adds	r3, r7, r3
10049b7a:	18ba      	adds	r2, r7, r2
10049b7c:	7812      	ldrb	r2, [r2, #0]
10049b7e:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10049b80:	4a0d      	ldr	r2, [pc, #52]	@ (10049bb8 <CleanPage+0x1f8>)
10049b82:	18bb      	adds	r3, r7, r2
10049b84:	681b      	ldr	r3, [r3, #0]
10049b86:	3301      	adds	r3, #1
10049b88:	18ba      	adds	r2, r7, r2
10049b8a:	6013      	str	r3, [r2, #0]
10049b8c:	687b      	ldr	r3, [r7, #4]
10049b8e:	791b      	ldrb	r3, [r3, #4]
10049b90:	001a      	movs	r2, r3
10049b92:	4b09      	ldr	r3, [pc, #36]	@ (10049bb8 <CleanPage+0x1f8>)
10049b94:	18fb      	adds	r3, r7, r3
10049b96:	681b      	ldr	r3, [r3, #0]
10049b98:	4293      	cmp	r3, r2
10049b9a:	dbca      	blt.n	10049b32 <CleanPage+0x172>
    }
  }

  return ret;
10049b9c:	4b04      	ldr	r3, [pc, #16]	@ (10049bb0 <CleanPage+0x1f0>)
10049b9e:	18fb      	adds	r3, r7, r3
10049ba0:	781b      	ldrb	r3, [r3, #0]
}
10049ba2:	0018      	movs	r0, r3
10049ba4:	46bd      	mov	sp, r7
10049ba6:	4b0a      	ldr	r3, [pc, #40]	@ (10049bd0 <CleanPage+0x210>)
10049ba8:	449d      	add	sp, r3
10049baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049bac:	fffff7c4 	.word	0xfffff7c4
10049bb0:	0000082f 	.word	0x0000082f
10049bb4:	00000827 	.word	0x00000827
10049bb8:	00000828 	.word	0x00000828
10049bbc:	00000826 	.word	0x00000826
10049bc0:	20000e38 	.word	0x20000e38
10049bc4:	00000825 	.word	0x00000825
10049bc8:	00000808 	.word	0x00000808
10049bcc:	0000080e 	.word	0x0000080e
10049bd0:	00000834 	.word	0x00000834

10049bd4 <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
10049bd4:	b590      	push	{r4, r7, lr}
10049bd6:	b087      	sub	sp, #28
10049bd8:	af00      	add	r7, sp, #0
10049bda:	0002      	movs	r2, r0
10049bdc:	6039      	str	r1, [r7, #0]
10049bde:	1dfb      	adds	r3, r7, #7
10049be0:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
10049be2:	2300      	movs	r3, #0
10049be4:	617b      	str	r3, [r7, #20]
10049be6:	e016      	b.n	10049c16 <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
10049be8:	240b      	movs	r4, #11
10049bea:	1939      	adds	r1, r7, r4
10049bec:	482e      	ldr	r0, [pc, #184]	@ (10049ca8 <GetDBType+0xd4>)
10049bee:	697a      	ldr	r2, [r7, #20]
10049bf0:	0013      	movs	r3, r2
10049bf2:	005b      	lsls	r3, r3, #1
10049bf4:	189b      	adds	r3, r3, r2
10049bf6:	009b      	lsls	r3, r3, #2
10049bf8:	18c3      	adds	r3, r0, r3
10049bfa:	3306      	adds	r3, #6
10049bfc:	781b      	ldrb	r3, [r3, #0]
10049bfe:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
10049c00:	193a      	adds	r2, r7, r4
10049c02:	1dfb      	adds	r3, r7, #7
10049c04:	7812      	ldrb	r2, [r2, #0]
10049c06:	781b      	ldrb	r3, [r3, #0]
10049c08:	429a      	cmp	r2, r3
10049c0a:	d101      	bne.n	10049c10 <GetDBType+0x3c>
    {
      return LARGE_DB;
10049c0c:	2302      	movs	r3, #2
10049c0e:	e046      	b.n	10049c9e <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10049c10:	697b      	ldr	r3, [r7, #20]
10049c12:	3301      	adds	r3, #1
10049c14:	617b      	str	r3, [r7, #20]
10049c16:	697b      	ldr	r3, [r7, #20]
10049c18:	2b01      	cmp	r3, #1
10049c1a:	dde5      	ble.n	10049be8 <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10049c1c:	2300      	movs	r3, #0
10049c1e:	613b      	str	r3, [r7, #16]
10049c20:	e039      	b.n	10049c96 <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10049c22:	2300      	movs	r3, #0
10049c24:	60fb      	str	r3, [r7, #12]
10049c26:	e026      	b.n	10049c76 <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10049c28:	4920      	ldr	r1, [pc, #128]	@ (10049cac <GetDBType+0xd8>)
10049c2a:	693a      	ldr	r2, [r7, #16]
10049c2c:	0013      	movs	r3, r2
10049c2e:	005b      	lsls	r3, r3, #1
10049c30:	189b      	adds	r3, r3, r2
10049c32:	009b      	lsls	r3, r3, #2
10049c34:	18cb      	adds	r3, r1, r3
10049c36:	3308      	adds	r3, #8
10049c38:	6819      	ldr	r1, [r3, #0]
10049c3a:	68fa      	ldr	r2, [r7, #12]
10049c3c:	0013      	movs	r3, r2
10049c3e:	005b      	lsls	r3, r3, #1
10049c40:	189b      	adds	r3, r3, r2
10049c42:	009b      	lsls	r3, r3, #2
10049c44:	18ca      	adds	r2, r1, r3
10049c46:	210b      	movs	r1, #11
10049c48:	187b      	adds	r3, r7, r1
10049c4a:	7812      	ldrb	r2, [r2, #0]
10049c4c:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
10049c4e:	187a      	adds	r2, r7, r1
10049c50:	1dfb      	adds	r3, r7, #7
10049c52:	7812      	ldrb	r2, [r2, #0]
10049c54:	781b      	ldrb	r3, [r3, #0]
10049c56:	429a      	cmp	r2, r3
10049c58:	d10a      	bne.n	10049c70 <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
10049c5a:	693a      	ldr	r2, [r7, #16]
10049c5c:	0013      	movs	r3, r2
10049c5e:	005b      	lsls	r3, r3, #1
10049c60:	189b      	adds	r3, r3, r2
10049c62:	009b      	lsls	r3, r3, #2
10049c64:	4a11      	ldr	r2, [pc, #68]	@ (10049cac <GetDBType+0xd8>)
10049c66:	189a      	adds	r2, r3, r2
10049c68:	683b      	ldr	r3, [r7, #0]
10049c6a:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
10049c6c:	2301      	movs	r3, #1
10049c6e:	e016      	b.n	10049c9e <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10049c70:	68fb      	ldr	r3, [r7, #12]
10049c72:	3301      	adds	r3, #1
10049c74:	60fb      	str	r3, [r7, #12]
10049c76:	490d      	ldr	r1, [pc, #52]	@ (10049cac <GetDBType+0xd8>)
10049c78:	693a      	ldr	r2, [r7, #16]
10049c7a:	0013      	movs	r3, r2
10049c7c:	005b      	lsls	r3, r3, #1
10049c7e:	189b      	adds	r3, r3, r2
10049c80:	009b      	lsls	r3, r3, #2
10049c82:	18cb      	adds	r3, r1, r3
10049c84:	3304      	adds	r3, #4
10049c86:	781b      	ldrb	r3, [r3, #0]
10049c88:	001a      	movs	r2, r3
10049c8a:	68fb      	ldr	r3, [r7, #12]
10049c8c:	4293      	cmp	r3, r2
10049c8e:	dbcb      	blt.n	10049c28 <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10049c90:	693b      	ldr	r3, [r7, #16]
10049c92:	3301      	adds	r3, #1
10049c94:	613b      	str	r3, [r7, #16]
10049c96:	693b      	ldr	r3, [r7, #16]
10049c98:	2b00      	cmp	r3, #0
10049c9a:	dbc2      	blt.n	10049c22 <GetDBType+0x4e>
      }
    }
  }

  return 0;
10049c9c:	2300      	movs	r3, #0
}
10049c9e:	0018      	movs	r0, r3
10049ca0:	46bd      	mov	sp, r7
10049ca2:	b007      	add	sp, #28
10049ca4:	bd90      	pop	{r4, r7, pc}
10049ca6:	46c0      	nop			@ (mov r8, r8)
10049ca8:	1006cd20 	.word	0x1006cd20
10049cac:	20000e64 	.word	0x20000e64

10049cb0 <EraseSmallDB>:
}

#endif

__NOINLINE static NVMDB_status_t EraseSmallDB(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
10049cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10049cb2:	4c3d      	ldr	r4, [pc, #244]	@ (10049da8 <EraseSmallDB+0xf8>)
10049cb4:	44a5      	add	sp, r4
10049cb6:	af02      	add	r7, sp, #8
10049cb8:	0002      	movs	r2, r0
10049cba:	6039      	str	r1, [r7, #0]
10049cbc:	4b3b      	ldr	r3, [pc, #236]	@ (10049dac <EraseSmallDB+0xfc>)
10049cbe:	2183      	movs	r1, #131	@ 0x83
10049cc0:	0109      	lsls	r1, r1, #4
10049cc2:	185b      	adds	r3, r3, r1
10049cc4:	19db      	adds	r3, r3, r7
10049cc6:	701a      	strb	r2, [r3, #0]
#endif
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
10049cc8:	2380      	movs	r3, #128	@ 0x80
10049cca:	011a      	lsls	r2, r3, #4
10049ccc:	2324      	movs	r3, #36	@ 0x24
10049cce:	18fb      	adds	r3, r7, r3
10049cd0:	21ff      	movs	r1, #255	@ 0xff
10049cd2:	0018      	movs	r0, r3
10049cd4:	f01d fe26 	bl	10067924 <memset>

  // Search other databases in the same page
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
10049cd8:	2300      	movs	r3, #0
10049cda:	4a35      	ldr	r2, [pc, #212]	@ (10049db0 <EraseSmallDB+0x100>)
10049cdc:	18ba      	adds	r2, r7, r2
10049cde:	6013      	str	r3, [r2, #0]
10049ce0:	e04b      	b.n	10049d7a <EraseSmallDB+0xca>
  {
    NVMDB_HandleType handle;
    uint16_t num_read_bytes;
    ReadStateType state;
    NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
10049ce2:	683b      	ldr	r3, [r7, #0]
10049ce4:	6899      	ldr	r1, [r3, #8]
10049ce6:	4c32      	ldr	r4, [pc, #200]	@ (10049db0 <EraseSmallDB+0x100>)
10049ce8:	193b      	adds	r3, r7, r4
10049cea:	681a      	ldr	r2, [r3, #0]
10049cec:	0013      	movs	r3, r2
10049cee:	005b      	lsls	r3, r3, #1
10049cf0:	189b      	adds	r3, r3, r2
10049cf2:	009b      	lsls	r3, r3, #2
10049cf4:	18ca      	adds	r2, r1, r3
10049cf6:	492f      	ldr	r1, [pc, #188]	@ (10049db4 <EraseSmallDB+0x104>)
10049cf8:	187b      	adds	r3, r7, r1
10049cfa:	7812      	ldrb	r2, [r2, #0]
10049cfc:	701a      	strb	r2, [r3, #0]
    if(id != NVMDB_id)
10049cfe:	187a      	adds	r2, r7, r1
10049d00:	4b2a      	ldr	r3, [pc, #168]	@ (10049dac <EraseSmallDB+0xfc>)
10049d02:	2083      	movs	r0, #131	@ 0x83
10049d04:	0100      	lsls	r0, r0, #4
10049d06:	181b      	adds	r3, r3, r0
10049d08:	19db      	adds	r3, r3, r7
10049d0a:	7812      	ldrb	r2, [r2, #0]
10049d0c:	781b      	ldrb	r3, [r3, #0]
10049d0e:	429a      	cmp	r2, r3
10049d10:	d02d      	beq.n	10049d6e <EraseSmallDB+0xbe>
    {
      // This is not the db to be erased. Save it.
      NVMDB_HandleInit(id, &handle);
10049d12:	2514      	movs	r5, #20
10049d14:	197a      	adds	r2, r7, r5
10049d16:	187b      	adds	r3, r7, r1
10049d18:	781b      	ldrb	r3, [r3, #0]
10049d1a:	0011      	movs	r1, r2
10049d1c:	0018      	movs	r0, r3
10049d1e:	f000 fa6d 	bl	1004a1fc <NVMDB_HandleInit>
      uint32_t offset = smallDBContainer_p->dbs[i].offset;
10049d22:	683b      	ldr	r3, [r7, #0]
10049d24:	6899      	ldr	r1, [r3, #8]
10049d26:	193b      	adds	r3, r7, r4
10049d28:	681a      	ldr	r2, [r3, #0]
10049d2a:	0013      	movs	r3, r2
10049d2c:	005b      	lsls	r3, r3, #1
10049d2e:	189b      	adds	r3, r3, r2
10049d30:	009b      	lsls	r3, r3, #2
10049d32:	18cb      	adds	r3, r1, r3
10049d34:	685b      	ldr	r3, [r3, #4]
10049d36:	4c20      	ldr	r4, [pc, #128]	@ (10049db8 <EraseSmallDB+0x108>)
10049d38:	193a      	adds	r2, r7, r4
10049d3a:	6013      	str	r3, [r2, #0]
      InitReadState(&state);
10049d3c:	260c      	movs	r6, #12
10049d3e:	19bb      	adds	r3, r7, r6
10049d40:	0018      	movs	r0, r3
10049d42:	f7ff fc55 	bl	100495f0 <InitReadState>
      LoadDBToRAM(&handle, NVM_buffer + offset, sizeof(NVM_buffer) - offset, &num_read_bytes, &state);
10049d46:	2324      	movs	r3, #36	@ 0x24
10049d48:	18fa      	adds	r2, r7, r3
10049d4a:	193b      	adds	r3, r7, r4
10049d4c:	681b      	ldr	r3, [r3, #0]
10049d4e:	18d1      	adds	r1, r2, r3
10049d50:	193b      	adds	r3, r7, r4
10049d52:	681b      	ldr	r3, [r3, #0]
10049d54:	b29b      	uxth	r3, r3
10049d56:	2280      	movs	r2, #128	@ 0x80
10049d58:	0112      	lsls	r2, r2, #4
10049d5a:	1ad3      	subs	r3, r2, r3
10049d5c:	b29a      	uxth	r2, r3
10049d5e:	2312      	movs	r3, #18
10049d60:	18fc      	adds	r4, r7, r3
10049d62:	1978      	adds	r0, r7, r5
10049d64:	19bb      	adds	r3, r7, r6
10049d66:	9300      	str	r3, [sp, #0]
10049d68:	0023      	movs	r3, r4
10049d6a:	f7ff fc52 	bl	10049612 <LoadDBToRAM>
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
10049d6e:	4a10      	ldr	r2, [pc, #64]	@ (10049db0 <EraseSmallDB+0x100>)
10049d70:	18bb      	adds	r3, r7, r2
10049d72:	681b      	ldr	r3, [r3, #0]
10049d74:	3301      	adds	r3, #1
10049d76:	18ba      	adds	r2, r7, r2
10049d78:	6013      	str	r3, [r2, #0]
10049d7a:	683b      	ldr	r3, [r7, #0]
10049d7c:	791b      	ldrb	r3, [r3, #4]
10049d7e:	001a      	movs	r2, r3
10049d80:	4b0b      	ldr	r3, [pc, #44]	@ (10049db0 <EraseSmallDB+0x100>)
10049d82:	18fb      	adds	r3, r7, r3
10049d84:	681b      	ldr	r3, [r3, #0]
10049d86:	4293      	cmp	r3, r2
10049d88:	dbab      	blt.n	10049ce2 <EraseSmallDB+0x32>
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  // Write buffer to flash
  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
10049d8a:	683b      	ldr	r3, [r7, #0]
10049d8c:	681b      	ldr	r3, [r3, #0]
10049d8e:	2280      	movs	r2, #128	@ 0x80
10049d90:	0112      	lsls	r2, r2, #4
10049d92:	2124      	movs	r1, #36	@ 0x24
10049d94:	1879      	adds	r1, r7, r1
10049d96:	0018      	movs	r0, r3
10049d98:	f7ff fbea 	bl	10049570 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
10049d9c:	2300      	movs	r3, #0
}
10049d9e:	0018      	movs	r0, r3
10049da0:	46bd      	mov	sp, r7
10049da2:	4b06      	ldr	r3, [pc, #24]	@ (10049dbc <EraseSmallDB+0x10c>)
10049da4:	449d      	add	sp, r3
10049da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049da8:	fffff7c4 	.word	0xfffff7c4
10049dac:	fffff7d7 	.word	0xfffff7d7
10049db0:	0000082c 	.word	0x0000082c
10049db4:	0000082b 	.word	0x0000082b
10049db8:	00000824 	.word	0x00000824
10049dbc:	00000834 	.word	0x00000834

10049dc0 <NVMDB_AppendRecordNoCache>:

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
10049dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
10049dc2:	b089      	sub	sp, #36	@ 0x24
10049dc4:	af02      	add	r7, sp, #8
10049dc6:	60f8      	str	r0, [r7, #12]
10049dc8:	0008      	movs	r0, r1
10049dca:	0011      	movs	r1, r2
10049dcc:	607b      	str	r3, [r7, #4]
10049dce:	230b      	movs	r3, #11
10049dd0:	18fb      	adds	r3, r7, r3
10049dd2:	1c02      	adds	r2, r0, #0
10049dd4:	701a      	strb	r2, [r3, #0]
10049dd6:	2008      	movs	r0, #8
10049dd8:	183b      	adds	r3, r7, r0
10049dda:	1c0a      	adds	r2, r1, #0
10049ddc:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
10049dde:	0001      	movs	r1, r0
10049de0:	187b      	adds	r3, r7, r1
10049de2:	881b      	ldrh	r3, [r3, #0]
10049de4:	3b01      	subs	r3, #1
10049de6:	b29b      	uxth	r3, r3
10049de8:	b21b      	sxth	r3, r3
10049dea:	2203      	movs	r2, #3
10049dec:	4313      	orrs	r3, r2
10049dee:	b21b      	sxth	r3, r3
10049df0:	b29a      	uxth	r2, r3
10049df2:	187b      	adds	r3, r7, r1
10049df4:	3201      	adds	r2, #1
10049df6:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
10049df8:	68fb      	ldr	r3, [r7, #12]
10049dfa:	685b      	ldr	r3, [r3, #4]
10049dfc:	1d5a      	adds	r2, r3, #5
10049dfe:	68fb      	ldr	r3, [r7, #12]
10049e00:	689b      	ldr	r3, [r3, #8]
10049e02:	429a      	cmp	r2, r3
10049e04:	d310      	bcc.n	10049e28 <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
10049e06:	68fb      	ldr	r3, [r7, #12]
10049e08:	781b      	ldrb	r3, [r3, #0]
10049e0a:	0019      	movs	r1, r3
10049e0c:	4a4a      	ldr	r2, [pc, #296]	@ (10049f38 <NVMDB_AppendRecordNoCache+0x178>)
10049e0e:	000b      	movs	r3, r1
10049e10:	009b      	lsls	r3, r3, #2
10049e12:	185b      	adds	r3, r3, r1
10049e14:	009b      	lsls	r3, r3, #2
10049e16:	18d3      	adds	r3, r2, r3
10049e18:	330a      	adds	r3, #10
10049e1a:	881b      	ldrh	r3, [r3, #0]
10049e1c:	2b00      	cmp	r3, #0
10049e1e:	d001      	beq.n	10049e24 <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
10049e20:	230b      	movs	r3, #11
10049e22:	e084      	b.n	10049f2e <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
10049e24:	2302      	movs	r3, #2
10049e26:	e082      	b.n	10049f2e <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10049e28:	68fb      	ldr	r3, [r7, #12]
10049e2a:	685b      	ldr	r3, [r3, #4]
10049e2c:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
10049e2e:	697b      	ldr	r3, [r7, #20]
10049e30:	781b      	ldrb	r3, [r3, #0]
10049e32:	2bff      	cmp	r3, #255	@ 0xff
10049e34:	d11c      	bne.n	10049e70 <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
10049e36:	68fb      	ldr	r3, [r7, #12]
10049e38:	689a      	ldr	r2, [r3, #8]
10049e3a:	68fb      	ldr	r3, [r7, #12]
10049e3c:	685b      	ldr	r3, [r3, #4]
10049e3e:	1ad3      	subs	r3, r2, r3
10049e40:	2280      	movs	r2, #128	@ 0x80
10049e42:	0252      	lsls	r2, r2, #9
10049e44:	4293      	cmp	r3, r2
10049e46:	d300      	bcc.n	10049e4a <NVMDB_AppendRecordNoCache+0x8a>
10049e48:	4b3c      	ldr	r3, [pc, #240]	@ (10049f3c <NVMDB_AppendRecordNoCache+0x17c>)
10049e4a:	2112      	movs	r1, #18
10049e4c:	187a      	adds	r2, r7, r1
10049e4e:	8013      	strh	r3, [r2, #0]
      break;
10049e50:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
10049e52:	2308      	movs	r3, #8
10049e54:	0018      	movs	r0, r3
10049e56:	18fb      	adds	r3, r7, r3
10049e58:	881a      	ldrh	r2, [r3, #0]
10049e5a:	2328      	movs	r3, #40	@ 0x28
10049e5c:	181b      	adds	r3, r3, r0
10049e5e:	19db      	adds	r3, r3, r7
10049e60:	881b      	ldrh	r3, [r3, #0]
10049e62:	18d3      	adds	r3, r2, r3
10049e64:	1cda      	adds	r2, r3, #3
10049e66:	187b      	adds	r3, r7, r1
10049e68:	881b      	ldrh	r3, [r3, #0]
10049e6a:	429a      	cmp	r2, r3
10049e6c:	db27      	blt.n	10049ebe <NVMDB_AppendRecordNoCache+0xfe>
10049e6e:	e015      	b.n	10049e9c <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
10049e70:	697b      	ldr	r3, [r7, #20]
10049e72:	781b      	ldrb	r3, [r3, #0]
10049e74:	2bfe      	cmp	r3, #254	@ 0xfe
10049e76:	d005      	beq.n	10049e84 <NVMDB_AppendRecordNoCache+0xc4>
10049e78:	697b      	ldr	r3, [r7, #20]
10049e7a:	781b      	ldrb	r3, [r3, #0]
10049e7c:	2b00      	cmp	r3, #0
10049e7e:	d001      	beq.n	10049e84 <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
10049e80:	2303      	movs	r3, #3
10049e82:	e054      	b.n	10049f2e <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10049e84:	68fb      	ldr	r3, [r7, #12]
10049e86:	685b      	ldr	r3, [r3, #4]
10049e88:	697a      	ldr	r2, [r7, #20]
10049e8a:	8852      	ldrh	r2, [r2, #2]
10049e8c:	3203      	adds	r2, #3
10049e8e:	2103      	movs	r1, #3
10049e90:	430a      	orrs	r2, r1
10049e92:	189b      	adds	r3, r3, r2
10049e94:	1c5a      	adds	r2, r3, #1
10049e96:	68fb      	ldr	r3, [r7, #12]
10049e98:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
10049e9a:	e7ad      	b.n	10049df8 <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
10049e9c:	68fb      	ldr	r3, [r7, #12]
10049e9e:	781b      	ldrb	r3, [r3, #0]
10049ea0:	0019      	movs	r1, r3
10049ea2:	4a25      	ldr	r2, [pc, #148]	@ (10049f38 <NVMDB_AppendRecordNoCache+0x178>)
10049ea4:	000b      	movs	r3, r1
10049ea6:	009b      	lsls	r3, r3, #2
10049ea8:	185b      	adds	r3, r3, r1
10049eaa:	009b      	lsls	r3, r3, #2
10049eac:	18d3      	adds	r3, r2, r3
10049eae:	330a      	adds	r3, #10
10049eb0:	881b      	ldrh	r3, [r3, #0]
10049eb2:	2b00      	cmp	r3, #0
10049eb4:	d001      	beq.n	10049eba <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
10049eb6:	230b      	movs	r3, #11
10049eb8:	e039      	b.n	10049f2e <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
10049eba:	2302      	movs	r3, #2
10049ebc:	e037      	b.n	10049f2e <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
10049ebe:	68fb      	ldr	r3, [r7, #12]
10049ec0:	6858      	ldr	r0, [r3, #4]
10049ec2:	2611      	movs	r6, #17
10049ec4:	19bc      	adds	r4, r7, r6
10049ec6:	687d      	ldr	r5, [r7, #4]
10049ec8:	2308      	movs	r3, #8
10049eca:	001a      	movs	r2, r3
10049ecc:	18fb      	adds	r3, r7, r3
10049ece:	881b      	ldrh	r3, [r3, #0]
10049ed0:	469c      	mov	ip, r3
10049ed2:	230b      	movs	r3, #11
10049ed4:	18fb      	adds	r3, r7, r3
10049ed6:	7819      	ldrb	r1, [r3, #0]
10049ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049eda:	9301      	str	r3, [sp, #4]
10049edc:	2328      	movs	r3, #40	@ 0x28
10049ede:	189b      	adds	r3, r3, r2
10049ee0:	19db      	adds	r3, r3, r7
10049ee2:	881b      	ldrh	r3, [r3, #0]
10049ee4:	9300      	str	r3, [sp, #0]
10049ee6:	002b      	movs	r3, r5
10049ee8:	4662      	mov	r2, ip
10049eea:	f7ff f99c 	bl	10049226 <WriteRecord>
10049eee:	0003      	movs	r3, r0
10049ef0:	7023      	strb	r3, [r4, #0]
  if(status)
10049ef2:	19bb      	adds	r3, r7, r6
10049ef4:	781b      	ldrb	r3, [r3, #0]
10049ef6:	2b00      	cmp	r3, #0
10049ef8:	d002      	beq.n	10049f00 <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
10049efa:	19bb      	adds	r3, r7, r6
10049efc:	781b      	ldrb	r3, [r3, #0]
10049efe:	e016      	b.n	10049f2e <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
10049f00:	68fb      	ldr	r3, [r7, #12]
10049f02:	781b      	ldrb	r3, [r3, #0]
10049f04:	001a      	movs	r2, r3
10049f06:	490c      	ldr	r1, [pc, #48]	@ (10049f38 <NVMDB_AppendRecordNoCache+0x178>)
10049f08:	0013      	movs	r3, r2
10049f0a:	009b      	lsls	r3, r3, #2
10049f0c:	189b      	adds	r3, r3, r2
10049f0e:	009b      	lsls	r3, r3, #2
10049f10:	18cb      	adds	r3, r1, r3
10049f12:	3308      	adds	r3, #8
10049f14:	881b      	ldrh	r3, [r3, #0]
10049f16:	3301      	adds	r3, #1
10049f18:	b298      	uxth	r0, r3
10049f1a:	4907      	ldr	r1, [pc, #28]	@ (10049f38 <NVMDB_AppendRecordNoCache+0x178>)
10049f1c:	0013      	movs	r3, r2
10049f1e:	009b      	lsls	r3, r3, #2
10049f20:	189b      	adds	r3, r3, r2
10049f22:	009b      	lsls	r3, r3, #2
10049f24:	18cb      	adds	r3, r1, r3
10049f26:	3308      	adds	r3, #8
10049f28:	1c02      	adds	r2, r0, #0
10049f2a:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10049f2c:	2300      	movs	r3, #0
}
10049f2e:	0018      	movs	r0, r3
10049f30:	46bd      	mov	sp, r7
10049f32:	b007      	add	sp, #28
10049f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049f36:	46c0      	nop			@ (mov r8, r8)
10049f38:	20000e38 	.word	0x20000e38
10049f3c:	0000ffff 	.word	0x0000ffff

10049f40 <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
10049f40:	b5b0      	push	{r4, r5, r7, lr}
10049f42:	b088      	sub	sp, #32
10049f44:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10049f46:	2300      	movs	r3, #0
10049f48:	61fb      	str	r3, [r7, #28]
10049f4a:	e0cd      	b.n	1004a0e8 <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
10049f4c:	49a8      	ldr	r1, [pc, #672]	@ (1004a1f0 <NVMDB_Init+0x2b0>)
10049f4e:	69fa      	ldr	r2, [r7, #28]
10049f50:	0013      	movs	r3, r2
10049f52:	005b      	lsls	r3, r3, #1
10049f54:	189b      	adds	r3, r3, r2
10049f56:	009b      	lsls	r3, r3, #2
10049f58:	585b      	ldr	r3, [r3, r1]
10049f5a:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10049f5c:	2300      	movs	r3, #0
10049f5e:	61bb      	str	r3, [r7, #24]
10049f60:	e0b1      	b.n	1004a0c6 <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10049f62:	49a3      	ldr	r1, [pc, #652]	@ (1004a1f0 <NVMDB_Init+0x2b0>)
10049f64:	69fa      	ldr	r2, [r7, #28]
10049f66:	0013      	movs	r3, r2
10049f68:	005b      	lsls	r3, r3, #1
10049f6a:	189b      	adds	r3, r3, r2
10049f6c:	009b      	lsls	r3, r3, #2
10049f6e:	18cb      	adds	r3, r1, r3
10049f70:	3308      	adds	r3, #8
10049f72:	6819      	ldr	r1, [r3, #0]
10049f74:	69ba      	ldr	r2, [r7, #24]
10049f76:	0013      	movs	r3, r2
10049f78:	005b      	lsls	r3, r3, #1
10049f7a:	189b      	adds	r3, r3, r2
10049f7c:	009b      	lsls	r3, r3, #2
10049f7e:	18ca      	adds	r2, r1, r3
10049f80:	2013      	movs	r0, #19
10049f82:	183b      	adds	r3, r7, r0
10049f84:	7812      	ldrb	r2, [r2, #0]
10049f86:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
10049f88:	4999      	ldr	r1, [pc, #612]	@ (1004a1f0 <NVMDB_Init+0x2b0>)
10049f8a:	69fa      	ldr	r2, [r7, #28]
10049f8c:	0013      	movs	r3, r2
10049f8e:	005b      	lsls	r3, r3, #1
10049f90:	189b      	adds	r3, r3, r2
10049f92:	009b      	lsls	r3, r3, #2
10049f94:	18cb      	adds	r3, r1, r3
10049f96:	3308      	adds	r3, #8
10049f98:	6819      	ldr	r1, [r3, #0]
10049f9a:	69ba      	ldr	r2, [r7, #24]
10049f9c:	0013      	movs	r3, r2
10049f9e:	005b      	lsls	r3, r3, #1
10049fa0:	189b      	adds	r3, r3, r2
10049fa2:	009b      	lsls	r3, r3, #2
10049fa4:	18cb      	adds	r3, r1, r3
10049fa6:	685b      	ldr	r3, [r3, #4]
10049fa8:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
10049faa:	4991      	ldr	r1, [pc, #580]	@ (1004a1f0 <NVMDB_Init+0x2b0>)
10049fac:	69fa      	ldr	r2, [r7, #28]
10049fae:	0013      	movs	r3, r2
10049fb0:	005b      	lsls	r3, r3, #1
10049fb2:	189b      	adds	r3, r3, r2
10049fb4:	009b      	lsls	r3, r3, #2
10049fb6:	18cb      	adds	r3, r1, r3
10049fb8:	3308      	adds	r3, #8
10049fba:	6819      	ldr	r1, [r3, #0]
10049fbc:	69ba      	ldr	r2, [r7, #24]
10049fbe:	0013      	movs	r3, r2
10049fc0:	005b      	lsls	r3, r3, #1
10049fc2:	189b      	adds	r3, r3, r2
10049fc4:	009b      	lsls	r3, r3, #2
10049fc6:	18ca      	adds	r2, r1, r3
10049fc8:	1dbb      	adds	r3, r7, #6
10049fca:	8912      	ldrh	r2, [r2, #8]
10049fcc:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
10049fce:	183b      	adds	r3, r7, r0
10049fd0:	781a      	ldrb	r2, [r3, #0]
10049fd2:	4988      	ldr	r1, [pc, #544]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
10049fd4:	0013      	movs	r3, r2
10049fd6:	009b      	lsls	r3, r3, #2
10049fd8:	189b      	adds	r3, r3, r2
10049fda:	009b      	lsls	r3, r3, #2
10049fdc:	585b      	ldr	r3, [r3, r1]
10049fde:	2b00      	cmp	r3, #0
10049fe0:	d103      	bne.n	10049fea <NVMDB_Init+0xaa>
10049fe2:	183b      	adds	r3, r7, r0
10049fe4:	781b      	ldrb	r3, [r3, #0]
10049fe6:	2b01      	cmp	r3, #1
10049fe8:	d901      	bls.n	10049fee <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
10049fea:	2301      	movs	r3, #1
10049fec:	e0fc      	b.n	1004a1e8 <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
10049fee:	2413      	movs	r4, #19
10049ff0:	193b      	adds	r3, r7, r4
10049ff2:	781a      	ldrb	r2, [r3, #0]
10049ff4:	68f9      	ldr	r1, [r7, #12]
10049ff6:	68bb      	ldr	r3, [r7, #8]
10049ff8:	18c8      	adds	r0, r1, r3
10049ffa:	497e      	ldr	r1, [pc, #504]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
10049ffc:	0013      	movs	r3, r2
10049ffe:	009b      	lsls	r3, r3, #2
1004a000:	189b      	adds	r3, r3, r2
1004a002:	009b      	lsls	r3, r3, #2
1004a004:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
1004a006:	497a      	ldr	r1, [pc, #488]	@ (1004a1f0 <NVMDB_Init+0x2b0>)
1004a008:	69fa      	ldr	r2, [r7, #28]
1004a00a:	0013      	movs	r3, r2
1004a00c:	005b      	lsls	r3, r3, #1
1004a00e:	189b      	adds	r3, r3, r2
1004a010:	009b      	lsls	r3, r3, #2
1004a012:	18cb      	adds	r3, r1, r3
1004a014:	3304      	adds	r3, #4
1004a016:	781b      	ldrb	r3, [r3, #0]
1004a018:	3b01      	subs	r3, #1
1004a01a:	69ba      	ldr	r2, [r7, #24]
1004a01c:	429a      	cmp	r2, r3
1004a01e:	d10e      	bne.n	1004a03e <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
1004a020:	193b      	adds	r3, r7, r4
1004a022:	781a      	ldrb	r2, [r3, #0]
1004a024:	68fb      	ldr	r3, [r7, #12]
1004a026:	2180      	movs	r1, #128	@ 0x80
1004a028:	0109      	lsls	r1, r1, #4
1004a02a:	1859      	adds	r1, r3, r1
1004a02c:	4871      	ldr	r0, [pc, #452]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
1004a02e:	0013      	movs	r3, r2
1004a030:	009b      	lsls	r3, r3, #2
1004a032:	189b      	adds	r3, r3, r2
1004a034:	009b      	lsls	r3, r3, #2
1004a036:	18c3      	adds	r3, r0, r3
1004a038:	3304      	adds	r3, #4
1004a03a:	6019      	str	r1, [r3, #0]
1004a03c:	e01d      	b.n	1004a07a <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
1004a03e:	496c      	ldr	r1, [pc, #432]	@ (1004a1f0 <NVMDB_Init+0x2b0>)
1004a040:	69fa      	ldr	r2, [r7, #28]
1004a042:	0013      	movs	r3, r2
1004a044:	005b      	lsls	r3, r3, #1
1004a046:	189b      	adds	r3, r3, r2
1004a048:	009b      	lsls	r3, r3, #2
1004a04a:	18cb      	adds	r3, r1, r3
1004a04c:	3308      	adds	r3, #8
1004a04e:	6819      	ldr	r1, [r3, #0]
1004a050:	69bb      	ldr	r3, [r7, #24]
1004a052:	1c5a      	adds	r2, r3, #1
1004a054:	0013      	movs	r3, r2
1004a056:	005b      	lsls	r3, r3, #1
1004a058:	189b      	adds	r3, r3, r2
1004a05a:	009b      	lsls	r3, r3, #2
1004a05c:	18cb      	adds	r3, r1, r3
1004a05e:	6859      	ldr	r1, [r3, #4]
1004a060:	2313      	movs	r3, #19
1004a062:	18fb      	adds	r3, r7, r3
1004a064:	781a      	ldrb	r2, [r3, #0]
1004a066:	68fb      	ldr	r3, [r7, #12]
1004a068:	18c9      	adds	r1, r1, r3
1004a06a:	4862      	ldr	r0, [pc, #392]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
1004a06c:	0013      	movs	r3, r2
1004a06e:	009b      	lsls	r3, r3, #2
1004a070:	189b      	adds	r3, r3, r2
1004a072:	009b      	lsls	r3, r3, #2
1004a074:	18c3      	adds	r3, r0, r3
1004a076:	3304      	adds	r3, #4
1004a078:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
1004a07a:	2013      	movs	r0, #19
1004a07c:	183b      	adds	r3, r7, r0
1004a07e:	781a      	ldrb	r2, [r3, #0]
1004a080:	495c      	ldr	r1, [pc, #368]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
1004a082:	0013      	movs	r3, r2
1004a084:	009b      	lsls	r3, r3, #2
1004a086:	189b      	adds	r3, r3, r2
1004a088:	009b      	lsls	r3, r3, #2
1004a08a:	18cb      	adds	r3, r1, r3
1004a08c:	3310      	adds	r3, #16
1004a08e:	1dba      	adds	r2, r7, #6
1004a090:	8812      	ldrh	r2, [r2, #0]
1004a092:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
1004a094:	183b      	adds	r3, r7, r0
1004a096:	781a      	ldrb	r2, [r3, #0]
1004a098:	0013      	movs	r3, r2
1004a09a:	009b      	lsls	r3, r3, #2
1004a09c:	189b      	adds	r3, r3, r2
1004a09e:	009b      	lsls	r3, r3, #2
1004a0a0:	4a54      	ldr	r2, [pc, #336]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
1004a0a2:	189b      	adds	r3, r3, r2
1004a0a4:	2512      	movs	r5, #18
1004a0a6:	197c      	adds	r4, r7, r5
1004a0a8:	0018      	movs	r0, r3
1004a0aa:	f7fe ff3b 	bl	10048f24 <NVMDB_get_info>
1004a0ae:	0003      	movs	r3, r0
1004a0b0:	7023      	strb	r3, [r4, #0]
      if(status)
1004a0b2:	197b      	adds	r3, r7, r5
1004a0b4:	781b      	ldrb	r3, [r3, #0]
1004a0b6:	2b00      	cmp	r3, #0
1004a0b8:	d002      	beq.n	1004a0c0 <NVMDB_Init+0x180>
      {
        return status;
1004a0ba:	197b      	adds	r3, r7, r5
1004a0bc:	781b      	ldrb	r3, [r3, #0]
1004a0be:	e093      	b.n	1004a1e8 <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004a0c0:	69bb      	ldr	r3, [r7, #24]
1004a0c2:	3301      	adds	r3, #1
1004a0c4:	61bb      	str	r3, [r7, #24]
1004a0c6:	494a      	ldr	r1, [pc, #296]	@ (1004a1f0 <NVMDB_Init+0x2b0>)
1004a0c8:	69fa      	ldr	r2, [r7, #28]
1004a0ca:	0013      	movs	r3, r2
1004a0cc:	005b      	lsls	r3, r3, #1
1004a0ce:	189b      	adds	r3, r3, r2
1004a0d0:	009b      	lsls	r3, r3, #2
1004a0d2:	18cb      	adds	r3, r1, r3
1004a0d4:	3304      	adds	r3, #4
1004a0d6:	781b      	ldrb	r3, [r3, #0]
1004a0d8:	001a      	movs	r2, r3
1004a0da:	69bb      	ldr	r3, [r7, #24]
1004a0dc:	4293      	cmp	r3, r2
1004a0de:	da00      	bge.n	1004a0e2 <NVMDB_Init+0x1a2>
1004a0e0:	e73f      	b.n	10049f62 <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004a0e2:	69fb      	ldr	r3, [r7, #28]
1004a0e4:	3301      	adds	r3, #1
1004a0e6:	61fb      	str	r3, [r7, #28]
1004a0e8:	69fb      	ldr	r3, [r7, #28]
1004a0ea:	2b00      	cmp	r3, #0
1004a0ec:	da00      	bge.n	1004a0f0 <NVMDB_Init+0x1b0>
1004a0ee:	e72d      	b.n	10049f4c <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004a0f0:	2300      	movs	r3, #0
1004a0f2:	617b      	str	r3, [r7, #20]
1004a0f4:	e074      	b.n	1004a1e0 <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
1004a0f6:	2413      	movs	r4, #19
1004a0f8:	1939      	adds	r1, r7, r4
1004a0fa:	483f      	ldr	r0, [pc, #252]	@ (1004a1f8 <NVMDB_Init+0x2b8>)
1004a0fc:	697a      	ldr	r2, [r7, #20]
1004a0fe:	0013      	movs	r3, r2
1004a100:	005b      	lsls	r3, r3, #1
1004a102:	189b      	adds	r3, r3, r2
1004a104:	009b      	lsls	r3, r3, #2
1004a106:	18c3      	adds	r3, r0, r3
1004a108:	3306      	adds	r3, #6
1004a10a:	781b      	ldrb	r3, [r3, #0]
1004a10c:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
1004a10e:	193b      	adds	r3, r7, r4
1004a110:	781a      	ldrb	r2, [r3, #0]
1004a112:	4938      	ldr	r1, [pc, #224]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
1004a114:	0013      	movs	r3, r2
1004a116:	009b      	lsls	r3, r3, #2
1004a118:	189b      	adds	r3, r3, r2
1004a11a:	009b      	lsls	r3, r3, #2
1004a11c:	585b      	ldr	r3, [r3, r1]
1004a11e:	2b00      	cmp	r3, #0
1004a120:	d103      	bne.n	1004a12a <NVMDB_Init+0x1ea>
1004a122:	193b      	adds	r3, r7, r4
1004a124:	781b      	ldrb	r3, [r3, #0]
1004a126:	2b01      	cmp	r3, #1
1004a128:	d901      	bls.n	1004a12e <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
1004a12a:	2301      	movs	r3, #1
1004a12c:	e05c      	b.n	1004a1e8 <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
1004a12e:	2413      	movs	r4, #19
1004a130:	193b      	adds	r3, r7, r4
1004a132:	781a      	ldrb	r2, [r3, #0]
1004a134:	4830      	ldr	r0, [pc, #192]	@ (1004a1f8 <NVMDB_Init+0x2b8>)
1004a136:	6979      	ldr	r1, [r7, #20]
1004a138:	000b      	movs	r3, r1
1004a13a:	005b      	lsls	r3, r3, #1
1004a13c:	185b      	adds	r3, r3, r1
1004a13e:	009b      	lsls	r3, r3, #2
1004a140:	5818      	ldr	r0, [r3, r0]
1004a142:	492c      	ldr	r1, [pc, #176]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
1004a144:	0013      	movs	r3, r2
1004a146:	009b      	lsls	r3, r3, #2
1004a148:	189b      	adds	r3, r3, r2
1004a14a:	009b      	lsls	r3, r3, #2
1004a14c:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
1004a14e:	492a      	ldr	r1, [pc, #168]	@ (1004a1f8 <NVMDB_Init+0x2b8>)
1004a150:	697a      	ldr	r2, [r7, #20]
1004a152:	0013      	movs	r3, r2
1004a154:	005b      	lsls	r3, r3, #1
1004a156:	189b      	adds	r3, r3, r2
1004a158:	009b      	lsls	r3, r3, #2
1004a15a:	5859      	ldr	r1, [r3, r1]
1004a15c:	4826      	ldr	r0, [pc, #152]	@ (1004a1f8 <NVMDB_Init+0x2b8>)
1004a15e:	697a      	ldr	r2, [r7, #20]
1004a160:	0013      	movs	r3, r2
1004a162:	005b      	lsls	r3, r3, #1
1004a164:	189b      	adds	r3, r3, r2
1004a166:	009b      	lsls	r3, r3, #2
1004a168:	18c3      	adds	r3, r0, r3
1004a16a:	3304      	adds	r3, #4
1004a16c:	881b      	ldrh	r3, [r3, #0]
1004a16e:	0018      	movs	r0, r3
1004a170:	193b      	adds	r3, r7, r4
1004a172:	781a      	ldrb	r2, [r3, #0]
1004a174:	1809      	adds	r1, r1, r0
1004a176:	481f      	ldr	r0, [pc, #124]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
1004a178:	0013      	movs	r3, r2
1004a17a:	009b      	lsls	r3, r3, #2
1004a17c:	189b      	adds	r3, r3, r2
1004a17e:	009b      	lsls	r3, r3, #2
1004a180:	18c3      	adds	r3, r0, r3
1004a182:	3304      	adds	r3, #4
1004a184:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
1004a186:	193b      	adds	r3, r7, r4
1004a188:	781a      	ldrb	r2, [r3, #0]
1004a18a:	481b      	ldr	r0, [pc, #108]	@ (1004a1f8 <NVMDB_Init+0x2b8>)
1004a18c:	6979      	ldr	r1, [r7, #20]
1004a18e:	000b      	movs	r3, r1
1004a190:	005b      	lsls	r3, r3, #1
1004a192:	185b      	adds	r3, r3, r1
1004a194:	009b      	lsls	r3, r3, #2
1004a196:	18c3      	adds	r3, r0, r3
1004a198:	3308      	adds	r3, #8
1004a19a:	8818      	ldrh	r0, [r3, #0]
1004a19c:	4915      	ldr	r1, [pc, #84]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
1004a19e:	0013      	movs	r3, r2
1004a1a0:	009b      	lsls	r3, r3, #2
1004a1a2:	189b      	adds	r3, r3, r2
1004a1a4:	009b      	lsls	r3, r3, #2
1004a1a6:	18cb      	adds	r3, r1, r3
1004a1a8:	3310      	adds	r3, #16
1004a1aa:	1c02      	adds	r2, r0, #0
1004a1ac:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
1004a1ae:	193b      	adds	r3, r7, r4
1004a1b0:	781a      	ldrb	r2, [r3, #0]
1004a1b2:	0013      	movs	r3, r2
1004a1b4:	009b      	lsls	r3, r3, #2
1004a1b6:	189b      	adds	r3, r3, r2
1004a1b8:	009b      	lsls	r3, r3, #2
1004a1ba:	4a0e      	ldr	r2, [pc, #56]	@ (1004a1f4 <NVMDB_Init+0x2b4>)
1004a1bc:	189b      	adds	r3, r3, r2
1004a1be:	2512      	movs	r5, #18
1004a1c0:	197c      	adds	r4, r7, r5
1004a1c2:	0018      	movs	r0, r3
1004a1c4:	f7fe feae 	bl	10048f24 <NVMDB_get_info>
1004a1c8:	0003      	movs	r3, r0
1004a1ca:	7023      	strb	r3, [r4, #0]
    if(status)
1004a1cc:	197b      	adds	r3, r7, r5
1004a1ce:	781b      	ldrb	r3, [r3, #0]
1004a1d0:	2b00      	cmp	r3, #0
1004a1d2:	d002      	beq.n	1004a1da <NVMDB_Init+0x29a>
    {
      return status;
1004a1d4:	197b      	adds	r3, r7, r5
1004a1d6:	781b      	ldrb	r3, [r3, #0]
1004a1d8:	e006      	b.n	1004a1e8 <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004a1da:	697b      	ldr	r3, [r7, #20]
1004a1dc:	3301      	adds	r3, #1
1004a1de:	617b      	str	r3, [r7, #20]
1004a1e0:	697b      	ldr	r3, [r7, #20]
1004a1e2:	2b01      	cmp	r3, #1
1004a1e4:	dd87      	ble.n	1004a0f6 <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
1004a1e6:	2300      	movs	r3, #0
}
1004a1e8:	0018      	movs	r0, r3
1004a1ea:	46bd      	mov	sp, r7
1004a1ec:	b008      	add	sp, #32
1004a1ee:	bdb0      	pop	{r4, r5, r7, pc}
1004a1f0:	20000e64 	.word	0x20000e64
1004a1f4:	20000e38 	.word	0x20000e38
1004a1f8:	1006cd20 	.word	0x1006cd20

1004a1fc <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
1004a1fc:	b580      	push	{r7, lr}
1004a1fe:	b082      	sub	sp, #8
1004a200:	af00      	add	r7, sp, #0
1004a202:	0002      	movs	r2, r0
1004a204:	6039      	str	r1, [r7, #0]
1004a206:	1dfb      	adds	r3, r7, #7
1004a208:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
1004a20a:	1dfb      	adds	r3, r7, #7
1004a20c:	781b      	ldrb	r3, [r3, #0]
1004a20e:	2b01      	cmp	r3, #1
1004a210:	d901      	bls.n	1004a216 <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
1004a212:	2301      	movs	r3, #1
1004a214:	e020      	b.n	1004a258 <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
1004a216:	1dfb      	adds	r3, r7, #7
1004a218:	781a      	ldrb	r2, [r3, #0]
1004a21a:	4911      	ldr	r1, [pc, #68]	@ (1004a260 <NVMDB_HandleInit+0x64>)
1004a21c:	0013      	movs	r3, r2
1004a21e:	009b      	lsls	r3, r3, #2
1004a220:	189b      	adds	r3, r3, r2
1004a222:	009b      	lsls	r3, r3, #2
1004a224:	585a      	ldr	r2, [r3, r1]
1004a226:	683b      	ldr	r3, [r7, #0]
1004a228:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
1004a22a:	1dfb      	adds	r3, r7, #7
1004a22c:	781a      	ldrb	r2, [r3, #0]
1004a22e:	490c      	ldr	r1, [pc, #48]	@ (1004a260 <NVMDB_HandleInit+0x64>)
1004a230:	0013      	movs	r3, r2
1004a232:	009b      	lsls	r3, r3, #2
1004a234:	189b      	adds	r3, r3, r2
1004a236:	009b      	lsls	r3, r3, #2
1004a238:	18cb      	adds	r3, r1, r3
1004a23a:	3304      	adds	r3, #4
1004a23c:	681a      	ldr	r2, [r3, #0]
1004a23e:	683b      	ldr	r3, [r7, #0]
1004a240:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
1004a242:	683b      	ldr	r3, [r7, #0]
1004a244:	2201      	movs	r2, #1
1004a246:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
1004a248:	683b      	ldr	r3, [r7, #0]
1004a24a:	1dfa      	adds	r2, r7, #7
1004a24c:	7812      	ldrb	r2, [r2, #0]
1004a24e:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
1004a250:	683b      	ldr	r3, [r7, #0]
1004a252:	2200      	movs	r2, #0
1004a254:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
1004a256:	2300      	movs	r3, #0
}
1004a258:	0018      	movs	r0, r3
1004a25a:	46bd      	mov	sp, r7
1004a25c:	b002      	add	sp, #8
1004a25e:	bd80      	pop	{r7, pc}
1004a260:	20000e38 	.word	0x20000e38

1004a264 <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004a264:	b590      	push	{r4, r7, lr}
1004a266:	b089      	sub	sp, #36	@ 0x24
1004a268:	af04      	add	r7, sp, #16
1004a26a:	60f8      	str	r0, [r7, #12]
1004a26c:	0008      	movs	r0, r1
1004a26e:	0011      	movs	r1, r2
1004a270:	607b      	str	r3, [r7, #4]
1004a272:	230b      	movs	r3, #11
1004a274:	18fb      	adds	r3, r7, r3
1004a276:	1c02      	adds	r2, r0, #0
1004a278:	701a      	strb	r2, [r3, #0]
1004a27a:	2308      	movs	r3, #8
1004a27c:	18fb      	adds	r3, r7, r3
1004a27e:	1c0a      	adds	r2, r1, #0
1004a280:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004a282:	68fb      	ldr	r3, [r7, #12]
1004a284:	781b      	ldrb	r3, [r3, #0]
1004a286:	0019      	movs	r1, r3
1004a288:	4a12      	ldr	r2, [pc, #72]	@ (1004a2d4 <NVMDB_ReadNextRecord+0x70>)
1004a28a:	000b      	movs	r3, r1
1004a28c:	009b      	lsls	r3, r3, #2
1004a28e:	185b      	adds	r3, r3, r1
1004a290:	009b      	lsls	r3, r3, #2
1004a292:	18d3      	adds	r3, r2, r3
1004a294:	330e      	adds	r3, #14
1004a296:	781b      	ldrb	r3, [r3, #0]
1004a298:	2b00      	cmp	r3, #0
1004a29a:	d001      	beq.n	1004a2a0 <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
1004a29c:	230a      	movs	r3, #10
1004a29e:	e015      	b.n	1004a2cc <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
1004a2a0:	687c      	ldr	r4, [r7, #4]
1004a2a2:	2308      	movs	r3, #8
1004a2a4:	18fb      	adds	r3, r7, r3
1004a2a6:	881a      	ldrh	r2, [r3, #0]
1004a2a8:	230b      	movs	r3, #11
1004a2aa:	18fb      	adds	r3, r7, r3
1004a2ac:	7819      	ldrb	r1, [r3, #0]
1004a2ae:	68f8      	ldr	r0, [r7, #12]
1004a2b0:	2300      	movs	r3, #0
1004a2b2:	9303      	str	r3, [sp, #12]
1004a2b4:	2300      	movs	r3, #0
1004a2b6:	9302      	str	r3, [sp, #8]
1004a2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a2ba:	9301      	str	r3, [sp, #4]
1004a2bc:	2320      	movs	r3, #32
1004a2be:	18fb      	adds	r3, r7, r3
1004a2c0:	881b      	ldrh	r3, [r3, #0]
1004a2c2:	9300      	str	r3, [sp, #0]
1004a2c4:	0023      	movs	r3, r4
1004a2c6:	f7fe fef9 	bl	100490bc <ReadNextRecordNoLock>
1004a2ca:	0003      	movs	r3, r0
}
1004a2cc:	0018      	movs	r0, r3
1004a2ce:	46bd      	mov	sp, r7
1004a2d0:	b005      	add	sp, #20
1004a2d2:	bd90      	pop	{r4, r7, pc}
1004a2d4:	20000e38 	.word	0x20000e38

1004a2d8 <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004a2d8:	b590      	push	{r4, r7, lr}
1004a2da:	b087      	sub	sp, #28
1004a2dc:	af02      	add	r7, sp, #8
1004a2de:	60f8      	str	r0, [r7, #12]
1004a2e0:	0008      	movs	r0, r1
1004a2e2:	607a      	str	r2, [r7, #4]
1004a2e4:	0019      	movs	r1, r3
1004a2e6:	230a      	movs	r3, #10
1004a2e8:	18fb      	adds	r3, r7, r3
1004a2ea:	1c02      	adds	r2, r0, #0
1004a2ec:	801a      	strh	r2, [r3, #0]
1004a2ee:	2308      	movs	r3, #8
1004a2f0:	18fb      	adds	r3, r7, r3
1004a2f2:	1c0a      	adds	r2, r1, #0
1004a2f4:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004a2f6:	68fb      	ldr	r3, [r7, #12]
1004a2f8:	781b      	ldrb	r3, [r3, #0]
1004a2fa:	0019      	movs	r1, r3
1004a2fc:	4a0f      	ldr	r2, [pc, #60]	@ (1004a33c <NVMDB_ReadCurrentRecord+0x64>)
1004a2fe:	000b      	movs	r3, r1
1004a300:	009b      	lsls	r3, r3, #2
1004a302:	185b      	adds	r3, r3, r1
1004a304:	009b      	lsls	r3, r3, #2
1004a306:	18d3      	adds	r3, r2, r3
1004a308:	330e      	adds	r3, #14
1004a30a:	781b      	ldrb	r3, [r3, #0]
1004a30c:	2b00      	cmp	r3, #0
1004a30e:	d001      	beq.n	1004a314 <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
1004a310:	230a      	movs	r3, #10
1004a312:	e00f      	b.n	1004a334 <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
1004a314:	2308      	movs	r3, #8
1004a316:	18fb      	adds	r3, r7, r3
1004a318:	881c      	ldrh	r4, [r3, #0]
1004a31a:	687a      	ldr	r2, [r7, #4]
1004a31c:	230a      	movs	r3, #10
1004a31e:	18fb      	adds	r3, r7, r3
1004a320:	8819      	ldrh	r1, [r3, #0]
1004a322:	68f8      	ldr	r0, [r7, #12]
1004a324:	2300      	movs	r3, #0
1004a326:	9301      	str	r3, [sp, #4]
1004a328:	6a3b      	ldr	r3, [r7, #32]
1004a32a:	9300      	str	r3, [sp, #0]
1004a32c:	0023      	movs	r3, r4
1004a32e:	f7ff f81c 	bl	1004936a <ReadCurrentRecordNoLock>
1004a332:	0003      	movs	r3, r0
}
1004a334:	0018      	movs	r0, r3
1004a336:	46bd      	mov	sp, r7
1004a338:	b005      	add	sp, #20
1004a33a:	bd90      	pop	{r4, r7, pc}
1004a33c:	20000e38 	.word	0x20000e38

1004a340 <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
1004a340:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a342:	46c6      	mov	lr, r8
1004a344:	b500      	push	{lr}
1004a346:	b088      	sub	sp, #32
1004a348:	af02      	add	r7, sp, #8
1004a34a:	60f8      	str	r0, [r7, #12]
1004a34c:	0008      	movs	r0, r1
1004a34e:	0011      	movs	r1, r2
1004a350:	607b      	str	r3, [r7, #4]
1004a352:	230b      	movs	r3, #11
1004a354:	001c      	movs	r4, r3
1004a356:	18fb      	adds	r3, r7, r3
1004a358:	1c02      	adds	r2, r0, #0
1004a35a:	701a      	strb	r2, [r3, #0]
1004a35c:	2008      	movs	r0, #8
1004a35e:	183b      	adds	r3, r7, r0
1004a360:	1c0a      	adds	r2, r1, #0
1004a362:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
1004a364:	2617      	movs	r6, #23
1004a366:	46b0      	mov	r8, r6
1004a368:	44b8      	add	r8, r7
1004a36a:	687d      	ldr	r5, [r7, #4]
1004a36c:	183b      	adds	r3, r7, r0
1004a36e:	881a      	ldrh	r2, [r3, #0]
1004a370:	0023      	movs	r3, r4
1004a372:	18fb      	adds	r3, r7, r3
1004a374:	7819      	ldrb	r1, [r3, #0]
1004a376:	68f8      	ldr	r0, [r7, #12]
1004a378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004a37a:	9301      	str	r3, [sp, #4]
1004a37c:	2328      	movs	r3, #40	@ 0x28
1004a37e:	2408      	movs	r4, #8
1004a380:	191b      	adds	r3, r3, r4
1004a382:	19db      	adds	r3, r3, r7
1004a384:	881b      	ldrh	r3, [r3, #0]
1004a386:	9300      	str	r3, [sp, #0]
1004a388:	002b      	movs	r3, r5
1004a38a:	f7ff fd19 	bl	10049dc0 <NVMDB_AppendRecordNoCache>
1004a38e:	0003      	movs	r3, r0
1004a390:	4642      	mov	r2, r8
1004a392:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
1004a394:	19bb      	adds	r3, r7, r6
1004a396:	781b      	ldrb	r3, [r3, #0]
1004a398:	2b00      	cmp	r3, #0
1004a39a:	d002      	beq.n	1004a3a2 <NVMDB_AppendRecord+0x62>
  {
    return status;
1004a39c:	19bb      	adds	r3, r7, r6
1004a39e:	781b      	ldrb	r3, [r3, #0]
1004a3a0:	e02c      	b.n	1004a3fc <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
1004a3a2:	68fb      	ldr	r3, [r7, #12]
1004a3a4:	781b      	ldrb	r3, [r3, #0]
1004a3a6:	0019      	movs	r1, r3
1004a3a8:	4a17      	ldr	r2, [pc, #92]	@ (1004a408 <NVMDB_AppendRecord+0xc8>)
1004a3aa:	000b      	movs	r3, r1
1004a3ac:	009b      	lsls	r3, r3, #2
1004a3ae:	185b      	adds	r3, r3, r1
1004a3b0:	009b      	lsls	r3, r3, #2
1004a3b2:	18d3      	adds	r3, r2, r3
1004a3b4:	330c      	adds	r3, #12
1004a3b6:	881a      	ldrh	r2, [r3, #0]
1004a3b8:	2308      	movs	r3, #8
1004a3ba:	0018      	movs	r0, r3
1004a3bc:	18f9      	adds	r1, r7, r3
1004a3be:	2328      	movs	r3, #40	@ 0x28
1004a3c0:	181b      	adds	r3, r3, r0
1004a3c2:	19db      	adds	r3, r3, r7
1004a3c4:	8809      	ldrh	r1, [r1, #0]
1004a3c6:	881b      	ldrh	r3, [r3, #0]
1004a3c8:	18cb      	adds	r3, r1, r3
1004a3ca:	b29b      	uxth	r3, r3
1004a3cc:	3b01      	subs	r3, #1
1004a3ce:	b29b      	uxth	r3, r3
1004a3d0:	b21b      	sxth	r3, r3
1004a3d2:	2103      	movs	r1, #3
1004a3d4:	430b      	orrs	r3, r1
1004a3d6:	b21b      	sxth	r3, r3
1004a3d8:	b29b      	uxth	r3, r3
1004a3da:	1ad3      	subs	r3, r2, r3
1004a3dc:	b29b      	uxth	r3, r3
1004a3de:	68fa      	ldr	r2, [r7, #12]
1004a3e0:	7812      	ldrb	r2, [r2, #0]
1004a3e2:	0011      	movs	r1, r2
1004a3e4:	3b05      	subs	r3, #5
1004a3e6:	b298      	uxth	r0, r3
1004a3e8:	4a07      	ldr	r2, [pc, #28]	@ (1004a408 <NVMDB_AppendRecord+0xc8>)
1004a3ea:	000b      	movs	r3, r1
1004a3ec:	009b      	lsls	r3, r3, #2
1004a3ee:	185b      	adds	r3, r3, r1
1004a3f0:	009b      	lsls	r3, r3, #2
1004a3f2:	18d3      	adds	r3, r2, r3
1004a3f4:	330c      	adds	r3, #12
1004a3f6:	1c02      	adds	r2, r0, #0
1004a3f8:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004a3fa:	2300      	movs	r3, #0
}
1004a3fc:	0018      	movs	r0, r3
1004a3fe:	46bd      	mov	sp, r7
1004a400:	b006      	add	sp, #24
1004a402:	bc80      	pop	{r7}
1004a404:	46b8      	mov	r8, r7
1004a406:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a408:	20000e38 	.word	0x20000e38

1004a40c <NVMDB_DeleteRecord>:
 *
 * @param[in,out] handle_p Handle pointing to the record to be deleted.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_DeleteRecord(const NVMDB_HandleType *handle_p)
{
1004a40c:	b580      	push	{r7, lr}
1004a40e:	b082      	sub	sp, #8
1004a410:	af00      	add	r7, sp, #0
1004a412:	6078      	str	r0, [r7, #4]
  /* No time to complete the operation immediately.  */
  return ScheduleDeleteOperation(handle_p->id, handle_p->address);

#else /* NVM_CACHE */

  return NVMDB_DeleteRecordNoCache(handle_p);
1004a414:	687b      	ldr	r3, [r7, #4]
1004a416:	0018      	movs	r0, r3
1004a418:	f7ff f828 	bl	1004946c <NVMDB_DeleteRecordNoCache>
1004a41c:	0003      	movs	r3, r0

#endif
}
1004a41e:	0018      	movs	r0, r3
1004a420:	46bd      	mov	sp, r7
1004a422:	b002      	add	sp, #8
1004a424:	bd80      	pop	{r7, pc}
	...

1004a428 <NVMDB_Erase>:
 *
 * @param      NVMDB_id The ID of the record to be erased.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Erase(NVMDB_IdType NVMDB_id)
{
1004a428:	b5b0      	push	{r4, r5, r7, lr}
1004a42a:	b08c      	sub	sp, #48	@ 0x30
1004a42c:	af00      	add	r7, sp, #0
1004a42e:	0002      	movs	r2, r0
1004a430:	1dfb      	adds	r3, r7, #7
1004a432:	701a      	strb	r2, [r3, #0]
  {
    return NVMDB_STATUS_CACHE_OP_PENDING;
  }
#endif

  type = GetDBType(NVMDB_id, &smallDBContainer_p);
1004a434:	252b      	movs	r5, #43	@ 0x2b
1004a436:	197c      	adds	r4, r7, r5
1004a438:	2318      	movs	r3, #24
1004a43a:	18fa      	adds	r2, r7, r3
1004a43c:	1dfb      	adds	r3, r7, #7
1004a43e:	781b      	ldrb	r3, [r3, #0]
1004a440:	0011      	movs	r1, r2
1004a442:	0018      	movs	r0, r3
1004a444:	f7ff fbc6 	bl	10049bd4 <GetDBType>
1004a448:	0003      	movs	r3, r0
1004a44a:	7023      	strb	r3, [r4, #0]

  if(type == LARGE_DB)
1004a44c:	197b      	adds	r3, r7, r5
1004a44e:	781b      	ldrb	r3, [r3, #0]
1004a450:	2b02      	cmp	r3, #2
1004a452:	d146      	bne.n	1004a4e2 <NVMDB_Erase+0xba>
  {
    uint8_t page_num_start, num_pages;
    uint32_t start_address = DBInfo[NVMDB_id].start_address;
1004a454:	1dfb      	adds	r3, r7, #7
1004a456:	781a      	ldrb	r2, [r3, #0]
1004a458:	4942      	ldr	r1, [pc, #264]	@ (1004a564 <NVMDB_Erase+0x13c>)
1004a45a:	0013      	movs	r3, r2
1004a45c:	009b      	lsls	r3, r3, #2
1004a45e:	189b      	adds	r3, r3, r2
1004a460:	009b      	lsls	r3, r3, #2
1004a462:	585b      	ldr	r3, [r3, r1]
1004a464:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t end_address = DBInfo[NVMDB_id].end_address;
1004a466:	1dfb      	adds	r3, r7, #7
1004a468:	781a      	ldrb	r2, [r3, #0]
1004a46a:	493e      	ldr	r1, [pc, #248]	@ (1004a564 <NVMDB_Erase+0x13c>)
1004a46c:	0013      	movs	r3, r2
1004a46e:	009b      	lsls	r3, r3, #2
1004a470:	189b      	adds	r3, r3, r2
1004a472:	009b      	lsls	r3, r3, #2
1004a474:	18cb      	adds	r3, r1, r3
1004a476:	3304      	adds	r3, #4
1004a478:	681b      	ldr	r3, [r3, #0]
1004a47a:	623b      	str	r3, [r7, #32]

    page_num_start = (start_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a47e:	4a3a      	ldr	r2, [pc, #232]	@ (1004a568 <NVMDB_Erase+0x140>)
1004a480:	4694      	mov	ip, r2
1004a482:	4463      	add	r3, ip
1004a484:	0ada      	lsrs	r2, r3, #11
1004a486:	201f      	movs	r0, #31
1004a488:	183b      	adds	r3, r7, r0
1004a48a:	701a      	strb	r2, [r3, #0]
    num_pages = (ROUNDPAGE_R(end_address) - start_address) / PAGE_SIZE;
1004a48c:	6a3b      	ldr	r3, [r7, #32]
1004a48e:	3b01      	subs	r3, #1
1004a490:	4a36      	ldr	r2, [pc, #216]	@ (1004a56c <NVMDB_Erase+0x144>)
1004a492:	431a      	orrs	r2, r3
1004a494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a496:	1ad3      	subs	r3, r2, r3
1004a498:	3301      	adds	r3, #1
1004a49a:	0ada      	lsrs	r2, r3, #11
1004a49c:	241e      	movs	r4, #30
1004a49e:	193b      	adds	r3, r7, r4
1004a4a0:	701a      	strb	r2, [r3, #0]
      return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
    }

#else

    NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
1004a4a2:	210c      	movs	r1, #12
1004a4a4:	187b      	adds	r3, r7, r1
1004a4a6:	2200      	movs	r2, #0
1004a4a8:	601a      	str	r2, [r3, #0]
1004a4aa:	183b      	adds	r3, r7, r0
1004a4ac:	781a      	ldrb	r2, [r3, #0]
1004a4ae:	187b      	adds	r3, r7, r1
1004a4b0:	605a      	str	r2, [r3, #4]
1004a4b2:	193b      	adds	r3, r7, r4
1004a4b4:	781a      	ldrb	r2, [r3, #0]
1004a4b6:	187b      	adds	r3, r7, r1
1004a4b8:	609a      	str	r2, [r3, #8]
1004a4ba:	2308      	movs	r3, #8
1004a4bc:	18fa      	adds	r2, r7, r3
1004a4be:	187b      	adds	r3, r7, r1
1004a4c0:	0011      	movs	r1, r2
1004a4c2:	0018      	movs	r0, r3
1004a4c4:	f001 ffe6 	bl	1004c494 <HAL_FLASHEx_Erase>

#endif

    NVMDB_get_info(&DBInfo[NVMDB_id]);
1004a4c8:	1dfb      	adds	r3, r7, #7
1004a4ca:	781a      	ldrb	r2, [r3, #0]
1004a4cc:	0013      	movs	r3, r2
1004a4ce:	009b      	lsls	r3, r3, #2
1004a4d0:	189b      	adds	r3, r3, r2
1004a4d2:	009b      	lsls	r3, r3, #2
1004a4d4:	4a23      	ldr	r2, [pc, #140]	@ (1004a564 <NVMDB_Erase+0x13c>)
1004a4d6:	189b      	adds	r3, r3, r2
1004a4d8:	0018      	movs	r0, r3
1004a4da:	f7fe fd23 	bl	10048f24 <NVMDB_get_info>

    return NVMDB_STATUS_OK;
1004a4de:	2300      	movs	r3, #0
1004a4e0:	e03b      	b.n	1004a55a <NVMDB_Erase+0x132>
  }

  if(type == SMALL_DB)
1004a4e2:	232b      	movs	r3, #43	@ 0x2b
1004a4e4:	18fb      	adds	r3, r7, r3
1004a4e6:	781b      	ldrb	r3, [r3, #0]
1004a4e8:	2b01      	cmp	r3, #1
1004a4ea:	d135      	bne.n	1004a558 <NVMDB_Erase+0x130>
  {

    status = EraseSmallDB(NVMDB_id, smallDBContainer_p);
1004a4ec:	69ba      	ldr	r2, [r7, #24]
1004a4ee:	252a      	movs	r5, #42	@ 0x2a
1004a4f0:	197c      	adds	r4, r7, r5
1004a4f2:	1dfb      	adds	r3, r7, #7
1004a4f4:	781b      	ldrb	r3, [r3, #0]
1004a4f6:	0011      	movs	r1, r2
1004a4f8:	0018      	movs	r0, r3
1004a4fa:	f7ff fbd9 	bl	10049cb0 <EraseSmallDB>
1004a4fe:	0003      	movs	r3, r0
1004a500:	7023      	strb	r3, [r4, #0]

    if(status == NVMDB_STATUS_OK)
1004a502:	197b      	adds	r3, r7, r5
1004a504:	781b      	ldrb	r3, [r3, #0]
1004a506:	2b00      	cmp	r3, #0
1004a508:	d122      	bne.n	1004a550 <NVMDB_Erase+0x128>
    {
      // Remove any operations in cache for all the DBs in the page. This means write and delete operations.
      // Cache operations for all the DBs in the same page have been executed by LoadDBToRAM().
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004a50a:	2300      	movs	r3, #0
1004a50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004a50e:	e019      	b.n	1004a544 <NVMDB_Erase+0x11c>
      {
        NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
1004a510:	69bb      	ldr	r3, [r7, #24]
1004a512:	6899      	ldr	r1, [r3, #8]
1004a514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1004a516:	0013      	movs	r3, r2
1004a518:	005b      	lsls	r3, r3, #1
1004a51a:	189b      	adds	r3, r3, r2
1004a51c:	009b      	lsls	r3, r3, #2
1004a51e:	18ca      	adds	r2, r1, r3
1004a520:	2129      	movs	r1, #41	@ 0x29
1004a522:	187b      	adds	r3, r7, r1
1004a524:	7812      	ldrb	r2, [r2, #0]
1004a526:	701a      	strb	r2, [r3, #0]
#if NVM_CACHE
        RemoveCacheOp(id);
#endif
        NVMDB_get_info(&DBInfo[id]);
1004a528:	187b      	adds	r3, r7, r1
1004a52a:	781a      	ldrb	r2, [r3, #0]
1004a52c:	0013      	movs	r3, r2
1004a52e:	009b      	lsls	r3, r3, #2
1004a530:	189b      	adds	r3, r3, r2
1004a532:	009b      	lsls	r3, r3, #2
1004a534:	4a0b      	ldr	r2, [pc, #44]	@ (1004a564 <NVMDB_Erase+0x13c>)
1004a536:	189b      	adds	r3, r3, r2
1004a538:	0018      	movs	r0, r3
1004a53a:	f7fe fcf3 	bl	10048f24 <NVMDB_get_info>
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
1004a53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004a540:	3301      	adds	r3, #1
1004a542:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004a544:	69bb      	ldr	r3, [r7, #24]
1004a546:	791b      	ldrb	r3, [r3, #4]
1004a548:	001a      	movs	r2, r3
1004a54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004a54c:	4293      	cmp	r3, r2
1004a54e:	dbdf      	blt.n	1004a510 <NVMDB_Erase+0xe8>
#if NVM_CACHE
      return ScheduleSmallDBEraseOperation(NVMDB_id, smallDBContainer_p);
#endif
    }

    return status;
1004a550:	232a      	movs	r3, #42	@ 0x2a
1004a552:	18fb      	adds	r3, r7, r3
1004a554:	781b      	ldrb	r3, [r3, #0]
1004a556:	e000      	b.n	1004a55a <NVMDB_Erase+0x132>
  }

  return NVMDB_STATUS_INVALID_ID;
1004a558:	2301      	movs	r3, #1
}
1004a55a:	0018      	movs	r0, r3
1004a55c:	46bd      	mov	sp, r7
1004a55e:	b00c      	add	sp, #48	@ 0x30
1004a560:	bdb0      	pop	{r4, r5, r7, pc}
1004a562:	46c0      	nop			@ (mov r8, r8)
1004a564:	20000e38 	.word	0x20000e38
1004a568:	effc0000 	.word	0xeffc0000
1004a56c:	000007ff 	.word	0x000007ff

1004a570 <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
1004a570:	b5b0      	push	{r4, r5, r7, lr}
1004a572:	b084      	sub	sp, #16
1004a574:	af00      	add	r7, sp, #0
1004a576:	0002      	movs	r2, r0
1004a578:	1dfb      	adds	r3, r7, #7
1004a57a:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
1004a57c:	250f      	movs	r5, #15
1004a57e:	197c      	adds	r4, r7, r5
1004a580:	2308      	movs	r3, #8
1004a582:	18fa      	adds	r2, r7, r3
1004a584:	1dfb      	adds	r3, r7, #7
1004a586:	781b      	ldrb	r3, [r3, #0]
1004a588:	0011      	movs	r1, r2
1004a58a:	0018      	movs	r0, r3
1004a58c:	f7ff fb22 	bl	10049bd4 <GetDBType>
1004a590:	0003      	movs	r3, r0
1004a592:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
1004a594:	197b      	adds	r3, r7, r5
1004a596:	781b      	ldrb	r3, [r3, #0]
1004a598:	2b02      	cmp	r3, #2
1004a59a:	d106      	bne.n	1004a5aa <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
1004a59c:	1dfb      	adds	r3, r7, #7
1004a59e:	781b      	ldrb	r3, [r3, #0]
1004a5a0:	0018      	movs	r0, r3
1004a5a2:	f7ff f92f 	bl	10049804 <CleanLargeDB>
1004a5a6:	0003      	movs	r3, r0
1004a5a8:	e00b      	b.n	1004a5c2 <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
1004a5aa:	230f      	movs	r3, #15
1004a5ac:	18fb      	adds	r3, r7, r3
1004a5ae:	781b      	ldrb	r3, [r3, #0]
1004a5b0:	2b01      	cmp	r3, #1
1004a5b2:	d105      	bne.n	1004a5c0 <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
1004a5b4:	68bb      	ldr	r3, [r7, #8]
1004a5b6:	0018      	movs	r0, r3
1004a5b8:	f7ff fa02 	bl	100499c0 <CleanPage>
1004a5bc:	0003      	movs	r3, r0
1004a5be:	e000      	b.n	1004a5c2 <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
1004a5c0:	2301      	movs	r3, #1
}
1004a5c2:	0018      	movs	r0, r3
1004a5c4:	46bd      	mov	sp, r7
1004a5c6:	b004      	add	sp, #16
1004a5c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004a5cc <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
1004a5cc:	b590      	push	{r4, r7, lr}
1004a5ce:	b083      	sub	sp, #12
1004a5d0:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
1004a5d2:	1dfc      	adds	r4, r7, #7
1004a5d4:	f000 f816 	bl	1004a604 <NVMDB_CleanCheck>
1004a5d8:	0003      	movs	r3, r0
1004a5da:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
1004a5dc:	1dfb      	adds	r3, r7, #7
1004a5de:	781b      	ldrb	r3, [r3, #0]
1004a5e0:	2b7f      	cmp	r3, #127	@ 0x7f
1004a5e2:	d808      	bhi.n	1004a5f6 <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
1004a5e4:	1dfb      	adds	r3, r7, #7
1004a5e6:	781b      	ldrb	r3, [r3, #0]
1004a5e8:	0018      	movs	r0, r3
1004a5ea:	f7ff ffc1 	bl	1004a570 <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
1004a5ee:	4b04      	ldr	r3, [pc, #16]	@ (1004a600 <NVMDB_Tick+0x34>)
1004a5f0:	0018      	movs	r0, r3
1004a5f2:	f01c ffbb 	bl	1006756c <puts>
  }
#endif

  return NVMDB_STATUS_OK;
1004a5f6:	2300      	movs	r3, #0
}
1004a5f8:	0018      	movs	r0, r3
1004a5fa:	46bd      	mov	sp, r7
1004a5fc:	b003      	add	sp, #12
1004a5fe:	bd90      	pop	{r4, r7, pc}
1004a600:	1006c96c 	.word	0x1006c96c

1004a604 <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
1004a604:	b580      	push	{r7, lr}
1004a606:	b082      	sub	sp, #8
1004a608:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
1004a60a:	4b2b      	ldr	r3, [pc, #172]	@ (1004a6b8 <NVMDB_CleanCheck+0xb4>)
1004a60c:	2200      	movs	r2, #0
1004a60e:	569a      	ldrsb	r2, [r3, r2]
1004a610:	1dfb      	adds	r3, r7, #7
1004a612:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
1004a614:	1dfb      	adds	r3, r7, #7
1004a616:	781a      	ldrb	r2, [r3, #0]
1004a618:	4928      	ldr	r1, [pc, #160]	@ (1004a6bc <NVMDB_CleanCheck+0xb8>)
1004a61a:	0013      	movs	r3, r2
1004a61c:	009b      	lsls	r3, r3, #2
1004a61e:	189b      	adds	r3, r3, r2
1004a620:	009b      	lsls	r3, r3, #2
1004a622:	18cb      	adds	r3, r1, r3
1004a624:	330a      	adds	r3, #10
1004a626:	881b      	ldrh	r3, [r3, #0]
1004a628:	2b00      	cmp	r3, #0
1004a62a:	d028      	beq.n	1004a67e <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
1004a62c:	1dfb      	adds	r3, r7, #7
1004a62e:	781a      	ldrb	r2, [r3, #0]
1004a630:	4922      	ldr	r1, [pc, #136]	@ (1004a6bc <NVMDB_CleanCheck+0xb8>)
1004a632:	0013      	movs	r3, r2
1004a634:	009b      	lsls	r3, r3, #2
1004a636:	189b      	adds	r3, r3, r2
1004a638:	009b      	lsls	r3, r3, #2
1004a63a:	18cb      	adds	r3, r1, r3
1004a63c:	330c      	adds	r3, #12
1004a63e:	8819      	ldrh	r1, [r3, #0]
1004a640:	1dfb      	adds	r3, r7, #7
1004a642:	781a      	ldrb	r2, [r3, #0]
1004a644:	481d      	ldr	r0, [pc, #116]	@ (1004a6bc <NVMDB_CleanCheck+0xb8>)
1004a646:	0013      	movs	r3, r2
1004a648:	009b      	lsls	r3, r3, #2
1004a64a:	189b      	adds	r3, r3, r2
1004a64c:	009b      	lsls	r3, r3, #2
1004a64e:	18c3      	adds	r3, r0, r3
1004a650:	3310      	adds	r3, #16
1004a652:	881b      	ldrh	r3, [r3, #0]
1004a654:	4299      	cmp	r1, r3
1004a656:	d212      	bcs.n	1004a67e <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
1004a658:	1dfb      	adds	r3, r7, #7
1004a65a:	781b      	ldrb	r3, [r3, #0]
1004a65c:	3301      	adds	r3, #1
1004a65e:	b2db      	uxtb	r3, r3
1004a660:	b25a      	sxtb	r2, r3
1004a662:	4b15      	ldr	r3, [pc, #84]	@ (1004a6b8 <NVMDB_CleanCheck+0xb4>)
1004a664:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
1004a666:	4b14      	ldr	r3, [pc, #80]	@ (1004a6b8 <NVMDB_CleanCheck+0xb4>)
1004a668:	781b      	ldrb	r3, [r3, #0]
1004a66a:	b25b      	sxtb	r3, r3
1004a66c:	2b02      	cmp	r3, #2
1004a66e:	d102      	bne.n	1004a676 <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
1004a670:	4b11      	ldr	r3, [pc, #68]	@ (1004a6b8 <NVMDB_CleanCheck+0xb4>)
1004a672:	2200      	movs	r2, #0
1004a674:	701a      	strb	r2, [r3, #0]
        }
        return i;
1004a676:	1dfb      	adds	r3, r7, #7
1004a678:	781b      	ldrb	r3, [r3, #0]
1004a67a:	b25b      	sxtb	r3, r3
1004a67c:	e017      	b.n	1004a6ae <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
1004a67e:	1dfb      	adds	r3, r7, #7
1004a680:	781a      	ldrb	r2, [r3, #0]
1004a682:	1dfb      	adds	r3, r7, #7
1004a684:	3201      	adds	r2, #1
1004a686:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
1004a688:	1dfb      	adds	r3, r7, #7
1004a68a:	781b      	ldrb	r3, [r3, #0]
1004a68c:	2b02      	cmp	r3, #2
1004a68e:	d102      	bne.n	1004a696 <NVMDB_CleanCheck+0x92>
    {
      i = 0;
1004a690:	1dfb      	adds	r3, r7, #7
1004a692:	2200      	movs	r2, #0
1004a694:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
1004a696:	1dfb      	adds	r3, r7, #7
1004a698:	781b      	ldrb	r3, [r3, #0]
1004a69a:	4a07      	ldr	r2, [pc, #28]	@ (1004a6b8 <NVMDB_CleanCheck+0xb4>)
1004a69c:	7812      	ldrb	r2, [r2, #0]
1004a69e:	b252      	sxtb	r2, r2
1004a6a0:	4293      	cmp	r3, r2
1004a6a2:	d1b7      	bne.n	1004a614 <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
1004a6a4:	4b04      	ldr	r3, [pc, #16]	@ (1004a6b8 <NVMDB_CleanCheck+0xb4>)
1004a6a6:	2200      	movs	r2, #0
1004a6a8:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
1004a6aa:	2301      	movs	r3, #1
1004a6ac:	425b      	negs	r3, r3
}
1004a6ae:	0018      	movs	r0, r3
1004a6b0:	46bd      	mov	sp, r7
1004a6b2:	b002      	add	sp, #8
1004a6b4:	bd80      	pop	{r7, pc}
1004a6b6:	46c0      	nop			@ (mov r8, r8)
1004a6b8:	20000e60 	.word	0x20000e60
1004a6bc:	20000e38 	.word	0x20000e38

1004a6c0 <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
1004a6c0:	b580      	push	{r7, lr}
1004a6c2:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
1004a6c4:	4b03      	ldr	r3, [pc, #12]	@ (1004a6d4 <PKAMGR_Init+0x14>)
1004a6c6:	2201      	movs	r2, #1
1004a6c8:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
1004a6ca:	2300      	movs	r3, #0
}
1004a6cc:	0018      	movs	r0, r3
1004a6ce:	46bd      	mov	sp, r7
1004a6d0:	bd80      	pop	{r7, pc}
1004a6d2:	46c0      	nop			@ (mov r8, r8)
1004a6d4:	2000139c 	.word	0x2000139c

1004a6d8 <PKAMGR_SleepCheck>:

  return PKAMGR_SUCCESS;
}

PKAMGR_ResultStatus PKAMGR_SleepCheck(void)
{
1004a6d8:	b580      	push	{r7, lr}
1004a6da:	b082      	sub	sp, #8
1004a6dc:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_ERR_BUSY;
1004a6de:	1dfb      	adds	r3, r7, #7
1004a6e0:	22fe      	movs	r2, #254	@ 0xfe
1004a6e2:	701a      	strb	r2, [r3, #0]

  if(internalState == PKAMGR_STATE_IDLE)
1004a6e4:	4b06      	ldr	r3, [pc, #24]	@ (1004a700 <PKAMGR_SleepCheck+0x28>)
1004a6e6:	681b      	ldr	r3, [r3, #0]
1004a6e8:	2b01      	cmp	r3, #1
1004a6ea:	d102      	bne.n	1004a6f2 <PKAMGR_SleepCheck+0x1a>
    return_value = PKAMGR_SUCCESS;
1004a6ec:	1dfb      	adds	r3, r7, #7
1004a6ee:	2200      	movs	r2, #0
1004a6f0:	701a      	strb	r2, [r3, #0]

  return return_value;
1004a6f2:	1dfb      	adds	r3, r7, #7
1004a6f4:	781b      	ldrb	r3, [r3, #0]
1004a6f6:	b25b      	sxtb	r3, r3
}
1004a6f8:	0018      	movs	r0, r3
1004a6fa:	46bd      	mov	sp, r7
1004a6fc:	b002      	add	sp, #8
1004a6fe:	bd80      	pop	{r7, pc}
1004a700:	2000139c 	.word	0x2000139c

1004a704 <PKAMGR_Lock>:

PKAMGR_ResultStatus PKAMGR_Lock()
{
1004a704:	b580      	push	{r7, lr}
1004a706:	b084      	sub	sp, #16
1004a708:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_SUCCESS;
1004a70a:	210f      	movs	r1, #15
1004a70c:	187b      	adds	r3, r7, r1
1004a70e:	2200      	movs	r2, #0
1004a710:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a712:	f3ef 8310 	mrs	r3, PRIMASK
1004a716:	607b      	str	r3, [r7, #4]
  return(result);
1004a718:	687b      	ldr	r3, [r7, #4]

  /* Only one consumer (Application layer or Stack) can use the PKA at the time */
  ATOMIC_SECTION_BEGIN();
1004a71a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
1004a71c:	b672      	cpsid	i
}
1004a71e:	46c0      	nop			@ (mov r8, r8)
  if(internalState != PKAMGR_STATE_IDLE)
1004a720:	4b0c      	ldr	r3, [pc, #48]	@ (1004a754 <PKAMGR_Lock+0x50>)
1004a722:	681b      	ldr	r3, [r3, #0]
1004a724:	2b01      	cmp	r3, #1
1004a726:	d003      	beq.n	1004a730 <PKAMGR_Lock+0x2c>
  {
    return_value = PKAMGR_ERR_BUSY;
1004a728:	187b      	adds	r3, r7, r1
1004a72a:	22fe      	movs	r2, #254	@ 0xfe
1004a72c:	701a      	strb	r2, [r3, #0]
1004a72e:	e002      	b.n	1004a736 <PKAMGR_Lock+0x32>
  }
  else
  {
    /* Lock mechanism to access concurrently at the PKA resource */
    internalState = PKAMGR_STATE_BUSY;
1004a730:	4b08      	ldr	r3, [pc, #32]	@ (1004a754 <PKAMGR_Lock+0x50>)
1004a732:	2203      	movs	r2, #3
1004a734:	601a      	str	r2, [r3, #0]
1004a736:	68bb      	ldr	r3, [r7, #8]
1004a738:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a73a:	683b      	ldr	r3, [r7, #0]
1004a73c:	f383 8810 	msr	PRIMASK, r3
}
1004a740:	46c0      	nop			@ (mov r8, r8)
  }
  ATOMIC_SECTION_END();

  return return_value;
1004a742:	230f      	movs	r3, #15
1004a744:	18fb      	adds	r3, r7, r3
1004a746:	781b      	ldrb	r3, [r3, #0]
1004a748:	b25b      	sxtb	r3, r3
}
1004a74a:	0018      	movs	r0, r3
1004a74c:	46bd      	mov	sp, r7
1004a74e:	b004      	add	sp, #16
1004a750:	bd80      	pop	{r7, pc}
1004a752:	46c0      	nop			@ (mov r8, r8)
1004a754:	2000139c 	.word	0x2000139c

1004a758 <PKAMGR_Unlock>:

PKAMGR_ResultStatus PKAMGR_Unlock()
{
1004a758:	b580      	push	{r7, lr}
1004a75a:	b084      	sub	sp, #16
1004a75c:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_SUCCESS;
1004a75e:	210f      	movs	r1, #15
1004a760:	187b      	adds	r3, r7, r1
1004a762:	2200      	movs	r2, #0
1004a764:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a766:	f3ef 8310 	mrs	r3, PRIMASK
1004a76a:	607b      	str	r3, [r7, #4]
  return(result);
1004a76c:	687b      	ldr	r3, [r7, #4]

  /* Only one consumer (Application layer or Stack) can use the PKA at the time */
  ATOMIC_SECTION_BEGIN();
1004a76e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
1004a770:	b672      	cpsid	i
}
1004a772:	46c0      	nop			@ (mov r8, r8)
  if(internalState != PKAMGR_STATE_BUSY)
1004a774:	4b0c      	ldr	r3, [pc, #48]	@ (1004a7a8 <PKAMGR_Unlock+0x50>)
1004a776:	681b      	ldr	r3, [r3, #0]
1004a778:	2b03      	cmp	r3, #3
1004a77a:	d003      	beq.n	1004a784 <PKAMGR_Unlock+0x2c>
  {
    return_value = PKAMGR_ERR_BUSY;
1004a77c:	187b      	adds	r3, r7, r1
1004a77e:	22fe      	movs	r2, #254	@ 0xfe
1004a780:	701a      	strb	r2, [r3, #0]
1004a782:	e002      	b.n	1004a78a <PKAMGR_Unlock+0x32>
  }
  else
  {
    /* Unlock mechanism to access concurrently at the PKA resource */
    internalState = PKAMGR_STATE_IDLE;
1004a784:	4b08      	ldr	r3, [pc, #32]	@ (1004a7a8 <PKAMGR_Unlock+0x50>)
1004a786:	2201      	movs	r2, #1
1004a788:	601a      	str	r2, [r3, #0]
1004a78a:	68bb      	ldr	r3, [r7, #8]
1004a78c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a78e:	683b      	ldr	r3, [r7, #0]
1004a790:	f383 8810 	msr	PRIMASK, r3
}
1004a794:	46c0      	nop			@ (mov r8, r8)
  }
  ATOMIC_SECTION_END();

  return return_value;
1004a796:	230f      	movs	r3, #15
1004a798:	18fb      	adds	r3, r7, r3
1004a79a:	781b      	ldrb	r3, [r3, #0]
1004a79c:	b25b      	sxtb	r3, r3
}
1004a79e:	0018      	movs	r0, r3
1004a7a0:	46bd      	mov	sp, r7
1004a7a2:	b004      	add	sp, #16
1004a7a4:	bd80      	pop	{r7, pc}
1004a7a6:	46c0      	nop			@ (mov r8, r8)
1004a7a8:	2000139c 	.word	0x2000139c

1004a7ac <PKAMGR_StartP256PublicKeyGeneration>:

PKAMGR_ResultStatus PKAMGR_StartP256PublicKeyGeneration(const uint32_t *privateKey, PKAMGR_funcCB funcCB)
{
1004a7ac:	b580      	push	{r7, lr}
1004a7ae:	b082      	sub	sp, #8
1004a7b0:	af00      	add	r7, sp, #0
1004a7b2:	6078      	str	r0, [r7, #4]
1004a7b4:	6039      	str	r1, [r7, #0]
  return HW_PKA_StartP256DHkeyGeneration(privateKey, (uint32_t *)&PKAStartPoint[0], funcCB);
1004a7b6:	683a      	ldr	r2, [r7, #0]
1004a7b8:	4904      	ldr	r1, [pc, #16]	@ (1004a7cc <PKAMGR_StartP256PublicKeyGeneration+0x20>)
1004a7ba:	687b      	ldr	r3, [r7, #4]
1004a7bc:	0018      	movs	r0, r3
1004a7be:	f7fd fd07 	bl	100481d0 <HW_PKA_StartP256DHkeyGeneration>
1004a7c2:	0003      	movs	r3, r0
}
1004a7c4:	0018      	movs	r0, r3
1004a7c6:	46bd      	mov	sp, r7
1004a7c8:	b002      	add	sp, #8
1004a7ca:	bd80      	pop	{r7, pc}
1004a7cc:	1006cd38 	.word	0x1006cd38

1004a7d0 <PKAMGR_IRQCallback>:

__weak void PKAMGR_IRQCallback(void)
{
1004a7d0:	b580      	push	{r7, lr}
1004a7d2:	af00      	add	r7, sp, #0
}
1004a7d4:	46c0      	nop			@ (mov r8, r8)
1004a7d6:	46bd      	mov	sp, r7
1004a7d8:	bd80      	pop	{r7, pc}
	...

1004a7dc <aci_gap_profile_init>:
tBleStatus aci_gap_profile_init(uint8_t Role,
                                uint8_t Privacy_Type,
                                uint16_t *Dev_Name_Char_Handle,
                                uint16_t *Appearance_Char_Handle,
                                uint16_t *Periph_Pref_Conn_Param_Char_Handle)
{
1004a7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a7de:	b087      	sub	sp, #28
1004a7e0:	af00      	add	r7, sp, #0
1004a7e2:	60ba      	str	r2, [r7, #8]
1004a7e4:	607b      	str	r3, [r7, #4]
1004a7e6:	240f      	movs	r4, #15
1004a7e8:	193b      	adds	r3, r7, r4
1004a7ea:	1c02      	adds	r2, r0, #0
1004a7ec:	701a      	strb	r2, [r3, #0]
1004a7ee:	230e      	movs	r3, #14
1004a7f0:	18fb      	adds	r3, r7, r3
1004a7f2:	1c0a      	adds	r2, r1, #0
1004a7f4:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gap_srvc_handle;
  
  *Dev_Name_Char_Handle = 0x0000;
1004a7f6:	68bb      	ldr	r3, [r7, #8]
1004a7f8:	2200      	movs	r2, #0
1004a7fa:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle= 0x0000;
1004a7fc:	687b      	ldr	r3, [r7, #4]
1004a7fe:	2200      	movs	r2, #0
1004a800:	801a      	strh	r2, [r3, #0]
  *Periph_Pref_Conn_Param_Char_Handle = 0x0000;
1004a802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004a804:	2200      	movs	r2, #0
1004a806:	801a      	strh	r2, [r3, #0]
  
  if ((Role & (GAP_PERIPHERAL_ROLE | GAP_CENTRAL_ROLE)) != 0x0U)
1004a808:	193b      	adds	r3, r7, r4
1004a80a:	781b      	ldrb	r3, [r3, #0]
1004a80c:	2205      	movs	r2, #5
1004a80e:	4013      	ands	r3, r2
1004a810:	d046      	beq.n	1004a8a0 <aci_gap_profile_init+0xc4>
  {
    /**
    * Register GAP service.
    * Device Name and Appearance Characteristics will be also registered.
    */
    ret = aci_gatt_srv_add_service(&gap_srvc);
1004a812:	2517      	movs	r5, #23
1004a814:	197c      	adds	r4, r7, r5
1004a816:	4b25      	ldr	r3, [pc, #148]	@ (1004a8ac <aci_gap_profile_init+0xd0>)
1004a818:	0018      	movs	r0, r3
1004a81a:	f007 fd7f 	bl	1005231c <aci_gatt_srv_add_service>
1004a81e:	0003      	movs	r3, r0
1004a820:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1004a822:	197b      	adds	r3, r7, r5
1004a824:	781b      	ldrb	r3, [r3, #0]
1004a826:	2b00      	cmp	r3, #0
1004a828:	d002      	beq.n	1004a830 <aci_gap_profile_init+0x54>
    {
      return ret;
1004a82a:	197b      	adds	r3, r7, r5
1004a82c:	781b      	ldrb	r3, [r3, #0]
1004a82e:	e038      	b.n	1004a8a2 <aci_gap_profile_init+0xc6>
    }
    
    *Dev_Name_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]);
1004a830:	4b1f      	ldr	r3, [pc, #124]	@ (1004a8b0 <aci_gap_profile_init+0xd4>)
1004a832:	0018      	movs	r0, r3
1004a834:	f007 fd9f 	bl	10052376 <aci_gatt_srv_get_char_decl_handle>
1004a838:	0003      	movs	r3, r0
1004a83a:	001a      	movs	r2, r3
1004a83c:	68bb      	ldr	r3, [r7, #8]
1004a83e:	801a      	strh	r2, [r3, #0]
    *Appearance_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]);
1004a840:	4b1c      	ldr	r3, [pc, #112]	@ (1004a8b4 <aci_gap_profile_init+0xd8>)
1004a842:	0018      	movs	r0, r3
1004a844:	f007 fd97 	bl	10052376 <aci_gatt_srv_get_char_decl_handle>
1004a848:	0003      	movs	r3, r0
1004a84a:	001a      	movs	r2, r3
1004a84c:	687b      	ldr	r3, [r7, #4]
1004a84e:	801a      	strh	r2, [r3, #0]
    
    gap_srvc_handle = aci_gatt_srv_get_service_handle(&gap_srvc);
1004a850:	2614      	movs	r6, #20
1004a852:	19bc      	adds	r4, r7, r6
1004a854:	4b15      	ldr	r3, [pc, #84]	@ (1004a8ac <aci_gap_profile_init+0xd0>)
1004a856:	0018      	movs	r0, r3
1004a858:	f007 fd6d 	bl	10052336 <aci_gatt_srv_get_service_handle>
1004a85c:	0003      	movs	r3, r0
1004a85e:	8023      	strh	r3, [r4, #0]
      }
    }
    
    *Periph_Pref_Conn_Param_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[2U]);
#else
    *Periph_Pref_Conn_Param_Char_Handle = 0;
1004a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004a862:	2200      	movs	r2, #0
1004a864:	801a      	strh	r2, [r3, #0]
#endif    
    
    if (Privacy_Type == 2U)
1004a866:	230e      	movs	r3, #14
1004a868:	18fb      	adds	r3, r7, r3
1004a86a:	781b      	ldrb	r3, [r3, #0]
1004a86c:	2b02      	cmp	r3, #2
1004a86e:	d111      	bne.n	1004a894 <aci_gap_profile_init+0xb8>
    {
      /**
      * Register Central Address Resolution Characteristic.
      */
      ret = aci_gatt_srv_add_char(&gap_chrs[3U], gap_srvc_handle);
1004a870:	2517      	movs	r5, #23
1004a872:	197c      	adds	r4, r7, r5
1004a874:	19bb      	adds	r3, r7, r6
1004a876:	881a      	ldrh	r2, [r3, #0]
1004a878:	4b0f      	ldr	r3, [pc, #60]	@ (1004a8b8 <aci_gap_profile_init+0xdc>)
1004a87a:	0011      	movs	r1, r2
1004a87c:	0018      	movs	r0, r3
1004a87e:	f007 fd67 	bl	10052350 <aci_gatt_srv_add_char>
1004a882:	0003      	movs	r3, r0
1004a884:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
1004a886:	197b      	adds	r3, r7, r5
1004a888:	781b      	ldrb	r3, [r3, #0]
1004a88a:	2b00      	cmp	r3, #0
1004a88c:	d002      	beq.n	1004a894 <aci_gap_profile_init+0xb8>
      {
        return ret;
1004a88e:	197b      	adds	r3, r7, r5
1004a890:	781b      	ldrb	r3, [r3, #0]
1004a892:	e006      	b.n	1004a8a2 <aci_gap_profile_init+0xc6>
#endif /* CFG_BLE_GAP_ENCRYPTED_KEY_MATERIAL_CHARACTERISTIC */
    
    /**
    * Set default device name.
    */
    Gap_profile_set_dev_name(0U, sizeof(default_dev_name),
1004a894:	4b09      	ldr	r3, [pc, #36]	@ (1004a8bc <aci_gap_profile_init+0xe0>)
1004a896:	001a      	movs	r2, r3
1004a898:	2108      	movs	r1, #8
1004a89a:	2000      	movs	r0, #0
1004a89c:	f000 f810 	bl	1004a8c0 <Gap_profile_set_dev_name>
                             (uint8_t *)default_dev_name);
    
  }
  
  return BLE_STATUS_SUCCESS;
1004a8a0:	2300      	movs	r3, #0
}
1004a8a2:	0018      	movs	r0, r3
1004a8a4:	46bd      	mov	sp, r7
1004a8a6:	b007      	add	sp, #28
1004a8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a8aa:	46c0      	nop			@ (mov r8, r8)
1004a8ac:	2000146c 	.word	0x2000146c
1004a8b0:	200013b8 	.word	0x200013b8
1004a8b4:	200013dc 	.word	0x200013dc
1004a8b8:	20001424 	.word	0x20001424
1004a8bc:	1006cd78 	.word	0x1006cd78

1004a8c0 <Gap_profile_set_dev_name>:

tBleStatus Gap_profile_set_dev_name(uint16_t offset,
                                    uint16_t length,
                                    uint8_t *dev_name_p)
{
1004a8c0:	b590      	push	{r4, r7, lr}
1004a8c2:	b085      	sub	sp, #20
1004a8c4:	af00      	add	r7, sp, #0
1004a8c6:	603a      	str	r2, [r7, #0]
1004a8c8:	1dbb      	adds	r3, r7, #6
1004a8ca:	1c02      	adds	r2, r0, #0
1004a8cc:	801a      	strh	r2, [r3, #0]
1004a8ce:	1d3b      	adds	r3, r7, #4
1004a8d0:	1c0a      	adds	r2, r1, #0
1004a8d2:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]) + 1U;
1004a8d4:	4b0c      	ldr	r3, [pc, #48]	@ (1004a908 <Gap_profile_set_dev_name+0x48>)
1004a8d6:	0018      	movs	r0, r3
1004a8d8:	f007 fd4d 	bl	10052376 <aci_gatt_srv_get_char_decl_handle>
1004a8dc:	0003      	movs	r3, r0
1004a8de:	001a      	movs	r2, r3
1004a8e0:	200e      	movs	r0, #14
1004a8e2:	183b      	adds	r3, r7, r0
1004a8e4:	3201      	adds	r2, #1
1004a8e6:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, dev_name_p);
1004a8e8:	683c      	ldr	r4, [r7, #0]
1004a8ea:	1d3b      	adds	r3, r7, #4
1004a8ec:	881a      	ldrh	r2, [r3, #0]
1004a8ee:	1dbb      	adds	r3, r7, #6
1004a8f0:	8819      	ldrh	r1, [r3, #0]
1004a8f2:	183b      	adds	r3, r7, r0
1004a8f4:	8818      	ldrh	r0, [r3, #0]
1004a8f6:	0023      	movs	r3, r4
1004a8f8:	f000 f82e 	bl	1004a958 <Gap_profile_set_char_value>
1004a8fc:	0003      	movs	r3, r0
}
1004a8fe:	0018      	movs	r0, r3
1004a900:	46bd      	mov	sp, r7
1004a902:	b005      	add	sp, #20
1004a904:	bd90      	pop	{r4, r7, pc}
1004a906:	46c0      	nop			@ (mov r8, r8)
1004a908:	200013b8 	.word	0x200013b8

1004a90c <Gap_profile_set_appearance>:

tBleStatus Gap_profile_set_appearance(uint16_t offset,
                                      uint16_t length,
                                      uint8_t *appearance_p)
{
1004a90c:	b590      	push	{r4, r7, lr}
1004a90e:	b085      	sub	sp, #20
1004a910:	af00      	add	r7, sp, #0
1004a912:	603a      	str	r2, [r7, #0]
1004a914:	1dbb      	adds	r3, r7, #6
1004a916:	1c02      	adds	r2, r0, #0
1004a918:	801a      	strh	r2, [r3, #0]
1004a91a:	1d3b      	adds	r3, r7, #4
1004a91c:	1c0a      	adds	r2, r1, #0
1004a91e:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]) + 1U;
1004a920:	4b0c      	ldr	r3, [pc, #48]	@ (1004a954 <Gap_profile_set_appearance+0x48>)
1004a922:	0018      	movs	r0, r3
1004a924:	f007 fd27 	bl	10052376 <aci_gatt_srv_get_char_decl_handle>
1004a928:	0003      	movs	r3, r0
1004a92a:	001a      	movs	r2, r3
1004a92c:	200e      	movs	r0, #14
1004a92e:	183b      	adds	r3, r7, r0
1004a930:	3201      	adds	r2, #1
1004a932:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, appearance_p);
1004a934:	683c      	ldr	r4, [r7, #0]
1004a936:	1d3b      	adds	r3, r7, #4
1004a938:	881a      	ldrh	r2, [r3, #0]
1004a93a:	1dbb      	adds	r3, r7, #6
1004a93c:	8819      	ldrh	r1, [r3, #0]
1004a93e:	183b      	adds	r3, r7, r0
1004a940:	8818      	ldrh	r0, [r3, #0]
1004a942:	0023      	movs	r3, r4
1004a944:	f000 f808 	bl	1004a958 <Gap_profile_set_char_value>
1004a948:	0003      	movs	r3, r0
}
1004a94a:	0018      	movs	r0, r3
1004a94c:	46bd      	mov	sp, r7
1004a94e:	b005      	add	sp, #20
1004a950:	bd90      	pop	{r4, r7, pc}
1004a952:	46c0      	nop			@ (mov r8, r8)
1004a954:	200013dc 	.word	0x200013dc

1004a958 <Gap_profile_set_char_value>:

tBleStatus Gap_profile_set_char_value(uint16_t attr_h,
                                      uint16_t val_offset,
                                      uint16_t val_length,
                                      uint8_t *val_p)
{
1004a958:	b5b0      	push	{r4, r5, r7, lr}
1004a95a:	b086      	sub	sp, #24
1004a95c:	af00      	add	r7, sp, #0
1004a95e:	0004      	movs	r4, r0
1004a960:	0008      	movs	r0, r1
1004a962:	0011      	movs	r1, r2
1004a964:	607b      	str	r3, [r7, #4]
1004a966:	230e      	movs	r3, #14
1004a968:	18fb      	adds	r3, r7, r3
1004a96a:	1c22      	adds	r2, r4, #0
1004a96c:	801a      	strh	r2, [r3, #0]
1004a96e:	230c      	movs	r3, #12
1004a970:	18fb      	adds	r3, r7, r3
1004a972:	1c02      	adds	r2, r0, #0
1004a974:	801a      	strh	r2, [r3, #0]
1004a976:	230a      	movs	r3, #10
1004a978:	18fb      	adds	r3, r7, r3
1004a97a:	1c0a      	adds	r2, r1, #0
1004a97c:	801a      	strh	r2, [r3, #0]
    uint16_t handle;

    /**
     * Search for GAP characteristic.
     */
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
1004a97e:	2317      	movs	r3, #23
1004a980:	18fb      	adds	r3, r7, r3
1004a982:	2200      	movs	r2, #0
1004a984:	701a      	strb	r2, [r3, #0]
1004a986:	e021      	b.n	1004a9cc <Gap_profile_set_char_value+0x74>
    {
        handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[i]);
1004a988:	2317      	movs	r3, #23
1004a98a:	18fb      	adds	r3, r7, r3
1004a98c:	781a      	ldrb	r2, [r3, #0]
1004a98e:	0013      	movs	r3, r2
1004a990:	00db      	lsls	r3, r3, #3
1004a992:	189b      	adds	r3, r3, r2
1004a994:	009b      	lsls	r3, r3, #2
1004a996:	4a43      	ldr	r2, [pc, #268]	@ (1004aaa4 <Gap_profile_set_char_value+0x14c>)
1004a998:	189b      	adds	r3, r3, r2
1004a99a:	2514      	movs	r5, #20
1004a99c:	197c      	adds	r4, r7, r5
1004a99e:	0018      	movs	r0, r3
1004a9a0:	f007 fce9 	bl	10052376 <aci_gatt_srv_get_char_decl_handle>
1004a9a4:	0003      	movs	r3, r0
1004a9a6:	8023      	strh	r3, [r4, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
1004a9a8:	197b      	adds	r3, r7, r5
1004a9aa:	881b      	ldrh	r3, [r3, #0]
1004a9ac:	2b00      	cmp	r3, #0
1004a9ae:	d007      	beq.n	1004a9c0 <Gap_profile_set_char_value+0x68>
            ((handle + 1U) == attr_h))
1004a9b0:	197b      	adds	r3, r7, r5
1004a9b2:	881b      	ldrh	r3, [r3, #0]
1004a9b4:	1c5a      	adds	r2, r3, #1
1004a9b6:	230e      	movs	r3, #14
1004a9b8:	18fb      	adds	r3, r7, r3
1004a9ba:	881b      	ldrh	r3, [r3, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
1004a9bc:	429a      	cmp	r2, r3
1004a9be:	d00b      	beq.n	1004a9d8 <Gap_profile_set_char_value+0x80>
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
1004a9c0:	2117      	movs	r1, #23
1004a9c2:	187b      	adds	r3, r7, r1
1004a9c4:	781a      	ldrb	r2, [r3, #0]
1004a9c6:	187b      	adds	r3, r7, r1
1004a9c8:	3201      	adds	r2, #1
1004a9ca:	701a      	strb	r2, [r3, #0]
1004a9cc:	2317      	movs	r3, #23
1004a9ce:	18fb      	adds	r3, r7, r3
1004a9d0:	781b      	ldrb	r3, [r3, #0]
1004a9d2:	2b04      	cmp	r3, #4
1004a9d4:	d9d8      	bls.n	1004a988 <Gap_profile_set_char_value+0x30>
1004a9d6:	e000      	b.n	1004a9da <Gap_profile_set_char_value+0x82>
        {
            break;
1004a9d8:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (i == (sizeof(gap_chrs) / sizeof(gap_chrs[0U])))
1004a9da:	2317      	movs	r3, #23
1004a9dc:	18fb      	adds	r3, r7, r3
1004a9de:	781b      	ldrb	r3, [r3, #0]
1004a9e0:	2b05      	cmp	r3, #5
1004a9e2:	d101      	bne.n	1004a9e8 <Gap_profile_set_char_value+0x90>
    {
        /**
         * The given attribute handle is not registered for GAP service.
         */
        return BLE_STATUS_INVALID_PARAMS;
1004a9e4:	2312      	movs	r3, #18
1004a9e6:	e059      	b.n	1004aa9c <Gap_profile_set_char_value+0x144>
    }

    if ((val_offset + val_length) > gap_chrs[i].val_buffer_p->buffer_len)
1004a9e8:	230c      	movs	r3, #12
1004a9ea:	18fb      	adds	r3, r7, r3
1004a9ec:	881a      	ldrh	r2, [r3, #0]
1004a9ee:	230a      	movs	r3, #10
1004a9f0:	18fb      	adds	r3, r7, r3
1004a9f2:	881b      	ldrh	r3, [r3, #0]
1004a9f4:	18d1      	adds	r1, r2, r3
1004a9f6:	2317      	movs	r3, #23
1004a9f8:	18fb      	adds	r3, r7, r3
1004a9fa:	781a      	ldrb	r2, [r3, #0]
1004a9fc:	4829      	ldr	r0, [pc, #164]	@ (1004aaa4 <Gap_profile_set_char_value+0x14c>)
1004a9fe:	0013      	movs	r3, r2
1004aa00:	00db      	lsls	r3, r3, #3
1004aa02:	189b      	adds	r3, r3, r2
1004aa04:	009b      	lsls	r3, r3, #2
1004aa06:	18c3      	adds	r3, r0, r3
1004aa08:	3320      	adds	r3, #32
1004aa0a:	681b      	ldr	r3, [r3, #0]
1004aa0c:	889b      	ldrh	r3, [r3, #4]
1004aa0e:	4299      	cmp	r1, r3
1004aa10:	dd01      	ble.n	1004aa16 <Gap_profile_set_char_value+0xbe>
    {
        /**
         * Invalid value length.
         */
        return BLE_STATUS_INVALID_PARAMS;
1004aa12:	2312      	movs	r3, #18
1004aa14:	e042      	b.n	1004aa9c <Gap_profile_set_char_value+0x144>
    }
    
    if(gap_chrs[i].val_buffer_p == NULL)
1004aa16:	2317      	movs	r3, #23
1004aa18:	18fb      	adds	r3, r7, r3
1004aa1a:	781a      	ldrb	r2, [r3, #0]
1004aa1c:	4921      	ldr	r1, [pc, #132]	@ (1004aaa4 <Gap_profile_set_char_value+0x14c>)
1004aa1e:	0013      	movs	r3, r2
1004aa20:	00db      	lsls	r3, r3, #3
1004aa22:	189b      	adds	r3, r3, r2
1004aa24:	009b      	lsls	r3, r3, #2
1004aa26:	18cb      	adds	r3, r1, r3
1004aa28:	3320      	adds	r3, #32
1004aa2a:	681b      	ldr	r3, [r3, #0]
1004aa2c:	2b00      	cmp	r3, #0
1004aa2e:	d101      	bne.n	1004aa34 <Gap_profile_set_char_value+0xdc>
    {
      /**
       * The given attribute handle is not related to a buffered characteristic.
       */
      return BLE_STATUS_INVALID_PARAMS;
1004aa30:	2312      	movs	r3, #18
1004aa32:	e033      	b.n	1004aa9c <Gap_profile_set_char_value+0x144>
    }

    /**
     * Write characteristic value.
     */
    memcpy(&gap_chrs[i].val_buffer_p->buffer_p[val_offset], val_p, val_length);
1004aa34:	2417      	movs	r4, #23
1004aa36:	193b      	adds	r3, r7, r4
1004aa38:	781a      	ldrb	r2, [r3, #0]
1004aa3a:	491a      	ldr	r1, [pc, #104]	@ (1004aaa4 <Gap_profile_set_char_value+0x14c>)
1004aa3c:	0013      	movs	r3, r2
1004aa3e:	00db      	lsls	r3, r3, #3
1004aa40:	189b      	adds	r3, r3, r2
1004aa42:	009b      	lsls	r3, r3, #2
1004aa44:	18cb      	adds	r3, r1, r3
1004aa46:	3320      	adds	r3, #32
1004aa48:	681b      	ldr	r3, [r3, #0]
1004aa4a:	689a      	ldr	r2, [r3, #8]
1004aa4c:	230c      	movs	r3, #12
1004aa4e:	18fb      	adds	r3, r7, r3
1004aa50:	881b      	ldrh	r3, [r3, #0]
1004aa52:	18d0      	adds	r0, r2, r3
1004aa54:	250a      	movs	r5, #10
1004aa56:	197b      	adds	r3, r7, r5
1004aa58:	881a      	ldrh	r2, [r3, #0]
1004aa5a:	687b      	ldr	r3, [r7, #4]
1004aa5c:	0019      	movs	r1, r3
1004aa5e:	f01c ffd8 	bl	10067a12 <memcpy>
    if ((gap_chrs[i].val_buffer_p->op_flags & BLE_GATT_SRV_OP_VALUE_VAR_LENGTH_FLAG) != 0U)
1004aa62:	193b      	adds	r3, r7, r4
1004aa64:	781a      	ldrb	r2, [r3, #0]
1004aa66:	490f      	ldr	r1, [pc, #60]	@ (1004aaa4 <Gap_profile_set_char_value+0x14c>)
1004aa68:	0013      	movs	r3, r2
1004aa6a:	00db      	lsls	r3, r3, #3
1004aa6c:	189b      	adds	r3, r3, r2
1004aa6e:	009b      	lsls	r3, r3, #2
1004aa70:	18cb      	adds	r3, r1, r3
1004aa72:	3320      	adds	r3, #32
1004aa74:	681b      	ldr	r3, [r3, #0]
1004aa76:	781b      	ldrb	r3, [r3, #0]
1004aa78:	001a      	movs	r2, r3
1004aa7a:	2302      	movs	r3, #2
1004aa7c:	4013      	ands	r3, r2
1004aa7e:	d00c      	beq.n	1004aa9a <Gap_profile_set_char_value+0x142>
    {
        gap_chrs[i].val_buffer_p->val_len = val_length;
1004aa80:	193b      	adds	r3, r7, r4
1004aa82:	781a      	ldrb	r2, [r3, #0]
1004aa84:	4907      	ldr	r1, [pc, #28]	@ (1004aaa4 <Gap_profile_set_char_value+0x14c>)
1004aa86:	0013      	movs	r3, r2
1004aa88:	00db      	lsls	r3, r3, #3
1004aa8a:	189b      	adds	r3, r3, r2
1004aa8c:	009b      	lsls	r3, r3, #2
1004aa8e:	18cb      	adds	r3, r1, r3
1004aa90:	3320      	adds	r3, #32
1004aa92:	681b      	ldr	r3, [r3, #0]
1004aa94:	197a      	adds	r2, r7, r5
1004aa96:	8812      	ldrh	r2, [r2, #0]
1004aa98:	805a      	strh	r2, [r3, #2]
    }

    return BLE_STATUS_SUCCESS;
1004aa9a:	2300      	movs	r3, #0
}
1004aa9c:	0018      	movs	r0, r3
1004aa9e:	46bd      	mov	sp, r7
1004aaa0:	b006      	add	sp, #24
1004aaa2:	bdb0      	pop	{r4, r5, r7, pc}
1004aaa4:	200013b8 	.word	0x200013b8

1004aaa8 <aci_gatt_srv_profile_init>:
    .chrs = {0, NULL},
};

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
1004aaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004aaaa:	b085      	sub	sp, #20
1004aaac:	af00      	add	r7, sp, #0
1004aaae:	0002      	movs	r2, r0
1004aab0:	6039      	str	r1, [r7, #0]
1004aab2:	1dfb      	adds	r3, r7, #7
1004aab4:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_srvc_handle;

  *Service_Changed_Handle = 0x0000;
1004aab6:	683b      	ldr	r3, [r7, #0]
1004aab8:	2200      	movs	r2, #0
1004aaba:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_service(&gatt_srvc);
1004aabc:	250f      	movs	r5, #15
1004aabe:	197c      	adds	r4, r7, r5
1004aac0:	4b38      	ldr	r3, [pc, #224]	@ (1004aba4 <aci_gatt_srv_profile_init+0xfc>)
1004aac2:	0018      	movs	r0, r3
1004aac4:	f007 fc2a 	bl	1005231c <aci_gatt_srv_add_service>
1004aac8:	0003      	movs	r3, r0
1004aaca:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004aacc:	197b      	adds	r3, r7, r5
1004aace:	781b      	ldrb	r3, [r3, #0]
1004aad0:	2b00      	cmp	r3, #0
1004aad2:	d002      	beq.n	1004aada <aci_gatt_srv_profile_init+0x32>
  {
    return ret;
1004aad4:	197b      	adds	r3, r7, r5
1004aad6:	781b      	ldrb	r3, [r3, #0]
1004aad8:	e060      	b.n	1004ab9c <aci_gatt_srv_profile_init+0xf4>
  }

  gatt_srvc_handle = aci_gatt_srv_get_service_handle(&gatt_srvc);
1004aada:	260c      	movs	r6, #12
1004aadc:	19bc      	adds	r4, r7, r6
1004aade:	4b31      	ldr	r3, [pc, #196]	@ (1004aba4 <aci_gatt_srv_profile_init+0xfc>)
1004aae0:	0018      	movs	r0, r3
1004aae2:	f007 fc28 	bl	10052336 <aci_gatt_srv_get_service_handle>
1004aae6:	0003      	movs	r3, r0
1004aae8:	8023      	strh	r3, [r4, #0]

  if(Characteristics & GATT_INIT_SERVICE_CHANGED_BIT)
1004aaea:	1dfb      	adds	r3, r7, #7
1004aaec:	781b      	ldrb	r3, [r3, #0]
1004aaee:	2201      	movs	r2, #1
1004aaf0:	4013      	ands	r3, r2
1004aaf2:	d011      	beq.n	1004ab18 <aci_gatt_srv_profile_init+0x70>
  {
    ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr, gatt_srvc_handle);
1004aaf4:	250f      	movs	r5, #15
1004aaf6:	197c      	adds	r4, r7, r5
1004aaf8:	19bb      	adds	r3, r7, r6
1004aafa:	881a      	ldrh	r2, [r3, #0]
1004aafc:	4b2a      	ldr	r3, [pc, #168]	@ (1004aba8 <aci_gatt_srv_profile_init+0x100>)
1004aafe:	0011      	movs	r1, r2
1004ab00:	0018      	movs	r0, r3
1004ab02:	f007 fc25 	bl	10052350 <aci_gatt_srv_add_char>
1004ab06:	0003      	movs	r3, r0
1004ab08:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1004ab0a:	197b      	adds	r3, r7, r5
1004ab0c:	781b      	ldrb	r3, [r3, #0]
1004ab0e:	2b00      	cmp	r3, #0
1004ab10:	d002      	beq.n	1004ab18 <aci_gatt_srv_profile_init+0x70>
    {
      return ret;
1004ab12:	197b      	adds	r3, r7, r5
1004ab14:	781b      	ldrb	r3, [r3, #0]
1004ab16:	e041      	b.n	1004ab9c <aci_gatt_srv_profile_init+0xf4>
    }
  }
  *Service_Changed_Handle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr);
1004ab18:	4b23      	ldr	r3, [pc, #140]	@ (1004aba8 <aci_gatt_srv_profile_init+0x100>)
1004ab1a:	0018      	movs	r0, r3
1004ab1c:	f007 fc2b 	bl	10052376 <aci_gatt_srv_get_char_decl_handle>
1004ab20:	0003      	movs	r3, r0
1004ab22:	001a      	movs	r2, r3
1004ab24:	683b      	ldr	r3, [r7, #0]
1004ab26:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_clt_supp_feat_chr, gatt_srvc_handle);
1004ab28:	250f      	movs	r5, #15
1004ab2a:	197c      	adds	r4, r7, r5
1004ab2c:	230c      	movs	r3, #12
1004ab2e:	18fb      	adds	r3, r7, r3
1004ab30:	881a      	ldrh	r2, [r3, #0]
1004ab32:	4b1e      	ldr	r3, [pc, #120]	@ (1004abac <aci_gatt_srv_profile_init+0x104>)
1004ab34:	0011      	movs	r1, r2
1004ab36:	0018      	movs	r0, r3
1004ab38:	f007 fc0a 	bl	10052350 <aci_gatt_srv_add_char>
1004ab3c:	0003      	movs	r3, r0
1004ab3e:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004ab40:	197b      	adds	r3, r7, r5
1004ab42:	781b      	ldrb	r3, [r3, #0]
1004ab44:	2b00      	cmp	r3, #0
1004ab46:	d002      	beq.n	1004ab4e <aci_gatt_srv_profile_init+0xa6>
  {
    return ret;
1004ab48:	197b      	adds	r3, r7, r5
1004ab4a:	781b      	ldrb	r3, [r3, #0]
1004ab4c:	e026      	b.n	1004ab9c <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_db_hash_chr, gatt_srvc_handle);
1004ab4e:	250f      	movs	r5, #15
1004ab50:	197c      	adds	r4, r7, r5
1004ab52:	230c      	movs	r3, #12
1004ab54:	18fb      	adds	r3, r7, r3
1004ab56:	881a      	ldrh	r2, [r3, #0]
1004ab58:	4b15      	ldr	r3, [pc, #84]	@ (1004abb0 <aci_gatt_srv_profile_init+0x108>)
1004ab5a:	0011      	movs	r1, r2
1004ab5c:	0018      	movs	r0, r3
1004ab5e:	f007 fbf7 	bl	10052350 <aci_gatt_srv_add_char>
1004ab62:	0003      	movs	r3, r0
1004ab64:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004ab66:	197b      	adds	r3, r7, r5
1004ab68:	781b      	ldrb	r3, [r3, #0]
1004ab6a:	2b00      	cmp	r3, #0
1004ab6c:	d002      	beq.n	1004ab74 <aci_gatt_srv_profile_init+0xcc>
  {
    return ret;
1004ab6e:	197b      	adds	r3, r7, r5
1004ab70:	781b      	ldrb	r3, [r3, #0]
1004ab72:	e013      	b.n	1004ab9c <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srv_supp_feat_chr, gatt_srvc_handle);
1004ab74:	250f      	movs	r5, #15
1004ab76:	197c      	adds	r4, r7, r5
1004ab78:	230c      	movs	r3, #12
1004ab7a:	18fb      	adds	r3, r7, r3
1004ab7c:	881a      	ldrh	r2, [r3, #0]
1004ab7e:	4b0d      	ldr	r3, [pc, #52]	@ (1004abb4 <aci_gatt_srv_profile_init+0x10c>)
1004ab80:	0011      	movs	r1, r2
1004ab82:	0018      	movs	r0, r3
1004ab84:	f007 fbe4 	bl	10052350 <aci_gatt_srv_add_char>
1004ab88:	0003      	movs	r3, r0
1004ab8a:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004ab8c:	197b      	adds	r3, r7, r5
1004ab8e:	781b      	ldrb	r3, [r3, #0]
1004ab90:	2b00      	cmp	r3, #0
1004ab92:	d002      	beq.n	1004ab9a <aci_gatt_srv_profile_init+0xf2>
  {
    return ret;
1004ab94:	197b      	adds	r3, r7, r5
1004ab96:	781b      	ldrb	r3, [r3, #0]
1004ab98:	e000      	b.n	1004ab9c <aci_gatt_srv_profile_init+0xf4>
  }

  return   BLE_STATUS_SUCCESS;
1004ab9a:	2300      	movs	r3, #0
}
1004ab9c:	0018      	movs	r0, r3
1004ab9e:	46bd      	mov	sp, r7
1004aba0:	b005      	add	sp, #20
1004aba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004aba4:	200014b0 	.word	0x200014b0
1004aba8:	1006cddc 	.word	0x1006cddc
1004abac:	1006ce00 	.word	0x1006ce00
1004abb0:	1006ce24 	.word	0x1006ce24
1004abb4:	1006ce48 	.word	0x1006ce48

1004abb8 <LL_PWR_IsSMPSReady>:
{
1004abb8:	b580      	push	{r7, lr}
1004abba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
1004abbc:	4b05      	ldr	r3, [pc, #20]	@ (1004abd4 <LL_PWR_IsSMPSReady+0x1c>)
1004abbe:	695b      	ldr	r3, [r3, #20]
1004abc0:	2204      	movs	r2, #4
1004abc2:	4013      	ands	r3, r2
1004abc4:	2b04      	cmp	r3, #4
1004abc6:	d101      	bne.n	1004abcc <LL_PWR_IsSMPSReady+0x14>
1004abc8:	2301      	movs	r3, #1
1004abca:	e000      	b.n	1004abce <LL_PWR_IsSMPSReady+0x16>
1004abcc:	2300      	movs	r3, #0
}
1004abce:	0018      	movs	r0, r3
1004abd0:	46bd      	mov	sp, r7
1004abd2:	bd80      	pop	{r7, pc}
1004abd4:	48500000 	.word	0x48500000

1004abd8 <LL_PWR_GetSMPSMode>:
{
1004abd8:	b580      	push	{r7, lr}
1004abda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
1004abdc:	4b03      	ldr	r3, [pc, #12]	@ (1004abec <LL_PWR_GetSMPSMode+0x14>)
1004abde:	69da      	ldr	r2, [r3, #28]
1004abe0:	2380      	movs	r3, #128	@ 0x80
1004abe2:	00db      	lsls	r3, r3, #3
1004abe4:	4013      	ands	r3, r2
}
1004abe6:	0018      	movs	r0, r3
1004abe8:	46bd      	mov	sp, r7
1004abea:	bd80      	pop	{r7, pc}
1004abec:	48500000 	.word	0x48500000

1004abf0 <LL_PWR_SetSMPSPrechargeMode>:
{
1004abf0:	b580      	push	{r7, lr}
1004abf2:	b082      	sub	sp, #8
1004abf4:	af00      	add	r7, sp, #0
1004abf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
1004abf8:	4b06      	ldr	r3, [pc, #24]	@ (1004ac14 <LL_PWR_SetSMPSPrechargeMode+0x24>)
1004abfa:	69db      	ldr	r3, [r3, #28]
1004abfc:	4a06      	ldr	r2, [pc, #24]	@ (1004ac18 <LL_PWR_SetSMPSPrechargeMode+0x28>)
1004abfe:	4013      	ands	r3, r2
1004ac00:	0019      	movs	r1, r3
1004ac02:	4b04      	ldr	r3, [pc, #16]	@ (1004ac14 <LL_PWR_SetSMPSPrechargeMode+0x24>)
1004ac04:	687a      	ldr	r2, [r7, #4]
1004ac06:	430a      	orrs	r2, r1
1004ac08:	61da      	str	r2, [r3, #28]
}
1004ac0a:	46c0      	nop			@ (mov r8, r8)
1004ac0c:	46bd      	mov	sp, r7
1004ac0e:	b002      	add	sp, #8
1004ac10:	bd80      	pop	{r7, pc}
1004ac12:	46c0      	nop			@ (mov r8, r8)
1004ac14:	48500000 	.word	0x48500000
1004ac18:	fffffdff 	.word	0xfffffdff

1004ac1c <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
1004ac1c:	b580      	push	{r7, lr}
1004ac1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
1004ac20:	4b07      	ldr	r3, [pc, #28]	@ (1004ac40 <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
1004ac22:	69da      	ldr	r2, [r3, #28]
1004ac24:	2380      	movs	r3, #128	@ 0x80
1004ac26:	009b      	lsls	r3, r3, #2
1004ac28:	401a      	ands	r2, r3
1004ac2a:	2380      	movs	r3, #128	@ 0x80
1004ac2c:	009b      	lsls	r3, r3, #2
1004ac2e:	429a      	cmp	r2, r3
1004ac30:	d101      	bne.n	1004ac36 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
1004ac32:	2301      	movs	r3, #1
1004ac34:	e000      	b.n	1004ac38 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
1004ac36:	2300      	movs	r3, #0
}
1004ac38:	0018      	movs	r0, r3
1004ac3a:	46bd      	mov	sp, r7
1004ac3c:	bd80      	pop	{r7, pc}
1004ac3e:	46c0      	nop			@ (mov r8, r8)
1004ac40:	48500000 	.word	0x48500000

1004ac44 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
1004ac44:	b580      	push	{r7, lr}
1004ac46:	b082      	sub	sp, #8
1004ac48:	af00      	add	r7, sp, #0
1004ac4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
1004ac4c:	4b06      	ldr	r3, [pc, #24]	@ (1004ac68 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
1004ac4e:	69db      	ldr	r3, [r3, #28]
1004ac50:	220f      	movs	r2, #15
1004ac52:	4393      	bics	r3, r2
1004ac54:	0019      	movs	r1, r3
1004ac56:	4b04      	ldr	r3, [pc, #16]	@ (1004ac68 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
1004ac58:	687a      	ldr	r2, [r7, #4]
1004ac5a:	430a      	orrs	r2, r1
1004ac5c:	61da      	str	r2, [r3, #28]
}
1004ac5e:	46c0      	nop			@ (mov r8, r8)
1004ac60:	46bd      	mov	sp, r7
1004ac62:	b002      	add	sp, #8
1004ac64:	bd80      	pop	{r7, pc}
1004ac66:	46c0      	nop			@ (mov r8, r8)
1004ac68:	48500000 	.word	0x48500000

1004ac6c <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
1004ac6c:	b580      	push	{r7, lr}
1004ac6e:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
1004ac70:	2320      	movs	r3, #32
}
1004ac72:	0018      	movs	r0, r3
1004ac74:	46bd      	mov	sp, r7
1004ac76:	bd80      	pop	{r7, pc}

1004ac78 <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
1004ac78:	b580      	push	{r7, lr}
1004ac7a:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
1004ac7c:	231f      	movs	r3, #31
}
1004ac7e:	0018      	movs	r0, r3
1004ac80:	46bd      	mov	sp, r7
1004ac82:	bd80      	pop	{r7, pc}

1004ac84 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
1004ac84:	b580      	push	{r7, lr}
1004ac86:	b082      	sub	sp, #8
1004ac88:	af00      	add	r7, sp, #0
1004ac8a:	0002      	movs	r2, r0
1004ac8c:	1dfb      	adds	r3, r7, #7
1004ac8e:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
1004ac90:	1dfb      	adds	r3, r7, #7
1004ac92:	781b      	ldrb	r3, [r3, #0]
1004ac94:	2b00      	cmp	r3, #0
1004ac96:	d007      	beq.n	1004aca8 <RADIO_SetHighPower+0x24>
  {
    if(high_power == FALSE)
1004ac98:	4b1d      	ldr	r3, [pc, #116]	@ (1004ad10 <RADIO_SetHighPower+0x8c>)
1004ac9a:	781b      	ldrb	r3, [r3, #0]
1004ac9c:	2b00      	cmp	r3, #0
1004ac9e:	d10a      	bne.n	1004acb6 <RADIO_SetHighPower+0x32>
    {
      high_power = TRUE;
1004aca0:	4b1b      	ldr	r3, [pc, #108]	@ (1004ad10 <RADIO_SetHighPower+0x8c>)
1004aca2:	2201      	movs	r2, #1
1004aca4:	701a      	strb	r2, [r3, #0]
1004aca6:	e006      	b.n	1004acb6 <RADIO_SetHighPower+0x32>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
1004aca8:	4b19      	ldr	r3, [pc, #100]	@ (1004ad10 <RADIO_SetHighPower+0x8c>)
1004acaa:	781b      	ldrb	r3, [r3, #0]
1004acac:	2b01      	cmp	r3, #1
1004acae:	d102      	bne.n	1004acb6 <RADIO_SetHighPower+0x32>
    {
      high_power = FALSE;
1004acb0:	4b17      	ldr	r3, [pc, #92]	@ (1004ad10 <RADIO_SetHighPower+0x8c>)
1004acb2:	2200      	movs	r2, #0
1004acb4:	701a      	strb	r2, [r3, #0]
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
1004acb6:	f7ff ffb1 	bl	1004ac1c <LL_PWR_IsEnabledSMPSPrechargeMode>
1004acba:	1e03      	subs	r3, r0, #0
1004acbc:	d124      	bne.n	1004ad08 <RADIO_SetHighPower+0x84>
1004acbe:	f7ff ff8b 	bl	1004abd8 <LL_PWR_GetSMPSMode>
1004acc2:	0002      	movs	r2, r0
1004acc4:	2380      	movs	r3, #128	@ 0x80
1004acc6:	00db      	lsls	r3, r3, #3
1004acc8:	429a      	cmp	r2, r3
1004acca:	d01d      	beq.n	1004ad08 <RADIO_SetHighPower+0x84>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
1004accc:	2380      	movs	r3, #128	@ 0x80
1004acce:	009b      	lsls	r3, r3, #2
1004acd0:	0018      	movs	r0, r3
1004acd2:	f7ff ff8d 	bl	1004abf0 <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
1004acd6:	46c0      	nop			@ (mov r8, r8)
1004acd8:	f7ff ff6e 	bl	1004abb8 <LL_PWR_IsSMPSReady>
1004acdc:	1e03      	subs	r3, r0, #0
1004acde:	d1fb      	bne.n	1004acd8 <RADIO_SetHighPower+0x54>
  /* Change level */
  if(state != DISABLE)
1004ace0:	1dfb      	adds	r3, r7, #7
1004ace2:	781b      	ldrb	r3, [r3, #0]
1004ace4:	2b00      	cmp	r3, #0
1004ace6:	d003      	beq.n	1004acf0 <RADIO_SetHighPower+0x6c>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
1004ace8:	200e      	movs	r0, #14
1004acea:	f7ff ffab 	bl	1004ac44 <LL_PWR_SMPS_SetOutputVoltageLevel>
1004acee:	e002      	b.n	1004acf6 <RADIO_SetHighPower+0x72>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
1004acf0:	2004      	movs	r0, #4
1004acf2:	f7ff ffa7 	bl	1004ac44 <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
1004acf6:	2000      	movs	r0, #0
1004acf8:	f7ff ff7a 	bl	1004abf0 <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
1004acfc:	46c0      	nop			@ (mov r8, r8)
1004acfe:	f7ff ff5b 	bl	1004abb8 <LL_PWR_IsSMPSReady>
1004ad02:	1e03      	subs	r3, r0, #0
1004ad04:	d0fb      	beq.n	1004acfe <RADIO_SetHighPower+0x7a>
1004ad06:	e000      	b.n	1004ad0a <RADIO_SetHighPower+0x86>
    return;
1004ad08:	46c0      	nop			@ (mov r8, r8)
}
1004ad0a:	46bd      	mov	sp, r7
1004ad0c:	b002      	add	sp, #8
1004ad0e:	bd80      	pop	{r7, pc}
1004ad10:	20000ea5 	.word	0x20000ea5

1004ad14 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
1004ad14:	b580      	push	{r7, lr}
1004ad16:	af00      	add	r7, sp, #0
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
  }
#endif
}
1004ad18:	46c0      	nop			@ (mov r8, r8)
1004ad1a:	46bd      	mov	sp, r7
1004ad1c:	bd80      	pop	{r7, pc}

1004ad1e <SYSTEM_DEBUG_SIGNAL_SET>:
/***********************/
/** System debug APIs **/
/***********************/

void SYSTEM_DEBUG_SIGNAL_SET(system_debug_signal_t signal)
{
1004ad1e:	b580      	push	{r7, lr}
1004ad20:	b082      	sub	sp, #8
1004ad22:	af00      	add	r7, sp, #0
1004ad24:	0002      	movs	r2, r0
1004ad26:	1dfb      	adds	r3, r7, #7
1004ad28:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, system_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
1004ad2a:	46c0      	nop			@ (mov r8, r8)
1004ad2c:	46bd      	mov	sp, r7
1004ad2e:	b002      	add	sp, #8
1004ad30:	bd80      	pop	{r7, pc}

1004ad32 <SYSTEM_DEBUG_SIGNAL_RESET>:

void SYSTEM_DEBUG_SIGNAL_RESET(system_debug_signal_t signal)
{
1004ad32:	b580      	push	{r7, lr}
1004ad34:	b082      	sub	sp, #8
1004ad36:	af00      	add	r7, sp, #0
1004ad38:	0002      	movs	r2, r0
1004ad3a:	1dfb      	adds	r3, r7, #7
1004ad3c:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, system_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
1004ad3e:	46c0      	nop			@ (mov r8, r8)
1004ad40:	46bd      	mov	sp, r7
1004ad42:	b002      	add	sp, #8
1004ad44:	bd80      	pop	{r7, pc}

1004ad46 <LL_SYSCFG_GetDeviceRevision>:
  * @brief  Get the device cut revision (metal fix) information.
  * @rmtoll DIE_ID REVISION   LL_SYSCFG_GetDeviceRevision
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceRevision(void)
{
1004ad46:	b580      	push	{r7, lr}
1004ad48:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
1004ad4a:	2380      	movs	r3, #128	@ 0x80
1004ad4c:	05db      	lsls	r3, r3, #23
1004ad4e:	681b      	ldr	r3, [r3, #0]
1004ad50:	220f      	movs	r2, #15
1004ad52:	4013      	ands	r3, r2
}
1004ad54:	0018      	movs	r0, r3
1004ad56:	46bd      	mov	sp, r7
1004ad58:	bd80      	pop	{r7, pc}

1004ad5a <LL_SYSCFG_GetDeviceVersion>:
  * @brief  Get the device cut version information.
  * @rmtoll DIE_ID VERSION   LL_SYSCFG_GetDeviceVersion
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceVersion(void)
{
1004ad5a:	b580      	push	{r7, lr}
1004ad5c:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
1004ad5e:	2380      	movs	r3, #128	@ 0x80
1004ad60:	05db      	lsls	r3, r3, #23
1004ad62:	681b      	ldr	r3, [r3, #0]
1004ad64:	091b      	lsrs	r3, r3, #4
1004ad66:	220f      	movs	r2, #15
1004ad68:	4013      	ands	r3, r2
}
1004ad6a:	0018      	movs	r0, r3
1004ad6c:	46bd      	mov	sp, r7
1004ad6e:	bd80      	pop	{r7, pc}

1004ad70 <LL_SYSCFG_GetDeviceJTAG_ID>:
  * @brief  Get the JTAG_ID device information.
  * @rmtoll JTAG_ID    LL_SYSCFG_GetDeviceJTAG_ID
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceJTAG_ID(void)
{
1004ad70:	b580      	push	{r7, lr}
1004ad72:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
1004ad74:	2380      	movs	r3, #128	@ 0x80
1004ad76:	05db      	lsls	r3, r3, #23
1004ad78:	685b      	ldr	r3, [r3, #4]
}
1004ad7a:	0018      	movs	r0, r3
1004ad7c:	46bd      	mov	sp, r7
1004ad7e:	bd80      	pop	{r7, pc}

1004ad80 <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
1004ad80:	b580      	push	{r7, lr}
1004ad82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
1004ad84:	4b03      	ldr	r3, [pc, #12]	@ (1004ad94 <LL_GetFlashSize+0x14>)
1004ad86:	681b      	ldr	r3, [r3, #0]
1004ad88:	041b      	lsls	r3, r3, #16
1004ad8a:	0c1b      	lsrs	r3, r3, #16
}
1004ad8c:	0018      	movs	r0, r3
1004ad8e:	46bd      	mov	sp, r7
1004ad90:	bd80      	pop	{r7, pc}
1004ad92:	46c0      	nop			@ (mov r8, r8)
1004ad94:	40001014 	.word	0x40001014

1004ad98 <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
1004ad98:	b580      	push	{r7, lr}
1004ad9a:	b082      	sub	sp, #8
1004ad9c:	af00      	add	r7, sp, #0
    __IOM uint32_t tmpreg;
#if defined(FLASH_FLASH_SIZE_RAM_SIZE)
    tmpreg = (READ_REG(*((uint32_t *)RAMSIZE_BASE_ADDRESS)) & FLASH_FLASH_SIZE_RAM_SIZE) >> FLASH_FLASH_SIZE_RAM_SIZE_Pos;
1004ad9e:	4b08      	ldr	r3, [pc, #32]	@ (1004adc0 <LL_GetRAMSize+0x28>)
1004ada0:	681b      	ldr	r3, [r3, #0]
1004ada2:	0c5b      	lsrs	r3, r3, #17
1004ada4:	2203      	movs	r2, #3
1004ada6:	4013      	ands	r3, r2
1004ada8:	607b      	str	r3, [r7, #4]

    if (tmpreg == 0) {
1004adaa:	687b      	ldr	r3, [r7, #4]
1004adac:	2b00      	cmp	r3, #0
1004adae:	d101      	bne.n	1004adb4 <LL_GetRAMSize+0x1c>
      tmpreg = LL_UTILS_RAMSIZE_32K;
1004adb0:	2301      	movs	r3, #1
1004adb2:	607b      	str	r3, [r7, #4]
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
#endif
    
    return tmpreg;
1004adb4:	687b      	ldr	r3, [r7, #4]
  }
1004adb6:	0018      	movs	r0, r3
1004adb8:	46bd      	mov	sp, r7
1004adba:	b002      	add	sp, #8
1004adbc:	bd80      	pop	{r7, pc}
1004adbe:	46c0      	nop			@ (mov r8, r8)
1004adc0:	40001014 	.word	0x40001014

1004adc4 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
1004adc4:	b580      	push	{r7, lr}
1004adc6:	b084      	sub	sp, #16
1004adc8:	af00      	add	r7, sp, #0
1004adca:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
1004adcc:	687b      	ldr	r3, [r7, #4]
1004adce:	22ff      	movs	r2, #255	@ 0xff
1004add0:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
1004add2:	f7ff ffcd 	bl	1004ad70 <LL_SYSCFG_GetDeviceJTAG_ID>
1004add6:	0003      	movs	r3, r0
1004add8:	60fb      	str	r3, [r7, #12]

#if defined(STM32WB09)
  if(jtag_id == JTAG_ID_CODE_STM32WB09XX)
1004adda:	68fb      	ldr	r3, [r7, #12]
1004addc:	4a18      	ldr	r2, [pc, #96]	@ (1004ae40 <GetPartInfo+0x7c>)
1004adde:	4293      	cmp	r3, r2
1004ade0:	d102      	bne.n	1004ade8 <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB09XX;
1004ade2:	687b      	ldr	r3, [r7, #4]
1004ade4:	2206      	movs	r2, #6
1004ade6:	701a      	strb	r2, [r3, #0]
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
1004ade8:	f7ff ffb7 	bl	1004ad5a <LL_SYSCFG_GetDeviceVersion>
1004adec:	0003      	movs	r3, r0
1004adee:	b2da      	uxtb	r2, r3
1004adf0:	687b      	ldr	r3, [r7, #4]
1004adf2:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
1004adf4:	f7ff ffa7 	bl	1004ad46 <LL_SYSCFG_GetDeviceRevision>
1004adf8:	0003      	movs	r3, r0
1004adfa:	b2da      	uxtb	r2, r3
1004adfc:	687b      	ldr	r3, [r7, #4]
1004adfe:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
1004ae00:	f7ff ffb6 	bl	1004ad70 <LL_SYSCFG_GetDeviceJTAG_ID>
1004ae04:	0002      	movs	r2, r0
1004ae06:	687b      	ldr	r3, [r7, #4]
1004ae08:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
1004ae0a:	f7ff ffb9 	bl	1004ad80 <LL_GetFlashSize>
1004ae0e:	0003      	movs	r3, r0
1004ae10:	3301      	adds	r3, #1
1004ae12:	009a      	lsls	r2, r3, #2
1004ae14:	687b      	ldr	r3, [r7, #4]
1004ae16:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
1004ae18:	f7ff ffbe 	bl	1004ad98 <LL_GetRAMSize>
1004ae1c:	1e03      	subs	r3, r0, #0
1004ae1e:	d007      	beq.n	1004ae30 <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
1004ae20:	f7ff ffba 	bl	1004ad98 <LL_GetRAMSize>
1004ae24:	0003      	movs	r3, r0
1004ae26:	3301      	adds	r3, #1
1004ae28:	039a      	lsls	r2, r3, #14
1004ae2a:	687b      	ldr	r3, [r7, #4]
1004ae2c:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
1004ae2e:	e003      	b.n	1004ae38 <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
1004ae30:	687b      	ldr	r3, [r7, #4]
1004ae32:	22c0      	movs	r2, #192	@ 0xc0
1004ae34:	01d2      	lsls	r2, r2, #7
1004ae36:	60da      	str	r2, [r3, #12]
}
1004ae38:	46c0      	nop			@ (mov r8, r8)
1004ae3a:	46bd      	mov	sp, r7
1004ae3c:	b004      	add	sp, #16
1004ae3e:	bd80      	pop	{r7, pc}
1004ae40:	02032041 	.word	0x02032041

1004ae44 <Osal_MemCpy4>:
 * A version of the memcpy that only uses 32-bit accesses.
 * dest and src must be 32-bit aligned and size must be a multiple of 4.
 */
void Osal_MemCpy4(uint32_t *dest, const uint32_t *src, unsigned int size)
{
    for (unsigned int i = 0; i < size/4; i++)
1004ae44:	2300      	movs	r3, #0
{
1004ae46:	b510      	push	{r4, lr}
    for (unsigned int i = 0; i < size/4; i++)
1004ae48:	0892      	lsrs	r2, r2, #2
1004ae4a:	0092      	lsls	r2, r2, #2
1004ae4c:	4293      	cmp	r3, r2
1004ae4e:	d100      	bne.n	1004ae52 <Osal_MemCpy4+0xe>
        dest[i] = src[i];
}
1004ae50:	bd10      	pop	{r4, pc}
        dest[i] = src[i];
1004ae52:	58cc      	ldr	r4, [r1, r3]
1004ae54:	50c4      	str	r4, [r0, r3]
    for (unsigned int i = 0; i < size/4; i++)
1004ae56:	3304      	adds	r3, #4
1004ae58:	e7f8      	b.n	1004ae4c <Osal_MemCpy4+0x8>
	...

1004ae5c <LL_RCC_GetLPUARTClockSource>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
1004ae5c:	4b02      	ldr	r3, [pc, #8]	@ (1004ae68 <LL_RCC_GetLPUARTClockSource+0xc>)
1004ae5e:	6898      	ldr	r0, [r3, #8]
1004ae60:	2380      	movs	r3, #128	@ 0x80
1004ae62:	019b      	lsls	r3, r3, #6
1004ae64:	4018      	ands	r0, r3
}
1004ae66:	4770      	bx	lr
1004ae68:	48400000 	.word	0x48400000

1004ae6c <LL_AHB1_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->AHBENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004ae6c:	4b03      	ldr	r3, [pc, #12]	@ (1004ae7c <LL_AHB1_GRP1_IsEnabledClock+0x10>)
1004ae6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004ae70:	4003      	ands	r3, r0
1004ae72:	1a18      	subs	r0, r3, r0
1004ae74:	4243      	negs	r3, r0
1004ae76:	4158      	adcs	r0, r3
}
1004ae78:	4770      	bx	lr
1004ae7a:	46c0      	nop			@ (mov r8, r8)
1004ae7c:	48400000 	.word	0x48400000

1004ae80 <LL_APB0_GRP1_EnableClock>:
  SET_BIT(RCC->APB0ENR, Periphs);
1004ae80:	4b05      	ldr	r3, [pc, #20]	@ (1004ae98 <LL_APB0_GRP1_EnableClock+0x18>)
{
1004ae82:	b082      	sub	sp, #8
  SET_BIT(RCC->APB0ENR, Periphs);
1004ae84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
1004ae86:	4302      	orrs	r2, r0
1004ae88:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
1004ae8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004ae8c:	4018      	ands	r0, r3
1004ae8e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
1004ae90:	9b01      	ldr	r3, [sp, #4]
}
1004ae92:	b002      	add	sp, #8
1004ae94:	4770      	bx	lr
1004ae96:	46c0      	nop			@ (mov r8, r8)
1004ae98:	48400000 	.word	0x48400000

1004ae9c <LL_APB0_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB0ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004ae9c:	4b03      	ldr	r3, [pc, #12]	@ (1004aeac <LL_APB0_GRP1_IsEnabledClock+0x10>)
1004ae9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004aea0:	4003      	ands	r3, r0
1004aea2:	1a18      	subs	r0, r3, r0
1004aea4:	4243      	negs	r3, r0
1004aea6:	4158      	adcs	r0, r3
}
1004aea8:	4770      	bx	lr
1004aeaa:	46c0      	nop			@ (mov r8, r8)
1004aeac:	48400000 	.word	0x48400000

1004aeb0 <LL_APB0_GRP1_DisableClock>:
  CLEAR_BIT(RCC->APB0ENR, Periphs);
1004aeb0:	4a02      	ldr	r2, [pc, #8]	@ (1004aebc <LL_APB0_GRP1_DisableClock+0xc>)
1004aeb2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
1004aeb4:	4383      	bics	r3, r0
1004aeb6:	6553      	str	r3, [r2, #84]	@ 0x54
}
1004aeb8:	4770      	bx	lr
1004aeba:	46c0      	nop			@ (mov r8, r8)
1004aebc:	48400000 	.word	0x48400000

1004aec0 <LL_APB1_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB1ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004aec0:	4b03      	ldr	r3, [pc, #12]	@ (1004aed0 <LL_APB1_GRP1_IsEnabledClock+0x10>)
1004aec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004aec4:	4003      	ands	r3, r0
1004aec6:	1a18      	subs	r0, r3, r0
1004aec8:	4243      	negs	r3, r0
1004aeca:	4158      	adcs	r0, r3
}
1004aecc:	4770      	bx	lr
1004aece:	46c0      	nop			@ (mov r8, r8)
1004aed0:	48400000 	.word	0x48400000

1004aed4 <LL_APB2_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004aed4:	4b03      	ldr	r3, [pc, #12]	@ (1004aee4 <LL_APB2_GRP1_IsEnabledClock+0x10>)
1004aed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004aed8:	4003      	ands	r3, r0
1004aeda:	1a18      	subs	r0, r3, r0
1004aedc:	4243      	negs	r3, r0
1004aede:	4158      	adcs	r0, r3
}
1004aee0:	4770      	bx	lr
1004aee2:	46c0      	nop			@ (mov r8, r8)
1004aee4:	48400000 	.word	0x48400000

1004aee8 <APB0periphContextSave>:
  * @brief  Save the APB0 peripheral registers content.
  * @param  apb0 Pointer to a APB0 structure
  * @retval None
  */
static void APB0periphContextSave(apb0PeriphT *apb0)
{
1004aee8:	b510      	push	{r4, lr}
1004aeea:	0004      	movs	r4, r0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_SYSCFG))
1004aeec:	2080      	movs	r0, #128	@ 0x80
1004aeee:	0040      	lsls	r0, r0, #1
1004aef0:	f7ff ffd4 	bl	1004ae9c <LL_APB0_GRP1_IsEnabledClock>
1004aef4:	2800      	cmp	r0, #0
1004aef6:	d005      	beq.n	1004af04 <APB0periphContextSave+0x1c>
  {
    Osal_MemCpy4((uint32_t *)&apb0->SYSCFG_vr, (uint32_t *)SYSCFG, sizeof(SYSCFG_TypeDef));
1004aef8:	2180      	movs	r1, #128	@ 0x80
1004aefa:	2240      	movs	r2, #64	@ 0x40
1004aefc:	0020      	movs	r0, r4
1004aefe:	05c9      	lsls	r1, r1, #23
1004af00:	f7ff ffa0 	bl	1004ae44 <Osal_MemCpy4>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM1_vr, (uint32_t *)TIM1, sizeof(TIM_TypeDef));
  }
#endif
#if defined(TIM2)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM2))
1004af04:	2001      	movs	r0, #1
1004af06:	f7ff ffc9 	bl	1004ae9c <LL_APB0_GRP1_IsEnabledClock>
1004af0a:	2800      	cmp	r0, #0
1004af0c:	d005      	beq.n	1004af1a <APB0periphContextSave+0x32>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM2_vr, (uint32_t *)TIM2, sizeof(TIM_TypeDef));
1004af0e:	0020      	movs	r0, r4
1004af10:	2264      	movs	r2, #100	@ 0x64
1004af12:	4919      	ldr	r1, [pc, #100]	@ (1004af78 <APB0periphContextSave+0x90>)
1004af14:	3044      	adds	r0, #68	@ 0x44
1004af16:	f7ff ff95 	bl	1004ae44 <Osal_MemCpy4>
  }
#endif
#if defined(TIM16)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM16))
1004af1a:	2002      	movs	r0, #2
1004af1c:	f7ff ffbe 	bl	1004ae9c <LL_APB0_GRP1_IsEnabledClock>
1004af20:	2800      	cmp	r0, #0
1004af22:	d005      	beq.n	1004af30 <APB0periphContextSave+0x48>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM16_vr, (uint32_t *)TIM16, sizeof(TIM_TypeDef));
1004af24:	0020      	movs	r0, r4
1004af26:	2264      	movs	r2, #100	@ 0x64
1004af28:	4914      	ldr	r1, [pc, #80]	@ (1004af7c <APB0periphContextSave+0x94>)
1004af2a:	30a8      	adds	r0, #168	@ 0xa8
1004af2c:	f7ff ff8a 	bl	1004ae44 <Osal_MemCpy4>
  }
#endif
#if defined(TIM17)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM17))
1004af30:	2004      	movs	r0, #4
1004af32:	f7ff ffb3 	bl	1004ae9c <LL_APB0_GRP1_IsEnabledClock>
1004af36:	2800      	cmp	r0, #0
1004af38:	d006      	beq.n	1004af48 <APB0periphContextSave+0x60>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM17_vr, (uint32_t *)TIM17, sizeof(TIM_TypeDef));
1004af3a:	0020      	movs	r0, r4
1004af3c:	300d      	adds	r0, #13
1004af3e:	2264      	movs	r2, #100	@ 0x64
1004af40:	490f      	ldr	r1, [pc, #60]	@ (1004af80 <APB0periphContextSave+0x98>)
1004af42:	30ff      	adds	r0, #255	@ 0xff
1004af44:	f7ff ff7e 	bl	1004ae44 <Osal_MemCpy4>
  }
#endif

  apb0->wdg_to_be_enabled = FALSE;
1004af48:	0022      	movs	r2, r4
1004af4a:	2300      	movs	r3, #0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_WDG))
1004af4c:	2080      	movs	r0, #128	@ 0x80
  apb0->wdg_to_be_enabled = FALSE;
1004af4e:	32fc      	adds	r2, #252	@ 0xfc
1004af50:	6753      	str	r3, [r2, #116]	@ 0x74
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_WDG))
1004af52:	01c0      	lsls	r0, r0, #7
1004af54:	f7ff ffa2 	bl	1004ae9c <LL_APB0_GRP1_IsEnabledClock>
1004af58:	2800      	cmp	r0, #0
1004af5a:	d008      	beq.n	1004af6e <APB0periphContextSave+0x86>
  {
    if (apb0->deepstop_wdg_state == DISABLE)
1004af5c:	6f93      	ldr	r3, [r2, #120]	@ 0x78
1004af5e:	2b00      	cmp	r3, #0
1004af60:	d105      	bne.n	1004af6e <APB0periphContextSave+0x86>
    {
      apb0->wdg_to_be_enabled = TRUE;
      LL_APB0_GRP1_DisableClock(LL_APB0_GRP1_PERIPH_WDG);
1004af62:	2080      	movs	r0, #128	@ 0x80
      apb0->wdg_to_be_enabled = TRUE;
1004af64:	3301      	adds	r3, #1
1004af66:	6753      	str	r3, [r2, #116]	@ 0x74
      LL_APB0_GRP1_DisableClock(LL_APB0_GRP1_PERIPH_WDG);
1004af68:	01c0      	lsls	r0, r0, #7
1004af6a:	f7ff ffa1 	bl	1004aeb0 <LL_APB0_GRP1_DisableClock>
    }
  }

  apb0->FLASH_CONFIG_vr = FLASH->CONFIG;
1004af6e:	4b05      	ldr	r3, [pc, #20]	@ (1004af84 <APB0periphContextSave+0x9c>)
1004af70:	685b      	ldr	r3, [r3, #4]
1004af72:	6423      	str	r3, [r4, #64]	@ 0x40
}
1004af74:	bd10      	pop	{r4, pc}
1004af76:	46c0      	nop			@ (mov r8, r8)
1004af78:	40002000 	.word	0x40002000
1004af7c:	40005000 	.word	0x40005000
1004af80:	40006000 	.word	0x40006000
1004af84:	40001000 	.word	0x40001000

1004af88 <APB1periphContextSave>:
  * @brief  Save the APB1 peripheral registers content.
  * @param  apb1 Pointer to a APB1 structure
  * @retval None
  */
static void APB1periphContextSave(apb1PeriphT *apb1)
{
1004af88:	b510      	push	{r4, lr}
1004af8a:	0004      	movs	r4, r0
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI2))
  {
    Osal_MemCpy4((uint32_t *)&apb1->SPI2_vr, (uint32_t *)SPI2, sizeof(SPI_TypeDef));
  }
#endif
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI3))
1004af8c:	2080      	movs	r0, #128	@ 0x80
1004af8e:	01c0      	lsls	r0, r0, #7
1004af90:	f7ff ff96 	bl	1004aec0 <LL_APB1_GRP1_IsEnabledClock>
1004af94:	2800      	cmp	r0, #0
1004af96:	d005      	beq.n	1004afa4 <APB1periphContextSave+0x1c>
  {
    Osal_MemCpy4((uint32_t *)&apb1->SPI3_vr, (uint32_t *)SPI3, sizeof(SPI_TypeDef));
1004af98:	0020      	movs	r0, r4
1004af9a:	2224      	movs	r2, #36	@ 0x24
1004af9c:	491b      	ldr	r1, [pc, #108]	@ (1004b00c <APB1periphContextSave+0x84>)
1004af9e:	30e4      	adds	r0, #228	@ 0xe4
1004afa0:	f7ff ff50 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_ADCDIG))
1004afa4:	2010      	movs	r0, #16
1004afa6:	f7ff ff8b 	bl	1004aec0 <LL_APB1_GRP1_IsEnabledClock>
1004afaa:	2800      	cmp	r0, #0
1004afac:	d005      	beq.n	1004afba <APB1periphContextSave+0x32>
  {
    Osal_MemCpy4((uint32_t *)&apb1->ADC_vr, (uint32_t *)ADC1, sizeof(ADC_TypeDef));
1004afae:	0020      	movs	r0, r4
1004afb0:	2258      	movs	r2, #88	@ 0x58
1004afb2:	4917      	ldr	r1, [pc, #92]	@ (1004b010 <APB1periphContextSave+0x88>)
1004afb4:	308c      	adds	r0, #140	@ 0x8c
1004afb6:	f7ff ff45 	bl	1004ae44 <Osal_MemCpy4>
  }

#if defined(STM32WB06) || defined(STM32WB07)
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1))
#else
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
1004afba:	2080      	movs	r0, #128	@ 0x80
1004afbc:	0040      	lsls	r0, r0, #1
1004afbe:	f7ff ff7f 	bl	1004aec0 <LL_APB1_GRP1_IsEnabledClock>
1004afc2:	2800      	cmp	r0, #0
1004afc4:	d009      	beq.n	1004afda <APB1periphContextSave+0x52>
     (LL_RCC_GetLPUARTClockSource() == LL_RCC_LPUCLKSEL_CLK16M))
1004afc6:	f7ff ff49 	bl	1004ae5c <LL_RCC_GetLPUARTClockSource>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
1004afca:	2800      	cmp	r0, #0
1004afcc:	d105      	bne.n	1004afda <APB1periphContextSave+0x52>
#endif
  {
    Osal_MemCpy4((uint32_t *)&apb1->LPUART_vr, (uint32_t *)LPUART1, sizeof(USART_TypeDef));
1004afce:	0020      	movs	r0, r4
1004afd0:	2230      	movs	r2, #48	@ 0x30
1004afd2:	4910      	ldr	r1, [pc, #64]	@ (1004b014 <APB1periphContextSave+0x8c>)
1004afd4:	305c      	adds	r0, #92	@ 0x5c
1004afd6:	f7ff ff35 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_USART1))
1004afda:	2080      	movs	r0, #128	@ 0x80
1004afdc:	00c0      	lsls	r0, r0, #3
1004afde:	f7ff ff6f 	bl	1004aec0 <LL_APB1_GRP1_IsEnabledClock>
1004afe2:	2800      	cmp	r0, #0
1004afe4:	d005      	beq.n	1004aff2 <APB1periphContextSave+0x6a>
  {
    Osal_MemCpy4((uint32_t *)&apb1->USART_vr, (uint32_t *)USART1, sizeof(USART_TypeDef));
1004afe6:	0020      	movs	r0, r4
1004afe8:	2230      	movs	r2, #48	@ 0x30
1004afea:	490b      	ldr	r1, [pc, #44]	@ (1004b018 <APB1periphContextSave+0x90>)
1004afec:	302c      	adds	r0, #44	@ 0x2c
1004afee:	f7ff ff29 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C1))
1004aff2:	2080      	movs	r0, #128	@ 0x80
1004aff4:	0380      	lsls	r0, r0, #14
1004aff6:	f7ff ff63 	bl	1004aec0 <LL_APB1_GRP1_IsEnabledClock>
1004affa:	2800      	cmp	r0, #0
1004affc:	d005      	beq.n	1004b00a <APB1periphContextSave+0x82>
  {
    Osal_MemCpy4((uint32_t *)&apb1->I2C1_vr, (uint32_t *)I2C1, sizeof(I2C_TypeDef));
1004affe:	2182      	movs	r1, #130	@ 0x82
1004b000:	222c      	movs	r2, #44	@ 0x2c
1004b002:	0020      	movs	r0, r4
1004b004:	05c9      	lsls	r1, r1, #23
1004b006:	f7ff ff1d 	bl	1004ae44 <Osal_MemCpy4>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C2))
  {
    Osal_MemCpy4((uint32_t *)&apb1->I2C2_vr, (uint32_t *)I2C2, sizeof(I2C_TypeDef));
  }
#endif
}
1004b00a:	bd10      	pop	{r4, pc}
1004b00c:	41007000 	.word	0x41007000
1004b010:	41006000 	.word	0x41006000
1004b014:	41005000 	.word	0x41005000
1004b018:	41004000 	.word	0x41004000

1004b01c <APB2periphContextSave>:
  * @brief  Save the APB2 peripheral registers content.
  * @param  apb2 Pointer to a APB2 structure
  * @retval None
  */
static void APB2periphContextSave(apb2PeriphT *apb2)
{
1004b01c:	b510      	push	{r4, lr}
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004b01e:	2001      	movs	r0, #1
1004b020:	f7ff ff58 	bl	1004aed4 <LL_APB2_GRP1_IsEnabledClock>
  {
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
    apb2->LDO_TRANSFO_vr = READ_BIT(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS);
#endif
  }
}
1004b024:	bd10      	pop	{r4, pc}
	...

1004b028 <AHB0periphContextSave>:
  * @brief  Save the AHB0 peripheral registers content.
  * @param  ahb0 Pointer to a AHB0 structure
  * @retval None
  */
static void AHB0periphContextSave(ahb0PeriphT *ahb0)
{
1004b028:	b510      	push	{r4, lr}
1004b02a:	0004      	movs	r4, r0
  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
1004b02c:	2001      	movs	r0, #1
1004b02e:	f7ff ff1d 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b032:	2800      	cmp	r0, #0
1004b034:	d00d      	beq.n	1004b052 <AHB0periphContextSave+0x2a>
    Osal_MemCpy4((uint32_t *)ahb0->DMAMUX_vr, (uint32_t *)DMAMUX1, 8*sizeof(DMAMUX_Channel_TypeDef));
1004b036:	0020      	movs	r0, r4
1004b038:	2191      	movs	r1, #145	@ 0x91
1004b03a:	309d      	adds	r0, #157	@ 0x9d
1004b03c:	2220      	movs	r2, #32
1004b03e:	05c9      	lsls	r1, r1, #23
1004b040:	30ff      	adds	r0, #255	@ 0xff
1004b042:	f7ff feff 	bl	1004ae44 <Osal_MemCpy4>
    Osal_MemCpy4((uint32_t *)ahb0->DMA_vr, (uint32_t *)DMA1, 8*sizeof(DMA_Channel_TypeDef));
1004b046:	0020      	movs	r0, r4
1004b048:	22a0      	movs	r2, #160	@ 0xa0
1004b04a:	4925      	ldr	r1, [pc, #148]	@ (1004b0e0 <AHB0periphContextSave+0xb8>)
1004b04c:	30fc      	adds	r0, #252	@ 0xfc
1004b04e:	f7ff fef9 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_RNG)) {
1004b052:	2080      	movs	r0, #128	@ 0x80
1004b054:	02c0      	lsls	r0, r0, #11
1004b056:	f7ff ff09 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b05a:	2800      	cmp	r0, #0
1004b05c:	d005      	beq.n	1004b06a <AHB0periphContextSave+0x42>
    Osal_MemCpy4((uint32_t *)&ahb0->RNG_vr, (uint32_t *)RNG, sizeof(RNG_TypeDef));
1004b05e:	0020      	movs	r0, r4
1004b060:	2288      	movs	r2, #136	@ 0x88
1004b062:	4920      	ldr	r1, [pc, #128]	@ (1004b0e4 <AHB0periphContextSave+0xbc>)
1004b064:	3074      	adds	r0, #116	@ 0x74
1004b066:	f7ff feed 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_PKA)) {
1004b06a:	2080      	movs	r0, #128	@ 0x80
1004b06c:	0240      	lsls	r0, r0, #9
1004b06e:	f7ff fefd 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b072:	2800      	cmp	r0, #0
1004b074:	d002      	beq.n	1004b07c <AHB0periphContextSave+0x54>
#if defined(STM32WB06) || defined(STM32WB07)
    ahb0->PKA_CSR_vr = PKA->CSR;
    ahb0->PKA_ISR_vr = PKA->ISR;
    ahb0->PKA_IEN_vr = PKA->IEN;
#else
    ahb0->PKA_CR_vr = PKA->CR;
1004b076:	4b1c      	ldr	r3, [pc, #112]	@ (1004b0e8 <AHB0periphContextSave+0xc0>)
1004b078:	681b      	ldr	r3, [r3, #0]
1004b07a:	6723      	str	r3, [r4, #112]	@ 0x70
#endif
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_CRC)) {
1004b07c:	2080      	movs	r0, #128	@ 0x80
1004b07e:	0140      	lsls	r0, r0, #5
1004b080:	f7ff fef4 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b084:	2800      	cmp	r0, #0
1004b086:	d005      	beq.n	1004b094 <AHB0periphContextSave+0x6c>
    Osal_MemCpy4((uint32_t *)&ahb0->CRC_vr, (uint32_t *)CRC, sizeof(CRC_TypeDef));
1004b088:	0020      	movs	r0, r4
1004b08a:	2218      	movs	r2, #24
1004b08c:	4917      	ldr	r1, [pc, #92]	@ (1004b0ec <AHB0periphContextSave+0xc4>)
1004b08e:	3058      	adds	r0, #88	@ 0x58
1004b090:	f7ff fed8 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOA)) {
1004b094:	2004      	movs	r0, #4
1004b096:	f7ff fee9 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b09a:	2800      	cmp	r0, #0
1004b09c:	d005      	beq.n	1004b0aa <AHB0periphContextSave+0x82>
    Osal_MemCpy4((uint32_t *)&ahb0->GPIOA_vr, (uint32_t *)GPIOA, sizeof(GPIO_TypeDef));
1004b09e:	2190      	movs	r1, #144	@ 0x90
1004b0a0:	222c      	movs	r2, #44	@ 0x2c
1004b0a2:	0020      	movs	r0, r4
1004b0a4:	05c9      	lsls	r1, r1, #23
1004b0a6:	f7ff fecd 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOB)) {
1004b0aa:	2008      	movs	r0, #8
1004b0ac:	f7ff fede 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b0b0:	2800      	cmp	r0, #0
1004b0b2:	d004      	beq.n	1004b0be <AHB0periphContextSave+0x96>
    Osal_MemCpy4((uint32_t *)&ahb0->GPIOB_vr, (uint32_t *)GPIOB, sizeof(GPIO_TypeDef));
1004b0b4:	222c      	movs	r2, #44	@ 0x2c
1004b0b6:	490e      	ldr	r1, [pc, #56]	@ (1004b0f0 <AHB0periphContextSave+0xc8>)
1004b0b8:	18a0      	adds	r0, r4, r2
1004b0ba:	f7ff fec3 	bl	1004ae44 <Osal_MemCpy4>
  }

  ahb0->RCC_AHBRSTR_vr  = RCC->AHBRSTR;
1004b0be:	22de      	movs	r2, #222	@ 0xde
1004b0c0:	4b0c      	ldr	r3, [pc, #48]	@ (1004b0f4 <AHB0periphContextSave+0xcc>)
1004b0c2:	0052      	lsls	r2, r2, #1
1004b0c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
1004b0c6:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_APB1RSTR_vr = RCC->APB1RSTR;
1004b0c8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
1004b0ca:	3204      	adds	r2, #4
1004b0cc:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_AHBENR_vr   = RCC->AHBENR;
1004b0ce:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004b0d0:	3204      	adds	r2, #4
1004b0d2:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_APB1ENR_vr  = RCC->APB1ENR;
1004b0d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1004b0d6:	23e4      	movs	r3, #228	@ 0xe4
1004b0d8:	005b      	lsls	r3, r3, #1
1004b0da:	50e2      	str	r2, [r4, r3]
}
1004b0dc:	bd10      	pop	{r4, pc}
1004b0de:	46c0      	nop			@ (mov r8, r8)
1004b0e0:	48700000 	.word	0x48700000
1004b0e4:	48600000 	.word	0x48600000
1004b0e8:	48300000 	.word	0x48300000
1004b0ec:	48200000 	.word	0x48200000
1004b0f0:	48100000 	.word	0x48100000
1004b0f4:	48400000 	.word	0x48400000

1004b0f8 <cstackContextSave>:
{
  uint8_t i;
  volatile uint32_t *ptr;

  i = 0;
  ptr = __vector_table[0].__ptr ;
1004b0f8:	4b04      	ldr	r3, [pc, #16]	@ (1004b10c <cstackContextSave+0x14>)
1004b0fa:	681a      	ldr	r2, [r3, #0]
  ptr -= CSTACK_PREAMBLE_NUMBER;
1004b0fc:	0013      	movs	r3, r2
1004b0fe:	3b50      	subs	r3, #80	@ 0x50
  do
  {
    cStackPreamble[i] = *ptr;
1004b100:	cb02      	ldmia	r3!, {r1}
1004b102:	c002      	stmia	r0!, {r1}
    i++;
    ptr++;
  } while (i < CSTACK_PREAMBLE_NUMBER);
1004b104:	429a      	cmp	r2, r3
1004b106:	d1fb      	bne.n	1004b100 <cstackContextSave+0x8>

}
1004b108:	4770      	bx	lr
1004b10a:	46c0      	nop			@ (mov r8, r8)
1004b10c:	10040000 	.word	0x10040000

1004b110 <cpuPeriphContextSave>:
  */
static void cpuPeriphContextSave(cpuPeriphT *cpuPeriph)
{
  uint8_t i;

  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
1004b110:	4b0d      	ldr	r3, [pc, #52]	@ (1004b148 <cpuPeriphContextSave+0x38>)
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
1004b112:	490e      	ldr	r1, [pc, #56]	@ (1004b14c <cpuPeriphContextSave+0x3c>)
  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
1004b114:	689b      	ldr	r3, [r3, #8]
{
1004b116:	b530      	push	{r4, r5, lr}
  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
1004b118:	6003      	str	r3, [r0, #0]
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
1004b11a:	680b      	ldr	r3, [r1, #0]
  for (i=0; i<8; i++)
  {
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
1004b11c:	0004      	movs	r4, r0
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
1004b11e:	6043      	str	r3, [r0, #4]
1004b120:	2300      	movs	r3, #0
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
1004b122:	3408      	adds	r4, #8
1004b124:	001a      	movs	r2, r3
1004b126:	32c0      	adds	r2, #192	@ 0xc0
1004b128:	0092      	lsls	r2, r2, #2
1004b12a:	588d      	ldr	r5, [r1, r2]
1004b12c:	009a      	lsls	r2, r3, #2
  for (i=0; i<8; i++)
1004b12e:	3301      	adds	r3, #1
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
1004b130:	50a5      	str	r5, [r4, r2]
  for (i=0; i<8; i++)
1004b132:	2b08      	cmp	r3, #8
1004b134:	d1f6      	bne.n	1004b124 <cpuPeriphContextSave+0x14>
  }
  cpuPeriph->SYSTICK_IPR_vr = *(volatile uint32_t *)SHPR3_REG;
1004b136:	4b06      	ldr	r3, [pc, #24]	@ (1004b150 <cpuPeriphContextSave+0x40>)
1004b138:	681b      	ldr	r3, [r3, #0]
1004b13a:	6283      	str	r3, [r0, #40]	@ 0x28
  cpuPeriph->SYST_CSR_vr = SysTick->CTRL;
1004b13c:	4b05      	ldr	r3, [pc, #20]	@ (1004b154 <cpuPeriphContextSave+0x44>)
1004b13e:	681a      	ldr	r2, [r3, #0]
1004b140:	62c2      	str	r2, [r0, #44]	@ 0x2c
  cpuPeriph->SYST_RVR_vr = SysTick->LOAD;
1004b142:	685b      	ldr	r3, [r3, #4]
1004b144:	6303      	str	r3, [r0, #48]	@ 0x30
}
1004b146:	bd30      	pop	{r4, r5, pc}
1004b148:	e000ed00 	.word	0xe000ed00
1004b14c:	e000e100 	.word	0xe000e100
1004b150:	e000ed20 	.word	0xe000ed20
1004b154:	e000e010 	.word	0xe000e010

1004b158 <APB0periphContextRestore>:
  * @brief  Restore the APB0 peripheral registers content.
  * @param  apb0 Pointer to a APB0 structure
  * @retval None
  */
static void APB0periphContextRestore(apb0PeriphT *apb0)
{
1004b158:	b570      	push	{r4, r5, r6, lr}
1004b15a:	0004      	movs	r4, r0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_SYSCFG))
1004b15c:	2080      	movs	r0, #128	@ 0x80
1004b15e:	0040      	lsls	r0, r0, #1
1004b160:	f7ff fe9c 	bl	1004ae9c <LL_APB0_GRP1_IsEnabledClock>
1004b164:	2800      	cmp	r0, #0
1004b166:	d005      	beq.n	1004b174 <APB0periphContextRestore+0x1c>
  {
    Osal_MemCpy4((uint32_t *)SYSCFG, (uint32_t *)&apb0->SYSCFG_vr, sizeof(SYSCFG_TypeDef));
1004b168:	2080      	movs	r0, #128	@ 0x80
1004b16a:	2240      	movs	r2, #64	@ 0x40
1004b16c:	0021      	movs	r1, r4
1004b16e:	05c0      	lsls	r0, r0, #23
1004b170:	f7ff fe68 	bl	1004ae44 <Osal_MemCpy4>
    TIM1->CR1 = app;
  }
#endif

#if defined(TIM2)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM2))
1004b174:	2001      	movs	r0, #1
1004b176:	f7ff fe91 	bl	1004ae9c <LL_APB0_GRP1_IsEnabledClock>
1004b17a:	2800      	cmp	r0, #0
1004b17c:	d00c      	beq.n	1004b198 <APB0periphContextRestore+0x40>
  {
    uint32_t app;
    app = apb0->TIM2_vr.CR1;
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
1004b17e:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004b180:	0021      	movs	r1, r4
    app = apb0->TIM2_vr.CR1;
1004b182:	6c66      	ldr	r6, [r4, #68]	@ 0x44
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
1004b184:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004b186:	4d1a      	ldr	r5, [pc, #104]	@ (1004b1f0 <APB0periphContextRestore+0x98>)
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
1004b188:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004b18a:	0028      	movs	r0, r5
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
1004b18c:	6463      	str	r3, [r4, #68]	@ 0x44
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004b18e:	3263      	adds	r2, #99	@ 0x63
1004b190:	3144      	adds	r1, #68	@ 0x44
1004b192:	f7ff fe57 	bl	1004ae44 <Osal_MemCpy4>
    TIM2->CR1 = app;
1004b196:	602e      	str	r6, [r5, #0]
  }
#endif

#if defined(TIM16)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM16))
1004b198:	2002      	movs	r0, #2
1004b19a:	f7ff fe7f 	bl	1004ae9c <LL_APB0_GRP1_IsEnabledClock>
1004b19e:	2800      	cmp	r0, #0
1004b1a0:	d00c      	beq.n	1004b1bc <APB0periphContextRestore+0x64>
  {
    uint32_t app;
    app = apb0->TIM16_vr.CR1;
1004b1a2:	0021      	movs	r1, r4
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004b1a4:	2201      	movs	r2, #1
    app = apb0->TIM16_vr.CR1;
1004b1a6:	31a8      	adds	r1, #168	@ 0xa8
1004b1a8:	680e      	ldr	r6, [r1, #0]
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004b1aa:	680b      	ldr	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
1004b1ac:	4d11      	ldr	r5, [pc, #68]	@ (1004b1f4 <APB0periphContextRestore+0x9c>)
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004b1ae:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
1004b1b0:	0028      	movs	r0, r5
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004b1b2:	600b      	str	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
1004b1b4:	3263      	adds	r2, #99	@ 0x63
1004b1b6:	f7ff fe45 	bl	1004ae44 <Osal_MemCpy4>
    TIM16->CR1 = app;
1004b1ba:	602e      	str	r6, [r5, #0]
  }
#endif

#if defined(TIM17)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM17))
1004b1bc:	2004      	movs	r0, #4
1004b1be:	f7ff fe6d 	bl	1004ae9c <LL_APB0_GRP1_IsEnabledClock>
1004b1c2:	2800      	cmp	r0, #0
1004b1c4:	d00f      	beq.n	1004b1e6 <APB0periphContextRestore+0x8e>
  {
    uint32_t app;
    app = apb0->TIM17_vr.CR1;
1004b1c6:	0023      	movs	r3, r4
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004b1c8:	2101      	movs	r1, #1
    app = apb0->TIM17_vr.CR1;
1004b1ca:	33fc      	adds	r3, #252	@ 0xfc
1004b1cc:	691e      	ldr	r6, [r3, #16]
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004b1ce:	691a      	ldr	r2, [r3, #16]
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
1004b1d0:	4d09      	ldr	r5, [pc, #36]	@ (1004b1f8 <APB0periphContextRestore+0xa0>)
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004b1d2:	438a      	bics	r2, r1
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
1004b1d4:	0021      	movs	r1, r4
1004b1d6:	310d      	adds	r1, #13
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004b1d8:	611a      	str	r2, [r3, #16]
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
1004b1da:	0028      	movs	r0, r5
1004b1dc:	2264      	movs	r2, #100	@ 0x64
1004b1de:	31ff      	adds	r1, #255	@ 0xff
1004b1e0:	f7ff fe30 	bl	1004ae44 <Osal_MemCpy4>
    TIM17->CR1 = app;
1004b1e4:	602e      	str	r6, [r5, #0]
  }
#endif

  FLASH->CONFIG = apb0->FLASH_CONFIG_vr;
1004b1e6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
1004b1e8:	4b04      	ldr	r3, [pc, #16]	@ (1004b1fc <APB0periphContextRestore+0xa4>)
1004b1ea:	605a      	str	r2, [r3, #4]
}
1004b1ec:	bd70      	pop	{r4, r5, r6, pc}
1004b1ee:	46c0      	nop			@ (mov r8, r8)
1004b1f0:	40002000 	.word	0x40002000
1004b1f4:	40005000 	.word	0x40005000
1004b1f8:	40006000 	.word	0x40006000
1004b1fc:	40001000 	.word	0x40001000

1004b200 <APB1periphContextRestore>:
  * @brief  Restore the APB1 peripheral registers content.
  * @param  apb1 Pointer to a APB1 structure
  * @retval None
  */
static void APB1periphContextRestore(apb1PeriphT *apb1)
{
1004b200:	b570      	push	{r4, r5, r6, lr}
1004b202:	0004      	movs	r4, r0
    Osal_MemCpy4((uint32_t *)SPI2, (uint32_t *)&apb1->SPI2_vr, 12); /* Skip DR */
    Osal_MemCpy4((uint32_t *)(&(SPI2->CRCPR)), (uint32_t *)(&apb1->SPI2_vr.CRCPR), 20);
    SPI2->CR1 = app;
  }
#endif
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI3))
1004b204:	2080      	movs	r0, #128	@ 0x80
1004b206:	01c0      	lsls	r0, r0, #7
1004b208:	f7ff fe5a 	bl	1004aec0 <LL_APB1_GRP1_IsEnabledClock>
1004b20c:	2800      	cmp	r0, #0
1004b20e:	d012      	beq.n	1004b236 <APB1periphContextRestore+0x36>
  {
    uint32_t app;
    app = apb1->SPI3_vr.CR1;
1004b210:	0021      	movs	r1, r4
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
1004b212:	2240      	movs	r2, #64	@ 0x40
    app = apb1->SPI3_vr.CR1;
1004b214:	31e4      	adds	r1, #228	@ 0xe4
1004b216:	680e      	ldr	r6, [r1, #0]
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
1004b218:	680b      	ldr	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)SPI3, (uint32_t *)&apb1->SPI3_vr, 12); /* Skip DR */
1004b21a:	4d2e      	ldr	r5, [pc, #184]	@ (1004b2d4 <APB1periphContextRestore+0xd4>)
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
1004b21c:	4393      	bics	r3, r2
1004b21e:	600b      	str	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)SPI3, (uint32_t *)&apb1->SPI3_vr, 12); /* Skip DR */
1004b220:	0028      	movs	r0, r5
1004b222:	3a34      	subs	r2, #52	@ 0x34
1004b224:	f7ff fe0e 	bl	1004ae44 <Osal_MemCpy4>
    Osal_MemCpy4((uint32_t *)(&(SPI3->CRCPR)), (uint32_t *)(&apb1->SPI3_vr.CRCPR), 20);
1004b228:	0021      	movs	r1, r4
1004b22a:	2214      	movs	r2, #20
1004b22c:	482a      	ldr	r0, [pc, #168]	@ (1004b2d8 <APB1periphContextRestore+0xd8>)
1004b22e:	31f4      	adds	r1, #244	@ 0xf4
1004b230:	f7ff fe08 	bl	1004ae44 <Osal_MemCpy4>
    SPI3->CR1 = app;
1004b234:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_ADCDIG))
1004b236:	2010      	movs	r0, #16
1004b238:	f7ff fe42 	bl	1004aec0 <LL_APB1_GRP1_IsEnabledClock>
1004b23c:	2800      	cmp	r0, #0
1004b23e:	d005      	beq.n	1004b24c <APB1periphContextRestore+0x4c>
  {
    Osal_MemCpy4((uint32_t *)ADC1, (uint32_t *)&apb1->ADC_vr, sizeof(ADC_TypeDef));
1004b240:	0021      	movs	r1, r4
1004b242:	2258      	movs	r2, #88	@ 0x58
1004b244:	4825      	ldr	r0, [pc, #148]	@ (1004b2dc <APB1periphContextRestore+0xdc>)
1004b246:	318c      	adds	r1, #140	@ 0x8c
1004b248:	f7ff fdfc 	bl	1004ae44 <Osal_MemCpy4>
  }

#if defined(STM32WB06) || defined(STM32WB07)
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1))
#else
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
1004b24c:	2080      	movs	r0, #128	@ 0x80
1004b24e:	0040      	lsls	r0, r0, #1
1004b250:	f7ff fe36 	bl	1004aec0 <LL_APB1_GRP1_IsEnabledClock>
1004b254:	2800      	cmp	r0, #0
1004b256:	d014      	beq.n	1004b282 <APB1periphContextRestore+0x82>
     (LL_RCC_GetLPUARTClockSource() == LL_RCC_LPUCLKSEL_CLK16M))
1004b258:	f7ff fe00 	bl	1004ae5c <LL_RCC_GetLPUARTClockSource>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
1004b25c:	2800      	cmp	r0, #0
1004b25e:	d110      	bne.n	1004b282 <APB1periphContextRestore+0x82>
#endif
  {
    uint32_t app;
    app = apb1->LPUART_vr.CR1;
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
1004b260:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
1004b262:	0021      	movs	r1, r4
    app = apb1->LPUART_vr.CR1;
1004b264:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
1004b266:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
1004b268:	4d1d      	ldr	r5, [pc, #116]	@ (1004b2e0 <APB1periphContextRestore+0xe0>)
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
1004b26a:	4393      	bics	r3, r2
1004b26c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
1004b26e:	0028      	movs	r0, r5
1004b270:	3223      	adds	r2, #35	@ 0x23
1004b272:	315c      	adds	r1, #92	@ 0x5c
1004b274:	f7ff fde6 	bl	1004ae44 <Osal_MemCpy4>
    LPUART1->PRESC = apb1->LPUART_vr.PRESC;
1004b278:	0023      	movs	r3, r4
1004b27a:	3388      	adds	r3, #136	@ 0x88
1004b27c:	681b      	ldr	r3, [r3, #0]
1004b27e:	62eb      	str	r3, [r5, #44]	@ 0x2c
    LPUART1->CR1 = app;
1004b280:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_USART1))
1004b282:	2080      	movs	r0, #128	@ 0x80
1004b284:	00c0      	lsls	r0, r0, #3
1004b286:	f7ff fe1b 	bl	1004aec0 <LL_APB1_GRP1_IsEnabledClock>
1004b28a:	2800      	cmp	r0, #0
1004b28c:	d00e      	beq.n	1004b2ac <APB1periphContextRestore+0xac>
  {
    uint32_t app;
    app = apb1->USART_vr.CR1;
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
1004b28e:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
1004b290:	0021      	movs	r1, r4
    app = apb1->USART_vr.CR1;
1004b292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
1004b294:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
1004b296:	4d13      	ldr	r5, [pc, #76]	@ (1004b2e4 <APB1periphContextRestore+0xe4>)
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
1004b298:	4393      	bics	r3, r2
1004b29a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
1004b29c:	0028      	movs	r0, r5
1004b29e:	3223      	adds	r2, #35	@ 0x23
1004b2a0:	312c      	adds	r1, #44	@ 0x2c
1004b2a2:	f7ff fdcf 	bl	1004ae44 <Osal_MemCpy4>
    USART1->PRESC = apb1->USART_vr.PRESC;
1004b2a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
1004b2a8:	62eb      	str	r3, [r5, #44]	@ 0x2c
    USART1->CR1 = app;
1004b2aa:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C1))
1004b2ac:	2080      	movs	r0, #128	@ 0x80
1004b2ae:	0380      	lsls	r0, r0, #14
1004b2b0:	f7ff fe06 	bl	1004aec0 <LL_APB1_GRP1_IsEnabledClock>
1004b2b4:	2800      	cmp	r0, #0
1004b2b6:	d00c      	beq.n	1004b2d2 <APB1periphContextRestore+0xd2>
  {
    uint32_t app;
    app = apb1->I2C1_vr.CR1;
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004b2b8:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004b2ba:	2582      	movs	r5, #130	@ 0x82
    app = apb1->I2C1_vr.CR1;
1004b2bc:	6826      	ldr	r6, [r4, #0]
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004b2be:	6823      	ldr	r3, [r4, #0]
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004b2c0:	05ed      	lsls	r5, r5, #23
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004b2c2:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004b2c4:	0021      	movs	r1, r4
1004b2c6:	0028      	movs	r0, r5
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004b2c8:	6023      	str	r3, [r4, #0]
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004b2ca:	321f      	adds	r2, #31
1004b2cc:	f7ff fdba 	bl	1004ae44 <Osal_MemCpy4>
    I2C1->CR1 = app;
1004b2d0:	602e      	str	r6, [r5, #0]
    apb1->I2C2_vr.CR1 &= ~I2C_CR1_PE;
    Osal_MemCpy4((uint32_t *)I2C2, (uint32_t *)&apb1->I2C2_vr, 32); /* Skip PECR, RDR and TDR */
    I2C2->CR1 = app;
  }
#endif
}
1004b2d2:	bd70      	pop	{r4, r5, r6, pc}
1004b2d4:	41007000 	.word	0x41007000
1004b2d8:	41007010 	.word	0x41007010
1004b2dc:	41006000 	.word	0x41006000
1004b2e0:	41005000 	.word	0x41005000
1004b2e4:	41004000 	.word	0x41004000

1004b2e8 <APB2periphContextRestore>:
  * @brief  Restore the APB2 peripheral registers content.
  * @param  apb2 Pointer to a APB2 structure
  * @retval None
  */
static void APB2periphContextRestore(apb2PeriphT *apb2)
{
1004b2e8:	b510      	push	{r4, lr}
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004b2ea:	2001      	movs	r0, #1
1004b2ec:	f7ff fdf2 	bl	1004aed4 <LL_APB2_GRP1_IsEnabledClock>
      {
        SET_BIT(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS);
      }
#endif
  }
}
1004b2f0:	bd10      	pop	{r4, pc}
	...

1004b2f4 <AHB0periphContextRestore>:
  * @param  ahb0 Pointer to a AHB0 structure
  * @retval None
  */
static void AHB0periphContextRestore(ahb0PeriphT *ahb0)
{
  RCC->AHBRSTR = ahb0->RCC_AHBRSTR_vr;
1004b2f4:	23de      	movs	r3, #222	@ 0xde
1004b2f6:	005b      	lsls	r3, r3, #1
1004b2f8:	58c2      	ldr	r2, [r0, r3]
1004b2fa:	4b3a      	ldr	r3, [pc, #232]	@ (1004b3e4 <AHB0periphContextRestore+0xf0>)
{
1004b2fc:	b510      	push	{r4, lr}
  RCC->AHBRSTR = ahb0->RCC_AHBRSTR_vr;
1004b2fe:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->APB1RSTR = ahb0->RCC_APB1RSTR_vr;
1004b300:	22e0      	movs	r2, #224	@ 0xe0
1004b302:	0052      	lsls	r2, r2, #1
1004b304:	5882      	ldr	r2, [r0, r2]
{
1004b306:	0004      	movs	r4, r0
  RCC->APB1RSTR = ahb0->RCC_APB1RSTR_vr;
1004b308:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->AHBENR = ahb0->RCC_AHBENR_vr;
1004b30a:	22e2      	movs	r2, #226	@ 0xe2
1004b30c:	0052      	lsls	r2, r2, #1
1004b30e:	5882      	ldr	r2, [r0, r2]
1004b310:	651a      	str	r2, [r3, #80]	@ 0x50
  RCC->APB1ENR = ahb0->RCC_APB1ENR_vr;
1004b312:	22e4      	movs	r2, #228	@ 0xe4
1004b314:	0052      	lsls	r2, r2, #1
1004b316:	5882      	ldr	r2, [r0, r2]

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
1004b318:	2001      	movs	r0, #1
  RCC->APB1ENR = ahb0->RCC_APB1ENR_vr;
1004b31a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
1004b31c:	f7ff fda6 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b320:	2800      	cmp	r0, #0
1004b322:	d018      	beq.n	1004b356 <AHB0periphContextRestore+0x62>
    Osal_MemCpy4((uint32_t *)DMAMUX1, (uint32_t *)ahb0->DMAMUX_vr, 8*sizeof(DMAMUX_Channel_TypeDef));
1004b324:	0021      	movs	r1, r4
1004b326:	2091      	movs	r0, #145	@ 0x91
1004b328:	319d      	adds	r1, #157	@ 0x9d
1004b32a:	2220      	movs	r2, #32
1004b32c:	31ff      	adds	r1, #255	@ 0xff
1004b32e:	05c0      	lsls	r0, r0, #23
1004b330:	f7ff fd88 	bl	1004ae44 <Osal_MemCpy4>
    ahb0->DMA_vr[0].CNDTR = 0;
1004b334:	0021      	movs	r1, r4
    ahb0->DMA_vr[2].CNDTR = 0;
    ahb0->DMA_vr[3].CNDTR = 0;
    ahb0->DMA_vr[4].CNDTR = 0;
    ahb0->DMA_vr[5].CNDTR = 0;
    ahb0->DMA_vr[6].CNDTR = 0;
    ahb0->DMA_vr[7].CNDTR = 0;
1004b336:	22c6      	movs	r2, #198	@ 0xc6
    ahb0->DMA_vr[0].CNDTR = 0;
1004b338:	2300      	movs	r3, #0
1004b33a:	31fc      	adds	r1, #252	@ 0xfc
    ahb0->DMA_vr[7].CNDTR = 0;
1004b33c:	0052      	lsls	r2, r2, #1
    ahb0->DMA_vr[0].CNDTR = 0;
1004b33e:	604b      	str	r3, [r1, #4]
    Osal_MemCpy4((uint32_t *)DMA1, (uint32_t *)ahb0->DMA_vr, 8*sizeof(DMA_Channel_TypeDef));
1004b340:	4829      	ldr	r0, [pc, #164]	@ (1004b3e8 <AHB0periphContextRestore+0xf4>)
    ahb0->DMA_vr[1].CNDTR = 0;
1004b342:	618b      	str	r3, [r1, #24]
    ahb0->DMA_vr[2].CNDTR = 0;
1004b344:	62cb      	str	r3, [r1, #44]	@ 0x2c
    ahb0->DMA_vr[3].CNDTR = 0;
1004b346:	640b      	str	r3, [r1, #64]	@ 0x40
    ahb0->DMA_vr[4].CNDTR = 0;
1004b348:	654b      	str	r3, [r1, #84]	@ 0x54
    ahb0->DMA_vr[5].CNDTR = 0;
1004b34a:	668b      	str	r3, [r1, #104]	@ 0x68
    ahb0->DMA_vr[6].CNDTR = 0;
1004b34c:	67cb      	str	r3, [r1, #124]	@ 0x7c
    ahb0->DMA_vr[7].CNDTR = 0;
1004b34e:	50a3      	str	r3, [r4, r2]
    Osal_MemCpy4((uint32_t *)DMA1, (uint32_t *)ahb0->DMA_vr, 8*sizeof(DMA_Channel_TypeDef));
1004b350:	3aec      	subs	r2, #236	@ 0xec
1004b352:	f7ff fd77 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_RNG)) {
1004b356:	2080      	movs	r0, #128	@ 0x80
1004b358:	02c0      	lsls	r0, r0, #11
1004b35a:	f7ff fd87 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b35e:	2800      	cmp	r0, #0
1004b360:	d005      	beq.n	1004b36e <AHB0periphContextRestore+0x7a>
    Osal_MemCpy4((uint32_t *)RNG, (uint32_t *)&ahb0->RNG_vr, sizeof(RNG_TypeDef));
1004b362:	0021      	movs	r1, r4
1004b364:	2288      	movs	r2, #136	@ 0x88
1004b366:	4821      	ldr	r0, [pc, #132]	@ (1004b3ec <AHB0periphContextRestore+0xf8>)
1004b368:	3174      	adds	r1, #116	@ 0x74
1004b36a:	f7ff fd6b 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_PKA)) {
1004b36e:	2080      	movs	r0, #128	@ 0x80
1004b370:	0240      	lsls	r0, r0, #9
1004b372:	f7ff fd7b 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b376:	2800      	cmp	r0, #0
1004b378:	d005      	beq.n	1004b386 <AHB0periphContextRestore+0x92>
#if defined(STM32WB06) || defined(STM32WB07)
    PKA->CSR = ahb0->PKA_CSR_vr;
    PKA->ISR = ahb0->PKA_ISR_vr;
    PKA->IEN = ahb0->PKA_IEN_vr;
#else
    PKA->CLRFR = 0x1A0000;
1004b37a:	22d0      	movs	r2, #208	@ 0xd0
1004b37c:	4b1c      	ldr	r3, [pc, #112]	@ (1004b3f0 <AHB0periphContextRestore+0xfc>)
1004b37e:	0352      	lsls	r2, r2, #13
1004b380:	609a      	str	r2, [r3, #8]
    PKA->CR = ahb0->PKA_CR_vr;
1004b382:	6f22      	ldr	r2, [r4, #112]	@ 0x70
1004b384:	601a      	str	r2, [r3, #0]
#endif
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_CRC)) {
1004b386:	2080      	movs	r0, #128	@ 0x80
1004b388:	0140      	lsls	r0, r0, #5
1004b38a:	f7ff fd6f 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b38e:	2800      	cmp	r0, #0
1004b390:	d005      	beq.n	1004b39e <AHB0periphContextRestore+0xaa>
    Osal_MemCpy4((uint32_t *)CRC, (uint32_t *)&ahb0->CRC_vr, sizeof(CRC_TypeDef));
1004b392:	0021      	movs	r1, r4
1004b394:	2218      	movs	r2, #24
1004b396:	4817      	ldr	r0, [pc, #92]	@ (1004b3f4 <AHB0periphContextRestore+0x100>)
1004b398:	3158      	adds	r1, #88	@ 0x58
1004b39a:	f7ff fd53 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOA)) {
1004b39e:	2004      	movs	r0, #4
1004b3a0:	f7ff fd64 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b3a4:	2800      	cmp	r0, #0
1004b3a6:	d00b      	beq.n	1004b3c0 <AHB0periphContextRestore+0xcc>
    GPIOA->AFR[0] = ahb0->GPIOA_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
1004b3a8:	2090      	movs	r0, #144	@ 0x90
1004b3aa:	6a23      	ldr	r3, [r4, #32]
1004b3ac:	05c0      	lsls	r0, r0, #23
1004b3ae:	6203      	str	r3, [r0, #32]
    GPIOA->AFR[1] = ahb0->GPIOA_vr.AFR[1];
1004b3b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
1004b3b2:	222c      	movs	r2, #44	@ 0x2c
    GPIOA->AFR[1] = ahb0->GPIOA_vr.AFR[1];
1004b3b4:	6243      	str	r3, [r0, #36]	@ 0x24
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
1004b3b6:	6963      	ldr	r3, [r4, #20]
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
1004b3b8:	0021      	movs	r1, r4
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
1004b3ba:	6143      	str	r3, [r0, #20]
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
1004b3bc:	f7ff fd42 	bl	1004ae44 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOB)) {
1004b3c0:	2008      	movs	r0, #8
1004b3c2:	f7ff fd53 	bl	1004ae6c <LL_AHB1_GRP1_IsEnabledClock>
1004b3c6:	2800      	cmp	r0, #0
1004b3c8:	d00b      	beq.n	1004b3e2 <AHB0periphContextRestore+0xee>
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
    GPIOB->ODR = ahb0->GPIOB_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004b3ca:	0021      	movs	r1, r4
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
1004b3cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
1004b3ce:	480a      	ldr	r0, [pc, #40]	@ (1004b3f8 <AHB0periphContextRestore+0x104>)
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004b3d0:	222c      	movs	r2, #44	@ 0x2c
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
1004b3d2:	6203      	str	r3, [r0, #32]
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
1004b3d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004b3d6:	312c      	adds	r1, #44	@ 0x2c
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
1004b3d8:	6243      	str	r3, [r0, #36]	@ 0x24
    GPIOB->ODR = ahb0->GPIOB_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
1004b3da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1004b3dc:	6143      	str	r3, [r0, #20]
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004b3de:	f7ff fd31 	bl	1004ae44 <Osal_MemCpy4>
  }
}
1004b3e2:	bd10      	pop	{r4, pc}
1004b3e4:	48400000 	.word	0x48400000
1004b3e8:	48700000 	.word	0x48700000
1004b3ec:	48600000 	.word	0x48600000
1004b3f0:	48300000 	.word	0x48300000
1004b3f4:	48200000 	.word	0x48200000
1004b3f8:	48100000 	.word	0x48100000

1004b3fc <cstackContextRestore>:
{
  uint8_t i;
  volatile uint32_t *ptr;

  i = 0;
  ptr = __vector_table[0].__ptr ;
1004b3fc:	4b04      	ldr	r3, [pc, #16]	@ (1004b410 <cstackContextRestore+0x14>)
1004b3fe:	681a      	ldr	r2, [r3, #0]
  ptr -= CSTACK_PREAMBLE_NUMBER;
1004b400:	0013      	movs	r3, r2
1004b402:	3b50      	subs	r3, #80	@ 0x50
  do
  {
    *ptr = cStackPreamble[i];
1004b404:	c802      	ldmia	r0!, {r1}
1004b406:	c302      	stmia	r3!, {r1}
    i++;
    ptr++;
  } while (i < CSTACK_PREAMBLE_NUMBER);
1004b408:	429a      	cmp	r2, r3
1004b40a:	d1fb      	bne.n	1004b404 <cstackContextRestore+0x8>

}
1004b40c:	4770      	bx	lr
1004b40e:	46c0      	nop			@ (mov r8, r8)
1004b410:	10040000 	.word	0x10040000

1004b414 <cpuPeriphContextRestore>:
  */
static void cpuPeriphContextRestore(cpuPeriphT *cpuPeriph)
{
  uint8_t i;

  SCB->VTOR = cpuPeriph->SCB_VTOR_vr;
1004b414:	6802      	ldr	r2, [r0, #0]
1004b416:	4b0e      	ldr	r3, [pc, #56]	@ (1004b450 <cpuPeriphContextRestore+0x3c>)
{
1004b418:	b530      	push	{r4, r5, lr}
  SCB->VTOR = cpuPeriph->SCB_VTOR_vr;
1004b41a:	609a      	str	r2, [r3, #8]
  NVIC->ISER[0] = cpuPeriph->NVIC_ISER_vr;
1004b41c:	6843      	ldr	r3, [r0, #4]
1004b41e:	490d      	ldr	r1, [pc, #52]	@ (1004b454 <cpuPeriphContextRestore+0x40>)
  for (i=0; i<8; i++)
  {
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
1004b420:	0005      	movs	r5, r0
  NVIC->ISER[0] = cpuPeriph->NVIC_ISER_vr;
1004b422:	600b      	str	r3, [r1, #0]
1004b424:	2300      	movs	r3, #0
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
1004b426:	3508      	adds	r5, #8
1004b428:	009a      	lsls	r2, r3, #2
1004b42a:	58ac      	ldr	r4, [r5, r2]
1004b42c:	001a      	movs	r2, r3
1004b42e:	32c0      	adds	r2, #192	@ 0xc0
1004b430:	0092      	lsls	r2, r2, #2
  for (i=0; i<8; i++)
1004b432:	3301      	adds	r3, #1
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
1004b434:	508c      	str	r4, [r1, r2]
  for (i=0; i<8; i++)
1004b436:	2b08      	cmp	r3, #8
1004b438:	d1f6      	bne.n	1004b428 <cpuPeriphContextRestore+0x14>
  }
  *(volatile uint32_t *)SHPR3_REG = cpuPeriph->SYSTICK_IPR_vr;
1004b43a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
1004b43c:	4b06      	ldr	r3, [pc, #24]	@ (1004b458 <cpuPeriphContextRestore+0x44>)
1004b43e:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = cpuPeriph->SYST_RVR_vr;
1004b440:	6b02      	ldr	r2, [r0, #48]	@ 0x30
1004b442:	4b06      	ldr	r3, [pc, #24]	@ (1004b45c <cpuPeriphContextRestore+0x48>)
1004b444:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
1004b446:	2200      	movs	r2, #0
1004b448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = cpuPeriph->SYST_CSR_vr;
1004b44a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
1004b44c:	601a      	str	r2, [r3, #0]
}
1004b44e:	bd30      	pop	{r4, r5, pc}
1004b450:	e000ed00 	.word	0xe000ed00
1004b454:	e000e100 	.word	0xe000e100
1004b458:	e000ed20 	.word	0xe000ed20
1004b45c:	e000e010 	.word	0xe000e010

1004b460 <prepareDeviceLowPower>:
  * @retval None
  */
void prepareDeviceLowPower(apb0PeriphT *apb0, apb1PeriphT *apb1,
                           apb2PeriphT *apb2, ahb0PeriphT *ahb0,
                           cpuPeriphT *cpuPeriph, uint32_t *cStackPreamble)
{
1004b460:	b570      	push	{r4, r5, r6, lr}
1004b462:	000e      	movs	r6, r1
1004b464:	0015      	movs	r5, r2
  /* Reset the wakeup flag before the low power mode */
  RAM_VR.WakeupFromSleepFlag = 0;
1004b466:	2200      	movs	r2, #0
{
1004b468:	001c      	movs	r4, r3
  RAM_VR.WakeupFromSleepFlag = 0;
1004b46a:	4b0a      	ldr	r3, [pc, #40]	@ (1004b494 <prepareDeviceLowPower+0x34>)
1004b46c:	609a      	str	r2, [r3, #8]

  /* Save the APB0 peripheral configuration */
  APB0periphContextSave(apb0);
1004b46e:	f7ff fd3b 	bl	1004aee8 <APB0periphContextSave>

  /* Save the APB1 peripheral configuration */
  APB1periphContextSave(apb1);
1004b472:	0030      	movs	r0, r6
1004b474:	f7ff fd88 	bl	1004af88 <APB1periphContextSave>

  /* Save the APB2 peripheral configuration */
  APB2periphContextSave(apb2);
1004b478:	0028      	movs	r0, r5
1004b47a:	f7ff fdcf 	bl	1004b01c <APB2periphContextSave>

  /* Save the AHB0 peripheral configuration */
  AHB0periphContextSave(ahb0);
1004b47e:	0020      	movs	r0, r4
1004b480:	f7ff fdd2 	bl	1004b028 <AHB0periphContextSave>

  /* Save the first N c-stack location that will be restored at wakeup reset */
  cstackContextSave(cStackPreamble);
1004b484:	9805      	ldr	r0, [sp, #20]
1004b486:	f7ff fe37 	bl	1004b0f8 <cstackContextSave>

  /* Save the CPU peripheral configuration (NVIC, SysTick, Vector Table) */
  cpuPeriphContextSave(cpuPeriph);
1004b48a:	9804      	ldr	r0, [sp, #16]
1004b48c:	f7ff fe40 	bl	1004b110 <cpuPeriphContextSave>
}
1004b490:	bd70      	pop	{r4, r5, r6, pc}
1004b492:	46c0      	nop			@ (mov r8, r8)
1004b494:	20000004 	.word	0x20000004

1004b498 <restoreDeviceLowPower>:
  * @retval None
  */
void restoreDeviceLowPower(apb0PeriphT *apb0, apb1PeriphT *apb1,
                           apb2PeriphT *apb2, ahb0PeriphT *ahb0,
                           cpuPeriphT *cpuPeriph, uint32_t *cStackPreamble)
{
1004b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b49a:	001f      	movs	r7, r3
  /* Enable Watchdog IP if previous disabled */
  if (apb0->wdg_to_be_enabled)
1004b49c:	0003      	movs	r3, r0
1004b49e:	33fc      	adds	r3, #252	@ 0xfc
{
1004b4a0:	0015      	movs	r5, r2
  if (apb0->wdg_to_be_enabled)
1004b4a2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
{
1004b4a4:	0004      	movs	r4, r0
1004b4a6:	000e      	movs	r6, r1
  if (apb0->wdg_to_be_enabled)
1004b4a8:	2a00      	cmp	r2, #0
1004b4aa:	d005      	beq.n	1004b4b8 <restoreDeviceLowPower+0x20>
  {
    apb0->wdg_to_be_enabled = FALSE;
1004b4ac:	2200      	movs	r2, #0
    LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_WDG);
1004b4ae:	2080      	movs	r0, #128	@ 0x80
    apb0->wdg_to_be_enabled = FALSE;
1004b4b0:	675a      	str	r2, [r3, #116]	@ 0x74
    LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_WDG);
1004b4b2:	01c0      	lsls	r0, r0, #7
1004b4b4:	f7ff fce4 	bl	1004ae80 <LL_APB0_GRP1_EnableClock>
  }

  /* No Wakeup from DEEPSTOP, so the peripehral configuration is not lost */
  if (RAM_VR.WakeupFromSleepFlag == 0)
1004b4b8:	4b0b      	ldr	r3, [pc, #44]	@ (1004b4e8 <restoreDeviceLowPower+0x50>)
1004b4ba:	689b      	ldr	r3, [r3, #8]
1004b4bc:	2b00      	cmp	r3, #0
1004b4be:	d011      	beq.n	1004b4e4 <restoreDeviceLowPower+0x4c>
  {
    return;
  }

  /* Restore the first N c-stack location that will be restored at wakeup reset */
  cstackContextRestore(cStackPreamble);
1004b4c0:	9807      	ldr	r0, [sp, #28]
1004b4c2:	f7ff ff9b 	bl	1004b3fc <cstackContextRestore>

  /* Restore the CPU peripheral configuration (NVIC, SysTick, Vector Table) */
  cpuPeriphContextRestore(cpuPeriph);
1004b4c6:	9806      	ldr	r0, [sp, #24]
1004b4c8:	f7ff ffa4 	bl	1004b414 <cpuPeriphContextRestore>

  /* Restore the AHB0 peripheral configuration */
  AHB0periphContextRestore(ahb0);
1004b4cc:	0038      	movs	r0, r7
1004b4ce:	f7ff ff11 	bl	1004b2f4 <AHB0periphContextRestore>

  /* Restore the APB0 peripheral configuration */
  APB0periphContextRestore(apb0);
1004b4d2:	0020      	movs	r0, r4
1004b4d4:	f7ff fe40 	bl	1004b158 <APB0periphContextRestore>

  /* Restore the APB1 peripheral configuration */
  APB1periphContextRestore(apb1);
1004b4d8:	0030      	movs	r0, r6
1004b4da:	f7ff fe91 	bl	1004b200 <APB1periphContextRestore>

  /* Restore the APB2 peripheral configuration */
  APB2periphContextRestore(apb2);
1004b4de:	0028      	movs	r0, r5
1004b4e0:	f7ff ff02 	bl	1004b2e8 <APB2periphContextRestore>
}
1004b4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b4e6:	46c0      	nop			@ (mov r8, r8)
1004b4e8:	20000004 	.word	0x20000004

1004b4ec <LL_PWR_IsEnabledPUPDCfg>:
{
1004b4ec:	b580      	push	{r7, lr}
1004b4ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
1004b4f0:	4b05      	ldr	r3, [pc, #20]	@ (1004b508 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
1004b4f2:	681b      	ldr	r3, [r3, #0]
1004b4f4:	2210      	movs	r2, #16
1004b4f6:	4013      	ands	r3, r2
1004b4f8:	2b10      	cmp	r3, #16
1004b4fa:	d101      	bne.n	1004b500 <LL_PWR_IsEnabledPUPDCfg+0x14>
1004b4fc:	2301      	movs	r3, #1
1004b4fe:	e000      	b.n	1004b502 <LL_PWR_IsEnabledPUPDCfg+0x16>
1004b500:	2300      	movs	r3, #0
}
1004b502:	0018      	movs	r0, r3
1004b504:	46bd      	mov	sp, r7
1004b506:	bd80      	pop	{r7, pc}
1004b508:	48500000 	.word	0x48500000

1004b50c <LL_PWR_EnableGPIOPullUp>:
{
1004b50c:	b580      	push	{r7, lr}
1004b50e:	b082      	sub	sp, #8
1004b510:	af00      	add	r7, sp, #0
1004b512:	6078      	str	r0, [r7, #4]
1004b514:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
1004b516:	687b      	ldr	r3, [r7, #4]
1004b518:	3304      	adds	r3, #4
1004b51a:	681a      	ldr	r2, [r3, #0]
1004b51c:	683b      	ldr	r3, [r7, #0]
1004b51e:	43d9      	mvns	r1, r3
1004b520:	687b      	ldr	r3, [r7, #4]
1004b522:	3304      	adds	r3, #4
1004b524:	400a      	ands	r2, r1
1004b526:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
1004b528:	687b      	ldr	r3, [r7, #4]
1004b52a:	6819      	ldr	r1, [r3, #0]
1004b52c:	687b      	ldr	r3, [r7, #4]
1004b52e:	683a      	ldr	r2, [r7, #0]
1004b530:	430a      	orrs	r2, r1
1004b532:	601a      	str	r2, [r3, #0]
}
1004b534:	46c0      	nop			@ (mov r8, r8)
1004b536:	46bd      	mov	sp, r7
1004b538:	b002      	add	sp, #8
1004b53a:	bd80      	pop	{r7, pc}

1004b53c <LL_AHB1_GRP1_EnableClock>:
{
1004b53c:	b580      	push	{r7, lr}
1004b53e:	b084      	sub	sp, #16
1004b540:	af00      	add	r7, sp, #0
1004b542:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
1004b544:	4b07      	ldr	r3, [pc, #28]	@ (1004b564 <LL_AHB1_GRP1_EnableClock+0x28>)
1004b546:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004b548:	4b06      	ldr	r3, [pc, #24]	@ (1004b564 <LL_AHB1_GRP1_EnableClock+0x28>)
1004b54a:	687a      	ldr	r2, [r7, #4]
1004b54c:	430a      	orrs	r2, r1
1004b54e:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004b550:	4b04      	ldr	r3, [pc, #16]	@ (1004b564 <LL_AHB1_GRP1_EnableClock+0x28>)
1004b552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004b554:	687a      	ldr	r2, [r7, #4]
1004b556:	4013      	ands	r3, r2
1004b558:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004b55a:	68fb      	ldr	r3, [r7, #12]
}
1004b55c:	46c0      	nop			@ (mov r8, r8)
1004b55e:	46bd      	mov	sp, r7
1004b560:	b004      	add	sp, #16
1004b562:	bd80      	pop	{r7, pc}
1004b564:	48400000 	.word	0x48400000

1004b568 <LL_APB0_GRP1_EnableClock>:
{
1004b568:	b580      	push	{r7, lr}
1004b56a:	b084      	sub	sp, #16
1004b56c:	af00      	add	r7, sp, #0
1004b56e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
1004b570:	4b07      	ldr	r3, [pc, #28]	@ (1004b590 <LL_APB0_GRP1_EnableClock+0x28>)
1004b572:	6d59      	ldr	r1, [r3, #84]	@ 0x54
1004b574:	4b06      	ldr	r3, [pc, #24]	@ (1004b590 <LL_APB0_GRP1_EnableClock+0x28>)
1004b576:	687a      	ldr	r2, [r7, #4]
1004b578:	430a      	orrs	r2, r1
1004b57a:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
1004b57c:	4b04      	ldr	r3, [pc, #16]	@ (1004b590 <LL_APB0_GRP1_EnableClock+0x28>)
1004b57e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004b580:	687a      	ldr	r2, [r7, #4]
1004b582:	4013      	ands	r3, r2
1004b584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004b586:	68fb      	ldr	r3, [r7, #12]
}
1004b588:	46c0      	nop			@ (mov r8, r8)
1004b58a:	46bd      	mov	sp, r7
1004b58c:	b004      	add	sp, #16
1004b58e:	bd80      	pop	{r7, pc}
1004b590:	48400000 	.word	0x48400000

1004b594 <LL_APB1_GRP1_EnableClock>:
{
1004b594:	b580      	push	{r7, lr}
1004b596:	b084      	sub	sp, #16
1004b598:	af00      	add	r7, sp, #0
1004b59a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
1004b59c:	4b07      	ldr	r3, [pc, #28]	@ (1004b5bc <LL_APB1_GRP1_EnableClock+0x28>)
1004b59e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
1004b5a0:	4b06      	ldr	r3, [pc, #24]	@ (1004b5bc <LL_APB1_GRP1_EnableClock+0x28>)
1004b5a2:	687a      	ldr	r2, [r7, #4]
1004b5a4:	430a      	orrs	r2, r1
1004b5a6:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
1004b5a8:	4b04      	ldr	r3, [pc, #16]	@ (1004b5bc <LL_APB1_GRP1_EnableClock+0x28>)
1004b5aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004b5ac:	687a      	ldr	r2, [r7, #4]
1004b5ae:	4013      	ands	r3, r2
1004b5b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004b5b2:	68fb      	ldr	r3, [r7, #12]
}
1004b5b4:	46c0      	nop			@ (mov r8, r8)
1004b5b6:	46bd      	mov	sp, r7
1004b5b8:	b004      	add	sp, #16
1004b5ba:	bd80      	pop	{r7, pc}
1004b5bc:	48400000 	.word	0x48400000

1004b5c0 <LL_APB1_GRP1_DisableClock>:
{
1004b5c0:	b580      	push	{r7, lr}
1004b5c2:	b082      	sub	sp, #8
1004b5c4:	af00      	add	r7, sp, #0
1004b5c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
1004b5c8:	4b05      	ldr	r3, [pc, #20]	@ (1004b5e0 <LL_APB1_GRP1_DisableClock+0x20>)
1004b5ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1004b5cc:	687b      	ldr	r3, [r7, #4]
1004b5ce:	43d9      	mvns	r1, r3
1004b5d0:	4b03      	ldr	r3, [pc, #12]	@ (1004b5e0 <LL_APB1_GRP1_DisableClock+0x20>)
1004b5d2:	400a      	ands	r2, r1
1004b5d4:	659a      	str	r2, [r3, #88]	@ 0x58
}
1004b5d6:	46c0      	nop			@ (mov r8, r8)
1004b5d8:	46bd      	mov	sp, r7
1004b5da:	b002      	add	sp, #8
1004b5dc:	bd80      	pop	{r7, pc}
1004b5de:	46c0      	nop			@ (mov r8, r8)
1004b5e0:	48400000 	.word	0x48400000

1004b5e4 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
1004b5e4:	b590      	push	{r4, r7, lr}
1004b5e6:	b089      	sub	sp, #36	@ 0x24
1004b5e8:	af00      	add	r7, sp, #0
1004b5ea:	0002      	movs	r2, r0
1004b5ec:	1dfb      	adds	r3, r7, #7
1004b5ee:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
1004b5f0:	1dfb      	adds	r3, r7, #7
1004b5f2:	781b      	ldrb	r3, [r3, #0]
1004b5f4:	2b00      	cmp	r3, #0
1004b5f6:	d103      	bne.n	1004b600 <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
1004b5f8:	2008      	movs	r0, #8
1004b5fa:	f7ff ff9f 	bl	1004b53c <LL_AHB1_GRP1_EnableClock>
1004b5fe:	e00a      	b.n	1004b616 <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
1004b600:	1dfb      	adds	r3, r7, #7
1004b602:	781b      	ldrb	r3, [r3, #0]
1004b604:	2b01      	cmp	r3, #1
1004b606:	d103      	bne.n	1004b610 <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
1004b608:	2008      	movs	r0, #8
1004b60a:	f7ff ff97 	bl	1004b53c <LL_AHB1_GRP1_EnableClock>
1004b60e:	e002      	b.n	1004b616 <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
1004b610:	2008      	movs	r0, #8
1004b612:	f7ff ff93 	bl	1004b53c <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
1004b616:	1dfb      	adds	r3, r7, #7
1004b618:	781a      	ldrb	r2, [r3, #0]
1004b61a:	4b28      	ldr	r3, [pc, #160]	@ (1004b6bc <BSP_LED_Init+0xd8>)
1004b61c:	0052      	lsls	r2, r2, #1
1004b61e:	5ad3      	ldrh	r3, [r2, r3]
1004b620:	001a      	movs	r2, r3
1004b622:	240c      	movs	r4, #12
1004b624:	193b      	adds	r3, r7, r4
1004b626:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
1004b628:	193b      	adds	r3, r7, r4
1004b62a:	2201      	movs	r2, #1
1004b62c:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
1004b62e:	193b      	adds	r3, r7, r4
1004b630:	2201      	movs	r2, #1
1004b632:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
1004b634:	193b      	adds	r3, r7, r4
1004b636:	2202      	movs	r2, #2
1004b638:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
1004b63a:	1dfb      	adds	r3, r7, #7
1004b63c:	781a      	ldrb	r2, [r3, #0]
1004b63e:	4b20      	ldr	r3, [pc, #128]	@ (1004b6c0 <BSP_LED_Init+0xdc>)
1004b640:	0092      	lsls	r2, r2, #2
1004b642:	58d3      	ldr	r3, [r2, r3]
1004b644:	193a      	adds	r2, r7, r4
1004b646:	0011      	movs	r1, r2
1004b648:	0018      	movs	r0, r3
1004b64a:	f000 ffa3 	bl	1004c594 <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004b64e:	f7ff ff4d 	bl	1004b4ec <LL_PWR_IsEnabledPUPDCfg>
1004b652:	1e03      	subs	r3, r0, #0
1004b654:	d01f      	beq.n	1004b696 <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
1004b656:	1dfb      	adds	r3, r7, #7
1004b658:	781a      	ldrb	r2, [r3, #0]
1004b65a:	4b19      	ldr	r3, [pc, #100]	@ (1004b6c0 <BSP_LED_Init+0xdc>)
1004b65c:	0092      	lsls	r2, r2, #2
1004b65e:	58d2      	ldr	r2, [r2, r3]
1004b660:	2390      	movs	r3, #144	@ 0x90
1004b662:	05db      	lsls	r3, r3, #23
1004b664:	429a      	cmp	r2, r3
1004b666:	d106      	bne.n	1004b676 <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
1004b668:	193b      	adds	r3, r7, r4
1004b66a:	681b      	ldr	r3, [r3, #0]
1004b66c:	4a15      	ldr	r2, [pc, #84]	@ (1004b6c4 <BSP_LED_Init+0xe0>)
1004b66e:	0019      	movs	r1, r3
1004b670:	0010      	movs	r0, r2
1004b672:	f7ff ff4b 	bl	1004b50c <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
1004b676:	1dfb      	adds	r3, r7, #7
1004b678:	781a      	ldrb	r2, [r3, #0]
1004b67a:	4b11      	ldr	r3, [pc, #68]	@ (1004b6c0 <BSP_LED_Init+0xdc>)
1004b67c:	0092      	lsls	r2, r2, #2
1004b67e:	58d3      	ldr	r3, [r2, r3]
1004b680:	4a11      	ldr	r2, [pc, #68]	@ (1004b6c8 <BSP_LED_Init+0xe4>)
1004b682:	4293      	cmp	r3, r2
1004b684:	d107      	bne.n	1004b696 <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
1004b686:	230c      	movs	r3, #12
1004b688:	18fb      	adds	r3, r7, r3
1004b68a:	681b      	ldr	r3, [r3, #0]
1004b68c:	4a0f      	ldr	r2, [pc, #60]	@ (1004b6cc <BSP_LED_Init+0xe8>)
1004b68e:	0019      	movs	r1, r3
1004b690:	0010      	movs	r0, r2
1004b692:	f7ff ff3b 	bl	1004b50c <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
1004b696:	1dfb      	adds	r3, r7, #7
1004b698:	781a      	ldrb	r2, [r3, #0]
1004b69a:	4b09      	ldr	r3, [pc, #36]	@ (1004b6c0 <BSP_LED_Init+0xdc>)
1004b69c:	0092      	lsls	r2, r2, #2
1004b69e:	58d0      	ldr	r0, [r2, r3]
1004b6a0:	1dfb      	adds	r3, r7, #7
1004b6a2:	781a      	ldrb	r2, [r3, #0]
1004b6a4:	4b05      	ldr	r3, [pc, #20]	@ (1004b6bc <BSP_LED_Init+0xd8>)
1004b6a6:	0052      	lsls	r2, r2, #1
1004b6a8:	5ad3      	ldrh	r3, [r2, r3]
1004b6aa:	2201      	movs	r2, #1
1004b6ac:	0019      	movs	r1, r3
1004b6ae:	f001 fa16 	bl	1004cade <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
1004b6b2:	2300      	movs	r3, #0
}
1004b6b4:	0018      	movs	r0, r3
1004b6b6:	46bd      	mov	sp, r7
1004b6b8:	b009      	add	sp, #36	@ 0x24
1004b6ba:	bd90      	pop	{r4, r7, pc}
1004b6bc:	200014d8 	.word	0x200014d8
1004b6c0:	200014e0 	.word	0x200014e0
1004b6c4:	48500020 	.word	0x48500020
1004b6c8:	48100000 	.word	0x48100000
1004b6cc:	48500028 	.word	0x48500028

1004b6d0 <BSP_LED_On>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
1004b6d0:	b580      	push	{r7, lr}
1004b6d2:	b082      	sub	sp, #8
1004b6d4:	af00      	add	r7, sp, #0
1004b6d6:	0002      	movs	r2, r0
1004b6d8:	1dfb      	adds	r3, r7, #7
1004b6da:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
1004b6dc:	1dfb      	adds	r3, r7, #7
1004b6de:	781a      	ldrb	r2, [r3, #0]
1004b6e0:	4b08      	ldr	r3, [pc, #32]	@ (1004b704 <BSP_LED_On+0x34>)
1004b6e2:	0092      	lsls	r2, r2, #2
1004b6e4:	58d0      	ldr	r0, [r2, r3]
1004b6e6:	1dfb      	adds	r3, r7, #7
1004b6e8:	781a      	ldrb	r2, [r3, #0]
1004b6ea:	4b07      	ldr	r3, [pc, #28]	@ (1004b708 <BSP_LED_On+0x38>)
1004b6ec:	0052      	lsls	r2, r2, #1
1004b6ee:	5ad3      	ldrh	r3, [r2, r3]
1004b6f0:	2200      	movs	r2, #0
1004b6f2:	0019      	movs	r1, r3
1004b6f4:	f001 f9f3 	bl	1004cade <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
1004b6f8:	2300      	movs	r3, #0
}
1004b6fa:	0018      	movs	r0, r3
1004b6fc:	46bd      	mov	sp, r7
1004b6fe:	b002      	add	sp, #8
1004b700:	bd80      	pop	{r7, pc}
1004b702:	46c0      	nop			@ (mov r8, r8)
1004b704:	200014e0 	.word	0x200014e0
1004b708:	200014d8 	.word	0x200014d8

1004b70c <BSP_LED_Off>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
1004b70c:	b580      	push	{r7, lr}
1004b70e:	b082      	sub	sp, #8
1004b710:	af00      	add	r7, sp, #0
1004b712:	0002      	movs	r2, r0
1004b714:	1dfb      	adds	r3, r7, #7
1004b716:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
1004b718:	1dfb      	adds	r3, r7, #7
1004b71a:	781a      	ldrb	r2, [r3, #0]
1004b71c:	4b08      	ldr	r3, [pc, #32]	@ (1004b740 <BSP_LED_Off+0x34>)
1004b71e:	0092      	lsls	r2, r2, #2
1004b720:	58d0      	ldr	r0, [r2, r3]
1004b722:	1dfb      	adds	r3, r7, #7
1004b724:	781a      	ldrb	r2, [r3, #0]
1004b726:	4b07      	ldr	r3, [pc, #28]	@ (1004b744 <BSP_LED_Off+0x38>)
1004b728:	0052      	lsls	r2, r2, #1
1004b72a:	5ad3      	ldrh	r3, [r2, r3]
1004b72c:	2201      	movs	r2, #1
1004b72e:	0019      	movs	r1, r3
1004b730:	f001 f9d5 	bl	1004cade <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
1004b734:	2300      	movs	r3, #0
}
1004b736:	0018      	movs	r0, r3
1004b738:	46bd      	mov	sp, r7
1004b73a:	b002      	add	sp, #8
1004b73c:	bd80      	pop	{r7, pc}
1004b73e:	46c0      	nop			@ (mov r8, r8)
1004b740:	200014e0 	.word	0x200014e0
1004b744:	200014d8 	.word	0x200014d8

1004b748 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
1004b748:	b580      	push	{r7, lr}
1004b74a:	b088      	sub	sp, #32
1004b74c:	af00      	add	r7, sp, #0
1004b74e:	0002      	movs	r2, r0
1004b750:	1dfb      	adds	r3, r7, #7
1004b752:	701a      	strb	r2, [r3, #0]
1004b754:	1dbb      	adds	r3, r7, #6
1004b756:	1c0a      	adds	r2, r1, #0
1004b758:	701a      	strb	r2, [r3, #0]
  int32_t               status = BSP_ERROR_NONE;
1004b75a:	2300      	movs	r3, #0
1004b75c:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef      GPIO_Init;

  /* Enable the BUTTON clock */
  if (Button == B1)
1004b75e:	1dfb      	adds	r3, r7, #7
1004b760:	781b      	ldrb	r3, [r3, #0]
1004b762:	2b00      	cmp	r3, #0
1004b764:	d103      	bne.n	1004b76e <BSP_PB_Init+0x26>
  {
    B1_GPIO_CLK_ENABLE();
1004b766:	2004      	movs	r0, #4
1004b768:	f7ff fee8 	bl	1004b53c <LL_AHB1_GRP1_EnableClock>
1004b76c:	e00a      	b.n	1004b784 <BSP_PB_Init+0x3c>
  }
  else if (Button == B2)
1004b76e:	1dfb      	adds	r3, r7, #7
1004b770:	781b      	ldrb	r3, [r3, #0]
1004b772:	2b01      	cmp	r3, #1
1004b774:	d103      	bne.n	1004b77e <BSP_PB_Init+0x36>
  {
    B2_GPIO_CLK_ENABLE();
1004b776:	2008      	movs	r0, #8
1004b778:	f7ff fee0 	bl	1004b53c <LL_AHB1_GRP1_EnableClock>
1004b77c:	e002      	b.n	1004b784 <BSP_PB_Init+0x3c>
  }
  else /* B3 */
  {
    B3_GPIO_CLK_ENABLE();
1004b77e:	2008      	movs	r0, #8
1004b780:	f7ff fedc 	bl	1004b53c <LL_AHB1_GRP1_EnableClock>
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
1004b784:	1dfb      	adds	r3, r7, #7
1004b786:	781a      	ldrb	r2, [r3, #0]
1004b788:	4b37      	ldr	r3, [pc, #220]	@ (1004b868 <BSP_PB_Init+0x120>)
1004b78a:	0052      	lsls	r2, r2, #1
1004b78c:	5ad3      	ldrh	r3, [r2, r3]
1004b78e:	001a      	movs	r2, r3
1004b790:	2108      	movs	r1, #8
1004b792:	187b      	adds	r3, r7, r1
1004b794:	601a      	str	r2, [r3, #0]
  GPIO_Init.Pull  = GPIO_PULLUP;
1004b796:	187b      	adds	r3, r7, r1
1004b798:	2201      	movs	r2, #1
1004b79a:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
1004b79c:	187b      	adds	r3, r7, r1
1004b79e:	2202      	movs	r2, #2
1004b7a0:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
1004b7a2:	1dbb      	adds	r3, r7, #6
1004b7a4:	781b      	ldrb	r3, [r3, #0]
1004b7a6:	2b00      	cmp	r3, #0
1004b7a8:	d10c      	bne.n	1004b7c4 <BSP_PB_Init+0x7c>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
1004b7aa:	187b      	adds	r3, r7, r1
1004b7ac:	2200      	movs	r2, #0
1004b7ae:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
1004b7b0:	1dfb      	adds	r3, r7, #7
1004b7b2:	781a      	ldrb	r2, [r3, #0]
1004b7b4:	4b2d      	ldr	r3, [pc, #180]	@ (1004b86c <BSP_PB_Init+0x124>)
1004b7b6:	0092      	lsls	r2, r2, #2
1004b7b8:	58d3      	ldr	r3, [r2, r3]
1004b7ba:	187a      	adds	r2, r7, r1
1004b7bc:	0011      	movs	r1, r2
1004b7be:	0018      	movs	r0, r3
1004b7c0:	f000 fee8 	bl	1004c594 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
1004b7c4:	1dbb      	adds	r3, r7, #6
1004b7c6:	781b      	ldrb	r3, [r3, #0]
1004b7c8:	2b01      	cmp	r3, #1
1004b7ca:	d123      	bne.n	1004b814 <BSP_PB_Init+0xcc>
  {
    __HAL_RCC_SYSCFG_CLK_ENABLE();
1004b7cc:	2380      	movs	r3, #128	@ 0x80
1004b7ce:	005b      	lsls	r3, r3, #1
1004b7d0:	0018      	movs	r0, r3
1004b7d2:	f7ff fec9 	bl	1004b568 <LL_APB0_GRP1_EnableClock>

    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
1004b7d6:	2108      	movs	r1, #8
1004b7d8:	187b      	adds	r3, r7, r1
1004b7da:	2280      	movs	r2, #128	@ 0x80
1004b7dc:	0252      	lsls	r2, r2, #9
1004b7de:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
1004b7e0:	1dfb      	adds	r3, r7, #7
1004b7e2:	781a      	ldrb	r2, [r3, #0]
1004b7e4:	4b21      	ldr	r3, [pc, #132]	@ (1004b86c <BSP_PB_Init+0x124>)
1004b7e6:	0092      	lsls	r2, r2, #2
1004b7e8:	58d3      	ldr	r3, [r2, r3]
1004b7ea:	187a      	adds	r2, r7, r1
1004b7ec:	0011      	movs	r1, r2
1004b7ee:	0018      	movs	r0, r3
1004b7f0:	f000 fed0 	bl	1004c594 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(BUTTON_IRQn[Button], NVIC_LOW_PRIORITY, 0);
1004b7f4:	1dfb      	adds	r3, r7, #7
1004b7f6:	781b      	ldrb	r3, [r3, #0]
1004b7f8:	4a1d      	ldr	r2, [pc, #116]	@ (1004b870 <BSP_PB_Init+0x128>)
1004b7fa:	56d3      	ldrsb	r3, [r2, r3]
1004b7fc:	2200      	movs	r2, #0
1004b7fe:	2103      	movs	r1, #3
1004b800:	0018      	movs	r0, r3
1004b802:	f000 fcb5 	bl	1004c170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
1004b806:	1dfb      	adds	r3, r7, #7
1004b808:	781b      	ldrb	r3, [r3, #0]
1004b80a:	4a19      	ldr	r2, [pc, #100]	@ (1004b870 <BSP_PB_Init+0x128>)
1004b80c:	56d3      	ldrsb	r3, [r2, r3]
1004b80e:	0018      	movs	r0, r3
1004b810:	f000 fcc3 	bl	1004c19a <HAL_NVIC_EnableIRQ>

  }
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004b814:	f7ff fe6a 	bl	1004b4ec <LL_PWR_IsEnabledPUPDCfg>
1004b818:	1e03      	subs	r3, r0, #0
1004b81a:	d020      	beq.n	1004b85e <BSP_PB_Init+0x116>
  {
    if (BUTTON_PORT[Button] == GPIOA)
1004b81c:	1dfb      	adds	r3, r7, #7
1004b81e:	781a      	ldrb	r2, [r3, #0]
1004b820:	4b12      	ldr	r3, [pc, #72]	@ (1004b86c <BSP_PB_Init+0x124>)
1004b822:	0092      	lsls	r2, r2, #2
1004b824:	58d2      	ldr	r2, [r2, r3]
1004b826:	2390      	movs	r3, #144	@ 0x90
1004b828:	05db      	lsls	r3, r3, #23
1004b82a:	429a      	cmp	r2, r3
1004b82c:	d107      	bne.n	1004b83e <BSP_PB_Init+0xf6>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
1004b82e:	2308      	movs	r3, #8
1004b830:	18fb      	adds	r3, r7, r3
1004b832:	681b      	ldr	r3, [r3, #0]
1004b834:	4a0f      	ldr	r2, [pc, #60]	@ (1004b874 <BSP_PB_Init+0x12c>)
1004b836:	0019      	movs	r1, r3
1004b838:	0010      	movs	r0, r2
1004b83a:	f7ff fe67 	bl	1004b50c <LL_PWR_EnableGPIOPullUp>
    }
     if (BUTTON_PORT[Button] == GPIOB)
1004b83e:	1dfb      	adds	r3, r7, #7
1004b840:	781a      	ldrb	r2, [r3, #0]
1004b842:	4b0a      	ldr	r3, [pc, #40]	@ (1004b86c <BSP_PB_Init+0x124>)
1004b844:	0092      	lsls	r2, r2, #2
1004b846:	58d3      	ldr	r3, [r2, r3]
1004b848:	4a0b      	ldr	r2, [pc, #44]	@ (1004b878 <BSP_PB_Init+0x130>)
1004b84a:	4293      	cmp	r3, r2
1004b84c:	d107      	bne.n	1004b85e <BSP_PB_Init+0x116>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
1004b84e:	2308      	movs	r3, #8
1004b850:	18fb      	adds	r3, r7, r3
1004b852:	681b      	ldr	r3, [r3, #0]
1004b854:	4a09      	ldr	r2, [pc, #36]	@ (1004b87c <BSP_PB_Init+0x134>)
1004b856:	0019      	movs	r1, r3
1004b858:	0010      	movs	r0, r2
1004b85a:	f7ff fe57 	bl	1004b50c <LL_PWR_EnableGPIOPullUp>
    }
  }
  return status;
1004b85e:	69fb      	ldr	r3, [r7, #28]
}
1004b860:	0018      	movs	r0, r3
1004b862:	46bd      	mov	sp, r7
1004b864:	b008      	add	sp, #32
1004b866:	bd80      	pop	{r7, pc}
1004b868:	200014ec 	.word	0x200014ec
1004b86c:	200014f4 	.word	0x200014f4
1004b870:	20001500 	.word	0x20001500
1004b874:	48500020 	.word	0x48500020
1004b878:	48100000 	.word	0x48100000
1004b87c:	48500028 	.word	0x48500028

1004b880 <BSP_PB_GetState>:
  *     @arg B2
  *     @arg B3
  * @retval 0 means released, 1 means pressed.
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
1004b880:	b580      	push	{r7, lr}
1004b882:	b084      	sub	sp, #16
1004b884:	af00      	add	r7, sp, #0
1004b886:	0002      	movs	r2, r0
1004b888:	1dfb      	adds	r3, r7, #7
1004b88a:	701a      	strb	r2, [r3, #0]
  int32_t status;

  status = (HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET) ? 1 : 0;
1004b88c:	1dfb      	adds	r3, r7, #7
1004b88e:	781a      	ldrb	r2, [r3, #0]
1004b890:	4b0a      	ldr	r3, [pc, #40]	@ (1004b8bc <BSP_PB_GetState+0x3c>)
1004b892:	0092      	lsls	r2, r2, #2
1004b894:	58d0      	ldr	r0, [r2, r3]
1004b896:	1dfb      	adds	r3, r7, #7
1004b898:	781a      	ldrb	r2, [r3, #0]
1004b89a:	4b09      	ldr	r3, [pc, #36]	@ (1004b8c0 <BSP_PB_GetState+0x40>)
1004b89c:	0052      	lsls	r2, r2, #1
1004b89e:	5ad3      	ldrh	r3, [r2, r3]
1004b8a0:	0019      	movs	r1, r3
1004b8a2:	f001 f8ff 	bl	1004caa4 <HAL_GPIO_ReadPin>
1004b8a6:	0003      	movs	r3, r0
1004b8a8:	425a      	negs	r2, r3
1004b8aa:	4153      	adcs	r3, r2
1004b8ac:	b2db      	uxtb	r3, r3
1004b8ae:	60fb      	str	r3, [r7, #12]

  return status;
1004b8b0:	68fb      	ldr	r3, [r7, #12]
}
1004b8b2:	0018      	movs	r0, r3
1004b8b4:	46bd      	mov	sp, r7
1004b8b6:	b004      	add	sp, #16
1004b8b8:	bd80      	pop	{r7, pc}
1004b8ba:	46c0      	nop			@ (mov r8, r8)
1004b8bc:	200014f4 	.word	0x200014f4
1004b8c0:	200014ec 	.word	0x200014ec

1004b8c4 <BSP_PB_IRQHandler>:
  * @param  GPIO_Pin Contains the pin state of GPIO when the interrupt occurred
  * @retval None.
  */

void BSP_PB_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
1004b8c4:	b580      	push	{r7, lr}
1004b8c6:	b082      	sub	sp, #8
1004b8c8:	af00      	add	r7, sp, #0
1004b8ca:	6078      	str	r0, [r7, #4]
1004b8cc:	000a      	movs	r2, r1
1004b8ce:	1cbb      	adds	r3, r7, #2
1004b8d0:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler( GPIOx, GPIO_Pin);
1004b8d2:	1cbb      	adds	r3, r7, #2
1004b8d4:	881a      	ldrh	r2, [r3, #0]
1004b8d6:	687b      	ldr	r3, [r7, #4]
1004b8d8:	0011      	movs	r1, r2
1004b8da:	0018      	movs	r0, r3
1004b8dc:	f001 f91c 	bl	1004cb18 <HAL_GPIO_EXTI_IRQHandler>
}
1004b8e0:	46c0      	nop			@ (mov r8, r8)
1004b8e2:	46bd      	mov	sp, r7
1004b8e4:	b002      	add	sp, #8
1004b8e6:	bd80      	pop	{r7, pc}

1004b8e8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
1004b8e8:	b580      	push	{r7, lr}
1004b8ea:	b084      	sub	sp, #16
1004b8ec:	af00      	add	r7, sp, #0
1004b8ee:	0002      	movs	r2, r0
1004b8f0:	6039      	str	r1, [r7, #0]
1004b8f2:	1dfb      	adds	r3, r7, #7
1004b8f4:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
1004b8f6:	2300      	movs	r3, #0
1004b8f8:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
1004b8fa:	683b      	ldr	r3, [r7, #0]
1004b8fc:	2b00      	cmp	r3, #0
1004b8fe:	d103      	bne.n	1004b908 <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
1004b900:	2302      	movs	r3, #2
1004b902:	425b      	negs	r3, r3
1004b904:	60fb      	str	r3, [r7, #12]
1004b906:	e05a      	b.n	1004b9be <BSP_COM_Init+0xd6>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
1004b908:	1dfb      	adds	r3, r7, #7
1004b90a:	7819      	ldrb	r1, [r3, #0]
1004b90c:	1dfb      	adds	r3, r7, #7
1004b90e:	781a      	ldrb	r2, [r3, #0]
1004b910:	4b2d      	ldr	r3, [pc, #180]	@ (1004b9c8 <BSP_COM_Init+0xe0>)
1004b912:	0089      	lsls	r1, r1, #2
1004b914:	58c9      	ldr	r1, [r1, r3]
1004b916:	4b2d      	ldr	r3, [pc, #180]	@ (1004b9cc <BSP_COM_Init+0xe4>)
1004b918:	20cc      	movs	r0, #204	@ 0xcc
1004b91a:	4342      	muls	r2, r0
1004b91c:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
#else
    if (IsComMspCbValid[COM] == 0U)
1004b91e:	1dfb      	adds	r3, r7, #7
1004b920:	781a      	ldrb	r2, [r3, #0]
1004b922:	4b2b      	ldr	r3, [pc, #172]	@ (1004b9d0 <BSP_COM_Init+0xe8>)
1004b924:	0092      	lsls	r2, r2, #2
1004b926:	58d3      	ldr	r3, [r2, r3]
1004b928:	2b00      	cmp	r3, #0
1004b92a:	d109      	bne.n	1004b940 <BSP_COM_Init+0x58>
    {
      /* Register the MSP callbacks */
      if (BSP_COM_RegisterDefaultMspCallbacks(COM) != BSP_ERROR_NONE)
1004b92c:	1dfb      	adds	r3, r7, #7
1004b92e:	781b      	ldrb	r3, [r3, #0]
1004b930:	0018      	movs	r0, r3
1004b932:	f000 f869 	bl	1004ba08 <BSP_COM_RegisterDefaultMspCallbacks>
1004b936:	1e03      	subs	r3, r0, #0
1004b938:	d002      	beq.n	1004b940 <BSP_COM_Init+0x58>
      {
        status = BSP_ERROR_MSP_FAILURE;
1004b93a:	230a      	movs	r3, #10
1004b93c:	425b      	negs	r3, r3
1004b93e:	60fb      	str	r3, [r7, #12]
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
1004b940:	68fb      	ldr	r3, [r7, #12]
1004b942:	2b00      	cmp	r3, #0
1004b944:	d10f      	bne.n	1004b966 <BSP_COM_Init+0x7e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
1004b946:	1dfb      	adds	r3, r7, #7
1004b948:	781b      	ldrb	r3, [r3, #0]
1004b94a:	22cc      	movs	r2, #204	@ 0xcc
1004b94c:	435a      	muls	r2, r3
1004b94e:	4b1f      	ldr	r3, [pc, #124]	@ (1004b9cc <BSP_COM_Init+0xe4>)
1004b950:	18d3      	adds	r3, r2, r3
1004b952:	683a      	ldr	r2, [r7, #0]
1004b954:	0011      	movs	r1, r2
1004b956:	0018      	movs	r0, r3
1004b958:	f000 f894 	bl	1004ba84 <MX_USART1_Init>
1004b95c:	1e03      	subs	r3, r0, #0
1004b95e:	d002      	beq.n	1004b966 <BSP_COM_Init+0x7e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
1004b960:	2304      	movs	r3, #4
1004b962:	425b      	negs	r3, r3
1004b964:	60fb      	str	r3, [r7, #12]
      }
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&hcom_uart[COM], UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
1004b966:	1dfb      	adds	r3, r7, #7
1004b968:	781b      	ldrb	r3, [r3, #0]
1004b96a:	22cc      	movs	r2, #204	@ 0xcc
1004b96c:	435a      	muls	r2, r3
1004b96e:	4b17      	ldr	r3, [pc, #92]	@ (1004b9cc <BSP_COM_Init+0xe4>)
1004b970:	18d3      	adds	r3, r2, r3
1004b972:	2100      	movs	r1, #0
1004b974:	0018      	movs	r0, r3
1004b976:	f005 ffa9 	bl	100518cc <HAL_UARTEx_SetTxFifoThreshold>
1004b97a:	1e03      	subs	r3, r0, #0
1004b97c:	d002      	beq.n	1004b984 <BSP_COM_Init+0x9c>
    {
      status = BSP_ERROR_PERIPH_FAILURE;
1004b97e:	2304      	movs	r3, #4
1004b980:	425b      	negs	r3, r3
1004b982:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&hcom_uart[COM], UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
1004b984:	1dfb      	adds	r3, r7, #7
1004b986:	781b      	ldrb	r3, [r3, #0]
1004b988:	22cc      	movs	r2, #204	@ 0xcc
1004b98a:	435a      	muls	r2, r3
1004b98c:	4b0f      	ldr	r3, [pc, #60]	@ (1004b9cc <BSP_COM_Init+0xe4>)
1004b98e:	18d3      	adds	r3, r2, r3
1004b990:	2100      	movs	r1, #0
1004b992:	0018      	movs	r0, r3
1004b994:	f005 ffda 	bl	1005194c <HAL_UARTEx_SetRxFifoThreshold>
1004b998:	1e03      	subs	r3, r0, #0
1004b99a:	d002      	beq.n	1004b9a2 <BSP_COM_Init+0xba>
    {
      status = BSP_ERROR_PERIPH_FAILURE;
1004b99c:	2304      	movs	r3, #4
1004b99e:	425b      	negs	r3, r3
1004b9a0:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_UARTEx_EnableFifoMode(&hcom_uart[COM]) != HAL_OK)
1004b9a2:	1dfb      	adds	r3, r7, #7
1004b9a4:	781b      	ldrb	r3, [r3, #0]
1004b9a6:	22cc      	movs	r2, #204	@ 0xcc
1004b9a8:	435a      	muls	r2, r3
1004b9aa:	4b08      	ldr	r3, [pc, #32]	@ (1004b9cc <BSP_COM_Init+0xe4>)
1004b9ac:	18d3      	adds	r3, r2, r3
1004b9ae:	0018      	movs	r0, r3
1004b9b0:	f005 ff4f 	bl	10051852 <HAL_UARTEx_EnableFifoMode>
1004b9b4:	1e03      	subs	r3, r0, #0
1004b9b6:	d002      	beq.n	1004b9be <BSP_COM_Init+0xd6>
    {
      status = BSP_ERROR_PERIPH_FAILURE;
1004b9b8:	2304      	movs	r3, #4
1004b9ba:	425b      	negs	r3, r3
1004b9bc:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
1004b9be:	68fb      	ldr	r3, [r7, #12]
}
1004b9c0:	0018      	movs	r0, r3
1004b9c2:	46bd      	mov	sp, r7
1004b9c4:	b004      	add	sp, #16
1004b9c6:	bd80      	pop	{r7, pc}
1004b9c8:	20001504 	.word	0x20001504
1004b9cc:	20000ea8 	.word	0x20000ea8
1004b9d0:	20000f74 	.word	0x20000f74

1004b9d4 <__io_putchar>:
  return 1;
}

#elif defined(__GNUC__)
int __io_putchar(int ch)
{
1004b9d4:	b580      	push	{r7, lr}
1004b9d6:	b082      	sub	sp, #8
1004b9d8:	af00      	add	r7, sp, #0
1004b9da:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
1004b9dc:	4b08      	ldr	r3, [pc, #32]	@ (1004ba00 <__io_putchar+0x2c>)
1004b9de:	781b      	ldrb	r3, [r3, #0]
1004b9e0:	001a      	movs	r2, r3
1004b9e2:	23cc      	movs	r3, #204	@ 0xcc
1004b9e4:	435a      	muls	r2, r3
1004b9e6:	4b07      	ldr	r3, [pc, #28]	@ (1004ba04 <__io_putchar+0x30>)
1004b9e8:	18d0      	adds	r0, r2, r3
1004b9ea:	23fa      	movs	r3, #250	@ 0xfa
1004b9ec:	009b      	lsls	r3, r3, #2
1004b9ee:	1d39      	adds	r1, r7, #4
1004b9f0:	2201      	movs	r2, #1
1004b9f2:	f004 fdbd 	bl	10050570 <HAL_UART_Transmit>
  return ch;
1004b9f6:	687b      	ldr	r3, [r7, #4]
}
1004b9f8:	0018      	movs	r0, r3
1004b9fa:	46bd      	mov	sp, r7
1004b9fc:	b002      	add	sp, #8
1004b9fe:	bd80      	pop	{r7, pc}
1004ba00:	20000f78 	.word	0x20000f78
1004ba04:	20000ea8 	.word	0x20000ea8

1004ba08 <BSP_COM_RegisterDefaultMspCallbacks>:
  * @param  COM COM port.
  *          This parameter can be COM1.
  * @retval BSP status.
  */
int32_t BSP_COM_RegisterDefaultMspCallbacks(COM_TypeDef COM)
{
1004ba08:	b580      	push	{r7, lr}
1004ba0a:	b084      	sub	sp, #16
1004ba0c:	af00      	add	r7, sp, #0
1004ba0e:	0002      	movs	r2, r0
1004ba10:	1dfb      	adds	r3, r7, #7
1004ba12:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
1004ba14:	2300      	movs	r3, #0
1004ba16:	60fb      	str	r3, [r7, #12]

  /* Register MspInit/MspDeInit callbacks */
  if (HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPINIT_CB_ID, UART_MspInit) != HAL_OK)
1004ba18:	1dfb      	adds	r3, r7, #7
1004ba1a:	781b      	ldrb	r3, [r3, #0]
1004ba1c:	22cc      	movs	r2, #204	@ 0xcc
1004ba1e:	435a      	muls	r2, r3
1004ba20:	4b14      	ldr	r3, [pc, #80]	@ (1004ba74 <BSP_COM_RegisterDefaultMspCallbacks+0x6c>)
1004ba22:	18d3      	adds	r3, r2, r3
1004ba24:	4a14      	ldr	r2, [pc, #80]	@ (1004ba78 <BSP_COM_RegisterDefaultMspCallbacks+0x70>)
1004ba26:	210b      	movs	r1, #11
1004ba28:	0018      	movs	r0, r3
1004ba2a:	f004 fcf1 	bl	10050410 <HAL_UART_RegisterCallback>
1004ba2e:	1e03      	subs	r3, r0, #0
1004ba30:	d003      	beq.n	1004ba3a <BSP_COM_RegisterDefaultMspCallbacks+0x32>
  {
    status = BSP_ERROR_PERIPH_FAILURE;
1004ba32:	2304      	movs	r3, #4
1004ba34:	425b      	negs	r3, r3
1004ba36:	60fb      	str	r3, [r7, #12]
1004ba38:	e016      	b.n	1004ba68 <BSP_COM_RegisterDefaultMspCallbacks+0x60>
  }
  else if (HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPDEINIT_CB_ID, UART_MspDeInit) != HAL_OK)
1004ba3a:	1dfb      	adds	r3, r7, #7
1004ba3c:	781b      	ldrb	r3, [r3, #0]
1004ba3e:	22cc      	movs	r2, #204	@ 0xcc
1004ba40:	435a      	muls	r2, r3
1004ba42:	4b0c      	ldr	r3, [pc, #48]	@ (1004ba74 <BSP_COM_RegisterDefaultMspCallbacks+0x6c>)
1004ba44:	18d3      	adds	r3, r2, r3
1004ba46:	4a0d      	ldr	r2, [pc, #52]	@ (1004ba7c <BSP_COM_RegisterDefaultMspCallbacks+0x74>)
1004ba48:	210c      	movs	r1, #12
1004ba4a:	0018      	movs	r0, r3
1004ba4c:	f004 fce0 	bl	10050410 <HAL_UART_RegisterCallback>
1004ba50:	1e03      	subs	r3, r0, #0
1004ba52:	d003      	beq.n	1004ba5c <BSP_COM_RegisterDefaultMspCallbacks+0x54>
  {
    status = BSP_ERROR_PERIPH_FAILURE;
1004ba54:	2304      	movs	r3, #4
1004ba56:	425b      	negs	r3, r3
1004ba58:	60fb      	str	r3, [r7, #12]
1004ba5a:	e005      	b.n	1004ba68 <BSP_COM_RegisterDefaultMspCallbacks+0x60>
  }
  else
  {
    IsComMspCbValid[COM] = 1U;
1004ba5c:	1dfb      	adds	r3, r7, #7
1004ba5e:	781a      	ldrb	r2, [r3, #0]
1004ba60:	4b07      	ldr	r3, [pc, #28]	@ (1004ba80 <BSP_COM_RegisterDefaultMspCallbacks+0x78>)
1004ba62:	0092      	lsls	r2, r2, #2
1004ba64:	2101      	movs	r1, #1
1004ba66:	50d1      	str	r1, [r2, r3]
  }
  /* Return BSP status */
  return status;
1004ba68:	68fb      	ldr	r3, [r7, #12]
}
1004ba6a:	0018      	movs	r0, r3
1004ba6c:	46bd      	mov	sp, r7
1004ba6e:	b004      	add	sp, #16
1004ba70:	bd80      	pop	{r7, pc}
1004ba72:	46c0      	nop			@ (mov r8, r8)
1004ba74:	20000ea8 	.word	0x20000ea8
1004ba78:	1004bae9 	.word	0x1004bae9
1004ba7c:	1004bb75 	.word	0x1004bb75
1004ba80:	20000f74 	.word	0x20000f74

1004ba84 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
1004ba84:	b580      	push	{r7, lr}
1004ba86:	b082      	sub	sp, #8
1004ba88:	af00      	add	r7, sp, #0
1004ba8a:	6078      	str	r0, [r7, #4]
1004ba8c:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
1004ba8e:	683b      	ldr	r3, [r7, #0]
1004ba90:	681a      	ldr	r2, [r3, #0]
1004ba92:	687b      	ldr	r3, [r7, #4]
1004ba94:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
1004ba96:	683b      	ldr	r3, [r7, #0]
1004ba98:	685a      	ldr	r2, [r3, #4]
1004ba9a:	687b      	ldr	r3, [r7, #4]
1004ba9c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
1004ba9e:	683b      	ldr	r3, [r7, #0]
1004baa0:	891b      	ldrh	r3, [r3, #8]
1004baa2:	001a      	movs	r2, r3
1004baa4:	687b      	ldr	r3, [r7, #4]
1004baa6:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
1004baa8:	683b      	ldr	r3, [r7, #0]
1004baaa:	895b      	ldrh	r3, [r3, #10]
1004baac:	001a      	movs	r2, r3
1004baae:	687b      	ldr	r3, [r7, #4]
1004bab0:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
1004bab2:	687b      	ldr	r3, [r7, #4]
1004bab4:	220c      	movs	r2, #12
1004bab6:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
1004bab8:	683b      	ldr	r3, [r7, #0]
1004baba:	899b      	ldrh	r3, [r3, #12]
1004babc:	001a      	movs	r2, r3
1004babe:	687b      	ldr	r3, [r7, #4]
1004bac0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
1004bac2:	687b      	ldr	r3, [r7, #4]
1004bac4:	2280      	movs	r2, #128	@ 0x80
1004bac6:	0212      	lsls	r2, r2, #8
1004bac8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1004baca:	687b      	ldr	r3, [r7, #4]
1004bacc:	2200      	movs	r2, #0
1004bace:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
1004bad0:	687b      	ldr	r3, [r7, #4]
1004bad2:	2200      	movs	r2, #0
1004bad4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
1004bad6:	687b      	ldr	r3, [r7, #4]
1004bad8:	0018      	movs	r0, r3
1004bada:	f004 fc31 	bl	10050340 <HAL_UART_Init>
1004bade:	0003      	movs	r3, r0
}
1004bae0:	0018      	movs	r0, r3
1004bae2:	46bd      	mov	sp, r7
1004bae4:	b002      	add	sp, #8
1004bae6:	bd80      	pop	{r7, pc}

1004bae8 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
1004bae8:	b590      	push	{r4, r7, lr}
1004baea:	b089      	sub	sp, #36	@ 0x24
1004baec:	af00      	add	r7, sp, #0
1004baee:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
1004baf0:	2004      	movs	r0, #4
1004baf2:	f7ff fd23 	bl	1004b53c <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
1004baf6:	2008      	movs	r0, #8
1004baf8:	f7ff fd20 	bl	1004b53c <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
1004bafc:	2380      	movs	r3, #128	@ 0x80
1004bafe:	00db      	lsls	r3, r3, #3
1004bb00:	0018      	movs	r0, r3
1004bb02:	f7ff fd47 	bl	1004b594 <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
1004bb06:	240c      	movs	r4, #12
1004bb08:	193b      	adds	r3, r7, r4
1004bb0a:	2202      	movs	r2, #2
1004bb0c:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
1004bb0e:	193b      	adds	r3, r7, r4
1004bb10:	2202      	movs	r2, #2
1004bb12:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
1004bb14:	193b      	adds	r3, r7, r4
1004bb16:	2202      	movs	r2, #2
1004bb18:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
1004bb1a:	193b      	adds	r3, r7, r4
1004bb1c:	2201      	movs	r2, #1
1004bb1e:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
1004bb20:	193b      	adds	r3, r7, r4
1004bb22:	2202      	movs	r2, #2
1004bb24:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
1004bb26:	193a      	adds	r2, r7, r4
1004bb28:	2390      	movs	r3, #144	@ 0x90
1004bb2a:	05db      	lsls	r3, r3, #23
1004bb2c:	0011      	movs	r1, r2
1004bb2e:	0018      	movs	r0, r3
1004bb30:	f000 fd30 	bl	1004c594 <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004bb34:	f7ff fcda 	bl	1004b4ec <LL_PWR_IsEnabledPUPDCfg>
1004bb38:	1e03      	subs	r3, r0, #0
1004bb3a:	d006      	beq.n	1004bb4a <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
1004bb3c:	193b      	adds	r3, r7, r4
1004bb3e:	681b      	ldr	r3, [r3, #0]
1004bb40:	4a0a      	ldr	r2, [pc, #40]	@ (1004bb6c <UART_MspInit+0x84>)
1004bb42:	0019      	movs	r1, r3
1004bb44:	0010      	movs	r0, r2
1004bb46:	f7ff fce1 	bl	1004b50c <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
1004bb4a:	210c      	movs	r1, #12
1004bb4c:	187b      	adds	r3, r7, r1
1004bb4e:	2201      	movs	r2, #1
1004bb50:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
1004bb52:	187b      	adds	r3, r7, r1
1004bb54:	2200      	movs	r2, #0
1004bb56:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
1004bb58:	187b      	adds	r3, r7, r1
1004bb5a:	4a05      	ldr	r2, [pc, #20]	@ (1004bb70 <UART_MspInit+0x88>)
1004bb5c:	0019      	movs	r1, r3
1004bb5e:	0010      	movs	r0, r2
1004bb60:	f000 fd18 	bl	1004c594 <HAL_GPIO_Init>
}
1004bb64:	46c0      	nop			@ (mov r8, r8)
1004bb66:	46bd      	mov	sp, r7
1004bb68:	b009      	add	sp, #36	@ 0x24
1004bb6a:	bd90      	pop	{r4, r7, pc}
1004bb6c:	48500020 	.word	0x48500020
1004bb70:	48100000 	.word	0x48100000

1004bb74 <UART_MspDeInit>:
  * @brief  Deinitialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspDeInit(UART_HandleTypeDef *huart)
{
1004bb74:	b580      	push	{r7, lr}
1004bb76:	b082      	sub	sp, #8
1004bb78:	af00      	add	r7, sp, #0
1004bb7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Disable GPIOs and COM clock */
  HAL_GPIO_DeInit(COM1_TX_GPIO_PORT, COM1_TX_PIN);
1004bb7c:	2390      	movs	r3, #144	@ 0x90
1004bb7e:	05db      	lsls	r3, r3, #23
1004bb80:	2102      	movs	r1, #2
1004bb82:	0018      	movs	r0, r3
1004bb84:	f000 feab 	bl	1004c8de <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(COM1_RX_GPIO_PORT, COM1_RX_PIN);
1004bb88:	4b06      	ldr	r3, [pc, #24]	@ (1004bba4 <UART_MspDeInit+0x30>)
1004bb8a:	2101      	movs	r1, #1
1004bb8c:	0018      	movs	r0, r3
1004bb8e:	f000 fea6 	bl	1004c8de <HAL_GPIO_DeInit>
  COM1_CLK_DISABLE();
1004bb92:	2380      	movs	r3, #128	@ 0x80
1004bb94:	00db      	lsls	r3, r3, #3
1004bb96:	0018      	movs	r0, r3
1004bb98:	f7ff fd12 	bl	1004b5c0 <LL_APB1_GRP1_DisableClock>
}
1004bb9c:	46c0      	nop			@ (mov r8, r8)
1004bb9e:	46bd      	mov	sp, r7
1004bba0:	b002      	add	sp, #8
1004bba2:	bd80      	pop	{r7, pc}
1004bba4:	48100000 	.word	0x48100000

1004bba8 <__NVIC_SetPriority>:
{
1004bba8:	b590      	push	{r4, r7, lr}
1004bbaa:	b083      	sub	sp, #12
1004bbac:	af00      	add	r7, sp, #0
1004bbae:	0002      	movs	r2, r0
1004bbb0:	6039      	str	r1, [r7, #0]
1004bbb2:	1dfb      	adds	r3, r7, #7
1004bbb4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004bbb6:	1dfb      	adds	r3, r7, #7
1004bbb8:	781b      	ldrb	r3, [r3, #0]
1004bbba:	2b7f      	cmp	r3, #127	@ 0x7f
1004bbbc:	d828      	bhi.n	1004bc10 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004bbbe:	4a2f      	ldr	r2, [pc, #188]	@ (1004bc7c <__NVIC_SetPriority+0xd4>)
1004bbc0:	1dfb      	adds	r3, r7, #7
1004bbc2:	781b      	ldrb	r3, [r3, #0]
1004bbc4:	b25b      	sxtb	r3, r3
1004bbc6:	089b      	lsrs	r3, r3, #2
1004bbc8:	33c0      	adds	r3, #192	@ 0xc0
1004bbca:	009b      	lsls	r3, r3, #2
1004bbcc:	589b      	ldr	r3, [r3, r2]
1004bbce:	1dfa      	adds	r2, r7, #7
1004bbd0:	7812      	ldrb	r2, [r2, #0]
1004bbd2:	0011      	movs	r1, r2
1004bbd4:	2203      	movs	r2, #3
1004bbd6:	400a      	ands	r2, r1
1004bbd8:	00d2      	lsls	r2, r2, #3
1004bbda:	21ff      	movs	r1, #255	@ 0xff
1004bbdc:	4091      	lsls	r1, r2
1004bbde:	000a      	movs	r2, r1
1004bbe0:	43d2      	mvns	r2, r2
1004bbe2:	401a      	ands	r2, r3
1004bbe4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004bbe6:	683b      	ldr	r3, [r7, #0]
1004bbe8:	019b      	lsls	r3, r3, #6
1004bbea:	22ff      	movs	r2, #255	@ 0xff
1004bbec:	401a      	ands	r2, r3
1004bbee:	1dfb      	adds	r3, r7, #7
1004bbf0:	781b      	ldrb	r3, [r3, #0]
1004bbf2:	0018      	movs	r0, r3
1004bbf4:	2303      	movs	r3, #3
1004bbf6:	4003      	ands	r3, r0
1004bbf8:	00db      	lsls	r3, r3, #3
1004bbfa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004bbfc:	481f      	ldr	r0, [pc, #124]	@ (1004bc7c <__NVIC_SetPriority+0xd4>)
1004bbfe:	1dfb      	adds	r3, r7, #7
1004bc00:	781b      	ldrb	r3, [r3, #0]
1004bc02:	b25b      	sxtb	r3, r3
1004bc04:	089b      	lsrs	r3, r3, #2
1004bc06:	430a      	orrs	r2, r1
1004bc08:	33c0      	adds	r3, #192	@ 0xc0
1004bc0a:	009b      	lsls	r3, r3, #2
1004bc0c:	501a      	str	r2, [r3, r0]
}
1004bc0e:	e031      	b.n	1004bc74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004bc10:	4a1b      	ldr	r2, [pc, #108]	@ (1004bc80 <__NVIC_SetPriority+0xd8>)
1004bc12:	1dfb      	adds	r3, r7, #7
1004bc14:	781b      	ldrb	r3, [r3, #0]
1004bc16:	0019      	movs	r1, r3
1004bc18:	230f      	movs	r3, #15
1004bc1a:	400b      	ands	r3, r1
1004bc1c:	3b08      	subs	r3, #8
1004bc1e:	089b      	lsrs	r3, r3, #2
1004bc20:	3306      	adds	r3, #6
1004bc22:	009b      	lsls	r3, r3, #2
1004bc24:	18d3      	adds	r3, r2, r3
1004bc26:	3304      	adds	r3, #4
1004bc28:	681b      	ldr	r3, [r3, #0]
1004bc2a:	1dfa      	adds	r2, r7, #7
1004bc2c:	7812      	ldrb	r2, [r2, #0]
1004bc2e:	0011      	movs	r1, r2
1004bc30:	2203      	movs	r2, #3
1004bc32:	400a      	ands	r2, r1
1004bc34:	00d2      	lsls	r2, r2, #3
1004bc36:	21ff      	movs	r1, #255	@ 0xff
1004bc38:	4091      	lsls	r1, r2
1004bc3a:	000a      	movs	r2, r1
1004bc3c:	43d2      	mvns	r2, r2
1004bc3e:	401a      	ands	r2, r3
1004bc40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004bc42:	683b      	ldr	r3, [r7, #0]
1004bc44:	019b      	lsls	r3, r3, #6
1004bc46:	22ff      	movs	r2, #255	@ 0xff
1004bc48:	401a      	ands	r2, r3
1004bc4a:	1dfb      	adds	r3, r7, #7
1004bc4c:	781b      	ldrb	r3, [r3, #0]
1004bc4e:	0018      	movs	r0, r3
1004bc50:	2303      	movs	r3, #3
1004bc52:	4003      	ands	r3, r0
1004bc54:	00db      	lsls	r3, r3, #3
1004bc56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004bc58:	4809      	ldr	r0, [pc, #36]	@ (1004bc80 <__NVIC_SetPriority+0xd8>)
1004bc5a:	1dfb      	adds	r3, r7, #7
1004bc5c:	781b      	ldrb	r3, [r3, #0]
1004bc5e:	001c      	movs	r4, r3
1004bc60:	230f      	movs	r3, #15
1004bc62:	4023      	ands	r3, r4
1004bc64:	3b08      	subs	r3, #8
1004bc66:	089b      	lsrs	r3, r3, #2
1004bc68:	430a      	orrs	r2, r1
1004bc6a:	3306      	adds	r3, #6
1004bc6c:	009b      	lsls	r3, r3, #2
1004bc6e:	18c3      	adds	r3, r0, r3
1004bc70:	3304      	adds	r3, #4
1004bc72:	601a      	str	r2, [r3, #0]
}
1004bc74:	46c0      	nop			@ (mov r8, r8)
1004bc76:	46bd      	mov	sp, r7
1004bc78:	b003      	add	sp, #12
1004bc7a:	bd90      	pop	{r4, r7, pc}
1004bc7c:	e000e100 	.word	0xe000e100
1004bc80:	e000ed00 	.word	0xe000ed00

1004bc84 <__NVIC_SystemReset>:
{
1004bc84:	b580      	push	{r7, lr}
1004bc86:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
1004bc88:	f3bf 8f4f 	dsb	sy
}
1004bc8c:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1004bc8e:	4b04      	ldr	r3, [pc, #16]	@ (1004bca0 <__NVIC_SystemReset+0x1c>)
1004bc90:	4a04      	ldr	r2, [pc, #16]	@ (1004bca4 <__NVIC_SystemReset+0x20>)
1004bc92:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
1004bc94:	f3bf 8f4f 	dsb	sy
}
1004bc98:	46c0      	nop			@ (mov r8, r8)
    __NOP();
1004bc9a:	46c0      	nop			@ (mov r8, r8)
1004bc9c:	e7fd      	b.n	1004bc9a <__NVIC_SystemReset+0x16>
1004bc9e:	46c0      	nop			@ (mov r8, r8)
1004bca0:	e000ed00 	.word	0xe000ed00
1004bca4:	05fa0004 	.word	0x05fa0004

1004bca8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
1004bca8:	b590      	push	{r4, r7, lr}
1004bcaa:	b087      	sub	sp, #28
1004bcac:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
1004bcae:	4a64      	ldr	r2, [pc, #400]	@ (1004be40 <SystemInit+0x198>)
1004bcb0:	2394      	movs	r3, #148	@ 0x94
1004bcb2:	58d3      	ldr	r3, [r2, r3]
1004bcb4:	2b00      	cmp	r3, #0
1004bcb6:	d10e      	bne.n	1004bcd6 <SystemInit+0x2e>
1004bcb8:	4b62      	ldr	r3, [pc, #392]	@ (1004be44 <SystemInit+0x19c>)
1004bcba:	691b      	ldr	r3, [r3, #16]
1004bcbc:	2b00      	cmp	r3, #0
1004bcbe:	d103      	bne.n	1004bcc8 <SystemInit+0x20>
1004bcc0:	4b60      	ldr	r3, [pc, #384]	@ (1004be44 <SystemInit+0x19c>)
1004bcc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004bcc4:	2b00      	cmp	r3, #0
1004bcc6:	d006      	beq.n	1004bcd6 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
1004bcc8:	4b5f      	ldr	r3, [pc, #380]	@ (1004be48 <SystemInit+0x1a0>)
1004bcca:	2201      	movs	r2, #1
1004bccc:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
1004bcce:	f7f4 fa8b 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
1004bcd2:	f7ff ffd7 	bl	1004bc84 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
1004bcd6:	4b5d      	ldr	r3, [pc, #372]	@ (1004be4c <SystemInit+0x1a4>)
1004bcd8:	4a5d      	ldr	r2, [pc, #372]	@ (1004be50 <SystemInit+0x1a8>)
1004bcda:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
1004bcdc:	4b5b      	ldr	r3, [pc, #364]	@ (1004be4c <SystemInit+0x1a4>)
1004bcde:	689a      	ldr	r2, [r3, #8]
1004bce0:	4b59      	ldr	r3, [pc, #356]	@ (1004be48 <SystemInit+0x1a0>)
1004bce2:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
1004bce4:	4b57      	ldr	r3, [pc, #348]	@ (1004be44 <SystemInit+0x19c>)
1004bce6:	685a      	ldr	r2, [r3, #4]
1004bce8:	4b56      	ldr	r3, [pc, #344]	@ (1004be44 <SystemInit+0x19c>)
1004bcea:	2120      	movs	r1, #32
1004bcec:	430a      	orrs	r2, r1
1004bcee:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
1004bcf0:	4b54      	ldr	r3, [pc, #336]	@ (1004be44 <SystemInit+0x19c>)
1004bcf2:	685a      	ldr	r2, [r3, #4]
1004bcf4:	4b53      	ldr	r3, [pc, #332]	@ (1004be44 <SystemInit+0x19c>)
1004bcf6:	2140      	movs	r1, #64	@ 0x40
1004bcf8:	430a      	orrs	r2, r1
1004bcfa:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
1004bcfc:	4b51      	ldr	r3, [pc, #324]	@ (1004be44 <SystemInit+0x19c>)
1004bcfe:	685a      	ldr	r2, [r3, #4]
1004bd00:	4b50      	ldr	r3, [pc, #320]	@ (1004be44 <SystemInit+0x19c>)
1004bd02:	2180      	movs	r1, #128	@ 0x80
1004bd04:	430a      	orrs	r2, r1
1004bd06:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
1004bd08:	4b4e      	ldr	r3, [pc, #312]	@ (1004be44 <SystemInit+0x19c>)
1004bd0a:	685a      	ldr	r2, [r3, #4]
1004bd0c:	4b4d      	ldr	r3, [pc, #308]	@ (1004be44 <SystemInit+0x19c>)
1004bd0e:	4951      	ldr	r1, [pc, #324]	@ (1004be54 <SystemInit+0x1ac>)
1004bd10:	400a      	ands	r2, r1
1004bd12:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
1004bd14:	46c0      	nop			@ (mov r8, r8)
1004bd16:	4b4b      	ldr	r3, [pc, #300]	@ (1004be44 <SystemInit+0x19c>)
1004bd18:	695b      	ldr	r3, [r3, #20]
1004bd1a:	2204      	movs	r2, #4
1004bd1c:	4013      	ands	r3, r2
1004bd1e:	2b04      	cmp	r3, #4
1004bd20:	d1f9      	bne.n	1004bd16 <SystemInit+0x6e>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
1004bd22:	4b48      	ldr	r3, [pc, #288]	@ (1004be44 <SystemInit+0x19c>)
1004bd24:	69db      	ldr	r3, [r3, #28]
1004bd26:	2230      	movs	r2, #48	@ 0x30
1004bd28:	4393      	bics	r3, r2
1004bd2a:	001a      	movs	r2, r3
1004bd2c:	4b45      	ldr	r3, [pc, #276]	@ (1004be44 <SystemInit+0x19c>)
1004bd2e:	2120      	movs	r1, #32
1004bd30:	430a      	orrs	r2, r1
1004bd32:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
1004bd34:	4b43      	ldr	r3, [pc, #268]	@ (1004be44 <SystemInit+0x19c>)
1004bd36:	69da      	ldr	r2, [r3, #28]
1004bd38:	4b42      	ldr	r3, [pc, #264]	@ (1004be44 <SystemInit+0x19c>)
1004bd3a:	4947      	ldr	r1, [pc, #284]	@ (1004be58 <SystemInit+0x1b0>)
1004bd3c:	400a      	ands	r2, r1
1004bd3e:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
1004bd40:	4b40      	ldr	r3, [pc, #256]	@ (1004be44 <SystemInit+0x19c>)
1004bd42:	69da      	ldr	r2, [r3, #28]
1004bd44:	4b3f      	ldr	r3, [pc, #252]	@ (1004be44 <SystemInit+0x19c>)
1004bd46:	2180      	movs	r1, #128	@ 0x80
1004bd48:	0049      	lsls	r1, r1, #1
1004bd4a:	430a      	orrs	r2, r1
1004bd4c:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
1004bd4e:	4b43      	ldr	r3, [pc, #268]	@ (1004be5c <SystemInit+0x1b4>)
1004bd50:	681b      	ldr	r3, [r3, #0]
1004bd52:	4a43      	ldr	r2, [pc, #268]	@ (1004be60 <SystemInit+0x1b8>)
1004bd54:	4293      	cmp	r3, r2
1004bd56:	d055      	beq.n	1004be04 <SystemInit+0x15c>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
1004bd58:	231f      	movs	r3, #31
1004bd5a:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
1004bd5c:	2308      	movs	r3, #8
1004bd5e:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
1004bd60:	230a      	movs	r3, #10
1004bd62:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
1004bd64:	2303      	movs	r3, #3
1004bd66:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
1004bd68:	4b35      	ldr	r3, [pc, #212]	@ (1004be40 <SystemInit+0x198>)
1004bd6a:	68db      	ldr	r3, [r3, #12]
1004bd6c:	221e      	movs	r2, #30
1004bd6e:	4393      	bics	r3, r2
1004bd70:	0019      	movs	r1, r3
1004bd72:	68fb      	ldr	r3, [r7, #12]
1004bd74:	005a      	lsls	r2, r3, #1
1004bd76:	4b32      	ldr	r3, [pc, #200]	@ (1004be40 <SystemInit+0x198>)
1004bd78:	430a      	orrs	r2, r1
1004bd7a:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
1004bd7c:	4b30      	ldr	r3, [pc, #192]	@ (1004be40 <SystemInit+0x198>)
1004bd7e:	68da      	ldr	r2, [r3, #12]
1004bd80:	4b2f      	ldr	r3, [pc, #188]	@ (1004be40 <SystemInit+0x198>)
1004bd82:	2101      	movs	r1, #1
1004bd84:	430a      	orrs	r2, r1
1004bd86:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
1004bd88:	4b2d      	ldr	r3, [pc, #180]	@ (1004be40 <SystemInit+0x198>)
1004bd8a:	68db      	ldr	r3, [r3, #12]
1004bd8c:	4a35      	ldr	r2, [pc, #212]	@ (1004be64 <SystemInit+0x1bc>)
1004bd8e:	4013      	ands	r3, r2
1004bd90:	0019      	movs	r1, r3
1004bd92:	693b      	ldr	r3, [r7, #16]
1004bd94:	061a      	lsls	r2, r3, #24
1004bd96:	4b2a      	ldr	r3, [pc, #168]	@ (1004be40 <SystemInit+0x198>)
1004bd98:	430a      	orrs	r2, r1
1004bd9a:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
1004bd9c:	4b28      	ldr	r3, [pc, #160]	@ (1004be40 <SystemInit+0x198>)
1004bd9e:	68da      	ldr	r2, [r3, #12]
1004bda0:	4b27      	ldr	r3, [pc, #156]	@ (1004be40 <SystemInit+0x198>)
1004bda2:	2180      	movs	r1, #128	@ 0x80
1004bda4:	0409      	lsls	r1, r1, #16
1004bda6:	430a      	orrs	r2, r1
1004bda8:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
1004bdaa:	4a26      	ldr	r2, [pc, #152]	@ (1004be44 <SystemInit+0x19c>)
1004bdac:	2394      	movs	r3, #148	@ 0x94
1004bdae:	58d3      	ldr	r3, [r2, r3]
1004bdb0:	4a2d      	ldr	r2, [pc, #180]	@ (1004be68 <SystemInit+0x1c0>)
1004bdb2:	401a      	ands	r2, r3
1004bdb4:	68bb      	ldr	r3, [r7, #8]
1004bdb6:	0199      	lsls	r1, r3, #6
1004bdb8:	23f0      	movs	r3, #240	@ 0xf0
1004bdba:	009b      	lsls	r3, r3, #2
1004bdbc:	400b      	ands	r3, r1
1004bdbe:	4921      	ldr	r1, [pc, #132]	@ (1004be44 <SystemInit+0x19c>)
1004bdc0:	4313      	orrs	r3, r2
1004bdc2:	2294      	movs	r2, #148	@ 0x94
1004bdc4:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
1004bdc6:	4a1f      	ldr	r2, [pc, #124]	@ (1004be44 <SystemInit+0x19c>)
1004bdc8:	2394      	movs	r3, #148	@ 0x94
1004bdca:	58d3      	ldr	r3, [r2, r3]
1004bdcc:	491d      	ldr	r1, [pc, #116]	@ (1004be44 <SystemInit+0x19c>)
1004bdce:	2220      	movs	r2, #32
1004bdd0:	4313      	orrs	r3, r2
1004bdd2:	2294      	movs	r2, #148	@ 0x94
1004bdd4:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
1004bdd6:	4a1b      	ldr	r2, [pc, #108]	@ (1004be44 <SystemInit+0x19c>)
1004bdd8:	2394      	movs	r3, #148	@ 0x94
1004bdda:	58d3      	ldr	r3, [r2, r3]
1004bddc:	4a23      	ldr	r2, [pc, #140]	@ (1004be6c <SystemInit+0x1c4>)
1004bdde:	401a      	ands	r2, r3
1004bde0:	687b      	ldr	r3, [r7, #4]
1004bde2:	02d9      	lsls	r1, r3, #11
1004bde4:	23e0      	movs	r3, #224	@ 0xe0
1004bde6:	019b      	lsls	r3, r3, #6
1004bde8:	400b      	ands	r3, r1
1004bdea:	4916      	ldr	r1, [pc, #88]	@ (1004be44 <SystemInit+0x19c>)
1004bdec:	4313      	orrs	r3, r2
1004bdee:	2294      	movs	r2, #148	@ 0x94
1004bdf0:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
1004bdf2:	4a14      	ldr	r2, [pc, #80]	@ (1004be44 <SystemInit+0x19c>)
1004bdf4:	2394      	movs	r3, #148	@ 0x94
1004bdf6:	58d3      	ldr	r3, [r2, r3]
1004bdf8:	4912      	ldr	r1, [pc, #72]	@ (1004be44 <SystemInit+0x19c>)
1004bdfa:	2280      	movs	r2, #128	@ 0x80
1004bdfc:	00d2      	lsls	r2, r2, #3
1004bdfe:	4313      	orrs	r3, r2
1004be00:	2294      	movs	r2, #148	@ 0x94
1004be02:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
1004be04:	2317      	movs	r3, #23
1004be06:	18fb      	adds	r3, r7, r3
1004be08:	2200      	movs	r2, #0
1004be0a:	701a      	strb	r2, [r3, #0]
1004be0c:	e00d      	b.n	1004be2a <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
1004be0e:	2417      	movs	r4, #23
1004be10:	193b      	adds	r3, r7, r4
1004be12:	781b      	ldrb	r3, [r3, #0]
1004be14:	b25b      	sxtb	r3, r3
1004be16:	2103      	movs	r1, #3
1004be18:	0018      	movs	r0, r3
1004be1a:	f7ff fec5 	bl	1004bba8 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
1004be1e:	0021      	movs	r1, r4
1004be20:	187b      	adds	r3, r7, r1
1004be22:	781a      	ldrb	r2, [r3, #0]
1004be24:	187b      	adds	r3, r7, r1
1004be26:	3201      	adds	r2, #1
1004be28:	701a      	strb	r2, [r3, #0]
1004be2a:	2317      	movs	r3, #23
1004be2c:	18fb      	adds	r3, r7, r3
1004be2e:	781b      	ldrb	r3, [r3, #0]
1004be30:	2b1f      	cmp	r3, #31
1004be32:	d9ec      	bls.n	1004be0e <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
1004be34:	b662      	cpsie	i
}
1004be36:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
1004be38:	46c0      	nop			@ (mov r8, r8)
1004be3a:	46bd      	mov	sp, r7
1004be3c:	b007      	add	sp, #28
1004be3e:	bd90      	pop	{r4, r7, pc}
1004be40:	48400000 	.word	0x48400000
1004be44:	48500000 	.word	0x48500000
1004be48:	20000004 	.word	0x20000004
1004be4c:	e000ed00 	.word	0xe000ed00
1004be50:	10040000 	.word	0x10040000
1004be54:	fffffeff 	.word	0xfffffeff
1004be58:	fffffbff 	.word	0xfffffbff
1004be5c:	10001ef8 	.word	0x10001ef8
1004be60:	fcbceccc 	.word	0xfcbceccc
1004be64:	c0ffffff 	.word	0xc0ffffff
1004be68:	fffffc3f 	.word	0xfffffc3f
1004be6c:	ffffc7ff 	.word	0xffffc7ff

1004be70 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
1004be70:	b580      	push	{r7, lr}
1004be72:	b082      	sub	sp, #8
1004be74:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
1004be76:	4b13      	ldr	r3, [pc, #76]	@ (1004bec4 <SystemCoreClockUpdate+0x54>)
1004be78:	689b      	ldr	r3, [r3, #8]
1004be7a:	085b      	lsrs	r3, r3, #1
1004be7c:	b2da      	uxtb	r2, r3
1004be7e:	1dfb      	adds	r3, r7, #7
1004be80:	2101      	movs	r1, #1
1004be82:	400a      	ands	r2, r1
1004be84:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
1004be86:	4b0f      	ldr	r3, [pc, #60]	@ (1004bec4 <SystemCoreClockUpdate+0x54>)
1004be88:	689b      	ldr	r3, [r3, #8]
1004be8a:	0a1b      	lsrs	r3, r3, #8
1004be8c:	b2da      	uxtb	r2, r3
1004be8e:	1dbb      	adds	r3, r7, #6
1004be90:	2107      	movs	r1, #7
1004be92:	400a      	ands	r2, r1
1004be94:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
1004be96:	1dfb      	adds	r3, r7, #7
1004be98:	781b      	ldrb	r3, [r3, #0]
1004be9a:	2b00      	cmp	r3, #0
1004be9c:	d007      	beq.n	1004beae <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
1004be9e:	1dbb      	adds	r3, r7, #6
1004bea0:	781b      	ldrb	r3, [r3, #0]
1004bea2:	3b01      	subs	r3, #1
1004bea4:	4a08      	ldr	r2, [pc, #32]	@ (1004bec8 <SystemCoreClockUpdate+0x58>)
1004bea6:	40da      	lsrs	r2, r3
1004bea8:	4b08      	ldr	r3, [pc, #32]	@ (1004becc <SystemCoreClockUpdate+0x5c>)
1004beaa:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
1004beac:	e005      	b.n	1004beba <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
1004beae:	1dbb      	adds	r3, r7, #6
1004beb0:	781b      	ldrb	r3, [r3, #0]
1004beb2:	4a07      	ldr	r2, [pc, #28]	@ (1004bed0 <SystemCoreClockUpdate+0x60>)
1004beb4:	40da      	lsrs	r2, r3
1004beb6:	4b05      	ldr	r3, [pc, #20]	@ (1004becc <SystemCoreClockUpdate+0x5c>)
1004beb8:	601a      	str	r2, [r3, #0]
}
1004beba:	46c0      	nop			@ (mov r8, r8)
1004bebc:	46bd      	mov	sp, r7
1004bebe:	b002      	add	sp, #8
1004bec0:	bd80      	pop	{r7, pc}
1004bec2:	46c0      	nop			@ (mov r8, r8)
1004bec4:	48400000 	.word	0x48400000
1004bec8:	01e84800 	.word	0x01e84800
1004becc:	20001508 	.word	0x20001508
1004bed0:	03d09000 	.word	0x03d09000

1004bed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1004bed4:	b580      	push	{r7, lr}
1004bed6:	b082      	sub	sp, #8
1004bed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
1004beda:	1dfb      	adds	r3, r7, #7
1004bedc:	2200      	movs	r2, #0
1004bede:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
1004bee0:	2003      	movs	r0, #3
1004bee2:	f000 f80f 	bl	1004bf04 <HAL_InitTick>
1004bee6:	1e03      	subs	r3, r0, #0
1004bee8:	d003      	beq.n	1004bef2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
1004beea:	1dfb      	adds	r3, r7, #7
1004beec:	2201      	movs	r2, #1
1004beee:	701a      	strb	r2, [r3, #0]
1004bef0:	e001      	b.n	1004bef6 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
1004bef2:	f7f7 fb0d 	bl	10043510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
1004bef6:	1dfb      	adds	r3, r7, #7
1004bef8:	781b      	ldrb	r3, [r3, #0]
}
1004befa:	0018      	movs	r0, r3
1004befc:	46bd      	mov	sp, r7
1004befe:	b002      	add	sp, #8
1004bf00:	bd80      	pop	{r7, pc}
	...

1004bf04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
1004bf04:	b590      	push	{r4, r7, lr}
1004bf06:	b085      	sub	sp, #20
1004bf08:	af00      	add	r7, sp, #0
1004bf0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
1004bf0c:	230f      	movs	r3, #15
1004bf0e:	18fb      	adds	r3, r7, r3
1004bf10:	2200      	movs	r2, #0
1004bf12:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
1004bf14:	4b1d      	ldr	r3, [pc, #116]	@ (1004bf8c <HAL_InitTick+0x88>)
1004bf16:	781b      	ldrb	r3, [r3, #0]
1004bf18:	2b00      	cmp	r3, #0
1004bf1a:	d02c      	beq.n	1004bf76 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
1004bf1c:	f004 f84a 	bl	1004ffb4 <HAL_RCC_GetSysClockFreq>
1004bf20:	0004      	movs	r4, r0
1004bf22:	4b1a      	ldr	r3, [pc, #104]	@ (1004bf8c <HAL_InitTick+0x88>)
1004bf24:	781b      	ldrb	r3, [r3, #0]
1004bf26:	0019      	movs	r1, r3
1004bf28:	23fa      	movs	r3, #250	@ 0xfa
1004bf2a:	0098      	lsls	r0, r3, #2
1004bf2c:	f7f4 f99c 	bl	10040268 <__udivsi3>
1004bf30:	0003      	movs	r3, r0
1004bf32:	0019      	movs	r1, r3
1004bf34:	0020      	movs	r0, r4
1004bf36:	f7f4 f997 	bl	10040268 <__udivsi3>
1004bf3a:	0003      	movs	r3, r0
1004bf3c:	0018      	movs	r0, r3
1004bf3e:	f000 f93c 	bl	1004c1ba <HAL_SYSTICK_Config>
1004bf42:	1e03      	subs	r3, r0, #0
1004bf44:	d112      	bne.n	1004bf6c <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1004bf46:	687b      	ldr	r3, [r7, #4]
1004bf48:	2b03      	cmp	r3, #3
1004bf4a:	d80a      	bhi.n	1004bf62 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
1004bf4c:	6879      	ldr	r1, [r7, #4]
1004bf4e:	2301      	movs	r3, #1
1004bf50:	425b      	negs	r3, r3
1004bf52:	2200      	movs	r2, #0
1004bf54:	0018      	movs	r0, r3
1004bf56:	f000 f90b 	bl	1004c170 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
1004bf5a:	4b0d      	ldr	r3, [pc, #52]	@ (1004bf90 <HAL_InitTick+0x8c>)
1004bf5c:	687a      	ldr	r2, [r7, #4]
1004bf5e:	601a      	str	r2, [r3, #0]
1004bf60:	e00d      	b.n	1004bf7e <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
1004bf62:	230f      	movs	r3, #15
1004bf64:	18fb      	adds	r3, r7, r3
1004bf66:	2201      	movs	r2, #1
1004bf68:	701a      	strb	r2, [r3, #0]
1004bf6a:	e008      	b.n	1004bf7e <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
1004bf6c:	230f      	movs	r3, #15
1004bf6e:	18fb      	adds	r3, r7, r3
1004bf70:	2201      	movs	r2, #1
1004bf72:	701a      	strb	r2, [r3, #0]
1004bf74:	e003      	b.n	1004bf7e <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
1004bf76:	230f      	movs	r3, #15
1004bf78:	18fb      	adds	r3, r7, r3
1004bf7a:	2201      	movs	r2, #1
1004bf7c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
1004bf7e:	230f      	movs	r3, #15
1004bf80:	18fb      	adds	r3, r7, r3
1004bf82:	781b      	ldrb	r3, [r3, #0]
}
1004bf84:	0018      	movs	r0, r3
1004bf86:	46bd      	mov	sp, r7
1004bf88:	b005      	add	sp, #20
1004bf8a:	bd90      	pop	{r4, r7, pc}
1004bf8c:	20001510 	.word	0x20001510
1004bf90:	2000150c 	.word	0x2000150c

1004bf94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
1004bf94:	b580      	push	{r7, lr}
1004bf96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1004bf98:	4b05      	ldr	r3, [pc, #20]	@ (1004bfb0 <HAL_IncTick+0x1c>)
1004bf9a:	781b      	ldrb	r3, [r3, #0]
1004bf9c:	001a      	movs	r2, r3
1004bf9e:	4b05      	ldr	r3, [pc, #20]	@ (1004bfb4 <HAL_IncTick+0x20>)
1004bfa0:	681b      	ldr	r3, [r3, #0]
1004bfa2:	18d2      	adds	r2, r2, r3
1004bfa4:	4b03      	ldr	r3, [pc, #12]	@ (1004bfb4 <HAL_IncTick+0x20>)
1004bfa6:	601a      	str	r2, [r3, #0]
}
1004bfa8:	46c0      	nop			@ (mov r8, r8)
1004bfaa:	46bd      	mov	sp, r7
1004bfac:	bd80      	pop	{r7, pc}
1004bfae:	46c0      	nop			@ (mov r8, r8)
1004bfb0:	20001510 	.word	0x20001510
1004bfb4:	20000f7c 	.word	0x20000f7c

1004bfb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
1004bfb8:	b580      	push	{r7, lr}
1004bfba:	af00      	add	r7, sp, #0
  return uwTick;
1004bfbc:	4b02      	ldr	r3, [pc, #8]	@ (1004bfc8 <HAL_GetTick+0x10>)
1004bfbe:	681b      	ldr	r3, [r3, #0]
}
1004bfc0:	0018      	movs	r0, r3
1004bfc2:	46bd      	mov	sp, r7
1004bfc4:	bd80      	pop	{r7, pc}
1004bfc6:	46c0      	nop			@ (mov r8, r8)
1004bfc8:	20000f7c 	.word	0x20000f7c

1004bfcc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
1004bfcc:	b580      	push	{r7, lr}
1004bfce:	af00      	add	r7, sp, #0
  return uwTickPrio;
1004bfd0:	4b02      	ldr	r3, [pc, #8]	@ (1004bfdc <HAL_GetTickPrio+0x10>)
1004bfd2:	681b      	ldr	r3, [r3, #0]
}
1004bfd4:	0018      	movs	r0, r3
1004bfd6:	46bd      	mov	sp, r7
1004bfd8:	bd80      	pop	{r7, pc}
1004bfda:	46c0      	nop			@ (mov r8, r8)
1004bfdc:	2000150c 	.word	0x2000150c

1004bfe0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
1004bfe0:	b580      	push	{r7, lr}
1004bfe2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
1004bfe4:	4b04      	ldr	r3, [pc, #16]	@ (1004bff8 <HAL_SuspendTick+0x18>)
1004bfe6:	681a      	ldr	r2, [r3, #0]
1004bfe8:	4b03      	ldr	r3, [pc, #12]	@ (1004bff8 <HAL_SuspendTick+0x18>)
1004bfea:	2102      	movs	r1, #2
1004bfec:	438a      	bics	r2, r1
1004bfee:	601a      	str	r2, [r3, #0]
}
1004bff0:	46c0      	nop			@ (mov r8, r8)
1004bff2:	46bd      	mov	sp, r7
1004bff4:	bd80      	pop	{r7, pc}
1004bff6:	46c0      	nop			@ (mov r8, r8)
1004bff8:	e000e010 	.word	0xe000e010

1004bffc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
1004bffc:	b580      	push	{r7, lr}
1004bffe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
1004c000:	4b04      	ldr	r3, [pc, #16]	@ (1004c014 <HAL_ResumeTick+0x18>)
1004c002:	681a      	ldr	r2, [r3, #0]
1004c004:	4b03      	ldr	r3, [pc, #12]	@ (1004c014 <HAL_ResumeTick+0x18>)
1004c006:	2102      	movs	r1, #2
1004c008:	430a      	orrs	r2, r1
1004c00a:	601a      	str	r2, [r3, #0]
}
1004c00c:	46c0      	nop			@ (mov r8, r8)
1004c00e:	46bd      	mov	sp, r7
1004c010:	bd80      	pop	{r7, pc}
1004c012:	46c0      	nop			@ (mov r8, r8)
1004c014:	e000e010 	.word	0xe000e010

1004c018 <__NVIC_EnableIRQ>:
{
1004c018:	b580      	push	{r7, lr}
1004c01a:	b082      	sub	sp, #8
1004c01c:	af00      	add	r7, sp, #0
1004c01e:	0002      	movs	r2, r0
1004c020:	1dfb      	adds	r3, r7, #7
1004c022:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004c024:	1dfb      	adds	r3, r7, #7
1004c026:	781b      	ldrb	r3, [r3, #0]
1004c028:	2b7f      	cmp	r3, #127	@ 0x7f
1004c02a:	d809      	bhi.n	1004c040 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004c02c:	1dfb      	adds	r3, r7, #7
1004c02e:	781b      	ldrb	r3, [r3, #0]
1004c030:	001a      	movs	r2, r3
1004c032:	231f      	movs	r3, #31
1004c034:	401a      	ands	r2, r3
1004c036:	4b04      	ldr	r3, [pc, #16]	@ (1004c048 <__NVIC_EnableIRQ+0x30>)
1004c038:	2101      	movs	r1, #1
1004c03a:	4091      	lsls	r1, r2
1004c03c:	000a      	movs	r2, r1
1004c03e:	601a      	str	r2, [r3, #0]
}
1004c040:	46c0      	nop			@ (mov r8, r8)
1004c042:	46bd      	mov	sp, r7
1004c044:	b002      	add	sp, #8
1004c046:	bd80      	pop	{r7, pc}
1004c048:	e000e100 	.word	0xe000e100

1004c04c <__NVIC_SetPriority>:
{
1004c04c:	b590      	push	{r4, r7, lr}
1004c04e:	b083      	sub	sp, #12
1004c050:	af00      	add	r7, sp, #0
1004c052:	0002      	movs	r2, r0
1004c054:	6039      	str	r1, [r7, #0]
1004c056:	1dfb      	adds	r3, r7, #7
1004c058:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004c05a:	1dfb      	adds	r3, r7, #7
1004c05c:	781b      	ldrb	r3, [r3, #0]
1004c05e:	2b7f      	cmp	r3, #127	@ 0x7f
1004c060:	d828      	bhi.n	1004c0b4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004c062:	4a2f      	ldr	r2, [pc, #188]	@ (1004c120 <__NVIC_SetPriority+0xd4>)
1004c064:	1dfb      	adds	r3, r7, #7
1004c066:	781b      	ldrb	r3, [r3, #0]
1004c068:	b25b      	sxtb	r3, r3
1004c06a:	089b      	lsrs	r3, r3, #2
1004c06c:	33c0      	adds	r3, #192	@ 0xc0
1004c06e:	009b      	lsls	r3, r3, #2
1004c070:	589b      	ldr	r3, [r3, r2]
1004c072:	1dfa      	adds	r2, r7, #7
1004c074:	7812      	ldrb	r2, [r2, #0]
1004c076:	0011      	movs	r1, r2
1004c078:	2203      	movs	r2, #3
1004c07a:	400a      	ands	r2, r1
1004c07c:	00d2      	lsls	r2, r2, #3
1004c07e:	21ff      	movs	r1, #255	@ 0xff
1004c080:	4091      	lsls	r1, r2
1004c082:	000a      	movs	r2, r1
1004c084:	43d2      	mvns	r2, r2
1004c086:	401a      	ands	r2, r3
1004c088:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004c08a:	683b      	ldr	r3, [r7, #0]
1004c08c:	019b      	lsls	r3, r3, #6
1004c08e:	22ff      	movs	r2, #255	@ 0xff
1004c090:	401a      	ands	r2, r3
1004c092:	1dfb      	adds	r3, r7, #7
1004c094:	781b      	ldrb	r3, [r3, #0]
1004c096:	0018      	movs	r0, r3
1004c098:	2303      	movs	r3, #3
1004c09a:	4003      	ands	r3, r0
1004c09c:	00db      	lsls	r3, r3, #3
1004c09e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004c0a0:	481f      	ldr	r0, [pc, #124]	@ (1004c120 <__NVIC_SetPriority+0xd4>)
1004c0a2:	1dfb      	adds	r3, r7, #7
1004c0a4:	781b      	ldrb	r3, [r3, #0]
1004c0a6:	b25b      	sxtb	r3, r3
1004c0a8:	089b      	lsrs	r3, r3, #2
1004c0aa:	430a      	orrs	r2, r1
1004c0ac:	33c0      	adds	r3, #192	@ 0xc0
1004c0ae:	009b      	lsls	r3, r3, #2
1004c0b0:	501a      	str	r2, [r3, r0]
}
1004c0b2:	e031      	b.n	1004c118 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004c0b4:	4a1b      	ldr	r2, [pc, #108]	@ (1004c124 <__NVIC_SetPriority+0xd8>)
1004c0b6:	1dfb      	adds	r3, r7, #7
1004c0b8:	781b      	ldrb	r3, [r3, #0]
1004c0ba:	0019      	movs	r1, r3
1004c0bc:	230f      	movs	r3, #15
1004c0be:	400b      	ands	r3, r1
1004c0c0:	3b08      	subs	r3, #8
1004c0c2:	089b      	lsrs	r3, r3, #2
1004c0c4:	3306      	adds	r3, #6
1004c0c6:	009b      	lsls	r3, r3, #2
1004c0c8:	18d3      	adds	r3, r2, r3
1004c0ca:	3304      	adds	r3, #4
1004c0cc:	681b      	ldr	r3, [r3, #0]
1004c0ce:	1dfa      	adds	r2, r7, #7
1004c0d0:	7812      	ldrb	r2, [r2, #0]
1004c0d2:	0011      	movs	r1, r2
1004c0d4:	2203      	movs	r2, #3
1004c0d6:	400a      	ands	r2, r1
1004c0d8:	00d2      	lsls	r2, r2, #3
1004c0da:	21ff      	movs	r1, #255	@ 0xff
1004c0dc:	4091      	lsls	r1, r2
1004c0de:	000a      	movs	r2, r1
1004c0e0:	43d2      	mvns	r2, r2
1004c0e2:	401a      	ands	r2, r3
1004c0e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004c0e6:	683b      	ldr	r3, [r7, #0]
1004c0e8:	019b      	lsls	r3, r3, #6
1004c0ea:	22ff      	movs	r2, #255	@ 0xff
1004c0ec:	401a      	ands	r2, r3
1004c0ee:	1dfb      	adds	r3, r7, #7
1004c0f0:	781b      	ldrb	r3, [r3, #0]
1004c0f2:	0018      	movs	r0, r3
1004c0f4:	2303      	movs	r3, #3
1004c0f6:	4003      	ands	r3, r0
1004c0f8:	00db      	lsls	r3, r3, #3
1004c0fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004c0fc:	4809      	ldr	r0, [pc, #36]	@ (1004c124 <__NVIC_SetPriority+0xd8>)
1004c0fe:	1dfb      	adds	r3, r7, #7
1004c100:	781b      	ldrb	r3, [r3, #0]
1004c102:	001c      	movs	r4, r3
1004c104:	230f      	movs	r3, #15
1004c106:	4023      	ands	r3, r4
1004c108:	3b08      	subs	r3, #8
1004c10a:	089b      	lsrs	r3, r3, #2
1004c10c:	430a      	orrs	r2, r1
1004c10e:	3306      	adds	r3, #6
1004c110:	009b      	lsls	r3, r3, #2
1004c112:	18c3      	adds	r3, r0, r3
1004c114:	3304      	adds	r3, #4
1004c116:	601a      	str	r2, [r3, #0]
}
1004c118:	46c0      	nop			@ (mov r8, r8)
1004c11a:	46bd      	mov	sp, r7
1004c11c:	b003      	add	sp, #12
1004c11e:	bd90      	pop	{r4, r7, pc}
1004c120:	e000e100 	.word	0xe000e100
1004c124:	e000ed00 	.word	0xe000ed00

1004c128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
1004c128:	b580      	push	{r7, lr}
1004c12a:	b082      	sub	sp, #8
1004c12c:	af00      	add	r7, sp, #0
1004c12e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1004c130:	687b      	ldr	r3, [r7, #4]
1004c132:	1e5a      	subs	r2, r3, #1
1004c134:	2380      	movs	r3, #128	@ 0x80
1004c136:	045b      	lsls	r3, r3, #17
1004c138:	429a      	cmp	r2, r3
1004c13a:	d301      	bcc.n	1004c140 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
1004c13c:	2301      	movs	r3, #1
1004c13e:	e010      	b.n	1004c162 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1004c140:	4b0a      	ldr	r3, [pc, #40]	@ (1004c16c <SysTick_Config+0x44>)
1004c142:	687a      	ldr	r2, [r7, #4]
1004c144:	3a01      	subs	r2, #1
1004c146:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1004c148:	2301      	movs	r3, #1
1004c14a:	425b      	negs	r3, r3
1004c14c:	2103      	movs	r1, #3
1004c14e:	0018      	movs	r0, r3
1004c150:	f7ff ff7c 	bl	1004c04c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1004c154:	4b05      	ldr	r3, [pc, #20]	@ (1004c16c <SysTick_Config+0x44>)
1004c156:	2200      	movs	r2, #0
1004c158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1004c15a:	4b04      	ldr	r3, [pc, #16]	@ (1004c16c <SysTick_Config+0x44>)
1004c15c:	2207      	movs	r2, #7
1004c15e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1004c160:	2300      	movs	r3, #0
}
1004c162:	0018      	movs	r0, r3
1004c164:	46bd      	mov	sp, r7
1004c166:	b002      	add	sp, #8
1004c168:	bd80      	pop	{r7, pc}
1004c16a:	46c0      	nop			@ (mov r8, r8)
1004c16c:	e000e010 	.word	0xe000e010

1004c170 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1004c170:	b580      	push	{r7, lr}
1004c172:	b084      	sub	sp, #16
1004c174:	af00      	add	r7, sp, #0
1004c176:	60b9      	str	r1, [r7, #8]
1004c178:	607a      	str	r2, [r7, #4]
1004c17a:	210f      	movs	r1, #15
1004c17c:	187b      	adds	r3, r7, r1
1004c17e:	1c02      	adds	r2, r0, #0
1004c180:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
1004c182:	68ba      	ldr	r2, [r7, #8]
1004c184:	187b      	adds	r3, r7, r1
1004c186:	781b      	ldrb	r3, [r3, #0]
1004c188:	b25b      	sxtb	r3, r3
1004c18a:	0011      	movs	r1, r2
1004c18c:	0018      	movs	r0, r3
1004c18e:	f7ff ff5d 	bl	1004c04c <__NVIC_SetPriority>
}
1004c192:	46c0      	nop			@ (mov r8, r8)
1004c194:	46bd      	mov	sp, r7
1004c196:	b004      	add	sp, #16
1004c198:	bd80      	pop	{r7, pc}

1004c19a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1004c19a:	b580      	push	{r7, lr}
1004c19c:	b082      	sub	sp, #8
1004c19e:	af00      	add	r7, sp, #0
1004c1a0:	0002      	movs	r2, r0
1004c1a2:	1dfb      	adds	r3, r7, #7
1004c1a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1004c1a6:	1dfb      	adds	r3, r7, #7
1004c1a8:	781b      	ldrb	r3, [r3, #0]
1004c1aa:	b25b      	sxtb	r3, r3
1004c1ac:	0018      	movs	r0, r3
1004c1ae:	f7ff ff33 	bl	1004c018 <__NVIC_EnableIRQ>
}
1004c1b2:	46c0      	nop			@ (mov r8, r8)
1004c1b4:	46bd      	mov	sp, r7
1004c1b6:	b002      	add	sp, #8
1004c1b8:	bd80      	pop	{r7, pc}

1004c1ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1004c1ba:	b580      	push	{r7, lr}
1004c1bc:	b082      	sub	sp, #8
1004c1be:	af00      	add	r7, sp, #0
1004c1c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1004c1c2:	687b      	ldr	r3, [r7, #4]
1004c1c4:	0018      	movs	r0, r3
1004c1c6:	f7ff ffaf 	bl	1004c128 <SysTick_Config>
1004c1ca:	0003      	movs	r3, r0
}
1004c1cc:	0018      	movs	r0, r3
1004c1ce:	46bd      	mov	sp, r7
1004c1d0:	b002      	add	sp, #8
1004c1d2:	bd80      	pop	{r7, pc}

1004c1d4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
1004c1d4:	b580      	push	{r7, lr}
1004c1d6:	b082      	sub	sp, #8
1004c1d8:	af00      	add	r7, sp, #0
1004c1da:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
1004c1dc:	687b      	ldr	r3, [r7, #4]
1004c1de:	2b00      	cmp	r3, #0
1004c1e0:	d101      	bne.n	1004c1e6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
1004c1e2:	2301      	movs	r3, #1
1004c1e4:	e031      	b.n	1004c24a <HAL_DMA_Abort+0x76>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
1004c1e6:	687b      	ldr	r3, [r7, #4]
1004c1e8:	2225      	movs	r2, #37	@ 0x25
1004c1ea:	5c9b      	ldrb	r3, [r3, r2]
1004c1ec:	b2db      	uxtb	r3, r3
1004c1ee:	2b02      	cmp	r3, #2
1004c1f0:	d008      	beq.n	1004c204 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
1004c1f2:	687b      	ldr	r3, [r7, #4]
1004c1f4:	2204      	movs	r2, #4
1004c1f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
1004c1f8:	687b      	ldr	r3, [r7, #4]
1004c1fa:	2224      	movs	r2, #36	@ 0x24
1004c1fc:	2100      	movs	r1, #0
1004c1fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
1004c200:	2301      	movs	r3, #1
1004c202:	e022      	b.n	1004c24a <HAL_DMA_Abort+0x76>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
1004c204:	687b      	ldr	r3, [r7, #4]
1004c206:	681b      	ldr	r3, [r3, #0]
1004c208:	681a      	ldr	r2, [r3, #0]
1004c20a:	687b      	ldr	r3, [r7, #4]
1004c20c:	681b      	ldr	r3, [r3, #0]
1004c20e:	210e      	movs	r1, #14
1004c210:	438a      	bics	r2, r1
1004c212:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
1004c214:	687b      	ldr	r3, [r7, #4]
1004c216:	681b      	ldr	r3, [r3, #0]
1004c218:	681a      	ldr	r2, [r3, #0]
1004c21a:	687b      	ldr	r3, [r7, #4]
1004c21c:	681b      	ldr	r3, [r3, #0]
1004c21e:	2101      	movs	r1, #1
1004c220:	438a      	bics	r2, r1
1004c222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
1004c224:	687b      	ldr	r3, [r7, #4]
1004c226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004c228:	223c      	movs	r2, #60	@ 0x3c
1004c22a:	401a      	ands	r2, r3
1004c22c:	687b      	ldr	r3, [r7, #4]
1004c22e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
1004c230:	2101      	movs	r1, #1
1004c232:	4091      	lsls	r1, r2
1004c234:	000a      	movs	r2, r1
1004c236:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
1004c238:	687b      	ldr	r3, [r7, #4]
1004c23a:	2225      	movs	r2, #37	@ 0x25
1004c23c:	2101      	movs	r1, #1
1004c23e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
1004c240:	687b      	ldr	r3, [r7, #4]
1004c242:	2224      	movs	r2, #36	@ 0x24
1004c244:	2100      	movs	r1, #0
1004c246:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
1004c248:	2300      	movs	r3, #0
}
1004c24a:	0018      	movs	r0, r3
1004c24c:	46bd      	mov	sp, r7
1004c24e:	b002      	add	sp, #8
1004c250:	bd80      	pop	{r7, pc}

1004c252 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
1004c252:	b580      	push	{r7, lr}
1004c254:	b084      	sub	sp, #16
1004c256:	af00      	add	r7, sp, #0
1004c258:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
1004c25a:	210f      	movs	r1, #15
1004c25c:	187b      	adds	r3, r7, r1
1004c25e:	2200      	movs	r2, #0
1004c260:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
1004c262:	687b      	ldr	r3, [r7, #4]
1004c264:	2225      	movs	r2, #37	@ 0x25
1004c266:	5c9b      	ldrb	r3, [r3, r2]
1004c268:	b2db      	uxtb	r3, r3
1004c26a:	2b02      	cmp	r3, #2
1004c26c:	d006      	beq.n	1004c27c <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
1004c26e:	687b      	ldr	r3, [r7, #4]
1004c270:	2204      	movs	r2, #4
1004c272:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
1004c274:	187b      	adds	r3, r7, r1
1004c276:	2201      	movs	r2, #1
1004c278:	701a      	strb	r2, [r3, #0]
1004c27a:	e02a      	b.n	1004c2d2 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
1004c27c:	687b      	ldr	r3, [r7, #4]
1004c27e:	681b      	ldr	r3, [r3, #0]
1004c280:	681a      	ldr	r2, [r3, #0]
1004c282:	687b      	ldr	r3, [r7, #4]
1004c284:	681b      	ldr	r3, [r3, #0]
1004c286:	210e      	movs	r1, #14
1004c288:	438a      	bics	r2, r1
1004c28a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
1004c28c:	687b      	ldr	r3, [r7, #4]
1004c28e:	681b      	ldr	r3, [r3, #0]
1004c290:	681a      	ldr	r2, [r3, #0]
1004c292:	687b      	ldr	r3, [r7, #4]
1004c294:	681b      	ldr	r3, [r3, #0]
1004c296:	2101      	movs	r1, #1
1004c298:	438a      	bics	r2, r1
1004c29a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
1004c29c:	687b      	ldr	r3, [r7, #4]
1004c29e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004c2a0:	223c      	movs	r2, #60	@ 0x3c
1004c2a2:	401a      	ands	r2, r3
1004c2a4:	687b      	ldr	r3, [r7, #4]
1004c2a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
1004c2a8:	2101      	movs	r1, #1
1004c2aa:	4091      	lsls	r1, r2
1004c2ac:	000a      	movs	r2, r1
1004c2ae:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
1004c2b0:	687b      	ldr	r3, [r7, #4]
1004c2b2:	2225      	movs	r2, #37	@ 0x25
1004c2b4:	2101      	movs	r1, #1
1004c2b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
1004c2b8:	687b      	ldr	r3, [r7, #4]
1004c2ba:	2224      	movs	r2, #36	@ 0x24
1004c2bc:	2100      	movs	r1, #0
1004c2be:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
1004c2c0:	687b      	ldr	r3, [r7, #4]
1004c2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004c2c4:	2b00      	cmp	r3, #0
1004c2c6:	d004      	beq.n	1004c2d2 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
1004c2c8:	687b      	ldr	r3, [r7, #4]
1004c2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004c2cc:	687a      	ldr	r2, [r7, #4]
1004c2ce:	0010      	movs	r0, r2
1004c2d0:	4798      	blx	r3
    }
  }
  return status;
1004c2d2:	230f      	movs	r3, #15
1004c2d4:	18fb      	adds	r3, r7, r3
1004c2d6:	781b      	ldrb	r3, [r3, #0]
}
1004c2d8:	0018      	movs	r0, r3
1004c2da:	46bd      	mov	sp, r7
1004c2dc:	b004      	add	sp, #16
1004c2de:	bd80      	pop	{r7, pc}

1004c2e0 <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
1004c2e0:	b5b0      	push	{r4, r5, r7, lr}
1004c2e2:	b086      	sub	sp, #24
1004c2e4:	af00      	add	r7, sp, #0
1004c2e6:	60f8      	str	r0, [r7, #12]
1004c2e8:	60b9      	str	r1, [r7, #8]
1004c2ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
1004c2ec:	4b1d      	ldr	r3, [pc, #116]	@ (1004c364 <HAL_FLASH_Program+0x84>)
1004c2ee:	781b      	ldrb	r3, [r3, #0]
1004c2f0:	2b01      	cmp	r3, #1
1004c2f2:	d101      	bne.n	1004c2f8 <HAL_FLASH_Program+0x18>
1004c2f4:	2302      	movs	r3, #2
1004c2f6:	e031      	b.n	1004c35c <HAL_FLASH_Program+0x7c>
1004c2f8:	4b1a      	ldr	r3, [pc, #104]	@ (1004c364 <HAL_FLASH_Program+0x84>)
1004c2fa:	2201      	movs	r2, #1
1004c2fc:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1004c2fe:	4b19      	ldr	r3, [pc, #100]	@ (1004c364 <HAL_FLASH_Program+0x84>)
1004c300:	2200      	movs	r2, #0
1004c302:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004c304:	2517      	movs	r5, #23
1004c306:	197c      	adds	r4, r7, r5
1004c308:	23fa      	movs	r3, #250	@ 0xfa
1004c30a:	009b      	lsls	r3, r3, #2
1004c30c:	0018      	movs	r0, r3
1004c30e:	f000 f82b 	bl	1004c368 <FLASH_WaitForLastOperation>
1004c312:	0003      	movs	r3, r0
1004c314:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
1004c316:	197b      	adds	r3, r7, r5
1004c318:	781b      	ldrb	r3, [r3, #0]
1004c31a:	2b00      	cmp	r3, #0
1004c31c:	d118      	bne.n	1004c350 <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
1004c31e:	68fb      	ldr	r3, [r7, #12]
1004c320:	2b00      	cmp	r3, #0
1004c322:	d106      	bne.n	1004c332 <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
1004c324:	687a      	ldr	r2, [r7, #4]
1004c326:	68bb      	ldr	r3, [r7, #8]
1004c328:	0011      	movs	r1, r2
1004c32a:	0018      	movs	r0, r3
1004c32c:	f000 f856 	bl	1004c3dc <FLASH_Program_Word>
1004c330:	e005      	b.n	1004c33e <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
1004c332:	687a      	ldr	r2, [r7, #4]
1004c334:	68bb      	ldr	r3, [r7, #8]
1004c336:	0011      	movs	r1, r2
1004c338:	0018      	movs	r0, r3
1004c33a:	f000 f871 	bl	1004c420 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004c33e:	2317      	movs	r3, #23
1004c340:	18fc      	adds	r4, r7, r3
1004c342:	23fa      	movs	r3, #250	@ 0xfa
1004c344:	009b      	lsls	r3, r3, #2
1004c346:	0018      	movs	r0, r3
1004c348:	f000 f80e 	bl	1004c368 <FLASH_WaitForLastOperation>
1004c34c:	0003      	movs	r3, r0
1004c34e:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
1004c350:	4b04      	ldr	r3, [pc, #16]	@ (1004c364 <HAL_FLASH_Program+0x84>)
1004c352:	2200      	movs	r2, #0
1004c354:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
1004c356:	2317      	movs	r3, #23
1004c358:	18fb      	adds	r3, r7, r3
1004c35a:	781b      	ldrb	r3, [r3, #0]
}
1004c35c:	0018      	movs	r0, r3
1004c35e:	46bd      	mov	sp, r7
1004c360:	b006      	add	sp, #24
1004c362:	bdb0      	pop	{r4, r5, r7, pc}
1004c364:	20000f80 	.word	0x20000f80

1004c368 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
1004c368:	b580      	push	{r7, lr}
1004c36a:	b084      	sub	sp, #16
1004c36c:	af00      	add	r7, sp, #0
1004c36e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
1004c370:	f7ff fe22 	bl	1004bfb8 <HAL_GetTick>
1004c374:	0003      	movs	r3, r0
1004c376:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
1004c378:	e00c      	b.n	1004c394 <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
1004c37a:	687b      	ldr	r3, [r7, #4]
1004c37c:	3301      	adds	r3, #1
1004c37e:	d009      	beq.n	1004c394 <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
1004c380:	f7ff fe1a 	bl	1004bfb8 <HAL_GetTick>
1004c384:	0002      	movs	r2, r0
1004c386:	68fb      	ldr	r3, [r7, #12]
1004c388:	1ad3      	subs	r3, r2, r3
1004c38a:	687a      	ldr	r2, [r7, #4]
1004c38c:	429a      	cmp	r2, r3
1004c38e:	d801      	bhi.n	1004c394 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
1004c390:	2303      	movs	r3, #3
1004c392:	e01b      	b.n	1004c3cc <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
1004c394:	4b0f      	ldr	r3, [pc, #60]	@ (1004c3d4 <FLASH_WaitForLastOperation+0x6c>)
1004c396:	691b      	ldr	r3, [r3, #16]
1004c398:	2201      	movs	r2, #1
1004c39a:	4013      	ands	r3, r2
1004c39c:	2b01      	cmp	r3, #1
1004c39e:	d1ec      	bne.n	1004c37a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
1004c3a0:	4b0c      	ldr	r3, [pc, #48]	@ (1004c3d4 <FLASH_WaitForLastOperation+0x6c>)
1004c3a2:	691b      	ldr	r3, [r3, #16]
1004c3a4:	220c      	movs	r2, #12
1004c3a6:	4013      	ands	r3, r2
1004c3a8:	2b0c      	cmp	r3, #12
1004c3aa:	d10e      	bne.n	1004c3ca <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
1004c3ac:	4b09      	ldr	r3, [pc, #36]	@ (1004c3d4 <FLASH_WaitForLastOperation+0x6c>)
1004c3ae:	689a      	ldr	r2, [r3, #8]
1004c3b0:	4b09      	ldr	r3, [pc, #36]	@ (1004c3d8 <FLASH_WaitForLastOperation+0x70>)
1004c3b2:	685b      	ldr	r3, [r3, #4]
1004c3b4:	431a      	orrs	r2, r3
1004c3b6:	4b08      	ldr	r3, [pc, #32]	@ (1004c3d8 <FLASH_WaitForLastOperation+0x70>)
1004c3b8:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
1004c3ba:	4b06      	ldr	r3, [pc, #24]	@ (1004c3d4 <FLASH_WaitForLastOperation+0x6c>)
1004c3bc:	691a      	ldr	r2, [r3, #16]
1004c3be:	4b05      	ldr	r3, [pc, #20]	@ (1004c3d4 <FLASH_WaitForLastOperation+0x6c>)
1004c3c0:	210c      	movs	r1, #12
1004c3c2:	430a      	orrs	r2, r1
1004c3c4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
1004c3c6:	2301      	movs	r3, #1
1004c3c8:	e000      	b.n	1004c3cc <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
1004c3ca:	2300      	movs	r3, #0
}
1004c3cc:	0018      	movs	r0, r3
1004c3ce:	46bd      	mov	sp, r7
1004c3d0:	b004      	add	sp, #16
1004c3d2:	bd80      	pop	{r7, pc}
1004c3d4:	40001000 	.word	0x40001000
1004c3d8:	20000f80 	.word	0x20000f80

1004c3dc <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
1004c3dc:	b580      	push	{r7, lr}
1004c3de:	b082      	sub	sp, #8
1004c3e0:	af00      	add	r7, sp, #0
1004c3e2:	6078      	str	r0, [r7, #4]
1004c3e4:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004c3e6:	4b0c      	ldr	r3, [pc, #48]	@ (1004c418 <FLASH_Program_Word+0x3c>)
1004c3e8:	691a      	ldr	r2, [r3, #16]
1004c3ea:	4b0b      	ldr	r3, [pc, #44]	@ (1004c418 <FLASH_Program_Word+0x3c>)
1004c3ec:	210f      	movs	r1, #15
1004c3ee:	430a      	orrs	r2, r1
1004c3f0:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
1004c3f2:	687b      	ldr	r3, [r7, #4]
1004c3f4:	4a09      	ldr	r2, [pc, #36]	@ (1004c41c <FLASH_Program_Word+0x40>)
1004c3f6:	4694      	mov	ip, r2
1004c3f8:	4463      	add	r3, ip
1004c3fa:	089a      	lsrs	r2, r3, #2
1004c3fc:	4b06      	ldr	r3, [pc, #24]	@ (1004c418 <FLASH_Program_Word+0x3c>)
1004c3fe:	03d2      	lsls	r2, r2, #15
1004c400:	0bd2      	lsrs	r2, r2, #15
1004c402:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
1004c404:	4b04      	ldr	r3, [pc, #16]	@ (1004c418 <FLASH_Program_Word+0x3c>)
1004c406:	683a      	ldr	r2, [r7, #0]
1004c408:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
1004c40a:	4b03      	ldr	r3, [pc, #12]	@ (1004c418 <FLASH_Program_Word+0x3c>)
1004c40c:	2233      	movs	r2, #51	@ 0x33
1004c40e:	601a      	str	r2, [r3, #0]
}
1004c410:	46c0      	nop			@ (mov r8, r8)
1004c412:	46bd      	mov	sp, r7
1004c414:	b002      	add	sp, #8
1004c416:	bd80      	pop	{r7, pc}
1004c418:	40001000 	.word	0x40001000
1004c41c:	effc0000 	.word	0xeffc0000

1004c420 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
1004c420:	b580      	push	{r7, lr}
1004c422:	b084      	sub	sp, #16
1004c424:	af00      	add	r7, sp, #0
1004c426:	6078      	str	r0, [r7, #4]
1004c428:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
1004c42a:	683b      	ldr	r3, [r7, #0]
1004c42c:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004c42e:	4b17      	ldr	r3, [pc, #92]	@ (1004c48c <FLASH_Program_Burst+0x6c>)
1004c430:	691a      	ldr	r2, [r3, #16]
1004c432:	4b16      	ldr	r3, [pc, #88]	@ (1004c48c <FLASH_Program_Burst+0x6c>)
1004c434:	210f      	movs	r1, #15
1004c436:	430a      	orrs	r2, r1
1004c438:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
1004c43a:	687b      	ldr	r3, [r7, #4]
1004c43c:	4a14      	ldr	r2, [pc, #80]	@ (1004c490 <FLASH_Program_Burst+0x70>)
1004c43e:	4694      	mov	ip, r2
1004c440:	4463      	add	r3, ip
1004c442:	089a      	lsrs	r2, r3, #2
1004c444:	4b11      	ldr	r3, [pc, #68]	@ (1004c48c <FLASH_Program_Burst+0x6c>)
1004c446:	03d2      	lsls	r2, r2, #15
1004c448:	0bd2      	lsrs	r2, r2, #15
1004c44a:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
1004c44c:	4a0f      	ldr	r2, [pc, #60]	@ (1004c48c <FLASH_Program_Burst+0x6c>)
1004c44e:	68fb      	ldr	r3, [r7, #12]
1004c450:	681b      	ldr	r3, [r3, #0]
1004c452:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
1004c454:	68fb      	ldr	r3, [r7, #12]
1004c456:	3304      	adds	r3, #4
1004c458:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
1004c45a:	4a0c      	ldr	r2, [pc, #48]	@ (1004c48c <FLASH_Program_Burst+0x6c>)
1004c45c:	68fb      	ldr	r3, [r7, #12]
1004c45e:	681b      	ldr	r3, [r3, #0]
1004c460:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
1004c462:	68fb      	ldr	r3, [r7, #12]
1004c464:	3304      	adds	r3, #4
1004c466:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
1004c468:	4a08      	ldr	r2, [pc, #32]	@ (1004c48c <FLASH_Program_Burst+0x6c>)
1004c46a:	68fb      	ldr	r3, [r7, #12]
1004c46c:	681b      	ldr	r3, [r3, #0]
1004c46e:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
1004c470:	68fb      	ldr	r3, [r7, #12]
1004c472:	3304      	adds	r3, #4
1004c474:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
1004c476:	4a05      	ldr	r2, [pc, #20]	@ (1004c48c <FLASH_Program_Burst+0x6c>)
1004c478:	68fb      	ldr	r3, [r7, #12]
1004c47a:	681b      	ldr	r3, [r3, #0]
1004c47c:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
1004c47e:	4b03      	ldr	r3, [pc, #12]	@ (1004c48c <FLASH_Program_Burst+0x6c>)
1004c480:	22cc      	movs	r2, #204	@ 0xcc
1004c482:	601a      	str	r2, [r3, #0]
}
1004c484:	46c0      	nop			@ (mov r8, r8)
1004c486:	46bd      	mov	sp, r7
1004c488:	b004      	add	sp, #16
1004c48a:	bd80      	pop	{r7, pc}
1004c48c:	40001000 	.word	0x40001000
1004c490:	effc0000 	.word	0xeffc0000

1004c494 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
1004c494:	b5b0      	push	{r4, r5, r7, lr}
1004c496:	b084      	sub	sp, #16
1004c498:	af00      	add	r7, sp, #0
1004c49a:	6078      	str	r0, [r7, #4]
1004c49c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
1004c49e:	4b27      	ldr	r3, [pc, #156]	@ (1004c53c <HAL_FLASHEx_Erase+0xa8>)
1004c4a0:	781b      	ldrb	r3, [r3, #0]
1004c4a2:	2b01      	cmp	r3, #1
1004c4a4:	d101      	bne.n	1004c4aa <HAL_FLASHEx_Erase+0x16>
1004c4a6:	2302      	movs	r3, #2
1004c4a8:	e043      	b.n	1004c532 <HAL_FLASHEx_Erase+0x9e>
1004c4aa:	4b24      	ldr	r3, [pc, #144]	@ (1004c53c <HAL_FLASHEx_Erase+0xa8>)
1004c4ac:	2201      	movs	r2, #1
1004c4ae:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1004c4b0:	4b22      	ldr	r3, [pc, #136]	@ (1004c53c <HAL_FLASHEx_Erase+0xa8>)
1004c4b2:	2200      	movs	r2, #0
1004c4b4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
1004c4b6:	687b      	ldr	r3, [r7, #4]
1004c4b8:	681b      	ldr	r3, [r3, #0]
1004c4ba:	2bff      	cmp	r3, #255	@ 0xff
1004c4bc:	d10b      	bne.n	1004c4d6 <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
1004c4be:	f000 f83f 	bl	1004c540 <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004c4c2:	230f      	movs	r3, #15
1004c4c4:	18fc      	adds	r4, r7, r3
1004c4c6:	23fa      	movs	r3, #250	@ 0xfa
1004c4c8:	009b      	lsls	r3, r3, #2
1004c4ca:	0018      	movs	r0, r3
1004c4cc:	f7ff ff4c 	bl	1004c368 <FLASH_WaitForLastOperation>
1004c4d0:	0003      	movs	r3, r0
1004c4d2:	7023      	strb	r3, [r4, #0]
1004c4d4:	e027      	b.n	1004c526 <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
1004c4d6:	683b      	ldr	r3, [r7, #0]
1004c4d8:	2201      	movs	r2, #1
1004c4da:	4252      	negs	r2, r2
1004c4dc:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
1004c4de:	687b      	ldr	r3, [r7, #4]
1004c4e0:	685b      	ldr	r3, [r3, #4]
1004c4e2:	60bb      	str	r3, [r7, #8]
1004c4e4:	e017      	b.n	1004c516 <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
1004c4e6:	68bb      	ldr	r3, [r7, #8]
1004c4e8:	0018      	movs	r0, r3
1004c4ea:	f000 f839 	bl	1004c560 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004c4ee:	250f      	movs	r5, #15
1004c4f0:	197c      	adds	r4, r7, r5
1004c4f2:	23fa      	movs	r3, #250	@ 0xfa
1004c4f4:	009b      	lsls	r3, r3, #2
1004c4f6:	0018      	movs	r0, r3
1004c4f8:	f7ff ff36 	bl	1004c368 <FLASH_WaitForLastOperation>
1004c4fc:	0003      	movs	r3, r0
1004c4fe:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
1004c500:	197b      	adds	r3, r7, r5
1004c502:	781b      	ldrb	r3, [r3, #0]
1004c504:	2b00      	cmp	r3, #0
1004c506:	d003      	beq.n	1004c510 <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
1004c508:	683b      	ldr	r3, [r7, #0]
1004c50a:	68ba      	ldr	r2, [r7, #8]
1004c50c:	601a      	str	r2, [r3, #0]
        break;
1004c50e:	e00a      	b.n	1004c526 <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
1004c510:	68bb      	ldr	r3, [r7, #8]
1004c512:	3301      	adds	r3, #1
1004c514:	60bb      	str	r3, [r7, #8]
1004c516:	687b      	ldr	r3, [r7, #4]
1004c518:	685a      	ldr	r2, [r3, #4]
1004c51a:	687b      	ldr	r3, [r7, #4]
1004c51c:	689b      	ldr	r3, [r3, #8]
1004c51e:	18d3      	adds	r3, r2, r3
1004c520:	68ba      	ldr	r2, [r7, #8]
1004c522:	429a      	cmp	r2, r3
1004c524:	d3df      	bcc.n	1004c4e6 <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
1004c526:	4b05      	ldr	r3, [pc, #20]	@ (1004c53c <HAL_FLASHEx_Erase+0xa8>)
1004c528:	2200      	movs	r2, #0
1004c52a:	701a      	strb	r2, [r3, #0]

  return status;
1004c52c:	230f      	movs	r3, #15
1004c52e:	18fb      	adds	r3, r7, r3
1004c530:	781b      	ldrb	r3, [r3, #0]
}
1004c532:	0018      	movs	r0, r3
1004c534:	46bd      	mov	sp, r7
1004c536:	b004      	add	sp, #16
1004c538:	bdb0      	pop	{r4, r5, r7, pc}
1004c53a:	46c0      	nop			@ (mov r8, r8)
1004c53c:	20000f80 	.word	0x20000f80

1004c540 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
1004c540:	b580      	push	{r7, lr}
1004c542:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004c544:	4b05      	ldr	r3, [pc, #20]	@ (1004c55c <FLASH_MassErase+0x1c>)
1004c546:	691a      	ldr	r2, [r3, #16]
1004c548:	4b04      	ldr	r3, [pc, #16]	@ (1004c55c <FLASH_MassErase+0x1c>)
1004c54a:	210f      	movs	r1, #15
1004c54c:	430a      	orrs	r2, r1
1004c54e:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
1004c550:	4b02      	ldr	r3, [pc, #8]	@ (1004c55c <FLASH_MassErase+0x1c>)
1004c552:	2222      	movs	r2, #34	@ 0x22
1004c554:	601a      	str	r2, [r3, #0]
}
1004c556:	46c0      	nop			@ (mov r8, r8)
1004c558:	46bd      	mov	sp, r7
1004c55a:	bd80      	pop	{r7, pc}
1004c55c:	40001000 	.word	0x40001000

1004c560 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
1004c560:	b580      	push	{r7, lr}
1004c562:	b082      	sub	sp, #8
1004c564:	af00      	add	r7, sp, #0
1004c566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004c568:	4b09      	ldr	r3, [pc, #36]	@ (1004c590 <FLASH_PageErase+0x30>)
1004c56a:	691a      	ldr	r2, [r3, #16]
1004c56c:	4b08      	ldr	r3, [pc, #32]	@ (1004c590 <FLASH_PageErase+0x30>)
1004c56e:	210f      	movs	r1, #15
1004c570:	430a      	orrs	r2, r1
1004c572:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
1004c574:	687b      	ldr	r3, [r7, #4]
1004c576:	02db      	lsls	r3, r3, #11
1004c578:	089a      	lsrs	r2, r3, #2
1004c57a:	4b05      	ldr	r3, [pc, #20]	@ (1004c590 <FLASH_PageErase+0x30>)
1004c57c:	03d2      	lsls	r2, r2, #15
1004c57e:	0bd2      	lsrs	r2, r2, #15
1004c580:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
1004c582:	4b03      	ldr	r3, [pc, #12]	@ (1004c590 <FLASH_PageErase+0x30>)
1004c584:	2211      	movs	r2, #17
1004c586:	601a      	str	r2, [r3, #0]
}
1004c588:	46c0      	nop			@ (mov r8, r8)
1004c58a:	46bd      	mov	sp, r7
1004c58c:	b002      	add	sp, #8
1004c58e:	bd80      	pop	{r7, pc}
1004c590:	40001000 	.word	0x40001000

1004c594 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
1004c594:	b580      	push	{r7, lr}
1004c596:	b086      	sub	sp, #24
1004c598:	af00      	add	r7, sp, #0
1004c59a:	6078      	str	r0, [r7, #4]
1004c59c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
1004c59e:	2300      	movs	r3, #0
1004c5a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
1004c5a2:	e190      	b.n	1004c8c6 <HAL_GPIO_Init+0x332>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
1004c5a4:	683b      	ldr	r3, [r7, #0]
1004c5a6:	681b      	ldr	r3, [r3, #0]
1004c5a8:	2101      	movs	r1, #1
1004c5aa:	697a      	ldr	r2, [r7, #20]
1004c5ac:	4091      	lsls	r1, r2
1004c5ae:	000a      	movs	r2, r1
1004c5b0:	4013      	ands	r3, r2
1004c5b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
1004c5b4:	68fb      	ldr	r3, [r7, #12]
1004c5b6:	2b00      	cmp	r3, #0
1004c5b8:	d100      	bne.n	1004c5bc <HAL_GPIO_Init+0x28>
1004c5ba:	e181      	b.n	1004c8c0 <HAL_GPIO_Init+0x32c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
1004c5bc:	683b      	ldr	r3, [r7, #0]
1004c5be:	685b      	ldr	r3, [r3, #4]
1004c5c0:	2203      	movs	r2, #3
1004c5c2:	4013      	ands	r3, r2
1004c5c4:	2b01      	cmp	r3, #1
1004c5c6:	d005      	beq.n	1004c5d4 <HAL_GPIO_Init+0x40>
1004c5c8:	683b      	ldr	r3, [r7, #0]
1004c5ca:	685b      	ldr	r3, [r3, #4]
1004c5cc:	2203      	movs	r2, #3
1004c5ce:	4013      	ands	r3, r2
1004c5d0:	2b02      	cmp	r3, #2
1004c5d2:	d130      	bne.n	1004c636 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1004c5d4:	687b      	ldr	r3, [r7, #4]
1004c5d6:	689b      	ldr	r3, [r3, #8]
1004c5d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
1004c5da:	697b      	ldr	r3, [r7, #20]
1004c5dc:	005b      	lsls	r3, r3, #1
1004c5de:	2203      	movs	r2, #3
1004c5e0:	409a      	lsls	r2, r3
1004c5e2:	0013      	movs	r3, r2
1004c5e4:	43da      	mvns	r2, r3
1004c5e6:	693b      	ldr	r3, [r7, #16]
1004c5e8:	4013      	ands	r3, r2
1004c5ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
1004c5ec:	683b      	ldr	r3, [r7, #0]
1004c5ee:	68da      	ldr	r2, [r3, #12]
1004c5f0:	697b      	ldr	r3, [r7, #20]
1004c5f2:	005b      	lsls	r3, r3, #1
1004c5f4:	409a      	lsls	r2, r3
1004c5f6:	0013      	movs	r3, r2
1004c5f8:	693a      	ldr	r2, [r7, #16]
1004c5fa:	4313      	orrs	r3, r2
1004c5fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
1004c5fe:	687b      	ldr	r3, [r7, #4]
1004c600:	693a      	ldr	r2, [r7, #16]
1004c602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1004c604:	687b      	ldr	r3, [r7, #4]
1004c606:	685b      	ldr	r3, [r3, #4]
1004c608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
1004c60a:	2201      	movs	r2, #1
1004c60c:	697b      	ldr	r3, [r7, #20]
1004c60e:	409a      	lsls	r2, r3
1004c610:	0013      	movs	r3, r2
1004c612:	43da      	mvns	r2, r3
1004c614:	693b      	ldr	r3, [r7, #16]
1004c616:	4013      	ands	r3, r2
1004c618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
1004c61a:	683b      	ldr	r3, [r7, #0]
1004c61c:	685b      	ldr	r3, [r3, #4]
1004c61e:	091b      	lsrs	r3, r3, #4
1004c620:	2201      	movs	r2, #1
1004c622:	401a      	ands	r2, r3
1004c624:	697b      	ldr	r3, [r7, #20]
1004c626:	409a      	lsls	r2, r3
1004c628:	0013      	movs	r3, r2
1004c62a:	693a      	ldr	r2, [r7, #16]
1004c62c:	4313      	orrs	r3, r2
1004c62e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
1004c630:	687b      	ldr	r3, [r7, #4]
1004c632:	693a      	ldr	r2, [r7, #16]
1004c634:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
1004c636:	683b      	ldr	r3, [r7, #0]
1004c638:	685b      	ldr	r3, [r3, #4]
1004c63a:	2203      	movs	r2, #3
1004c63c:	4013      	ands	r3, r2
1004c63e:	2b03      	cmp	r3, #3
1004c640:	d017      	beq.n	1004c672 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
1004c642:	687b      	ldr	r3, [r7, #4]
1004c644:	68db      	ldr	r3, [r3, #12]
1004c646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
1004c648:	697b      	ldr	r3, [r7, #20]
1004c64a:	005b      	lsls	r3, r3, #1
1004c64c:	2203      	movs	r2, #3
1004c64e:	409a      	lsls	r2, r3
1004c650:	0013      	movs	r3, r2
1004c652:	43da      	mvns	r2, r3
1004c654:	693b      	ldr	r3, [r7, #16]
1004c656:	4013      	ands	r3, r2
1004c658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
1004c65a:	683b      	ldr	r3, [r7, #0]
1004c65c:	689a      	ldr	r2, [r3, #8]
1004c65e:	697b      	ldr	r3, [r7, #20]
1004c660:	005b      	lsls	r3, r3, #1
1004c662:	409a      	lsls	r2, r3
1004c664:	0013      	movs	r3, r2
1004c666:	693a      	ldr	r2, [r7, #16]
1004c668:	4313      	orrs	r3, r2
1004c66a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
1004c66c:	687b      	ldr	r3, [r7, #4]
1004c66e:	693a      	ldr	r2, [r7, #16]
1004c670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
1004c672:	683b      	ldr	r3, [r7, #0]
1004c674:	685b      	ldr	r3, [r3, #4]
1004c676:	2203      	movs	r2, #3
1004c678:	4013      	ands	r3, r2
1004c67a:	2b02      	cmp	r3, #2
1004c67c:	d123      	bne.n	1004c6c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
1004c67e:	697b      	ldr	r3, [r7, #20]
1004c680:	08da      	lsrs	r2, r3, #3
1004c682:	687b      	ldr	r3, [r7, #4]
1004c684:	3208      	adds	r2, #8
1004c686:	0092      	lsls	r2, r2, #2
1004c688:	58d3      	ldr	r3, [r2, r3]
1004c68a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
1004c68c:	697b      	ldr	r3, [r7, #20]
1004c68e:	2207      	movs	r2, #7
1004c690:	4013      	ands	r3, r2
1004c692:	009b      	lsls	r3, r3, #2
1004c694:	220f      	movs	r2, #15
1004c696:	409a      	lsls	r2, r3
1004c698:	0013      	movs	r3, r2
1004c69a:	43da      	mvns	r2, r3
1004c69c:	693b      	ldr	r3, [r7, #16]
1004c69e:	4013      	ands	r3, r2
1004c6a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
1004c6a2:	683b      	ldr	r3, [r7, #0]
1004c6a4:	691a      	ldr	r2, [r3, #16]
1004c6a6:	697b      	ldr	r3, [r7, #20]
1004c6a8:	2107      	movs	r1, #7
1004c6aa:	400b      	ands	r3, r1
1004c6ac:	009b      	lsls	r3, r3, #2
1004c6ae:	409a      	lsls	r2, r3
1004c6b0:	0013      	movs	r3, r2
1004c6b2:	693a      	ldr	r2, [r7, #16]
1004c6b4:	4313      	orrs	r3, r2
1004c6b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
1004c6b8:	697b      	ldr	r3, [r7, #20]
1004c6ba:	08da      	lsrs	r2, r3, #3
1004c6bc:	687b      	ldr	r3, [r7, #4]
1004c6be:	3208      	adds	r2, #8
1004c6c0:	0092      	lsls	r2, r2, #2
1004c6c2:	6939      	ldr	r1, [r7, #16]
1004c6c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
1004c6c6:	687b      	ldr	r3, [r7, #4]
1004c6c8:	681b      	ldr	r3, [r3, #0]
1004c6ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
1004c6cc:	697b      	ldr	r3, [r7, #20]
1004c6ce:	005b      	lsls	r3, r3, #1
1004c6d0:	2203      	movs	r2, #3
1004c6d2:	409a      	lsls	r2, r3
1004c6d4:	0013      	movs	r3, r2
1004c6d6:	43da      	mvns	r2, r3
1004c6d8:	693b      	ldr	r3, [r7, #16]
1004c6da:	4013      	ands	r3, r2
1004c6dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
1004c6de:	683b      	ldr	r3, [r7, #0]
1004c6e0:	685b      	ldr	r3, [r3, #4]
1004c6e2:	2203      	movs	r2, #3
1004c6e4:	401a      	ands	r2, r3
1004c6e6:	697b      	ldr	r3, [r7, #20]
1004c6e8:	005b      	lsls	r3, r3, #1
1004c6ea:	409a      	lsls	r2, r3
1004c6ec:	0013      	movs	r3, r2
1004c6ee:	693a      	ldr	r2, [r7, #16]
1004c6f0:	4313      	orrs	r3, r2
1004c6f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
1004c6f4:	687b      	ldr	r3, [r7, #4]
1004c6f6:	693a      	ldr	r2, [r7, #16]
1004c6f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
1004c6fa:	683b      	ldr	r3, [r7, #0]
1004c6fc:	685a      	ldr	r2, [r3, #4]
1004c6fe:	23c0      	movs	r3, #192	@ 0xc0
1004c700:	029b      	lsls	r3, r3, #10
1004c702:	4013      	ands	r3, r2
1004c704:	d100      	bne.n	1004c708 <HAL_GPIO_Init+0x174>
1004c706:	e0db      	b.n	1004c8c0 <HAL_GPIO_Init+0x32c>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
1004c708:	683b      	ldr	r3, [r7, #0]
1004c70a:	685a      	ldr	r2, [r3, #4]
1004c70c:	2380      	movs	r3, #128	@ 0x80
1004c70e:	02db      	lsls	r3, r3, #11
1004c710:	4013      	ands	r3, r2
1004c712:	d030      	beq.n	1004c776 <HAL_GPIO_Init+0x1e2>
        {
          temp = SYSCFG->IO_DTR;
1004c714:	2380      	movs	r3, #128	@ 0x80
1004c716:	05db      	lsls	r3, r3, #23
1004c718:	68db      	ldr	r3, [r3, #12]
1004c71a:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
1004c71c:	687a      	ldr	r2, [r7, #4]
1004c71e:	2390      	movs	r3, #144	@ 0x90
1004c720:	05db      	lsls	r3, r3, #23
1004c722:	429a      	cmp	r2, r3
1004c724:	d111      	bne.n	1004c74a <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
1004c726:	2201      	movs	r2, #1
1004c728:	697b      	ldr	r3, [r7, #20]
1004c72a:	409a      	lsls	r2, r3
1004c72c:	0013      	movs	r3, r2
1004c72e:	43db      	mvns	r3, r3
1004c730:	001a      	movs	r2, r3
1004c732:	693b      	ldr	r3, [r7, #16]
1004c734:	4013      	ands	r3, r2
1004c736:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004c738:	2201      	movs	r2, #1
1004c73a:	697b      	ldr	r3, [r7, #20]
1004c73c:	409a      	lsls	r2, r3
1004c73e:	0013      	movs	r3, r2
1004c740:	001a      	movs	r2, r3
1004c742:	693b      	ldr	r3, [r7, #16]
1004c744:	4313      	orrs	r3, r2
1004c746:	613b      	str	r3, [r7, #16]
1004c748:	e011      	b.n	1004c76e <HAL_GPIO_Init+0x1da>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004c74a:	2201      	movs	r2, #1
1004c74c:	697b      	ldr	r3, [r7, #20]
1004c74e:	409a      	lsls	r2, r3
1004c750:	0013      	movs	r3, r2
1004c752:	041b      	lsls	r3, r3, #16
1004c754:	43db      	mvns	r3, r3
1004c756:	001a      	movs	r2, r3
1004c758:	693b      	ldr	r3, [r7, #16]
1004c75a:	4013      	ands	r3, r2
1004c75c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004c75e:	2201      	movs	r2, #1
1004c760:	697b      	ldr	r3, [r7, #20]
1004c762:	409a      	lsls	r2, r3
1004c764:	0013      	movs	r3, r2
1004c766:	041b      	lsls	r3, r3, #16
1004c768:	693a      	ldr	r2, [r7, #16]
1004c76a:	4313      	orrs	r3, r2
1004c76c:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
1004c76e:	2380      	movs	r3, #128	@ 0x80
1004c770:	05db      	lsls	r3, r3, #23
1004c772:	693a      	ldr	r2, [r7, #16]
1004c774:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
1004c776:	683b      	ldr	r3, [r7, #0]
1004c778:	685a      	ldr	r2, [r3, #4]
1004c77a:	2380      	movs	r3, #128	@ 0x80
1004c77c:	035b      	lsls	r3, r3, #13
1004c77e:	4013      	ands	r3, r2
1004c780:	d030      	beq.n	1004c7e4 <HAL_GPIO_Init+0x250>
        {
          temp = SYSCFG->IO_IBER;
1004c782:	2380      	movs	r3, #128	@ 0x80
1004c784:	05db      	lsls	r3, r3, #23
1004c786:	691b      	ldr	r3, [r3, #16]
1004c788:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004c78a:	687a      	ldr	r2, [r7, #4]
1004c78c:	2390      	movs	r3, #144	@ 0x90
1004c78e:	05db      	lsls	r3, r3, #23
1004c790:	429a      	cmp	r2, r3
1004c792:	d111      	bne.n	1004c7b8 <HAL_GPIO_Init+0x224>
          {
            temp &= ~(1 << position);
1004c794:	2201      	movs	r2, #1
1004c796:	697b      	ldr	r3, [r7, #20]
1004c798:	409a      	lsls	r2, r3
1004c79a:	0013      	movs	r3, r2
1004c79c:	43db      	mvns	r3, r3
1004c79e:	001a      	movs	r2, r3
1004c7a0:	693b      	ldr	r3, [r7, #16]
1004c7a2:	4013      	ands	r3, r2
1004c7a4:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004c7a6:	2201      	movs	r2, #1
1004c7a8:	697b      	ldr	r3, [r7, #20]
1004c7aa:	409a      	lsls	r2, r3
1004c7ac:	0013      	movs	r3, r2
1004c7ae:	001a      	movs	r2, r3
1004c7b0:	693b      	ldr	r3, [r7, #16]
1004c7b2:	4313      	orrs	r3, r2
1004c7b4:	613b      	str	r3, [r7, #16]
1004c7b6:	e011      	b.n	1004c7dc <HAL_GPIO_Init+0x248>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004c7b8:	2201      	movs	r2, #1
1004c7ba:	697b      	ldr	r3, [r7, #20]
1004c7bc:	409a      	lsls	r2, r3
1004c7be:	0013      	movs	r3, r2
1004c7c0:	041b      	lsls	r3, r3, #16
1004c7c2:	43db      	mvns	r3, r3
1004c7c4:	001a      	movs	r2, r3
1004c7c6:	693b      	ldr	r3, [r7, #16]
1004c7c8:	4013      	ands	r3, r2
1004c7ca:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004c7cc:	2201      	movs	r2, #1
1004c7ce:	697b      	ldr	r3, [r7, #20]
1004c7d0:	409a      	lsls	r2, r3
1004c7d2:	0013      	movs	r3, r2
1004c7d4:	041b      	lsls	r3, r3, #16
1004c7d6:	693a      	ldr	r2, [r7, #16]
1004c7d8:	4313      	orrs	r3, r2
1004c7da:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
1004c7dc:	2380      	movs	r3, #128	@ 0x80
1004c7de:	05db      	lsls	r3, r3, #23
1004c7e0:	693a      	ldr	r2, [r7, #16]
1004c7e2:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
1004c7e4:	683b      	ldr	r3, [r7, #0]
1004c7e6:	685a      	ldr	r2, [r3, #4]
1004c7e8:	2380      	movs	r3, #128	@ 0x80
1004c7ea:	03db      	lsls	r3, r3, #15
1004c7ec:	4013      	ands	r3, r2
1004c7ee:	d030      	beq.n	1004c852 <HAL_GPIO_Init+0x2be>
        {
          temp = SYSCFG->IO_IEVR;
1004c7f0:	2380      	movs	r3, #128	@ 0x80
1004c7f2:	05db      	lsls	r3, r3, #23
1004c7f4:	695b      	ldr	r3, [r3, #20]
1004c7f6:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004c7f8:	687a      	ldr	r2, [r7, #4]
1004c7fa:	2390      	movs	r3, #144	@ 0x90
1004c7fc:	05db      	lsls	r3, r3, #23
1004c7fe:	429a      	cmp	r2, r3
1004c800:	d111      	bne.n	1004c826 <HAL_GPIO_Init+0x292>
          {
            temp &= ~(1 << position);
1004c802:	2201      	movs	r2, #1
1004c804:	697b      	ldr	r3, [r7, #20]
1004c806:	409a      	lsls	r2, r3
1004c808:	0013      	movs	r3, r2
1004c80a:	43db      	mvns	r3, r3
1004c80c:	001a      	movs	r2, r3
1004c80e:	693b      	ldr	r3, [r7, #16]
1004c810:	4013      	ands	r3, r2
1004c812:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004c814:	2201      	movs	r2, #1
1004c816:	697b      	ldr	r3, [r7, #20]
1004c818:	409a      	lsls	r2, r3
1004c81a:	0013      	movs	r3, r2
1004c81c:	001a      	movs	r2, r3
1004c81e:	693b      	ldr	r3, [r7, #16]
1004c820:	4313      	orrs	r3, r2
1004c822:	613b      	str	r3, [r7, #16]
1004c824:	e011      	b.n	1004c84a <HAL_GPIO_Init+0x2b6>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004c826:	2201      	movs	r2, #1
1004c828:	697b      	ldr	r3, [r7, #20]
1004c82a:	409a      	lsls	r2, r3
1004c82c:	0013      	movs	r3, r2
1004c82e:	041b      	lsls	r3, r3, #16
1004c830:	43db      	mvns	r3, r3
1004c832:	001a      	movs	r2, r3
1004c834:	693b      	ldr	r3, [r7, #16]
1004c836:	4013      	ands	r3, r2
1004c838:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004c83a:	2201      	movs	r2, #1
1004c83c:	697b      	ldr	r3, [r7, #20]
1004c83e:	409a      	lsls	r2, r3
1004c840:	0013      	movs	r3, r2
1004c842:	041b      	lsls	r3, r3, #16
1004c844:	693a      	ldr	r2, [r7, #16]
1004c846:	4313      	orrs	r3, r2
1004c848:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
1004c84a:	2380      	movs	r3, #128	@ 0x80
1004c84c:	05db      	lsls	r3, r3, #23
1004c84e:	693a      	ldr	r2, [r7, #16]
1004c850:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
1004c852:	683b      	ldr	r3, [r7, #0]
1004c854:	685a      	ldr	r2, [r3, #4]
1004c856:	2380      	movs	r3, #128	@ 0x80
1004c858:	025b      	lsls	r3, r3, #9
1004c85a:	4013      	ands	r3, r2
1004c85c:	d030      	beq.n	1004c8c0 <HAL_GPIO_Init+0x32c>
        {
          temp = SYSCFG->IO_IER;
1004c85e:	2380      	movs	r3, #128	@ 0x80
1004c860:	05db      	lsls	r3, r3, #23
1004c862:	699b      	ldr	r3, [r3, #24]
1004c864:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004c866:	687a      	ldr	r2, [r7, #4]
1004c868:	2390      	movs	r3, #144	@ 0x90
1004c86a:	05db      	lsls	r3, r3, #23
1004c86c:	429a      	cmp	r2, r3
1004c86e:	d111      	bne.n	1004c894 <HAL_GPIO_Init+0x300>
          {
            temp &= ~(1 << position);
1004c870:	2201      	movs	r2, #1
1004c872:	697b      	ldr	r3, [r7, #20]
1004c874:	409a      	lsls	r2, r3
1004c876:	0013      	movs	r3, r2
1004c878:	43db      	mvns	r3, r3
1004c87a:	001a      	movs	r2, r3
1004c87c:	693b      	ldr	r3, [r7, #16]
1004c87e:	4013      	ands	r3, r2
1004c880:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
1004c882:	2201      	movs	r2, #1
1004c884:	697b      	ldr	r3, [r7, #20]
1004c886:	409a      	lsls	r2, r3
1004c888:	0013      	movs	r3, r2
1004c88a:	001a      	movs	r2, r3
1004c88c:	693b      	ldr	r3, [r7, #16]
1004c88e:	4313      	orrs	r3, r2
1004c890:	613b      	str	r3, [r7, #16]
1004c892:	e011      	b.n	1004c8b8 <HAL_GPIO_Init+0x324>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004c894:	2201      	movs	r2, #1
1004c896:	697b      	ldr	r3, [r7, #20]
1004c898:	409a      	lsls	r2, r3
1004c89a:	0013      	movs	r3, r2
1004c89c:	041b      	lsls	r3, r3, #16
1004c89e:	43db      	mvns	r3, r3
1004c8a0:	001a      	movs	r2, r3
1004c8a2:	693b      	ldr	r3, [r7, #16]
1004c8a4:	4013      	ands	r3, r2
1004c8a6:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004c8a8:	2201      	movs	r2, #1
1004c8aa:	697b      	ldr	r3, [r7, #20]
1004c8ac:	409a      	lsls	r2, r3
1004c8ae:	0013      	movs	r3, r2
1004c8b0:	041b      	lsls	r3, r3, #16
1004c8b2:	693a      	ldr	r2, [r7, #16]
1004c8b4:	4313      	orrs	r3, r2
1004c8b6:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
1004c8b8:	2380      	movs	r3, #128	@ 0x80
1004c8ba:	05db      	lsls	r3, r3, #23
1004c8bc:	693a      	ldr	r2, [r7, #16]
1004c8be:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
1004c8c0:	697b      	ldr	r3, [r7, #20]
1004c8c2:	3301      	adds	r3, #1
1004c8c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
1004c8c6:	683b      	ldr	r3, [r7, #0]
1004c8c8:	681a      	ldr	r2, [r3, #0]
1004c8ca:	697b      	ldr	r3, [r7, #20]
1004c8cc:	40da      	lsrs	r2, r3
1004c8ce:	1e13      	subs	r3, r2, #0
1004c8d0:	d000      	beq.n	1004c8d4 <HAL_GPIO_Init+0x340>
1004c8d2:	e667      	b.n	1004c5a4 <HAL_GPIO_Init+0x10>
  }
}
1004c8d4:	46c0      	nop			@ (mov r8, r8)
1004c8d6:	46c0      	nop			@ (mov r8, r8)
1004c8d8:	46bd      	mov	sp, r7
1004c8da:	b006      	add	sp, #24
1004c8dc:	bd80      	pop	{r7, pc}

1004c8de <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
1004c8de:	b580      	push	{r7, lr}
1004c8e0:	b086      	sub	sp, #24
1004c8e2:	af00      	add	r7, sp, #0
1004c8e4:	6078      	str	r0, [r7, #4]
1004c8e6:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
1004c8e8:	2300      	movs	r3, #0
1004c8ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
1004c8ec:	e0cf      	b.n	1004ca8e <HAL_GPIO_DeInit+0x1b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
1004c8ee:	2201      	movs	r2, #1
1004c8f0:	697b      	ldr	r3, [r7, #20]
1004c8f2:	409a      	lsls	r2, r3
1004c8f4:	683b      	ldr	r3, [r7, #0]
1004c8f6:	4013      	ands	r3, r2
1004c8f8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
1004c8fa:	68fb      	ldr	r3, [r7, #12]
1004c8fc:	2b00      	cmp	r3, #0
1004c8fe:	d100      	bne.n	1004c902 <HAL_GPIO_DeInit+0x24>
1004c900:	e0c2      	b.n	1004ca88 <HAL_GPIO_DeInit+0x1aa>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      /* Disable the specified EXTI interrupt line */
      tmp = SYSCFG->IO_IER;
1004c902:	2380      	movs	r3, #128	@ 0x80
1004c904:	05db      	lsls	r3, r3, #23
1004c906:	699b      	ldr	r3, [r3, #24]
1004c908:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
1004c90a:	687a      	ldr	r2, [r7, #4]
1004c90c:	2390      	movs	r3, #144	@ 0x90
1004c90e:	05db      	lsls	r3, r3, #23
1004c910:	429a      	cmp	r2, r3
1004c912:	d109      	bne.n	1004c928 <HAL_GPIO_DeInit+0x4a>
      {
        tmp &= ~(1<<position);
1004c914:	2201      	movs	r2, #1
1004c916:	697b      	ldr	r3, [r7, #20]
1004c918:	409a      	lsls	r2, r3
1004c91a:	0013      	movs	r3, r2
1004c91c:	43db      	mvns	r3, r3
1004c91e:	001a      	movs	r2, r3
1004c920:	693b      	ldr	r3, [r7, #16]
1004c922:	4013      	ands	r3, r2
1004c924:	613b      	str	r3, [r7, #16]
1004c926:	e009      	b.n	1004c93c <HAL_GPIO_DeInit+0x5e>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
1004c928:	2201      	movs	r2, #1
1004c92a:	697b      	ldr	r3, [r7, #20]
1004c92c:	409a      	lsls	r2, r3
1004c92e:	0013      	movs	r3, r2
1004c930:	041b      	lsls	r3, r3, #16
1004c932:	43db      	mvns	r3, r3
1004c934:	001a      	movs	r2, r3
1004c936:	693b      	ldr	r3, [r7, #16]
1004c938:	4013      	ands	r3, r2
1004c93a:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IER = tmp;
1004c93c:	2380      	movs	r3, #128	@ 0x80
1004c93e:	05db      	lsls	r3, r3, #23
1004c940:	693a      	ldr	r2, [r7, #16]
1004c942:	619a      	str	r2, [r3, #24]

      /* Clear EXTI line configuration */
      tmp = SYSCFG->IO_DTR;
1004c944:	2380      	movs	r3, #128	@ 0x80
1004c946:	05db      	lsls	r3, r3, #23
1004c948:	68db      	ldr	r3, [r3, #12]
1004c94a:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
1004c94c:	687a      	ldr	r2, [r7, #4]
1004c94e:	2390      	movs	r3, #144	@ 0x90
1004c950:	05db      	lsls	r3, r3, #23
1004c952:	429a      	cmp	r2, r3
1004c954:	d109      	bne.n	1004c96a <HAL_GPIO_DeInit+0x8c>
      {
        tmp &= ~(1<<position);
1004c956:	2201      	movs	r2, #1
1004c958:	697b      	ldr	r3, [r7, #20]
1004c95a:	409a      	lsls	r2, r3
1004c95c:	0013      	movs	r3, r2
1004c95e:	43db      	mvns	r3, r3
1004c960:	001a      	movs	r2, r3
1004c962:	693b      	ldr	r3, [r7, #16]
1004c964:	4013      	ands	r3, r2
1004c966:	613b      	str	r3, [r7, #16]
1004c968:	e009      	b.n	1004c97e <HAL_GPIO_DeInit+0xa0>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
1004c96a:	2201      	movs	r2, #1
1004c96c:	697b      	ldr	r3, [r7, #20]
1004c96e:	409a      	lsls	r2, r3
1004c970:	0013      	movs	r3, r2
1004c972:	041b      	lsls	r3, r3, #16
1004c974:	43db      	mvns	r3, r3
1004c976:	001a      	movs	r2, r3
1004c978:	693b      	ldr	r3, [r7, #16]
1004c97a:	4013      	ands	r3, r2
1004c97c:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_DTR = tmp;
1004c97e:	2380      	movs	r3, #128	@ 0x80
1004c980:	05db      	lsls	r3, r3, #23
1004c982:	693a      	ldr	r2, [r7, #16]
1004c984:	60da      	str	r2, [r3, #12]

      tmp = SYSCFG->IO_IBER;
1004c986:	2380      	movs	r3, #128	@ 0x80
1004c988:	05db      	lsls	r3, r3, #23
1004c98a:	691b      	ldr	r3, [r3, #16]
1004c98c:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
1004c98e:	687a      	ldr	r2, [r7, #4]
1004c990:	2390      	movs	r3, #144	@ 0x90
1004c992:	05db      	lsls	r3, r3, #23
1004c994:	429a      	cmp	r2, r3
1004c996:	d109      	bne.n	1004c9ac <HAL_GPIO_DeInit+0xce>
      {
        tmp &= ~(1<<position);
1004c998:	2201      	movs	r2, #1
1004c99a:	697b      	ldr	r3, [r7, #20]
1004c99c:	409a      	lsls	r2, r3
1004c99e:	0013      	movs	r3, r2
1004c9a0:	43db      	mvns	r3, r3
1004c9a2:	001a      	movs	r2, r3
1004c9a4:	693b      	ldr	r3, [r7, #16]
1004c9a6:	4013      	ands	r3, r2
1004c9a8:	613b      	str	r3, [r7, #16]
1004c9aa:	e009      	b.n	1004c9c0 <HAL_GPIO_DeInit+0xe2>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
1004c9ac:	2201      	movs	r2, #1
1004c9ae:	697b      	ldr	r3, [r7, #20]
1004c9b0:	409a      	lsls	r2, r3
1004c9b2:	0013      	movs	r3, r2
1004c9b4:	041b      	lsls	r3, r3, #16
1004c9b6:	43db      	mvns	r3, r3
1004c9b8:	001a      	movs	r2, r3
1004c9ba:	693b      	ldr	r3, [r7, #16]
1004c9bc:	4013      	ands	r3, r2
1004c9be:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IBER = tmp;
1004c9c0:	2380      	movs	r3, #128	@ 0x80
1004c9c2:	05db      	lsls	r3, r3, #23
1004c9c4:	693a      	ldr	r2, [r7, #16]
1004c9c6:	611a      	str	r2, [r3, #16]

      /* Clear trigger mode configuration */
      tmp = SYSCFG->IO_IEVR;
1004c9c8:	2380      	movs	r3, #128	@ 0x80
1004c9ca:	05db      	lsls	r3, r3, #23
1004c9cc:	695b      	ldr	r3, [r3, #20]
1004c9ce:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
1004c9d0:	687a      	ldr	r2, [r7, #4]
1004c9d2:	2390      	movs	r3, #144	@ 0x90
1004c9d4:	05db      	lsls	r3, r3, #23
1004c9d6:	429a      	cmp	r2, r3
1004c9d8:	d109      	bne.n	1004c9ee <HAL_GPIO_DeInit+0x110>
      {
        tmp &= ~(1<<position);
1004c9da:	2201      	movs	r2, #1
1004c9dc:	697b      	ldr	r3, [r7, #20]
1004c9de:	409a      	lsls	r2, r3
1004c9e0:	0013      	movs	r3, r2
1004c9e2:	43db      	mvns	r3, r3
1004c9e4:	001a      	movs	r2, r3
1004c9e6:	693b      	ldr	r3, [r7, #16]
1004c9e8:	4013      	ands	r3, r2
1004c9ea:	613b      	str	r3, [r7, #16]
1004c9ec:	e009      	b.n	1004ca02 <HAL_GPIO_DeInit+0x124>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
1004c9ee:	2201      	movs	r2, #1
1004c9f0:	697b      	ldr	r3, [r7, #20]
1004c9f2:	409a      	lsls	r2, r3
1004c9f4:	0013      	movs	r3, r2
1004c9f6:	041b      	lsls	r3, r3, #16
1004c9f8:	43db      	mvns	r3, r3
1004c9fa:	001a      	movs	r2, r3
1004c9fc:	693b      	ldr	r3, [r7, #16]
1004c9fe:	4013      	ands	r3, r2
1004ca00:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IEVR = tmp;
1004ca02:	2380      	movs	r3, #128	@ 0x80
1004ca04:	05db      	lsls	r3, r3, #23
1004ca06:	693a      	ldr	r2, [r7, #16]
1004ca08:	615a      	str	r2, [r3, #20]

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
1004ca0a:	687b      	ldr	r3, [r7, #4]
1004ca0c:	681a      	ldr	r2, [r3, #0]
1004ca0e:	697b      	ldr	r3, [r7, #20]
1004ca10:	005b      	lsls	r3, r3, #1
1004ca12:	2103      	movs	r1, #3
1004ca14:	4099      	lsls	r1, r3
1004ca16:	000b      	movs	r3, r1
1004ca18:	431a      	orrs	r2, r3
1004ca1a:	687b      	ldr	r3, [r7, #4]
1004ca1c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
1004ca1e:	697b      	ldr	r3, [r7, #20]
1004ca20:	08da      	lsrs	r2, r3, #3
1004ca22:	687b      	ldr	r3, [r7, #4]
1004ca24:	3208      	adds	r2, #8
1004ca26:	0092      	lsls	r2, r2, #2
1004ca28:	58d3      	ldr	r3, [r2, r3]
1004ca2a:	697a      	ldr	r2, [r7, #20]
1004ca2c:	2107      	movs	r1, #7
1004ca2e:	400a      	ands	r2, r1
1004ca30:	0092      	lsls	r2, r2, #2
1004ca32:	210f      	movs	r1, #15
1004ca34:	4091      	lsls	r1, r2
1004ca36:	000a      	movs	r2, r1
1004ca38:	43d1      	mvns	r1, r2
1004ca3a:	697a      	ldr	r2, [r7, #20]
1004ca3c:	08d2      	lsrs	r2, r2, #3
1004ca3e:	4019      	ands	r1, r3
1004ca40:	687b      	ldr	r3, [r7, #4]
1004ca42:	3208      	adds	r2, #8
1004ca44:	0092      	lsls	r2, r2, #2
1004ca46:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
1004ca48:	687b      	ldr	r3, [r7, #4]
1004ca4a:	68db      	ldr	r3, [r3, #12]
1004ca4c:	697a      	ldr	r2, [r7, #20]
1004ca4e:	0052      	lsls	r2, r2, #1
1004ca50:	2103      	movs	r1, #3
1004ca52:	4091      	lsls	r1, r2
1004ca54:	000a      	movs	r2, r1
1004ca56:	43d2      	mvns	r2, r2
1004ca58:	401a      	ands	r2, r3
1004ca5a:	687b      	ldr	r3, [r7, #4]
1004ca5c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
1004ca5e:	687b      	ldr	r3, [r7, #4]
1004ca60:	685b      	ldr	r3, [r3, #4]
1004ca62:	2101      	movs	r1, #1
1004ca64:	697a      	ldr	r2, [r7, #20]
1004ca66:	4091      	lsls	r1, r2
1004ca68:	000a      	movs	r2, r1
1004ca6a:	43d2      	mvns	r2, r2
1004ca6c:	401a      	ands	r2, r3
1004ca6e:	687b      	ldr	r3, [r7, #4]
1004ca70:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
1004ca72:	687b      	ldr	r3, [r7, #4]
1004ca74:	689b      	ldr	r3, [r3, #8]
1004ca76:	697a      	ldr	r2, [r7, #20]
1004ca78:	0052      	lsls	r2, r2, #1
1004ca7a:	2103      	movs	r1, #3
1004ca7c:	4091      	lsls	r1, r2
1004ca7e:	000a      	movs	r2, r1
1004ca80:	43d2      	mvns	r2, r2
1004ca82:	401a      	ands	r2, r3
1004ca84:	687b      	ldr	r3, [r7, #4]
1004ca86:	609a      	str	r2, [r3, #8]
    }

    position++;
1004ca88:	697b      	ldr	r3, [r7, #20]
1004ca8a:	3301      	adds	r3, #1
1004ca8c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
1004ca8e:	683a      	ldr	r2, [r7, #0]
1004ca90:	697b      	ldr	r3, [r7, #20]
1004ca92:	40da      	lsrs	r2, r3
1004ca94:	1e13      	subs	r3, r2, #0
1004ca96:	d000      	beq.n	1004ca9a <HAL_GPIO_DeInit+0x1bc>
1004ca98:	e729      	b.n	1004c8ee <HAL_GPIO_DeInit+0x10>
  }
}
1004ca9a:	46c0      	nop			@ (mov r8, r8)
1004ca9c:	46c0      	nop			@ (mov r8, r8)
1004ca9e:	46bd      	mov	sp, r7
1004caa0:	b006      	add	sp, #24
1004caa2:	bd80      	pop	{r7, pc}

1004caa4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
1004caa4:	b580      	push	{r7, lr}
1004caa6:	b084      	sub	sp, #16
1004caa8:	af00      	add	r7, sp, #0
1004caaa:	6078      	str	r0, [r7, #4]
1004caac:	000a      	movs	r2, r1
1004caae:	1cbb      	adds	r3, r7, #2
1004cab0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
1004cab2:	687b      	ldr	r3, [r7, #4]
1004cab4:	691b      	ldr	r3, [r3, #16]
1004cab6:	1cba      	adds	r2, r7, #2
1004cab8:	8812      	ldrh	r2, [r2, #0]
1004caba:	4013      	ands	r3, r2
1004cabc:	d004      	beq.n	1004cac8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
1004cabe:	230f      	movs	r3, #15
1004cac0:	18fb      	adds	r3, r7, r3
1004cac2:	2201      	movs	r2, #1
1004cac4:	701a      	strb	r2, [r3, #0]
1004cac6:	e003      	b.n	1004cad0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
1004cac8:	230f      	movs	r3, #15
1004caca:	18fb      	adds	r3, r7, r3
1004cacc:	2200      	movs	r2, #0
1004cace:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
1004cad0:	230f      	movs	r3, #15
1004cad2:	18fb      	adds	r3, r7, r3
1004cad4:	781b      	ldrb	r3, [r3, #0]
}
1004cad6:	0018      	movs	r0, r3
1004cad8:	46bd      	mov	sp, r7
1004cada:	b004      	add	sp, #16
1004cadc:	bd80      	pop	{r7, pc}

1004cade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
1004cade:	b580      	push	{r7, lr}
1004cae0:	b082      	sub	sp, #8
1004cae2:	af00      	add	r7, sp, #0
1004cae4:	6078      	str	r0, [r7, #4]
1004cae6:	0008      	movs	r0, r1
1004cae8:	0011      	movs	r1, r2
1004caea:	1cbb      	adds	r3, r7, #2
1004caec:	1c02      	adds	r2, r0, #0
1004caee:	801a      	strh	r2, [r3, #0]
1004caf0:	1c7b      	adds	r3, r7, #1
1004caf2:	1c0a      	adds	r2, r1, #0
1004caf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
1004caf6:	1c7b      	adds	r3, r7, #1
1004caf8:	781b      	ldrb	r3, [r3, #0]
1004cafa:	2b00      	cmp	r3, #0
1004cafc:	d004      	beq.n	1004cb08 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
1004cafe:	1cbb      	adds	r3, r7, #2
1004cb00:	881a      	ldrh	r2, [r3, #0]
1004cb02:	687b      	ldr	r3, [r7, #4]
1004cb04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
1004cb06:	e003      	b.n	1004cb10 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
1004cb08:	1cbb      	adds	r3, r7, #2
1004cb0a:	881a      	ldrh	r2, [r3, #0]
1004cb0c:	687b      	ldr	r3, [r7, #4]
1004cb0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004cb10:	46c0      	nop			@ (mov r8, r8)
1004cb12:	46bd      	mov	sp, r7
1004cb14:	b002      	add	sp, #8
1004cb16:	bd80      	pop	{r7, pc}

1004cb18 <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
1004cb18:	b580      	push	{r7, lr}
1004cb1a:	b082      	sub	sp, #8
1004cb1c:	af00      	add	r7, sp, #0
1004cb1e:	6078      	str	r0, [r7, #4]
1004cb20:	000a      	movs	r2, r1
1004cb22:	1cbb      	adds	r3, r7, #2
1004cb24:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
1004cb26:	687a      	ldr	r2, [r7, #4]
1004cb28:	2390      	movs	r3, #144	@ 0x90
1004cb2a:	05db      	lsls	r3, r3, #23
1004cb2c:	429a      	cmp	r2, r3
1004cb2e:	d109      	bne.n	1004cb44 <HAL_GPIO_EXTI_IRQHandler+0x2c>
1004cb30:	2380      	movs	r3, #128	@ 0x80
1004cb32:	05db      	lsls	r3, r3, #23
1004cb34:	69db      	ldr	r3, [r3, #28]
1004cb36:	1cba      	adds	r2, r7, #2
1004cb38:	8812      	ldrh	r2, [r2, #0]
1004cb3a:	4013      	ands	r3, r2
1004cb3c:	1e5a      	subs	r2, r3, #1
1004cb3e:	4193      	sbcs	r3, r2
1004cb40:	b2db      	uxtb	r3, r3
1004cb42:	e009      	b.n	1004cb58 <HAL_GPIO_EXTI_IRQHandler+0x40>
1004cb44:	2380      	movs	r3, #128	@ 0x80
1004cb46:	05db      	lsls	r3, r3, #23
1004cb48:	69db      	ldr	r3, [r3, #28]
1004cb4a:	1cba      	adds	r2, r7, #2
1004cb4c:	8812      	ldrh	r2, [r2, #0]
1004cb4e:	0412      	lsls	r2, r2, #16
1004cb50:	4013      	ands	r3, r2
1004cb52:	1e5a      	subs	r2, r3, #1
1004cb54:	4193      	sbcs	r3, r2
1004cb56:	b2db      	uxtb	r3, r3
1004cb58:	2b00      	cmp	r3, #0
1004cb5a:	d017      	beq.n	1004cb8c <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
1004cb5c:	687a      	ldr	r2, [r7, #4]
1004cb5e:	2390      	movs	r3, #144	@ 0x90
1004cb60:	05db      	lsls	r3, r3, #23
1004cb62:	429a      	cmp	r2, r3
1004cb64:	d105      	bne.n	1004cb72 <HAL_GPIO_EXTI_IRQHandler+0x5a>
1004cb66:	2380      	movs	r3, #128	@ 0x80
1004cb68:	05db      	lsls	r3, r3, #23
1004cb6a:	1cba      	adds	r2, r7, #2
1004cb6c:	8812      	ldrh	r2, [r2, #0]
1004cb6e:	61da      	str	r2, [r3, #28]
1004cb70:	e005      	b.n	1004cb7e <HAL_GPIO_EXTI_IRQHandler+0x66>
1004cb72:	1cbb      	adds	r3, r7, #2
1004cb74:	881a      	ldrh	r2, [r3, #0]
1004cb76:	2380      	movs	r3, #128	@ 0x80
1004cb78:	05db      	lsls	r3, r3, #23
1004cb7a:	0412      	lsls	r2, r2, #16
1004cb7c:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
1004cb7e:	1cbb      	adds	r3, r7, #2
1004cb80:	881a      	ldrh	r2, [r3, #0]
1004cb82:	687b      	ldr	r3, [r7, #4]
1004cb84:	0011      	movs	r1, r2
1004cb86:	0018      	movs	r0, r3
1004cb88:	f7f6 fa7d 	bl	10043086 <HAL_GPIO_EXTI_Callback>
  }
}
1004cb8c:	46c0      	nop			@ (mov r8, r8)
1004cb8e:	46bd      	mov	sp, r7
1004cb90:	b002      	add	sp, #8
1004cb92:	bd80      	pop	{r7, pc}

1004cb94 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
1004cb94:	b580      	push	{r7, lr}
1004cb96:	b084      	sub	sp, #16
1004cb98:	af00      	add	r7, sp, #0
1004cb9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
1004cb9c:	230f      	movs	r3, #15
1004cb9e:	18fb      	adds	r3, r7, r3
1004cba0:	2200      	movs	r2, #0
1004cba2:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
1004cba4:	687b      	ldr	r3, [r7, #4]
1004cba6:	2b00      	cmp	r3, #0
1004cba8:	d045      	beq.n	1004cc36 <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
1004cbaa:	687b      	ldr	r3, [r7, #4]
1004cbac:	791b      	ldrb	r3, [r3, #4]
1004cbae:	b2db      	uxtb	r3, r3
1004cbb0:	2b00      	cmp	r3, #0
1004cbb2:	d103      	bne.n	1004cbbc <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
1004cbb4:	687b      	ldr	r3, [r7, #4]
1004cbb6:	0018      	movs	r0, r3
1004cbb8:	f7f6 fd82 	bl	100436c0 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
1004cbbc:	f7ff f9fc 	bl	1004bfb8 <HAL_GetTick>
1004cbc0:	0003      	movs	r3, r0
1004cbc2:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
1004cbc4:	687b      	ldr	r3, [r7, #4]
1004cbc6:	2202      	movs	r2, #2
1004cbc8:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004cbca:	e011      	b.n	1004cbf0 <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
1004cbcc:	687b      	ldr	r3, [r7, #4]
1004cbce:	681b      	ldr	r3, [r3, #0]
1004cbd0:	2201      	movs	r2, #1
1004cbd2:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
1004cbd4:	f7ff f9f0 	bl	1004bfb8 <HAL_GetTick>
1004cbd8:	0002      	movs	r2, r0
1004cbda:	68bb      	ldr	r3, [r7, #8]
1004cbdc:	1ad2      	subs	r2, r2, r3
1004cbde:	23fa      	movs	r3, #250	@ 0xfa
1004cbe0:	009b      	lsls	r3, r3, #2
1004cbe2:	429a      	cmp	r2, r3
1004cbe4:	d904      	bls.n	1004cbf0 <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
1004cbe6:	230f      	movs	r3, #15
1004cbe8:	18fb      	adds	r3, r7, r3
1004cbea:	2203      	movs	r2, #3
1004cbec:	701a      	strb	r2, [r3, #0]
        break;
1004cbee:	e006      	b.n	1004cbfe <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004cbf0:	687b      	ldr	r3, [r7, #4]
1004cbf2:	681b      	ldr	r3, [r3, #0]
1004cbf4:	681b      	ldr	r3, [r3, #0]
1004cbf6:	2201      	movs	r2, #1
1004cbf8:	4013      	ands	r3, r2
1004cbfa:	2b01      	cmp	r3, #1
1004cbfc:	d1e6      	bne.n	1004cbcc <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
1004cbfe:	230f      	movs	r3, #15
1004cc00:	18fb      	adds	r3, r7, r3
1004cc02:	781b      	ldrb	r3, [r3, #0]
1004cc04:	2b00      	cmp	r3, #0
1004cc06:	d10f      	bne.n	1004cc28 <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
1004cc08:	687b      	ldr	r3, [r7, #4]
1004cc0a:	681b      	ldr	r3, [r3, #0]
1004cc0c:	689a      	ldr	r2, [r3, #8]
1004cc0e:	687b      	ldr	r3, [r7, #4]
1004cc10:	681b      	ldr	r3, [r3, #0]
1004cc12:	21d0      	movs	r1, #208	@ 0xd0
1004cc14:	0349      	lsls	r1, r1, #13
1004cc16:	430a      	orrs	r2, r1
1004cc18:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
1004cc1a:	687b      	ldr	r3, [r7, #4]
1004cc1c:	2200      	movs	r2, #0
1004cc1e:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
1004cc20:	687b      	ldr	r3, [r7, #4]
1004cc22:	2201      	movs	r2, #1
1004cc24:	711a      	strb	r2, [r3, #4]
1004cc26:	e00a      	b.n	1004cc3e <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
1004cc28:	687b      	ldr	r3, [r7, #4]
1004cc2a:	2204      	movs	r2, #4
1004cc2c:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
1004cc2e:	687b      	ldr	r3, [r7, #4]
1004cc30:	2203      	movs	r2, #3
1004cc32:	711a      	strb	r2, [r3, #4]
1004cc34:	e003      	b.n	1004cc3e <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
1004cc36:	230f      	movs	r3, #15
1004cc38:	18fb      	adds	r3, r7, r3
1004cc3a:	2201      	movs	r2, #1
1004cc3c:	701a      	strb	r2, [r3, #0]
  }

  return err;
1004cc3e:	230f      	movs	r3, #15
1004cc40:	18fb      	adds	r3, r7, r3
1004cc42:	781b      	ldrb	r3, [r3, #0]
}
1004cc44:	0018      	movs	r0, r3
1004cc46:	46bd      	mov	sp, r7
1004cc48:	b004      	add	sp, #16
1004cc4a:	bd80      	pop	{r7, pc}

1004cc4c <HAL_PKA_IRQHandler>:
  * @brief  This function handles PKA event interrupt request.
  * @param  hpka PKA handle
  * @retval None
  */
void HAL_PKA_IRQHandler(PKA_HandleTypeDef *hpka)
{
1004cc4c:	b580      	push	{r7, lr}
1004cc4e:	b086      	sub	sp, #24
1004cc50:	af00      	add	r7, sp, #0
1004cc52:	6078      	str	r0, [r7, #4]
#if defined (STM32WB06) || defined(STM32WB07)
  uint32_t itsource = READ_REG(hpka->Instance->IEN);
  uint32_t flag  =    READ_REG(hpka->Instance->ISR);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t mode = PKA_GetMode(hpka);
1004cc54:	687b      	ldr	r3, [r7, #4]
1004cc56:	0018      	movs	r0, r3
1004cc58:	f000 f86a 	bl	1004cd30 <PKA_GetMode>
1004cc5c:	0003      	movs	r3, r0
1004cc5e:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hpka->Instance->CR);
1004cc60:	687b      	ldr	r3, [r7, #4]
1004cc62:	681b      	ldr	r3, [r3, #0]
1004cc64:	681b      	ldr	r3, [r3, #0]
1004cc66:	613b      	str	r3, [r7, #16]
  uint32_t flag  =   READ_REG(hpka->Instance->SR);
1004cc68:	687b      	ldr	r3, [r7, #4]
1004cc6a:	681b      	ldr	r3, [r3, #0]
1004cc6c:	685b      	ldr	r3, [r3, #4]
1004cc6e:	60fb      	str	r3, [r7, #12]
#endif /* STM32WB05 || STM32WB09 */

  /* Address error interrupt occurred */
  if (((itsource & PKA_IT_ADDRERR) == PKA_IT_ADDRERR) && ((flag & PKA_FLAG_ADDRERR) == PKA_FLAG_ADDRERR))
1004cc70:	693a      	ldr	r2, [r7, #16]
1004cc72:	2380      	movs	r3, #128	@ 0x80
1004cc74:	035b      	lsls	r3, r3, #13
1004cc76:	4013      	ands	r3, r2
1004cc78:	d00f      	beq.n	1004cc9a <HAL_PKA_IRQHandler+0x4e>
1004cc7a:	68fa      	ldr	r2, [r7, #12]
1004cc7c:	2380      	movs	r3, #128	@ 0x80
1004cc7e:	035b      	lsls	r3, r3, #13
1004cc80:	4013      	ands	r3, r2
1004cc82:	d00a      	beq.n	1004cc9a <HAL_PKA_IRQHandler+0x4e>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_ADDRERR;
1004cc84:	687b      	ldr	r3, [r7, #4]
1004cc86:	689b      	ldr	r3, [r3, #8]
1004cc88:	2201      	movs	r2, #1
1004cc8a:	431a      	orrs	r2, r3
1004cc8c:	687b      	ldr	r3, [r7, #4]
1004cc8e:	609a      	str	r2, [r3, #8]

    /* Clear ADDRERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_ADDRERR);
1004cc90:	687b      	ldr	r3, [r7, #4]
1004cc92:	681b      	ldr	r3, [r3, #0]
1004cc94:	2280      	movs	r2, #128	@ 0x80
1004cc96:	0352      	lsls	r2, r2, #13
1004cc98:	609a      	str	r2, [r3, #8]
  }

  /* RAM access error interrupt occurred */
  if (((itsource & PKA_IT_RAMERR) == PKA_IT_RAMERR) && ((flag & PKA_FLAG_RAMERR) == PKA_FLAG_RAMERR))
1004cc9a:	693a      	ldr	r2, [r7, #16]
1004cc9c:	2380      	movs	r3, #128	@ 0x80
1004cc9e:	031b      	lsls	r3, r3, #12
1004cca0:	4013      	ands	r3, r2
1004cca2:	d00f      	beq.n	1004ccc4 <HAL_PKA_IRQHandler+0x78>
1004cca4:	68fa      	ldr	r2, [r7, #12]
1004cca6:	2380      	movs	r3, #128	@ 0x80
1004cca8:	031b      	lsls	r3, r3, #12
1004ccaa:	4013      	ands	r3, r2
1004ccac:	d00a      	beq.n	1004ccc4 <HAL_PKA_IRQHandler+0x78>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_RAMERR;
1004ccae:	687b      	ldr	r3, [r7, #4]
1004ccb0:	689b      	ldr	r3, [r3, #8]
1004ccb2:	2202      	movs	r2, #2
1004ccb4:	431a      	orrs	r2, r3
1004ccb6:	687b      	ldr	r3, [r7, #4]
1004ccb8:	609a      	str	r2, [r3, #8]

    /* Clear RAMERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_RAMERR);
1004ccba:	687b      	ldr	r3, [r7, #4]
1004ccbc:	681b      	ldr	r3, [r3, #0]
1004ccbe:	2280      	movs	r2, #128	@ 0x80
1004ccc0:	0312      	lsls	r2, r2, #12
1004ccc2:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB05 */
#if defined (STM32WB09)
  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
1004ccc4:	697b      	ldr	r3, [r7, #20]
1004ccc6:	2b24      	cmp	r3, #36	@ 0x24
1004ccc8:	d10d      	bne.n	1004cce6 <HAL_PKA_IRQHandler+0x9a>
  {
    /* If error output result is different from 0xD60D, ecdsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != 0xD60DUL)
1004ccca:	687b      	ldr	r3, [r7, #4]
1004cccc:	681a      	ldr	r2, [r3, #0]
1004ccce:	23f8      	movs	r3, #248	@ 0xf8
1004ccd0:	011b      	lsls	r3, r3, #4
1004ccd2:	58d3      	ldr	r3, [r2, r3]
1004ccd4:	4a15      	ldr	r2, [pc, #84]	@ (1004cd2c <HAL_PKA_IRQHandler+0xe0>)
1004ccd6:	4293      	cmp	r3, r2
1004ccd8:	d005      	beq.n	1004cce6 <HAL_PKA_IRQHandler+0x9a>
    {
      hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
1004ccda:	687b      	ldr	r3, [r7, #4]
1004ccdc:	689b      	ldr	r3, [r3, #8]
1004ccde:	2208      	movs	r2, #8
1004cce0:	431a      	orrs	r2, r3
1004cce2:	687b      	ldr	r3, [r7, #4]
1004cce4:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB09 */

  /* Trigger the error callback if an error is present */
  if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
1004cce6:	687b      	ldr	r3, [r7, #4]
1004cce8:	689b      	ldr	r3, [r3, #8]
1004ccea:	2b00      	cmp	r3, #0
1004ccec:	d003      	beq.n	1004ccf6 <HAL_PKA_IRQHandler+0xaa>
  {
#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->ErrorCallback(hpka);
#else
    HAL_PKA_ErrorCallback(hpka);
1004ccee:	687b      	ldr	r3, [r7, #4]
1004ccf0:	0018      	movs	r0, r3
1004ccf2:	f7fb fbdb 	bl	100484ac <HAL_PKA_ErrorCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }

  /* End Of Operation interrupt occurred */
  if (((itsource & PKA_IT_PROCEND) == PKA_IT_PROCEND) && ((flag & PKA_FLAG_PROCEND) == PKA_FLAG_PROCEND))
1004ccf6:	693a      	ldr	r2, [r7, #16]
1004ccf8:	2380      	movs	r3, #128	@ 0x80
1004ccfa:	029b      	lsls	r3, r3, #10
1004ccfc:	4013      	ands	r3, r2
1004ccfe:	d010      	beq.n	1004cd22 <HAL_PKA_IRQHandler+0xd6>
1004cd00:	68fa      	ldr	r2, [r7, #12]
1004cd02:	2380      	movs	r3, #128	@ 0x80
1004cd04:	029b      	lsls	r3, r3, #10
1004cd06:	4013      	ands	r3, r2
1004cd08:	d00b      	beq.n	1004cd22 <HAL_PKA_IRQHandler+0xd6>
  {
    /* Clear PROCEND flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_PROCEND);
1004cd0a:	687b      	ldr	r3, [r7, #4]
1004cd0c:	681b      	ldr	r3, [r3, #0]
1004cd0e:	2280      	movs	r2, #128	@ 0x80
1004cd10:	0292      	lsls	r2, r2, #10
1004cd12:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
1004cd14:	687b      	ldr	r3, [r7, #4]
1004cd16:	2201      	movs	r2, #1
1004cd18:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->OperationCpltCallback(hpka);
#else
    HAL_PKA_OperationCpltCallback(hpka);
1004cd1a:	687b      	ldr	r3, [r7, #4]
1004cd1c:	0018      	movs	r0, r3
1004cd1e:	f7fb fbb9 	bl	10048494 <HAL_PKA_OperationCpltCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }
}
1004cd22:	46c0      	nop			@ (mov r8, r8)
1004cd24:	46bd      	mov	sp, r7
1004cd26:	b006      	add	sp, #24
1004cd28:	bd80      	pop	{r7, pc}
1004cd2a:	46c0      	nop			@ (mov r8, r8)
1004cd2c:	0000d60d 	.word	0x0000d60d

1004cd30 <PKA_GetMode>:
  * @brief  Get PKA operating mode.
  * @param  hpka PKA handle
  * @retval Return the current mode
  */
uint32_t PKA_GetMode(const PKA_HandleTypeDef *hpka)
{
1004cd30:	b580      	push	{r7, lr}
1004cd32:	b082      	sub	sp, #8
1004cd34:	af00      	add	r7, sp, #0
1004cd36:	6078      	str	r0, [r7, #4]
  /* return the shifted PKA_CR_MODE value */
  return (uint32_t)(READ_BIT(hpka->Instance->CR, PKA_CR_MODE) >> PKA_CR_MODE_Pos);
1004cd38:	687b      	ldr	r3, [r7, #4]
1004cd3a:	681b      	ldr	r3, [r3, #0]
1004cd3c:	681b      	ldr	r3, [r3, #0]
1004cd3e:	0a1b      	lsrs	r3, r3, #8
1004cd40:	223f      	movs	r2, #63	@ 0x3f
1004cd42:	4013      	ands	r3, r2
}
1004cd44:	0018      	movs	r0, r3
1004cd46:	46bd      	mov	sp, r7
1004cd48:	b002      	add	sp, #8
1004cd4a:	bd80      	pop	{r7, pc}

1004cd4c <LL_PWR_EnableGPIORET>:
{
1004cd4c:	b580      	push	{r7, lr}
1004cd4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_GPIORET);
1004cd50:	4b04      	ldr	r3, [pc, #16]	@ (1004cd64 <LL_PWR_EnableGPIORET+0x18>)
1004cd52:	685a      	ldr	r2, [r3, #4]
1004cd54:	4b03      	ldr	r3, [pc, #12]	@ (1004cd64 <LL_PWR_EnableGPIORET+0x18>)
1004cd56:	2180      	movs	r1, #128	@ 0x80
1004cd58:	0049      	lsls	r1, r1, #1
1004cd5a:	430a      	orrs	r2, r1
1004cd5c:	605a      	str	r2, [r3, #4]
}
1004cd5e:	46c0      	nop			@ (mov r8, r8)
1004cd60:	46bd      	mov	sp, r7
1004cd62:	bd80      	pop	{r7, pc}
1004cd64:	48500000 	.word	0x48500000

1004cd68 <LL_PWR_GetWakeupSource>:
{
1004cd68:	b580      	push	{r7, lr}
1004cd6a:	b082      	sub	sp, #8
1004cd6c:	af00      	add	r7, sp, #0
  wakeup_source = READ_REG(PWR->SR1) & 0x0000FFFF;
1004cd6e:	4b07      	ldr	r3, [pc, #28]	@ (1004cd8c <LL_PWR_GetWakeupSource+0x24>)
1004cd70:	691b      	ldr	r3, [r3, #16]
1004cd72:	041b      	lsls	r3, r3, #16
1004cd74:	0c1b      	lsrs	r3, r3, #16
1004cd76:	607b      	str	r3, [r7, #4]
  return (uint32_t)(wakeup_source | (READ_REG(PWR->SR3) << 16));
1004cd78:	4b04      	ldr	r3, [pc, #16]	@ (1004cd8c <LL_PWR_GetWakeupSource+0x24>)
1004cd7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004cd7c:	041a      	lsls	r2, r3, #16
1004cd7e:	687b      	ldr	r3, [r7, #4]
1004cd80:	4313      	orrs	r3, r2
}
1004cd82:	0018      	movs	r0, r3
1004cd84:	46bd      	mov	sp, r7
1004cd86:	b002      	add	sp, #8
1004cd88:	bd80      	pop	{r7, pc}
1004cd8a:	46c0      	nop			@ (mov r8, r8)
1004cd8c:	48500000 	.word	0x48500000

1004cd90 <LL_PWR_ClearWakeupSource>:
{
1004cd90:	b580      	push	{r7, lr}
1004cd92:	b082      	sub	sp, #8
1004cd94:	af00      	add	r7, sp, #0
1004cd96:	6078      	str	r0, [r7, #4]
  WRITE_REG(PWR->SR1, (source & 0x0000FFFF));
1004cd98:	4b06      	ldr	r3, [pc, #24]	@ (1004cdb4 <LL_PWR_ClearWakeupSource+0x24>)
1004cd9a:	687a      	ldr	r2, [r7, #4]
1004cd9c:	0412      	lsls	r2, r2, #16
1004cd9e:	0c12      	lsrs	r2, r2, #16
1004cda0:	611a      	str	r2, [r3, #16]
  WRITE_REG(PWR->SR3, (source >> 16));
1004cda2:	4b04      	ldr	r3, [pc, #16]	@ (1004cdb4 <LL_PWR_ClearWakeupSource+0x24>)
1004cda4:	687a      	ldr	r2, [r7, #4]
1004cda6:	0c12      	lsrs	r2, r2, #16
1004cda8:	639a      	str	r2, [r3, #56]	@ 0x38
}
1004cdaa:	46c0      	nop			@ (mov r8, r8)
1004cdac:	46bd      	mov	sp, r7
1004cdae:	b002      	add	sp, #8
1004cdb0:	bd80      	pop	{r7, pc}
1004cdb2:	46c0      	nop			@ (mov r8, r8)
1004cdb4:	48500000 	.word	0x48500000

1004cdb8 <LL_RCC_HSI_IsReady>:
{
1004cdb8:	b580      	push	{r7, lr}
1004cdba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
1004cdbc:	4b07      	ldr	r3, [pc, #28]	@ (1004cddc <LL_RCC_HSI_IsReady+0x24>)
1004cdbe:	681a      	ldr	r2, [r3, #0]
1004cdc0:	2380      	movs	r3, #128	@ 0x80
1004cdc2:	00db      	lsls	r3, r3, #3
1004cdc4:	401a      	ands	r2, r3
1004cdc6:	2380      	movs	r3, #128	@ 0x80
1004cdc8:	00db      	lsls	r3, r3, #3
1004cdca:	429a      	cmp	r2, r3
1004cdcc:	d101      	bne.n	1004cdd2 <LL_RCC_HSI_IsReady+0x1a>
1004cdce:	2301      	movs	r3, #1
1004cdd0:	e000      	b.n	1004cdd4 <LL_RCC_HSI_IsReady+0x1c>
1004cdd2:	2300      	movs	r3, #0
}
1004cdd4:	0018      	movs	r0, r3
1004cdd6:	46bd      	mov	sp, r7
1004cdd8:	bd80      	pop	{r7, pc}
1004cdda:	46c0      	nop			@ (mov r8, r8)
1004cddc:	48400000 	.word	0x48400000

1004cde0 <LL_RCC_DIRECT_HSE_Disable>:
{
1004cde0:	b580      	push	{r7, lr}
1004cde2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004cde4:	4b09      	ldr	r3, [pc, #36]	@ (1004ce0c <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004cde6:	689a      	ldr	r2, [r3, #8]
1004cde8:	4b08      	ldr	r3, [pc, #32]	@ (1004ce0c <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004cdea:	2104      	movs	r1, #4
1004cdec:	438a      	bics	r2, r1
1004cdee:	609a      	str	r2, [r3, #8]
  while (LL_RCC_HSI_IsReady() == 0);
1004cdf0:	46c0      	nop			@ (mov r8, r8)
1004cdf2:	f7ff ffe1 	bl	1004cdb8 <LL_RCC_HSI_IsReady>
1004cdf6:	1e03      	subs	r3, r0, #0
1004cdf8:	d0fb      	beq.n	1004cdf2 <LL_RCC_DIRECT_HSE_Disable+0x12>
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004cdfa:	4b04      	ldr	r3, [pc, #16]	@ (1004ce0c <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004cdfc:	689a      	ldr	r2, [r3, #8]
1004cdfe:	4b03      	ldr	r3, [pc, #12]	@ (1004ce0c <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004ce00:	2102      	movs	r1, #2
1004ce02:	438a      	bics	r2, r1
1004ce04:	609a      	str	r2, [r3, #8]
}
1004ce06:	46c0      	nop			@ (mov r8, r8)
1004ce08:	46bd      	mov	sp, r7
1004ce0a:	bd80      	pop	{r7, pc}
1004ce0c:	48400000 	.word	0x48400000

1004ce10 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
1004ce10:	b580      	push	{r7, lr}
1004ce12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
1004ce14:	4b05      	ldr	r3, [pc, #20]	@ (1004ce2c <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004ce16:	689b      	ldr	r3, [r3, #8]
1004ce18:	2208      	movs	r2, #8
1004ce1a:	4013      	ands	r3, r2
1004ce1c:	2b08      	cmp	r3, #8
1004ce1e:	d101      	bne.n	1004ce24 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
1004ce20:	2301      	movs	r3, #1
1004ce22:	e000      	b.n	1004ce26 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
1004ce24:	2300      	movs	r3, #0
}
1004ce26:	0018      	movs	r0, r3
1004ce28:	46bd      	mov	sp, r7
1004ce2a:	bd80      	pop	{r7, pc}
1004ce2c:	48400000 	.word	0x48400000

1004ce30 <LL_RCC_LSE_Disable>:
{
1004ce30:	b580      	push	{r7, lr}
1004ce32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
1004ce34:	4b04      	ldr	r3, [pc, #16]	@ (1004ce48 <LL_RCC_LSE_Disable+0x18>)
1004ce36:	681a      	ldr	r2, [r3, #0]
1004ce38:	4b03      	ldr	r3, [pc, #12]	@ (1004ce48 <LL_RCC_LSE_Disable+0x18>)
1004ce3a:	2110      	movs	r1, #16
1004ce3c:	438a      	bics	r2, r1
1004ce3e:	601a      	str	r2, [r3, #0]
}
1004ce40:	46c0      	nop			@ (mov r8, r8)
1004ce42:	46bd      	mov	sp, r7
1004ce44:	bd80      	pop	{r7, pc}
1004ce46:	46c0      	nop			@ (mov r8, r8)
1004ce48:	48400000 	.word	0x48400000

1004ce4c <LL_RCC_LSE_IsReady>:
{
1004ce4c:	b580      	push	{r7, lr}
1004ce4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
1004ce50:	4b05      	ldr	r3, [pc, #20]	@ (1004ce68 <LL_RCC_LSE_IsReady+0x1c>)
1004ce52:	681b      	ldr	r3, [r3, #0]
1004ce54:	2220      	movs	r2, #32
1004ce56:	4013      	ands	r3, r2
1004ce58:	2b20      	cmp	r3, #32
1004ce5a:	d101      	bne.n	1004ce60 <LL_RCC_LSE_IsReady+0x14>
1004ce5c:	2301      	movs	r3, #1
1004ce5e:	e000      	b.n	1004ce62 <LL_RCC_LSE_IsReady+0x16>
1004ce60:	2300      	movs	r3, #0
}
1004ce62:	0018      	movs	r0, r3
1004ce64:	46bd      	mov	sp, r7
1004ce66:	bd80      	pop	{r7, pc}
1004ce68:	48400000 	.word	0x48400000

1004ce6c <LL_RCC_LSI_Disable>:
{
1004ce6c:	b580      	push	{r7, lr}
1004ce6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004ce70:	4b04      	ldr	r3, [pc, #16]	@ (1004ce84 <LL_RCC_LSI_Disable+0x18>)
1004ce72:	681a      	ldr	r2, [r3, #0]
1004ce74:	4b03      	ldr	r3, [pc, #12]	@ (1004ce84 <LL_RCC_LSI_Disable+0x18>)
1004ce76:	2104      	movs	r1, #4
1004ce78:	438a      	bics	r2, r1
1004ce7a:	601a      	str	r2, [r3, #0]
}
1004ce7c:	46c0      	nop			@ (mov r8, r8)
1004ce7e:	46bd      	mov	sp, r7
1004ce80:	bd80      	pop	{r7, pc}
1004ce82:	46c0      	nop			@ (mov r8, r8)
1004ce84:	48400000 	.word	0x48400000

1004ce88 <LL_RCC_LSI_IsReady>:
{
1004ce88:	b580      	push	{r7, lr}
1004ce8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
1004ce8c:	4b05      	ldr	r3, [pc, #20]	@ (1004cea4 <LL_RCC_LSI_IsReady+0x1c>)
1004ce8e:	681b      	ldr	r3, [r3, #0]
1004ce90:	2208      	movs	r2, #8
1004ce92:	4013      	ands	r3, r2
1004ce94:	2b08      	cmp	r3, #8
1004ce96:	d101      	bne.n	1004ce9c <LL_RCC_LSI_IsReady+0x14>
1004ce98:	2301      	movs	r3, #1
1004ce9a:	e000      	b.n	1004ce9e <LL_RCC_LSI_IsReady+0x16>
1004ce9c:	2300      	movs	r3, #0
}
1004ce9e:	0018      	movs	r0, r3
1004cea0:	46bd      	mov	sp, r7
1004cea2:	bd80      	pop	{r7, pc}
1004cea4:	48400000 	.word	0x48400000

1004cea8 <LL_APB2_GRP1_EnableClock>:
{
1004cea8:	b580      	push	{r7, lr}
1004ceaa:	b084      	sub	sp, #16
1004ceac:	af00      	add	r7, sp, #0
1004ceae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
1004ceb0:	4b07      	ldr	r3, [pc, #28]	@ (1004ced0 <LL_APB2_GRP1_EnableClock+0x28>)
1004ceb2:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004ceb4:	4b06      	ldr	r3, [pc, #24]	@ (1004ced0 <LL_APB2_GRP1_EnableClock+0x28>)
1004ceb6:	687a      	ldr	r2, [r7, #4]
1004ceb8:	430a      	orrs	r2, r1
1004ceba:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
1004cebc:	4b04      	ldr	r3, [pc, #16]	@ (1004ced0 <LL_APB2_GRP1_EnableClock+0x28>)
1004cebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004cec0:	687a      	ldr	r2, [r7, #4]
1004cec2:	4013      	ands	r3, r2
1004cec4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004cec6:	68fb      	ldr	r3, [r7, #12]
}
1004cec8:	46c0      	nop			@ (mov r8, r8)
1004ceca:	46bd      	mov	sp, r7
1004cecc:	b004      	add	sp, #16
1004cece:	bd80      	pop	{r7, pc}
1004ced0:	48400000 	.word	0x48400000

1004ced4 <LL_APB2_GRP1_IsEnabledClock>:
{
1004ced4:	b580      	push	{r7, lr}
1004ced6:	b082      	sub	sp, #8
1004ced8:	af00      	add	r7, sp, #0
1004ceda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004cedc:	4b06      	ldr	r3, [pc, #24]	@ (1004cef8 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004cede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004cee0:	687a      	ldr	r2, [r7, #4]
1004cee2:	4013      	ands	r3, r2
1004cee4:	687a      	ldr	r2, [r7, #4]
1004cee6:	429a      	cmp	r2, r3
1004cee8:	d101      	bne.n	1004ceee <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004ceea:	2301      	movs	r3, #1
1004ceec:	e000      	b.n	1004cef0 <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004ceee:	2300      	movs	r3, #0
}
1004cef0:	0018      	movs	r0, r3
1004cef2:	46bd      	mov	sp, r7
1004cef4:	b002      	add	sp, #8
1004cef6:	bd80      	pop	{r7, pc}
1004cef8:	48400000 	.word	0x48400000

1004cefc <LL_APB2_GRP1_DisableClock>:
{
1004cefc:	b580      	push	{r7, lr}
1004cefe:	b082      	sub	sp, #8
1004cf00:	af00      	add	r7, sp, #0
1004cf02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
1004cf04:	4b05      	ldr	r3, [pc, #20]	@ (1004cf1c <LL_APB2_GRP1_DisableClock+0x20>)
1004cf06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
1004cf08:	687b      	ldr	r3, [r7, #4]
1004cf0a:	43d9      	mvns	r1, r3
1004cf0c:	4b03      	ldr	r3, [pc, #12]	@ (1004cf1c <LL_APB2_GRP1_DisableClock+0x20>)
1004cf0e:	400a      	ands	r2, r1
1004cf10:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004cf12:	46c0      	nop			@ (mov r8, r8)
1004cf14:	46bd      	mov	sp, r7
1004cf16:	b002      	add	sp, #8
1004cf18:	bd80      	pop	{r7, pc}
1004cf1a:	46c0      	nop			@ (mov r8, r8)
1004cf1c:	48400000 	.word	0x48400000

1004cf20 <HAL_PWR_EnableWakeUpPin>:
  *        @arg @ref PWR_WUP_FALLEDG
  *
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPin, uint32_t WakeUpPolarity)
{
1004cf20:	b580      	push	{r7, lr}
1004cf22:	b082      	sub	sp, #8
1004cf24:	af00      	add	r7, sp, #0
1004cf26:	6078      	str	r0, [r7, #4]
1004cf28:	6039      	str	r1, [r7, #0]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));
  assert_param(IS_PWR_WAKEUP_PIN_POLARITY(WakeUpPolarity));

  /* Specifies the wake up line polarity for the event detection (rising or falling edge) */
  if (WakeUpPolarity == PWR_WUP_FALLEDG)
1004cf2a:	683b      	ldr	r3, [r7, #0]
1004cf2c:	2b01      	cmp	r3, #1
1004cf2e:	d10f      	bne.n	1004cf50 <HAL_PWR_EnableWakeUpPin+0x30>
  {
    SET_BIT(PWR->CR4, (WakeUpPin & 0x0000FFFF));
1004cf30:	4b19      	ldr	r3, [pc, #100]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf32:	68d9      	ldr	r1, [r3, #12]
1004cf34:	687b      	ldr	r3, [r7, #4]
1004cf36:	041b      	lsls	r3, r3, #16
1004cf38:	0c1a      	lsrs	r2, r3, #16
1004cf3a:	4b17      	ldr	r3, [pc, #92]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf3c:	430a      	orrs	r2, r1
1004cf3e:	60da      	str	r2, [r3, #12]
    SET_BIT(PWR->CR7, (WakeUpPin >> 16));
1004cf40:	4b15      	ldr	r3, [pc, #84]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
1004cf44:	687b      	ldr	r3, [r7, #4]
1004cf46:	0c1a      	lsrs	r2, r3, #16
1004cf48:	4b13      	ldr	r3, [pc, #76]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf4a:	430a      	orrs	r2, r1
1004cf4c:	635a      	str	r2, [r3, #52]	@ 0x34
1004cf4e:	e010      	b.n	1004cf72 <HAL_PWR_EnableWakeUpPin+0x52>
  }
  else
  {
    CLEAR_BIT(PWR->CR4, (WakeUpPin & 0x0000FFFF));
1004cf50:	4b11      	ldr	r3, [pc, #68]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf52:	68da      	ldr	r2, [r3, #12]
1004cf54:	687b      	ldr	r3, [r7, #4]
1004cf56:	041b      	lsls	r3, r3, #16
1004cf58:	0c1b      	lsrs	r3, r3, #16
1004cf5a:	43d9      	mvns	r1, r3
1004cf5c:	4b0e      	ldr	r3, [pc, #56]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf5e:	400a      	ands	r2, r1
1004cf60:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(PWR->CR7, (WakeUpPin >> 16));
1004cf62:	4b0d      	ldr	r3, [pc, #52]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004cf66:	687b      	ldr	r3, [r7, #4]
1004cf68:	0c1b      	lsrs	r3, r3, #16
1004cf6a:	43d9      	mvns	r1, r3
1004cf6c:	4b0a      	ldr	r3, [pc, #40]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf6e:	400a      	ands	r2, r1
1004cf70:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  /* Enable wake-up line */
  SET_BIT(PWR->CR3, (WakeUpPin & 0x0000FFFF));
1004cf72:	4b09      	ldr	r3, [pc, #36]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf74:	6899      	ldr	r1, [r3, #8]
1004cf76:	687b      	ldr	r3, [r7, #4]
1004cf78:	041b      	lsls	r3, r3, #16
1004cf7a:	0c1a      	lsrs	r2, r3, #16
1004cf7c:	4b06      	ldr	r3, [pc, #24]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf7e:	430a      	orrs	r2, r1
1004cf80:	609a      	str	r2, [r3, #8]
  SET_BIT(PWR->CR6, (WakeUpPin >> 16));
1004cf82:	4b05      	ldr	r3, [pc, #20]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
1004cf86:	687b      	ldr	r3, [r7, #4]
1004cf88:	0c1a      	lsrs	r2, r3, #16
1004cf8a:	4b03      	ldr	r3, [pc, #12]	@ (1004cf98 <HAL_PWR_EnableWakeUpPin+0x78>)
1004cf8c:	430a      	orrs	r2, r1
1004cf8e:	631a      	str	r2, [r3, #48]	@ 0x30

}
1004cf90:	46c0      	nop			@ (mov r8, r8)
1004cf92:	46bd      	mov	sp, r7
1004cf94:	b002      	add	sp, #8
1004cf96:	bd80      	pop	{r7, pc}
1004cf98:	48500000 	.word	0x48500000

1004cf9c <HAL_PWR_GetClearWakeupSource>:
  * @brief  Get and Clear Wake-up source.
  * @retval WakeUpPin : This parameter can be a combination of
  *                     @ref PWREx_WakeUp_Pins define group
  */
uint32_t HAL_PWR_GetClearWakeupSource(void)
{
1004cf9c:	b580      	push	{r7, lr}
1004cf9e:	b082      	sub	sp, #8
1004cfa0:	af00      	add	r7, sp, #0
  uint32_t wakeuppin;

  /* Get all wake-up pins */
  wakeuppin = LL_PWR_GetWakeupSource();
1004cfa2:	f7ff fee1 	bl	1004cd68 <LL_PWR_GetWakeupSource>
1004cfa6:	0003      	movs	r3, r0
1004cfa8:	607b      	str	r3, [r7, #4]

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(wakeuppin);
1004cfaa:	687b      	ldr	r3, [r7, #4]
1004cfac:	0018      	movs	r0, r3
1004cfae:	f7ff feef 	bl	1004cd90 <LL_PWR_ClearWakeupSource>

  return wakeuppin;
1004cfb2:	687b      	ldr	r3, [r7, #4]
}
1004cfb4:	0018      	movs	r0, r3
1004cfb6:	46bd      	mov	sp, r7
1004cfb8:	b002      	add	sp, #8
1004cfba:	bd80      	pop	{r7, pc}

1004cfbc <HAL_PWR_EnterSLEEPMode>:
  *         as NVIC and SysTick can run and wake up the CPU when an interrupt
  *         or an event occurs.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode(void)
{
1004cfbc:	b580      	push	{r7, lr}
1004cfbe:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
1004cfc0:	4b04      	ldr	r3, [pc, #16]	@ (1004cfd4 <HAL_PWR_EnterSLEEPMode+0x18>)
1004cfc2:	691a      	ldr	r2, [r3, #16]
1004cfc4:	4b03      	ldr	r3, [pc, #12]	@ (1004cfd4 <HAL_PWR_EnterSLEEPMode+0x18>)
1004cfc6:	2104      	movs	r1, #4
1004cfc8:	438a      	bics	r2, r1
1004cfca:	611a      	str	r2, [r3, #16]

  /* Wait For Interrupt Request */
  __WFI();
1004cfcc:	bf30      	wfi

}
1004cfce:	46c0      	nop			@ (mov r8, r8)
1004cfd0:	46bd      	mov	sp, r7
1004cfd2:	bd80      	pop	{r7, pc}
1004cfd4:	e000ed00 	.word	0xe000ed00

1004cfd8 <HAL_PWR_ConfigDEEPSTOP>:
  * @param  sConfigDEEPSTOP : Pointer to a @ref PWR_DEEPSTOPTypeDef structure that
  *                           contains the DEEPSTOP configuration information.
  * @retval None.
  */
HAL_StatusTypeDef HAL_PWR_ConfigDEEPSTOP(PWR_DEEPSTOPTypeDef *sConfigDEEPSTOP)
{
1004cfd8:	b580      	push	{r7, lr}
1004cfda:	b084      	sub	sp, #16
1004cfdc:	af00      	add	r7, sp, #0
1004cfde:	6078      	str	r0, [r7, #4]
  uint8_t radio_disabled = FALSE;
1004cfe0:	230f      	movs	r3, #15
1004cfe2:	18fb      	adds	r3, r7, r3
1004cfe4:	2200      	movs	r2, #0
1004cfe6:	701a      	strb	r2, [r3, #0]

  /* Disable the low speed clock if requested */
  if (sConfigDEEPSTOP->deepStopMode == PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF)
1004cfe8:	687b      	ldr	r3, [r7, #4]
1004cfea:	681b      	ldr	r3, [r3, #0]
1004cfec:	2b00      	cmp	r3, #0
1004cfee:	d103      	bne.n	1004cff8 <HAL_PWR_ConfigDEEPSTOP+0x20>
  {
    LL_RCC_LSE_Disable();
1004cff0:	f7ff ff1e 	bl	1004ce30 <LL_RCC_LSE_Disable>
    LL_RCC_LSI_Disable();
1004cff4:	f7ff ff3a 	bl	1004ce6c <LL_RCC_LSI_Disable>
  }

  /* If the radio IP is not used at all by the SoC (or not yet started), the
    following steps need to be done after any reset to allow DEEPSTOP mode */
  if (!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004cff8:	2001      	movs	r0, #1
1004cffa:	f7ff ff6b 	bl	1004ced4 <LL_APB2_GRP1_IsEnabledClock>
1004cffe:	1e03      	subs	r3, r0, #0
1004d000:	d106      	bne.n	1004d010 <HAL_PWR_ConfigDEEPSTOP+0x38>
  {
    radio_disabled = TRUE;
1004d002:	230f      	movs	r3, #15
1004d004:	18fb      	adds	r3, r7, r3
1004d006:	2201      	movs	r2, #1
1004d008:	701a      	strb	r2, [r3, #0]
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
1004d00a:	2001      	movs	r0, #1
1004d00c:	f7ff ff4c 	bl	1004cea8 <LL_APB2_GRP1_EnableClock>
  }
  if ((READ_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN) == 0) &&
1004d010:	4b1a      	ldr	r3, [pc, #104]	@ (1004d07c <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004d012:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004d014:	2380      	movs	r3, #128	@ 0x80
1004d016:	059b      	lsls	r3, r3, #22
1004d018:	4013      	ands	r3, r2
1004d01a:	d10c      	bne.n	1004d036 <HAL_PWR_ConfigDEEPSTOP+0x5e>
      (READ_BIT(WAKEUP->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN) == 0))
1004d01c:	4b17      	ldr	r3, [pc, #92]	@ (1004d07c <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004d01e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004d020:	2380      	movs	r3, #128	@ 0x80
1004d022:	05db      	lsls	r3, r3, #23
1004d024:	4013      	ands	r3, r2
  if ((READ_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN) == 0) &&
1004d026:	d106      	bne.n	1004d036 <HAL_PWR_ConfigDEEPSTOP+0x5e>
  {
    SET_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_FORCE_SLEEPING);
1004d028:	4b14      	ldr	r3, [pc, #80]	@ (1004d07c <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004d02a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004d02c:	4b13      	ldr	r3, [pc, #76]	@ (1004d07c <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004d02e:	2180      	movs	r1, #128	@ 0x80
1004d030:	0609      	lsls	r1, r1, #24
1004d032:	430a      	orrs	r2, r1
1004d034:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (radio_disabled)
1004d036:	230f      	movs	r3, #15
1004d038:	18fb      	adds	r3, r7, r3
1004d03a:	781b      	ldrb	r3, [r3, #0]
1004d03c:	2b00      	cmp	r3, #0
1004d03e:	d002      	beq.n	1004d046 <HAL_PWR_ConfigDEEPSTOP+0x6e>
  {
    LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_MRBLE);
1004d040:	2001      	movs	r0, #1
1004d042:	f7ff ff5b 	bl	1004cefc <LL_APB2_GRP1_DisableClock>
  }

#if defined(PWR_CR2_GPIORET)
  /* Enable the GPIO retention in DEEPSTOP configuration */
  LL_PWR_EnableGPIORET();
1004d046:	f7ff fe81 	bl	1004cd4c <LL_PWR_EnableGPIORET>
#endif /* PWR_CR2_GPIORET */

  /* Disable DIRECT HSE configuration to allow DEEPSTOP request */
  if (LL_RCC_DIRECT_HSE_IsEnabled())
1004d04a:	f7ff fee1 	bl	1004ce10 <LL_RCC_DIRECT_HSE_IsEnabled>
1004d04e:	1e03      	subs	r3, r0, #0
1004d050:	d001      	beq.n	1004d056 <HAL_PWR_ConfigDEEPSTOP+0x7e>
  {
    LL_RCC_DIRECT_HSE_Disable();
1004d052:	f7ff fec5 	bl	1004cde0 <LL_RCC_DIRECT_HSE_Disable>
  }

  /* Wait until  the low speed clock if OFF */
  if (sConfigDEEPSTOP->deepStopMode == PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF)
1004d056:	687b      	ldr	r3, [r7, #4]
1004d058:	681b      	ldr	r3, [r3, #0]
1004d05a:	2b00      	cmp	r3, #0
1004d05c:	d108      	bne.n	1004d070 <HAL_PWR_ConfigDEEPSTOP+0x98>
  {
    while (LL_RCC_LSE_IsReady() || LL_RCC_LSI_IsReady()) {}
1004d05e:	46c0      	nop			@ (mov r8, r8)
1004d060:	f7ff fef4 	bl	1004ce4c <LL_RCC_LSE_IsReady>
1004d064:	1e03      	subs	r3, r0, #0
1004d066:	d1fb      	bne.n	1004d060 <HAL_PWR_ConfigDEEPSTOP+0x88>
1004d068:	f7ff ff0e 	bl	1004ce88 <LL_RCC_LSI_IsReady>
1004d06c:	1e03      	subs	r3, r0, #0
1004d06e:	d1f7      	bne.n	1004d060 <HAL_PWR_ConfigDEEPSTOP+0x88>
  }

  return HAL_OK;
1004d070:	2300      	movs	r3, #0
}
1004d072:	0018      	movs	r0, r3
1004d074:	46bd      	mov	sp, r7
1004d076:	b004      	add	sp, #16
1004d078:	bd80      	pop	{r7, pc}
1004d07a:	46c0      	nop			@ (mov r8, r8)
1004d07c:	60001800 	.word	0x60001800

1004d080 <HAL_PWR_WKUP_IRQHandler>:
  * @brief This function handles the PWR WAKEUP interrupt request.
  * @note   This API should be called under the WKUP_IRQHandler().
  * @retval None.
  */
void HAL_PWR_WKUP_IRQHandler(void)
{
1004d080:	b580      	push	{r7, lr}
1004d082:	b082      	sub	sp, #8
1004d084:	af00      	add	r7, sp, #0
  uint32_t wakeuppin;

  wakeuppin = HAL_PWR_GetClearWakeupSource();
1004d086:	f7ff ff89 	bl	1004cf9c <HAL_PWR_GetClearWakeupSource>
1004d08a:	0003      	movs	r3, r0
1004d08c:	607b      	str	r3, [r7, #4]

  /* Wakeup pin line interrupt detected */
  if (wakeuppin != 0U)
1004d08e:	687b      	ldr	r3, [r7, #4]
1004d090:	2b00      	cmp	r3, #0
1004d092:	d003      	beq.n	1004d09c <HAL_PWR_WKUP_IRQHandler+0x1c>
  {
    HAL_PWR_WKUPx_Callback(wakeuppin);
1004d094:	687b      	ldr	r3, [r7, #4]
1004d096:	0018      	movs	r0, r3
1004d098:	f7f5 ffd6 	bl	10043048 <HAL_PWR_WKUPx_Callback>
  }
}
1004d09c:	46c0      	nop			@ (mov r8, r8)
1004d09e:	46bd      	mov	sp, r7
1004d0a0:	b002      	add	sp, #8
1004d0a2:	bd80      	pop	{r7, pc}

1004d0a4 <HAL_PWREx_EnableGPIOPullUp>:
  *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 or the logical OR
  *         of several of them to setseveral bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
1004d0a4:	b580      	push	{r7, lr}
1004d0a6:	b084      	sub	sp, #16
1004d0a8:	af00      	add	r7, sp, #0
1004d0aa:	6078      	str	r0, [r7, #4]
1004d0ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004d0ae:	230f      	movs	r3, #15
1004d0b0:	18fb      	adds	r3, r7, r3
1004d0b2:	2200      	movs	r2, #0
1004d0b4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004d0b6:	687b      	ldr	r3, [r7, #4]
1004d0b8:	2b00      	cmp	r3, #0
1004d0ba:	d003      	beq.n	1004d0c4 <HAL_PWREx_EnableGPIOPullUp+0x20>
1004d0bc:	687b      	ldr	r3, [r7, #4]
1004d0be:	2b01      	cmp	r3, #1
1004d0c0:	d00e      	beq.n	1004d0e0 <HAL_PWREx_EnableGPIOPullUp+0x3c>
1004d0c2:	e01b      	b.n	1004d0fc <HAL_PWREx_EnableGPIOPullUp+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PUCRA, GPIONumber);
1004d0c4:	4b13      	ldr	r3, [pc, #76]	@ (1004d114 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d0c6:	6a19      	ldr	r1, [r3, #32]
1004d0c8:	4b12      	ldr	r3, [pc, #72]	@ (1004d114 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d0ca:	683a      	ldr	r2, [r7, #0]
1004d0cc:	430a      	orrs	r2, r1
1004d0ce:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004d0d0:	4b10      	ldr	r3, [pc, #64]	@ (1004d114 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d0d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004d0d4:	683b      	ldr	r3, [r7, #0]
1004d0d6:	43d9      	mvns	r1, r3
1004d0d8:	4b0e      	ldr	r3, [pc, #56]	@ (1004d114 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d0da:	400a      	ands	r2, r1
1004d0dc:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
1004d0de:	e012      	b.n	1004d106 <HAL_PWREx_EnableGPIOPullUp+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PUCRB, GPIONumber);
1004d0e0:	4b0c      	ldr	r3, [pc, #48]	@ (1004d114 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d0e2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
1004d0e4:	4b0b      	ldr	r3, [pc, #44]	@ (1004d114 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d0e6:	683a      	ldr	r2, [r7, #0]
1004d0e8:	430a      	orrs	r2, r1
1004d0ea:	629a      	str	r2, [r3, #40]	@ 0x28
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004d0ec:	4b09      	ldr	r3, [pc, #36]	@ (1004d114 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d0ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004d0f0:	683b      	ldr	r3, [r7, #0]
1004d0f2:	43d9      	mvns	r1, r3
1004d0f4:	4b07      	ldr	r3, [pc, #28]	@ (1004d114 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004d0f6:	400a      	ands	r2, r1
1004d0f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
1004d0fa:	e004      	b.n	1004d106 <HAL_PWREx_EnableGPIOPullUp+0x62>
    default:
      status = HAL_ERROR;
1004d0fc:	230f      	movs	r3, #15
1004d0fe:	18fb      	adds	r3, r7, r3
1004d100:	2201      	movs	r2, #1
1004d102:	701a      	strb	r2, [r3, #0]
      break;
1004d104:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004d106:	230f      	movs	r3, #15
1004d108:	18fb      	adds	r3, r7, r3
1004d10a:	781b      	ldrb	r3, [r3, #0]
}
1004d10c:	0018      	movs	r0, r3
1004d10e:	46bd      	mov	sp, r7
1004d110:	b004      	add	sp, #16
1004d112:	bd80      	pop	{r7, pc}
1004d114:	48500000 	.word	0x48500000

1004d118 <HAL_PWREx_DisableGPIOPullUp>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
1004d118:	b580      	push	{r7, lr}
1004d11a:	b084      	sub	sp, #16
1004d11c:	af00      	add	r7, sp, #0
1004d11e:	6078      	str	r0, [r7, #4]
1004d120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004d122:	230f      	movs	r3, #15
1004d124:	18fb      	adds	r3, r7, r3
1004d126:	2200      	movs	r2, #0
1004d128:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004d12a:	687b      	ldr	r3, [r7, #4]
1004d12c:	2b00      	cmp	r3, #0
1004d12e:	d003      	beq.n	1004d138 <HAL_PWREx_DisableGPIOPullUp+0x20>
1004d130:	687b      	ldr	r3, [r7, #4]
1004d132:	2b01      	cmp	r3, #1
1004d134:	d008      	beq.n	1004d148 <HAL_PWREx_DisableGPIOPullUp+0x30>
1004d136:	e00f      	b.n	1004d158 <HAL_PWREx_DisableGPIOPullUp+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004d138:	4b0d      	ldr	r3, [pc, #52]	@ (1004d170 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004d13a:	6a1a      	ldr	r2, [r3, #32]
1004d13c:	683b      	ldr	r3, [r7, #0]
1004d13e:	43d9      	mvns	r1, r3
1004d140:	4b0b      	ldr	r3, [pc, #44]	@ (1004d170 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004d142:	400a      	ands	r2, r1
1004d144:	621a      	str	r2, [r3, #32]
      break;
1004d146:	e00c      	b.n	1004d162 <HAL_PWREx_DisableGPIOPullUp+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004d148:	4b09      	ldr	r3, [pc, #36]	@ (1004d170 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004d14a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004d14c:	683b      	ldr	r3, [r7, #0]
1004d14e:	43d9      	mvns	r1, r3
1004d150:	4b07      	ldr	r3, [pc, #28]	@ (1004d170 <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004d152:	400a      	ands	r2, r1
1004d154:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
1004d156:	e004      	b.n	1004d162 <HAL_PWREx_DisableGPIOPullUp+0x4a>
    default:
      status = HAL_ERROR;
1004d158:	230f      	movs	r3, #15
1004d15a:	18fb      	adds	r3, r7, r3
1004d15c:	2201      	movs	r2, #1
1004d15e:	701a      	strb	r2, [r3, #0]
      break;
1004d160:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004d162:	230f      	movs	r3, #15
1004d164:	18fb      	adds	r3, r7, r3
1004d166:	781b      	ldrb	r3, [r3, #0]
}
1004d168:	0018      	movs	r0, r3
1004d16a:	46bd      	mov	sp, r7
1004d16c:	b004      	add	sp, #16
1004d16e:	bd80      	pop	{r7, pc}
1004d170:	48500000 	.word	0x48500000

1004d174 <HAL_PWREx_EnableGPIOPullDown>:
  *         or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
1004d174:	b580      	push	{r7, lr}
1004d176:	b084      	sub	sp, #16
1004d178:	af00      	add	r7, sp, #0
1004d17a:	6078      	str	r0, [r7, #4]
1004d17c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004d17e:	230f      	movs	r3, #15
1004d180:	18fb      	adds	r3, r7, r3
1004d182:	2200      	movs	r2, #0
1004d184:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004d186:	687b      	ldr	r3, [r7, #4]
1004d188:	2b00      	cmp	r3, #0
1004d18a:	d003      	beq.n	1004d194 <HAL_PWREx_EnableGPIOPullDown+0x20>
1004d18c:	687b      	ldr	r3, [r7, #4]
1004d18e:	2b01      	cmp	r3, #1
1004d190:	d00e      	beq.n	1004d1b0 <HAL_PWREx_EnableGPIOPullDown+0x3c>
1004d192:	e01b      	b.n	1004d1cc <HAL_PWREx_EnableGPIOPullDown+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PDCRA, GPIONumber);
1004d194:	4b13      	ldr	r3, [pc, #76]	@ (1004d1e4 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004d196:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1004d198:	4b12      	ldr	r3, [pc, #72]	@ (1004d1e4 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004d19a:	683a      	ldr	r2, [r7, #0]
1004d19c:	430a      	orrs	r2, r1
1004d19e:	625a      	str	r2, [r3, #36]	@ 0x24
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004d1a0:	4b10      	ldr	r3, [pc, #64]	@ (1004d1e4 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004d1a2:	6a1a      	ldr	r2, [r3, #32]
1004d1a4:	683b      	ldr	r3, [r7, #0]
1004d1a6:	43d9      	mvns	r1, r3
1004d1a8:	4b0e      	ldr	r3, [pc, #56]	@ (1004d1e4 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004d1aa:	400a      	ands	r2, r1
1004d1ac:	621a      	str	r2, [r3, #32]
      break;
1004d1ae:	e012      	b.n	1004d1d6 <HAL_PWREx_EnableGPIOPullDown+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PDCRB, GPIONumber);
1004d1b0:	4b0c      	ldr	r3, [pc, #48]	@ (1004d1e4 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004d1b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1004d1b4:	4b0b      	ldr	r3, [pc, #44]	@ (1004d1e4 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004d1b6:	683a      	ldr	r2, [r7, #0]
1004d1b8:	430a      	orrs	r2, r1
1004d1ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004d1bc:	4b09      	ldr	r3, [pc, #36]	@ (1004d1e4 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004d1be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004d1c0:	683b      	ldr	r3, [r7, #0]
1004d1c2:	43d9      	mvns	r1, r3
1004d1c4:	4b07      	ldr	r3, [pc, #28]	@ (1004d1e4 <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004d1c6:	400a      	ands	r2, r1
1004d1c8:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
1004d1ca:	e004      	b.n	1004d1d6 <HAL_PWREx_EnableGPIOPullDown+0x62>
    default:
      status = HAL_ERROR;
1004d1cc:	230f      	movs	r3, #15
1004d1ce:	18fb      	adds	r3, r7, r3
1004d1d0:	2201      	movs	r2, #1
1004d1d2:	701a      	strb	r2, [r3, #0]
      break;
1004d1d4:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004d1d6:	230f      	movs	r3, #15
1004d1d8:	18fb      	adds	r3, r7, r3
1004d1da:	781b      	ldrb	r3, [r3, #0]
}
1004d1dc:	0018      	movs	r0, r3
1004d1de:	46bd      	mov	sp, r7
1004d1e0:	b004      	add	sp, #16
1004d1e2:	bd80      	pop	{r7, pc}
1004d1e4:	48500000 	.word	0x48500000

1004d1e8 <HAL_PWREx_DisableGPIOPullDown>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
1004d1e8:	b580      	push	{r7, lr}
1004d1ea:	b084      	sub	sp, #16
1004d1ec:	af00      	add	r7, sp, #0
1004d1ee:	6078      	str	r0, [r7, #4]
1004d1f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004d1f2:	230f      	movs	r3, #15
1004d1f4:	18fb      	adds	r3, r7, r3
1004d1f6:	2200      	movs	r2, #0
1004d1f8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004d1fa:	687b      	ldr	r3, [r7, #4]
1004d1fc:	2b00      	cmp	r3, #0
1004d1fe:	d003      	beq.n	1004d208 <HAL_PWREx_DisableGPIOPullDown+0x20>
1004d200:	687b      	ldr	r3, [r7, #4]
1004d202:	2b01      	cmp	r3, #1
1004d204:	d008      	beq.n	1004d218 <HAL_PWREx_DisableGPIOPullDown+0x30>
1004d206:	e00f      	b.n	1004d228 <HAL_PWREx_DisableGPIOPullDown+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004d208:	4b0d      	ldr	r3, [pc, #52]	@ (1004d240 <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004d20a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004d20c:	683b      	ldr	r3, [r7, #0]
1004d20e:	43d9      	mvns	r1, r3
1004d210:	4b0b      	ldr	r3, [pc, #44]	@ (1004d240 <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004d212:	400a      	ands	r2, r1
1004d214:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
1004d216:	e00c      	b.n	1004d232 <HAL_PWREx_DisableGPIOPullDown+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004d218:	4b09      	ldr	r3, [pc, #36]	@ (1004d240 <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004d21a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004d21c:	683b      	ldr	r3, [r7, #0]
1004d21e:	43d9      	mvns	r1, r3
1004d220:	4b07      	ldr	r3, [pc, #28]	@ (1004d240 <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004d222:	400a      	ands	r2, r1
1004d224:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
1004d226:	e004      	b.n	1004d232 <HAL_PWREx_DisableGPIOPullDown+0x4a>
    default:
      status = HAL_ERROR;
1004d228:	230f      	movs	r3, #15
1004d22a:	18fb      	adds	r3, r7, r3
1004d22c:	2201      	movs	r2, #1
1004d22e:	701a      	strb	r2, [r3, #0]
      break;
1004d230:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004d232:	230f      	movs	r3, #15
1004d234:	18fb      	adds	r3, r7, r3
1004d236:	781b      	ldrb	r3, [r3, #0]
}
1004d238:	0018      	movs	r0, r3
1004d23a:	46bd      	mov	sp, r7
1004d23c:	b004      	add	sp, #16
1004d23e:	bd80      	pop	{r7, pc}
1004d240:	48500000 	.word	0x48500000

1004d244 <LL_RADIO_SetRadioConfigurationAddressPointer>:
{
1004d244:	b580      	push	{r7, lr}
1004d246:	b082      	sub	sp, #8
1004d248:	af00      	add	r7, sp, #0
1004d24a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
1004d24c:	4b04      	ldr	r3, [pc, #16]	@ (1004d260 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004d24e:	681b      	ldr	r3, [r3, #0]
1004d250:	4b03      	ldr	r3, [pc, #12]	@ (1004d260 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004d252:	687a      	ldr	r2, [r7, #4]
1004d254:	601a      	str	r2, [r3, #0]
}
1004d256:	46c0      	nop			@ (mov r8, r8)
1004d258:	46bd      	mov	sp, r7
1004d25a:	b002      	add	sp, #8
1004d25c:	bd80      	pop	{r7, pc}
1004d25e:	46c0      	nop			@ (mov r8, r8)
1004d260:	200000c0 	.word	0x200000c0

1004d264 <LL_RADIO_SetWakeupInitDelay>:
{
1004d264:	b580      	push	{r7, lr}
1004d266:	b082      	sub	sp, #8
1004d268:	af00      	add	r7, sp, #0
1004d26a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
1004d26c:	4b07      	ldr	r3, [pc, #28]	@ (1004d28c <LL_RADIO_SetWakeupInitDelay+0x28>)
1004d26e:	685b      	ldr	r3, [r3, #4]
1004d270:	4a07      	ldr	r2, [pc, #28]	@ (1004d290 <LL_RADIO_SetWakeupInitDelay+0x2c>)
1004d272:	4013      	ands	r3, r2
1004d274:	0019      	movs	r1, r3
1004d276:	687b      	ldr	r3, [r7, #4]
1004d278:	021b      	lsls	r3, r3, #8
1004d27a:	041b      	lsls	r3, r3, #16
1004d27c:	0c1a      	lsrs	r2, r3, #16
1004d27e:	4b03      	ldr	r3, [pc, #12]	@ (1004d28c <LL_RADIO_SetWakeupInitDelay+0x28>)
1004d280:	430a      	orrs	r2, r1
1004d282:	605a      	str	r2, [r3, #4]
}
1004d284:	46c0      	nop			@ (mov r8, r8)
1004d286:	46bd      	mov	sp, r7
1004d288:	b002      	add	sp, #8
1004d28a:	bd80      	pop	{r7, pc}
1004d28c:	200000c0 	.word	0x200000c0
1004d290:	ffff00ff 	.word	0xffff00ff

1004d294 <LL_RADIO_SetTimer12InitDelayCal>:
{
1004d294:	b580      	push	{r7, lr}
1004d296:	b082      	sub	sp, #8
1004d298:	af00      	add	r7, sp, #0
1004d29a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
1004d29c:	4b08      	ldr	r3, [pc, #32]	@ (1004d2c0 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004d29e:	685b      	ldr	r3, [r3, #4]
1004d2a0:	4a08      	ldr	r2, [pc, #32]	@ (1004d2c4 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
1004d2a2:	4013      	ands	r3, r2
1004d2a4:	0019      	movs	r1, r3
1004d2a6:	687b      	ldr	r3, [r7, #4]
1004d2a8:	041a      	lsls	r2, r3, #16
1004d2aa:	23ff      	movs	r3, #255	@ 0xff
1004d2ac:	041b      	lsls	r3, r3, #16
1004d2ae:	401a      	ands	r2, r3
1004d2b0:	4b03      	ldr	r3, [pc, #12]	@ (1004d2c0 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004d2b2:	430a      	orrs	r2, r1
1004d2b4:	605a      	str	r2, [r3, #4]
}
1004d2b6:	46c0      	nop			@ (mov r8, r8)
1004d2b8:	46bd      	mov	sp, r7
1004d2ba:	b002      	add	sp, #8
1004d2bc:	bd80      	pop	{r7, pc}
1004d2be:	46c0      	nop			@ (mov r8, r8)
1004d2c0:	200000c0 	.word	0x200000c0
1004d2c4:	ff00ffff 	.word	0xff00ffff

1004d2c8 <LL_RADIO_SetTimer12InitDelayNoCal>:
{
1004d2c8:	b580      	push	{r7, lr}
1004d2ca:	b082      	sub	sp, #8
1004d2cc:	af00      	add	r7, sp, #0
1004d2ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
1004d2d0:	4b06      	ldr	r3, [pc, #24]	@ (1004d2ec <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004d2d2:	685b      	ldr	r3, [r3, #4]
1004d2d4:	021b      	lsls	r3, r3, #8
1004d2d6:	0a19      	lsrs	r1, r3, #8
1004d2d8:	687b      	ldr	r3, [r7, #4]
1004d2da:	061a      	lsls	r2, r3, #24
1004d2dc:	4b03      	ldr	r3, [pc, #12]	@ (1004d2ec <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004d2de:	430a      	orrs	r2, r1
1004d2e0:	605a      	str	r2, [r3, #4]
}
1004d2e2:	46c0      	nop			@ (mov r8, r8)
1004d2e4:	46bd      	mov	sp, r7
1004d2e6:	b002      	add	sp, #8
1004d2e8:	bd80      	pop	{r7, pc}
1004d2ea:	46c0      	nop			@ (mov r8, r8)
1004d2ec:	200000c0 	.word	0x200000c0

1004d2f0 <LL_RADIO_SetTransmitCalDelayChk>:
{
1004d2f0:	b580      	push	{r7, lr}
1004d2f2:	b082      	sub	sp, #8
1004d2f4:	af00      	add	r7, sp, #0
1004d2f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
1004d2f8:	4b07      	ldr	r3, [pc, #28]	@ (1004d318 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
1004d2fa:	689b      	ldr	r3, [r3, #8]
1004d2fc:	22ff      	movs	r2, #255	@ 0xff
1004d2fe:	4393      	bics	r3, r2
1004d300:	0019      	movs	r1, r3
1004d302:	687b      	ldr	r3, [r7, #4]
1004d304:	22ff      	movs	r2, #255	@ 0xff
1004d306:	401a      	ands	r2, r3
1004d308:	4b03      	ldr	r3, [pc, #12]	@ (1004d318 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
1004d30a:	430a      	orrs	r2, r1
1004d30c:	609a      	str	r2, [r3, #8]
}
1004d30e:	46c0      	nop			@ (mov r8, r8)
1004d310:	46bd      	mov	sp, r7
1004d312:	b002      	add	sp, #8
1004d314:	bd80      	pop	{r7, pc}
1004d316:	46c0      	nop			@ (mov r8, r8)
1004d318:	200000c0 	.word	0x200000c0

1004d31c <LL_RADIO_SetTransmitNoCalDelayChk>:
{
1004d31c:	b580      	push	{r7, lr}
1004d31e:	b082      	sub	sp, #8
1004d320:	af00      	add	r7, sp, #0
1004d322:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
1004d324:	4b07      	ldr	r3, [pc, #28]	@ (1004d344 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004d326:	689b      	ldr	r3, [r3, #8]
1004d328:	4a07      	ldr	r2, [pc, #28]	@ (1004d348 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
1004d32a:	4013      	ands	r3, r2
1004d32c:	0019      	movs	r1, r3
1004d32e:	687b      	ldr	r3, [r7, #4]
1004d330:	021b      	lsls	r3, r3, #8
1004d332:	041b      	lsls	r3, r3, #16
1004d334:	0c1a      	lsrs	r2, r3, #16
1004d336:	4b03      	ldr	r3, [pc, #12]	@ (1004d344 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004d338:	430a      	orrs	r2, r1
1004d33a:	609a      	str	r2, [r3, #8]
}
1004d33c:	46c0      	nop			@ (mov r8, r8)
1004d33e:	46bd      	mov	sp, r7
1004d340:	b002      	add	sp, #8
1004d342:	bd80      	pop	{r7, pc}
1004d344:	200000c0 	.word	0x200000c0
1004d348:	ffff00ff 	.word	0xffff00ff

1004d34c <LL_RADIO_SetReceivedCalDelayChk>:
{
1004d34c:	b580      	push	{r7, lr}
1004d34e:	b082      	sub	sp, #8
1004d350:	af00      	add	r7, sp, #0
1004d352:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
1004d354:	4b08      	ldr	r3, [pc, #32]	@ (1004d378 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004d356:	689b      	ldr	r3, [r3, #8]
1004d358:	4a08      	ldr	r2, [pc, #32]	@ (1004d37c <LL_RADIO_SetReceivedCalDelayChk+0x30>)
1004d35a:	4013      	ands	r3, r2
1004d35c:	0019      	movs	r1, r3
1004d35e:	687b      	ldr	r3, [r7, #4]
1004d360:	041a      	lsls	r2, r3, #16
1004d362:	23ff      	movs	r3, #255	@ 0xff
1004d364:	041b      	lsls	r3, r3, #16
1004d366:	401a      	ands	r2, r3
1004d368:	4b03      	ldr	r3, [pc, #12]	@ (1004d378 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004d36a:	430a      	orrs	r2, r1
1004d36c:	609a      	str	r2, [r3, #8]
}
1004d36e:	46c0      	nop			@ (mov r8, r8)
1004d370:	46bd      	mov	sp, r7
1004d372:	b002      	add	sp, #8
1004d374:	bd80      	pop	{r7, pc}
1004d376:	46c0      	nop			@ (mov r8, r8)
1004d378:	200000c0 	.word	0x200000c0
1004d37c:	ff00ffff 	.word	0xff00ffff

1004d380 <LL_RADIO_SetReceivedNoCalDelayChk>:
{
1004d380:	b580      	push	{r7, lr}
1004d382:	b082      	sub	sp, #8
1004d384:	af00      	add	r7, sp, #0
1004d386:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
1004d388:	4b06      	ldr	r3, [pc, #24]	@ (1004d3a4 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004d38a:	689b      	ldr	r3, [r3, #8]
1004d38c:	021b      	lsls	r3, r3, #8
1004d38e:	0a19      	lsrs	r1, r3, #8
1004d390:	687b      	ldr	r3, [r7, #4]
1004d392:	061a      	lsls	r2, r3, #24
1004d394:	4b03      	ldr	r3, [pc, #12]	@ (1004d3a4 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004d396:	430a      	orrs	r2, r1
1004d398:	609a      	str	r2, [r3, #8]
}
1004d39a:	46c0      	nop			@ (mov r8, r8)
1004d39c:	46bd      	mov	sp, r7
1004d39e:	b002      	add	sp, #8
1004d3a0:	bd80      	pop	{r7, pc}
1004d3a2:	46c0      	nop			@ (mov r8, r8)
1004d3a4:	200000c0 	.word	0x200000c0

1004d3a8 <LL_RADIO_SetConfigurationEndDuration>:
{
1004d3a8:	b580      	push	{r7, lr}
1004d3aa:	b082      	sub	sp, #8
1004d3ac:	af00      	add	r7, sp, #0
1004d3ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
1004d3b0:	4b07      	ldr	r3, [pc, #28]	@ (1004d3d0 <LL_RADIO_SetConfigurationEndDuration+0x28>)
1004d3b2:	68db      	ldr	r3, [r3, #12]
1004d3b4:	22ff      	movs	r2, #255	@ 0xff
1004d3b6:	4393      	bics	r3, r2
1004d3b8:	0019      	movs	r1, r3
1004d3ba:	687b      	ldr	r3, [r7, #4]
1004d3bc:	22ff      	movs	r2, #255	@ 0xff
1004d3be:	401a      	ands	r2, r3
1004d3c0:	4b03      	ldr	r3, [pc, #12]	@ (1004d3d0 <LL_RADIO_SetConfigurationEndDuration+0x28>)
1004d3c2:	430a      	orrs	r2, r1
1004d3c4:	60da      	str	r2, [r3, #12]
}
1004d3c6:	46c0      	nop			@ (mov r8, r8)
1004d3c8:	46bd      	mov	sp, r7
1004d3ca:	b002      	add	sp, #8
1004d3cc:	bd80      	pop	{r7, pc}
1004d3ce:	46c0      	nop			@ (mov r8, r8)
1004d3d0:	200000c0 	.word	0x200000c0

1004d3d4 <LL_RADIO_SetTxDataReadyCheck>:
{
1004d3d4:	b580      	push	{r7, lr}
1004d3d6:	b082      	sub	sp, #8
1004d3d8:	af00      	add	r7, sp, #0
1004d3da:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
1004d3dc:	4b07      	ldr	r3, [pc, #28]	@ (1004d3fc <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004d3de:	68db      	ldr	r3, [r3, #12]
1004d3e0:	4a07      	ldr	r2, [pc, #28]	@ (1004d400 <LL_RADIO_SetTxDataReadyCheck+0x2c>)
1004d3e2:	4013      	ands	r3, r2
1004d3e4:	0019      	movs	r1, r3
1004d3e6:	687b      	ldr	r3, [r7, #4]
1004d3e8:	021b      	lsls	r3, r3, #8
1004d3ea:	041b      	lsls	r3, r3, #16
1004d3ec:	0c1a      	lsrs	r2, r3, #16
1004d3ee:	4b03      	ldr	r3, [pc, #12]	@ (1004d3fc <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004d3f0:	430a      	orrs	r2, r1
1004d3f2:	60da      	str	r2, [r3, #12]
}
1004d3f4:	46c0      	nop			@ (mov r8, r8)
1004d3f6:	46bd      	mov	sp, r7
1004d3f8:	b002      	add	sp, #8
1004d3fa:	bd80      	pop	{r7, pc}
1004d3fc:	200000c0 	.word	0x200000c0
1004d400:	ffff00ff 	.word	0xffff00ff

1004d404 <LL_RADIO_SetTxDelayStart>:
{
1004d404:	b580      	push	{r7, lr}
1004d406:	b082      	sub	sp, #8
1004d408:	af00      	add	r7, sp, #0
1004d40a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
1004d40c:	4b08      	ldr	r3, [pc, #32]	@ (1004d430 <LL_RADIO_SetTxDelayStart+0x2c>)
1004d40e:	68db      	ldr	r3, [r3, #12]
1004d410:	4a08      	ldr	r2, [pc, #32]	@ (1004d434 <LL_RADIO_SetTxDelayStart+0x30>)
1004d412:	4013      	ands	r3, r2
1004d414:	0019      	movs	r1, r3
1004d416:	687b      	ldr	r3, [r7, #4]
1004d418:	041a      	lsls	r2, r3, #16
1004d41a:	23ff      	movs	r3, #255	@ 0xff
1004d41c:	041b      	lsls	r3, r3, #16
1004d41e:	401a      	ands	r2, r3
1004d420:	4b03      	ldr	r3, [pc, #12]	@ (1004d430 <LL_RADIO_SetTxDelayStart+0x2c>)
1004d422:	430a      	orrs	r2, r1
1004d424:	60da      	str	r2, [r3, #12]
}
1004d426:	46c0      	nop			@ (mov r8, r8)
1004d428:	46bd      	mov	sp, r7
1004d42a:	b002      	add	sp, #8
1004d42c:	bd80      	pop	{r7, pc}
1004d42e:	46c0      	nop			@ (mov r8, r8)
1004d430:	200000c0 	.word	0x200000c0
1004d434:	ff00ffff 	.word	0xff00ffff

1004d438 <LL_RADIO_SetTxDelayEnd>:
{
1004d438:	b580      	push	{r7, lr}
1004d43a:	b082      	sub	sp, #8
1004d43c:	af00      	add	r7, sp, #0
1004d43e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
1004d440:	4b08      	ldr	r3, [pc, #32]	@ (1004d464 <LL_RADIO_SetTxDelayEnd+0x2c>)
1004d442:	68db      	ldr	r3, [r3, #12]
1004d444:	4a08      	ldr	r2, [pc, #32]	@ (1004d468 <LL_RADIO_SetTxDelayEnd+0x30>)
1004d446:	4013      	ands	r3, r2
1004d448:	0019      	movs	r1, r3
1004d44a:	687b      	ldr	r3, [r7, #4]
1004d44c:	061a      	lsls	r2, r3, #24
1004d44e:	23fc      	movs	r3, #252	@ 0xfc
1004d450:	059b      	lsls	r3, r3, #22
1004d452:	401a      	ands	r2, r3
1004d454:	4b03      	ldr	r3, [pc, #12]	@ (1004d464 <LL_RADIO_SetTxDelayEnd+0x2c>)
1004d456:	430a      	orrs	r2, r1
1004d458:	60da      	str	r2, [r3, #12]
}
1004d45a:	46c0      	nop			@ (mov r8, r8)
1004d45c:	46bd      	mov	sp, r7
1004d45e:	b002      	add	sp, #8
1004d460:	bd80      	pop	{r7, pc}
1004d462:	46c0      	nop			@ (mov r8, r8)
1004d464:	200000c0 	.word	0x200000c0
1004d468:	c0ffffff 	.word	0xc0ffffff

1004d46c <LL_RADIO_SetTransmissionReadyTimeout>:
{
1004d46c:	b580      	push	{r7, lr}
1004d46e:	b082      	sub	sp, #8
1004d470:	af00      	add	r7, sp, #0
1004d472:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
1004d474:	4b07      	ldr	r3, [pc, #28]	@ (1004d494 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004d476:	691b      	ldr	r3, [r3, #16]
1004d478:	22ff      	movs	r2, #255	@ 0xff
1004d47a:	4393      	bics	r3, r2
1004d47c:	0019      	movs	r1, r3
1004d47e:	687b      	ldr	r3, [r7, #4]
1004d480:	22ff      	movs	r2, #255	@ 0xff
1004d482:	401a      	ands	r2, r3
1004d484:	4b03      	ldr	r3, [pc, #12]	@ (1004d494 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004d486:	430a      	orrs	r2, r1
1004d488:	611a      	str	r2, [r3, #16]
}
1004d48a:	46c0      	nop			@ (mov r8, r8)
1004d48c:	46bd      	mov	sp, r7
1004d48e:	b002      	add	sp, #8
1004d490:	bd80      	pop	{r7, pc}
1004d492:	46c0      	nop			@ (mov r8, r8)
1004d494:	200000c0 	.word	0x200000c0

1004d498 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
{
1004d498:	b580      	push	{r7, lr}
1004d49a:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
1004d49c:	4b04      	ldr	r3, [pc, #16]	@ (1004d4b0 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004d49e:	695a      	ldr	r2, [r3, #20]
1004d4a0:	4b03      	ldr	r3, [pc, #12]	@ (1004d4b0 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004d4a2:	2104      	movs	r1, #4
1004d4a4:	430a      	orrs	r2, r1
1004d4a6:	615a      	str	r2, [r3, #20]
}
1004d4a8:	46c0      	nop			@ (mov r8, r8)
1004d4aa:	46bd      	mov	sp, r7
1004d4ac:	bd80      	pop	{r7, pc}
1004d4ae:	46c0      	nop			@ (mov r8, r8)
1004d4b0:	200000c0 	.word	0x200000c0

1004d4b4 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
{
1004d4b4:	b580      	push	{r7, lr}
1004d4b6:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
1004d4b8:	4b04      	ldr	r3, [pc, #16]	@ (1004d4cc <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004d4ba:	695a      	ldr	r2, [r3, #20]
1004d4bc:	4b03      	ldr	r3, [pc, #12]	@ (1004d4cc <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004d4be:	2180      	movs	r1, #128	@ 0x80
1004d4c0:	0409      	lsls	r1, r1, #16
1004d4c2:	430a      	orrs	r2, r1
1004d4c4:	615a      	str	r2, [r3, #20]
}
1004d4c6:	46c0      	nop			@ (mov r8, r8)
1004d4c8:	46bd      	mov	sp, r7
1004d4ca:	bd80      	pop	{r7, pc}
1004d4cc:	200000c0 	.word	0x200000c0

1004d4d0 <LL_RADIO_TxRxSkipInterrupt_Enable>:
{
1004d4d0:	b580      	push	{r7, lr}
1004d4d2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
1004d4d4:	4b04      	ldr	r3, [pc, #16]	@ (1004d4e8 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004d4d6:	695a      	ldr	r2, [r3, #20]
1004d4d8:	4b03      	ldr	r3, [pc, #12]	@ (1004d4e8 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004d4da:	2180      	movs	r1, #128	@ 0x80
1004d4dc:	0589      	lsls	r1, r1, #22
1004d4de:	430a      	orrs	r2, r1
1004d4e0:	615a      	str	r2, [r3, #20]
}
1004d4e2:	46c0      	nop			@ (mov r8, r8)
1004d4e4:	46bd      	mov	sp, r7
1004d4e6:	bd80      	pop	{r7, pc}
1004d4e8:	200000c0 	.word	0x200000c0

1004d4ec <LL_RADIO_Active2ErrorInterrupt_Enable>:
{
1004d4ec:	b580      	push	{r7, lr}
1004d4ee:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
1004d4f0:	4b04      	ldr	r3, [pc, #16]	@ (1004d504 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004d4f2:	695a      	ldr	r2, [r3, #20]
1004d4f4:	4b03      	ldr	r3, [pc, #12]	@ (1004d504 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004d4f6:	2180      	movs	r1, #128	@ 0x80
1004d4f8:	05c9      	lsls	r1, r1, #23
1004d4fa:	430a      	orrs	r2, r1
1004d4fc:	615a      	str	r2, [r3, #20]
}
1004d4fe:	46c0      	nop			@ (mov r8, r8)
1004d500:	46bd      	mov	sp, r7
1004d502:	bd80      	pop	{r7, pc}
1004d504:	200000c0 	.word	0x200000c0

1004d508 <LL_RADIO_SetDefaultAntennaID>:
{
1004d508:	b580      	push	{r7, lr}
1004d50a:	b082      	sub	sp, #8
1004d50c:	af00      	add	r7, sp, #0
1004d50e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
1004d510:	4b07      	ldr	r3, [pc, #28]	@ (1004d530 <LL_RADIO_SetDefaultAntennaID+0x28>)
1004d512:	699b      	ldr	r3, [r3, #24]
1004d514:	227f      	movs	r2, #127	@ 0x7f
1004d516:	4393      	bics	r3, r2
1004d518:	0019      	movs	r1, r3
1004d51a:	687b      	ldr	r3, [r7, #4]
1004d51c:	227f      	movs	r2, #127	@ 0x7f
1004d51e:	401a      	ands	r2, r3
1004d520:	4b03      	ldr	r3, [pc, #12]	@ (1004d530 <LL_RADIO_SetDefaultAntennaID+0x28>)
1004d522:	430a      	orrs	r2, r1
1004d524:	619a      	str	r2, [r3, #24]
}
1004d526:	46c0      	nop			@ (mov r8, r8)
1004d528:	46bd      	mov	sp, r7
1004d52a:	b002      	add	sp, #8
1004d52c:	bd80      	pop	{r7, pc}
1004d52e:	46c0      	nop			@ (mov r8, r8)
1004d530:	200000c0 	.word	0x200000c0

1004d534 <LL_RADIO_TIMER_DisableTimer1>:
{
1004d534:	b580      	push	{r7, lr}
1004d536:	b082      	sub	sp, #8
1004d538:	af00      	add	r7, sp, #0
1004d53a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004d53c:	687b      	ldr	r3, [r7, #4]
1004d53e:	68db      	ldr	r3, [r3, #12]
1004d540:	2203      	movs	r2, #3
1004d542:	4393      	bics	r3, r2
1004d544:	001a      	movs	r2, r3
1004d546:	687b      	ldr	r3, [r7, #4]
1004d548:	60da      	str	r2, [r3, #12]
}
1004d54a:	46c0      	nop			@ (mov r8, r8)
1004d54c:	46bd      	mov	sp, r7
1004d54e:	b002      	add	sp, #8
1004d550:	bd80      	pop	{r7, pc}

1004d552 <LL_RADIO_TIMER_DisableTimer2>:
{
1004d552:	b580      	push	{r7, lr}
1004d554:	b082      	sub	sp, #8
1004d556:	af00      	add	r7, sp, #0
1004d558:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004d55a:	687b      	ldr	r3, [r7, #4]
1004d55c:	68db      	ldr	r3, [r3, #12]
1004d55e:	2203      	movs	r2, #3
1004d560:	4393      	bics	r3, r2
1004d562:	001a      	movs	r2, r3
1004d564:	687b      	ldr	r3, [r7, #4]
1004d566:	60da      	str	r2, [r3, #12]
}
1004d568:	46c0      	nop			@ (mov r8, r8)
1004d56a:	46bd      	mov	sp, r7
1004d56c:	b002      	add	sp, #8
1004d56e:	bd80      	pop	{r7, pc}

1004d570 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004d570:	b580      	push	{r7, lr}
1004d572:	b082      	sub	sp, #8
1004d574:	af00      	add	r7, sp, #0
1004d576:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004d578:	687b      	ldr	r3, [r7, #4]
1004d57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004d57c:	4a03      	ldr	r2, [pc, #12]	@ (1004d58c <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004d57e:	401a      	ands	r2, r3
1004d580:	687b      	ldr	r3, [r7, #4]
1004d582:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004d584:	46c0      	nop			@ (mov r8, r8)
1004d586:	46bd      	mov	sp, r7
1004d588:	b002      	add	sp, #8
1004d58a:	bd80      	pop	{r7, pc}
1004d58c:	bfffffff 	.word	0xbfffffff

1004d590 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
1004d590:	b590      	push	{r4, r7, lr}
1004d592:	b08d      	sub	sp, #52	@ 0x34
1004d594:	af00      	add	r7, sp, #0
1004d596:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
1004d598:	4b14      	ldr	r3, [pc, #80]	@ (1004d5ec <HAL_RADIO_Init+0x5c>)
1004d59a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
1004d59c:	4b14      	ldr	r3, [pc, #80]	@ (1004d5f0 <HAL_RADIO_Init+0x60>)
1004d59e:	681b      	ldr	r3, [r3, #0]
1004d5a0:	4a14      	ldr	r2, [pc, #80]	@ (1004d5f4 <HAL_RADIO_Init+0x64>)
1004d5a2:	4293      	cmp	r3, r2
1004d5a4:	d12a      	bne.n	1004d5fc <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
1004d5a6:	4b14      	ldr	r3, [pc, #80]	@ (1004d5f8 <HAL_RADIO_Init+0x68>)
1004d5a8:	681b      	ldr	r3, [r3, #0]
1004d5aa:	0a1b      	lsrs	r3, r3, #8
1004d5ac:	220f      	movs	r2, #15
1004d5ae:	4013      	ands	r3, r2
1004d5b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
1004d5b2:	4b11      	ldr	r3, [pc, #68]	@ (1004d5f8 <HAL_RADIO_Init+0x68>)
1004d5b4:	681b      	ldr	r3, [r3, #0]
1004d5b6:	0b1b      	lsrs	r3, r3, #12
1004d5b8:	220f      	movs	r2, #15
1004d5ba:	4013      	ands	r3, r2
1004d5bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
1004d5be:	4b0e      	ldr	r3, [pc, #56]	@ (1004d5f8 <HAL_RADIO_Init+0x68>)
1004d5c0:	681b      	ldr	r3, [r3, #0]
1004d5c2:	0c1b      	lsrs	r3, r3, #16
1004d5c4:	220f      	movs	r2, #15
1004d5c6:	4013      	ands	r3, r2
1004d5c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
1004d5ca:	4b0b      	ldr	r3, [pc, #44]	@ (1004d5f8 <HAL_RADIO_Init+0x68>)
1004d5cc:	681b      	ldr	r3, [r3, #0]
1004d5ce:	0d1b      	lsrs	r3, r3, #20
1004d5d0:	2207      	movs	r2, #7
1004d5d2:	4013      	ands	r3, r2
1004d5d4:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
1004d5d6:	4b08      	ldr	r3, [pc, #32]	@ (1004d5f8 <HAL_RADIO_Init+0x68>)
1004d5d8:	681b      	ldr	r3, [r3, #0]
1004d5da:	0e1b      	lsrs	r3, r3, #24
1004d5dc:	2207      	movs	r2, #7
1004d5de:	4013      	ands	r3, r2
1004d5e0:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004d5e2:	231b      	movs	r3, #27
1004d5e4:	18fb      	adds	r3, r7, r3
1004d5e6:	2201      	movs	r2, #1
1004d5e8:	701a      	strb	r2, [r3, #0]
1004d5ea:	e018      	b.n	1004d61e <HAL_RADIO_Init+0x8e>
1004d5ec:	20000fa8 	.word	0x20000fa8
1004d5f0:	10001ef8 	.word	0x10001ef8
1004d5f4:	fcbceccc 	.word	0xfcbceccc
1004d5f8:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
1004d5fc:	2308      	movs	r3, #8
1004d5fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
1004d600:	2307      	movs	r3, #7
1004d602:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
1004d604:	2308      	movs	r3, #8
1004d606:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
1004d608:	211b      	movs	r1, #27
1004d60a:	187b      	adds	r3, r7, r1
1004d60c:	2200      	movs	r2, #0
1004d60e:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
1004d610:	2303      	movs	r3, #3
1004d612:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
1004d614:	2303      	movs	r3, #3
1004d616:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004d618:	187b      	adds	r3, r7, r1
1004d61a:	2201      	movs	r2, #1
1004d61c:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
1004d61e:	4bfc      	ldr	r3, [pc, #1008]	@ (1004da10 <HAL_RADIO_Init+0x480>)
1004d620:	2200      	movs	r2, #0
1004d622:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
1004d624:	687b      	ldr	r3, [r7, #4]
1004d626:	2b00      	cmp	r3, #0
1004d628:	d003      	beq.n	1004d632 <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
1004d62a:	687b      	ldr	r3, [r7, #4]
1004d62c:	0018      	movs	r0, r3
1004d62e:	f7f6 f863 	bl	100436f8 <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004d632:	23c0      	movs	r3, #192	@ 0xc0
1004d634:	05db      	lsls	r3, r3, #23
1004d636:	0018      	movs	r0, r3
1004d638:	f7ff ff7c 	bl	1004d534 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004d63c:	23c0      	movs	r3, #192	@ 0xc0
1004d63e:	05db      	lsls	r3, r3, #23
1004d640:	0018      	movs	r0, r3
1004d642:	f7ff ff86 	bl	1004d552 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004d646:	4bf3      	ldr	r3, [pc, #972]	@ (1004da14 <HAL_RADIO_Init+0x484>)
1004d648:	0018      	movs	r0, r3
1004d64a:	f7ff ff91 	bl	1004d570 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
1004d64e:	4af2      	ldr	r2, [pc, #968]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d650:	239e      	movs	r3, #158	@ 0x9e
1004d652:	009b      	lsls	r3, r3, #2
1004d654:	58d3      	ldr	r3, [r2, r3]
1004d656:	220f      	movs	r2, #15
1004d658:	4393      	bics	r3, r2
1004d65a:	001a      	movs	r2, r3
1004d65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004d65e:	210f      	movs	r1, #15
1004d660:	400b      	ands	r3, r1
1004d662:	49ed      	ldr	r1, [pc, #948]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d664:	431a      	orrs	r2, r3
1004d666:	239e      	movs	r3, #158	@ 0x9e
1004d668:	009b      	lsls	r3, r3, #2
1004d66a:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
1004d66c:	4aea      	ldr	r2, [pc, #936]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d66e:	239d      	movs	r3, #157	@ 0x9d
1004d670:	009b      	lsls	r3, r3, #2
1004d672:	58d3      	ldr	r3, [r2, r3]
1004d674:	22f0      	movs	r2, #240	@ 0xf0
1004d676:	4393      	bics	r3, r2
1004d678:	001a      	movs	r2, r3
1004d67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004d67c:	011b      	lsls	r3, r3, #4
1004d67e:	21ff      	movs	r1, #255	@ 0xff
1004d680:	400b      	ands	r3, r1
1004d682:	49e5      	ldr	r1, [pc, #916]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d684:	431a      	orrs	r2, r3
1004d686:	239d      	movs	r3, #157	@ 0x9d
1004d688:	009b      	lsls	r3, r3, #2
1004d68a:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
1004d68c:	4ae2      	ldr	r2, [pc, #904]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d68e:	239d      	movs	r3, #157	@ 0x9d
1004d690:	009b      	lsls	r3, r3, #2
1004d692:	58d3      	ldr	r3, [r2, r3]
1004d694:	220f      	movs	r2, #15
1004d696:	4393      	bics	r3, r2
1004d698:	001a      	movs	r2, r3
1004d69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004d69c:	210f      	movs	r1, #15
1004d69e:	400b      	ands	r3, r1
1004d6a0:	49dd      	ldr	r1, [pc, #884]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d6a2:	431a      	orrs	r2, r3
1004d6a4:	239d      	movs	r3, #157	@ 0x9d
1004d6a6:	009b      	lsls	r3, r3, #2
1004d6a8:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
1004d6aa:	231b      	movs	r3, #27
1004d6ac:	18fb      	adds	r3, r7, r3
1004d6ae:	781b      	ldrb	r3, [r3, #0]
1004d6b0:	2b00      	cmp	r3, #0
1004d6b2:	d01e      	beq.n	1004d6f2 <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
1004d6b4:	4ad8      	ldr	r2, [pc, #864]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d6b6:	2392      	movs	r3, #146	@ 0x92
1004d6b8:	009b      	lsls	r3, r3, #2
1004d6ba:	58d3      	ldr	r3, [r2, r3]
1004d6bc:	2207      	movs	r2, #7
1004d6be:	4393      	bics	r3, r2
1004d6c0:	001a      	movs	r2, r3
1004d6c2:	6a3b      	ldr	r3, [r7, #32]
1004d6c4:	2107      	movs	r1, #7
1004d6c6:	400b      	ands	r3, r1
1004d6c8:	49d3      	ldr	r1, [pc, #844]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d6ca:	431a      	orrs	r2, r3
1004d6cc:	2392      	movs	r3, #146	@ 0x92
1004d6ce:	009b      	lsls	r3, r3, #2
1004d6d0:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
1004d6d2:	4ad1      	ldr	r2, [pc, #836]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d6d4:	2392      	movs	r3, #146	@ 0x92
1004d6d6:	009b      	lsls	r3, r3, #2
1004d6d8:	58d3      	ldr	r3, [r2, r3]
1004d6da:	2238      	movs	r2, #56	@ 0x38
1004d6dc:	4393      	bics	r3, r2
1004d6de:	001a      	movs	r2, r3
1004d6e0:	69fb      	ldr	r3, [r7, #28]
1004d6e2:	00db      	lsls	r3, r3, #3
1004d6e4:	2138      	movs	r1, #56	@ 0x38
1004d6e6:	400b      	ands	r3, r1
1004d6e8:	49cb      	ldr	r1, [pc, #812]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d6ea:	431a      	orrs	r2, r3
1004d6ec:	2392      	movs	r3, #146	@ 0x92
1004d6ee:	009b      	lsls	r3, r3, #2
1004d6f0:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
1004d6f2:	4ac9      	ldr	r2, [pc, #804]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d6f4:	23a4      	movs	r3, #164	@ 0xa4
1004d6f6:	005b      	lsls	r3, r3, #1
1004d6f8:	58d3      	ldr	r3, [r2, r3]
1004d6fa:	22ff      	movs	r2, #255	@ 0xff
1004d6fc:	4393      	bics	r3, r2
1004d6fe:	49c6      	ldr	r1, [pc, #792]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d700:	2255      	movs	r2, #85	@ 0x55
1004d702:	431a      	orrs	r2, r3
1004d704:	23a4      	movs	r3, #164	@ 0xa4
1004d706:	005b      	lsls	r3, r3, #1
1004d708:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
1004d70a:	4ac3      	ldr	r2, [pc, #780]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d70c:	23aa      	movs	r3, #170	@ 0xaa
1004d70e:	005b      	lsls	r3, r3, #1
1004d710:	58d3      	ldr	r3, [r2, r3]
1004d712:	22ff      	movs	r2, #255	@ 0xff
1004d714:	4393      	bics	r3, r2
1004d716:	49c0      	ldr	r1, [pc, #768]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d718:	2266      	movs	r2, #102	@ 0x66
1004d71a:	431a      	orrs	r2, r3
1004d71c:	23aa      	movs	r3, #170	@ 0xaa
1004d71e:	005b      	lsls	r3, r3, #1
1004d720:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
1004d722:	4abd      	ldr	r2, [pc, #756]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d724:	23b4      	movs	r3, #180	@ 0xb4
1004d726:	005b      	lsls	r3, r3, #1
1004d728:	58d3      	ldr	r3, [r2, r3]
1004d72a:	22ff      	movs	r2, #255	@ 0xff
1004d72c:	4393      	bics	r3, r2
1004d72e:	49ba      	ldr	r1, [pc, #744]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d730:	2255      	movs	r2, #85	@ 0x55
1004d732:	431a      	orrs	r2, r3
1004d734:	23b4      	movs	r3, #180	@ 0xb4
1004d736:	005b      	lsls	r3, r3, #1
1004d738:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
1004d73a:	4ab7      	ldr	r2, [pc, #732]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d73c:	23c4      	movs	r3, #196	@ 0xc4
1004d73e:	005b      	lsls	r3, r3, #1
1004d740:	58d3      	ldr	r3, [r2, r3]
1004d742:	22ff      	movs	r2, #255	@ 0xff
1004d744:	4393      	bics	r3, r2
1004d746:	49b4      	ldr	r1, [pc, #720]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d748:	221d      	movs	r2, #29
1004d74a:	431a      	orrs	r2, r3
1004d74c:	23c4      	movs	r3, #196	@ 0xc4
1004d74e:	005b      	lsls	r3, r3, #1
1004d750:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
1004d752:	4ab1      	ldr	r2, [pc, #708]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d754:	23c2      	movs	r3, #194	@ 0xc2
1004d756:	005b      	lsls	r3, r3, #1
1004d758:	58d3      	ldr	r3, [r2, r3]
1004d75a:	22ff      	movs	r2, #255	@ 0xff
1004d75c:	4393      	bics	r3, r2
1004d75e:	49ae      	ldr	r1, [pc, #696]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d760:	2259      	movs	r2, #89	@ 0x59
1004d762:	431a      	orrs	r2, r3
1004d764:	23c2      	movs	r3, #194	@ 0xc2
1004d766:	005b      	lsls	r3, r3, #1
1004d768:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
1004d76a:	4aab      	ldr	r2, [pc, #684]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d76c:	23c6      	movs	r3, #198	@ 0xc6
1004d76e:	005b      	lsls	r3, r3, #1
1004d770:	58d3      	ldr	r3, [r2, r3]
1004d772:	22ff      	movs	r2, #255	@ 0xff
1004d774:	4393      	bics	r3, r2
1004d776:	49a8      	ldr	r1, [pc, #672]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d778:	2232      	movs	r2, #50	@ 0x32
1004d77a:	431a      	orrs	r2, r3
1004d77c:	23c6      	movs	r3, #198	@ 0xc6
1004d77e:	005b      	lsls	r3, r3, #1
1004d780:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
1004d782:	4aa5      	ldr	r2, [pc, #660]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d784:	23b6      	movs	r3, #182	@ 0xb6
1004d786:	005b      	lsls	r3, r3, #1
1004d788:	58d3      	ldr	r3, [r2, r3]
1004d78a:	49a3      	ldr	r1, [pc, #652]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d78c:	2201      	movs	r2, #1
1004d78e:	431a      	orrs	r2, r3
1004d790:	23b6      	movs	r3, #182	@ 0xb6
1004d792:	005b      	lsls	r3, r3, #1
1004d794:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
1004d796:	4aa0      	ldr	r2, [pc, #640]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d798:	23d0      	movs	r3, #208	@ 0xd0
1004d79a:	009b      	lsls	r3, r3, #2
1004d79c:	58d3      	ldr	r3, [r2, r3]
1004d79e:	227f      	movs	r2, #127	@ 0x7f
1004d7a0:	4393      	bics	r3, r2
1004d7a2:	499d      	ldr	r1, [pc, #628]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d7a4:	221f      	movs	r2, #31
1004d7a6:	431a      	orrs	r2, r3
1004d7a8:	23d0      	movs	r3, #208	@ 0xd0
1004d7aa:	009b      	lsls	r3, r3, #2
1004d7ac:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
1004d7ae:	4a9a      	ldr	r2, [pc, #616]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d7b0:	23d1      	movs	r3, #209	@ 0xd1
1004d7b2:	009b      	lsls	r3, r3, #2
1004d7b4:	58d3      	ldr	r3, [r2, r3]
1004d7b6:	223f      	movs	r2, #63	@ 0x3f
1004d7b8:	4393      	bics	r3, r2
1004d7ba:	4997      	ldr	r1, [pc, #604]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d7bc:	2209      	movs	r2, #9
1004d7be:	431a      	orrs	r2, r3
1004d7c0:	23d1      	movs	r3, #209	@ 0xd1
1004d7c2:	009b      	lsls	r3, r3, #2
1004d7c4:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
1004d7c6:	2040      	movs	r0, #64	@ 0x40
1004d7c8:	f7ff fd4c 	bl	1004d264 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
1004d7cc:	203f      	movs	r0, #63	@ 0x3f
1004d7ce:	f7ff fd61 	bl	1004d294 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
1004d7d2:	2009      	movs	r0, #9
1004d7d4:	f7ff fd78 	bl	1004d2c8 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
1004d7d8:	205a      	movs	r0, #90	@ 0x5a
1004d7da:	f7ff fdb7 	bl	1004d34c <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
1004d7de:	2032      	movs	r0, #50	@ 0x32
1004d7e0:	f7ff fdce 	bl	1004d380 <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
1004d7e4:	205a      	movs	r0, #90	@ 0x5a
1004d7e6:	f7ff fd83 	bl	1004d2f0 <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
1004d7ea:	2032      	movs	r0, #50	@ 0x32
1004d7ec:	f7ff fd96 	bl	1004d31c <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
1004d7f0:	2010      	movs	r0, #16
1004d7f2:	f7ff fe07 	bl	1004d404 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
1004d7f6:	2010      	movs	r0, #16
1004d7f8:	f7ff fe1e 	bl	1004d438 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
1004d7fc:	2004      	movs	r0, #4
1004d7fe:	f7ff fe35 	bl	1004d46c <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
1004d802:	2014      	movs	r0, #20
1004d804:	f7ff fdd0 	bl	1004d3a8 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
1004d808:	2005      	movs	r0, #5
1004d80a:	f7ff fde3 	bl	1004d3d4 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
1004d80e:	f7ff fe43 	bl	1004d498 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
1004d812:	f7ff fe4f 	bl	1004d4b4 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
1004d816:	f7ff fe5b 	bl	1004d4d0 <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
1004d81a:	2000      	movs	r0, #0
1004d81c:	f7ff fe74 	bl	1004d508 <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
1004d820:	2013      	movs	r0, #19
1004d822:	183b      	adds	r3, r7, r0
1004d824:	2200      	movs	r2, #0
1004d826:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004d828:	183b      	adds	r3, r7, r0
1004d82a:	781b      	ldrb	r3, [r3, #0]
1004d82c:	183a      	adds	r2, r7, r0
1004d82e:	1c59      	adds	r1, r3, #1
1004d830:	7011      	strb	r1, [r2, #0]
1004d832:	001a      	movs	r2, r3
1004d834:	697b      	ldr	r3, [r7, #20]
1004d836:	189b      	adds	r3, r3, r2
1004d838:	2201      	movs	r2, #1
1004d83a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
1004d83c:	183b      	adds	r3, r7, r0
1004d83e:	781b      	ldrb	r3, [r3, #0]
1004d840:	183a      	adds	r2, r7, r0
1004d842:	1c59      	adds	r1, r3, #1
1004d844:	7011      	strb	r1, [r2, #0]
1004d846:	001a      	movs	r2, r3
1004d848:	697b      	ldr	r3, [r7, #20]
1004d84a:	189b      	adds	r3, r3, r2
1004d84c:	225e      	movs	r2, #94	@ 0x5e
1004d84e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
1004d850:	4a71      	ldr	r2, [pc, #452]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d852:	239e      	movs	r3, #158	@ 0x9e
1004d854:	009b      	lsls	r3, r3, #2
1004d856:	58d1      	ldr	r1, [r2, r3]
1004d858:	183b      	adds	r3, r7, r0
1004d85a:	781b      	ldrb	r3, [r3, #0]
1004d85c:	0004      	movs	r4, r0
1004d85e:	183a      	adds	r2, r7, r0
1004d860:	1c58      	adds	r0, r3, #1
1004d862:	7010      	strb	r0, [r2, #0]
1004d864:	001a      	movs	r2, r3
1004d866:	697b      	ldr	r3, [r7, #20]
1004d868:	189b      	adds	r3, r3, r2
1004d86a:	b2ca      	uxtb	r2, r1
1004d86c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004d86e:	0020      	movs	r0, r4
1004d870:	183b      	adds	r3, r7, r0
1004d872:	781b      	ldrb	r3, [r3, #0]
1004d874:	183a      	adds	r2, r7, r0
1004d876:	1c59      	adds	r1, r3, #1
1004d878:	7011      	strb	r1, [r2, #0]
1004d87a:	001a      	movs	r2, r3
1004d87c:	697b      	ldr	r3, [r7, #20]
1004d87e:	189b      	adds	r3, r3, r2
1004d880:	2201      	movs	r2, #1
1004d882:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
1004d884:	183b      	adds	r3, r7, r0
1004d886:	781b      	ldrb	r3, [r3, #0]
1004d888:	183a      	adds	r2, r7, r0
1004d88a:	1c59      	adds	r1, r3, #1
1004d88c:	7011      	strb	r1, [r2, #0]
1004d88e:	001a      	movs	r2, r3
1004d890:	697b      	ldr	r3, [r7, #20]
1004d892:	189b      	adds	r3, r3, r2
1004d894:	225d      	movs	r2, #93	@ 0x5d
1004d896:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
1004d898:	4a5f      	ldr	r2, [pc, #380]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d89a:	239d      	movs	r3, #157	@ 0x9d
1004d89c:	009b      	lsls	r3, r3, #2
1004d89e:	58d1      	ldr	r1, [r2, r3]
1004d8a0:	183b      	adds	r3, r7, r0
1004d8a2:	781b      	ldrb	r3, [r3, #0]
1004d8a4:	0004      	movs	r4, r0
1004d8a6:	183a      	adds	r2, r7, r0
1004d8a8:	1c58      	adds	r0, r3, #1
1004d8aa:	7010      	strb	r0, [r2, #0]
1004d8ac:	001a      	movs	r2, r3
1004d8ae:	697b      	ldr	r3, [r7, #20]
1004d8b0:	189b      	adds	r3, r3, r2
1004d8b2:	b2ca      	uxtb	r2, r1
1004d8b4:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004d8b6:	0020      	movs	r0, r4
1004d8b8:	183b      	adds	r3, r7, r0
1004d8ba:	781b      	ldrb	r3, [r3, #0]
1004d8bc:	183a      	adds	r2, r7, r0
1004d8be:	1c59      	adds	r1, r3, #1
1004d8c0:	7011      	strb	r1, [r2, #0]
1004d8c2:	001a      	movs	r2, r3
1004d8c4:	697b      	ldr	r3, [r7, #20]
1004d8c6:	189b      	adds	r3, r3, r2
1004d8c8:	2201      	movs	r2, #1
1004d8ca:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
1004d8cc:	183b      	adds	r3, r7, r0
1004d8ce:	781b      	ldrb	r3, [r3, #0]
1004d8d0:	183a      	adds	r2, r7, r0
1004d8d2:	1c59      	adds	r1, r3, #1
1004d8d4:	7011      	strb	r1, [r2, #0]
1004d8d6:	001a      	movs	r2, r3
1004d8d8:	697b      	ldr	r3, [r7, #20]
1004d8da:	189b      	adds	r3, r3, r2
1004d8dc:	2252      	movs	r2, #82	@ 0x52
1004d8de:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
1004d8e0:	4a4d      	ldr	r2, [pc, #308]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d8e2:	2392      	movs	r3, #146	@ 0x92
1004d8e4:	009b      	lsls	r3, r3, #2
1004d8e6:	58d1      	ldr	r1, [r2, r3]
1004d8e8:	183b      	adds	r3, r7, r0
1004d8ea:	781b      	ldrb	r3, [r3, #0]
1004d8ec:	0004      	movs	r4, r0
1004d8ee:	183a      	adds	r2, r7, r0
1004d8f0:	1c58      	adds	r0, r3, #1
1004d8f2:	7010      	strb	r0, [r2, #0]
1004d8f4:	001a      	movs	r2, r3
1004d8f6:	697b      	ldr	r3, [r7, #20]
1004d8f8:	189b      	adds	r3, r3, r2
1004d8fa:	b2ca      	uxtb	r2, r1
1004d8fc:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004d8fe:	0020      	movs	r0, r4
1004d900:	183b      	adds	r3, r7, r0
1004d902:	781b      	ldrb	r3, [r3, #0]
1004d904:	183a      	adds	r2, r7, r0
1004d906:	1c59      	adds	r1, r3, #1
1004d908:	7011      	strb	r1, [r2, #0]
1004d90a:	001a      	movs	r2, r3
1004d90c:	697b      	ldr	r3, [r7, #20]
1004d90e:	189b      	adds	r3, r3, r2
1004d910:	2201      	movs	r2, #1
1004d912:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
1004d914:	183b      	adds	r3, r7, r0
1004d916:	781b      	ldrb	r3, [r3, #0]
1004d918:	183a      	adds	r2, r7, r0
1004d91a:	1c59      	adds	r1, r3, #1
1004d91c:	7011      	strb	r1, [r2, #0]
1004d91e:	001a      	movs	r2, r3
1004d920:	697b      	ldr	r3, [r7, #20]
1004d922:	189b      	adds	r3, r3, r2
1004d924:	2212      	movs	r2, #18
1004d926:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
1004d928:	4a3b      	ldr	r2, [pc, #236]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d92a:	23a4      	movs	r3, #164	@ 0xa4
1004d92c:	005b      	lsls	r3, r3, #1
1004d92e:	58d1      	ldr	r1, [r2, r3]
1004d930:	183b      	adds	r3, r7, r0
1004d932:	781b      	ldrb	r3, [r3, #0]
1004d934:	0004      	movs	r4, r0
1004d936:	183a      	adds	r2, r7, r0
1004d938:	1c58      	adds	r0, r3, #1
1004d93a:	7010      	strb	r0, [r2, #0]
1004d93c:	001a      	movs	r2, r3
1004d93e:	697b      	ldr	r3, [r7, #20]
1004d940:	189b      	adds	r3, r3, r2
1004d942:	b2ca      	uxtb	r2, r1
1004d944:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004d946:	0020      	movs	r0, r4
1004d948:	183b      	adds	r3, r7, r0
1004d94a:	781b      	ldrb	r3, [r3, #0]
1004d94c:	183a      	adds	r2, r7, r0
1004d94e:	1c59      	adds	r1, r3, #1
1004d950:	7011      	strb	r1, [r2, #0]
1004d952:	001a      	movs	r2, r3
1004d954:	697b      	ldr	r3, [r7, #20]
1004d956:	189b      	adds	r3, r3, r2
1004d958:	2201      	movs	r2, #1
1004d95a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
1004d95c:	183b      	adds	r3, r7, r0
1004d95e:	781b      	ldrb	r3, [r3, #0]
1004d960:	183a      	adds	r2, r7, r0
1004d962:	1c59      	adds	r1, r3, #1
1004d964:	7011      	strb	r1, [r2, #0]
1004d966:	001a      	movs	r2, r3
1004d968:	697b      	ldr	r3, [r7, #20]
1004d96a:	189b      	adds	r3, r3, r2
1004d96c:	2215      	movs	r2, #21
1004d96e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
1004d970:	4a29      	ldr	r2, [pc, #164]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d972:	23aa      	movs	r3, #170	@ 0xaa
1004d974:	005b      	lsls	r3, r3, #1
1004d976:	58d1      	ldr	r1, [r2, r3]
1004d978:	183b      	adds	r3, r7, r0
1004d97a:	781b      	ldrb	r3, [r3, #0]
1004d97c:	0004      	movs	r4, r0
1004d97e:	183a      	adds	r2, r7, r0
1004d980:	1c58      	adds	r0, r3, #1
1004d982:	7010      	strb	r0, [r2, #0]
1004d984:	001a      	movs	r2, r3
1004d986:	697b      	ldr	r3, [r7, #20]
1004d988:	189b      	adds	r3, r3, r2
1004d98a:	b2ca      	uxtb	r2, r1
1004d98c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004d98e:	0020      	movs	r0, r4
1004d990:	183b      	adds	r3, r7, r0
1004d992:	781b      	ldrb	r3, [r3, #0]
1004d994:	183a      	adds	r2, r7, r0
1004d996:	1c59      	adds	r1, r3, #1
1004d998:	7011      	strb	r1, [r2, #0]
1004d99a:	001a      	movs	r2, r3
1004d99c:	697b      	ldr	r3, [r7, #20]
1004d99e:	189b      	adds	r3, r3, r2
1004d9a0:	2201      	movs	r2, #1
1004d9a2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
1004d9a4:	183b      	adds	r3, r7, r0
1004d9a6:	781b      	ldrb	r3, [r3, #0]
1004d9a8:	183a      	adds	r2, r7, r0
1004d9aa:	1c59      	adds	r1, r3, #1
1004d9ac:	7011      	strb	r1, [r2, #0]
1004d9ae:	001a      	movs	r2, r3
1004d9b0:	697b      	ldr	r3, [r7, #20]
1004d9b2:	189b      	adds	r3, r3, r2
1004d9b4:	221a      	movs	r2, #26
1004d9b6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
1004d9b8:	4a17      	ldr	r2, [pc, #92]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004d9ba:	23b4      	movs	r3, #180	@ 0xb4
1004d9bc:	005b      	lsls	r3, r3, #1
1004d9be:	58d1      	ldr	r1, [r2, r3]
1004d9c0:	183b      	adds	r3, r7, r0
1004d9c2:	781b      	ldrb	r3, [r3, #0]
1004d9c4:	0004      	movs	r4, r0
1004d9c6:	183a      	adds	r2, r7, r0
1004d9c8:	1c58      	adds	r0, r3, #1
1004d9ca:	7010      	strb	r0, [r2, #0]
1004d9cc:	001a      	movs	r2, r3
1004d9ce:	697b      	ldr	r3, [r7, #20]
1004d9d0:	189b      	adds	r3, r3, r2
1004d9d2:	b2ca      	uxtb	r2, r1
1004d9d4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004d9d6:	0020      	movs	r0, r4
1004d9d8:	183b      	adds	r3, r7, r0
1004d9da:	781b      	ldrb	r3, [r3, #0]
1004d9dc:	183a      	adds	r2, r7, r0
1004d9de:	1c59      	adds	r1, r3, #1
1004d9e0:	7011      	strb	r1, [r2, #0]
1004d9e2:	001a      	movs	r2, r3
1004d9e4:	697b      	ldr	r3, [r7, #20]
1004d9e6:	189b      	adds	r3, r3, r2
1004d9e8:	2201      	movs	r2, #1
1004d9ea:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
1004d9ec:	183b      	adds	r3, r7, r0
1004d9ee:	781b      	ldrb	r3, [r3, #0]
1004d9f0:	183a      	adds	r2, r7, r0
1004d9f2:	1c59      	adds	r1, r3, #1
1004d9f4:	7011      	strb	r1, [r2, #0]
1004d9f6:	001a      	movs	r2, r3
1004d9f8:	697b      	ldr	r3, [r7, #20]
1004d9fa:	189b      	adds	r3, r3, r2
1004d9fc:	2222      	movs	r2, #34	@ 0x22
1004d9fe:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
1004da00:	4a05      	ldr	r2, [pc, #20]	@ (1004da18 <HAL_RADIO_Init+0x488>)
1004da02:	23c4      	movs	r3, #196	@ 0xc4
1004da04:	005b      	lsls	r3, r3, #1
1004da06:	58d1      	ldr	r1, [r2, r3]
1004da08:	183b      	adds	r3, r7, r0
1004da0a:	781b      	ldrb	r3, [r3, #0]
1004da0c:	0004      	movs	r4, r0
1004da0e:	e005      	b.n	1004da1c <HAL_RADIO_Init+0x48c>
1004da10:	200000c0 	.word	0x200000c0
1004da14:	60001800 	.word	0x60001800
1004da18:	60001400 	.word	0x60001400
1004da1c:	183a      	adds	r2, r7, r0
1004da1e:	1c58      	adds	r0, r3, #1
1004da20:	7010      	strb	r0, [r2, #0]
1004da22:	001a      	movs	r2, r3
1004da24:	697b      	ldr	r3, [r7, #20]
1004da26:	189b      	adds	r3, r3, r2
1004da28:	b2ca      	uxtb	r2, r1
1004da2a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004da2c:	0020      	movs	r0, r4
1004da2e:	183b      	adds	r3, r7, r0
1004da30:	781b      	ldrb	r3, [r3, #0]
1004da32:	183a      	adds	r2, r7, r0
1004da34:	1c59      	adds	r1, r3, #1
1004da36:	7011      	strb	r1, [r2, #0]
1004da38:	001a      	movs	r2, r3
1004da3a:	697b      	ldr	r3, [r7, #20]
1004da3c:	189b      	adds	r3, r3, r2
1004da3e:	2201      	movs	r2, #1
1004da40:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
1004da42:	183b      	adds	r3, r7, r0
1004da44:	781b      	ldrb	r3, [r3, #0]
1004da46:	183a      	adds	r2, r7, r0
1004da48:	1c59      	adds	r1, r3, #1
1004da4a:	7011      	strb	r1, [r2, #0]
1004da4c:	001a      	movs	r2, r3
1004da4e:	697b      	ldr	r3, [r7, #20]
1004da50:	189b      	adds	r3, r3, r2
1004da52:	2221      	movs	r2, #33	@ 0x21
1004da54:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004da56:	4a6d      	ldr	r2, [pc, #436]	@ (1004dc0c <HAL_RADIO_Init+0x67c>)
1004da58:	23c2      	movs	r3, #194	@ 0xc2
1004da5a:	005b      	lsls	r3, r3, #1
1004da5c:	58d1      	ldr	r1, [r2, r3]
1004da5e:	183b      	adds	r3, r7, r0
1004da60:	781b      	ldrb	r3, [r3, #0]
1004da62:	0004      	movs	r4, r0
1004da64:	183a      	adds	r2, r7, r0
1004da66:	1c58      	adds	r0, r3, #1
1004da68:	7010      	strb	r0, [r2, #0]
1004da6a:	001a      	movs	r2, r3
1004da6c:	697b      	ldr	r3, [r7, #20]
1004da6e:	189b      	adds	r3, r3, r2
1004da70:	b2ca      	uxtb	r2, r1
1004da72:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004da74:	0020      	movs	r0, r4
1004da76:	183b      	adds	r3, r7, r0
1004da78:	781b      	ldrb	r3, [r3, #0]
1004da7a:	183a      	adds	r2, r7, r0
1004da7c:	1c59      	adds	r1, r3, #1
1004da7e:	7011      	strb	r1, [r2, #0]
1004da80:	001a      	movs	r2, r3
1004da82:	697b      	ldr	r3, [r7, #20]
1004da84:	189b      	adds	r3, r3, r2
1004da86:	2201      	movs	r2, #1
1004da88:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
1004da8a:	183b      	adds	r3, r7, r0
1004da8c:	781b      	ldrb	r3, [r3, #0]
1004da8e:	183a      	adds	r2, r7, r0
1004da90:	1c59      	adds	r1, r3, #1
1004da92:	7011      	strb	r1, [r2, #0]
1004da94:	001a      	movs	r2, r3
1004da96:	697b      	ldr	r3, [r7, #20]
1004da98:	189b      	adds	r3, r3, r2
1004da9a:	2223      	movs	r2, #35	@ 0x23
1004da9c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
1004da9e:	4a5b      	ldr	r2, [pc, #364]	@ (1004dc0c <HAL_RADIO_Init+0x67c>)
1004daa0:	23c6      	movs	r3, #198	@ 0xc6
1004daa2:	005b      	lsls	r3, r3, #1
1004daa4:	58d1      	ldr	r1, [r2, r3]
1004daa6:	183b      	adds	r3, r7, r0
1004daa8:	781b      	ldrb	r3, [r3, #0]
1004daaa:	0004      	movs	r4, r0
1004daac:	183a      	adds	r2, r7, r0
1004daae:	1c58      	adds	r0, r3, #1
1004dab0:	7010      	strb	r0, [r2, #0]
1004dab2:	001a      	movs	r2, r3
1004dab4:	697b      	ldr	r3, [r7, #20]
1004dab6:	189b      	adds	r3, r3, r2
1004dab8:	b2ca      	uxtb	r2, r1
1004daba:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004dabc:	0020      	movs	r0, r4
1004dabe:	183b      	adds	r3, r7, r0
1004dac0:	781b      	ldrb	r3, [r3, #0]
1004dac2:	183a      	adds	r2, r7, r0
1004dac4:	1c59      	adds	r1, r3, #1
1004dac6:	7011      	strb	r1, [r2, #0]
1004dac8:	001a      	movs	r2, r3
1004daca:	697b      	ldr	r3, [r7, #20]
1004dacc:	189b      	adds	r3, r3, r2
1004dace:	2201      	movs	r2, #1
1004dad0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
1004dad2:	183b      	adds	r3, r7, r0
1004dad4:	781b      	ldrb	r3, [r3, #0]
1004dad6:	183a      	adds	r2, r7, r0
1004dad8:	1c59      	adds	r1, r3, #1
1004dada:	7011      	strb	r1, [r2, #0]
1004dadc:	001a      	movs	r2, r3
1004dade:	697b      	ldr	r3, [r7, #20]
1004dae0:	189b      	adds	r3, r3, r2
1004dae2:	221b      	movs	r2, #27
1004dae4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
1004dae6:	4a49      	ldr	r2, [pc, #292]	@ (1004dc0c <HAL_RADIO_Init+0x67c>)
1004dae8:	23b6      	movs	r3, #182	@ 0xb6
1004daea:	005b      	lsls	r3, r3, #1
1004daec:	58d1      	ldr	r1, [r2, r3]
1004daee:	183b      	adds	r3, r7, r0
1004daf0:	781b      	ldrb	r3, [r3, #0]
1004daf2:	0004      	movs	r4, r0
1004daf4:	183a      	adds	r2, r7, r0
1004daf6:	1c58      	adds	r0, r3, #1
1004daf8:	7010      	strb	r0, [r2, #0]
1004dafa:	001a      	movs	r2, r3
1004dafc:	697b      	ldr	r3, [r7, #20]
1004dafe:	189b      	adds	r3, r3, r2
1004db00:	b2ca      	uxtb	r2, r1
1004db02:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
1004db04:	0020      	movs	r0, r4
1004db06:	183b      	adds	r3, r7, r0
1004db08:	781b      	ldrb	r3, [r3, #0]
1004db0a:	183a      	adds	r2, r7, r0
1004db0c:	1c59      	adds	r1, r3, #1
1004db0e:	7011      	strb	r1, [r2, #0]
1004db10:	001a      	movs	r2, r3
1004db12:	697b      	ldr	r3, [r7, #20]
1004db14:	189b      	adds	r3, r3, r2
1004db16:	2201      	movs	r2, #1
1004db18:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
1004db1a:	183b      	adds	r3, r7, r0
1004db1c:	781b      	ldrb	r3, [r3, #0]
1004db1e:	183a      	adds	r2, r7, r0
1004db20:	1c59      	adds	r1, r3, #1
1004db22:	7011      	strb	r1, [r2, #0]
1004db24:	001a      	movs	r2, r3
1004db26:	697b      	ldr	r3, [r7, #20]
1004db28:	189b      	adds	r3, r3, r2
1004db2a:	2290      	movs	r2, #144	@ 0x90
1004db2c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
1004db2e:	4a37      	ldr	r2, [pc, #220]	@ (1004dc0c <HAL_RADIO_Init+0x67c>)
1004db30:	23d0      	movs	r3, #208	@ 0xd0
1004db32:	009b      	lsls	r3, r3, #2
1004db34:	58d1      	ldr	r1, [r2, r3]
1004db36:	183b      	adds	r3, r7, r0
1004db38:	781b      	ldrb	r3, [r3, #0]
1004db3a:	0004      	movs	r4, r0
1004db3c:	183a      	adds	r2, r7, r0
1004db3e:	1c58      	adds	r0, r3, #1
1004db40:	7010      	strb	r0, [r2, #0]
1004db42:	001a      	movs	r2, r3
1004db44:	697b      	ldr	r3, [r7, #20]
1004db46:	189b      	adds	r3, r3, r2
1004db48:	b2ca      	uxtb	r2, r1
1004db4a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004db4c:	0020      	movs	r0, r4
1004db4e:	183b      	adds	r3, r7, r0
1004db50:	781b      	ldrb	r3, [r3, #0]
1004db52:	183a      	adds	r2, r7, r0
1004db54:	1c59      	adds	r1, r3, #1
1004db56:	7011      	strb	r1, [r2, #0]
1004db58:	001a      	movs	r2, r3
1004db5a:	697b      	ldr	r3, [r7, #20]
1004db5c:	189b      	adds	r3, r3, r2
1004db5e:	2201      	movs	r2, #1
1004db60:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
1004db62:	183b      	adds	r3, r7, r0
1004db64:	781b      	ldrb	r3, [r3, #0]
1004db66:	183a      	adds	r2, r7, r0
1004db68:	1c59      	adds	r1, r3, #1
1004db6a:	7011      	strb	r1, [r2, #0]
1004db6c:	001a      	movs	r2, r3
1004db6e:	697b      	ldr	r3, [r7, #20]
1004db70:	189b      	adds	r3, r3, r2
1004db72:	2291      	movs	r2, #145	@ 0x91
1004db74:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
1004db76:	4a25      	ldr	r2, [pc, #148]	@ (1004dc0c <HAL_RADIO_Init+0x67c>)
1004db78:	23d1      	movs	r3, #209	@ 0xd1
1004db7a:	009b      	lsls	r3, r3, #2
1004db7c:	58d1      	ldr	r1, [r2, r3]
1004db7e:	183b      	adds	r3, r7, r0
1004db80:	781b      	ldrb	r3, [r3, #0]
1004db82:	0004      	movs	r4, r0
1004db84:	183a      	adds	r2, r7, r0
1004db86:	1c58      	adds	r0, r3, #1
1004db88:	7010      	strb	r0, [r2, #0]
1004db8a:	001a      	movs	r2, r3
1004db8c:	697b      	ldr	r3, [r7, #20]
1004db8e:	189b      	adds	r3, r3, r2
1004db90:	b2ca      	uxtb	r2, r1
1004db92:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
1004db94:	193b      	adds	r3, r7, r4
1004db96:	781b      	ldrb	r3, [r3, #0]
1004db98:	193a      	adds	r2, r7, r4
1004db9a:	1c59      	adds	r1, r3, #1
1004db9c:	7011      	strb	r1, [r2, #0]
1004db9e:	001a      	movs	r2, r3
1004dba0:	697b      	ldr	r3, [r7, #20]
1004dba2:	189b      	adds	r3, r3, r2
1004dba4:	2200      	movs	r2, #0
1004dba6:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
1004dba8:	4a19      	ldr	r2, [pc, #100]	@ (1004dc10 <HAL_RADIO_Init+0x680>)
1004dbaa:	4b1a      	ldr	r3, [pc, #104]	@ (1004dc14 <HAL_RADIO_Init+0x684>)
1004dbac:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
1004dbae:	4a18      	ldr	r2, [pc, #96]	@ (1004dc10 <HAL_RADIO_Init+0x680>)
1004dbb0:	4b18      	ldr	r3, [pc, #96]	@ (1004dc14 <HAL_RADIO_Init+0x684>)
1004dbb2:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
1004dbb4:	4a18      	ldr	r2, [pc, #96]	@ (1004dc18 <HAL_RADIO_Init+0x688>)
1004dbb6:	4b17      	ldr	r3, [pc, #92]	@ (1004dc14 <HAL_RADIO_Init+0x684>)
1004dbb8:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
1004dbba:	4b16      	ldr	r3, [pc, #88]	@ (1004dc14 <HAL_RADIO_Init+0x684>)
1004dbbc:	2200      	movs	r2, #0
1004dbbe:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
1004dbc0:	4b14      	ldr	r3, [pc, #80]	@ (1004dc14 <HAL_RADIO_Init+0x684>)
1004dbc2:	681b      	ldr	r3, [r3, #0]
1004dbc4:	0018      	movs	r0, r3
1004dbc6:	f7ff fb3d 	bl	1004d244 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
1004dbca:	4b10      	ldr	r3, [pc, #64]	@ (1004dc0c <HAL_RADIO_Init+0x67c>)
1004dbcc:	2201      	movs	r2, #1
1004dbce:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
1004dbd0:	f7ff fc8c 	bl	1004d4ec <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
1004dbd4:	23c0      	movs	r3, #192	@ 0xc0
1004dbd6:	05db      	lsls	r3, r3, #23
1004dbd8:	685b      	ldr	r3, [r3, #4]
1004dbda:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
1004dbdc:	23c0      	movs	r3, #192	@ 0xc0
1004dbde:	05db      	lsls	r3, r3, #23
1004dbe0:	68fa      	ldr	r2, [r7, #12]
1004dbe2:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
1004dbe4:	4b0d      	ldr	r3, [pc, #52]	@ (1004dc1c <HAL_RADIO_Init+0x68c>)
1004dbe6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004dbe8:	4b0c      	ldr	r3, [pc, #48]	@ (1004dc1c <HAL_RADIO_Init+0x68c>)
1004dbea:	2101      	movs	r1, #1
1004dbec:	430a      	orrs	r2, r1
1004dbee:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
1004dbf0:	4b0a      	ldr	r3, [pc, #40]	@ (1004dc1c <HAL_RADIO_Init+0x68c>)
1004dbf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004dbf4:	4b09      	ldr	r3, [pc, #36]	@ (1004dc1c <HAL_RADIO_Init+0x68c>)
1004dbf6:	2101      	movs	r1, #1
1004dbf8:	430a      	orrs	r2, r1
1004dbfa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
1004dbfc:	23c0      	movs	r3, #192	@ 0xc0
1004dbfe:	05db      	lsls	r3, r3, #23
1004dc00:	685b      	ldr	r3, [r3, #4]
1004dc02:	60fb      	str	r3, [r7, #12]

  return;
1004dc04:	46c0      	nop			@ (mov r8, r8)
}
1004dc06:	46bd      	mov	sp, r7
1004dc08:	b00d      	add	sp, #52	@ 0x34
1004dc0a:	bd90      	pop	{r4, r7, pc}
1004dc0c:	60001400 	.word	0x60001400
1004dc10:	20000fa8 	.word	0x20000fa8
1004dc14:	20000f98 	.word	0x20000f98
1004dc18:	20000fa4 	.word	0x20000fa4
1004dc1c:	60001800 	.word	0x60001800

1004dc20 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
1004dc20:	b580      	push	{r7, lr}
1004dc22:	b086      	sub	sp, #24
1004dc24:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
1004dc26:	4a24      	ldr	r2, [pc, #144]	@ (1004dcb8 <HAL_RADIO_ReadRSSI+0x98>)
1004dc28:	23a9      	movs	r3, #169	@ 0xa9
1004dc2a:	009b      	lsls	r3, r3, #2
1004dc2c:	58d3      	ldr	r3, [r2, r3]
1004dc2e:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
1004dc30:	4a21      	ldr	r2, [pc, #132]	@ (1004dcb8 <HAL_RADIO_ReadRSSI+0x98>)
1004dc32:	23aa      	movs	r3, #170	@ 0xaa
1004dc34:	009b      	lsls	r3, r3, #2
1004dc36:	58d3      	ldr	r3, [r2, r3]
1004dc38:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
1004dc3a:	68bb      	ldr	r3, [r7, #8]
1004dc3c:	021b      	lsls	r3, r3, #8
1004dc3e:	041b      	lsls	r3, r3, #16
1004dc40:	0c1a      	lsrs	r2, r3, #16
1004dc42:	68fb      	ldr	r3, [r7, #12]
1004dc44:	21ff      	movs	r1, #255	@ 0xff
1004dc46:	400b      	ands	r3, r1
1004dc48:	4313      	orrs	r3, r2
1004dc4a:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
1004dc4c:	4a1a      	ldr	r2, [pc, #104]	@ (1004dcb8 <HAL_RADIO_ReadRSSI+0x98>)
1004dc4e:	23ab      	movs	r3, #171	@ 0xab
1004dc50:	009b      	lsls	r3, r3, #2
1004dc52:	58d3      	ldr	r3, [r2, r3]
1004dc54:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
1004dc56:	693b      	ldr	r3, [r7, #16]
1004dc58:	2b00      	cmp	r3, #0
1004dc5a:	d002      	beq.n	1004dc62 <HAL_RADIO_ReadRSSI+0x42>
1004dc5c:	687b      	ldr	r3, [r7, #4]
1004dc5e:	2b0b      	cmp	r3, #11
1004dc60:	d902      	bls.n	1004dc68 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
1004dc62:	237f      	movs	r3, #127	@ 0x7f
1004dc64:	617b      	str	r3, [r7, #20]
1004dc66:	e020      	b.n	1004dcaa <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
1004dc68:	687a      	ldr	r2, [r7, #4]
1004dc6a:	0013      	movs	r3, r2
1004dc6c:	005b      	lsls	r3, r3, #1
1004dc6e:	189b      	adds	r3, r3, r2
1004dc70:	005b      	lsls	r3, r3, #1
1004dc72:	3b77      	subs	r3, #119	@ 0x77
1004dc74:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
1004dc76:	e005      	b.n	1004dc84 <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
1004dc78:	697b      	ldr	r3, [r7, #20]
1004dc7a:	3306      	adds	r3, #6
1004dc7c:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
1004dc7e:	693b      	ldr	r3, [r7, #16]
1004dc80:	085b      	lsrs	r3, r3, #1
1004dc82:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
1004dc84:	693b      	ldr	r3, [r7, #16]
1004dc86:	2b1e      	cmp	r3, #30
1004dc88:	d8f6      	bhi.n	1004dc78 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
1004dc8a:	693a      	ldr	r2, [r7, #16]
1004dc8c:	0013      	movs	r3, r2
1004dc8e:	005b      	lsls	r3, r3, #1
1004dc90:	189b      	adds	r3, r3, r2
1004dc92:	009b      	lsls	r3, r3, #2
1004dc94:	189b      	adds	r3, r3, r2
1004dc96:	015b      	lsls	r3, r3, #5
1004dc98:	189b      	adds	r3, r3, r2
1004dc9a:	4a08      	ldr	r2, [pc, #32]	@ (1004dcbc <HAL_RADIO_ReadRSSI+0x9c>)
1004dc9c:	4694      	mov	ip, r2
1004dc9e:	4463      	add	r3, ip
1004dca0:	0a9b      	lsrs	r3, r3, #10
1004dca2:	001a      	movs	r2, r3
1004dca4:	697b      	ldr	r3, [r7, #20]
1004dca6:	189b      	adds	r3, r3, r2
1004dca8:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
1004dcaa:	697b      	ldr	r3, [r7, #20]
1004dcac:	b25b      	sxtb	r3, r3
}
1004dcae:	0018      	movs	r0, r3
1004dcb0:	46bd      	mov	sp, r7
1004dcb2:	b006      	add	sp, #24
1004dcb4:	bd80      	pop	{r7, pc}
1004dcb6:	46c0      	nop			@ (mov r8, r8)
1004dcb8:	60001400 	.word	0x60001400
1004dcbc:	000046a0 	.word	0x000046a0

1004dcc0 <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
1004dcc0:	b580      	push	{r7, lr}
1004dcc2:	b082      	sub	sp, #8
1004dcc4:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
1004dcc6:	23c0      	movs	r3, #192	@ 0xc0
1004dcc8:	05db      	lsls	r3, r3, #23
1004dcca:	69db      	ldr	r3, [r3, #28]
1004dccc:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
1004dcce:	23c0      	movs	r3, #192	@ 0xc0
1004dcd0:	05db      	lsls	r3, r3, #23
1004dcd2:	685b      	ldr	r3, [r3, #4]
1004dcd4:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
1004dcd6:	23c0      	movs	r3, #192	@ 0xc0
1004dcd8:	05db      	lsls	r3, r3, #23
1004dcda:	683a      	ldr	r2, [r7, #0]
1004dcdc:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
1004dcde:	f000 fdd5 	bl	1004e88c <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
1004dce2:	687a      	ldr	r2, [r7, #4]
1004dce4:	683b      	ldr	r3, [r7, #0]
1004dce6:	4313      	orrs	r3, r2
1004dce8:	0018      	movs	r0, r3
1004dcea:	f7f6 f8c8 	bl	10043e7e <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
1004dcee:	f000 fdc7 	bl	1004e880 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
1004dcf2:	23c0      	movs	r3, #192	@ 0xc0
1004dcf4:	05db      	lsls	r3, r3, #23
1004dcf6:	685b      	ldr	r3, [r3, #4]
1004dcf8:	603b      	str	r3, [r7, #0]
}
1004dcfa:	46c0      	nop			@ (mov r8, r8)
1004dcfc:	46bd      	mov	sp, r7
1004dcfe:	b002      	add	sp, #8
1004dd00:	bd80      	pop	{r7, pc}

1004dd02 <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
1004dd02:	b580      	push	{r7, lr}
1004dd04:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
1004dd06:	f7fd f805 	bl	1004ad14 <HAL_RADIO_TxRxSeqCallback>
}
1004dd0a:	46c0      	nop			@ (mov r8, r8)
1004dd0c:	46bd      	mov	sp, r7
1004dd0e:	bd80      	pop	{r7, pc}

1004dd10 <__NVIC_EnableIRQ>:
{
1004dd10:	b580      	push	{r7, lr}
1004dd12:	b082      	sub	sp, #8
1004dd14:	af00      	add	r7, sp, #0
1004dd16:	0002      	movs	r2, r0
1004dd18:	1dfb      	adds	r3, r7, #7
1004dd1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004dd1c:	1dfb      	adds	r3, r7, #7
1004dd1e:	781b      	ldrb	r3, [r3, #0]
1004dd20:	2b7f      	cmp	r3, #127	@ 0x7f
1004dd22:	d809      	bhi.n	1004dd38 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004dd24:	1dfb      	adds	r3, r7, #7
1004dd26:	781b      	ldrb	r3, [r3, #0]
1004dd28:	001a      	movs	r2, r3
1004dd2a:	231f      	movs	r3, #31
1004dd2c:	401a      	ands	r2, r3
1004dd2e:	4b04      	ldr	r3, [pc, #16]	@ (1004dd40 <__NVIC_EnableIRQ+0x30>)
1004dd30:	2101      	movs	r1, #1
1004dd32:	4091      	lsls	r1, r2
1004dd34:	000a      	movs	r2, r1
1004dd36:	601a      	str	r2, [r3, #0]
}
1004dd38:	46c0      	nop			@ (mov r8, r8)
1004dd3a:	46bd      	mov	sp, r7
1004dd3c:	b002      	add	sp, #8
1004dd3e:	bd80      	pop	{r7, pc}
1004dd40:	e000e100 	.word	0xe000e100

1004dd44 <LL_RADIO_TIMER_EnableTimer1>:
{
1004dd44:	b580      	push	{r7, lr}
1004dd46:	b082      	sub	sp, #8
1004dd48:	af00      	add	r7, sp, #0
1004dd4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
1004dd4c:	687b      	ldr	r3, [r7, #4]
1004dd4e:	68db      	ldr	r3, [r3, #12]
1004dd50:	2203      	movs	r2, #3
1004dd52:	4393      	bics	r3, r2
1004dd54:	2202      	movs	r2, #2
1004dd56:	431a      	orrs	r2, r3
1004dd58:	687b      	ldr	r3, [r7, #4]
1004dd5a:	60da      	str	r2, [r3, #12]
}
1004dd5c:	46c0      	nop			@ (mov r8, r8)
1004dd5e:	46bd      	mov	sp, r7
1004dd60:	b002      	add	sp, #8
1004dd62:	bd80      	pop	{r7, pc}

1004dd64 <LL_RADIO_TIMER_DisableTimer1>:
{
1004dd64:	b580      	push	{r7, lr}
1004dd66:	b082      	sub	sp, #8
1004dd68:	af00      	add	r7, sp, #0
1004dd6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004dd6c:	687b      	ldr	r3, [r7, #4]
1004dd6e:	68db      	ldr	r3, [r3, #12]
1004dd70:	2203      	movs	r2, #3
1004dd72:	4393      	bics	r3, r2
1004dd74:	001a      	movs	r2, r3
1004dd76:	687b      	ldr	r3, [r7, #4]
1004dd78:	60da      	str	r2, [r3, #12]
}
1004dd7a:	46c0      	nop			@ (mov r8, r8)
1004dd7c:	46bd      	mov	sp, r7
1004dd7e:	b002      	add	sp, #8
1004dd80:	bd80      	pop	{r7, pc}

1004dd82 <LL_RADIO_TIMER_IsEnabledTimer1>:
{
1004dd82:	b580      	push	{r7, lr}
1004dd84:	b082      	sub	sp, #8
1004dd86:	af00      	add	r7, sp, #0
1004dd88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_1)) ? 1UL : 0UL);
1004dd8a:	687b      	ldr	r3, [r7, #4]
1004dd8c:	68db      	ldr	r3, [r3, #12]
1004dd8e:	2203      	movs	r2, #3
1004dd90:	4013      	ands	r3, r2
1004dd92:	2b02      	cmp	r3, #2
1004dd94:	d101      	bne.n	1004dd9a <LL_RADIO_TIMER_IsEnabledTimer1+0x18>
1004dd96:	2301      	movs	r3, #1
1004dd98:	e000      	b.n	1004dd9c <LL_RADIO_TIMER_IsEnabledTimer1+0x1a>
1004dd9a:	2300      	movs	r3, #0
}
1004dd9c:	0018      	movs	r0, r3
1004dd9e:	46bd      	mov	sp, r7
1004dda0:	b002      	add	sp, #8
1004dda2:	bd80      	pop	{r7, pc}

1004dda4 <LL_RADIO_TIMER_DisableTimer2>:
{
1004dda4:	b580      	push	{r7, lr}
1004dda6:	b082      	sub	sp, #8
1004dda8:	af00      	add	r7, sp, #0
1004ddaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004ddac:	687b      	ldr	r3, [r7, #4]
1004ddae:	68db      	ldr	r3, [r3, #12]
1004ddb0:	2203      	movs	r2, #3
1004ddb2:	4393      	bics	r3, r2
1004ddb4:	001a      	movs	r2, r3
1004ddb6:	687b      	ldr	r3, [r7, #4]
1004ddb8:	60da      	str	r2, [r3, #12]
}
1004ddba:	46c0      	nop			@ (mov r8, r8)
1004ddbc:	46bd      	mov	sp, r7
1004ddbe:	b002      	add	sp, #8
1004ddc0:	bd80      	pop	{r7, pc}

1004ddc2 <LL_RADIO_TIMER_IsEnabledTimer2>:
{
1004ddc2:	b580      	push	{r7, lr}
1004ddc4:	b082      	sub	sp, #8
1004ddc6:	af00      	add	r7, sp, #0
1004ddc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_2)) ? 1UL : 0UL);
1004ddca:	687b      	ldr	r3, [r7, #4]
1004ddcc:	68db      	ldr	r3, [r3, #12]
1004ddce:	2203      	movs	r2, #3
1004ddd0:	4013      	ands	r3, r2
1004ddd2:	2b03      	cmp	r3, #3
1004ddd4:	d101      	bne.n	1004ddda <LL_RADIO_TIMER_IsEnabledTimer2+0x18>
1004ddd6:	2301      	movs	r3, #1
1004ddd8:	e000      	b.n	1004dddc <LL_RADIO_TIMER_IsEnabledTimer2+0x1a>
1004ddda:	2300      	movs	r3, #0
}
1004dddc:	0018      	movs	r0, r3
1004ddde:	46bd      	mov	sp, r7
1004dde0:	b002      	add	sp, #8
1004dde2:	bd80      	pop	{r7, pc}

1004dde4 <LL_RADIO_TIMER_SetTimeout>:
{
1004dde4:	b580      	push	{r7, lr}
1004dde6:	b082      	sub	sp, #8
1004dde8:	af00      	add	r7, sp, #0
1004ddea:	6078      	str	r0, [r7, #4]
1004ddec:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
1004ddee:	687b      	ldr	r3, [r7, #4]
1004ddf0:	683a      	ldr	r2, [r7, #0]
1004ddf2:	611a      	str	r2, [r3, #16]
}
1004ddf4:	46c0      	nop			@ (mov r8, r8)
1004ddf6:	46bd      	mov	sp, r7
1004ddf8:	b002      	add	sp, #8
1004ddfa:	bd80      	pop	{r7, pc}

1004ddfc <LL_RADIO_TIMER_GetTimeout>:
{
1004ddfc:	b580      	push	{r7, lr}
1004ddfe:	b082      	sub	sp, #8
1004de00:	af00      	add	r7, sp, #0
1004de02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(BLUEx->TIMEOUTREG));
1004de04:	687b      	ldr	r3, [r7, #4]
1004de06:	691b      	ldr	r3, [r3, #16]
}
1004de08:	0018      	movs	r0, r3
1004de0a:	46bd      	mov	sp, r7
1004de0c:	b002      	add	sp, #8
1004de0e:	bd80      	pop	{r7, pc}

1004de10 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
1004de10:	b580      	push	{r7, lr}
1004de12:	b082      	sub	sp, #8
1004de14:	af00      	add	r7, sp, #0
1004de16:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004de18:	687b      	ldr	r3, [r7, #4]
1004de1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004de1c:	2280      	movs	r2, #128	@ 0x80
1004de1e:	05d2      	lsls	r2, r2, #23
1004de20:	431a      	orrs	r2, r3
1004de22:	687b      	ldr	r3, [r7, #4]
1004de24:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004de26:	46c0      	nop			@ (mov r8, r8)
1004de28:	46bd      	mov	sp, r7
1004de2a:	b002      	add	sp, #8
1004de2c:	bd80      	pop	{r7, pc}
	...

1004de30 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004de30:	b580      	push	{r7, lr}
1004de32:	b082      	sub	sp, #8
1004de34:	af00      	add	r7, sp, #0
1004de36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004de38:	687b      	ldr	r3, [r7, #4]
1004de3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004de3c:	4a03      	ldr	r2, [pc, #12]	@ (1004de4c <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004de3e:	401a      	ands	r2, r3
1004de40:	687b      	ldr	r3, [r7, #4]
1004de42:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004de44:	46c0      	nop			@ (mov r8, r8)
1004de46:	46bd      	mov	sp, r7
1004de48:	b002      	add	sp, #8
1004de4a:	bd80      	pop	{r7, pc}
1004de4c:	bfffffff 	.word	0xbfffffff

1004de50 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>:
{
1004de50:	b580      	push	{r7, lr}
1004de52:	b082      	sub	sp, #8
1004de54:	af00      	add	r7, sp, #0
1004de56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN) == (WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN)) ? 1UL : 0UL);
1004de58:	687b      	ldr	r3, [r7, #4]
1004de5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004de5c:	2380      	movs	r3, #128	@ 0x80
1004de5e:	05db      	lsls	r3, r3, #23
1004de60:	401a      	ands	r2, r3
1004de62:	2380      	movs	r3, #128	@ 0x80
1004de64:	05db      	lsls	r3, r3, #23
1004de66:	429a      	cmp	r2, r3
1004de68:	d101      	bne.n	1004de6e <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x1e>
1004de6a:	2301      	movs	r3, #1
1004de6c:	e000      	b.n	1004de70 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x20>
1004de6e:	2300      	movs	r3, #0
}
1004de70:	0018      	movs	r0, r3
1004de72:	46bd      	mov	sp, r7
1004de74:	b002      	add	sp, #8
1004de76:	bd80      	pop	{r7, pc}

1004de78 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
1004de78:	b580      	push	{r7, lr}
1004de7a:	b082      	sub	sp, #8
1004de7c:	af00      	add	r7, sp, #0
1004de7e:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004de80:	687b      	ldr	r3, [r7, #4]
1004de82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004de84:	2280      	movs	r2, #128	@ 0x80
1004de86:	05d2      	lsls	r2, r2, #23
1004de88:	431a      	orrs	r2, r3
1004de8a:	687b      	ldr	r3, [r7, #4]
1004de8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004de8e:	46c0      	nop			@ (mov r8, r8)
1004de90:	46bd      	mov	sp, r7
1004de92:	b002      	add	sp, #8
1004de94:	bd80      	pop	{r7, pc}
	...

1004de98 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
1004de98:	b580      	push	{r7, lr}
1004de9a:	b082      	sub	sp, #8
1004de9c:	af00      	add	r7, sp, #0
1004de9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004dea0:	687b      	ldr	r3, [r7, #4]
1004dea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004dea4:	4a03      	ldr	r2, [pc, #12]	@ (1004deb4 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
1004dea6:	401a      	ands	r2, r3
1004dea8:	687b      	ldr	r3, [r7, #4]
1004deaa:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004deac:	46c0      	nop			@ (mov r8, r8)
1004deae:	46bd      	mov	sp, r7
1004deb0:	b002      	add	sp, #8
1004deb2:	bd80      	pop	{r7, pc}
1004deb4:	bfffffff 	.word	0xbfffffff

1004deb8 <LL_RADIO_TIMER_SetWakeupOffset>:
{
1004deb8:	b580      	push	{r7, lr}
1004deba:	b082      	sub	sp, #8
1004debc:	af00      	add	r7, sp, #0
1004debe:	6078      	str	r0, [r7, #4]
1004dec0:	000a      	movs	r2, r1
1004dec2:	1cfb      	adds	r3, r7, #3
1004dec4:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
1004dec6:	1cfb      	adds	r3, r7, #3
1004dec8:	781a      	ldrb	r2, [r3, #0]
1004deca:	687b      	ldr	r3, [r7, #4]
1004decc:	609a      	str	r2, [r3, #8]
}
1004dece:	46c0      	nop			@ (mov r8, r8)
1004ded0:	46bd      	mov	sp, r7
1004ded2:	b002      	add	sp, #8
1004ded4:	bd80      	pop	{r7, pc}

1004ded6 <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
1004ded6:	b580      	push	{r7, lr}
1004ded8:	b082      	sub	sp, #8
1004deda:	af00      	add	r7, sp, #0
1004dedc:	6078      	str	r0, [r7, #4]
1004dede:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
1004dee0:	687b      	ldr	r3, [r7, #4]
1004dee2:	683a      	ldr	r2, [r7, #0]
1004dee4:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004dee6:	46c0      	nop			@ (mov r8, r8)
1004dee8:	46bd      	mov	sp, r7
1004deea:	b002      	add	sp, #8
1004deec:	bd80      	pop	{r7, pc}

1004deee <LL_RADIO_TIMER_GetBLEWakeupTime>:
{
1004deee:	b580      	push	{r7, lr}
1004def0:	b082      	sub	sp, #8
1004def2:	af00      	add	r7, sp, #0
1004def4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->BLUE_WAKEUP_TIME));
1004def6:	687b      	ldr	r3, [r7, #4]
1004def8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
1004defa:	0018      	movs	r0, r3
1004defc:	46bd      	mov	sp, r7
1004defe:	b002      	add	sp, #8
1004df00:	bd80      	pop	{r7, pc}

1004df02 <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
1004df02:	b580      	push	{r7, lr}
1004df04:	b082      	sub	sp, #8
1004df06:	af00      	add	r7, sp, #0
1004df08:	6078      	str	r0, [r7, #4]
1004df0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
1004df0c:	687b      	ldr	r3, [r7, #4]
1004df0e:	683a      	ldr	r2, [r7, #0]
1004df10:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004df12:	46c0      	nop			@ (mov r8, r8)
1004df14:	46bd      	mov	sp, r7
1004df16:	b002      	add	sp, #8
1004df18:	bd80      	pop	{r7, pc}

1004df1a <LL_RADIO_TIMER_GetAbsoluteTime>:
{
1004df1a:	b580      	push	{r7, lr}
1004df1c:	b082      	sub	sp, #8
1004df1e:	af00      	add	r7, sp, #0
1004df20:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004df22:	687b      	ldr	r3, [r7, #4]
1004df24:	691b      	ldr	r3, [r3, #16]
}
1004df26:	0018      	movs	r0, r3
1004df28:	46bd      	mov	sp, r7
1004df2a:	b002      	add	sp, #8
1004df2c:	bd80      	pop	{r7, pc}

1004df2e <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
1004df2e:	b580      	push	{r7, lr}
1004df30:	b082      	sub	sp, #8
1004df32:	af00      	add	r7, sp, #0
1004df34:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
1004df36:	687b      	ldr	r3, [r7, #4]
1004df38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004df3a:	2280      	movs	r2, #128	@ 0x80
1004df3c:	0592      	lsls	r2, r2, #22
1004df3e:	431a      	orrs	r2, r3
1004df40:	687b      	ldr	r3, [r7, #4]
1004df42:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004df44:	46c0      	nop			@ (mov r8, r8)
1004df46:	46bd      	mov	sp, r7
1004df48:	b002      	add	sp, #8
1004df4a:	bd80      	pop	{r7, pc}

1004df4c <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
1004df4c:	b580      	push	{r7, lr}
1004df4e:	b082      	sub	sp, #8
1004df50:	af00      	add	r7, sp, #0
1004df52:	6078      	str	r0, [r7, #4]
1004df54:	000a      	movs	r2, r1
1004df56:	1cfb      	adds	r3, r7, #3
1004df58:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
1004df5a:	46c0      	nop			@ (mov r8, r8)
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
#endif
}
1004df5c:	46bd      	mov	sp, r7
1004df5e:	b002      	add	sp, #8
1004df60:	bd80      	pop	{r7, pc}

1004df62 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
1004df62:	b580      	push	{r7, lr}
1004df64:	b082      	sub	sp, #8
1004df66:	af00      	add	r7, sp, #0
1004df68:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
1004df6a:	687b      	ldr	r3, [r7, #4]
1004df6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004df6e:	2201      	movs	r2, #1
1004df70:	431a      	orrs	r2, r3
1004df72:	687b      	ldr	r3, [r7, #4]
1004df74:	649a      	str	r2, [r3, #72]	@ 0x48
}
1004df76:	46c0      	nop			@ (mov r8, r8)
1004df78:	46bd      	mov	sp, r7
1004df7a:	b002      	add	sp, #8
1004df7c:	bd80      	pop	{r7, pc}

1004df7e <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004df7e:	b580      	push	{r7, lr}
1004df80:	b082      	sub	sp, #8
1004df82:	af00      	add	r7, sp, #0
1004df84:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
1004df86:	687b      	ldr	r3, [r7, #4]
1004df88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004df8a:	2201      	movs	r2, #1
1004df8c:	431a      	orrs	r2, r3
1004df8e:	687b      	ldr	r3, [r7, #4]
1004df90:	64da      	str	r2, [r3, #76]	@ 0x4c
}
1004df92:	46c0      	nop			@ (mov r8, r8)
1004df94:	46bd      	mov	sp, r7
1004df96:	b002      	add	sp, #8
1004df98:	bd80      	pop	{r7, pc}

1004df9a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004df9a:	b580      	push	{r7, lr}
1004df9c:	b082      	sub	sp, #8
1004df9e:	af00      	add	r7, sp, #0
1004dfa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
1004dfa2:	687b      	ldr	r3, [r7, #4]
1004dfa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004dfa6:	2201      	movs	r2, #1
1004dfa8:	4013      	ands	r3, r2
1004dfaa:	2b01      	cmp	r3, #1
1004dfac:	d101      	bne.n	1004dfb2 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
1004dfae:	2301      	movs	r3, #1
1004dfb0:	e000      	b.n	1004dfb4 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
1004dfb2:	2300      	movs	r3, #0
}
1004dfb4:	0018      	movs	r0, r3
1004dfb6:	46bd      	mov	sp, r7
1004dfb8:	b002      	add	sp, #8
1004dfba:	bd80      	pop	{r7, pc}

1004dfbc <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
1004dfbc:	b580      	push	{r7, lr}
1004dfbe:	b082      	sub	sp, #8
1004dfc0:	af00      	add	r7, sp, #0
1004dfc2:	6078      	str	r0, [r7, #4]
1004dfc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
1004dfc6:	687b      	ldr	r3, [r7, #4]
1004dfc8:	683a      	ldr	r2, [r7, #0]
1004dfca:	605a      	str	r2, [r3, #4]
}
1004dfcc:	46c0      	nop			@ (mov r8, r8)
1004dfce:	46bd      	mov	sp, r7
1004dfd0:	b002      	add	sp, #8
1004dfd2:	bd80      	pop	{r7, pc}

1004dfd4 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004dfd4:	b580      	push	{r7, lr}
1004dfd6:	b082      	sub	sp, #8
1004dfd8:	af00      	add	r7, sp, #0
1004dfda:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
1004dfdc:	687b      	ldr	r3, [r7, #4]
1004dfde:	2200      	movs	r2, #0
1004dfe0:	609a      	str	r2, [r3, #8]
}
1004dfe2:	46c0      	nop			@ (mov r8, r8)
1004dfe4:	46bd      	mov	sp, r7
1004dfe6:	b002      	add	sp, #8
1004dfe8:	bd80      	pop	{r7, pc}

1004dfea <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004dfea:	b580      	push	{r7, lr}
1004dfec:	b082      	sub	sp, #8
1004dfee:	af00      	add	r7, sp, #0
1004dff0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
1004dff2:	687b      	ldr	r3, [r7, #4]
1004dff4:	689b      	ldr	r3, [r3, #8]
}
1004dff6:	0018      	movs	r0, r3
1004dff8:	46bd      	mov	sp, r7
1004dffa:	b002      	add	sp, #8
1004dffc:	bd80      	pop	{r7, pc}

1004dffe <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004dffe:	b580      	push	{r7, lr}
1004e000:	b082      	sub	sp, #8
1004e002:	af00      	add	r7, sp, #0
1004e004:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
1004e006:	687b      	ldr	r3, [r7, #4]
1004e008:	68db      	ldr	r3, [r3, #12]
}
1004e00a:	0018      	movs	r0, r3
1004e00c:	46bd      	mov	sp, r7
1004e00e:	b002      	add	sp, #8
1004e010:	bd80      	pop	{r7, pc}

1004e012 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004e012:	b580      	push	{r7, lr}
1004e014:	b082      	sub	sp, #8
1004e016:	af00      	add	r7, sp, #0
1004e018:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
1004e01a:	687b      	ldr	r3, [r7, #4]
1004e01c:	691b      	ldr	r3, [r3, #16]
1004e01e:	2201      	movs	r2, #1
1004e020:	431a      	orrs	r2, r3
1004e022:	687b      	ldr	r3, [r7, #4]
1004e024:	611a      	str	r2, [r3, #16]
}
1004e026:	46c0      	nop			@ (mov r8, r8)
1004e028:	46bd      	mov	sp, r7
1004e02a:	b002      	add	sp, #8
1004e02c:	bd80      	pop	{r7, pc}

1004e02e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004e02e:	b580      	push	{r7, lr}
1004e030:	b082      	sub	sp, #8
1004e032:	af00      	add	r7, sp, #0
1004e034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
1004e036:	687b      	ldr	r3, [r7, #4]
1004e038:	691b      	ldr	r3, [r3, #16]
1004e03a:	2201      	movs	r2, #1
1004e03c:	4013      	ands	r3, r2
1004e03e:	2b01      	cmp	r3, #1
1004e040:	d101      	bne.n	1004e046 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004e042:	2301      	movs	r3, #1
1004e044:	e000      	b.n	1004e048 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
1004e046:	2300      	movs	r3, #0
}
1004e048:	0018      	movs	r0, r3
1004e04a:	46bd      	mov	sp, r7
1004e04c:	b002      	add	sp, #8
1004e04e:	bd80      	pop	{r7, pc}

1004e050 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
1004e050:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e052:	b083      	sub	sp, #12
1004e054:	af00      	add	r7, sp, #0
1004e056:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004e058:	4b70      	ldr	r3, [pc, #448]	@ (1004e21c <HAL_RADIO_TIMER_Init+0x1cc>)
1004e05a:	0018      	movs	r0, r3
1004e05c:	f7ff ff8f 	bl	1004df7e <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
1004e060:	4b6e      	ldr	r3, [pc, #440]	@ (1004e21c <HAL_RADIO_TIMER_Init+0x1cc>)
1004e062:	0018      	movs	r0, r3
1004e064:	f7ff ff7d 	bl	1004df62 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
1004e068:	2017      	movs	r0, #23
1004e06a:	f7ff fe51 	bl	1004dd10 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
1004e06e:	2014      	movs	r0, #20
1004e070:	f7ff fe4e 	bl	1004dd10 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
1004e074:	687b      	ldr	r3, [r7, #4]
1004e076:	685b      	ldr	r3, [r3, #4]
1004e078:	1e5a      	subs	r2, r3, #1
1004e07a:	4193      	sbcs	r3, r2
1004e07c:	b2db      	uxtb	r3, r3
1004e07e:	001a      	movs	r2, r3
1004e080:	4b67      	ldr	r3, [pc, #412]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e082:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
1004e084:	4b66      	ldr	r3, [pc, #408]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e086:	781b      	ldrb	r3, [r3, #0]
1004e088:	2b00      	cmp	r3, #0
1004e08a:	d103      	bne.n	1004e094 <HAL_RADIO_TIMER_Init+0x44>
1004e08c:	687b      	ldr	r3, [r7, #4]
1004e08e:	789b      	ldrb	r3, [r3, #2]
1004e090:	2b00      	cmp	r3, #0
1004e092:	d002      	beq.n	1004e09a <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
1004e094:	f000 fd08 	bl	1004eaa8 <_calibrationProcedure>
1004e098:	e010      	b.n	1004e0bc <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
1004e09a:	4b61      	ldr	r3, [pc, #388]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e09c:	22c8      	movs	r2, #200	@ 0xc8
1004e09e:	0352      	lsls	r2, r2, #13
1004e0a0:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
1004e0a2:	4b5f      	ldr	r3, [pc, #380]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e0a4:	22c8      	movs	r2, #200	@ 0xc8
1004e0a6:	0352      	lsls	r2, r2, #13
1004e0a8:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
1004e0aa:	4b5d      	ldr	r3, [pc, #372]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e0ac:	4a5d      	ldr	r2, [pc, #372]	@ (1004e224 <HAL_RADIO_TIMER_Init+0x1d4>)
1004e0ae:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
1004e0b0:	4b5b      	ldr	r3, [pc, #364]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e0b2:	4a5d      	ldr	r2, [pc, #372]	@ (1004e228 <HAL_RADIO_TIMER_Init+0x1d8>)
1004e0b4:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
1004e0b6:	4b5a      	ldr	r3, [pc, #360]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e0b8:	4a5c      	ldr	r2, [pc, #368]	@ (1004e22c <HAL_RADIO_TIMER_Init+0x1dc>)
1004e0ba:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
1004e0bc:	687b      	ldr	r3, [r7, #4]
1004e0be:	685b      	ldr	r3, [r3, #4]
1004e0c0:	2b00      	cmp	r3, #0
1004e0c2:	d108      	bne.n	1004e0d6 <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
1004e0c4:	23a0      	movs	r3, #160	@ 0xa0
1004e0c6:	05db      	lsls	r3, r3, #23
1004e0c8:	0018      	movs	r0, r3
1004e0ca:	f000 fbeb 	bl	1004e8a4 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004e0ce:	0002      	movs	r2, r0
1004e0d0:	4b53      	ldr	r3, [pc, #332]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e0d2:	605a      	str	r2, [r3, #4]
1004e0d4:	e01d      	b.n	1004e112 <HAL_RADIO_TIMER_Init+0xc2>

    
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
1004e0d6:	687b      	ldr	r3, [r7, #4]
1004e0d8:	685b      	ldr	r3, [r3, #4]
1004e0da:	031b      	lsls	r3, r3, #12
1004e0dc:	210a      	movs	r1, #10
1004e0de:	0018      	movs	r0, r3
1004e0e0:	f7f2 f8c2 	bl	10040268 <__udivsi3>
1004e0e4:	0003      	movs	r3, r0
1004e0e6:	001a      	movs	r2, r3
1004e0e8:	4b4d      	ldr	r3, [pc, #308]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e0ea:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004e0ec:	4b4c      	ldr	r3, [pc, #304]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e0ee:	685e      	ldr	r6, [r3, #4]
1004e0f0:	4b4f      	ldr	r3, [pc, #316]	@ (1004e230 <HAL_RADIO_TIMER_Init+0x1e0>)
1004e0f2:	0018      	movs	r0, r3
1004e0f4:	f000 fbd6 	bl	1004e8a4 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004e0f8:	0003      	movs	r3, r0
1004e0fa:	429e      	cmp	r6, r3
1004e0fc:	d202      	bcs.n	1004e104 <HAL_RADIO_TIMER_Init+0xb4>
1004e0fe:	4b48      	ldr	r3, [pc, #288]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e100:	685a      	ldr	r2, [r3, #4]
1004e102:	e004      	b.n	1004e10e <HAL_RADIO_TIMER_Init+0xbe>
1004e104:	4b4a      	ldr	r3, [pc, #296]	@ (1004e230 <HAL_RADIO_TIMER_Init+0x1e0>)
1004e106:	0018      	movs	r0, r3
1004e108:	f000 fbcc 	bl	1004e8a4 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004e10c:	0002      	movs	r2, r0
1004e10e:	4b44      	ldr	r3, [pc, #272]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e110:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004e112:	4b43      	ldr	r3, [pc, #268]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e114:	2200      	movs	r2, #0
1004e116:	721a      	strb	r2, [r3, #8]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
1004e118:	687b      	ldr	r3, [r7, #4]
1004e11a:	881b      	ldrh	r3, [r3, #0]
1004e11c:	001a      	movs	r2, r3
1004e11e:	4b40      	ldr	r3, [pc, #256]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e120:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004e122:	4b3f      	ldr	r3, [pc, #252]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004e126:	b29a      	uxth	r2, r3
1004e128:	4b3d      	ldr	r3, [pc, #244]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e12a:	699b      	ldr	r3, [r3, #24]
1004e12c:	0019      	movs	r1, r3
1004e12e:	0010      	movs	r0, r2
1004e130:	f000 fe2e 	bl	1004ed90 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
1004e134:	4b3a      	ldr	r3, [pc, #232]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e136:	2284      	movs	r2, #132	@ 0x84
1004e138:	2100      	movs	r1, #0
1004e13a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
1004e13c:	4938      	ldr	r1, [pc, #224]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e13e:	2200      	movs	r2, #0
1004e140:	2300      	movs	r3, #0
1004e142:	670a      	str	r2, [r1, #112]	@ 0x70
1004e144:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004e146:	4b35      	ldr	r3, [pc, #212]	@ (1004e21c <HAL_RADIO_TIMER_Init+0x1cc>)
1004e148:	0018      	movs	r0, r3
1004e14a:	f7ff fee6 	bl	1004df1a <LL_RADIO_TIMER_GetAbsoluteTime>
1004e14e:	0002      	movs	r2, r0
1004e150:	4b33      	ldr	r3, [pc, #204]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e152:	2180      	movs	r1, #128	@ 0x80
1004e154:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
1004e156:	4932      	ldr	r1, [pc, #200]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e158:	2200      	movs	r2, #0
1004e15a:	2300      	movs	r3, #0
1004e15c:	678a      	str	r2, [r1, #120]	@ 0x78
1004e15e:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
1004e160:	492f      	ldr	r1, [pc, #188]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e162:	2200      	movs	r2, #0
1004e164:	2300      	movs	r3, #0
1004e166:	628a      	str	r2, [r1, #40]	@ 0x28
1004e168:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
1004e16a:	4b2d      	ldr	r3, [pc, #180]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e16c:	2234      	movs	r2, #52	@ 0x34
1004e16e:	2100      	movs	r1, #0
1004e170:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004e172:	4b2b      	ldr	r3, [pc, #172]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e174:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004e176:	4b2a      	ldr	r3, [pc, #168]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e178:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004e17a:	0019      	movs	r1, r3
1004e17c:	4b2d      	ldr	r3, [pc, #180]	@ (1004e234 <HAL_RADIO_TIMER_Init+0x1e4>)
1004e17e:	001a      	movs	r2, r3
1004e180:	f7f1 ff9e 	bl	100400c0 <blue_unit_conversion>
1004e184:	0002      	movs	r2, r0
1004e186:	4b26      	ldr	r3, [pc, #152]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e188:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
1004e18a:	4b25      	ldr	r3, [pc, #148]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e18c:	7819      	ldrb	r1, [r3, #0]
1004e18e:	4b24      	ldr	r3, [pc, #144]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e190:	2294      	movs	r2, #148	@ 0x94
1004e192:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
1004e194:	4b22      	ldr	r3, [pc, #136]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e196:	228c      	movs	r2, #140	@ 0x8c
1004e198:	2100      	movs	r1, #0
1004e19a:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
1004e19c:	4b20      	ldr	r3, [pc, #128]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e19e:	2290      	movs	r2, #144	@ 0x90
1004e1a0:	2101      	movs	r1, #1
1004e1a2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004e1a4:	4b1e      	ldr	r3, [pc, #120]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e1a6:	2293      	movs	r2, #147	@ 0x93
1004e1a8:	2100      	movs	r1, #0
1004e1aa:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
1004e1ac:	4b1c      	ldr	r3, [pc, #112]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e1ae:	2291      	movs	r2, #145	@ 0x91
1004e1b0:	2100      	movs	r1, #0
1004e1b2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
1004e1b4:	4b1a      	ldr	r3, [pc, #104]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e1b6:	2292      	movs	r2, #146	@ 0x92
1004e1b8:	2100      	movs	r1, #0
1004e1ba:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004e1bc:	4b18      	ldr	r3, [pc, #96]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e1be:	2261      	movs	r2, #97	@ 0x61
1004e1c0:	2100      	movs	r1, #0
1004e1c2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004e1c4:	4b16      	ldr	r3, [pc, #88]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e1c6:	2262      	movs	r2, #98	@ 0x62
1004e1c8:	2100      	movs	r1, #0
1004e1ca:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004e1cc:	4b14      	ldr	r3, [pc, #80]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e1ce:	2263      	movs	r2, #99	@ 0x63
1004e1d0:	2100      	movs	r1, #0
1004e1d2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
1004e1d4:	4912      	ldr	r1, [pc, #72]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e1d6:	2200      	movs	r2, #0
1004e1d8:	2300      	movs	r3, #0
1004e1da:	658a      	str	r2, [r1, #88]	@ 0x58
1004e1dc:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
1004e1de:	4b10      	ldr	r3, [pc, #64]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e1e0:	4a15      	ldr	r2, [pc, #84]	@ (1004e238 <HAL_RADIO_TIMER_Init+0x1e8>)
1004e1e2:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
1004e1e4:	4b0e      	ldr	r3, [pc, #56]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e1e6:	2200      	movs	r2, #0
1004e1e8:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004e1ea:	f000 fb71 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004e1ee:	0002      	movs	r2, r0
1004e1f0:	000b      	movs	r3, r1
1004e1f2:	490b      	ldr	r1, [pc, #44]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e1f4:	6849      	ldr	r1, [r1, #4]
1004e1f6:	000c      	movs	r4, r1
1004e1f8:	2100      	movs	r1, #0
1004e1fa:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004e1fc:	1912      	adds	r2, r2, r4
1004e1fe:	416b      	adcs	r3, r5
1004e200:	490e      	ldr	r1, [pc, #56]	@ (1004e23c <HAL_RADIO_TIMER_Init+0x1ec>)
1004e202:	0008      	movs	r0, r1
1004e204:	f000 fe1a 	bl	1004ee3c <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
1004e208:	4b05      	ldr	r3, [pc, #20]	@ (1004e220 <HAL_RADIO_TIMER_Init+0x1d0>)
1004e20a:	2101      	movs	r1, #1
1004e20c:	0018      	movs	r0, r3
1004e20e:	f000 fcfb 	bl	1004ec08 <_configureTxRxDelay>
}
1004e212:	46c0      	nop			@ (mov r8, r8)
1004e214:	46bd      	mov	sp, r7
1004e216:	b003      	add	sp, #12
1004e218:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e21a:	46c0      	nop			@ (mov r8, r8)
1004e21c:	60001800 	.word	0x60001800
1004e220:	20000fd0 	.word	0x20000fd0
1004e224:	0028f5c2 	.word	0x0028f5c2
1004e228:	00005b8d 	.word	0x00005b8d
1004e22c:	0165ebec 	.word	0x0165ebec
1004e230:	ffffefff 	.word	0xffffefff
1004e234:	00000326 	.word	0x00000326
1004e238:	1004eded 	.word	0x1004eded
1004e23c:	20001010 	.word	0x20001010

1004e240 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
1004e240:	b5b0      	push	{r4, r5, r7, lr}
1004e242:	b090      	sub	sp, #64	@ 0x40
1004e244:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
1004e246:	230f      	movs	r3, #15
1004e248:	18fb      	adds	r3, r7, r3
1004e24a:	2200      	movs	r2, #0
1004e24c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e24e:	f3ef 8310 	mrs	r3, PRIMASK
1004e252:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004e254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
1004e256:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004e258:	b672      	cpsid	i
}
1004e25a:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
1004e25c:	4b9e      	ldr	r3, [pc, #632]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e25e:	2261      	movs	r2, #97	@ 0x61
1004e260:	5c9b      	ldrb	r3, [r3, r2]
1004e262:	2b00      	cmp	r3, #0
1004e264:	d00f      	beq.n	1004e286 <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
1004e266:	4b9c      	ldr	r3, [pc, #624]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e268:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004e26a:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
1004e26c:	f000 fb30 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004e270:	0002      	movs	r2, r0
1004e272:	000b      	movs	r3, r1
1004e274:	42ab      	cmp	r3, r5
1004e276:	d802      	bhi.n	1004e27e <HAL_RADIO_TIMER_Tick+0x3e>
1004e278:	d105      	bne.n	1004e286 <HAL_RADIO_TIMER_Tick+0x46>
1004e27a:	42a2      	cmp	r2, r4
1004e27c:	d903      	bls.n	1004e286 <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
1004e27e:	4b96      	ldr	r3, [pc, #600]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e280:	2261      	movs	r2, #97	@ 0x61
1004e282:	2100      	movs	r1, #0
1004e284:	5499      	strb	r1, [r3, r2]
1004e286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e288:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e28a:	6a3b      	ldr	r3, [r7, #32]
1004e28c:	f383 8810 	msr	PRIMASK, r3
}
1004e290:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004e292:	e06e      	b.n	1004e372 <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
1004e294:	4b90      	ldr	r3, [pc, #576]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e296:	2291      	movs	r2, #145	@ 0x91
1004e298:	5c99      	ldrb	r1, [r3, r2]
1004e29a:	4b8f      	ldr	r3, [pc, #572]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e29c:	2292      	movs	r2, #146	@ 0x92
1004e29e:	5c9a      	ldrb	r2, [r3, r2]
1004e2a0:	232b      	movs	r3, #43	@ 0x2b
1004e2a2:	2008      	movs	r0, #8
1004e2a4:	181b      	adds	r3, r3, r0
1004e2a6:	19db      	adds	r3, r3, r7
1004e2a8:	1a8a      	subs	r2, r1, r2
1004e2aa:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
1004e2ac:	4b8a      	ldr	r3, [pc, #552]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e2ae:	228c      	movs	r2, #140	@ 0x8c
1004e2b0:	589b      	ldr	r3, [r3, r2]
1004e2b2:	183a      	adds	r2, r7, r0
1004e2b4:	0011      	movs	r1, r2
1004e2b6:	0018      	movs	r0, r3
1004e2b8:	f000 ff96 	bl	1004f1e8 <_check_callbacks>
1004e2bc:	0002      	movs	r2, r0
1004e2be:	4b86      	ldr	r3, [pc, #536]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e2c0:	218c      	movs	r1, #140	@ 0x8c
1004e2c2:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
1004e2c4:	68bb      	ldr	r3, [r7, #8]
1004e2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004e2c8:	e010      	b.n	1004e2ec <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
1004e2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e2cc:	691b      	ldr	r3, [r3, #16]
1004e2ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
1004e2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e2d2:	2200      	movs	r2, #0
1004e2d4:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
1004e2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e2d8:	689b      	ldr	r3, [r3, #8]
1004e2da:	2b00      	cmp	r3, #0
1004e2dc:	d004      	beq.n	1004e2e8 <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
1004e2de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e2e0:	689b      	ldr	r3, [r3, #8]
1004e2e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004e2e4:	0010      	movs	r0, r2
1004e2e6:	4798      	blx	r3
      }
      curr = next;
1004e2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004e2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004e2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e2ee:	2b00      	cmp	r3, #0
1004e2f0:	d1eb      	bne.n	1004e2ca <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004e2f2:	4b79      	ldr	r3, [pc, #484]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e2f4:	228c      	movs	r2, #140	@ 0x8c
1004e2f6:	589b      	ldr	r3, [r3, r2]
1004e2f8:	240f      	movs	r4, #15
1004e2fa:	193a      	adds	r2, r7, r4
1004e2fc:	0011      	movs	r1, r2
1004e2fe:	0018      	movs	r0, r3
1004e300:	f000 fe62 	bl	1004efc8 <_update_user_timeout>
1004e304:	0002      	movs	r2, r0
1004e306:	4b74      	ldr	r3, [pc, #464]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e308:	218c      	movs	r1, #140	@ 0x8c
1004e30a:	505a      	str	r2, [r3, r1]
    if (expired == 1)
1004e30c:	193b      	adds	r3, r7, r4
1004e30e:	781b      	ldrb	r3, [r3, #0]
1004e310:	2b01      	cmp	r3, #1
1004e312:	d121      	bne.n	1004e358 <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e314:	f3ef 8310 	mrs	r3, PRIMASK
1004e318:	61fb      	str	r3, [r7, #28]
  return(result);
1004e31a:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004e31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
1004e31e:	b672      	cpsid	i
}
1004e320:	46c0      	nop			@ (mov r8, r8)
1004e322:	4b6d      	ldr	r3, [pc, #436]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e324:	2291      	movs	r2, #145	@ 0x91
1004e326:	5c9b      	ldrb	r3, [r3, r2]
1004e328:	3301      	adds	r3, #1
1004e32a:	4a6b      	ldr	r2, [pc, #428]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e32c:	2192      	movs	r1, #146	@ 0x92
1004e32e:	5c52      	ldrb	r2, [r2, r1]
1004e330:	4293      	cmp	r3, r2
1004e332:	d103      	bne.n	1004e33c <HAL_RADIO_TIMER_Tick+0xfc>
1004e334:	4b68      	ldr	r3, [pc, #416]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e336:	2291      	movs	r2, #145	@ 0x91
1004e338:	5c9b      	ldrb	r3, [r3, r2]
1004e33a:	e004      	b.n	1004e346 <HAL_RADIO_TIMER_Tick+0x106>
1004e33c:	4b66      	ldr	r3, [pc, #408]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e33e:	2291      	movs	r2, #145	@ 0x91
1004e340:	5c9b      	ldrb	r3, [r3, r2]
1004e342:	3301      	adds	r3, #1
1004e344:	b2db      	uxtb	r3, r3
1004e346:	4a64      	ldr	r2, [pc, #400]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e348:	2191      	movs	r1, #145	@ 0x91
1004e34a:	5453      	strb	r3, [r2, r1]
1004e34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004e34e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e350:	69bb      	ldr	r3, [r7, #24]
1004e352:	f383 8810 	msr	PRIMASK, r3
}
1004e356:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
1004e358:	4b5f      	ldr	r3, [pc, #380]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e35a:	2292      	movs	r2, #146	@ 0x92
1004e35c:	5c9a      	ldrb	r2, [r3, r2]
1004e35e:	232b      	movs	r3, #43	@ 0x2b
1004e360:	2108      	movs	r1, #8
1004e362:	185b      	adds	r3, r3, r1
1004e364:	19db      	adds	r3, r3, r7
1004e366:	781b      	ldrb	r3, [r3, #0]
1004e368:	18d3      	adds	r3, r2, r3
1004e36a:	b2d9      	uxtb	r1, r3
1004e36c:	4b5a      	ldr	r3, [pc, #360]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e36e:	2292      	movs	r2, #146	@ 0x92
1004e370:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004e372:	4b59      	ldr	r3, [pc, #356]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e374:	2291      	movs	r2, #145	@ 0x91
1004e376:	5c9a      	ldrb	r2, [r3, r2]
1004e378:	4b57      	ldr	r3, [pc, #348]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e37a:	2192      	movs	r1, #146	@ 0x92
1004e37c:	5c5b      	ldrb	r3, [r3, r1]
1004e37e:	429a      	cmp	r2, r3
1004e380:	d30a      	bcc.n	1004e398 <HAL_RADIO_TIMER_Tick+0x158>
1004e382:	4b55      	ldr	r3, [pc, #340]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e384:	2291      	movs	r2, #145	@ 0x91
1004e386:	5c9a      	ldrb	r2, [r3, r2]
1004e388:	4b53      	ldr	r3, [pc, #332]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e38a:	2192      	movs	r1, #146	@ 0x92
1004e38c:	5c5b      	ldrb	r3, [r3, r1]
1004e38e:	1ad3      	subs	r3, r2, r3
1004e390:	1e5a      	subs	r2, r3, #1
1004e392:	4193      	sbcs	r3, r2
1004e394:	b2db      	uxtb	r3, r3
1004e396:	e00c      	b.n	1004e3b2 <HAL_RADIO_TIMER_Tick+0x172>
1004e398:	4b4f      	ldr	r3, [pc, #316]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e39a:	2291      	movs	r2, #145	@ 0x91
1004e39c:	5c9b      	ldrb	r3, [r3, r2]
1004e39e:	0019      	movs	r1, r3
1004e3a0:	4b4d      	ldr	r3, [pc, #308]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e3a2:	2292      	movs	r2, #146	@ 0x92
1004e3a4:	5c9b      	ldrb	r3, [r3, r2]
1004e3a6:	1acb      	subs	r3, r1, r3
1004e3a8:	3301      	adds	r3, #1
1004e3aa:	33ff      	adds	r3, #255	@ 0xff
1004e3ac:	1e5a      	subs	r2, r3, #1
1004e3ae:	4193      	sbcs	r3, r2
1004e3b0:	b2db      	uxtb	r3, r3
1004e3b2:	2b00      	cmp	r3, #0
1004e3b4:	d000      	beq.n	1004e3b8 <HAL_RADIO_TIMER_Tick+0x178>
1004e3b6:	e76d      	b.n	1004e294 <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
1004e3b8:	4b47      	ldr	r3, [pc, #284]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e3ba:	7a1b      	ldrb	r3, [r3, #8]
1004e3bc:	2b00      	cmp	r3, #0
1004e3be:	d06a      	beq.n	1004e496 <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
1004e3c0:	4b46      	ldr	r3, [pc, #280]	@ (1004e4dc <HAL_RADIO_TIMER_Tick+0x29c>)
1004e3c2:	0018      	movs	r0, r3
1004e3c4:	f7ff fe33 	bl	1004e02e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004e3c8:	1e03      	subs	r3, r0, #0
1004e3ca:	d100      	bne.n	1004e3ce <HAL_RADIO_TIMER_Tick+0x18e>
1004e3cc:	e07f      	b.n	1004e4ce <HAL_RADIO_TIMER_Tick+0x28e>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004e3ce:	4b42      	ldr	r3, [pc, #264]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e3d0:	2200      	movs	r2, #0
1004e3d2:	721a      	strb	r2, [r3, #8]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
1004e3d4:	4b40      	ldr	r3, [pc, #256]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e3d6:	2294      	movs	r2, #148	@ 0x94
1004e3d8:	5c9b      	ldrb	r3, [r3, r2]
1004e3da:	2b00      	cmp	r3, #0
1004e3dc:	d109      	bne.n	1004e3f2 <HAL_RADIO_TIMER_Tick+0x1b2>
1004e3de:	4b3e      	ldr	r3, [pc, #248]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e3e0:	2293      	movs	r2, #147	@ 0x93
1004e3e2:	5c9b      	ldrb	r3, [r3, r2]
1004e3e4:	2b00      	cmp	r3, #0
1004e3e6:	d004      	beq.n	1004e3f2 <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004e3e8:	4b3b      	ldr	r3, [pc, #236]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e3ea:	2293      	movs	r2, #147	@ 0x93
1004e3ec:	2100      	movs	r1, #0
1004e3ee:	5499      	strb	r1, [r3, r2]
1004e3f0:	e034      	b.n	1004e45c <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
1004e3f2:	f000 ff43 	bl	1004f27c <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004e3f6:	4b38      	ldr	r3, [pc, #224]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e3f8:	228c      	movs	r2, #140	@ 0x8c
1004e3fa:	589b      	ldr	r3, [r3, r2]
1004e3fc:	240f      	movs	r4, #15
1004e3fe:	193a      	adds	r2, r7, r4
1004e400:	0011      	movs	r1, r2
1004e402:	0018      	movs	r0, r3
1004e404:	f000 fde0 	bl	1004efc8 <_update_user_timeout>
1004e408:	0002      	movs	r2, r0
1004e40a:	4b33      	ldr	r3, [pc, #204]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e40c:	218c      	movs	r1, #140	@ 0x8c
1004e40e:	505a      	str	r2, [r3, r1]
        if (expired == 1)
1004e410:	193b      	adds	r3, r7, r4
1004e412:	781b      	ldrb	r3, [r3, #0]
1004e414:	2b01      	cmp	r3, #1
1004e416:	d121      	bne.n	1004e45c <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e418:	f3ef 8310 	mrs	r3, PRIMASK
1004e41c:	617b      	str	r3, [r7, #20]
  return(result);
1004e41e:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
1004e420:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
1004e422:	b672      	cpsid	i
}
1004e424:	46c0      	nop			@ (mov r8, r8)
1004e426:	4b2c      	ldr	r3, [pc, #176]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e428:	2291      	movs	r2, #145	@ 0x91
1004e42a:	5c9b      	ldrb	r3, [r3, r2]
1004e42c:	3301      	adds	r3, #1
1004e42e:	4a2a      	ldr	r2, [pc, #168]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e430:	2192      	movs	r1, #146	@ 0x92
1004e432:	5c52      	ldrb	r2, [r2, r1]
1004e434:	4293      	cmp	r3, r2
1004e436:	d103      	bne.n	1004e440 <HAL_RADIO_TIMER_Tick+0x200>
1004e438:	4b27      	ldr	r3, [pc, #156]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e43a:	2291      	movs	r2, #145	@ 0x91
1004e43c:	5c9b      	ldrb	r3, [r3, r2]
1004e43e:	e004      	b.n	1004e44a <HAL_RADIO_TIMER_Tick+0x20a>
1004e440:	4b25      	ldr	r3, [pc, #148]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e442:	2291      	movs	r2, #145	@ 0x91
1004e444:	5c9b      	ldrb	r3, [r3, r2]
1004e446:	3301      	adds	r3, #1
1004e448:	b2db      	uxtb	r3, r3
1004e44a:	4a23      	ldr	r2, [pc, #140]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e44c:	2191      	movs	r1, #145	@ 0x91
1004e44e:	5453      	strb	r3, [r2, r1]
1004e450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e454:	693b      	ldr	r3, [r7, #16]
1004e456:	f383 8810 	msr	PRIMASK, r3
}
1004e45a:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired); //Start Radio Timer after calibration
1004e45c:	230f      	movs	r3, #15
1004e45e:	18fa      	adds	r2, r7, r3
1004e460:	4b1f      	ldr	r3, [pc, #124]	@ (1004e4e0 <HAL_RADIO_TIMER_Tick+0x2a0>)
1004e462:	0011      	movs	r1, r2
1004e464:	0018      	movs	r0, r3
1004e466:	f000 ffbd 	bl	1004f3e4 <_check_radio_activity>
#endif

      /* Schedule next calibration event */
      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004e46a:	4b1e      	ldr	r3, [pc, #120]	@ (1004e4e4 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004e46c:	0018      	movs	r0, r3
1004e46e:	f000 fa91 	bl	1004e994 <HAL_RADIO_TIMER_StopVirtualTimer>
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004e472:	f000 fa2d 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004e476:	0002      	movs	r2, r0
1004e478:	000b      	movs	r3, r1
1004e47a:	4917      	ldr	r1, [pc, #92]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e47c:	6849      	ldr	r1, [r1, #4]
1004e47e:	6039      	str	r1, [r7, #0]
1004e480:	2100      	movs	r1, #0
1004e482:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004e484:	6838      	ldr	r0, [r7, #0]
1004e486:	6879      	ldr	r1, [r7, #4]
1004e488:	1812      	adds	r2, r2, r0
1004e48a:	414b      	adcs	r3, r1
1004e48c:	4915      	ldr	r1, [pc, #84]	@ (1004e4e4 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004e48e:	0008      	movs	r0, r1
1004e490:	f000 fcd4 	bl	1004ee3c <_start_timer>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
1004e494:	e01b      	b.n	1004e4ce <HAL_RADIO_TIMER_Tick+0x28e>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004e496:	4b10      	ldr	r3, [pc, #64]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e498:	781b      	ldrb	r3, [r3, #0]
1004e49a:	2b00      	cmp	r3, #0
1004e49c:	d017      	beq.n	1004e4ce <HAL_RADIO_TIMER_Tick+0x28e>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
1004e49e:	f000 fa17 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004e4a2:	4b0d      	ldr	r3, [pc, #52]	@ (1004e4d8 <HAL_RADIO_TIMER_Tick+0x298>)
1004e4a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004e4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004e4a8:	24fa      	movs	r4, #250	@ 0xfa
1004e4aa:	0364      	lsls	r4, r4, #13
1004e4ac:	2500      	movs	r5, #0
1004e4ae:	1912      	adds	r2, r2, r4
1004e4b0:	416b      	adcs	r3, r5
1004e4b2:	4299      	cmp	r1, r3
1004e4b4:	d803      	bhi.n	1004e4be <HAL_RADIO_TIMER_Tick+0x27e>
1004e4b6:	d10a      	bne.n	1004e4ce <HAL_RADIO_TIMER_Tick+0x28e>
1004e4b8:	4290      	cmp	r0, r2
1004e4ba:	d800      	bhi.n	1004e4be <HAL_RADIO_TIMER_Tick+0x27e>
}
1004e4bc:	e007      	b.n	1004e4ce <HAL_RADIO_TIMER_Tick+0x28e>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004e4be:	4b09      	ldr	r3, [pc, #36]	@ (1004e4e4 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004e4c0:	0018      	movs	r0, r3
1004e4c2:	f000 fa67 	bl	1004e994 <HAL_RADIO_TIMER_StopVirtualTimer>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004e4c6:	4b07      	ldr	r3, [pc, #28]	@ (1004e4e4 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004e4c8:	0018      	movs	r0, r3
1004e4ca:	f000 fc8f 	bl	1004edec <_calibration_callback>
}
1004e4ce:	46c0      	nop			@ (mov r8, r8)
1004e4d0:	46bd      	mov	sp, r7
1004e4d2:	b010      	add	sp, #64	@ 0x40
1004e4d4:	bdb0      	pop	{r4, r5, r7, pc}
1004e4d6:	46c0      	nop			@ (mov r8, r8)
1004e4d8:	20000fd0 	.word	0x20000fd0
1004e4dc:	60001000 	.word	0x60001000
1004e4e0:	20001028 	.word	0x20001028
1004e4e4:	20001010 	.word	0x20001010

1004e4e8 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
1004e4e8:	b580      	push	{r7, lr}
1004e4ea:	b082      	sub	sp, #8
1004e4ec:	af00      	add	r7, sp, #0
1004e4ee:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
1004e4f0:	23c0      	movs	r3, #192	@ 0xc0
1004e4f2:	05db      	lsls	r3, r3, #23
1004e4f4:	695b      	ldr	r3, [r3, #20]
1004e4f6:	687a      	ldr	r2, [r7, #4]
1004e4f8:	0011      	movs	r1, r2
1004e4fa:	0018      	movs	r0, r3
1004e4fc:	f001 f8e4 	bl	1004f6c8 <TIMER_GetPastSysTime>
1004e500:	0002      	movs	r2, r0
1004e502:	000b      	movs	r3, r1
}
1004e504:	0010      	movs	r0, r2
1004e506:	0019      	movs	r1, r3
1004e508:	46bd      	mov	sp, r7
1004e50a:	b002      	add	sp, #8
1004e50c:	bd80      	pop	{r7, pc}
	...

1004e510 <HAL_RADIO_TIMER_PowerSaveLevelCheck>:
/**
  * @brief  Returns the admitted low power mode according to the next timer activity.
  * @return Low Power mode
  */
PowerSaveLevels HAL_RADIO_TIMER_PowerSaveLevelCheck(void)
{
1004e510:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e512:	b08b      	sub	sp, #44	@ 0x2c
1004e514:	af00      	add	r7, sp, #0
  uint32_t nextRadioActivity;
  uint8_t timerState;
  uint64_t current_time;
  PowerSaveLevels level;

  if (TIMER_SleepCheck() == FALSE)
1004e516:	f001 f907 	bl	1004f728 <TIMER_SleepCheck>
1004e51a:	0003      	movs	r3, r0
1004e51c:	001a      	movs	r2, r3
1004e51e:	2301      	movs	r3, #1
1004e520:	4053      	eors	r3, r2
1004e522:	b2db      	uxtb	r3, r3
1004e524:	2b00      	cmp	r3, #0
1004e526:	d001      	beq.n	1004e52c <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x1c>
  {
    return POWER_SAVE_LEVEL_RUNNING;
1004e528:	2300      	movs	r3, #0
1004e52a:	e0b1      	b.n	1004e690 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
  }

  level = POWER_SAVE_LEVEL_STOP;
1004e52c:	2317      	movs	r3, #23
1004e52e:	2210      	movs	r2, #16
1004e530:	189b      	adds	r3, r3, r2
1004e532:	19db      	adds	r3, r3, r7
1004e534:	2203      	movs	r2, #3
1004e536:	701a      	strb	r2, [r3, #0]

  current_time = HAL_RADIO_TIMER_GetCurrentSysTime();
1004e538:	f000 f9ca 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004e53c:	0002      	movs	r2, r0
1004e53e:	000b      	movs	r3, r1
1004e540:	61ba      	str	r2, [r7, #24]
1004e542:	61fb      	str	r3, [r7, #28]
  timerState = TIMER_GetRadioTimerValue(&nextRadioActivity);
1004e544:	2317      	movs	r3, #23
1004e546:	18fe      	adds	r6, r7, r3
1004e548:	2310      	movs	r3, #16
1004e54a:	18fb      	adds	r3, r7, r3
1004e54c:	0018      	movs	r0, r3
1004e54e:	f001 f909 	bl	1004f764 <TIMER_GetRadioTimerValue>
1004e552:	0003      	movs	r3, r0
1004e554:	7033      	strb	r3, [r6, #0]

  /*Timer1 and wakeup timer are programmed only through the timer module*/
  if (((RADIO_TIMER_Context.radioTimer.active || RADIO_TIMER_Context.radioTimer.pending)
1004e556:	4b50      	ldr	r3, [pc, #320]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e558:	2261      	movs	r2, #97	@ 0x61
1004e55a:	5c9b      	ldrb	r3, [r3, r2]
1004e55c:	2b00      	cmp	r3, #0
1004e55e:	d104      	bne.n	1004e56a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x5a>
1004e560:	4b4d      	ldr	r3, [pc, #308]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e562:	2262      	movs	r2, #98	@ 0x62
1004e564:	5c9b      	ldrb	r3, [r3, r2]
1004e566:	2b00      	cmp	r3, #0
1004e568:	d004      	beq.n	1004e574 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x64>
       && !(timerState == RADIO_TIMER1_BUSY)) || RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served)
1004e56a:	2317      	movs	r3, #23
1004e56c:	18fb      	adds	r3, r7, r3
1004e56e:	781b      	ldrb	r3, [r3, #0]
1004e570:	2b01      	cmp	r3, #1
1004e572:	d104      	bne.n	1004e57e <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x6e>
1004e574:	4b48      	ldr	r3, [pc, #288]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e576:	2263      	movs	r2, #99	@ 0x63
1004e578:	5c9b      	ldrb	r3, [r3, r2]
1004e57a:	2b00      	cmp	r3, #0
1004e57c:	d029      	beq.n	1004e5d2 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xc2>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
1004e57e:	4b46      	ldr	r3, [pc, #280]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e580:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1004e582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                                                     RADIO_TIMER_Context.last_setup_time + \
1004e584:	4944      	ldr	r1, [pc, #272]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e586:	2084      	movs	r0, #132	@ 0x84
1004e588:	5c09      	ldrb	r1, [r1, r0]
1004e58a:	000c      	movs	r4, r1
1004e58c:	2100      	movs	r1, #0
1004e58e:	000d      	movs	r5, r1
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
1004e590:	69b8      	ldr	r0, [r7, #24]
1004e592:	69f9      	ldr	r1, [r7, #28]
1004e594:	1824      	adds	r4, r4, r0
1004e596:	414d      	adcs	r5, r1
1004e598:	0020      	movs	r0, r4
1004e59a:	0029      	movs	r1, r5
                                                     RADIO_TIMER_Context.hs_startup_time + \
1004e59c:	4e3e      	ldr	r6, [pc, #248]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e59e:	6eb6      	ldr	r6, [r6, #104]	@ 0x68
1004e5a0:	60be      	str	r6, [r7, #8]
1004e5a2:	2600      	movs	r6, #0
1004e5a4:	60fe      	str	r6, [r7, #12]
                                                     RADIO_TIMER_Context.last_setup_time + \
1004e5a6:	68bc      	ldr	r4, [r7, #8]
1004e5a8:	68fd      	ldr	r5, [r7, #12]
1004e5aa:	1900      	adds	r0, r0, r4
1004e5ac:	4169      	adcs	r1, r5
                                                     RADIO_TIMER_Context.hs_startup_time + \
1004e5ae:	2452      	movs	r4, #82	@ 0x52
1004e5b0:	2500      	movs	r5, #0
1004e5b2:	1900      	adds	r0, r0, r4
1004e5b4:	4169      	adcs	r1, r5
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
1004e5b6:	4299      	cmp	r1, r3
1004e5b8:	d802      	bhi.n	1004e5c0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb0>
1004e5ba:	d103      	bne.n	1004e5c4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb4>
1004e5bc:	4290      	cmp	r0, r2
1004e5be:	d901      	bls.n	1004e5c4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb4>
                                                     LOW_POWER_THR))
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
1004e5c0:	2301      	movs	r3, #1
1004e5c2:	e065      	b.n	1004e690 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }

    level = POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON;
1004e5c4:	2317      	movs	r3, #23
1004e5c6:	2210      	movs	r2, #16
1004e5c8:	189b      	adds	r3, r3, r2
1004e5ca:	19db      	adds	r3, r3, r7
1004e5cc:	2202      	movs	r2, #2
1004e5ce:	701a      	strb	r2, [r3, #0]
1004e5d0:	e00b      	b.n	1004e5ea <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xda>
  }
  else
  {
    if ((timerState == RADIO_TIMER2_BUSY) || (timerState == RADIO_TIMER1_BUSY))
1004e5d2:	2317      	movs	r3, #23
1004e5d4:	18fb      	adds	r3, r7, r3
1004e5d6:	781b      	ldrb	r3, [r3, #0]
1004e5d8:	2b02      	cmp	r3, #2
1004e5da:	d004      	beq.n	1004e5e6 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xd6>
1004e5dc:	2317      	movs	r3, #23
1004e5de:	18fb      	adds	r3, r7, r3
1004e5e0:	781b      	ldrb	r3, [r3, #0]
1004e5e2:	2b01      	cmp	r3, #1
1004e5e4:	d101      	bne.n	1004e5ea <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xda>
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
1004e5e6:	2301      	movs	r3, #1
1004e5e8:	e052      	b.n	1004e690 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }
  }

  if (RADIO_TIMER_Context.rootNode != NULL && RADIO_TIMER_Context.rootNode->active)
1004e5ea:	4b2b      	ldr	r3, [pc, #172]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e5ec:	228c      	movs	r2, #140	@ 0x8c
1004e5ee:	589b      	ldr	r3, [r3, r2]
1004e5f0:	2b00      	cmp	r3, #0
1004e5f2:	d048      	beq.n	1004e686 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x176>
1004e5f4:	4b28      	ldr	r3, [pc, #160]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e5f6:	228c      	movs	r2, #140	@ 0x8c
1004e5f8:	589b      	ldr	r3, [r3, r2]
1004e5fa:	7b1b      	ldrb	r3, [r3, #12]
1004e5fc:	2b00      	cmp	r3, #0
1004e5fe:	d042      	beq.n	1004e686 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x176>
  {
    if (RADIO_TIMER_Context.rootNode->expiryTime < (current_time + LOW_POWER_THR + RADIO_TIMER_Context.hs_startup_time))
1004e600:	4b25      	ldr	r3, [pc, #148]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e602:	228c      	movs	r2, #140	@ 0x8c
1004e604:	589b      	ldr	r3, [r3, r2]
1004e606:	681a      	ldr	r2, [r3, #0]
1004e608:	685b      	ldr	r3, [r3, #4]
1004e60a:	4923      	ldr	r1, [pc, #140]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e60c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
1004e60e:	6039      	str	r1, [r7, #0]
1004e610:	2100      	movs	r1, #0
1004e612:	6079      	str	r1, [r7, #4]
1004e614:	69b8      	ldr	r0, [r7, #24]
1004e616:	69f9      	ldr	r1, [r7, #28]
1004e618:	683c      	ldr	r4, [r7, #0]
1004e61a:	687d      	ldr	r5, [r7, #4]
1004e61c:	1824      	adds	r4, r4, r0
1004e61e:	414d      	adcs	r5, r1
1004e620:	0020      	movs	r0, r4
1004e622:	0029      	movs	r1, r5
1004e624:	2452      	movs	r4, #82	@ 0x52
1004e626:	2500      	movs	r5, #0
1004e628:	1900      	adds	r0, r0, r4
1004e62a:	4169      	adcs	r1, r5
1004e62c:	4299      	cmp	r1, r3
1004e62e:	d802      	bhi.n	1004e636 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x126>
1004e630:	d103      	bne.n	1004e63a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x12a>
1004e632:	4290      	cmp	r0, r2
1004e634:	d901      	bls.n	1004e63a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x12a>
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
1004e636:	2301      	movs	r3, #1
1004e638:	e02a      	b.n	1004e690 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }

    if (level == POWER_SAVE_LEVEL_STOP)
1004e63a:	2317      	movs	r3, #23
1004e63c:	2210      	movs	r2, #16
1004e63e:	189b      	adds	r3, r3, r2
1004e640:	19db      	adds	r3, r3, r7
1004e642:	781b      	ldrb	r3, [r3, #0]
1004e644:	2b03      	cmp	r3, #3
1004e646:	d118      	bne.n	1004e67a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
    {
      if ((RADIO_TIMER_Context.rootNode->next == NULL)
1004e648:	4b13      	ldr	r3, [pc, #76]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e64a:	228c      	movs	r2, #140	@ 0x8c
1004e64c:	589b      	ldr	r3, [r3, r2]
1004e64e:	691b      	ldr	r3, [r3, #16]
1004e650:	2b00      	cmp	r3, #0
1004e652:	d112      	bne.n	1004e67a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
          && (RADIO_TIMER_Context.rootNode == &RADIO_TIMER_Context.calibrationTimer))
1004e654:	4b10      	ldr	r3, [pc, #64]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e656:	228c      	movs	r2, #140	@ 0x8c
1004e658:	589a      	ldr	r2, [r3, r2]
1004e65a:	4b10      	ldr	r3, [pc, #64]	@ (1004e69c <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x18c>)
1004e65c:	429a      	cmp	r2, r3
1004e65e:	d10c      	bne.n	1004e67a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
      {
        RADIO_TIMER_Context.stop_notimer_action = TRUE;
1004e660:	4b0d      	ldr	r3, [pc, #52]	@ (1004e698 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
1004e662:	2293      	movs	r2, #147	@ 0x93
1004e664:	2101      	movs	r1, #1
1004e666:	5499      	strb	r1, [r3, r2]
        _virtualTimeBaseEnable(DISABLE);
1004e668:	2000      	movs	r0, #0
1004e66a:	f000 fd65 	bl	1004f138 <_virtualTimeBaseEnable>
        LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
1004e66e:	4b0c      	ldr	r3, [pc, #48]	@ (1004e6a0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x190>)
1004e670:	0018      	movs	r0, r3
1004e672:	f7ff fc11 	bl	1004de98 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
        return POWER_SAVE_LEVEL_STOP;
1004e676:	2303      	movs	r3, #3
1004e678:	e00a      	b.n	1004e690 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
      }
    }
    level = POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON;
1004e67a:	2317      	movs	r3, #23
1004e67c:	2210      	movs	r2, #16
1004e67e:	189b      	adds	r3, r3, r2
1004e680:	19db      	adds	r3, r3, r7
1004e682:	2202      	movs	r2, #2
1004e684:	701a      	strb	r2, [r3, #0]
  }

  return level;
1004e686:	2317      	movs	r3, #23
1004e688:	2210      	movs	r2, #16
1004e68a:	189b      	adds	r3, r3, r2
1004e68c:	19db      	adds	r3, r3, r7
1004e68e:	781b      	ldrb	r3, [r3, #0]
}
1004e690:	0018      	movs	r0, r3
1004e692:	46bd      	mov	sp, r7
1004e694:	b00b      	add	sp, #44	@ 0x2c
1004e696:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e698:	20000fd0 	.word	0x20000fd0
1004e69c:	20001010 	.word	0x20001010
1004e6a0:	60001800 	.word	0x60001800

1004e6a4 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
1004e6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e6a6:	b085      	sub	sp, #20
1004e6a8:	af00      	add	r7, sp, #0
1004e6aa:	6078      	str	r0, [r7, #4]
1004e6ac:	0008      	movs	r0, r1
1004e6ae:	0011      	movs	r1, r2
1004e6b0:	1cfb      	adds	r3, r7, #3
1004e6b2:	1c02      	adds	r2, r0, #0
1004e6b4:	701a      	strb	r2, [r3, #0]
1004e6b6:	1cbb      	adds	r3, r7, #2
1004e6b8:	1c0a      	adds	r2, r1, #0
1004e6ba:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
1004e6bc:	260f      	movs	r6, #15
1004e6be:	19bb      	adds	r3, r7, r6
1004e6c0:	2200      	movs	r2, #0
1004e6c2:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
1004e6c4:	1cfb      	adds	r3, r7, #3
1004e6c6:	781b      	ldrb	r3, [r3, #0]
1004e6c8:	1e5a      	subs	r2, r3, #1
1004e6ca:	4193      	sbcs	r3, r2
1004e6cc:	b2d9      	uxtb	r1, r3
1004e6ce:	4b1b      	ldr	r3, [pc, #108]	@ (1004e73c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004e6d0:	2264      	movs	r2, #100	@ 0x64
1004e6d2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
1004e6d4:	1cbb      	adds	r3, r7, #2
1004e6d6:	781b      	ldrb	r3, [r3, #0]
1004e6d8:	1e5a      	subs	r2, r3, #1
1004e6da:	4193      	sbcs	r3, r2
1004e6dc:	b2d9      	uxtb	r1, r3
1004e6de:	4b17      	ldr	r3, [pc, #92]	@ (1004e73c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004e6e0:	2260      	movs	r2, #96	@ 0x60
1004e6e2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
1004e6e4:	4b15      	ldr	r3, [pc, #84]	@ (1004e73c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004e6e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004e6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004e6ea:	4914      	ldr	r1, [pc, #80]	@ (1004e73c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004e6ec:	6a88      	ldr	r0, [r1, #40]	@ 0x28
1004e6ee:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
1004e6f0:	6879      	ldr	r1, [r7, #4]
1004e6f2:	1a09      	subs	r1, r1, r0
1004e6f4:	000c      	movs	r4, r1
1004e6f6:	2100      	movs	r1, #0
1004e6f8:	000d      	movs	r5, r1
1004e6fa:	1912      	adds	r2, r2, r4
1004e6fc:	416b      	adcs	r3, r5
1004e6fe:	490f      	ldr	r1, [pc, #60]	@ (1004e73c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004e700:	658a      	str	r2, [r1, #88]	@ 0x58
1004e702:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004e704:	4b0d      	ldr	r3, [pc, #52]	@ (1004e73c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004e706:	2261      	movs	r2, #97	@ 0x61
1004e708:	2100      	movs	r1, #0
1004e70a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004e70c:	4b0b      	ldr	r3, [pc, #44]	@ (1004e73c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004e70e:	2263      	movs	r2, #99	@ 0x63
1004e710:	2100      	movs	r1, #0
1004e712:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
1004e714:	4b09      	ldr	r3, [pc, #36]	@ (1004e73c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004e716:	2262      	movs	r2, #98	@ 0x62
1004e718:	2101      	movs	r1, #1
1004e71a:	5499      	strb	r1, [r3, r2]
      _set_controller_as_host();
      _check_host_activity();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
1004e71c:	19ba      	adds	r2, r7, r6
1004e71e:	4b08      	ldr	r3, [pc, #32]	@ (1004e740 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
1004e720:	0011      	movs	r1, r2
1004e722:	0018      	movs	r0, r3
1004e724:	f000 fe5e 	bl	1004f3e4 <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
1004e728:	2001      	movs	r0, #1
1004e72a:	f000 fd05 	bl	1004f138 <_virtualTimeBaseEnable>

  return retVal;
1004e72e:	19bb      	adds	r3, r7, r6
1004e730:	781b      	ldrb	r3, [r3, #0]
}
1004e732:	0018      	movs	r0, r3
1004e734:	46bd      	mov	sp, r7
1004e736:	b005      	add	sp, #20
1004e738:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e73a:	46c0      	nop			@ (mov r8, r8)
1004e73c:	20000fd0 	.word	0x20000fd0
1004e740:	20001028 	.word	0x20001028

1004e744 <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
1004e744:	b5b0      	push	{r4, r5, r7, lr}
1004e746:	b088      	sub	sp, #32
1004e748:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004e74a:	23c0      	movs	r3, #192	@ 0xc0
1004e74c:	05db      	lsls	r3, r3, #23
1004e74e:	0018      	movs	r0, r3
1004e750:	f7ff fb08 	bl	1004dd64 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004e754:	23c0      	movs	r3, #192	@ 0xc0
1004e756:	05db      	lsls	r3, r3, #23
1004e758:	0018      	movs	r0, r3
1004e75a:	f7ff fb23 	bl	1004dda4 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004e75e:	4b31      	ldr	r3, [pc, #196]	@ (1004e824 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
1004e760:	0018      	movs	r0, r3
1004e762:	f7ff fb65 	bl	1004de30 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004e766:	4b30      	ldr	r3, [pc, #192]	@ (1004e828 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004e768:	2261      	movs	r2, #97	@ 0x61
1004e76a:	2100      	movs	r1, #0
1004e76c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004e76e:	4b2e      	ldr	r3, [pc, #184]	@ (1004e828 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004e770:	2262      	movs	r2, #98	@ 0x62
1004e772:	2100      	movs	r1, #0
1004e774:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004e776:	4b2c      	ldr	r3, [pc, #176]	@ (1004e828 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004e778:	2263      	movs	r2, #99	@ 0x63
1004e77a:	2100      	movs	r1, #0
1004e77c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e77e:	f3ef 8310 	mrs	r3, PRIMASK
1004e782:	60bb      	str	r3, [r7, #8]
  return(result);
1004e784:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
1004e786:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004e788:	b672      	cpsid	i
}
1004e78a:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004e78c:	4b26      	ldr	r3, [pc, #152]	@ (1004e828 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004e78e:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004e790:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
1004e792:	f000 f89d 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004e796:	0002      	movs	r2, r0
1004e798:	000b      	movs	r3, r1
1004e79a:	1aa4      	subs	r4, r4, r2
1004e79c:	419d      	sbcs	r5, r3
1004e79e:	0022      	movs	r2, r4
1004e7a0:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
1004e7a2:	4921      	ldr	r1, [pc, #132]	@ (1004e828 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004e7a4:	2084      	movs	r0, #132	@ 0x84
1004e7a6:	5c09      	ldrb	r1, [r1, r0]
1004e7a8:	6039      	str	r1, [r7, #0]
1004e7aa:	2100      	movs	r1, #0
1004e7ac:	6079      	str	r1, [r7, #4]
1004e7ae:	6838      	ldr	r0, [r7, #0]
1004e7b0:	6879      	ldr	r1, [r7, #4]
1004e7b2:	1a12      	subs	r2, r2, r0
1004e7b4:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004e7b6:	613a      	str	r2, [r7, #16]
1004e7b8:	617b      	str	r3, [r7, #20]
1004e7ba:	69bb      	ldr	r3, [r7, #24]
1004e7bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e7be:	68fb      	ldr	r3, [r7, #12]
1004e7c0:	f383 8810 	msr	PRIMASK, r3
}
1004e7c4:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
1004e7c6:	697b      	ldr	r3, [r7, #20]
1004e7c8:	2b00      	cmp	r3, #0
1004e7ca:	dc0c      	bgt.n	1004e7e6 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
1004e7cc:	697b      	ldr	r3, [r7, #20]
1004e7ce:	2b00      	cmp	r3, #0
1004e7d0:	d102      	bne.n	1004e7d8 <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
1004e7d2:	693b      	ldr	r3, [r7, #16]
1004e7d4:	2b00      	cmp	r3, #0
1004e7d6:	d106      	bne.n	1004e7e6 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
1004e7d8:	2317      	movs	r3, #23
1004e7da:	2208      	movs	r2, #8
1004e7dc:	189b      	adds	r3, r3, r2
1004e7de:	19db      	adds	r3, r3, r7
1004e7e0:	2201      	movs	r2, #1
1004e7e2:	701a      	strb	r2, [r3, #0]
1004e7e4:	e015      	b.n	1004e812 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
1004e7e6:	697b      	ldr	r3, [r7, #20]
1004e7e8:	2b00      	cmp	r3, #0
1004e7ea:	dc0c      	bgt.n	1004e806 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
1004e7ec:	697b      	ldr	r3, [r7, #20]
1004e7ee:	2b00      	cmp	r3, #0
1004e7f0:	d102      	bne.n	1004e7f8 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
1004e7f2:	693b      	ldr	r3, [r7, #16]
1004e7f4:	2b0e      	cmp	r3, #14
1004e7f6:	d806      	bhi.n	1004e806 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
1004e7f8:	2317      	movs	r3, #23
1004e7fa:	2208      	movs	r2, #8
1004e7fc:	189b      	adds	r3, r3, r2
1004e7fe:	19db      	adds	r3, r3, r7
1004e800:	2202      	movs	r2, #2
1004e802:	701a      	strb	r2, [r3, #0]
1004e804:	e005      	b.n	1004e812 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
1004e806:	2317      	movs	r3, #23
1004e808:	2208      	movs	r2, #8
1004e80a:	189b      	adds	r3, r3, r2
1004e80c:	19db      	adds	r3, r3, r7
1004e80e:	2200      	movs	r2, #0
1004e810:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
1004e812:	2317      	movs	r3, #23
1004e814:	2208      	movs	r2, #8
1004e816:	189b      	adds	r3, r3, r2
1004e818:	19db      	adds	r3, r3, r7
1004e81a:	781b      	ldrb	r3, [r3, #0]
}
1004e81c:	0018      	movs	r0, r3
1004e81e:	46bd      	mov	sp, r7
1004e820:	b008      	add	sp, #32
1004e822:	bdb0      	pop	{r4, r5, r7, pc}
1004e824:	60001800 	.word	0x60001800
1004e828:	20000fd0 	.word	0x20000fd0

1004e82c <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by 4.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from three to four time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
1004e82c:	b580      	push	{r7, lr}
1004e82e:	b084      	sub	sp, #16
1004e830:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e832:	f3ef 8310 	mrs	r3, PRIMASK
1004e836:	603b      	str	r3, [r7, #0]
  return(result);
1004e838:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
1004e83a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1004e83c:	b672      	cpsid	i
}
1004e83e:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004e840:	4b0e      	ldr	r3, [pc, #56]	@ (1004e87c <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
1004e842:	0018      	movs	r0, r3
1004e844:	f7ff fb69 	bl	1004df1a <LL_RADIO_TIMER_GetAbsoluteTime>
1004e848:	0003      	movs	r3, r0
1004e84a:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 4) & TIMER_MAX_VALUE));
1004e84c:	68bb      	ldr	r3, [r7, #8]
1004e84e:	1d1a      	adds	r2, r3, #4
1004e850:	23c0      	movs	r3, #192	@ 0xc0
1004e852:	05db      	lsls	r3, r3, #23
1004e854:	0011      	movs	r1, r2
1004e856:	0018      	movs	r0, r3
1004e858:	f7ff fac4 	bl	1004dde4 <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
1004e85c:	23c0      	movs	r3, #192	@ 0xc0
1004e85e:	05db      	lsls	r3, r3, #23
1004e860:	0018      	movs	r0, r3
1004e862:	f7ff fa6f 	bl	1004dd44 <LL_RADIO_TIMER_EnableTimer1>
1004e866:	68fb      	ldr	r3, [r7, #12]
1004e868:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e86a:	687b      	ldr	r3, [r7, #4]
1004e86c:	f383 8810 	msr	PRIMASK, r3
}
1004e870:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
1004e872:	46c0      	nop			@ (mov r8, r8)
1004e874:	46bd      	mov	sp, r7
1004e876:	b004      	add	sp, #16
1004e878:	bd80      	pop	{r7, pc}
1004e87a:	46c0      	nop			@ (mov r8, r8)
1004e87c:	60001800 	.word	0x60001800

1004e880 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
1004e880:	b580      	push	{r7, lr}
1004e882:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
1004e884:	46c0      	nop			@ (mov r8, r8)
1004e886:	46bd      	mov	sp, r7
1004e888:	bd80      	pop	{r7, pc}
	...

1004e88c <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
1004e88c:	b580      	push	{r7, lr}
1004e88e:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004e890:	4b03      	ldr	r3, [pc, #12]	@ (1004e8a0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
1004e892:	2263      	movs	r2, #99	@ 0x63
1004e894:	2100      	movs	r1, #0
1004e896:	5499      	strb	r1, [r3, r2]
}
1004e898:	46c0      	nop			@ (mov r8, r8)
1004e89a:	46bd      	mov	sp, r7
1004e89c:	bd80      	pop	{r7, pc}
1004e89e:	46c0      	nop			@ (mov r8, r8)
1004e8a0:	20000fd0 	.word	0x20000fd0

1004e8a4 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
1004e8a4:	b580      	push	{r7, lr}
1004e8a6:	b082      	sub	sp, #8
1004e8a8:	af00      	add	r7, sp, #0
1004e8aa:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004e8ac:	4b06      	ldr	r3, [pc, #24]	@ (1004e8c8 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
1004e8ae:	69db      	ldr	r3, [r3, #28]
1004e8b0:	0019      	movs	r1, r3
1004e8b2:	4a06      	ldr	r2, [pc, #24]	@ (1004e8cc <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
1004e8b4:	687b      	ldr	r3, [r7, #4]
1004e8b6:	0018      	movs	r0, r3
1004e8b8:	f7f1 fc02 	bl	100400c0 <blue_unit_conversion>
1004e8bc:	0003      	movs	r3, r0
}
1004e8be:	0018      	movs	r0, r3
1004e8c0:	46bd      	mov	sp, r7
1004e8c2:	b002      	add	sp, #8
1004e8c4:	bd80      	pop	{r7, pc}
1004e8c6:	46c0      	nop			@ (mov r8, r8)
1004e8c8:	20000fd0 	.word	0x20000fd0
1004e8cc:	00000635 	.word	0x00000635

1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
1004e8d0:	b580      	push	{r7, lr}
1004e8d2:	b082      	sub	sp, #8
1004e8d4:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004e8d6:	1d3a      	adds	r2, r7, #4
1004e8d8:	4b05      	ldr	r3, [pc, #20]	@ (1004e8f0 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
1004e8da:	0011      	movs	r1, r2
1004e8dc:	0018      	movs	r0, r3
1004e8de:	f000 fb0b 	bl	1004eef8 <_get_system_time_and_machine>
1004e8e2:	0002      	movs	r2, r0
1004e8e4:	000b      	movs	r3, r1
}
1004e8e6:	0010      	movs	r0, r2
1004e8e8:	0019      	movs	r1, r3
1004e8ea:	46bd      	mov	sp, r7
1004e8ec:	b002      	add	sp, #8
1004e8ee:	bd80      	pop	{r7, pc}
1004e8f0:	20000fd0 	.word	0x20000fd0

1004e8f4 <HAL_RADIO_TIMER_StartVirtualTimer>:
  * @param  msRelTimeout: The relative time, from current time, expressed in ms
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimer(VTIMER_HandleType *timerHandle, uint32_t msRelTimeout)
{
1004e8f4:	b5b0      	push	{r4, r5, r7, lr}
1004e8f6:	b088      	sub	sp, #32
1004e8f8:	af00      	add	r7, sp, #0
1004e8fa:	60f8      	str	r0, [r7, #12]
1004e8fc:	60b9      	str	r1, [r7, #8]
  uint64_t temp = msRelTimeout;
1004e8fe:	68bb      	ldr	r3, [r7, #8]
1004e900:	61bb      	str	r3, [r7, #24]
1004e902:	2300      	movs	r3, #0
1004e904:	61fb      	str	r3, [r7, #28]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, HAL_RADIO_TIMER_GetCurrentSysTime() + (temp * TIMER_SYSTICK_PER_10MS) / 10);
1004e906:	f7ff ffe3 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004e90a:	6038      	str	r0, [r7, #0]
1004e90c:	6079      	str	r1, [r7, #4]
1004e90e:	69bb      	ldr	r3, [r7, #24]
1004e910:	0d1b      	lsrs	r3, r3, #20
1004e912:	69fa      	ldr	r2, [r7, #28]
1004e914:	0315      	lsls	r5, r2, #12
1004e916:	431d      	orrs	r5, r3
1004e918:	69bb      	ldr	r3, [r7, #24]
1004e91a:	031c      	lsls	r4, r3, #12
1004e91c:	220a      	movs	r2, #10
1004e91e:	2300      	movs	r3, #0
1004e920:	0020      	movs	r0, r4
1004e922:	0029      	movs	r1, r5
1004e924:	f7f1 fe7e 	bl	10040624 <__aeabi_uldivmod>
1004e928:	0002      	movs	r2, r0
1004e92a:	000b      	movs	r3, r1
1004e92c:	6838      	ldr	r0, [r7, #0]
1004e92e:	6879      	ldr	r1, [r7, #4]
1004e930:	1880      	adds	r0, r0, r2
1004e932:	4159      	adcs	r1, r3
1004e934:	0002      	movs	r2, r0
1004e936:	000b      	movs	r3, r1
1004e938:	68f9      	ldr	r1, [r7, #12]
1004e93a:	0008      	movs	r0, r1
1004e93c:	f000 fa7e 	bl	1004ee3c <_start_timer>
1004e940:	0002      	movs	r2, r0
1004e942:	240f      	movs	r4, #15
1004e944:	2508      	movs	r5, #8
1004e946:	1963      	adds	r3, r4, r5
1004e948:	19db      	adds	r3, r3, r7
1004e94a:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
1004e94c:	2001      	movs	r0, #1
1004e94e:	f000 fbf3 	bl	1004f138 <_virtualTimeBaseEnable>

  return retVal;
1004e952:	1963      	adds	r3, r4, r5
1004e954:	19db      	adds	r3, r3, r7
1004e956:	781b      	ldrb	r3, [r3, #0]
}
1004e958:	0018      	movs	r0, r3
1004e95a:	46bd      	mov	sp, r7
1004e95c:	b008      	add	sp, #32
1004e95e:	bdb0      	pop	{r4, r5, r7, pc}

1004e960 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004e960:	b590      	push	{r4, r7, lr}
1004e962:	b087      	sub	sp, #28
1004e964:	af00      	add	r7, sp, #0
1004e966:	60f8      	str	r0, [r7, #12]
1004e968:	603a      	str	r2, [r7, #0]
1004e96a:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
1004e96c:	683a      	ldr	r2, [r7, #0]
1004e96e:	687b      	ldr	r3, [r7, #4]
1004e970:	68f9      	ldr	r1, [r7, #12]
1004e972:	0008      	movs	r0, r1
1004e974:	f000 fa62 	bl	1004ee3c <_start_timer>
1004e978:	0002      	movs	r2, r0
1004e97a:	2417      	movs	r4, #23
1004e97c:	193b      	adds	r3, r7, r4
1004e97e:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
1004e980:	2001      	movs	r0, #1
1004e982:	f000 fbd9 	bl	1004f138 <_virtualTimeBaseEnable>

  return retVal;
1004e986:	193b      	adds	r3, r7, r4
1004e988:	781b      	ldrb	r3, [r3, #0]
}
1004e98a:	0018      	movs	r0, r3
1004e98c:	46bd      	mov	sp, r7
1004e98e:	b007      	add	sp, #28
1004e990:	bd90      	pop	{r4, r7, pc}
	...

1004e994 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
1004e994:	b590      	push	{r4, r7, lr}
1004e996:	b089      	sub	sp, #36	@ 0x24
1004e998:	af00      	add	r7, sp, #0
1004e99a:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
1004e99c:	4b28      	ldr	r3, [pc, #160]	@ (1004ea40 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004e99e:	228c      	movs	r2, #140	@ 0x8c
1004e9a0:	589b      	ldr	r3, [r3, r2]
1004e9a2:	687a      	ldr	r2, [r7, #4]
1004e9a4:	0011      	movs	r1, r2
1004e9a6:	0018      	movs	r0, r3
1004e9a8:	f000 fbf2 	bl	1004f190 <_remove_timer_in_queue>
1004e9ac:	0003      	movs	r3, r0
1004e9ae:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
1004e9b0:	210f      	movs	r1, #15
1004e9b2:	187b      	adds	r3, r7, r1
1004e9b4:	2200      	movs	r2, #0
1004e9b6:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
1004e9b8:	687b      	ldr	r3, [r7, #4]
1004e9ba:	2200      	movs	r2, #0
1004e9bc:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
1004e9be:	4b20      	ldr	r3, [pc, #128]	@ (1004ea40 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004e9c0:	228c      	movs	r2, #140	@ 0x8c
1004e9c2:	589b      	ldr	r3, [r3, r2]
1004e9c4:	69fa      	ldr	r2, [r7, #28]
1004e9c6:	429a      	cmp	r2, r3
1004e9c8:	d031      	beq.n	1004ea2e <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
1004e9ca:	000c      	movs	r4, r1
1004e9cc:	187a      	adds	r2, r7, r1
1004e9ce:	69fb      	ldr	r3, [r7, #28]
1004e9d0:	0011      	movs	r1, r2
1004e9d2:	0018      	movs	r0, r3
1004e9d4:	f000 faf8 	bl	1004efc8 <_update_user_timeout>
1004e9d8:	0002      	movs	r2, r0
1004e9da:	4b19      	ldr	r3, [pc, #100]	@ (1004ea40 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004e9dc:	218c      	movs	r1, #140	@ 0x8c
1004e9de:	505a      	str	r2, [r3, r1]
    if (expired)
1004e9e0:	193b      	adds	r3, r7, r4
1004e9e2:	781b      	ldrb	r3, [r3, #0]
1004e9e4:	2b00      	cmp	r3, #0
1004e9e6:	d026      	beq.n	1004ea36 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e9e8:	f3ef 8310 	mrs	r3, PRIMASK
1004e9ec:	617b      	str	r3, [r7, #20]
  return(result);
1004e9ee:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004e9f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004e9f2:	b672      	cpsid	i
}
1004e9f4:	46c0      	nop			@ (mov r8, r8)
1004e9f6:	4b12      	ldr	r3, [pc, #72]	@ (1004ea40 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004e9f8:	2291      	movs	r2, #145	@ 0x91
1004e9fa:	5c9b      	ldrb	r3, [r3, r2]
1004e9fc:	3301      	adds	r3, #1
1004e9fe:	4a10      	ldr	r2, [pc, #64]	@ (1004ea40 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004ea00:	2192      	movs	r1, #146	@ 0x92
1004ea02:	5c52      	ldrb	r2, [r2, r1]
1004ea04:	4293      	cmp	r3, r2
1004ea06:	d103      	bne.n	1004ea10 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
1004ea08:	4b0d      	ldr	r3, [pc, #52]	@ (1004ea40 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004ea0a:	2291      	movs	r2, #145	@ 0x91
1004ea0c:	5c9b      	ldrb	r3, [r3, r2]
1004ea0e:	e004      	b.n	1004ea1a <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
1004ea10:	4b0b      	ldr	r3, [pc, #44]	@ (1004ea40 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004ea12:	2291      	movs	r2, #145	@ 0x91
1004ea14:	5c9b      	ldrb	r3, [r3, r2]
1004ea16:	3301      	adds	r3, #1
1004ea18:	b2db      	uxtb	r3, r3
1004ea1a:	4a09      	ldr	r2, [pc, #36]	@ (1004ea40 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004ea1c:	2191      	movs	r1, #145	@ 0x91
1004ea1e:	5453      	strb	r3, [r2, r1]
1004ea20:	69bb      	ldr	r3, [r7, #24]
1004ea22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004ea24:	693b      	ldr	r3, [r7, #16]
1004ea26:	f383 8810 	msr	PRIMASK, r3
}
1004ea2a:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
1004ea2c:	e003      	b.n	1004ea36 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
1004ea2e:	4b04      	ldr	r3, [pc, #16]	@ (1004ea40 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004ea30:	218c      	movs	r1, #140	@ 0x8c
1004ea32:	69fa      	ldr	r2, [r7, #28]
1004ea34:	505a      	str	r2, [r3, r1]
}
1004ea36:	46c0      	nop			@ (mov r8, r8)
1004ea38:	46bd      	mov	sp, r7
1004ea3a:	b009      	add	sp, #36	@ 0x24
1004ea3c:	bd90      	pop	{r4, r7, pc}
1004ea3e:	46c0      	nop			@ (mov r8, r8)
1004ea40:	20000fd0 	.word	0x20000fd0

1004ea44 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
1004ea44:	b580      	push	{r7, lr}
1004ea46:	b082      	sub	sp, #8
1004ea48:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004ea4a:	2300      	movs	r3, #0
1004ea4c:	607b      	str	r3, [r7, #4]
  UNUSED(status);
1004ea4e:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
1004ea50:	4b13      	ldr	r3, [pc, #76]	@ (1004eaa0 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004ea52:	0018      	movs	r0, r3
1004ea54:	f7ff fa20 	bl	1004de98 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
1004ea58:	4b12      	ldr	r3, [pc, #72]	@ (1004eaa4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004ea5a:	2291      	movs	r2, #145	@ 0x91
1004ea5c:	5c9b      	ldrb	r3, [r3, r2]
1004ea5e:	3301      	adds	r3, #1
1004ea60:	4a10      	ldr	r2, [pc, #64]	@ (1004eaa4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004ea62:	2192      	movs	r1, #146	@ 0x92
1004ea64:	5c52      	ldrb	r2, [r2, r1]
1004ea66:	4293      	cmp	r3, r2
1004ea68:	d103      	bne.n	1004ea72 <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
1004ea6a:	4b0e      	ldr	r3, [pc, #56]	@ (1004eaa4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004ea6c:	2291      	movs	r2, #145	@ 0x91
1004ea6e:	5c9b      	ldrb	r3, [r3, r2]
1004ea70:	e004      	b.n	1004ea7c <HAL_RADIO_TIMER_TimeoutCallback+0x38>
1004ea72:	4b0c      	ldr	r3, [pc, #48]	@ (1004eaa4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004ea74:	2291      	movs	r2, #145	@ 0x91
1004ea76:	5c9b      	ldrb	r3, [r3, r2]
1004ea78:	3301      	adds	r3, #1
1004ea7a:	b2db      	uxtb	r3, r3
1004ea7c:	4a09      	ldr	r2, [pc, #36]	@ (1004eaa4 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004ea7e:	2191      	movs	r1, #145	@ 0x91
1004ea80:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004ea82:	4b07      	ldr	r3, [pc, #28]	@ (1004eaa0 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004ea84:	0018      	movs	r0, r3
1004ea86:	f7ff fa7a 	bl	1004df7e <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
1004ea8a:	4b05      	ldr	r3, [pc, #20]	@ (1004eaa0 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004ea8c:	0018      	movs	r0, r3
1004ea8e:	f7ff fa84 	bl	1004df9a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
1004ea92:	0003      	movs	r3, r0
1004ea94:	607b      	str	r3, [r7, #4]
}
1004ea96:	46c0      	nop			@ (mov r8, r8)
1004ea98:	46bd      	mov	sp, r7
1004ea9a:	b002      	add	sp, #8
1004ea9c:	bd80      	pop	{r7, pc}
1004ea9e:	46c0      	nop			@ (mov r8, r8)
1004eaa0:	60001800 	.word	0x60001800
1004eaa4:	20000fd0 	.word	0x20000fd0

1004eaa8 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
1004eaa8:	b580      	push	{r7, lr}
1004eaaa:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004eaac:	46c0      	nop			@ (mov r8, r8)
1004eaae:	4b0b      	ldr	r3, [pc, #44]	@ (1004eadc <_calibrationProcedure+0x34>)
1004eab0:	0018      	movs	r0, r3
1004eab2:	f7ff fabc 	bl	1004e02e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004eab6:	1e03      	subs	r3, r0, #0
1004eab8:	d0f9      	beq.n	1004eaae <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
1004eaba:	4b08      	ldr	r3, [pc, #32]	@ (1004eadc <_calibrationProcedure+0x34>)
1004eabc:	2117      	movs	r1, #23
1004eabe:	0018      	movs	r0, r3
1004eac0:	f7ff fa7c 	bl	1004dfbc <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
1004eac4:	4b06      	ldr	r3, [pc, #24]	@ (1004eae0 <_calibrationProcedure+0x38>)
1004eac6:	0018      	movs	r0, r3
1004eac8:	f000 f81e 	bl	1004eb08 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
1004eacc:	4b05      	ldr	r3, [pc, #20]	@ (1004eae4 <_calibrationProcedure+0x3c>)
1004eace:	69da      	ldr	r2, [r3, #28]
1004ead0:	4b04      	ldr	r3, [pc, #16]	@ (1004eae4 <_calibrationProcedure+0x3c>)
1004ead2:	621a      	str	r2, [r3, #32]

}
1004ead4:	46c0      	nop			@ (mov r8, r8)
1004ead6:	46bd      	mov	sp, r7
1004ead8:	bd80      	pop	{r7, pc}
1004eada:	46c0      	nop			@ (mov r8, r8)
1004eadc:	60001000 	.word	0x60001000
1004eae0:	20000fe0 	.word	0x20000fe0
1004eae4:	20000fd0 	.word	0x20000fd0

1004eae8 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
1004eae8:	b580      	push	{r7, lr}
1004eaea:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
1004eaec:	4b05      	ldr	r3, [pc, #20]	@ (1004eb04 <_timer_start_calibration+0x1c>)
1004eaee:	0018      	movs	r0, r3
1004eaf0:	f7ff fa8f 	bl	1004e012 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
1004eaf4:	4b03      	ldr	r3, [pc, #12]	@ (1004eb04 <_timer_start_calibration+0x1c>)
1004eaf6:	0018      	movs	r0, r3
1004eaf8:	f7ff fa6c 	bl	1004dfd4 <LL_RADIO_TIMER_StartLSICalibration>
}
1004eafc:	46c0      	nop			@ (mov r8, r8)
1004eafe:	46bd      	mov	sp, r7
1004eb00:	bd80      	pop	{r7, pc}
1004eb02:	46c0      	nop			@ (mov r8, r8)
1004eb04:	60001000 	.word	0x60001000

1004eb08 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
1004eb08:	b580      	push	{r7, lr}
1004eb0a:	b082      	sub	sp, #8
1004eb0c:	af00      	add	r7, sp, #0
1004eb0e:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
1004eb10:	f7ff ffea 	bl	1004eae8 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004eb14:	46c0      	nop			@ (mov r8, r8)
1004eb16:	4b07      	ldr	r3, [pc, #28]	@ (1004eb34 <_timer_calibrate+0x2c>)
1004eb18:	0018      	movs	r0, r3
1004eb1a:	f7ff fa88 	bl	1004e02e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004eb1e:	1e03      	subs	r3, r0, #0
1004eb20:	d0f9      	beq.n	1004eb16 <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
1004eb22:	687b      	ldr	r3, [r7, #4]
1004eb24:	0018      	movs	r0, r3
1004eb26:	f000 f807 	bl	1004eb38 <_get_calibration_data>
}
1004eb2a:	46c0      	nop			@ (mov r8, r8)
1004eb2c:	46bd      	mov	sp, r7
1004eb2e:	b002      	add	sp, #8
1004eb30:	bd80      	pop	{r7, pc}
1004eb32:	46c0      	nop			@ (mov r8, r8)
1004eb34:	60001000 	.word	0x60001000

1004eb38 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
1004eb38:	b580      	push	{r7, lr}
1004eb3a:	b08a      	sub	sp, #40	@ 0x28
1004eb3c:	af00      	add	r7, sp, #0
1004eb3e:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004eb40:	4b2e      	ldr	r3, [pc, #184]	@ (1004ebfc <_get_calibration_data+0xc4>)
1004eb42:	0018      	movs	r0, r3
1004eb44:	f7ff fa51 	bl	1004dfea <LL_RADIO_TIMER_GetLSIPeriod>
1004eb48:	0003      	movs	r3, r0
1004eb4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004eb4c:	e005      	b.n	1004eb5a <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004eb4e:	4b2b      	ldr	r3, [pc, #172]	@ (1004ebfc <_get_calibration_data+0xc4>)
1004eb50:	0018      	movs	r0, r3
1004eb52:	f7ff fa4a 	bl	1004dfea <LL_RADIO_TIMER_GetLSIPeriod>
1004eb56:	0003      	movs	r3, r0
1004eb58:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004eb5a:	4b28      	ldr	r3, [pc, #160]	@ (1004ebfc <_get_calibration_data+0xc4>)
1004eb5c:	0018      	movs	r0, r3
1004eb5e:	f7ff fa44 	bl	1004dfea <LL_RADIO_TIMER_GetLSIPeriod>
1004eb62:	0002      	movs	r2, r0
1004eb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eb66:	429a      	cmp	r2, r3
1004eb68:	d1f1      	bne.n	1004eb4e <_get_calibration_data+0x16>
1004eb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eb6c:	2b00      	cmp	r3, #0
1004eb6e:	d0ee      	beq.n	1004eb4e <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
1004eb70:	4b23      	ldr	r3, [pc, #140]	@ (1004ec00 <_get_calibration_data+0xc8>)
1004eb72:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
1004eb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eb76:	121b      	asrs	r3, r3, #8
1004eb78:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
1004eb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004eb7c:	22ff      	movs	r2, #255	@ 0xff
1004eb7e:	4013      	ands	r3, r2
1004eb80:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
1004eb82:	69fb      	ldr	r3, [r7, #28]
1004eb84:	69ba      	ldr	r2, [r7, #24]
1004eb86:	435a      	muls	r2, r3
1004eb88:	697b      	ldr	r3, [r7, #20]
1004eb8a:	69f9      	ldr	r1, [r7, #28]
1004eb8c:	434b      	muls	r3, r1
1004eb8e:	121b      	asrs	r3, r3, #8
1004eb90:	18d3      	adds	r3, r2, r3
1004eb92:	3310      	adds	r3, #16
1004eb94:	115a      	asrs	r2, r3, #5
1004eb96:	687b      	ldr	r3, [r7, #4]
1004eb98:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
1004eb9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004eb9c:	687b      	ldr	r3, [r7, #4]
1004eb9e:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
1004eba0:	4b18      	ldr	r3, [pc, #96]	@ (1004ec04 <_get_calibration_data+0xcc>)
1004eba2:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004eba4:	4b15      	ldr	r3, [pc, #84]	@ (1004ebfc <_get_calibration_data+0xc4>)
1004eba6:	0018      	movs	r0, r3
1004eba8:	f7ff fa29 	bl	1004dffe <LL_RADIO_TIMER_GetLSIFrequency>
1004ebac:	0003      	movs	r3, r0
1004ebae:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004ebb0:	e005      	b.n	1004ebbe <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004ebb2:	4b12      	ldr	r3, [pc, #72]	@ (1004ebfc <_get_calibration_data+0xc4>)
1004ebb4:	0018      	movs	r0, r3
1004ebb6:	f7ff fa22 	bl	1004dffe <LL_RADIO_TIMER_GetLSIFrequency>
1004ebba:	0003      	movs	r3, r0
1004ebbc:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004ebbe:	4b0f      	ldr	r3, [pc, #60]	@ (1004ebfc <_get_calibration_data+0xc4>)
1004ebc0:	0018      	movs	r0, r3
1004ebc2:	f7ff fa1c 	bl	1004dffe <LL_RADIO_TIMER_GetLSIFrequency>
1004ebc6:	0002      	movs	r2, r0
1004ebc8:	6a3b      	ldr	r3, [r7, #32]
1004ebca:	429a      	cmp	r2, r3
1004ebcc:	d1f1      	bne.n	1004ebb2 <_get_calibration_data+0x7a>
1004ebce:	6a3b      	ldr	r3, [r7, #32]
1004ebd0:	2b00      	cmp	r3, #0
1004ebd2:	d0ee      	beq.n	1004ebb2 <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
1004ebd4:	6a3b      	ldr	r3, [r7, #32]
1004ebd6:	119b      	asrs	r3, r3, #6
1004ebd8:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
1004ebda:	68fb      	ldr	r3, [r7, #12]
1004ebdc:	693a      	ldr	r2, [r7, #16]
1004ebde:	4353      	muls	r3, r2
1004ebe0:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
1004ebe2:	68bb      	ldr	r3, [r7, #8]
1004ebe4:	3380      	adds	r3, #128	@ 0x80
1004ebe6:	121a      	asrs	r2, r3, #8
1004ebe8:	687b      	ldr	r3, [r7, #4]
1004ebea:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
1004ebec:	6a3a      	ldr	r2, [r7, #32]
1004ebee:	687b      	ldr	r3, [r7, #4]
1004ebf0:	605a      	str	r2, [r3, #4]
}
1004ebf2:	46c0      	nop			@ (mov r8, r8)
1004ebf4:	46bd      	mov	sp, r7
1004ebf6:	b00a      	add	sp, #40	@ 0x28
1004ebf8:	bd80      	pop	{r7, pc}
1004ebfa:	46c0      	nop			@ (mov r8, r8)
1004ebfc:	60001000 	.word	0x60001000
1004ec00:	0008bcf6 	.word	0x0008bcf6
1004ec04:	00000753 	.word	0x00000753

1004ec08 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
1004ec08:	b590      	push	{r4, r7, lr}
1004ec0a:	b085      	sub	sp, #20
1004ec0c:	af00      	add	r7, sp, #0
1004ec0e:	6078      	str	r0, [r7, #4]
1004ec10:	000a      	movs	r2, r1
1004ec12:	1cfb      	adds	r3, r7, #3
1004ec14:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
1004ec16:	4b38      	ldr	r3, [pc, #224]	@ (1004ecf8 <_configureTxRxDelay+0xf0>)
1004ec18:	7b9b      	ldrb	r3, [r3, #14]
1004ec1a:	b2db      	uxtb	r3, r3
1004ec1c:	2b00      	cmp	r3, #0
1004ec1e:	da00      	bge.n	1004ec22 <_configureTxRxDelay+0x1a>
1004ec20:	3307      	adds	r3, #7
1004ec22:	10db      	asrs	r3, r3, #3
1004ec24:	b2da      	uxtb	r2, r3
1004ec26:	240f      	movs	r4, #15
1004ec28:	193b      	adds	r3, r7, r4
1004ec2a:	3201      	adds	r2, #1
1004ec2c:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
1004ec2e:	687b      	ldr	r3, [r7, #4]
1004ec30:	699b      	ldr	r3, [r3, #24]
1004ec32:	0019      	movs	r1, r3
1004ec34:	4b31      	ldr	r3, [pc, #196]	@ (1004ecfc <_configureTxRxDelay+0xf4>)
1004ec36:	001a      	movs	r2, r3
1004ec38:	201b      	movs	r0, #27
1004ec3a:	f7f1 fa41 	bl	100400c0 <blue_unit_conversion>
1004ec3e:	0002      	movs	r2, r0
1004ec40:	4b2d      	ldr	r3, [pc, #180]	@ (1004ecf8 <_configureTxRxDelay+0xf0>)
1004ec42:	b2d2      	uxtb	r2, r2
1004ec44:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
1004ec46:	4b2c      	ldr	r3, [pc, #176]	@ (1004ecf8 <_configureTxRxDelay+0xf0>)
1004ec48:	799b      	ldrb	r3, [r3, #6]
1004ec4a:	b2db      	uxtb	r3, r3
1004ec4c:	0018      	movs	r0, r3
1004ec4e:	f000 f86d 	bl	1004ed2c <_us_to_machinetime>
1004ec52:	0003      	movs	r3, r0
1004ec54:	b2d9      	uxtb	r1, r3
1004ec56:	687b      	ldr	r3, [r7, #4]
1004ec58:	223d      	movs	r2, #61	@ 0x3d
1004ec5a:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
1004ec5c:	4b26      	ldr	r3, [pc, #152]	@ (1004ecf8 <_configureTxRxDelay+0xf0>)
1004ec5e:	7a1b      	ldrb	r3, [r3, #8]
1004ec60:	b2db      	uxtb	r3, r3
1004ec62:	001a      	movs	r2, r3
1004ec64:	193b      	adds	r3, r7, r4
1004ec66:	781b      	ldrb	r3, [r3, #0]
1004ec68:	18d3      	adds	r3, r2, r3
1004ec6a:	0018      	movs	r0, r3
1004ec6c:	f000 f85e 	bl	1004ed2c <_us_to_machinetime>
1004ec70:	0003      	movs	r3, r0
1004ec72:	b2d9      	uxtb	r1, r3
1004ec74:	687b      	ldr	r3, [r7, #4]
1004ec76:	2238      	movs	r2, #56	@ 0x38
1004ec78:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
1004ec7a:	4b1f      	ldr	r3, [pc, #124]	@ (1004ecf8 <_configureTxRxDelay+0xf0>)
1004ec7c:	7a5b      	ldrb	r3, [r3, #9]
1004ec7e:	b2db      	uxtb	r3, r3
1004ec80:	001a      	movs	r2, r3
1004ec82:	193b      	adds	r3, r7, r4
1004ec84:	781b      	ldrb	r3, [r3, #0]
1004ec86:	18d3      	adds	r3, r2, r3
1004ec88:	0018      	movs	r0, r3
1004ec8a:	f000 f84f 	bl	1004ed2c <_us_to_machinetime>
1004ec8e:	0003      	movs	r3, r0
1004ec90:	b2d9      	uxtb	r1, r3
1004ec92:	687b      	ldr	r3, [r7, #4]
1004ec94:	2239      	movs	r2, #57	@ 0x39
1004ec96:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
1004ec98:	4b17      	ldr	r3, [pc, #92]	@ (1004ecf8 <_configureTxRxDelay+0xf0>)
1004ec9a:	7a9b      	ldrb	r3, [r3, #10]
1004ec9c:	b2db      	uxtb	r3, r3
1004ec9e:	0018      	movs	r0, r3
1004eca0:	f000 f844 	bl	1004ed2c <_us_to_machinetime>
1004eca4:	0003      	movs	r3, r0
1004eca6:	b2d9      	uxtb	r1, r3
1004eca8:	687b      	ldr	r3, [r7, #4]
1004ecaa:	223a      	movs	r2, #58	@ 0x3a
1004ecac:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
1004ecae:	4b12      	ldr	r3, [pc, #72]	@ (1004ecf8 <_configureTxRxDelay+0xf0>)
1004ecb0:	7adb      	ldrb	r3, [r3, #11]
1004ecb2:	b2db      	uxtb	r3, r3
1004ecb4:	0018      	movs	r0, r3
1004ecb6:	f000 f839 	bl	1004ed2c <_us_to_machinetime>
1004ecba:	0003      	movs	r3, r0
1004ecbc:	b2d9      	uxtb	r1, r3
1004ecbe:	687b      	ldr	r3, [r7, #4]
1004ecc0:	223b      	movs	r2, #59	@ 0x3b
1004ecc2:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
1004ecc4:	1cfb      	adds	r3, r7, #3
1004ecc6:	781b      	ldrb	r3, [r3, #0]
1004ecc8:	2b00      	cmp	r3, #0
1004ecca:	d010      	beq.n	1004ecee <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
1004eccc:	4b0a      	ldr	r3, [pc, #40]	@ (1004ecf8 <_configureTxRxDelay+0xf0>)
1004ecce:	7a1b      	ldrb	r3, [r3, #8]
1004ecd0:	b2db      	uxtb	r3, r3
1004ecd2:	001a      	movs	r2, r3
1004ecd4:	193b      	adds	r3, r7, r4
1004ecd6:	781b      	ldrb	r3, [r3, #0]
1004ecd8:	18d3      	adds	r3, r2, r3
1004ecda:	0018      	movs	r0, r3
1004ecdc:	f000 f810 	bl	1004ed00 <_us_to_systime>
1004ece0:	0003      	movs	r3, r0
1004ece2:	b2db      	uxtb	r3, r3
1004ece4:	331b      	adds	r3, #27
1004ece6:	b2d9      	uxtb	r1, r3
1004ece8:	687b      	ldr	r3, [r7, #4]
1004ecea:	223c      	movs	r2, #60	@ 0x3c
1004ecec:	5499      	strb	r1, [r3, r2]
  }

}
1004ecee:	46c0      	nop			@ (mov r8, r8)
1004ecf0:	46bd      	mov	sp, r7
1004ecf2:	b005      	add	sp, #20
1004ecf4:	bd90      	pop	{r4, r7, pc}
1004ecf6:	46c0      	nop			@ (mov r8, r8)
1004ecf8:	200000c0 	.word	0x200000c0
1004ecfc:	00000326 	.word	0x00000326

1004ed00 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
1004ed00:	b580      	push	{r7, lr}
1004ed02:	b084      	sub	sp, #16
1004ed04:	af00      	add	r7, sp, #0
1004ed06:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
1004ed08:	687b      	ldr	r3, [r7, #4]
1004ed0a:	2268      	movs	r2, #104	@ 0x68
1004ed0c:	4353      	muls	r3, r2
1004ed0e:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
1004ed10:	687b      	ldr	r3, [r7, #4]
1004ed12:	22db      	movs	r2, #219	@ 0xdb
1004ed14:	4353      	muls	r3, r2
1004ed16:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
1004ed18:	68fb      	ldr	r3, [r7, #12]
1004ed1a:	0a1a      	lsrs	r2, r3, #8
1004ed1c:	68bb      	ldr	r3, [r7, #8]
1004ed1e:	0c1b      	lsrs	r3, r3, #16
1004ed20:	18d3      	adds	r3, r2, r3
}
1004ed22:	0018      	movs	r0, r3
1004ed24:	46bd      	mov	sp, r7
1004ed26:	b004      	add	sp, #16
1004ed28:	bd80      	pop	{r7, pc}
	...

1004ed2c <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
1004ed2c:	b5b0      	push	{r4, r5, r7, lr}
1004ed2e:	b088      	sub	sp, #32
1004ed30:	af00      	add	r7, sp, #0
1004ed32:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
1004ed34:	4915      	ldr	r1, [pc, #84]	@ (1004ed8c <_us_to_machinetime+0x60>)
1004ed36:	6949      	ldr	r1, [r1, #20]
1004ed38:	6039      	str	r1, [r7, #0]
1004ed3a:	2100      	movs	r1, #0
1004ed3c:	6079      	str	r1, [r7, #4]
1004ed3e:	68f9      	ldr	r1, [r7, #12]
1004ed40:	000a      	movs	r2, r1
1004ed42:	2100      	movs	r1, #0
1004ed44:	000b      	movs	r3, r1
1004ed46:	6838      	ldr	r0, [r7, #0]
1004ed48:	6879      	ldr	r1, [r7, #4]
1004ed4a:	f7f1 fc8b 	bl	10040664 <__aeabi_lmul>
1004ed4e:	0002      	movs	r2, r0
1004ed50:	000b      	movs	r3, r1
1004ed52:	0010      	movs	r0, r2
1004ed54:	0019      	movs	r1, r3
1004ed56:	0002      	movs	r2, r0
1004ed58:	000b      	movs	r3, r1
1004ed5a:	1892      	adds	r2, r2, r2
1004ed5c:	415b      	adcs	r3, r3
1004ed5e:	1812      	adds	r2, r2, r0
1004ed60:	414b      	adcs	r3, r1
1004ed62:	61ba      	str	r2, [r7, #24]
1004ed64:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
1004ed66:	69ba      	ldr	r2, [r7, #24]
1004ed68:	69fb      	ldr	r3, [r7, #28]
1004ed6a:	2080      	movs	r0, #128	@ 0x80
1004ed6c:	04c0      	lsls	r0, r0, #19
1004ed6e:	2100      	movs	r1, #0
1004ed70:	1812      	adds	r2, r2, r0
1004ed72:	414b      	adcs	r3, r1
1004ed74:	0159      	lsls	r1, r3, #5
1004ed76:	0ed4      	lsrs	r4, r2, #27
1004ed78:	430c      	orrs	r4, r1
1004ed7a:	0edd      	lsrs	r5, r3, #27
1004ed7c:	0023      	movs	r3, r4
1004ed7e:	617b      	str	r3, [r7, #20]

  return time_mt;
1004ed80:	697b      	ldr	r3, [r7, #20]
}
1004ed82:	0018      	movs	r0, r3
1004ed84:	46bd      	mov	sp, r7
1004ed86:	b008      	add	sp, #32
1004ed88:	bdb0      	pop	{r4, r5, r7, pc}
1004ed8a:	46c0      	nop			@ (mov r8, r8)
1004ed8c:	20000fd0 	.word	0x20000fd0

1004ed90 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
1004ed90:	b580      	push	{r7, lr}
1004ed92:	b084      	sub	sp, #16
1004ed94:	af00      	add	r7, sp, #0
1004ed96:	0002      	movs	r2, r0
1004ed98:	6039      	str	r1, [r7, #0]
1004ed9a:	1dbb      	adds	r3, r7, #6
1004ed9c:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
1004ed9e:	1dbb      	adds	r3, r7, #6
1004eda0:	881b      	ldrh	r3, [r3, #0]
1004eda2:	6839      	ldr	r1, [r7, #0]
1004eda4:	4a0e      	ldr	r2, [pc, #56]	@ (1004ede0 <_update_xtal_startup_time+0x50>)
1004eda6:	0018      	movs	r0, r3
1004eda8:	f7f1 f98a 	bl	100400c0 <blue_unit_conversion>
1004edac:	0003      	movs	r3, r0
1004edae:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
1004edb0:	68fa      	ldr	r2, [r7, #12]
1004edb2:	2380      	movs	r3, #128	@ 0x80
1004edb4:	015b      	lsls	r3, r3, #5
1004edb6:	429a      	cmp	r2, r3
1004edb8:	db01      	blt.n	1004edbe <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
1004edba:	4b0a      	ldr	r3, [pc, #40]	@ (1004ede4 <_update_xtal_startup_time+0x54>)
1004edbc:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
1004edbe:	68fb      	ldr	r3, [r7, #12]
1004edc0:	2b0f      	cmp	r3, #15
1004edc2:	dc01      	bgt.n	1004edc8 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
1004edc4:	2310      	movs	r3, #16
1004edc6:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
1004edc8:	68fb      	ldr	r3, [r7, #12]
1004edca:	111b      	asrs	r3, r3, #4
1004edcc:	b2db      	uxtb	r3, r3
1004edce:	4a06      	ldr	r2, [pc, #24]	@ (1004ede8 <_update_xtal_startup_time+0x58>)
1004edd0:	0019      	movs	r1, r3
1004edd2:	0010      	movs	r0, r2
1004edd4:	f7ff f870 	bl	1004deb8 <LL_RADIO_TIMER_SetWakeupOffset>
}
1004edd8:	46c0      	nop			@ (mov r8, r8)
1004edda:	46bd      	mov	sp, r7
1004eddc:	b004      	add	sp, #16
1004edde:	bd80      	pop	{r7, pc}
1004ede0:	00000326 	.word	0x00000326
1004ede4:	00000fff 	.word	0x00000fff
1004ede8:	60001800 	.word	0x60001800

1004edec <_calibration_callback>:

static void _calibration_callback(void *handle)
{
1004edec:	b580      	push	{r7, lr}
1004edee:	b082      	sub	sp, #8
1004edf0:	af00      	add	r7, sp, #0
1004edf2:	6078      	str	r0, [r7, #4]
  if(RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE)
1004edf4:	4b0f      	ldr	r3, [pc, #60]	@ (1004ee34 <_calibration_callback+0x48>)
1004edf6:	7a1b      	ldrb	r3, [r3, #8]
1004edf8:	2201      	movs	r2, #1
1004edfa:	4053      	eors	r3, r2
1004edfc:	b2db      	uxtb	r3, r3
1004edfe:	2b00      	cmp	r3, #0
1004ee00:	d008      	beq.n	1004ee14 <_calibration_callback+0x28>
  {
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004ee02:	4b0c      	ldr	r3, [pc, #48]	@ (1004ee34 <_calibration_callback+0x48>)
1004ee04:	781b      	ldrb	r3, [r3, #0]
1004ee06:	2b00      	cmp	r3, #0
1004ee08:	d001      	beq.n	1004ee0e <_calibration_callback+0x22>
    {
      _timer_start_calibration();
1004ee0a:	f7ff fe6d 	bl	1004eae8 <_timer_start_calibration>
    }
    RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
1004ee0e:	4b09      	ldr	r3, [pc, #36]	@ (1004ee34 <_calibration_callback+0x48>)
1004ee10:	2201      	movs	r2, #1
1004ee12:	721a      	strb	r2, [r3, #8]
  }
  _start_timer(&RADIO_TIMER_Context.calibrationTimer, HAL_RADIO_TIMER_GetCurrentSysTime() + CALIBRATION_CHECK_DURATION);
1004ee14:	f7ff fd5c 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004ee18:	0002      	movs	r2, r0
1004ee1a:	000b      	movs	r3, r1
1004ee1c:	2064      	movs	r0, #100	@ 0x64
1004ee1e:	2100      	movs	r1, #0
1004ee20:	1812      	adds	r2, r2, r0
1004ee22:	414b      	adcs	r3, r1
1004ee24:	4904      	ldr	r1, [pc, #16]	@ (1004ee38 <_calibration_callback+0x4c>)
1004ee26:	0008      	movs	r0, r1
1004ee28:	f000 f808 	bl	1004ee3c <_start_timer>
}
1004ee2c:	46c0      	nop			@ (mov r8, r8)
1004ee2e:	46bd      	mov	sp, r7
1004ee30:	b002      	add	sp, #8
1004ee32:	bd80      	pop	{r7, pc}
1004ee34:	20000fd0 	.word	0x20000fd0
1004ee38:	20001010 	.word	0x20001010

1004ee3c <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004ee3c:	b590      	push	{r4, r7, lr}
1004ee3e:	b089      	sub	sp, #36	@ 0x24
1004ee40:	af00      	add	r7, sp, #0
1004ee42:	60f8      	str	r0, [r7, #12]
1004ee44:	603a      	str	r2, [r7, #0]
1004ee46:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
1004ee48:	2313      	movs	r3, #19
1004ee4a:	18fb      	adds	r3, r7, r3
1004ee4c:	2200      	movs	r2, #0
1004ee4e:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
1004ee50:	68fb      	ldr	r3, [r7, #12]
1004ee52:	7b1b      	ldrb	r3, [r3, #12]
1004ee54:	2b00      	cmp	r3, #0
1004ee56:	d001      	beq.n	1004ee5c <_start_timer+0x20>
  {
    return 1;
1004ee58:	2301      	movs	r3, #1
1004ee5a:	e047      	b.n	1004eeec <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
1004ee5c:	68f9      	ldr	r1, [r7, #12]
1004ee5e:	683a      	ldr	r2, [r7, #0]
1004ee60:	687b      	ldr	r3, [r7, #4]
1004ee62:	600a      	str	r2, [r1, #0]
1004ee64:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
1004ee66:	68fb      	ldr	r3, [r7, #12]
1004ee68:	2201      	movs	r2, #1
1004ee6a:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
1004ee6c:	4b21      	ldr	r3, [pc, #132]	@ (1004eef4 <_start_timer+0xb8>)
1004ee6e:	228c      	movs	r2, #140	@ 0x8c
1004ee70:	589b      	ldr	r3, [r3, r2]
1004ee72:	68fa      	ldr	r2, [r7, #12]
1004ee74:	0011      	movs	r1, r2
1004ee76:	0018      	movs	r0, r3
1004ee78:	f000 f92e 	bl	1004f0d8 <_insert_timer_in_queue>
1004ee7c:	0002      	movs	r2, r0
1004ee7e:	68fb      	ldr	r3, [r7, #12]
1004ee80:	4293      	cmp	r3, r2
1004ee82:	d130      	bne.n	1004eee6 <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
1004ee84:	2413      	movs	r4, #19
1004ee86:	193a      	adds	r2, r7, r4
1004ee88:	68fb      	ldr	r3, [r7, #12]
1004ee8a:	0011      	movs	r1, r2
1004ee8c:	0018      	movs	r0, r3
1004ee8e:	f000 f89b 	bl	1004efc8 <_update_user_timeout>
1004ee92:	0002      	movs	r2, r0
1004ee94:	4b17      	ldr	r3, [pc, #92]	@ (1004eef4 <_start_timer+0xb8>)
1004ee96:	218c      	movs	r1, #140	@ 0x8c
1004ee98:	505a      	str	r2, [r3, r1]
    if (expired)
1004ee9a:	193b      	adds	r3, r7, r4
1004ee9c:	781b      	ldrb	r3, [r3, #0]
1004ee9e:	2b00      	cmp	r3, #0
1004eea0:	d021      	beq.n	1004eee6 <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004eea2:	f3ef 8310 	mrs	r3, PRIMASK
1004eea6:	61bb      	str	r3, [r7, #24]
  return(result);
1004eea8:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004eeaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004eeac:	b672      	cpsid	i
}
1004eeae:	46c0      	nop			@ (mov r8, r8)
1004eeb0:	4b10      	ldr	r3, [pc, #64]	@ (1004eef4 <_start_timer+0xb8>)
1004eeb2:	2291      	movs	r2, #145	@ 0x91
1004eeb4:	5c9b      	ldrb	r3, [r3, r2]
1004eeb6:	3301      	adds	r3, #1
1004eeb8:	4a0e      	ldr	r2, [pc, #56]	@ (1004eef4 <_start_timer+0xb8>)
1004eeba:	2192      	movs	r1, #146	@ 0x92
1004eebc:	5c52      	ldrb	r2, [r2, r1]
1004eebe:	4293      	cmp	r3, r2
1004eec0:	d103      	bne.n	1004eeca <_start_timer+0x8e>
1004eec2:	4b0c      	ldr	r3, [pc, #48]	@ (1004eef4 <_start_timer+0xb8>)
1004eec4:	2291      	movs	r2, #145	@ 0x91
1004eec6:	5c9b      	ldrb	r3, [r3, r2]
1004eec8:	e004      	b.n	1004eed4 <_start_timer+0x98>
1004eeca:	4b0a      	ldr	r3, [pc, #40]	@ (1004eef4 <_start_timer+0xb8>)
1004eecc:	2291      	movs	r2, #145	@ 0x91
1004eece:	5c9b      	ldrb	r3, [r3, r2]
1004eed0:	3301      	adds	r3, #1
1004eed2:	b2db      	uxtb	r3, r3
1004eed4:	4a07      	ldr	r2, [pc, #28]	@ (1004eef4 <_start_timer+0xb8>)
1004eed6:	2191      	movs	r1, #145	@ 0x91
1004eed8:	5453      	strb	r3, [r2, r1]
1004eeda:	69fb      	ldr	r3, [r7, #28]
1004eedc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004eede:	697b      	ldr	r3, [r7, #20]
1004eee0:	f383 8810 	msr	PRIMASK, r3
}
1004eee4:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
  #endif
  
  return expired;
1004eee6:	2313      	movs	r3, #19
1004eee8:	18fb      	adds	r3, r7, r3
1004eeea:	781b      	ldrb	r3, [r3, #0]
}
1004eeec:	0018      	movs	r0, r3
1004eeee:	46bd      	mov	sp, r7
1004eef0:	b009      	add	sp, #36	@ 0x24
1004eef2:	bd90      	pop	{r4, r7, pc}
1004eef4:	20000fd0 	.word	0x20000fd0

1004eef8 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
1004eef8:	b5b0      	push	{r4, r5, r7, lr}
1004eefa:	b08a      	sub	sp, #40	@ 0x28
1004eefc:	af00      	add	r7, sp, #0
1004eefe:	60f8      	str	r0, [r7, #12]
1004ef00:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ef02:	f3ef 8310 	mrs	r3, PRIMASK
1004ef06:	617b      	str	r3, [r7, #20]
  return(result);
1004ef08:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
1004ef0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004ef0c:	b672      	cpsid	i
}
1004ef0e:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
1004ef10:	68fb      	ldr	r3, [r7, #12]
1004ef12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004ef14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004ef16:	623a      	str	r2, [r7, #32]
1004ef18:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004ef1a:	4b29      	ldr	r3, [pc, #164]	@ (1004efc0 <_get_system_time_and_machine+0xc8>)
1004ef1c:	0018      	movs	r0, r3
1004ef1e:	f7fe fffc 	bl	1004df1a <LL_RADIO_TIMER_GetAbsoluteTime>
1004ef22:	0002      	movs	r2, r0
1004ef24:	68bb      	ldr	r3, [r7, #8]
1004ef26:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
1004ef28:	68bb      	ldr	r3, [r7, #8]
1004ef2a:	681a      	ldr	r2, [r3, #0]
1004ef2c:	68fb      	ldr	r3, [r7, #12]
1004ef2e:	2180      	movs	r1, #128	@ 0x80
1004ef30:	585b      	ldr	r3, [r3, r1]
1004ef32:	1ad3      	subs	r3, r2, r3
1004ef34:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
1004ef36:	68fb      	ldr	r3, [r7, #12]
1004ef38:	69db      	ldr	r3, [r3, #28]
1004ef3a:	0019      	movs	r1, r3
1004ef3c:	4a21      	ldr	r2, [pc, #132]	@ (1004efc4 <_get_system_time_and_machine+0xcc>)
1004ef3e:	69bb      	ldr	r3, [r7, #24]
1004ef40:	0018      	movs	r0, r3
1004ef42:	f7f1 f8bd 	bl	100400c0 <blue_unit_conversion>
1004ef46:	0003      	movs	r3, r0
1004ef48:	603b      	str	r3, [r7, #0]
1004ef4a:	2300      	movs	r3, #0
1004ef4c:	607b      	str	r3, [r7, #4]
1004ef4e:	6a3a      	ldr	r2, [r7, #32]
1004ef50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ef52:	6838      	ldr	r0, [r7, #0]
1004ef54:	6879      	ldr	r1, [r7, #4]
1004ef56:	1812      	adds	r2, r2, r0
1004ef58:	414b      	adcs	r3, r1
1004ef5a:	623a      	str	r2, [r7, #32]
1004ef5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
1004ef5e:	68fb      	ldr	r3, [r7, #12]
1004ef60:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
1004ef62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1004ef64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004ef66:	4299      	cmp	r1, r3
1004ef68:	d305      	bcc.n	1004ef76 <_get_system_time_and_machine+0x7e>
1004ef6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004ef6c:	4299      	cmp	r1, r3
1004ef6e:	d115      	bne.n	1004ef9c <_get_system_time_and_machine+0xa4>
1004ef70:	6a39      	ldr	r1, [r7, #32]
1004ef72:	4291      	cmp	r1, r2
1004ef74:	d212      	bcs.n	1004ef9c <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004ef76:	68fb      	ldr	r3, [r7, #12]
1004ef78:	69db      	ldr	r3, [r3, #28]
1004ef7a:	0019      	movs	r1, r3
1004ef7c:	4a11      	ldr	r2, [pc, #68]	@ (1004efc4 <_get_system_time_and_machine+0xcc>)
1004ef7e:	2301      	movs	r3, #1
1004ef80:	425b      	negs	r3, r3
1004ef82:	0018      	movs	r0, r3
1004ef84:	f7f1 f89c 	bl	100400c0 <blue_unit_conversion>
1004ef88:	0003      	movs	r3, r0
1004ef8a:	001c      	movs	r4, r3
1004ef8c:	2300      	movs	r3, #0
1004ef8e:	001d      	movs	r5, r3
1004ef90:	6a3a      	ldr	r2, [r7, #32]
1004ef92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ef94:	1912      	adds	r2, r2, r4
1004ef96:	416b      	adcs	r3, r5
1004ef98:	623a      	str	r2, [r7, #32]
1004ef9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004ef9c:	68f9      	ldr	r1, [r7, #12]
1004ef9e:	6a3a      	ldr	r2, [r7, #32]
1004efa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004efa2:	678a      	str	r2, [r1, #120]	@ 0x78
1004efa4:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004efa6:	69fb      	ldr	r3, [r7, #28]
1004efa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004efaa:	693b      	ldr	r3, [r7, #16]
1004efac:	f383 8810 	msr	PRIMASK, r3
}
1004efb0:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
1004efb2:	6a3a      	ldr	r2, [r7, #32]
1004efb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004efb6:	0010      	movs	r0, r2
1004efb8:	0019      	movs	r1, r3
1004efba:	46bd      	mov	sp, r7
1004efbc:	b00a      	add	sp, #40	@ 0x28
1004efbe:	bdb0      	pop	{r4, r5, r7, pc}
1004efc0:	60001800 	.word	0x60001800
1004efc4:	00000635 	.word	0x00000635

1004efc8 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
1004efc8:	b5b0      	push	{r4, r5, r7, lr}
1004efca:	b08a      	sub	sp, #40	@ 0x28
1004efcc:	af00      	add	r7, sp, #0
1004efce:	6078      	str	r0, [r7, #4]
1004efd0:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
1004efd2:	687b      	ldr	r3, [r7, #4]
1004efd4:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
1004efd6:	687b      	ldr	r3, [r7, #4]
1004efd8:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
1004efda:	683b      	ldr	r3, [r7, #0]
1004efdc:	2200      	movs	r2, #0
1004efde:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
1004efe0:	e033      	b.n	1004f04a <_update_user_timeout+0x82>
  {
    if (curr->active)
1004efe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004efe4:	7b1b      	ldrb	r3, [r3, #12]
1004efe6:	2b00      	cmp	r3, #0
1004efe8:	d02c      	beq.n	1004f044 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004efea:	f3ef 8310 	mrs	r3, PRIMASK
1004efee:	60fb      	str	r3, [r7, #12]
  return(result);
1004eff0:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
1004eff2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004eff4:	b672      	cpsid	i
}
1004eff6:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004eff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004effa:	681c      	ldr	r4, [r3, #0]
1004effc:	685d      	ldr	r5, [r3, #4]
1004effe:	f7ff fc67 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004f002:	0002      	movs	r2, r0
1004f004:	000b      	movs	r3, r1
1004f006:	1aa4      	subs	r4, r4, r2
1004f008:	419d      	sbcs	r5, r3
1004f00a:	0022      	movs	r2, r4
1004f00c:	002b      	movs	r3, r5
1004f00e:	613a      	str	r2, [r7, #16]
1004f010:	617b      	str	r3, [r7, #20]
      if (delay > 0)
1004f012:	697b      	ldr	r3, [r7, #20]
1004f014:	2b00      	cmp	r3, #0
1004f016:	dc05      	bgt.n	1004f024 <_update_user_timeout+0x5c>
1004f018:	697b      	ldr	r3, [r7, #20]
1004f01a:	2b00      	cmp	r3, #0
1004f01c:	d108      	bne.n	1004f030 <_update_user_timeout+0x68>
1004f01e:	693b      	ldr	r3, [r7, #16]
1004f020:	2b00      	cmp	r3, #0
1004f022:	d005      	beq.n	1004f030 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
1004f024:	693b      	ldr	r3, [r7, #16]
1004f026:	2101      	movs	r1, #1
1004f028:	0018      	movs	r0, r3
1004f02a:	f000 f81d 	bl	1004f068 <VTIMER_SetWakeupTime>
1004f02e:	e002      	b.n	1004f036 <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
1004f030:	683b      	ldr	r3, [r7, #0]
1004f032:	2201      	movs	r2, #1
1004f034:	701a      	strb	r2, [r3, #0]
1004f036:	69fb      	ldr	r3, [r7, #28]
1004f038:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004f03a:	68bb      	ldr	r3, [r7, #8]
1004f03c:	f383 8810 	msr	PRIMASK, r3
}
1004f040:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
1004f042:	e005      	b.n	1004f050 <_update_user_timeout+0x88>
    }
    curr = curr->next;
1004f044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f046:	691b      	ldr	r3, [r3, #16]
1004f048:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
1004f04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f04c:	2b00      	cmp	r3, #0
1004f04e:	d1c8      	bne.n	1004efe2 <_update_user_timeout+0x1a>
  }
  if (*expired)
1004f050:	683b      	ldr	r3, [r7, #0]
1004f052:	781b      	ldrb	r3, [r3, #0]
1004f054:	2b00      	cmp	r3, #0
1004f056:	d001      	beq.n	1004f05c <_update_user_timeout+0x94>
  {
    return rootOrig;
1004f058:	6a3b      	ldr	r3, [r7, #32]
1004f05a:	e000      	b.n	1004f05e <_update_user_timeout+0x96>
  }

  return curr;
1004f05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004f05e:	0018      	movs	r0, r3
1004f060:	46bd      	mov	sp, r7
1004f062:	b00a      	add	sp, #40	@ 0x28
1004f064:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004f068 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
1004f068:	b580      	push	{r7, lr}
1004f06a:	b084      	sub	sp, #16
1004f06c:	af00      	add	r7, sp, #0
1004f06e:	6078      	str	r0, [r7, #4]
1004f070:	000a      	movs	r2, r1
1004f072:	1cfb      	adds	r3, r7, #3
1004f074:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
1004f076:	4b15      	ldr	r3, [pc, #84]	@ (1004f0cc <VTIMER_SetWakeupTime+0x64>)
1004f078:	699b      	ldr	r3, [r3, #24]
1004f07a:	0019      	movs	r1, r3
1004f07c:	4a14      	ldr	r2, [pc, #80]	@ (1004f0d0 <VTIMER_SetWakeupTime+0x68>)
1004f07e:	687b      	ldr	r3, [r7, #4]
1004f080:	0018      	movs	r0, r3
1004f082:	f7f1 f81d 	bl	100400c0 <blue_unit_conversion>
1004f086:	0003      	movs	r3, r0
1004f088:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
1004f08a:	687b      	ldr	r3, [r7, #4]
1004f08c:	2b20      	cmp	r3, #32
1004f08e:	d200      	bcs.n	1004f092 <VTIMER_SetWakeupTime+0x2a>
1004f090:	2320      	movs	r3, #32
1004f092:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004f094:	4b0f      	ldr	r3, [pc, #60]	@ (1004f0d4 <VTIMER_SetWakeupTime+0x6c>)
1004f096:	0018      	movs	r0, r3
1004f098:	f7fe ff3f 	bl	1004df1a <LL_RADIO_TIMER_GetAbsoluteTime>
1004f09c:	0003      	movs	r3, r0
1004f09e:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
1004f0a0:	687a      	ldr	r2, [r7, #4]
1004f0a2:	68fb      	ldr	r3, [r7, #12]
1004f0a4:	18d3      	adds	r3, r2, r3
1004f0a6:	3308      	adds	r3, #8
1004f0a8:	4a0a      	ldr	r2, [pc, #40]	@ (1004f0d4 <VTIMER_SetWakeupTime+0x6c>)
1004f0aa:	0019      	movs	r1, r3
1004f0ac:	0010      	movs	r0, r2
1004f0ae:	f7fe ff28 	bl	1004df02 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004f0b2:	4b08      	ldr	r3, [pc, #32]	@ (1004f0d4 <VTIMER_SetWakeupTime+0x6c>)
1004f0b4:	0018      	movs	r0, r3
1004f0b6:	f7fe ff3a 	bl	1004df2e <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004f0ba:	4b06      	ldr	r3, [pc, #24]	@ (1004f0d4 <VTIMER_SetWakeupTime+0x6c>)
1004f0bc:	0018      	movs	r0, r3
1004f0be:	f7fe fedb 	bl	1004de78 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
1004f0c2:	68fb      	ldr	r3, [r7, #12]
}
1004f0c4:	0018      	movs	r0, r3
1004f0c6:	46bd      	mov	sp, r7
1004f0c8:	b004      	add	sp, #16
1004f0ca:	bd80      	pop	{r7, pc}
1004f0cc:	20000fd0 	.word	0x20000fd0
1004f0d0:	00000326 	.word	0x00000326
1004f0d4:	60001800 	.word	0x60001800

1004f0d8 <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004f0d8:	b580      	push	{r7, lr}
1004f0da:	b086      	sub	sp, #24
1004f0dc:	af00      	add	r7, sp, #0
1004f0de:	6078      	str	r0, [r7, #4]
1004f0e0:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004f0e2:	687b      	ldr	r3, [r7, #4]
1004f0e4:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004f0e6:	2300      	movs	r3, #0
1004f0e8:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004f0ea:	687b      	ldr	r3, [r7, #4]
1004f0ec:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004f0ee:	e004      	b.n	1004f0fa <_insert_timer_in_queue+0x22>
  {
    prev = current;
1004f0f0:	697b      	ldr	r3, [r7, #20]
1004f0f2:	613b      	str	r3, [r7, #16]
    current = current->next;
1004f0f4:	697b      	ldr	r3, [r7, #20]
1004f0f6:	691b      	ldr	r3, [r3, #16]
1004f0f8:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004f0fa:	697b      	ldr	r3, [r7, #20]
1004f0fc:	2b00      	cmp	r3, #0
1004f0fe:	d00a      	beq.n	1004f116 <_insert_timer_in_queue+0x3e>
1004f100:	697b      	ldr	r3, [r7, #20]
1004f102:	681a      	ldr	r2, [r3, #0]
1004f104:	685b      	ldr	r3, [r3, #4]
1004f106:	6839      	ldr	r1, [r7, #0]
1004f108:	6808      	ldr	r0, [r1, #0]
1004f10a:	6849      	ldr	r1, [r1, #4]
1004f10c:	4299      	cmp	r1, r3
1004f10e:	d8ef      	bhi.n	1004f0f0 <_insert_timer_in_queue+0x18>
1004f110:	d101      	bne.n	1004f116 <_insert_timer_in_queue+0x3e>
1004f112:	4290      	cmp	r0, r2
1004f114:	d8ec      	bhi.n	1004f0f0 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
1004f116:	683b      	ldr	r3, [r7, #0]
1004f118:	697a      	ldr	r2, [r7, #20]
1004f11a:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
1004f11c:	693b      	ldr	r3, [r7, #16]
1004f11e:	2b00      	cmp	r3, #0
1004f120:	d102      	bne.n	1004f128 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
1004f122:	683b      	ldr	r3, [r7, #0]
1004f124:	60fb      	str	r3, [r7, #12]
1004f126:	e002      	b.n	1004f12e <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
1004f128:	693b      	ldr	r3, [r7, #16]
1004f12a:	683a      	ldr	r2, [r7, #0]
1004f12c:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004f12e:	68fb      	ldr	r3, [r7, #12]
}
1004f130:	0018      	movs	r0, r3
1004f132:	46bd      	mov	sp, r7
1004f134:	b006      	add	sp, #24
1004f136:	bd80      	pop	{r7, pc}

1004f138 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
1004f138:	b580      	push	{r7, lr}
1004f13a:	b082      	sub	sp, #8
1004f13c:	af00      	add	r7, sp, #0
1004f13e:	0002      	movs	r2, r0
1004f140:	1dfb      	adds	r3, r7, #7
1004f142:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
1004f144:	1dfb      	adds	r3, r7, #7
1004f146:	781b      	ldrb	r3, [r3, #0]
1004f148:	2b00      	cmp	r3, #0
1004f14a:	d010      	beq.n	1004f16e <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
1004f14c:	4b0e      	ldr	r3, [pc, #56]	@ (1004f188 <_virtualTimeBaseEnable+0x50>)
1004f14e:	2290      	movs	r2, #144	@ 0x90
1004f150:	5c9b      	ldrb	r3, [r3, r2]
1004f152:	2201      	movs	r2, #1
1004f154:	4053      	eors	r3, r2
1004f156:	b2db      	uxtb	r3, r3
1004f158:	2b00      	cmp	r3, #0
1004f15a:	d010      	beq.n	1004f17e <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004f15c:	4b0b      	ldr	r3, [pc, #44]	@ (1004f18c <_virtualTimeBaseEnable+0x54>)
1004f15e:	0018      	movs	r0, r3
1004f160:	f7ff fe44 	bl	1004edec <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
1004f164:	4b08      	ldr	r3, [pc, #32]	@ (1004f188 <_virtualTimeBaseEnable+0x50>)
1004f166:	2290      	movs	r2, #144	@ 0x90
1004f168:	2101      	movs	r1, #1
1004f16a:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
1004f16c:	e007      	b.n	1004f17e <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004f16e:	4b07      	ldr	r3, [pc, #28]	@ (1004f18c <_virtualTimeBaseEnable+0x54>)
1004f170:	0018      	movs	r0, r3
1004f172:	f7ff fc0f 	bl	1004e994 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004f176:	4b04      	ldr	r3, [pc, #16]	@ (1004f188 <_virtualTimeBaseEnable+0x50>)
1004f178:	2290      	movs	r2, #144	@ 0x90
1004f17a:	2100      	movs	r1, #0
1004f17c:	5499      	strb	r1, [r3, r2]
}
1004f17e:	46c0      	nop			@ (mov r8, r8)
1004f180:	46bd      	mov	sp, r7
1004f182:	b002      	add	sp, #8
1004f184:	bd80      	pop	{r7, pc}
1004f186:	46c0      	nop			@ (mov r8, r8)
1004f188:	20000fd0 	.word	0x20000fd0
1004f18c:	20001010 	.word	0x20001010

1004f190 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004f190:	b580      	push	{r7, lr}
1004f192:	b086      	sub	sp, #24
1004f194:	af00      	add	r7, sp, #0
1004f196:	6078      	str	r0, [r7, #4]
1004f198:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004f19a:	687b      	ldr	r3, [r7, #4]
1004f19c:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004f19e:	2300      	movs	r3, #0
1004f1a0:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004f1a2:	687b      	ldr	r3, [r7, #4]
1004f1a4:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004f1a6:	e004      	b.n	1004f1b2 <_remove_timer_in_queue+0x22>
  {
    prev = current;
1004f1a8:	697b      	ldr	r3, [r7, #20]
1004f1aa:	613b      	str	r3, [r7, #16]
    current = current->next;
1004f1ac:	697b      	ldr	r3, [r7, #20]
1004f1ae:	691b      	ldr	r3, [r3, #16]
1004f1b0:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004f1b2:	697b      	ldr	r3, [r7, #20]
1004f1b4:	2b00      	cmp	r3, #0
1004f1b6:	d003      	beq.n	1004f1c0 <_remove_timer_in_queue+0x30>
1004f1b8:	697a      	ldr	r2, [r7, #20]
1004f1ba:	683b      	ldr	r3, [r7, #0]
1004f1bc:	429a      	cmp	r2, r3
1004f1be:	d1f3      	bne.n	1004f1a8 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
1004f1c0:	697b      	ldr	r3, [r7, #20]
1004f1c2:	2b00      	cmp	r3, #0
1004f1c4:	d00b      	beq.n	1004f1de <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004f1c6:	697a      	ldr	r2, [r7, #20]
1004f1c8:	687b      	ldr	r3, [r7, #4]
1004f1ca:	429a      	cmp	r2, r3
1004f1cc:	d103      	bne.n	1004f1d6 <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004f1ce:	697b      	ldr	r3, [r7, #20]
1004f1d0:	691b      	ldr	r3, [r3, #16]
1004f1d2:	60fb      	str	r3, [r7, #12]
1004f1d4:	e003      	b.n	1004f1de <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004f1d6:	697b      	ldr	r3, [r7, #20]
1004f1d8:	691a      	ldr	r2, [r3, #16]
1004f1da:	693b      	ldr	r3, [r7, #16]
1004f1dc:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004f1de:	68fb      	ldr	r3, [r7, #12]
}
1004f1e0:	0018      	movs	r0, r3
1004f1e2:	46bd      	mov	sp, r7
1004f1e4:	b006      	add	sp, #24
1004f1e6:	bd80      	pop	{r7, pc}

1004f1e8 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
1004f1e8:	b5b0      	push	{r4, r5, r7, lr}
1004f1ea:	b088      	sub	sp, #32
1004f1ec:	af00      	add	r7, sp, #0
1004f1ee:	6078      	str	r0, [r7, #4]
1004f1f0:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004f1f2:	687b      	ldr	r3, [r7, #4]
1004f1f4:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004f1f6:	2300      	movs	r3, #0
1004f1f8:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004f1fa:	687b      	ldr	r3, [r7, #4]
1004f1fc:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004f1fe:	683b      	ldr	r3, [r7, #0]
1004f200:	687a      	ldr	r2, [r7, #4]
1004f202:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
1004f204:	2300      	movs	r3, #0
1004f206:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
1004f208:	e021      	b.n	1004f24e <_check_callbacks+0x66>
  {

    if (curr->active)
1004f20a:	69fb      	ldr	r3, [r7, #28]
1004f20c:	7b1b      	ldrb	r3, [r3, #12]
1004f20e:	2b00      	cmp	r3, #0
1004f210:	d015      	beq.n	1004f23e <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004f212:	69fb      	ldr	r3, [r7, #28]
1004f214:	681c      	ldr	r4, [r3, #0]
1004f216:	685d      	ldr	r5, [r3, #4]
1004f218:	f7ff fb5a 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004f21c:	0002      	movs	r2, r0
1004f21e:	000b      	movs	r3, r1
1004f220:	1aa4      	subs	r4, r4, r2
1004f222:	419d      	sbcs	r5, r3
1004f224:	0022      	movs	r2, r4
1004f226:	002b      	movs	r3, r5
1004f228:	60ba      	str	r2, [r7, #8]
1004f22a:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
1004f22c:	68fb      	ldr	r3, [r7, #12]
1004f22e:	2b00      	cmp	r3, #0
1004f230:	dc11      	bgt.n	1004f256 <_check_callbacks+0x6e>
1004f232:	68fb      	ldr	r3, [r7, #12]
1004f234:	2b00      	cmp	r3, #0
1004f236:	d102      	bne.n	1004f23e <_check_callbacks+0x56>
1004f238:	68bb      	ldr	r3, [r7, #8]
1004f23a:	2b05      	cmp	r3, #5
1004f23c:	d80b      	bhi.n	1004f256 <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
1004f23e:	69fb      	ldr	r3, [r7, #28]
1004f240:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
1004f242:	69fb      	ldr	r3, [r7, #28]
1004f244:	691b      	ldr	r3, [r3, #16]
1004f246:	61fb      	str	r3, [r7, #28]
    expiredCount++;
1004f248:	693b      	ldr	r3, [r7, #16]
1004f24a:	3301      	adds	r3, #1
1004f24c:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
1004f24e:	69fb      	ldr	r3, [r7, #28]
1004f250:	2b00      	cmp	r3, #0
1004f252:	d1da      	bne.n	1004f20a <_check_callbacks+0x22>
1004f254:	e000      	b.n	1004f258 <_check_callbacks+0x70>
        break;
1004f256:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
1004f258:	693b      	ldr	r3, [r7, #16]
1004f25a:	2b00      	cmp	r3, #0
1004f25c:	d005      	beq.n	1004f26a <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
1004f25e:	69bb      	ldr	r3, [r7, #24]
1004f260:	2200      	movs	r2, #0
1004f262:	611a      	str	r2, [r3, #16]
    returnValue = curr;
1004f264:	69fb      	ldr	r3, [r7, #28]
1004f266:	617b      	str	r3, [r7, #20]
1004f268:	e002      	b.n	1004f270 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
1004f26a:	683b      	ldr	r3, [r7, #0]
1004f26c:	2200      	movs	r2, #0
1004f26e:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
1004f270:	697b      	ldr	r3, [r7, #20]
}
1004f272:	0018      	movs	r0, r3
1004f274:	46bd      	mov	sp, r7
1004f276:	b008      	add	sp, #32
1004f278:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004f27c <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
1004f27c:	b580      	push	{r7, lr}
1004f27e:	b090      	sub	sp, #64	@ 0x40
1004f280:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004f282:	4b28      	ldr	r3, [pc, #160]	@ (1004f324 <_updateCalibrationData+0xa8>)
1004f284:	781b      	ldrb	r3, [r3, #0]
1004f286:	2b00      	cmp	r3, #0
1004f288:	d037      	beq.n	1004f2fa <_updateCalibrationData+0x7e>
  {

    CalibrationDataTypeDef updatedCalibrationData;
    _get_calibration_data(&updatedCalibrationData);
1004f28a:	003b      	movs	r3, r7
1004f28c:	0018      	movs	r0, r3
1004f28e:	f7ff fc53 	bl	1004eb38 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, updatedCalibrationData.freq1);
1004f292:	4b24      	ldr	r3, [pc, #144]	@ (1004f324 <_updateCalibrationData+0xa8>)
1004f294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004f296:	b29a      	uxth	r2, r3
1004f298:	003b      	movs	r3, r7
1004f29a:	689b      	ldr	r3, [r3, #8]
1004f29c:	0019      	movs	r1, r3
1004f29e:	0010      	movs	r0, r2
1004f2a0:	f7ff fd76 	bl	1004ed90 <_update_xtal_startup_time>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004f2a4:	f3ef 8310 	mrs	r3, PRIMASK
1004f2a8:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
1004f2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    
    ATOMIC_SECTION_BEGIN();
1004f2ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004f2ae:	b672      	cpsid	i
}
1004f2b0:	46c0      	nop			@ (mov r8, r8)
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
1004f2b2:	4b1c      	ldr	r3, [pc, #112]	@ (1004f324 <_updateCalibrationData+0xa8>)
1004f2b4:	2234      	movs	r2, #52	@ 0x34
1004f2b6:	2101      	movs	r1, #1
1004f2b8:	5499      	strb	r1, [r3, r2]
    RADIO_TIMER_Context.calibrationData.freq = updatedCalibrationData.freq;
1004f2ba:	003b      	movs	r3, r7
1004f2bc:	685a      	ldr	r2, [r3, #4]
1004f2be:	4b19      	ldr	r3, [pc, #100]	@ (1004f324 <_updateCalibrationData+0xa8>)
1004f2c0:	615a      	str	r2, [r3, #20]
    RADIO_TIMER_Context.calibrationData.freq1 = updatedCalibrationData.freq1;
1004f2c2:	003b      	movs	r3, r7
1004f2c4:	689a      	ldr	r2, [r3, #8]
1004f2c6:	4b17      	ldr	r3, [pc, #92]	@ (1004f324 <_updateCalibrationData+0xa8>)
1004f2c8:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = updatedCalibrationData.period;
1004f2ca:	003b      	movs	r3, r7
1004f2cc:	681a      	ldr	r2, [r3, #0]
1004f2ce:	4b15      	ldr	r3, [pc, #84]	@ (1004f324 <_updateCalibrationData+0xa8>)
1004f2d0:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.period1 = updatedCalibrationData.period1;
1004f2d2:	003b      	movs	r3, r7
1004f2d4:	68da      	ldr	r2, [r3, #12]
1004f2d6:	4b13      	ldr	r3, [pc, #76]	@ (1004f324 <_updateCalibrationData+0xa8>)
1004f2d8:	61da      	str	r2, [r3, #28]
    _update_system_time(&RADIO_TIMER_Context);
1004f2da:	4b12      	ldr	r3, [pc, #72]	@ (1004f324 <_updateCalibrationData+0xa8>)
1004f2dc:	0018      	movs	r0, r3
1004f2de:	f000 f823 	bl	1004f328 <_update_system_time>
1004f2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004f2e4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004f2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004f2e8:	f383 8810 	msr	PRIMASK, r3
}
1004f2ec:	46c0      	nop			@ (mov r8, r8)
    ATOMIC_SECTION_END();

    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
1004f2ee:	4b0d      	ldr	r3, [pc, #52]	@ (1004f324 <_updateCalibrationData+0xa8>)
1004f2f0:	2100      	movs	r1, #0
1004f2f2:	0018      	movs	r0, r3
1004f2f4:	f7ff fc88 	bl	1004ec08 <_configureTxRxDelay>
  {
  ATOMIC_SECTION_BEGIN();
  _update_system_time(&RADIO_TIMER_Context);
  ATOMIC_SECTION_END();
  }
}
1004f2f8:	e010      	b.n	1004f31c <_updateCalibrationData+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004f2fa:	f3ef 8310 	mrs	r3, PRIMASK
1004f2fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
1004f300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  ATOMIC_SECTION_BEGIN();
1004f302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
1004f304:	b672      	cpsid	i
}
1004f306:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
1004f308:	4b06      	ldr	r3, [pc, #24]	@ (1004f324 <_updateCalibrationData+0xa8>)
1004f30a:	0018      	movs	r0, r3
1004f30c:	f000 f80c 	bl	1004f328 <_update_system_time>
1004f310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004f312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004f314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004f316:	f383 8810 	msr	PRIMASK, r3
}
1004f31a:	46c0      	nop			@ (mov r8, r8)
}
1004f31c:	46c0      	nop			@ (mov r8, r8)
1004f31e:	46bd      	mov	sp, r7
1004f320:	b010      	add	sp, #64	@ 0x40
1004f322:	bd80      	pop	{r7, pc}
1004f324:	20000fd0 	.word	0x20000fd0

1004f328 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
1004f328:	b5b0      	push	{r4, r5, r7, lr}
1004f32a:	b088      	sub	sp, #32
1004f32c:	af00      	add	r7, sp, #0
1004f32e:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004f330:	4b2a      	ldr	r3, [pc, #168]	@ (1004f3dc <_update_system_time+0xb4>)
1004f332:	0018      	movs	r0, r3
1004f334:	f7fe fdf1 	bl	1004df1a <LL_RADIO_TIMER_GetAbsoluteTime>
1004f338:	0003      	movs	r3, r0
1004f33a:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
1004f33c:	697b      	ldr	r3, [r7, #20]
1004f33e:	6a1b      	ldr	r3, [r3, #32]
1004f340:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004f342:	697b      	ldr	r3, [r7, #20]
1004f344:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
1004f346:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
1004f348:	697b      	ldr	r3, [r7, #20]
1004f34a:	2280      	movs	r2, #128	@ 0x80
1004f34c:	589b      	ldr	r3, [r3, r2]
1004f34e:	69fa      	ldr	r2, [r7, #28]
1004f350:	1ad3      	subs	r3, r2, r3
1004f352:	4a23      	ldr	r2, [pc, #140]	@ (1004f3e0 <_update_system_time+0xb8>)
1004f354:	69b9      	ldr	r1, [r7, #24]
1004f356:	0018      	movs	r0, r3
1004f358:	f7f0 feb2 	bl	100400c0 <blue_unit_conversion>
1004f35c:	0003      	movs	r3, r0
1004f35e:	60bb      	str	r3, [r7, #8]
1004f360:	2300      	movs	r3, #0
1004f362:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004f364:	68ba      	ldr	r2, [r7, #8]
1004f366:	68fb      	ldr	r3, [r7, #12]
1004f368:	1912      	adds	r2, r2, r4
1004f36a:	416b      	adcs	r3, r5
1004f36c:	6979      	ldr	r1, [r7, #20]
1004f36e:	670a      	str	r2, [r1, #112]	@ 0x70
1004f370:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
1004f372:	697b      	ldr	r3, [r7, #20]
1004f374:	781b      	ldrb	r3, [r3, #0]
1004f376:	2b00      	cmp	r3, #0
1004f378:	d11d      	bne.n	1004f3b6 <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
1004f37a:	697b      	ldr	r3, [r7, #20]
1004f37c:	2280      	movs	r2, #128	@ 0x80
1004f37e:	589b      	ldr	r3, [r3, r2]
1004f380:	69fa      	ldr	r2, [r7, #28]
1004f382:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
1004f384:	697b      	ldr	r3, [r7, #20]
1004f386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
1004f388:	429a      	cmp	r2, r3
1004f38a:	d214      	bcs.n	1004f3b6 <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
1004f38c:	4a14      	ldr	r2, [pc, #80]	@ (1004f3e0 <_update_system_time+0xb8>)
1004f38e:	69b9      	ldr	r1, [r7, #24]
1004f390:	2301      	movs	r3, #1
1004f392:	425b      	negs	r3, r3
1004f394:	0018      	movs	r0, r3
1004f396:	f7f0 fe93 	bl	100400c0 <blue_unit_conversion>
1004f39a:	0001      	movs	r1, r0
1004f39c:	697b      	ldr	r3, [r7, #20]
1004f39e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004f3a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004f3a2:	6039      	str	r1, [r7, #0]
1004f3a4:	2100      	movs	r1, #0
1004f3a6:	6079      	str	r1, [r7, #4]
1004f3a8:	6838      	ldr	r0, [r7, #0]
1004f3aa:	6879      	ldr	r1, [r7, #4]
1004f3ac:	1812      	adds	r2, r2, r0
1004f3ae:	414b      	adcs	r3, r1
1004f3b0:	6979      	ldr	r1, [r7, #20]
1004f3b2:	670a      	str	r2, [r1, #112]	@ 0x70
1004f3b4:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004f3b6:	697b      	ldr	r3, [r7, #20]
1004f3b8:	2180      	movs	r1, #128	@ 0x80
1004f3ba:	69fa      	ldr	r2, [r7, #28]
1004f3bc:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
1004f3be:	697b      	ldr	r3, [r7, #20]
1004f3c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004f3c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004f3c4:	6979      	ldr	r1, [r7, #20]
1004f3c6:	628a      	str	r2, [r1, #40]	@ 0x28
1004f3c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
1004f3ca:	697b      	ldr	r3, [r7, #20]
1004f3cc:	69da      	ldr	r2, [r3, #28]
1004f3ce:	697b      	ldr	r3, [r7, #20]
1004f3d0:	621a      	str	r2, [r3, #32]
}
1004f3d2:	46c0      	nop			@ (mov r8, r8)
1004f3d4:	46bd      	mov	sp, r7
1004f3d6:	b008      	add	sp, #32
1004f3d8:	bdb0      	pop	{r4, r5, r7, pc}
1004f3da:	46c0      	nop			@ (mov r8, r8)
1004f3dc:	60001800 	.word	0x60001800
1004f3e0:	00000635 	.word	0x00000635

1004f3e4 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004f3e4:	b5b0      	push	{r4, r5, r7, lr}
1004f3e6:	b08a      	sub	sp, #40	@ 0x28
1004f3e8:	af00      	add	r7, sp, #0
1004f3ea:	6078      	str	r0, [r7, #4]
1004f3ec:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
1004f3ee:	683b      	ldr	r3, [r7, #0]
1004f3f0:	2200      	movs	r2, #0
1004f3f2:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
1004f3f4:	687b      	ldr	r3, [r7, #4]
1004f3f6:	7a9b      	ldrb	r3, [r3, #10]
1004f3f8:	2b00      	cmp	r3, #0
1004f3fa:	d100      	bne.n	1004f3fe <_check_radio_activity+0x1a>
1004f3fc:	e070      	b.n	1004f4e0 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004f3fe:	4b3a      	ldr	r3, [pc, #232]	@ (1004f4e8 <_check_radio_activity+0x104>)
1004f400:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004f402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
1004f404:	4938      	ldr	r1, [pc, #224]	@ (1004f4e8 <_check_radio_activity+0x104>)
1004f406:	6849      	ldr	r1, [r1, #4]
1004f408:	000c      	movs	r4, r1
1004f40a:	2100      	movs	r1, #0
1004f40c:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004f40e:	1912      	adds	r2, r2, r4
1004f410:	416b      	adcs	r3, r5
1004f412:	623a      	str	r2, [r7, #32]
1004f414:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004f416:	f3ef 8310 	mrs	r3, PRIMASK
1004f41a:	60fb      	str	r3, [r7, #12]
  return(result);
1004f41c:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
1004f41e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004f420:	b672      	cpsid	i
}
1004f422:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
1004f424:	f7ff fa54 	bl	1004e8d0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004f428:	0002      	movs	r2, r0
1004f42a:	000b      	movs	r3, r1
1004f42c:	613a      	str	r2, [r7, #16]
1004f42e:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004f430:	687b      	ldr	r3, [r7, #4]
1004f432:	681a      	ldr	r2, [r3, #0]
1004f434:	685b      	ldr	r3, [r3, #4]
1004f436:	6a38      	ldr	r0, [r7, #32]
1004f438:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004f43a:	24c8      	movs	r4, #200	@ 0xc8
1004f43c:	02a4      	lsls	r4, r4, #10
1004f43e:	2500      	movs	r5, #0
1004f440:	1900      	adds	r0, r0, r4
1004f442:	4169      	adcs	r1, r5
1004f444:	4299      	cmp	r1, r3
1004f446:	d812      	bhi.n	1004f46e <_check_radio_activity+0x8a>
1004f448:	d101      	bne.n	1004f44e <_check_radio_activity+0x6a>
1004f44a:	4290      	cmp	r0, r2
1004f44c:	d80f      	bhi.n	1004f46e <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
1004f44e:	6a3a      	ldr	r2, [r7, #32]
1004f450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f452:	20b9      	movs	r0, #185	@ 0xb9
1004f454:	0040      	lsls	r0, r0, #1
1004f456:	2100      	movs	r1, #0
1004f458:	1812      	adds	r2, r2, r0
1004f45a:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004f45c:	6979      	ldr	r1, [r7, #20]
1004f45e:	4299      	cmp	r1, r3
1004f460:	d805      	bhi.n	1004f46e <_check_radio_activity+0x8a>
1004f462:	6979      	ldr	r1, [r7, #20]
1004f464:	4299      	cmp	r1, r3
1004f466:	d135      	bne.n	1004f4d4 <_check_radio_activity+0xf0>
1004f468:	6939      	ldr	r1, [r7, #16]
1004f46a:	4291      	cmp	r1, r2
1004f46c:	d932      	bls.n	1004f4d4 <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
1004f46e:	687b      	ldr	r3, [r7, #4]
1004f470:	681a      	ldr	r2, [r3, #0]
1004f472:	685b      	ldr	r3, [r3, #4]
1004f474:	204c      	movs	r0, #76	@ 0x4c
1004f476:	4240      	negs	r0, r0
1004f478:	17c1      	asrs	r1, r0, #31
1004f47a:	1880      	adds	r0, r0, r2
1004f47c:	4159      	adcs	r1, r3
1004f47e:	693a      	ldr	r2, [r7, #16]
1004f480:	697b      	ldr	r3, [r7, #20]
1004f482:	240a      	movs	r4, #10
1004f484:	2500      	movs	r5, #0
1004f486:	1912      	adds	r2, r2, r4
1004f488:	416b      	adcs	r3, r5
1004f48a:	4299      	cmp	r1, r3
1004f48c:	d802      	bhi.n	1004f494 <_check_radio_activity+0xb0>
1004f48e:	d11a      	bne.n	1004f4c6 <_check_radio_activity+0xe2>
1004f490:	4290      	cmp	r0, r2
1004f492:	d918      	bls.n	1004f4c6 <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
1004f494:	687b      	ldr	r3, [r7, #4]
1004f496:	681a      	ldr	r2, [r3, #0]
1004f498:	685b      	ldr	r3, [r3, #4]
1004f49a:	0010      	movs	r0, r2
1004f49c:	687b      	ldr	r3, [r7, #4]
1004f49e:	7b19      	ldrb	r1, [r3, #12]
1004f4a0:	687b      	ldr	r3, [r7, #4]
1004f4a2:	7a1b      	ldrb	r3, [r3, #8]
1004f4a4:	001a      	movs	r2, r3
1004f4a6:	f000 f821 	bl	1004f4ec <TIMER_SetRadioTimerValue>
1004f4aa:	0003      	movs	r3, r0
1004f4ac:	001a      	movs	r2, r3
1004f4ae:	683b      	ldr	r3, [r7, #0]
1004f4b0:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004f4b2:	687b      	ldr	r3, [r7, #4]
1004f4b4:	2200      	movs	r2, #0
1004f4b6:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
1004f4b8:	687b      	ldr	r3, [r7, #4]
1004f4ba:	2201      	movs	r2, #1
1004f4bc:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
1004f4be:	687b      	ldr	r3, [r7, #4]
1004f4c0:	2201      	movs	r2, #1
1004f4c2:	72da      	strb	r2, [r3, #11]
1004f4c4:	e006      	b.n	1004f4d4 <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004f4c6:	4b08      	ldr	r3, [pc, #32]	@ (1004f4e8 <_check_radio_activity+0x104>)
1004f4c8:	2262      	movs	r2, #98	@ 0x62
1004f4ca:	2100      	movs	r1, #0
1004f4cc:	5499      	strb	r1, [r3, r2]
        *expired = 1;
1004f4ce:	683b      	ldr	r3, [r7, #0]
1004f4d0:	2201      	movs	r2, #1
1004f4d2:	701a      	strb	r2, [r3, #0]
1004f4d4:	69fb      	ldr	r3, [r7, #28]
1004f4d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004f4d8:	68bb      	ldr	r3, [r7, #8]
1004f4da:	f383 8810 	msr	PRIMASK, r3
}
1004f4de:	46c0      	nop			@ (mov r8, r8)
      
    }
    ATOMIC_SECTION_END();
    
  }
}
1004f4e0:	46c0      	nop			@ (mov r8, r8)
1004f4e2:	46bd      	mov	sp, r7
1004f4e4:	b00a      	add	sp, #40	@ 0x28
1004f4e6:	bdb0      	pop	{r4, r5, r7, pc}
1004f4e8:	20000fd0 	.word	0x20000fd0

1004f4ec <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
1004f4ec:	b580      	push	{r7, lr}
1004f4ee:	b08a      	sub	sp, #40	@ 0x28
1004f4f0:	af00      	add	r7, sp, #0
1004f4f2:	6078      	str	r0, [r7, #4]
1004f4f4:	0008      	movs	r0, r1
1004f4f6:	0011      	movs	r1, r2
1004f4f8:	1cfb      	adds	r3, r7, #3
1004f4fa:	1c02      	adds	r2, r0, #0
1004f4fc:	701a      	strb	r2, [r3, #0]
1004f4fe:	1cbb      	adds	r3, r7, #2
1004f500:	1c0a      	adds	r2, r1, #0
1004f502:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
1004f504:	1cfb      	adds	r3, r7, #3
1004f506:	781b      	ldrb	r3, [r3, #0]
1004f508:	2b00      	cmp	r3, #0
1004f50a:	d015      	beq.n	1004f538 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
1004f50c:	1cbb      	adds	r3, r7, #2
1004f50e:	781b      	ldrb	r3, [r3, #0]
1004f510:	2b00      	cmp	r3, #0
1004f512:	d008      	beq.n	1004f526 <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
1004f514:	4b67      	ldr	r3, [pc, #412]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f516:	2238      	movs	r2, #56	@ 0x38
1004f518:	5c9b      	ldrb	r3, [r3, r2]
1004f51a:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004f51c:	4b65      	ldr	r3, [pc, #404]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f51e:	223c      	movs	r2, #60	@ 0x3c
1004f520:	5c9b      	ldrb	r3, [r3, r2]
1004f522:	61fb      	str	r3, [r7, #28]
1004f524:	e01d      	b.n	1004f562 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
1004f526:	4b63      	ldr	r3, [pc, #396]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f528:	2239      	movs	r2, #57	@ 0x39
1004f52a:	5c9b      	ldrb	r3, [r3, r2]
1004f52c:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004f52e:	4b61      	ldr	r3, [pc, #388]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f530:	223c      	movs	r2, #60	@ 0x3c
1004f532:	5c9b      	ldrb	r3, [r3, r2]
1004f534:	61fb      	str	r3, [r7, #28]
1004f536:	e014      	b.n	1004f562 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
1004f538:	1cbb      	adds	r3, r7, #2
1004f53a:	781b      	ldrb	r3, [r3, #0]
1004f53c:	2b00      	cmp	r3, #0
1004f53e:	d008      	beq.n	1004f552 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
1004f540:	4b5c      	ldr	r3, [pc, #368]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f542:	223a      	movs	r2, #58	@ 0x3a
1004f544:	5c9b      	ldrb	r3, [r3, r2]
1004f546:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004f548:	4b5a      	ldr	r3, [pc, #360]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f54a:	223c      	movs	r2, #60	@ 0x3c
1004f54c:	5c9b      	ldrb	r3, [r3, r2]
1004f54e:	61fb      	str	r3, [r7, #28]
1004f550:	e007      	b.n	1004f562 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
1004f552:	4b58      	ldr	r3, [pc, #352]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f554:	223b      	movs	r2, #59	@ 0x3b
1004f556:	5c9b      	ldrb	r3, [r3, r2]
1004f558:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004f55a:	4b56      	ldr	r3, [pc, #344]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f55c:	223c      	movs	r2, #60	@ 0x3c
1004f55e:	5c9b      	ldrb	r3, [r3, r2]
1004f560:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
1004f562:	230c      	movs	r3, #12
1004f564:	18fa      	adds	r2, r7, r3
1004f566:	4b53      	ldr	r3, [pc, #332]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f568:	0011      	movs	r1, r2
1004f56a:	0018      	movs	r0, r3
1004f56c:	f7ff fcc4 	bl	1004eef8 <_get_system_time_and_machine>
1004f570:	0002      	movs	r2, r0
1004f572:	000b      	movs	r3, r1
1004f574:	687b      	ldr	r3, [r7, #4]
1004f576:	1a9b      	subs	r3, r3, r2
1004f578:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004f57a:	4b4e      	ldr	r3, [pc, #312]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f57c:	699b      	ldr	r3, [r3, #24]
1004f57e:	0019      	movs	r1, r3
1004f580:	4a4d      	ldr	r2, [pc, #308]	@ (1004f6b8 <TIMER_SetRadioTimerValue+0x1cc>)
1004f582:	697b      	ldr	r3, [r7, #20]
1004f584:	0018      	movs	r0, r3
1004f586:	f7f0 fd9b 	bl	100400c0 <blue_unit_conversion>
1004f58a:	0003      	movs	r3, r0
1004f58c:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
1004f58e:	4b49      	ldr	r3, [pc, #292]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f590:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
1004f592:	69fb      	ldr	r3, [r7, #28]
1004f594:	18d3      	adds	r3, r2, r3
1004f596:	33c8      	adds	r3, #200	@ 0xc8
1004f598:	697a      	ldr	r2, [r7, #20]
1004f59a:	429a      	cmp	r2, r3
1004f59c:	d92f      	bls.n	1004f5fe <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
1004f59e:	4b47      	ldr	r3, [pc, #284]	@ (1004f6bc <TIMER_SetRadioTimerValue+0x1d0>)
1004f5a0:	795b      	ldrb	r3, [r3, #5]
1004f5a2:	b2db      	uxtb	r3, r3
1004f5a4:	001a      	movs	r2, r3
1004f5a6:	693b      	ldr	r3, [r7, #16]
1004f5a8:	1a9a      	subs	r2, r3, r2
1004f5aa:	6a3b      	ldr	r3, [r7, #32]
1004f5ac:	1ad3      	subs	r3, r2, r3
1004f5ae:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
1004f5b0:	68fa      	ldr	r2, [r7, #12]
1004f5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f5b4:	18d3      	adds	r3, r2, r3
1004f5b6:	4a42      	ldr	r2, [pc, #264]	@ (1004f6c0 <TIMER_SetRadioTimerValue+0x1d4>)
1004f5b8:	0019      	movs	r1, r3
1004f5ba:	0010      	movs	r0, r2
1004f5bc:	f7fe fc8b 	bl	1004ded6 <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
1004f5c0:	4b3f      	ldr	r3, [pc, #252]	@ (1004f6c0 <TIMER_SetRadioTimerValue+0x1d4>)
1004f5c2:	2100      	movs	r1, #0
1004f5c4:	0018      	movs	r0, r3
1004f5c6:	f7fe fcc1 	bl	1004df4c <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004f5ca:	23c0      	movs	r3, #192	@ 0xc0
1004f5cc:	05db      	lsls	r3, r3, #23
1004f5ce:	0018      	movs	r0, r3
1004f5d0:	f7fe fbc8 	bl	1004dd64 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004f5d4:	23c0      	movs	r3, #192	@ 0xc0
1004f5d6:	05db      	lsls	r3, r3, #23
1004f5d8:	0018      	movs	r0, r3
1004f5da:	f7fe fbe3 	bl	1004dda4 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
1004f5de:	4b38      	ldr	r3, [pc, #224]	@ (1004f6c0 <TIMER_SetRadioTimerValue+0x1d4>)
1004f5e0:	0018      	movs	r0, r3
1004f5e2:	f7fe fc15 	bl	1004de10 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004f5e6:	4b36      	ldr	r3, [pc, #216]	@ (1004f6c0 <TIMER_SetRadioTimerValue+0x1d4>)
1004f5e8:	0018      	movs	r0, r3
1004f5ea:	f7fe fca0 	bl	1004df2e <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
1004f5ee:	4b33      	ldr	r3, [pc, #204]	@ (1004f6bc <TIMER_SetRadioTimerValue+0x1d0>)
1004f5f0:	795b      	ldrb	r3, [r3, #5]
1004f5f2:	b2db      	uxtb	r3, r3
1004f5f4:	001a      	movs	r2, r3
1004f5f6:	6a3b      	ldr	r3, [r7, #32]
1004f5f8:	189b      	adds	r3, r3, r2
1004f5fa:	623b      	str	r3, [r7, #32]
1004f5fc:	e021      	b.n	1004f642 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
1004f5fe:	4b2d      	ldr	r3, [pc, #180]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f600:	223d      	movs	r2, #61	@ 0x3d
1004f602:	5c9b      	ldrb	r3, [r3, r2]
1004f604:	001a      	movs	r2, r3
1004f606:	693b      	ldr	r3, [r7, #16]
1004f608:	1a9a      	subs	r2, r3, r2
1004f60a:	6a3b      	ldr	r3, [r7, #32]
1004f60c:	1ad3      	subs	r3, r2, r3
1004f60e:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
1004f610:	68fa      	ldr	r2, [r7, #12]
1004f612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f614:	18d2      	adds	r2, r2, r3
1004f616:	23c0      	movs	r3, #192	@ 0xc0
1004f618:	05db      	lsls	r3, r3, #23
1004f61a:	0011      	movs	r1, r2
1004f61c:	0018      	movs	r0, r3
1004f61e:	f7fe fbe1 	bl	1004dde4 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004f622:	4b27      	ldr	r3, [pc, #156]	@ (1004f6c0 <TIMER_SetRadioTimerValue+0x1d4>)
1004f624:	0018      	movs	r0, r3
1004f626:	f7fe fc03 	bl	1004de30 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
1004f62a:	23c0      	movs	r3, #192	@ 0xc0
1004f62c:	05db      	lsls	r3, r3, #23
1004f62e:	0018      	movs	r0, r3
1004f630:	f7fe fb88 	bl	1004dd44 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
1004f634:	4b1f      	ldr	r3, [pc, #124]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f636:	223d      	movs	r2, #61	@ 0x3d
1004f638:	5c9b      	ldrb	r3, [r3, r2]
1004f63a:	001a      	movs	r2, r3
1004f63c:	6a3b      	ldr	r3, [r7, #32]
1004f63e:	189b      	adds	r3, r3, r2
1004f640:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
1004f642:	68fa      	ldr	r2, [r7, #12]
1004f644:	693b      	ldr	r3, [r7, #16]
1004f646:	18d2      	adds	r2, r2, r3
1004f648:	4b1a      	ldr	r3, [pc, #104]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f64a:	2188      	movs	r1, #136	@ 0x88
1004f64c:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
1004f64e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004f650:	6a3b      	ldr	r3, [r7, #32]
1004f652:	18d2      	adds	r2, r2, r3
1004f654:	6a3b      	ldr	r3, [r7, #32]
1004f656:	3305      	adds	r3, #5
1004f658:	429a      	cmp	r2, r3
1004f65a:	d212      	bcs.n	1004f682 <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004f65c:	23c0      	movs	r3, #192	@ 0xc0
1004f65e:	05db      	lsls	r3, r3, #23
1004f660:	0018      	movs	r0, r3
1004f662:	f7fe fb7f 	bl	1004dd64 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004f666:	23c0      	movs	r3, #192	@ 0xc0
1004f668:	05db      	lsls	r3, r3, #23
1004f66a:	0018      	movs	r0, r3
1004f66c:	f7fe fb9a 	bl	1004dda4 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004f670:	4b13      	ldr	r3, [pc, #76]	@ (1004f6c0 <TIMER_SetRadioTimerValue+0x1d4>)
1004f672:	0018      	movs	r0, r3
1004f674:	f7fe fbdc 	bl	1004de30 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
1004f678:	231b      	movs	r3, #27
1004f67a:	18fb      	adds	r3, r7, r3
1004f67c:	2201      	movs	r2, #1
1004f67e:	701a      	strb	r2, [r3, #0]
1004f680:	e010      	b.n	1004f6a4 <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004f682:	4b0c      	ldr	r3, [pc, #48]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f684:	69db      	ldr	r3, [r3, #28]
1004f686:	0019      	movs	r1, r3
1004f688:	4a0e      	ldr	r2, [pc, #56]	@ (1004f6c4 <TIMER_SetRadioTimerValue+0x1d8>)
1004f68a:	6a3b      	ldr	r3, [r7, #32]
1004f68c:	0018      	movs	r0, r3
1004f68e:	f7f0 fd17 	bl	100400c0 <blue_unit_conversion>
1004f692:	0003      	movs	r3, r0
1004f694:	b2d9      	uxtb	r1, r3
1004f696:	4b07      	ldr	r3, [pc, #28]	@ (1004f6b4 <TIMER_SetRadioTimerValue+0x1c8>)
1004f698:	2284      	movs	r2, #132	@ 0x84
1004f69a:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
1004f69c:	231b      	movs	r3, #27
1004f69e:	18fb      	adds	r3, r7, r3
1004f6a0:	2200      	movs	r2, #0
1004f6a2:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
1004f6a4:	231b      	movs	r3, #27
1004f6a6:	18fb      	adds	r3, r7, r3
1004f6a8:	781b      	ldrb	r3, [r3, #0]
}
1004f6aa:	0018      	movs	r0, r3
1004f6ac:	46bd      	mov	sp, r7
1004f6ae:	b00a      	add	sp, #40	@ 0x28
1004f6b0:	bd80      	pop	{r7, pc}
1004f6b2:	46c0      	nop			@ (mov r8, r8)
1004f6b4:	20000fd0 	.word	0x20000fd0
1004f6b8:	00000326 	.word	0x00000326
1004f6bc:	200000c0 	.word	0x200000c0
1004f6c0:	60001800 	.word	0x60001800
1004f6c4:	00000635 	.word	0x00000635

1004f6c8 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
1004f6c8:	b5b0      	push	{r4, r5, r7, lr}
1004f6ca:	b084      	sub	sp, #16
1004f6cc:	af00      	add	r7, sp, #0
1004f6ce:	6078      	str	r0, [r7, #4]
1004f6d0:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004f6d2:	2308      	movs	r3, #8
1004f6d4:	18fa      	adds	r2, r7, r3
1004f6d6:	4b12      	ldr	r3, [pc, #72]	@ (1004f720 <TIMER_GetPastSysTime+0x58>)
1004f6d8:	0011      	movs	r1, r2
1004f6da:	0018      	movs	r0, r3
1004f6dc:	f7ff fc0c 	bl	1004eef8 <_get_system_time_and_machine>
1004f6e0:	0002      	movs	r2, r0
1004f6e2:	000b      	movs	r3, r1
1004f6e4:	6839      	ldr	r1, [r7, #0]
1004f6e6:	600a      	str	r2, [r1, #0]
1004f6e8:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004f6ea:	68ba      	ldr	r2, [r7, #8]
1004f6ec:	687b      	ldr	r3, [r7, #4]
1004f6ee:	1ad0      	subs	r0, r2, r3
1004f6f0:	4b0b      	ldr	r3, [pc, #44]	@ (1004f720 <TIMER_GetPastSysTime+0x58>)
1004f6f2:	69db      	ldr	r3, [r3, #28]
1004f6f4:	0019      	movs	r1, r3
1004f6f6:	4b0b      	ldr	r3, [pc, #44]	@ (1004f724 <TIMER_GetPastSysTime+0x5c>)
1004f6f8:	001a      	movs	r2, r3
1004f6fa:	f7f0 fce1 	bl	100400c0 <blue_unit_conversion>
1004f6fe:	0003      	movs	r3, r0
1004f700:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
1004f702:	683b      	ldr	r3, [r7, #0]
1004f704:	681a      	ldr	r2, [r3, #0]
1004f706:	685b      	ldr	r3, [r3, #4]
1004f708:	68f9      	ldr	r1, [r7, #12]
1004f70a:	000c      	movs	r4, r1
1004f70c:	2100      	movs	r1, #0
1004f70e:	000d      	movs	r5, r1
1004f710:	1b12      	subs	r2, r2, r4
1004f712:	41ab      	sbcs	r3, r5
}
1004f714:	0010      	movs	r0, r2
1004f716:	0019      	movs	r1, r3
1004f718:	46bd      	mov	sp, r7
1004f71a:	b004      	add	sp, #16
1004f71c:	bdb0      	pop	{r4, r5, r7, pc}
1004f71e:	46c0      	nop			@ (mov r8, r8)
1004f720:	20000fd0 	.word	0x20000fd0
1004f724:	00000635 	.word	0x00000635

1004f728 <TIMER_SleepCheck>:
  * @brief  Return the consensus of the Virtual timer management to go in sleep.
  * @retval TRUE if all vtimers have been served and the calibration procedure has already finished.
  * @retval FALSE if the vtimer Tick is still busy.
  */
static bool TIMER_SleepCheck(void)
{
1004f728:	b580      	push	{r7, lr}
1004f72a:	af00      	add	r7, sp, #0
  return ((RADIO_TIMER_Context.expired_count == RADIO_TIMER_Context.served_count) && (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE));
1004f72c:	4b0c      	ldr	r3, [pc, #48]	@ (1004f760 <TIMER_SleepCheck+0x38>)
1004f72e:	2291      	movs	r2, #145	@ 0x91
1004f730:	5c9a      	ldrb	r2, [r3, r2]
1004f732:	4b0b      	ldr	r3, [pc, #44]	@ (1004f760 <TIMER_SleepCheck+0x38>)
1004f734:	2192      	movs	r1, #146	@ 0x92
1004f736:	5c5b      	ldrb	r3, [r3, r1]
1004f738:	429a      	cmp	r2, r3
1004f73a:	d108      	bne.n	1004f74e <TIMER_SleepCheck+0x26>
1004f73c:	4b08      	ldr	r3, [pc, #32]	@ (1004f760 <TIMER_SleepCheck+0x38>)
1004f73e:	7a1b      	ldrb	r3, [r3, #8]
1004f740:	2201      	movs	r2, #1
1004f742:	4053      	eors	r3, r2
1004f744:	b2db      	uxtb	r3, r3
1004f746:	2b00      	cmp	r3, #0
1004f748:	d001      	beq.n	1004f74e <TIMER_SleepCheck+0x26>
1004f74a:	2301      	movs	r3, #1
1004f74c:	e000      	b.n	1004f750 <TIMER_SleepCheck+0x28>
1004f74e:	2300      	movs	r3, #0
1004f750:	1c1a      	adds	r2, r3, #0
1004f752:	2301      	movs	r3, #1
1004f754:	4013      	ands	r3, r2
1004f756:	b2db      	uxtb	r3, r3
}
1004f758:	0018      	movs	r0, r3
1004f75a:	46bd      	mov	sp, r7
1004f75c:	bd80      	pop	{r7, pc}
1004f75e:	46c0      	nop			@ (mov r8, r8)
1004f760:	20000fd0 	.word	0x20000fd0

1004f764 <TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
static uint8_t TIMER_GetRadioTimerValue(uint32_t *time)
{
1004f764:	b580      	push	{r7, lr}
1004f766:	b082      	sub	sp, #8
1004f768:	af00      	add	r7, sp, #0
1004f76a:	6078      	str	r0, [r7, #4]
  if (LL_RADIO_TIMER_IsEnabledBLEWakeupTimer(WAKEUP))
1004f76c:	4b1a      	ldr	r3, [pc, #104]	@ (1004f7d8 <TIMER_GetRadioTimerValue+0x74>)
1004f76e:	0018      	movs	r0, r3
1004f770:	f7fe fb6e 	bl	1004de50 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>
1004f774:	1e03      	subs	r3, r0, #0
1004f776:	d008      	beq.n	1004f78a <TIMER_GetRadioTimerValue+0x26>
  {
    *time = LL_RADIO_TIMER_GetBLEWakeupTime(WAKEUP);
1004f778:	4b17      	ldr	r3, [pc, #92]	@ (1004f7d8 <TIMER_GetRadioTimerValue+0x74>)
1004f77a:	0018      	movs	r0, r3
1004f77c:	f7fe fbb7 	bl	1004deee <LL_RADIO_TIMER_GetBLEWakeupTime>
1004f780:	0002      	movs	r2, r0
1004f782:	687b      	ldr	r3, [r7, #4]
1004f784:	601a      	str	r2, [r3, #0]
    return WAKEUP_RADIO_TIMER_BUSY;
1004f786:	2303      	movs	r3, #3
1004f788:	e022      	b.n	1004f7d0 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer1(BLUE))
1004f78a:	23c0      	movs	r3, #192	@ 0xc0
1004f78c:	05db      	lsls	r3, r3, #23
1004f78e:	0018      	movs	r0, r3
1004f790:	f7fe faf7 	bl	1004dd82 <LL_RADIO_TIMER_IsEnabledTimer1>
1004f794:	1e03      	subs	r3, r0, #0
1004f796:	d009      	beq.n	1004f7ac <TIMER_GetRadioTimerValue+0x48>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
1004f798:	23c0      	movs	r3, #192	@ 0xc0
1004f79a:	05db      	lsls	r3, r3, #23
1004f79c:	0018      	movs	r0, r3
1004f79e:	f7fe fb2d 	bl	1004ddfc <LL_RADIO_TIMER_GetTimeout>
1004f7a2:	0002      	movs	r2, r0
1004f7a4:	687b      	ldr	r3, [r7, #4]
1004f7a6:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER1_BUSY;
1004f7a8:	2301      	movs	r3, #1
1004f7aa:	e011      	b.n	1004f7d0 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer2(BLUE))
1004f7ac:	23c0      	movs	r3, #192	@ 0xc0
1004f7ae:	05db      	lsls	r3, r3, #23
1004f7b0:	0018      	movs	r0, r3
1004f7b2:	f7fe fb06 	bl	1004ddc2 <LL_RADIO_TIMER_IsEnabledTimer2>
1004f7b6:	1e03      	subs	r3, r0, #0
1004f7b8:	d009      	beq.n	1004f7ce <TIMER_GetRadioTimerValue+0x6a>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
1004f7ba:	23c0      	movs	r3, #192	@ 0xc0
1004f7bc:	05db      	lsls	r3, r3, #23
1004f7be:	0018      	movs	r0, r3
1004f7c0:	f7fe fb1c 	bl	1004ddfc <LL_RADIO_TIMER_GetTimeout>
1004f7c4:	0002      	movs	r2, r0
1004f7c6:	687b      	ldr	r3, [r7, #4]
1004f7c8:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER2_BUSY;
1004f7ca:	2302      	movs	r3, #2
1004f7cc:	e000      	b.n	1004f7d0 <TIMER_GetRadioTimerValue+0x6c>
  }
  else
  {
    return 0;
1004f7ce:	2300      	movs	r3, #0
  }
}
1004f7d0:	0018      	movs	r0, r3
1004f7d2:	46bd      	mov	sp, r7
1004f7d4:	b002      	add	sp, #8
1004f7d6:	bd80      	pop	{r7, pc}
1004f7d8:	60001800 	.word	0x60001800

1004f7dc <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004f7dc:	b580      	push	{r7, lr}
1004f7de:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
1004f7e0:	f7ff f930 	bl	1004ea44 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
1004f7e4:	f7f4 fb44 	bl	10043e70 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
1004f7e8:	46c0      	nop			@ (mov r8, r8)
1004f7ea:	46bd      	mov	sp, r7
1004f7ec:	bd80      	pop	{r7, pc}

1004f7ee <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
1004f7ee:	b580      	push	{r7, lr}
1004f7f0:	b082      	sub	sp, #8
1004f7f2:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
1004f7f4:	2300      	movs	r3, #0
1004f7f6:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
1004f7f8:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
1004f7fa:	23c0      	movs	r3, #192	@ 0xc0
1004f7fc:	05db      	lsls	r3, r3, #23
1004f7fe:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
1004f800:	23c0      	movs	r3, #192	@ 0xc0
1004f802:	05db      	lsls	r3, r3, #23
1004f804:	2101      	movs	r1, #1
1004f806:	430a      	orrs	r2, r1
1004f808:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
1004f80a:	23c0      	movs	r3, #192	@ 0xc0
1004f80c:	05db      	lsls	r3, r3, #23
1004f80e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004f810:	607b      	str	r3, [r7, #4]
}
1004f812:	46c0      	nop			@ (mov r8, r8)
1004f814:	46bd      	mov	sp, r7
1004f816:	b002      	add	sp, #8
1004f818:	bd80      	pop	{r7, pc}
	...

1004f81c <LL_PWR_SetNoPullB>:
{
1004f81c:	b580      	push	{r7, lr}
1004f81e:	b082      	sub	sp, #8
1004f820:	af00      	add	r7, sp, #0
1004f822:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004f824:	4b08      	ldr	r3, [pc, #32]	@ (1004f848 <LL_PWR_SetNoPullB+0x2c>)
1004f826:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004f828:	687b      	ldr	r3, [r7, #4]
1004f82a:	43d9      	mvns	r1, r3
1004f82c:	4b06      	ldr	r3, [pc, #24]	@ (1004f848 <LL_PWR_SetNoPullB+0x2c>)
1004f82e:	400a      	ands	r2, r1
1004f830:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004f832:	4b05      	ldr	r3, [pc, #20]	@ (1004f848 <LL_PWR_SetNoPullB+0x2c>)
1004f834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004f836:	687b      	ldr	r3, [r7, #4]
1004f838:	43d9      	mvns	r1, r3
1004f83a:	4b03      	ldr	r3, [pc, #12]	@ (1004f848 <LL_PWR_SetNoPullB+0x2c>)
1004f83c:	400a      	ands	r2, r1
1004f83e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004f840:	46c0      	nop			@ (mov r8, r8)
1004f842:	46bd      	mov	sp, r7
1004f844:	b002      	add	sp, #8
1004f846:	bd80      	pop	{r7, pc}
1004f848:	48500000 	.word	0x48500000

1004f84c <LL_RCC_HSE_Enable>:
{
1004f84c:	b580      	push	{r7, lr}
1004f84e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
1004f850:	4b04      	ldr	r3, [pc, #16]	@ (1004f864 <LL_RCC_HSE_Enable+0x18>)
1004f852:	681a      	ldr	r2, [r3, #0]
1004f854:	4b03      	ldr	r3, [pc, #12]	@ (1004f864 <LL_RCC_HSE_Enable+0x18>)
1004f856:	2180      	movs	r1, #128	@ 0x80
1004f858:	0249      	lsls	r1, r1, #9
1004f85a:	430a      	orrs	r2, r1
1004f85c:	601a      	str	r2, [r3, #0]
}
1004f85e:	46c0      	nop			@ (mov r8, r8)
1004f860:	46bd      	mov	sp, r7
1004f862:	bd80      	pop	{r7, pc}
1004f864:	48400000 	.word	0x48400000

1004f868 <LL_RCC_HSE_Disable>:
{
1004f868:	b580      	push	{r7, lr}
1004f86a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
1004f86c:	4b04      	ldr	r3, [pc, #16]	@ (1004f880 <LL_RCC_HSE_Disable+0x18>)
1004f86e:	681a      	ldr	r2, [r3, #0]
1004f870:	4b03      	ldr	r3, [pc, #12]	@ (1004f880 <LL_RCC_HSE_Disable+0x18>)
1004f872:	4904      	ldr	r1, [pc, #16]	@ (1004f884 <LL_RCC_HSE_Disable+0x1c>)
1004f874:	400a      	ands	r2, r1
1004f876:	601a      	str	r2, [r3, #0]
}
1004f878:	46c0      	nop			@ (mov r8, r8)
1004f87a:	46bd      	mov	sp, r7
1004f87c:	bd80      	pop	{r7, pc}
1004f87e:	46c0      	nop			@ (mov r8, r8)
1004f880:	48400000 	.word	0x48400000
1004f884:	fffeffff 	.word	0xfffeffff

1004f888 <LL_RCC_HSE_IsReady>:
{
1004f888:	b580      	push	{r7, lr}
1004f88a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004f88c:	4b07      	ldr	r3, [pc, #28]	@ (1004f8ac <LL_RCC_HSE_IsReady+0x24>)
1004f88e:	681a      	ldr	r2, [r3, #0]
1004f890:	2380      	movs	r3, #128	@ 0x80
1004f892:	029b      	lsls	r3, r3, #10
1004f894:	401a      	ands	r2, r3
1004f896:	2380      	movs	r3, #128	@ 0x80
1004f898:	029b      	lsls	r3, r3, #10
1004f89a:	429a      	cmp	r2, r3
1004f89c:	d101      	bne.n	1004f8a2 <LL_RCC_HSE_IsReady+0x1a>
1004f89e:	2301      	movs	r3, #1
1004f8a0:	e000      	b.n	1004f8a4 <LL_RCC_HSE_IsReady+0x1c>
1004f8a2:	2300      	movs	r3, #0
}
1004f8a4:	0018      	movs	r0, r3
1004f8a6:	46bd      	mov	sp, r7
1004f8a8:	bd80      	pop	{r7, pc}
1004f8aa:	46c0      	nop			@ (mov r8, r8)
1004f8ac:	48400000 	.word	0x48400000

1004f8b0 <LL_RCC_HSE_SetCapacitorTuning>:
{
1004f8b0:	b580      	push	{r7, lr}
1004f8b2:	b082      	sub	sp, #8
1004f8b4:	af00      	add	r7, sp, #0
1004f8b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
1004f8b8:	4a0b      	ldr	r2, [pc, #44]	@ (1004f8e8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004f8ba:	2398      	movs	r3, #152	@ 0x98
1004f8bc:	58d3      	ldr	r3, [r2, r3]
1004f8be:	4a0b      	ldr	r2, [pc, #44]	@ (1004f8ec <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
1004f8c0:	401a      	ands	r2, r3
1004f8c2:	687b      	ldr	r3, [r7, #4]
1004f8c4:	021b      	lsls	r3, r3, #8
1004f8c6:	4908      	ldr	r1, [pc, #32]	@ (1004f8e8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004f8c8:	4313      	orrs	r3, r2
1004f8ca:	2298      	movs	r2, #152	@ 0x98
1004f8cc:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
1004f8ce:	4a06      	ldr	r2, [pc, #24]	@ (1004f8e8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004f8d0:	2398      	movs	r3, #152	@ 0x98
1004f8d2:	58d3      	ldr	r3, [r2, r3]
1004f8d4:	4904      	ldr	r1, [pc, #16]	@ (1004f8e8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004f8d6:	2280      	movs	r2, #128	@ 0x80
1004f8d8:	4313      	orrs	r3, r2
1004f8da:	2298      	movs	r2, #152	@ 0x98
1004f8dc:	508b      	str	r3, [r1, r2]
}
1004f8de:	46c0      	nop			@ (mov r8, r8)
1004f8e0:	46bd      	mov	sp, r7
1004f8e2:	b002      	add	sp, #8
1004f8e4:	bd80      	pop	{r7, pc}
1004f8e6:	46c0      	nop			@ (mov r8, r8)
1004f8e8:	48400000 	.word	0x48400000
1004f8ec:	ffffc0ff 	.word	0xffffc0ff

1004f8f0 <LL_RCC_HSE_SetCurrentControl>:
{
1004f8f0:	b580      	push	{r7, lr}
1004f8f2:	b082      	sub	sp, #8
1004f8f4:	af00      	add	r7, sp, #0
1004f8f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
1004f8f8:	4a07      	ldr	r2, [pc, #28]	@ (1004f918 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004f8fa:	2398      	movs	r3, #152	@ 0x98
1004f8fc:	58d3      	ldr	r3, [r2, r3]
1004f8fe:	2270      	movs	r2, #112	@ 0x70
1004f900:	4393      	bics	r3, r2
1004f902:	001a      	movs	r2, r3
1004f904:	4904      	ldr	r1, [pc, #16]	@ (1004f918 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004f906:	687b      	ldr	r3, [r7, #4]
1004f908:	4313      	orrs	r3, r2
1004f90a:	2298      	movs	r2, #152	@ 0x98
1004f90c:	508b      	str	r3, [r1, r2]
}
1004f90e:	46c0      	nop			@ (mov r8, r8)
1004f910:	46bd      	mov	sp, r7
1004f912:	b002      	add	sp, #8
1004f914:	bd80      	pop	{r7, pc}
1004f916:	46c0      	nop			@ (mov r8, r8)
1004f918:	48400000 	.word	0x48400000

1004f91c <LL_RCC_HSI_Enable>:
{
1004f91c:	b580      	push	{r7, lr}
1004f91e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004f920:	4b07      	ldr	r3, [pc, #28]	@ (1004f940 <LL_RCC_HSI_Enable+0x24>)
1004f922:	689a      	ldr	r2, [r3, #8]
1004f924:	4b06      	ldr	r3, [pc, #24]	@ (1004f940 <LL_RCC_HSI_Enable+0x24>)
1004f926:	2104      	movs	r1, #4
1004f928:	438a      	bics	r2, r1
1004f92a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004f92c:	4b04      	ldr	r3, [pc, #16]	@ (1004f940 <LL_RCC_HSI_Enable+0x24>)
1004f92e:	689a      	ldr	r2, [r3, #8]
1004f930:	4b03      	ldr	r3, [pc, #12]	@ (1004f940 <LL_RCC_HSI_Enable+0x24>)
1004f932:	2102      	movs	r1, #2
1004f934:	438a      	bics	r2, r1
1004f936:	609a      	str	r2, [r3, #8]
}
1004f938:	46c0      	nop			@ (mov r8, r8)
1004f93a:	46bd      	mov	sp, r7
1004f93c:	bd80      	pop	{r7, pc}
1004f93e:	46c0      	nop			@ (mov r8, r8)
1004f940:	48400000 	.word	0x48400000

1004f944 <LL_RCC_HSI_Disable>:
{
1004f944:	b580      	push	{r7, lr}
1004f946:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004f948:	4b07      	ldr	r3, [pc, #28]	@ (1004f968 <LL_RCC_HSI_Disable+0x24>)
1004f94a:	689a      	ldr	r2, [r3, #8]
1004f94c:	4b06      	ldr	r3, [pc, #24]	@ (1004f968 <LL_RCC_HSI_Disable+0x24>)
1004f94e:	2102      	movs	r1, #2
1004f950:	430a      	orrs	r2, r1
1004f952:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004f954:	4b04      	ldr	r3, [pc, #16]	@ (1004f968 <LL_RCC_HSI_Disable+0x24>)
1004f956:	689a      	ldr	r2, [r3, #8]
1004f958:	4b03      	ldr	r3, [pc, #12]	@ (1004f968 <LL_RCC_HSI_Disable+0x24>)
1004f95a:	2104      	movs	r1, #4
1004f95c:	430a      	orrs	r2, r1
1004f95e:	609a      	str	r2, [r3, #8]
}
1004f960:	46c0      	nop			@ (mov r8, r8)
1004f962:	46bd      	mov	sp, r7
1004f964:	bd80      	pop	{r7, pc}
1004f966:	46c0      	nop			@ (mov r8, r8)
1004f968:	48400000 	.word	0x48400000

1004f96c <LL_RCC_HSI_IsReady>:
{
1004f96c:	b580      	push	{r7, lr}
1004f96e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
1004f970:	4b07      	ldr	r3, [pc, #28]	@ (1004f990 <LL_RCC_HSI_IsReady+0x24>)
1004f972:	681a      	ldr	r2, [r3, #0]
1004f974:	2380      	movs	r3, #128	@ 0x80
1004f976:	00db      	lsls	r3, r3, #3
1004f978:	401a      	ands	r2, r3
1004f97a:	2380      	movs	r3, #128	@ 0x80
1004f97c:	00db      	lsls	r3, r3, #3
1004f97e:	429a      	cmp	r2, r3
1004f980:	d101      	bne.n	1004f986 <LL_RCC_HSI_IsReady+0x1a>
1004f982:	2301      	movs	r3, #1
1004f984:	e000      	b.n	1004f988 <LL_RCC_HSI_IsReady+0x1c>
1004f986:	2300      	movs	r3, #0
}
1004f988:	0018      	movs	r0, r3
1004f98a:	46bd      	mov	sp, r7
1004f98c:	bd80      	pop	{r7, pc}
1004f98e:	46c0      	nop			@ (mov r8, r8)
1004f990:	48400000 	.word	0x48400000

1004f994 <LL_RCC_DIRECT_HSE_Enable>:
{
1004f994:	b580      	push	{r7, lr}
1004f996:	b082      	sub	sp, #8
1004f998:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004f99a:	46c0      	nop			@ (mov r8, r8)
1004f99c:	4b0f      	ldr	r3, [pc, #60]	@ (1004f9dc <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004f99e:	681a      	ldr	r2, [r3, #0]
1004f9a0:	2380      	movs	r3, #128	@ 0x80
1004f9a2:	029b      	lsls	r3, r3, #10
1004f9a4:	4013      	ands	r3, r2
1004f9a6:	d0f9      	beq.n	1004f99c <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004f9a8:	4b0c      	ldr	r3, [pc, #48]	@ (1004f9dc <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004f9aa:	689a      	ldr	r2, [r3, #8]
1004f9ac:	4b0b      	ldr	r3, [pc, #44]	@ (1004f9dc <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004f9ae:	2102      	movs	r1, #2
1004f9b0:	430a      	orrs	r2, r1
1004f9b2:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
1004f9b4:	2300      	movs	r3, #0
1004f9b6:	607b      	str	r3, [r7, #4]
1004f9b8:	e003      	b.n	1004f9c2 <LL_RCC_DIRECT_HSE_Enable+0x2e>
    __asm("NOP");
1004f9ba:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004f9bc:	687b      	ldr	r3, [r7, #4]
1004f9be:	3301      	adds	r3, #1
1004f9c0:	607b      	str	r3, [r7, #4]
1004f9c2:	687b      	ldr	r3, [r7, #4]
1004f9c4:	2b05      	cmp	r3, #5
1004f9c6:	ddf8      	ble.n	1004f9ba <LL_RCC_DIRECT_HSE_Enable+0x26>
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004f9c8:	4b04      	ldr	r3, [pc, #16]	@ (1004f9dc <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004f9ca:	689a      	ldr	r2, [r3, #8]
1004f9cc:	4b03      	ldr	r3, [pc, #12]	@ (1004f9dc <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004f9ce:	2104      	movs	r1, #4
1004f9d0:	430a      	orrs	r2, r1
1004f9d2:	609a      	str	r2, [r3, #8]
}
1004f9d4:	46c0      	nop			@ (mov r8, r8)
1004f9d6:	46bd      	mov	sp, r7
1004f9d8:	b002      	add	sp, #8
1004f9da:	bd80      	pop	{r7, pc}
1004f9dc:	48400000 	.word	0x48400000

1004f9e0 <LL_RCC_LSCO_SetSource>:
{
1004f9e0:	b580      	push	{r7, lr}
1004f9e2:	b082      	sub	sp, #8
1004f9e4:	af00      	add	r7, sp, #0
1004f9e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004f9e8:	4b06      	ldr	r3, [pc, #24]	@ (1004fa04 <LL_RCC_LSCO_SetSource+0x24>)
1004f9ea:	689b      	ldr	r3, [r3, #8]
1004f9ec:	4a06      	ldr	r2, [pc, #24]	@ (1004fa08 <LL_RCC_LSCO_SetSource+0x28>)
1004f9ee:	4013      	ands	r3, r2
1004f9f0:	0019      	movs	r1, r3
1004f9f2:	4b04      	ldr	r3, [pc, #16]	@ (1004fa04 <LL_RCC_LSCO_SetSource+0x24>)
1004f9f4:	687a      	ldr	r2, [r7, #4]
1004f9f6:	430a      	orrs	r2, r1
1004f9f8:	609a      	str	r2, [r3, #8]
}
1004f9fa:	46c0      	nop			@ (mov r8, r8)
1004f9fc:	46bd      	mov	sp, r7
1004f9fe:	b002      	add	sp, #8
1004fa00:	bd80      	pop	{r7, pc}
1004fa02:	46c0      	nop			@ (mov r8, r8)
1004fa04:	48400000 	.word	0x48400000
1004fa08:	fffe7fff 	.word	0xfffe7fff

1004fa0c <LL_RCC_LSE_Enable>:
{
1004fa0c:	b580      	push	{r7, lr}
1004fa0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
1004fa10:	4b04      	ldr	r3, [pc, #16]	@ (1004fa24 <LL_RCC_LSE_Enable+0x18>)
1004fa12:	681a      	ldr	r2, [r3, #0]
1004fa14:	4b03      	ldr	r3, [pc, #12]	@ (1004fa24 <LL_RCC_LSE_Enable+0x18>)
1004fa16:	2110      	movs	r1, #16
1004fa18:	430a      	orrs	r2, r1
1004fa1a:	601a      	str	r2, [r3, #0]
}
1004fa1c:	46c0      	nop			@ (mov r8, r8)
1004fa1e:	46bd      	mov	sp, r7
1004fa20:	bd80      	pop	{r7, pc}
1004fa22:	46c0      	nop			@ (mov r8, r8)
1004fa24:	48400000 	.word	0x48400000

1004fa28 <LL_RCC_LSE_Disable>:
{
1004fa28:	b580      	push	{r7, lr}
1004fa2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
1004fa2c:	4b04      	ldr	r3, [pc, #16]	@ (1004fa40 <LL_RCC_LSE_Disable+0x18>)
1004fa2e:	681a      	ldr	r2, [r3, #0]
1004fa30:	4b03      	ldr	r3, [pc, #12]	@ (1004fa40 <LL_RCC_LSE_Disable+0x18>)
1004fa32:	2110      	movs	r1, #16
1004fa34:	438a      	bics	r2, r1
1004fa36:	601a      	str	r2, [r3, #0]
}
1004fa38:	46c0      	nop			@ (mov r8, r8)
1004fa3a:	46bd      	mov	sp, r7
1004fa3c:	bd80      	pop	{r7, pc}
1004fa3e:	46c0      	nop			@ (mov r8, r8)
1004fa40:	48400000 	.word	0x48400000

1004fa44 <LL_RCC_LSE_IsReady>:
{
1004fa44:	b580      	push	{r7, lr}
1004fa46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
1004fa48:	4b05      	ldr	r3, [pc, #20]	@ (1004fa60 <LL_RCC_LSE_IsReady+0x1c>)
1004fa4a:	681b      	ldr	r3, [r3, #0]
1004fa4c:	2220      	movs	r2, #32
1004fa4e:	4013      	ands	r3, r2
1004fa50:	2b20      	cmp	r3, #32
1004fa52:	d101      	bne.n	1004fa58 <LL_RCC_LSE_IsReady+0x14>
1004fa54:	2301      	movs	r3, #1
1004fa56:	e000      	b.n	1004fa5a <LL_RCC_LSE_IsReady+0x16>
1004fa58:	2300      	movs	r3, #0
}
1004fa5a:	0018      	movs	r0, r3
1004fa5c:	46bd      	mov	sp, r7
1004fa5e:	bd80      	pop	{r7, pc}
1004fa60:	48400000 	.word	0x48400000

1004fa64 <LL_RCC_LSE_EnableBypass>:
{
1004fa64:	b580      	push	{r7, lr}
1004fa66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
1004fa68:	4b04      	ldr	r3, [pc, #16]	@ (1004fa7c <LL_RCC_LSE_EnableBypass+0x18>)
1004fa6a:	681a      	ldr	r2, [r3, #0]
1004fa6c:	4b03      	ldr	r3, [pc, #12]	@ (1004fa7c <LL_RCC_LSE_EnableBypass+0x18>)
1004fa6e:	2140      	movs	r1, #64	@ 0x40
1004fa70:	430a      	orrs	r2, r1
1004fa72:	601a      	str	r2, [r3, #0]
}
1004fa74:	46c0      	nop			@ (mov r8, r8)
1004fa76:	46bd      	mov	sp, r7
1004fa78:	bd80      	pop	{r7, pc}
1004fa7a:	46c0      	nop			@ (mov r8, r8)
1004fa7c:	48400000 	.word	0x48400000

1004fa80 <LL_RCC_LSE_DisableBypass>:
{
1004fa80:	b580      	push	{r7, lr}
1004fa82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
1004fa84:	4b04      	ldr	r3, [pc, #16]	@ (1004fa98 <LL_RCC_LSE_DisableBypass+0x18>)
1004fa86:	681a      	ldr	r2, [r3, #0]
1004fa88:	4b03      	ldr	r3, [pc, #12]	@ (1004fa98 <LL_RCC_LSE_DisableBypass+0x18>)
1004fa8a:	2140      	movs	r1, #64	@ 0x40
1004fa8c:	438a      	bics	r2, r1
1004fa8e:	601a      	str	r2, [r3, #0]
}
1004fa90:	46c0      	nop			@ (mov r8, r8)
1004fa92:	46bd      	mov	sp, r7
1004fa94:	bd80      	pop	{r7, pc}
1004fa96:	46c0      	nop			@ (mov r8, r8)
1004fa98:	48400000 	.word	0x48400000

1004fa9c <LL_RCC_LSE_IsBypassEnabled>:
{
1004fa9c:	b580      	push	{r7, lr}
1004fa9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
1004faa0:	4b05      	ldr	r3, [pc, #20]	@ (1004fab8 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
1004faa2:	681b      	ldr	r3, [r3, #0]
1004faa4:	2240      	movs	r2, #64	@ 0x40
1004faa6:	4013      	ands	r3, r2
1004faa8:	2b40      	cmp	r3, #64	@ 0x40
1004faaa:	d101      	bne.n	1004fab0 <LL_RCC_LSE_IsBypassEnabled+0x14>
1004faac:	2301      	movs	r3, #1
1004faae:	e000      	b.n	1004fab2 <LL_RCC_LSE_IsBypassEnabled+0x16>
1004fab0:	2300      	movs	r3, #0
}
1004fab2:	0018      	movs	r0, r3
1004fab4:	46bd      	mov	sp, r7
1004fab6:	bd80      	pop	{r7, pc}
1004fab8:	48400000 	.word	0x48400000

1004fabc <LL_RCC_LSE_SetDriveCapability>:
{
1004fabc:	b580      	push	{r7, lr}
1004fabe:	b082      	sub	sp, #8
1004fac0:	af00      	add	r7, sp, #0
1004fac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
1004fac4:	4b06      	ldr	r3, [pc, #24]	@ (1004fae0 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004fac6:	68db      	ldr	r3, [r3, #12]
1004fac8:	2260      	movs	r2, #96	@ 0x60
1004faca:	4393      	bics	r3, r2
1004facc:	0019      	movs	r1, r3
1004face:	4b04      	ldr	r3, [pc, #16]	@ (1004fae0 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004fad0:	687a      	ldr	r2, [r7, #4]
1004fad2:	430a      	orrs	r2, r1
1004fad4:	60da      	str	r2, [r3, #12]
}
1004fad6:	46c0      	nop			@ (mov r8, r8)
1004fad8:	46bd      	mov	sp, r7
1004fada:	b002      	add	sp, #8
1004fadc:	bd80      	pop	{r7, pc}
1004fade:	46c0      	nop			@ (mov r8, r8)
1004fae0:	48400000 	.word	0x48400000

1004fae4 <LL_RCC_LSI_Enable>:
{
1004fae4:	b580      	push	{r7, lr}
1004fae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
1004fae8:	4b04      	ldr	r3, [pc, #16]	@ (1004fafc <LL_RCC_LSI_Enable+0x18>)
1004faea:	681a      	ldr	r2, [r3, #0]
1004faec:	4b03      	ldr	r3, [pc, #12]	@ (1004fafc <LL_RCC_LSI_Enable+0x18>)
1004faee:	2104      	movs	r1, #4
1004faf0:	430a      	orrs	r2, r1
1004faf2:	601a      	str	r2, [r3, #0]
}
1004faf4:	46c0      	nop			@ (mov r8, r8)
1004faf6:	46bd      	mov	sp, r7
1004faf8:	bd80      	pop	{r7, pc}
1004fafa:	46c0      	nop			@ (mov r8, r8)
1004fafc:	48400000 	.word	0x48400000

1004fb00 <LL_RCC_LSI_Disable>:
{
1004fb00:	b580      	push	{r7, lr}
1004fb02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004fb04:	4b04      	ldr	r3, [pc, #16]	@ (1004fb18 <LL_RCC_LSI_Disable+0x18>)
1004fb06:	681a      	ldr	r2, [r3, #0]
1004fb08:	4b03      	ldr	r3, [pc, #12]	@ (1004fb18 <LL_RCC_LSI_Disable+0x18>)
1004fb0a:	2104      	movs	r1, #4
1004fb0c:	438a      	bics	r2, r1
1004fb0e:	601a      	str	r2, [r3, #0]
}
1004fb10:	46c0      	nop			@ (mov r8, r8)
1004fb12:	46bd      	mov	sp, r7
1004fb14:	bd80      	pop	{r7, pc}
1004fb16:	46c0      	nop			@ (mov r8, r8)
1004fb18:	48400000 	.word	0x48400000

1004fb1c <LL_RCC_LSI_IsReady>:
{
1004fb1c:	b580      	push	{r7, lr}
1004fb1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
1004fb20:	4b05      	ldr	r3, [pc, #20]	@ (1004fb38 <LL_RCC_LSI_IsReady+0x1c>)
1004fb22:	681b      	ldr	r3, [r3, #0]
1004fb24:	2208      	movs	r2, #8
1004fb26:	4013      	ands	r3, r2
1004fb28:	2b08      	cmp	r3, #8
1004fb2a:	d101      	bne.n	1004fb30 <LL_RCC_LSI_IsReady+0x14>
1004fb2c:	2301      	movs	r3, #1
1004fb2e:	e000      	b.n	1004fb32 <LL_RCC_LSI_IsReady+0x16>
1004fb30:	2300      	movs	r3, #0
}
1004fb32:	0018      	movs	r0, r3
1004fb34:	46bd      	mov	sp, r7
1004fb36:	bd80      	pop	{r7, pc}
1004fb38:	48400000 	.word	0x48400000

1004fb3c <LL_RCC_RC64MPLL_Enable>:
{
1004fb3c:	b580      	push	{r7, lr}
1004fb3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004fb40:	4b04      	ldr	r3, [pc, #16]	@ (1004fb54 <LL_RCC_RC64MPLL_Enable+0x18>)
1004fb42:	681a      	ldr	r2, [r3, #0]
1004fb44:	4b03      	ldr	r3, [pc, #12]	@ (1004fb54 <LL_RCC_RC64MPLL_Enable+0x18>)
1004fb46:	2180      	movs	r1, #128	@ 0x80
1004fb48:	0189      	lsls	r1, r1, #6
1004fb4a:	430a      	orrs	r2, r1
1004fb4c:	601a      	str	r2, [r3, #0]
}
1004fb4e:	46c0      	nop			@ (mov r8, r8)
1004fb50:	46bd      	mov	sp, r7
1004fb52:	bd80      	pop	{r7, pc}
1004fb54:	48400000 	.word	0x48400000

1004fb58 <LL_RCC_RC64MPLL_Disable>:
{
1004fb58:	b580      	push	{r7, lr}
1004fb5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004fb5c:	4b04      	ldr	r3, [pc, #16]	@ (1004fb70 <LL_RCC_RC64MPLL_Disable+0x18>)
1004fb5e:	681a      	ldr	r2, [r3, #0]
1004fb60:	4b03      	ldr	r3, [pc, #12]	@ (1004fb70 <LL_RCC_RC64MPLL_Disable+0x18>)
1004fb62:	4904      	ldr	r1, [pc, #16]	@ (1004fb74 <LL_RCC_RC64MPLL_Disable+0x1c>)
1004fb64:	400a      	ands	r2, r1
1004fb66:	601a      	str	r2, [r3, #0]
}
1004fb68:	46c0      	nop			@ (mov r8, r8)
1004fb6a:	46bd      	mov	sp, r7
1004fb6c:	bd80      	pop	{r7, pc}
1004fb6e:	46c0      	nop			@ (mov r8, r8)
1004fb70:	48400000 	.word	0x48400000
1004fb74:	ffffdfff 	.word	0xffffdfff

1004fb78 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
1004fb78:	b580      	push	{r7, lr}
1004fb7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004fb7c:	4b07      	ldr	r3, [pc, #28]	@ (1004fb9c <LL_RCC_RC64MPLL_IsReady+0x24>)
1004fb7e:	681a      	ldr	r2, [r3, #0]
1004fb80:	2380      	movs	r3, #128	@ 0x80
1004fb82:	01db      	lsls	r3, r3, #7
1004fb84:	401a      	ands	r2, r3
1004fb86:	2380      	movs	r3, #128	@ 0x80
1004fb88:	01db      	lsls	r3, r3, #7
1004fb8a:	429a      	cmp	r2, r3
1004fb8c:	d101      	bne.n	1004fb92 <LL_RCC_RC64MPLL_IsReady+0x1a>
1004fb8e:	2301      	movs	r3, #1
1004fb90:	e000      	b.n	1004fb94 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004fb92:	2300      	movs	r3, #0
}
1004fb94:	0018      	movs	r0, r3
1004fb96:	46bd      	mov	sp, r7
1004fb98:	bd80      	pop	{r7, pc}
1004fb9a:	46c0      	nop			@ (mov r8, r8)
1004fb9c:	48400000 	.word	0x48400000

1004fba0 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
1004fba0:	b580      	push	{r7, lr}
1004fba2:	b082      	sub	sp, #8
1004fba4:	af00      	add	r7, sp, #0
1004fba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
1004fba8:	4b06      	ldr	r3, [pc, #24]	@ (1004fbc4 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004fbaa:	689b      	ldr	r3, [r3, #8]
1004fbac:	22e0      	movs	r2, #224	@ 0xe0
1004fbae:	4393      	bics	r3, r2
1004fbb0:	0019      	movs	r1, r3
1004fbb2:	4b04      	ldr	r3, [pc, #16]	@ (1004fbc4 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004fbb4:	687a      	ldr	r2, [r7, #4]
1004fbb6:	430a      	orrs	r2, r1
1004fbb8:	609a      	str	r2, [r3, #8]
}
1004fbba:	46c0      	nop			@ (mov r8, r8)
1004fbbc:	46bd      	mov	sp, r7
1004fbbe:	b002      	add	sp, #8
1004fbc0:	bd80      	pop	{r7, pc}
1004fbc2:	46c0      	nop			@ (mov r8, r8)
1004fbc4:	48400000 	.word	0x48400000

1004fbc8 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
1004fbc8:	b580      	push	{r7, lr}
1004fbca:	b084      	sub	sp, #16
1004fbcc:	af00      	add	r7, sp, #0
1004fbce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
1004fbd0:	687b      	ldr	r3, [r7, #4]
1004fbd2:	2b00      	cmp	r3, #0
1004fbd4:	d101      	bne.n	1004fbda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
1004fbd6:	2301      	movs	r3, #1
1004fbd8:	e13c      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1004fbda:	687b      	ldr	r3, [r7, #4]
1004fbdc:	681b      	ldr	r3, [r3, #0]
1004fbde:	2210      	movs	r2, #16
1004fbe0:	4013      	ands	r3, r2
1004fbe2:	d033      	beq.n	1004fc4c <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
1004fbe4:	687b      	ldr	r3, [r7, #4]
1004fbe6:	689b      	ldr	r3, [r3, #8]
1004fbe8:	2b00      	cmp	r3, #0
1004fbea:	d102      	bne.n	1004fbf2 <HAL_RCC_OscConfig+0x2a>
1004fbec:	f7ff fe96 	bl	1004f91c <LL_RCC_HSI_Enable>
1004fbf0:	e001      	b.n	1004fbf6 <HAL_RCC_OscConfig+0x2e>
1004fbf2:	f7ff fea7 	bl	1004f944 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
1004fbf6:	687b      	ldr	r3, [r7, #4]
1004fbf8:	689b      	ldr	r3, [r3, #8]
1004fbfa:	2b04      	cmp	r3, #4
1004fbfc:	d113      	bne.n	1004fc26 <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004fbfe:	f7fc f9db 	bl	1004bfb8 <HAL_GetTick>
1004fc02:	0003      	movs	r3, r0
1004fc04:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
1004fc06:	e008      	b.n	1004fc1a <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004fc08:	f7fc f9d6 	bl	1004bfb8 <HAL_GetTick>
1004fc0c:	0002      	movs	r2, r0
1004fc0e:	68fb      	ldr	r3, [r7, #12]
1004fc10:	1ad3      	subs	r3, r2, r3
1004fc12:	2b64      	cmp	r3, #100	@ 0x64
1004fc14:	d901      	bls.n	1004fc1a <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
1004fc16:	2303      	movs	r3, #3
1004fc18:	e11c      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
1004fc1a:	f7ff fea7 	bl	1004f96c <LL_RCC_HSI_IsReady>
1004fc1e:	0003      	movs	r3, r0
1004fc20:	2b01      	cmp	r3, #1
1004fc22:	d0f1      	beq.n	1004fc08 <HAL_RCC_OscConfig+0x40>
1004fc24:	e012      	b.n	1004fc4c <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004fc26:	f7fc f9c7 	bl	1004bfb8 <HAL_GetTick>
1004fc2a:	0003      	movs	r3, r0
1004fc2c:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
1004fc2e:	e008      	b.n	1004fc42 <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004fc30:	f7fc f9c2 	bl	1004bfb8 <HAL_GetTick>
1004fc34:	0002      	movs	r2, r0
1004fc36:	68fb      	ldr	r3, [r7, #12]
1004fc38:	1ad3      	subs	r3, r2, r3
1004fc3a:	2b64      	cmp	r3, #100	@ 0x64
1004fc3c:	d901      	bls.n	1004fc42 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
1004fc3e:	2303      	movs	r3, #3
1004fc40:	e108      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
1004fc42:	f7ff fe93 	bl	1004f96c <LL_RCC_HSI_IsReady>
1004fc46:	0003      	movs	r3, r0
1004fc48:	2b01      	cmp	r3, #1
1004fc4a:	d1f1      	bne.n	1004fc30 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1004fc4c:	687b      	ldr	r3, [r7, #4]
1004fc4e:	681b      	ldr	r3, [r3, #0]
1004fc50:	2201      	movs	r2, #1
1004fc52:	4013      	ands	r3, r2
1004fc54:	d039      	beq.n	1004fcca <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
1004fc56:	2020      	movs	r0, #32
1004fc58:	f7ff fe2a 	bl	1004f8b0 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
1004fc5c:	2030      	movs	r0, #48	@ 0x30
1004fc5e:	f7ff fe47 	bl	1004f8f0 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
1004fc62:	687b      	ldr	r3, [r7, #4]
1004fc64:	685a      	ldr	r2, [r3, #4]
1004fc66:	2380      	movs	r3, #128	@ 0x80
1004fc68:	025b      	lsls	r3, r3, #9
1004fc6a:	429a      	cmp	r2, r3
1004fc6c:	d102      	bne.n	1004fc74 <HAL_RCC_OscConfig+0xac>
1004fc6e:	f7ff fded 	bl	1004f84c <LL_RCC_HSE_Enable>
1004fc72:	e001      	b.n	1004fc78 <HAL_RCC_OscConfig+0xb0>
1004fc74:	f7ff fdf8 	bl	1004f868 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
1004fc78:	687b      	ldr	r3, [r7, #4]
1004fc7a:	685b      	ldr	r3, [r3, #4]
1004fc7c:	2b00      	cmp	r3, #0
1004fc7e:	d012      	beq.n	1004fca6 <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004fc80:	f7fc f99a 	bl	1004bfb8 <HAL_GetTick>
1004fc84:	0003      	movs	r3, r0
1004fc86:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
1004fc88:	e008      	b.n	1004fc9c <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004fc8a:	f7fc f995 	bl	1004bfb8 <HAL_GetTick>
1004fc8e:	0002      	movs	r2, r0
1004fc90:	68fb      	ldr	r3, [r7, #12]
1004fc92:	1ad3      	subs	r3, r2, r3
1004fc94:	2b64      	cmp	r3, #100	@ 0x64
1004fc96:	d901      	bls.n	1004fc9c <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
1004fc98:	2303      	movs	r3, #3
1004fc9a:	e0db      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
1004fc9c:	f7ff fdf4 	bl	1004f888 <LL_RCC_HSE_IsReady>
1004fca0:	1e03      	subs	r3, r0, #0
1004fca2:	d0f2      	beq.n	1004fc8a <HAL_RCC_OscConfig+0xc2>
1004fca4:	e011      	b.n	1004fcca <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004fca6:	f7fc f987 	bl	1004bfb8 <HAL_GetTick>
1004fcaa:	0003      	movs	r3, r0
1004fcac:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
1004fcae:	e008      	b.n	1004fcc2 <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004fcb0:	f7fc f982 	bl	1004bfb8 <HAL_GetTick>
1004fcb4:	0002      	movs	r2, r0
1004fcb6:	68fb      	ldr	r3, [r7, #12]
1004fcb8:	1ad3      	subs	r3, r2, r3
1004fcba:	2b64      	cmp	r3, #100	@ 0x64
1004fcbc:	d901      	bls.n	1004fcc2 <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
1004fcbe:	2303      	movs	r3, #3
1004fcc0:	e0c8      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
1004fcc2:	f7ff fde1 	bl	1004f888 <LL_RCC_HSE_IsReady>
1004fcc6:	1e03      	subs	r3, r0, #0
1004fcc8:	d1f2      	bne.n	1004fcb0 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1004fcca:	687b      	ldr	r3, [r7, #4]
1004fccc:	681b      	ldr	r3, [r3, #0]
1004fcce:	2204      	movs	r2, #4
1004fcd0:	4013      	ands	r3, r2
1004fcd2:	d03a      	beq.n	1004fd4a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
1004fcd4:	687b      	ldr	r3, [r7, #4]
1004fcd6:	691b      	ldr	r3, [r3, #16]
1004fcd8:	2b00      	cmp	r3, #0
1004fcda:	d022      	beq.n	1004fd22 <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
1004fcdc:	f7ff ff10 	bl	1004fb00 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
1004fce0:	46c0      	nop			@ (mov r8, r8)
1004fce2:	f7ff ff1b 	bl	1004fb1c <LL_RCC_LSI_IsReady>
1004fce6:	1e03      	subs	r3, r0, #0
1004fce8:	d1fb      	bne.n	1004fce2 <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004fcea:	f7ff fe9d 	bl	1004fa28 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
1004fcee:	2380      	movs	r3, #128	@ 0x80
1004fcf0:	025b      	lsls	r3, r3, #9
1004fcf2:	0018      	movs	r0, r3
1004fcf4:	f7ff fe74 	bl	1004f9e0 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
1004fcf8:	f7ff fef4 	bl	1004fae4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004fcfc:	f7fc f95c 	bl	1004bfb8 <HAL_GetTick>
1004fd00:	0003      	movs	r3, r0
1004fd02:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004fd04:	e008      	b.n	1004fd18 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004fd06:	f7fc f957 	bl	1004bfb8 <HAL_GetTick>
1004fd0a:	0002      	movs	r2, r0
1004fd0c:	68fb      	ldr	r3, [r7, #12]
1004fd0e:	1ad3      	subs	r3, r2, r3
1004fd10:	2b02      	cmp	r3, #2
1004fd12:	d901      	bls.n	1004fd18 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
1004fd14:	2303      	movs	r3, #3
1004fd16:	e09d      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004fd18:	f7ff ff00 	bl	1004fb1c <LL_RCC_LSI_IsReady>
1004fd1c:	1e03      	subs	r3, r0, #0
1004fd1e:	d0f2      	beq.n	1004fd06 <HAL_RCC_OscConfig+0x13e>
1004fd20:	e013      	b.n	1004fd4a <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1004fd22:	f7ff feed 	bl	1004fb00 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004fd26:	f7fc f947 	bl	1004bfb8 <HAL_GetTick>
1004fd2a:	0003      	movs	r3, r0
1004fd2c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004fd2e:	e008      	b.n	1004fd42 <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004fd30:	f7fc f942 	bl	1004bfb8 <HAL_GetTick>
1004fd34:	0002      	movs	r2, r0
1004fd36:	68fb      	ldr	r3, [r7, #12]
1004fd38:	1ad3      	subs	r3, r2, r3
1004fd3a:	2b02      	cmp	r3, #2
1004fd3c:	d901      	bls.n	1004fd42 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
1004fd3e:	2303      	movs	r3, #3
1004fd40:	e088      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004fd42:	f7ff feeb 	bl	1004fb1c <LL_RCC_LSI_IsReady>
1004fd46:	1e03      	subs	r3, r0, #0
1004fd48:	d1f2      	bne.n	1004fd30 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1004fd4a:	687b      	ldr	r3, [r7, #4]
1004fd4c:	681b      	ldr	r3, [r3, #0]
1004fd4e:	2202      	movs	r2, #2
1004fd50:	4013      	ands	r3, r2
1004fd52:	d047      	beq.n	1004fde4 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
1004fd54:	f7ff fed4 	bl	1004fb00 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004fd58:	f7ff fe66 	bl	1004fa28 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
1004fd5c:	46c0      	nop			@ (mov r8, r8)
1004fd5e:	f7ff fe71 	bl	1004fa44 <LL_RCC_LSE_IsReady>
1004fd62:	1e03      	subs	r3, r0, #0
1004fd64:	d1fb      	bne.n	1004fd5e <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
1004fd66:	23c0      	movs	r3, #192	@ 0xc0
1004fd68:	019b      	lsls	r3, r3, #6
1004fd6a:	0018      	movs	r0, r3
1004fd6c:	f7ff fd56 	bl	1004f81c <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
1004fd70:	2380      	movs	r3, #128	@ 0x80
1004fd72:	021b      	lsls	r3, r3, #8
1004fd74:	0018      	movs	r0, r3
1004fd76:	f7ff fe33 	bl	1004f9e0 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
1004fd7a:	2020      	movs	r0, #32
1004fd7c:	f7ff fe9e 	bl	1004fabc <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
1004fd80:	687b      	ldr	r3, [r7, #4]
1004fd82:	68db      	ldr	r3, [r3, #12]
1004fd84:	2b10      	cmp	r3, #16
1004fd86:	d102      	bne.n	1004fd8e <HAL_RCC_OscConfig+0x1c6>
1004fd88:	f7ff fe40 	bl	1004fa0c <LL_RCC_LSE_Enable>
1004fd8c:	e001      	b.n	1004fd92 <HAL_RCC_OscConfig+0x1ca>
1004fd8e:	f7ff fe4b 	bl	1004fa28 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
1004fd92:	687b      	ldr	r3, [r7, #4]
1004fd94:	68db      	ldr	r3, [r3, #12]
1004fd96:	2b00      	cmp	r3, #0
1004fd98:	d012      	beq.n	1004fdc0 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004fd9a:	f7fc f90d 	bl	1004bfb8 <HAL_GetTick>
1004fd9e:	0003      	movs	r3, r0
1004fda0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004fda2:	e008      	b.n	1004fdb6 <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004fda4:	f7fc f908 	bl	1004bfb8 <HAL_GetTick>
1004fda8:	0002      	movs	r2, r0
1004fdaa:	68fb      	ldr	r3, [r7, #12]
1004fdac:	1ad3      	subs	r3, r2, r3
1004fdae:	2b64      	cmp	r3, #100	@ 0x64
1004fdb0:	d901      	bls.n	1004fdb6 <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
1004fdb2:	2303      	movs	r3, #3
1004fdb4:	e04e      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004fdb6:	f7ff fe45 	bl	1004fa44 <LL_RCC_LSE_IsReady>
1004fdba:	1e03      	subs	r3, r0, #0
1004fdbc:	d0f2      	beq.n	1004fda4 <HAL_RCC_OscConfig+0x1dc>
1004fdbe:	e011      	b.n	1004fde4 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004fdc0:	f7fc f8fa 	bl	1004bfb8 <HAL_GetTick>
1004fdc4:	0003      	movs	r3, r0
1004fdc6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004fdc8:	e008      	b.n	1004fddc <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004fdca:	f7fc f8f5 	bl	1004bfb8 <HAL_GetTick>
1004fdce:	0002      	movs	r2, r0
1004fdd0:	68fb      	ldr	r3, [r7, #12]
1004fdd2:	1ad3      	subs	r3, r2, r3
1004fdd4:	2b64      	cmp	r3, #100	@ 0x64
1004fdd6:	d901      	bls.n	1004fddc <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
1004fdd8:	2303      	movs	r3, #3
1004fdda:	e03b      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004fddc:	f7ff fe32 	bl	1004fa44 <LL_RCC_LSE_IsReady>
1004fde0:	1e03      	subs	r3, r0, #0
1004fde2:	d1f2      	bne.n	1004fdca <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
1004fde4:	687b      	ldr	r3, [r7, #4]
1004fde6:	681b      	ldr	r3, [r3, #0]
1004fde8:	2208      	movs	r2, #8
1004fdea:	4013      	ands	r3, r2
1004fdec:	d031      	beq.n	1004fe52 <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
1004fdee:	687b      	ldr	r3, [r7, #4]
1004fdf0:	695b      	ldr	r3, [r3, #20]
1004fdf2:	2b40      	cmp	r3, #64	@ 0x40
1004fdf4:	d102      	bne.n	1004fdfc <HAL_RCC_OscConfig+0x234>
1004fdf6:	f7ff fe35 	bl	1004fa64 <LL_RCC_LSE_EnableBypass>
1004fdfa:	e001      	b.n	1004fe00 <HAL_RCC_OscConfig+0x238>
1004fdfc:	f7ff fe40 	bl	1004fa80 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
1004fe00:	687b      	ldr	r3, [r7, #4]
1004fe02:	695b      	ldr	r3, [r3, #20]
1004fe04:	2b00      	cmp	r3, #0
1004fe06:	d012      	beq.n	1004fe2e <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004fe08:	f7fc f8d6 	bl	1004bfb8 <HAL_GetTick>
1004fe0c:	0003      	movs	r3, r0
1004fe0e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004fe10:	e008      	b.n	1004fe24 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004fe12:	f7fc f8d1 	bl	1004bfb8 <HAL_GetTick>
1004fe16:	0002      	movs	r2, r0
1004fe18:	68fb      	ldr	r3, [r7, #12]
1004fe1a:	1ad3      	subs	r3, r2, r3
1004fe1c:	2b64      	cmp	r3, #100	@ 0x64
1004fe1e:	d901      	bls.n	1004fe24 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
1004fe20:	2303      	movs	r3, #3
1004fe22:	e017      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004fe24:	f7ff fe3a 	bl	1004fa9c <LL_RCC_LSE_IsBypassEnabled>
1004fe28:	1e03      	subs	r3, r0, #0
1004fe2a:	d0f2      	beq.n	1004fe12 <HAL_RCC_OscConfig+0x24a>
1004fe2c:	e011      	b.n	1004fe52 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004fe2e:	f7fc f8c3 	bl	1004bfb8 <HAL_GetTick>
1004fe32:	0003      	movs	r3, r0
1004fe34:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004fe36:	e008      	b.n	1004fe4a <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004fe38:	f7fc f8be 	bl	1004bfb8 <HAL_GetTick>
1004fe3c:	0002      	movs	r2, r0
1004fe3e:	68fb      	ldr	r3, [r7, #12]
1004fe40:	1ad3      	subs	r3, r2, r3
1004fe42:	2b64      	cmp	r3, #100	@ 0x64
1004fe44:	d901      	bls.n	1004fe4a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
1004fe46:	2303      	movs	r3, #3
1004fe48:	e004      	b.n	1004fe54 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004fe4a:	f7ff fe27 	bl	1004fa9c <LL_RCC_LSE_IsBypassEnabled>
1004fe4e:	1e03      	subs	r3, r0, #0
1004fe50:	d1f2      	bne.n	1004fe38 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
1004fe52:	2300      	movs	r3, #0
}
1004fe54:	0018      	movs	r0, r3
1004fe56:	46bd      	mov	sp, r7
1004fe58:	b004      	add	sp, #16
1004fe5a:	bd80      	pop	{r7, pc}

1004fe5c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
1004fe5c:	b580      	push	{r7, lr}
1004fe5e:	b084      	sub	sp, #16
1004fe60:	af00      	add	r7, sp, #0
1004fe62:	6078      	str	r0, [r7, #4]
1004fe64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
1004fe66:	687b      	ldr	r3, [r7, #4]
1004fe68:	2b00      	cmp	r3, #0
1004fe6a:	d101      	bne.n	1004fe70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
1004fe6c:	2301      	movs	r3, #1
1004fe6e:	e098      	b.n	1004ffa2 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004fe70:	4b4e      	ldr	r3, [pc, #312]	@ (1004ffac <HAL_RCC_ClockConfig+0x150>)
1004fe72:	685b      	ldr	r3, [r3, #4]
1004fe74:	2230      	movs	r2, #48	@ 0x30
1004fe76:	4393      	bics	r3, r2
1004fe78:	0019      	movs	r1, r3
1004fe7a:	4b4c      	ldr	r3, [pc, #304]	@ (1004ffac <HAL_RCC_ClockConfig+0x150>)
1004fe7c:	683a      	ldr	r2, [r7, #0]
1004fe7e:	430a      	orrs	r2, r1
1004fe80:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
1004fe82:	687b      	ldr	r3, [r7, #4]
1004fe84:	681b      	ldr	r3, [r3, #0]
1004fe86:	2b02      	cmp	r3, #2
1004fe88:	d10e      	bne.n	1004fea8 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
1004fe8a:	f7ff fd47 	bl	1004f91c <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004fe8e:	f7ff fd6d 	bl	1004f96c <LL_RCC_HSI_IsReady>
1004fe92:	1e03      	subs	r3, r0, #0
1004fe94:	d101      	bne.n	1004fe9a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
1004fe96:	2301      	movs	r3, #1
1004fe98:	e083      	b.n	1004ffa2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
1004fe9a:	f7ff fe5d 	bl	1004fb58 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004fe9e:	687b      	ldr	r3, [r7, #4]
1004fea0:	685b      	ldr	r3, [r3, #4]
1004fea2:	0018      	movs	r0, r3
1004fea4:	f7ff fe7c 	bl	1004fba0 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
1004fea8:	687b      	ldr	r3, [r7, #4]
1004feaa:	681b      	ldr	r3, [r3, #0]
1004feac:	2b00      	cmp	r3, #0
1004feae:	d124      	bne.n	1004fefa <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004feb0:	f7ff fd5c 	bl	1004f96c <LL_RCC_HSI_IsReady>
1004feb4:	1e03      	subs	r3, r0, #0
1004feb6:	d101      	bne.n	1004febc <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
1004feb8:	2301      	movs	r3, #1
1004feba:	e072      	b.n	1004ffa2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004febc:	f7ff fce4 	bl	1004f888 <LL_RCC_HSE_IsReady>
1004fec0:	1e03      	subs	r3, r0, #0
1004fec2:	d101      	bne.n	1004fec8 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
1004fec4:	2301      	movs	r3, #1
1004fec6:	e06c      	b.n	1004ffa2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
1004fec8:	f7ff fe38 	bl	1004fb3c <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004fecc:	f7fc f874 	bl	1004bfb8 <HAL_GetTick>
1004fed0:	0003      	movs	r3, r0
1004fed2:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004fed4:	e008      	b.n	1004fee8 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1004fed6:	f7fc f86f 	bl	1004bfb8 <HAL_GetTick>
1004feda:	0002      	movs	r2, r0
1004fedc:	68fb      	ldr	r3, [r7, #12]
1004fede:	1ad3      	subs	r3, r2, r3
1004fee0:	2b02      	cmp	r3, #2
1004fee2:	d901      	bls.n	1004fee8 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
1004fee4:	2303      	movs	r3, #3
1004fee6:	e05c      	b.n	1004ffa2 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004fee8:	f7ff fe46 	bl	1004fb78 <LL_RCC_RC64MPLL_IsReady>
1004feec:	1e03      	subs	r3, r0, #0
1004feee:	d0f2      	beq.n	1004fed6 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004fef0:	687b      	ldr	r3, [r7, #4]
1004fef2:	685b      	ldr	r3, [r3, #4]
1004fef4:	0018      	movs	r0, r3
1004fef6:	f7ff fe53 	bl	1004fba0 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004fefa:	687b      	ldr	r3, [r7, #4]
1004fefc:	681b      	ldr	r3, [r3, #0]
1004fefe:	2b01      	cmp	r3, #1
1004ff00:	d117      	bne.n	1004ff32 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004ff02:	f7ff fd47 	bl	1004f994 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
1004ff06:	f7ff fd31 	bl	1004f96c <LL_RCC_HSI_IsReady>
1004ff0a:	1e03      	subs	r3, r0, #0
1004ff0c:	d001      	beq.n	1004ff12 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
1004ff0e:	2301      	movs	r3, #1
1004ff10:	e047      	b.n	1004ffa2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004ff12:	f7ff fcb9 	bl	1004f888 <LL_RCC_HSE_IsReady>
1004ff16:	1e03      	subs	r3, r0, #0
1004ff18:	d101      	bne.n	1004ff1e <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
1004ff1a:	2301      	movs	r3, #1
1004ff1c:	e041      	b.n	1004ffa2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004ff1e:	4b24      	ldr	r3, [pc, #144]	@ (1004ffb0 <HAL_RCC_ClockConfig+0x154>)
1004ff20:	689b      	ldr	r3, [r3, #8]
1004ff22:	22e0      	movs	r2, #224	@ 0xe0
1004ff24:	4393      	bics	r3, r2
1004ff26:	0019      	movs	r1, r3
1004ff28:	687b      	ldr	r3, [r7, #4]
1004ff2a:	685a      	ldr	r2, [r3, #4]
1004ff2c:	4b20      	ldr	r3, [pc, #128]	@ (1004ffb0 <HAL_RCC_ClockConfig+0x154>)
1004ff2e:	430a      	orrs	r2, r1
1004ff30:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
1004ff32:	4b1e      	ldr	r3, [pc, #120]	@ (1004ffac <HAL_RCC_ClockConfig+0x150>)
1004ff34:	685b      	ldr	r3, [r3, #4]
1004ff36:	2230      	movs	r2, #48	@ 0x30
1004ff38:	4013      	ands	r3, r2
1004ff3a:	683a      	ldr	r2, [r7, #0]
1004ff3c:	429a      	cmp	r2, r3
1004ff3e:	d01d      	beq.n	1004ff7c <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004ff40:	4b1a      	ldr	r3, [pc, #104]	@ (1004ffac <HAL_RCC_ClockConfig+0x150>)
1004ff42:	685b      	ldr	r3, [r3, #4]
1004ff44:	2230      	movs	r2, #48	@ 0x30
1004ff46:	4393      	bics	r3, r2
1004ff48:	0019      	movs	r1, r3
1004ff4a:	4b18      	ldr	r3, [pc, #96]	@ (1004ffac <HAL_RCC_ClockConfig+0x150>)
1004ff4c:	683a      	ldr	r2, [r7, #0]
1004ff4e:	430a      	orrs	r2, r1
1004ff50:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004ff52:	f7fc f831 	bl	1004bfb8 <HAL_GetTick>
1004ff56:	0003      	movs	r3, r0
1004ff58:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004ff5a:	e008      	b.n	1004ff6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
1004ff5c:	f7fc f82c 	bl	1004bfb8 <HAL_GetTick>
1004ff60:	0002      	movs	r2, r0
1004ff62:	68fb      	ldr	r3, [r7, #12]
1004ff64:	1ad3      	subs	r3, r2, r3
1004ff66:	2b02      	cmp	r3, #2
1004ff68:	d901      	bls.n	1004ff6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
1004ff6a:	2303      	movs	r3, #3
1004ff6c:	e019      	b.n	1004ffa2 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004ff6e:	4b0f      	ldr	r3, [pc, #60]	@ (1004ffac <HAL_RCC_ClockConfig+0x150>)
1004ff70:	685b      	ldr	r3, [r3, #4]
1004ff72:	2230      	movs	r2, #48	@ 0x30
1004ff74:	4013      	ands	r3, r2
1004ff76:	683a      	ldr	r2, [r7, #0]
1004ff78:	429a      	cmp	r2, r3
1004ff7a:	d1ef      	bne.n	1004ff5c <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
1004ff7c:	2300      	movs	r3, #0
1004ff7e:	60bb      	str	r3, [r7, #8]
1004ff80:	e003      	b.n	1004ff8a <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
1004ff82:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004ff84:	68bb      	ldr	r3, [r7, #8]
1004ff86:	3301      	adds	r3, #1
1004ff88:	60bb      	str	r3, [r7, #8]
1004ff8a:	68bb      	ldr	r3, [r7, #8]
1004ff8c:	2b05      	cmp	r3, #5
1004ff8e:	ddf8      	ble.n	1004ff82 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
1004ff90:	f7fb ff6e 	bl	1004be70 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
1004ff94:	f7fc f81a 	bl	1004bfcc <HAL_GetTickPrio>
1004ff98:	0003      	movs	r3, r0
1004ff9a:	0018      	movs	r0, r3
1004ff9c:	f7fb ffb2 	bl	1004bf04 <HAL_InitTick>
1004ffa0:	0003      	movs	r3, r0
}
1004ffa2:	0018      	movs	r0, r3
1004ffa4:	46bd      	mov	sp, r7
1004ffa6:	b004      	add	sp, #16
1004ffa8:	bd80      	pop	{r7, pc}
1004ffaa:	46c0      	nop			@ (mov r8, r8)
1004ffac:	40001000 	.word	0x40001000
1004ffb0:	48400000 	.word	0x48400000

1004ffb4 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
1004ffb4:	b580      	push	{r7, lr}
1004ffb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
1004ffb8:	4b02      	ldr	r3, [pc, #8]	@ (1004ffc4 <HAL_RCC_GetSysClockFreq+0x10>)
1004ffba:	681b      	ldr	r3, [r3, #0]
}
1004ffbc:	0018      	movs	r0, r3
1004ffbe:	46bd      	mov	sp, r7
1004ffc0:	bd80      	pop	{r7, pc}
1004ffc2:	46c0      	nop			@ (mov r8, r8)
1004ffc4:	20001508 	.word	0x20001508

1004ffc8 <LL_RCC_HSE_IsReady>:
{
1004ffc8:	b580      	push	{r7, lr}
1004ffca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004ffcc:	4b07      	ldr	r3, [pc, #28]	@ (1004ffec <LL_RCC_HSE_IsReady+0x24>)
1004ffce:	681a      	ldr	r2, [r3, #0]
1004ffd0:	2380      	movs	r3, #128	@ 0x80
1004ffd2:	029b      	lsls	r3, r3, #10
1004ffd4:	401a      	ands	r2, r3
1004ffd6:	2380      	movs	r3, #128	@ 0x80
1004ffd8:	029b      	lsls	r3, r3, #10
1004ffda:	429a      	cmp	r2, r3
1004ffdc:	d101      	bne.n	1004ffe2 <LL_RCC_HSE_IsReady+0x1a>
1004ffde:	2301      	movs	r3, #1
1004ffe0:	e000      	b.n	1004ffe4 <LL_RCC_HSE_IsReady+0x1c>
1004ffe2:	2300      	movs	r3, #0
}
1004ffe4:	0018      	movs	r0, r3
1004ffe6:	46bd      	mov	sp, r7
1004ffe8:	bd80      	pop	{r7, pc}
1004ffea:	46c0      	nop			@ (mov r8, r8)
1004ffec:	48400000 	.word	0x48400000

1004fff0 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
1004fff0:	b580      	push	{r7, lr}
1004fff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
1004fff4:	4b05      	ldr	r3, [pc, #20]	@ (1005000c <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004fff6:	689b      	ldr	r3, [r3, #8]
1004fff8:	2208      	movs	r2, #8
1004fffa:	4013      	ands	r3, r2
1004fffc:	2b08      	cmp	r3, #8
1004fffe:	d101      	bne.n	10050004 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10050000:	2301      	movs	r3, #1
10050002:	e000      	b.n	10050006 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10050004:	2300      	movs	r3, #0
}
10050006:	0018      	movs	r0, r3
10050008:	46bd      	mov	sp, r7
1005000a:	bd80      	pop	{r7, pc}
1005000c:	48400000 	.word	0x48400000

10050010 <LL_RCC_LSCO_SetSource>:
{
10050010:	b580      	push	{r7, lr}
10050012:	b082      	sub	sp, #8
10050014:	af00      	add	r7, sp, #0
10050016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10050018:	4b06      	ldr	r3, [pc, #24]	@ (10050034 <LL_RCC_LSCO_SetSource+0x24>)
1005001a:	689b      	ldr	r3, [r3, #8]
1005001c:	4a06      	ldr	r2, [pc, #24]	@ (10050038 <LL_RCC_LSCO_SetSource+0x28>)
1005001e:	4013      	ands	r3, r2
10050020:	0019      	movs	r1, r3
10050022:	4b04      	ldr	r3, [pc, #16]	@ (10050034 <LL_RCC_LSCO_SetSource+0x24>)
10050024:	687a      	ldr	r2, [r7, #4]
10050026:	430a      	orrs	r2, r1
10050028:	609a      	str	r2, [r3, #8]
}
1005002a:	46c0      	nop			@ (mov r8, r8)
1005002c:	46bd      	mov	sp, r7
1005002e:	b002      	add	sp, #8
10050030:	bd80      	pop	{r7, pc}
10050032:	46c0      	nop			@ (mov r8, r8)
10050034:	48400000 	.word	0x48400000
10050038:	fffe7fff 	.word	0xfffe7fff

1005003c <LL_RCC_LSCO_GetSource>:
{
1005003c:	b580      	push	{r7, lr}
1005003e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
10050040:	4b03      	ldr	r3, [pc, #12]	@ (10050050 <LL_RCC_LSCO_GetSource+0x14>)
10050042:	689a      	ldr	r2, [r3, #8]
10050044:	23c0      	movs	r3, #192	@ 0xc0
10050046:	025b      	lsls	r3, r3, #9
10050048:	4013      	ands	r3, r2
}
1005004a:	0018      	movs	r0, r3
1005004c:	46bd      	mov	sp, r7
1005004e:	bd80      	pop	{r7, pc}
10050050:	48400000 	.word	0x48400000

10050054 <LL_RCC_SetRFClock>:
{
10050054:	b580      	push	{r7, lr}
10050056:	b082      	sub	sp, #8
10050058:	af00      	add	r7, sp, #0
1005005a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
1005005c:	4b06      	ldr	r3, [pc, #24]	@ (10050078 <LL_RCC_SetRFClock+0x24>)
1005005e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10050060:	2204      	movs	r2, #4
10050062:	4393      	bics	r3, r2
10050064:	0019      	movs	r1, r3
10050066:	4b04      	ldr	r3, [pc, #16]	@ (10050078 <LL_RCC_SetRFClock+0x24>)
10050068:	687a      	ldr	r2, [r7, #4]
1005006a:	430a      	orrs	r2, r1
1005006c:	661a      	str	r2, [r3, #96]	@ 0x60
}
1005006e:	46c0      	nop			@ (mov r8, r8)
10050070:	46bd      	mov	sp, r7
10050072:	b002      	add	sp, #8
10050074:	bd80      	pop	{r7, pc}
10050076:	46c0      	nop			@ (mov r8, r8)
10050078:	48400000 	.word	0x48400000

1005007c <LL_RCC_GetRFClock>:
{
1005007c:	b580      	push	{r7, lr}
1005007e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
10050080:	4b03      	ldr	r3, [pc, #12]	@ (10050090 <LL_RCC_GetRFClock+0x14>)
10050082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10050084:	2204      	movs	r2, #4
10050086:	4013      	ands	r3, r2
}
10050088:	0018      	movs	r0, r3
1005008a:	46bd      	mov	sp, r7
1005008c:	bd80      	pop	{r7, pc}
1005008e:	46c0      	nop			@ (mov r8, r8)
10050090:	48400000 	.word	0x48400000

10050094 <LL_RCC_SetSMPSPrescaler>:
{
10050094:	b580      	push	{r7, lr}
10050096:	b082      	sub	sp, #8
10050098:	af00      	add	r7, sp, #0
1005009a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
1005009c:	4b06      	ldr	r3, [pc, #24]	@ (100500b8 <LL_RCC_SetSMPSPrescaler+0x24>)
1005009e:	689b      	ldr	r3, [r3, #8]
100500a0:	4a06      	ldr	r2, [pc, #24]	@ (100500bc <LL_RCC_SetSMPSPrescaler+0x28>)
100500a2:	4013      	ands	r3, r2
100500a4:	0019      	movs	r1, r3
100500a6:	4b04      	ldr	r3, [pc, #16]	@ (100500b8 <LL_RCC_SetSMPSPrescaler+0x24>)
100500a8:	687a      	ldr	r2, [r7, #4]
100500aa:	430a      	orrs	r2, r1
100500ac:	609a      	str	r2, [r3, #8]
}
100500ae:	46c0      	nop			@ (mov r8, r8)
100500b0:	46bd      	mov	sp, r7
100500b2:	b002      	add	sp, #8
100500b4:	bd80      	pop	{r7, pc}
100500b6:	46c0      	nop			@ (mov r8, r8)
100500b8:	48400000 	.word	0x48400000
100500bc:	ffffefff 	.word	0xffffefff

100500c0 <LL_RCC_GetSMPSPrescaler>:
{
100500c0:	b580      	push	{r7, lr}
100500c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
100500c4:	4b03      	ldr	r3, [pc, #12]	@ (100500d4 <LL_RCC_GetSMPSPrescaler+0x14>)
100500c6:	689a      	ldr	r2, [r3, #8]
100500c8:	2380      	movs	r3, #128	@ 0x80
100500ca:	015b      	lsls	r3, r3, #5
100500cc:	4013      	ands	r3, r2
}
100500ce:	0018      	movs	r0, r3
100500d0:	46bd      	mov	sp, r7
100500d2:	bd80      	pop	{r7, pc}
100500d4:	48400000 	.word	0x48400000

100500d8 <LL_RCC_SetLPUARTClockSource>:
{
100500d8:	b580      	push	{r7, lr}
100500da:	b082      	sub	sp, #8
100500dc:	af00      	add	r7, sp, #0
100500de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
100500e0:	4b06      	ldr	r3, [pc, #24]	@ (100500fc <LL_RCC_SetLPUARTClockSource+0x24>)
100500e2:	689b      	ldr	r3, [r3, #8]
100500e4:	4a06      	ldr	r2, [pc, #24]	@ (10050100 <LL_RCC_SetLPUARTClockSource+0x28>)
100500e6:	4013      	ands	r3, r2
100500e8:	0019      	movs	r1, r3
100500ea:	4b04      	ldr	r3, [pc, #16]	@ (100500fc <LL_RCC_SetLPUARTClockSource+0x24>)
100500ec:	687a      	ldr	r2, [r7, #4]
100500ee:	430a      	orrs	r2, r1
100500f0:	609a      	str	r2, [r3, #8]
}
100500f2:	46c0      	nop			@ (mov r8, r8)
100500f4:	46bd      	mov	sp, r7
100500f6:	b002      	add	sp, #8
100500f8:	bd80      	pop	{r7, pc}
100500fa:	46c0      	nop			@ (mov r8, r8)
100500fc:	48400000 	.word	0x48400000
10050100:	ffffdfff 	.word	0xffffdfff

10050104 <LL_RCC_GetLPUARTClockSource>:
{
10050104:	b580      	push	{r7, lr}
10050106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
10050108:	4b03      	ldr	r3, [pc, #12]	@ (10050118 <LL_RCC_GetLPUARTClockSource+0x14>)
1005010a:	689a      	ldr	r2, [r3, #8]
1005010c:	2380      	movs	r3, #128	@ 0x80
1005010e:	019b      	lsls	r3, r3, #6
10050110:	4013      	ands	r3, r2
}
10050112:	0018      	movs	r0, r3
10050114:	46bd      	mov	sp, r7
10050116:	bd80      	pop	{r7, pc}
10050118:	48400000 	.word	0x48400000

1005011c <LL_RCC_SetSPI3I2SClockSource>:
{
1005011c:	b580      	push	{r7, lr}
1005011e:	b082      	sub	sp, #8
10050120:	af00      	add	r7, sp, #0
10050122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
10050124:	4b06      	ldr	r3, [pc, #24]	@ (10050140 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10050126:	689b      	ldr	r3, [r3, #8]
10050128:	4a06      	ldr	r2, [pc, #24]	@ (10050144 <LL_RCC_SetSPI3I2SClockSource+0x28>)
1005012a:	4013      	ands	r3, r2
1005012c:	0019      	movs	r1, r3
1005012e:	4b04      	ldr	r3, [pc, #16]	@ (10050140 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10050130:	687a      	ldr	r2, [r7, #4]
10050132:	430a      	orrs	r2, r1
10050134:	609a      	str	r2, [r3, #8]
}
10050136:	46c0      	nop			@ (mov r8, r8)
10050138:	46bd      	mov	sp, r7
1005013a:	b002      	add	sp, #8
1005013c:	bd80      	pop	{r7, pc}
1005013e:	46c0      	nop			@ (mov r8, r8)
10050140:	48400000 	.word	0x48400000
10050144:	ff3fffff 	.word	0xff3fffff

10050148 <LL_RCC_GetSPI3I2SClockSource>:
{
10050148:	b580      	push	{r7, lr}
1005014a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
1005014c:	4b03      	ldr	r3, [pc, #12]	@ (1005015c <LL_RCC_GetSPI3I2SClockSource+0x14>)
1005014e:	689a      	ldr	r2, [r3, #8]
10050150:	23c0      	movs	r3, #192	@ 0xc0
10050152:	041b      	lsls	r3, r3, #16
10050154:	4013      	ands	r3, r2
}
10050156:	0018      	movs	r0, r3
10050158:	46bd      	mov	sp, r7
1005015a:	bd80      	pop	{r7, pc}
1005015c:	48400000 	.word	0x48400000

10050160 <LL_RCC_RC64MPLL_IsReady>:
{
10050160:	b580      	push	{r7, lr}
10050162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10050164:	4b07      	ldr	r3, [pc, #28]	@ (10050184 <LL_RCC_RC64MPLL_IsReady+0x24>)
10050166:	681a      	ldr	r2, [r3, #0]
10050168:	2380      	movs	r3, #128	@ 0x80
1005016a:	01db      	lsls	r3, r3, #7
1005016c:	401a      	ands	r2, r3
1005016e:	2380      	movs	r3, #128	@ 0x80
10050170:	01db      	lsls	r3, r3, #7
10050172:	429a      	cmp	r2, r3
10050174:	d101      	bne.n	1005017a <LL_RCC_RC64MPLL_IsReady+0x1a>
10050176:	2301      	movs	r3, #1
10050178:	e000      	b.n	1005017c <LL_RCC_RC64MPLL_IsReady+0x1c>
1005017a:	2300      	movs	r3, #0
}
1005017c:	0018      	movs	r0, r3
1005017e:	46bd      	mov	sp, r7
10050180:	bd80      	pop	{r7, pc}
10050182:	46c0      	nop			@ (mov r8, r8)
10050184:	48400000 	.word	0x48400000

10050188 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10050188:	b580      	push	{r7, lr}
1005018a:	b082      	sub	sp, #8
1005018c:	af00      	add	r7, sp, #0
1005018e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10050190:	687b      	ldr	r3, [r7, #4]
10050192:	681b      	ldr	r3, [r3, #0]
10050194:	2201      	movs	r2, #1
10050196:	4013      	ands	r3, r2
10050198:	d004      	beq.n	100501a4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
1005019a:	687b      	ldr	r3, [r7, #4]
1005019c:	691b      	ldr	r3, [r3, #16]
1005019e:	0018      	movs	r0, r3
100501a0:	f7ff ff58 	bl	10050054 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
100501a4:	687b      	ldr	r3, [r7, #4]
100501a6:	681b      	ldr	r3, [r3, #0]
100501a8:	2202      	movs	r2, #2
100501aa:	4013      	ands	r3, r2
100501ac:	d004      	beq.n	100501b8 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
100501ae:	687b      	ldr	r3, [r7, #4]
100501b0:	695b      	ldr	r3, [r3, #20]
100501b2:	0018      	movs	r0, r3
100501b4:	f7ff ff6e 	bl	10050094 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
100501b8:	687b      	ldr	r3, [r7, #4]
100501ba:	681b      	ldr	r3, [r3, #0]
100501bc:	2208      	movs	r2, #8
100501be:	4013      	ands	r3, r2
100501c0:	d004      	beq.n	100501cc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
100501c2:	687b      	ldr	r3, [r7, #4]
100501c4:	685b      	ldr	r3, [r3, #4]
100501c6:	0018      	movs	r0, r3
100501c8:	f7ff ffa8 	bl	1005011c <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
100501cc:	687b      	ldr	r3, [r7, #4]
100501ce:	681b      	ldr	r3, [r3, #0]
100501d0:	2210      	movs	r2, #16
100501d2:	4013      	ands	r3, r2
100501d4:	d004      	beq.n	100501e0 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
100501d6:	687b      	ldr	r3, [r7, #4]
100501d8:	68db      	ldr	r3, [r3, #12]
100501da:	0018      	movs	r0, r3
100501dc:	f7ff ff7c 	bl	100500d8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
100501e0:	687b      	ldr	r3, [r7, #4]
100501e2:	689b      	ldr	r3, [r3, #8]
100501e4:	2220      	movs	r2, #32
100501e6:	4013      	ands	r3, r2
100501e8:	d004      	beq.n	100501f4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
100501ea:	687b      	ldr	r3, [r7, #4]
100501ec:	689b      	ldr	r3, [r3, #8]
100501ee:	0018      	movs	r0, r3
100501f0:	f7ff ff0e 	bl	10050010 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
100501f4:	2300      	movs	r3, #0
}
100501f6:	0018      	movs	r0, r3
100501f8:	46bd      	mov	sp, r7
100501fa:	b002      	add	sp, #8
100501fc:	bd80      	pop	{r7, pc}
	...

10050200 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
10050200:	b580      	push	{r7, lr}
10050202:	b084      	sub	sp, #16
10050204:	af00      	add	r7, sp, #0
10050206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
10050208:	2300      	movs	r3, #0
1005020a:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
1005020c:	687b      	ldr	r3, [r7, #4]
1005020e:	2b20      	cmp	r3, #32
10050210:	d900      	bls.n	10050214 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
10050212:	e07f      	b.n	10050314 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
10050214:	687b      	ldr	r3, [r7, #4]
10050216:	009a      	lsls	r2, r3, #2
10050218:	4b42      	ldr	r3, [pc, #264]	@ (10050324 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1005021a:	18d3      	adds	r3, r2, r3
1005021c:	681b      	ldr	r3, [r3, #0]
1005021e:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
10050220:	f7ff ff2c 	bl	1005007c <LL_RCC_GetRFClock>
10050224:	1e03      	subs	r3, r0, #0
10050226:	d002      	beq.n	1005022e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
10050228:	2b04      	cmp	r3, #4
1005022a:	d003      	beq.n	10050234 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
1005022c:	e075      	b.n	1005031a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSE_VALUE;
1005022e:	4b3e      	ldr	r3, [pc, #248]	@ (10050328 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
10050230:	60fb      	str	r3, [r7, #12]
          break;
10050232:	e002      	b.n	1005023a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
10050234:	4b3d      	ldr	r3, [pc, #244]	@ (1005032c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
10050236:	60fb      	str	r3, [r7, #12]
          break;
10050238:	46c0      	nop			@ (mov r8, r8)
      break;
1005023a:	e06e      	b.n	1005031a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
1005023c:	f7ff ff40 	bl	100500c0 <LL_RCC_GetSMPSPrescaler>
10050240:	1e03      	subs	r3, r0, #0
10050242:	d004      	beq.n	1005024e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
10050244:	2280      	movs	r2, #128	@ 0x80
10050246:	0152      	lsls	r2, r2, #5
10050248:	4293      	cmp	r3, r2
1005024a:	d003      	beq.n	10050254 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
1005024c:	e065      	b.n	1005031a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
          frequency = HSE_VALUE / 4;
1005024e:	4b38      	ldr	r3, [pc, #224]	@ (10050330 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
10050250:	60fb      	str	r3, [r7, #12]
          break;
10050252:	e002      	b.n	1005025a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
10050254:	4b37      	ldr	r3, [pc, #220]	@ (10050334 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
10050256:	60fb      	str	r3, [r7, #12]
          break;
10050258:	46c0      	nop			@ (mov r8, r8)
      break;
1005025a:	e05e      	b.n	1005031a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
1005025c:	f7ff fec8 	bl	1004fff0 <LL_RCC_DIRECT_HSE_IsEnabled>
10050260:	1e03      	subs	r3, r0, #0
10050262:	d005      	beq.n	10050270 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
10050264:	f7ff feb0 	bl	1004ffc8 <LL_RCC_HSE_IsReady>
10050268:	1e03      	subs	r3, r0, #0
1005026a:	d107      	bne.n	1005027c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1005026c:	2300      	movs	r3, #0
1005026e:	e055      	b.n	1005031c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
10050270:	f7ff ff76 	bl	10050160 <LL_RCC_RC64MPLL_IsReady>
10050274:	1e03      	subs	r3, r0, #0
10050276:	d101      	bne.n	1005027c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10050278:	2300      	movs	r3, #0
1005027a:	e04f      	b.n	1005031c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
1005027c:	f7ff ff64 	bl	10050148 <LL_RCC_GetSPI3I2SClockSource>
10050280:	0003      	movs	r3, r0
10050282:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
10050284:	68bb      	ldr	r3, [r7, #8]
10050286:	2b00      	cmp	r3, #0
10050288:	d101      	bne.n	1005028e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
1005028a:	4b28      	ldr	r3, [pc, #160]	@ (1005032c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
1005028c:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
1005028e:	68ba      	ldr	r2, [r7, #8]
10050290:	2380      	movs	r3, #128	@ 0x80
10050292:	03db      	lsls	r3, r3, #15
10050294:	429a      	cmp	r2, r3
10050296:	d101      	bne.n	1005029c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
10050298:	4b23      	ldr	r3, [pc, #140]	@ (10050328 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
1005029a:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
1005029c:	68ba      	ldr	r2, [r7, #8]
1005029e:	2380      	movs	r3, #128	@ 0x80
100502a0:	041b      	lsls	r3, r3, #16
100502a2:	429a      	cmp	r2, r3
100502a4:	d138      	bne.n	10050318 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
      {
        frequency = HSE_VALUE * 2;
100502a6:	4b24      	ldr	r3, [pc, #144]	@ (10050338 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
100502a8:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
100502aa:	e035      	b.n	10050318 <HAL_RCCEx_GetPeriphCLKFreq+0x118>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
100502ac:	f7ff ff2a 	bl	10050104 <LL_RCC_GetLPUARTClockSource>
100502b0:	1e03      	subs	r3, r0, #0
100502b2:	d007      	beq.n	100502c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
100502b4:	2280      	movs	r2, #128	@ 0x80
100502b6:	0192      	lsls	r2, r2, #6
100502b8:	4293      	cmp	r3, r2
100502ba:	d106      	bne.n	100502ca <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
100502bc:	2380      	movs	r3, #128	@ 0x80
100502be:	021b      	lsls	r3, r3, #8
100502c0:	60fb      	str	r3, [r7, #12]
          break;
100502c2:	e005      	b.n	100502d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
        case RCC_LPUART1_CLKSOURCE_16M:
          frequency = 16000000U;
100502c4:	4b19      	ldr	r3, [pc, #100]	@ (1005032c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
100502c6:	60fb      	str	r3, [r7, #12]
          break;
100502c8:	e002      	b.n	100502d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
        default:
          frequency = HSE_VALUE / 2;
100502ca:	4b18      	ldr	r3, [pc, #96]	@ (1005032c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
100502cc:	60fb      	str	r3, [r7, #12]
          break;
100502ce:	46c0      	nop			@ (mov r8, r8)
      }
      break;
100502d0:	e023      	b.n	1005031a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
100502d2:	f7ff feb3 	bl	1005003c <LL_RCC_LSCO_GetSource>
100502d6:	0003      	movs	r3, r0
100502d8:	22c0      	movs	r2, #192	@ 0xc0
100502da:	0252      	lsls	r2, r2, #9
100502dc:	4293      	cmp	r3, r2
100502de:	d014      	beq.n	1005030a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
100502e0:	22c0      	movs	r2, #192	@ 0xc0
100502e2:	0252      	lsls	r2, r2, #9
100502e4:	4293      	cmp	r3, r2
100502e6:	d813      	bhi.n	10050310 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
100502e8:	2280      	movs	r2, #128	@ 0x80
100502ea:	0212      	lsls	r2, r2, #8
100502ec:	4293      	cmp	r3, r2
100502ee:	d004      	beq.n	100502fa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
100502f0:	2280      	movs	r2, #128	@ 0x80
100502f2:	0252      	lsls	r2, r2, #9
100502f4:	4293      	cmp	r3, r2
100502f6:	d004      	beq.n	10050302 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
100502f8:	e00a      	b.n	10050310 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = LSE_VALUE;
100502fa:	2380      	movs	r3, #128	@ 0x80
100502fc:	021b      	lsls	r3, r3, #8
100502fe:	60fb      	str	r3, [r7, #12]
          break;
10050300:	e007      	b.n	10050312 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = LSI_VALUE;
10050302:	23fa      	movs	r3, #250	@ 0xfa
10050304:	01db      	lsls	r3, r3, #7
10050306:	60fb      	str	r3, [r7, #12]
          break;
10050308:	e003      	b.n	10050312 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE >> 10;
1005030a:	4b0c      	ldr	r3, [pc, #48]	@ (1005033c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
1005030c:	60fb      	str	r3, [r7, #12]
          break;
1005030e:	e000      	b.n	10050312 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          break;
10050310:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10050312:	e002      	b.n	1005031a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    default :
      break;
10050314:	46c0      	nop			@ (mov r8, r8)
10050316:	e000      	b.n	1005031a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      break;
10050318:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
1005031a:	68fb      	ldr	r3, [r7, #12]
}
1005031c:	0018      	movs	r0, r3
1005031e:	46bd      	mov	sp, r7
10050320:	b004      	add	sp, #16
10050322:	bd80      	pop	{r7, pc}
10050324:	1006ce6c 	.word	0x1006ce6c
10050328:	01e84800 	.word	0x01e84800
1005032c:	00f42400 	.word	0x00f42400
10050330:	007a1200 	.word	0x007a1200
10050334:	003d0900 	.word	0x003d0900
10050338:	03d09000 	.word	0x03d09000
1005033c:	00007a12 	.word	0x00007a12

10050340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10050340:	b580      	push	{r7, lr}
10050342:	b082      	sub	sp, #8
10050344:	af00      	add	r7, sp, #0
10050346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10050348:	687b      	ldr	r3, [r7, #4]
1005034a:	2b00      	cmp	r3, #0
1005034c:	d101      	bne.n	10050352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1005034e:	2301      	movs	r3, #1
10050350:	e055      	b.n	100503fe <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10050352:	687b      	ldr	r3, [r7, #4]
10050354:	2288      	movs	r2, #136	@ 0x88
10050356:	589b      	ldr	r3, [r3, r2]
10050358:	2b00      	cmp	r3, #0
1005035a:	d116      	bne.n	1005038a <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
1005035c:	687b      	ldr	r3, [r7, #4]
1005035e:	2284      	movs	r2, #132	@ 0x84
10050360:	2100      	movs	r1, #0
10050362:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
10050364:	687b      	ldr	r3, [r7, #4]
10050366:	0018      	movs	r0, r3
10050368:	f000 fe2c 	bl	10050fc4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
1005036c:	687b      	ldr	r3, [r7, #4]
1005036e:	22c4      	movs	r2, #196	@ 0xc4
10050370:	589b      	ldr	r3, [r3, r2]
10050372:	2b00      	cmp	r3, #0
10050374:	d103      	bne.n	1005037e <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
10050376:	687b      	ldr	r3, [r7, #4]
10050378:	21c4      	movs	r1, #196	@ 0xc4
1005037a:	4a23      	ldr	r2, [pc, #140]	@ (10050408 <HAL_UART_Init+0xc8>)
1005037c:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
1005037e:	687b      	ldr	r3, [r7, #4]
10050380:	22c4      	movs	r2, #196	@ 0xc4
10050382:	589b      	ldr	r3, [r3, r2]
10050384:	687a      	ldr	r2, [r7, #4]
10050386:	0010      	movs	r0, r2
10050388:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
1005038a:	687b      	ldr	r3, [r7, #4]
1005038c:	2288      	movs	r2, #136	@ 0x88
1005038e:	2124      	movs	r1, #36	@ 0x24
10050390:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10050392:	687b      	ldr	r3, [r7, #4]
10050394:	681b      	ldr	r3, [r3, #0]
10050396:	681a      	ldr	r2, [r3, #0]
10050398:	687b      	ldr	r3, [r7, #4]
1005039a:	681b      	ldr	r3, [r3, #0]
1005039c:	2101      	movs	r1, #1
1005039e:	438a      	bics	r2, r1
100503a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
100503a2:	687b      	ldr	r3, [r7, #4]
100503a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100503a6:	2b00      	cmp	r3, #0
100503a8:	d003      	beq.n	100503b2 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
100503aa:	687b      	ldr	r3, [r7, #4]
100503ac:	0018      	movs	r0, r3
100503ae:	f000 ffc1 	bl	10051334 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
100503b2:	687b      	ldr	r3, [r7, #4]
100503b4:	0018      	movs	r0, r3
100503b6:	f000 fe55 	bl	10051064 <UART_SetConfig>
100503ba:	0003      	movs	r3, r0
100503bc:	2b01      	cmp	r3, #1
100503be:	d101      	bne.n	100503c4 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
100503c0:	2301      	movs	r3, #1
100503c2:	e01c      	b.n	100503fe <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
100503c4:	687b      	ldr	r3, [r7, #4]
100503c6:	681b      	ldr	r3, [r3, #0]
100503c8:	685a      	ldr	r2, [r3, #4]
100503ca:	687b      	ldr	r3, [r7, #4]
100503cc:	681b      	ldr	r3, [r3, #0]
100503ce:	490f      	ldr	r1, [pc, #60]	@ (1005040c <HAL_UART_Init+0xcc>)
100503d0:	400a      	ands	r2, r1
100503d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
100503d4:	687b      	ldr	r3, [r7, #4]
100503d6:	681b      	ldr	r3, [r3, #0]
100503d8:	689a      	ldr	r2, [r3, #8]
100503da:	687b      	ldr	r3, [r7, #4]
100503dc:	681b      	ldr	r3, [r3, #0]
100503de:	212a      	movs	r1, #42	@ 0x2a
100503e0:	438a      	bics	r2, r1
100503e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
100503e4:	687b      	ldr	r3, [r7, #4]
100503e6:	681b      	ldr	r3, [r3, #0]
100503e8:	681a      	ldr	r2, [r3, #0]
100503ea:	687b      	ldr	r3, [r7, #4]
100503ec:	681b      	ldr	r3, [r3, #0]
100503ee:	2101      	movs	r1, #1
100503f0:	430a      	orrs	r2, r1
100503f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
100503f4:	687b      	ldr	r3, [r7, #4]
100503f6:	0018      	movs	r0, r3
100503f8:	f001 f850 	bl	1005149c <UART_CheckIdleState>
100503fc:	0003      	movs	r3, r0
}
100503fe:	0018      	movs	r0, r3
10050400:	46bd      	mov	sp, r7
10050402:	b002      	add	sp, #8
10050404:	bd80      	pop	{r7, pc}
10050406:	46c0      	nop			@ (mov r8, r8)
10050408:	10043529 	.word	0x10043529
1005040c:	ffffb7ff 	.word	0xffffb7ff

10050410 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
10050410:	b580      	push	{r7, lr}
10050412:	b086      	sub	sp, #24
10050414:	af00      	add	r7, sp, #0
10050416:	60f8      	str	r0, [r7, #12]
10050418:	607a      	str	r2, [r7, #4]
1005041a:	230b      	movs	r3, #11
1005041c:	18fb      	adds	r3, r7, r3
1005041e:	1c0a      	adds	r2, r1, #0
10050420:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
10050422:	2317      	movs	r3, #23
10050424:	18fb      	adds	r3, r7, r3
10050426:	2200      	movs	r2, #0
10050428:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
1005042a:	687b      	ldr	r3, [r7, #4]
1005042c:	2b00      	cmp	r3, #0
1005042e:	d109      	bne.n	10050444 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
10050430:	68fb      	ldr	r3, [r7, #12]
10050432:	2290      	movs	r2, #144	@ 0x90
10050434:	589b      	ldr	r3, [r3, r2]
10050436:	2240      	movs	r2, #64	@ 0x40
10050438:	431a      	orrs	r2, r3
1005043a:	68fb      	ldr	r3, [r7, #12]
1005043c:	2190      	movs	r1, #144	@ 0x90
1005043e:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
10050440:	2301      	movs	r3, #1
10050442:	e08f      	b.n	10050564 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
10050444:	68fb      	ldr	r3, [r7, #12]
10050446:	2288      	movs	r2, #136	@ 0x88
10050448:	589b      	ldr	r3, [r3, r2]
1005044a:	2b20      	cmp	r3, #32
1005044c:	d157      	bne.n	100504fe <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
1005044e:	230b      	movs	r3, #11
10050450:	18fb      	adds	r3, r7, r3
10050452:	781b      	ldrb	r3, [r3, #0]
10050454:	2b0c      	cmp	r3, #12
10050456:	d845      	bhi.n	100504e4 <HAL_UART_RegisterCallback+0xd4>
10050458:	009a      	lsls	r2, r3, #2
1005045a:	4b44      	ldr	r3, [pc, #272]	@ (1005056c <HAL_UART_RegisterCallback+0x15c>)
1005045c:	18d3      	adds	r3, r2, r3
1005045e:	681b      	ldr	r3, [r3, #0]
10050460:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
10050462:	68fb      	ldr	r3, [r7, #12]
10050464:	2194      	movs	r1, #148	@ 0x94
10050466:	687a      	ldr	r2, [r7, #4]
10050468:	505a      	str	r2, [r3, r1]
        break;
1005046a:	e078      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
1005046c:	68fb      	ldr	r3, [r7, #12]
1005046e:	2198      	movs	r1, #152	@ 0x98
10050470:	687a      	ldr	r2, [r7, #4]
10050472:	505a      	str	r2, [r3, r1]
        break;
10050474:	e073      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
10050476:	68fb      	ldr	r3, [r7, #12]
10050478:	219c      	movs	r1, #156	@ 0x9c
1005047a:	687a      	ldr	r2, [r7, #4]
1005047c:	505a      	str	r2, [r3, r1]
        break;
1005047e:	e06e      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
10050480:	68fb      	ldr	r3, [r7, #12]
10050482:	21a0      	movs	r1, #160	@ 0xa0
10050484:	687a      	ldr	r2, [r7, #4]
10050486:	505a      	str	r2, [r3, r1]
        break;
10050488:	e069      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
1005048a:	68fb      	ldr	r3, [r7, #12]
1005048c:	21a4      	movs	r1, #164	@ 0xa4
1005048e:	687a      	ldr	r2, [r7, #4]
10050490:	505a      	str	r2, [r3, r1]
        break;
10050492:	e064      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
10050494:	68fb      	ldr	r3, [r7, #12]
10050496:	21a8      	movs	r1, #168	@ 0xa8
10050498:	687a      	ldr	r2, [r7, #4]
1005049a:	505a      	str	r2, [r3, r1]
        break;
1005049c:	e05f      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
1005049e:	68fb      	ldr	r3, [r7, #12]
100504a0:	21ac      	movs	r1, #172	@ 0xac
100504a2:	687a      	ldr	r2, [r7, #4]
100504a4:	505a      	str	r2, [r3, r1]
        break;
100504a6:	e05a      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
100504a8:	68fb      	ldr	r3, [r7, #12]
100504aa:	21b0      	movs	r1, #176	@ 0xb0
100504ac:	687a      	ldr	r2, [r7, #4]
100504ae:	505a      	str	r2, [r3, r1]
        break;
100504b0:	e055      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
100504b2:	68fb      	ldr	r3, [r7, #12]
100504b4:	21b4      	movs	r1, #180	@ 0xb4
100504b6:	687a      	ldr	r2, [r7, #4]
100504b8:	505a      	str	r2, [r3, r1]
        break;
100504ba:	e050      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
100504bc:	68fb      	ldr	r3, [r7, #12]
100504be:	21b8      	movs	r1, #184	@ 0xb8
100504c0:	687a      	ldr	r2, [r7, #4]
100504c2:	505a      	str	r2, [r3, r1]
        break;
100504c4:	e04b      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
100504c6:	68fb      	ldr	r3, [r7, #12]
100504c8:	21bc      	movs	r1, #188	@ 0xbc
100504ca:	687a      	ldr	r2, [r7, #4]
100504cc:	505a      	str	r2, [r3, r1]
        break;
100504ce:	e046      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
100504d0:	68fb      	ldr	r3, [r7, #12]
100504d2:	21c4      	movs	r1, #196	@ 0xc4
100504d4:	687a      	ldr	r2, [r7, #4]
100504d6:	505a      	str	r2, [r3, r1]
        break;
100504d8:	e041      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
100504da:	68fb      	ldr	r3, [r7, #12]
100504dc:	21c8      	movs	r1, #200	@ 0xc8
100504de:	687a      	ldr	r2, [r7, #4]
100504e0:	505a      	str	r2, [r3, r1]
        break;
100504e2:	e03c      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
100504e4:	68fb      	ldr	r3, [r7, #12]
100504e6:	2290      	movs	r2, #144	@ 0x90
100504e8:	589b      	ldr	r3, [r3, r2]
100504ea:	2240      	movs	r2, #64	@ 0x40
100504ec:	431a      	orrs	r2, r3
100504ee:	68fb      	ldr	r3, [r7, #12]
100504f0:	2190      	movs	r1, #144	@ 0x90
100504f2:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
100504f4:	2317      	movs	r3, #23
100504f6:	18fb      	adds	r3, r7, r3
100504f8:	2201      	movs	r2, #1
100504fa:	701a      	strb	r2, [r3, #0]
        break;
100504fc:	e02f      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
100504fe:	68fb      	ldr	r3, [r7, #12]
10050500:	2288      	movs	r2, #136	@ 0x88
10050502:	589b      	ldr	r3, [r3, r2]
10050504:	2b00      	cmp	r3, #0
10050506:	d11e      	bne.n	10050546 <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
10050508:	230b      	movs	r3, #11
1005050a:	18fb      	adds	r3, r7, r3
1005050c:	781b      	ldrb	r3, [r3, #0]
1005050e:	2b0b      	cmp	r3, #11
10050510:	d002      	beq.n	10050518 <HAL_UART_RegisterCallback+0x108>
10050512:	2b0c      	cmp	r3, #12
10050514:	d005      	beq.n	10050522 <HAL_UART_RegisterCallback+0x112>
10050516:	e009      	b.n	1005052c <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
10050518:	68fb      	ldr	r3, [r7, #12]
1005051a:	21c4      	movs	r1, #196	@ 0xc4
1005051c:	687a      	ldr	r2, [r7, #4]
1005051e:	505a      	str	r2, [r3, r1]
        break;
10050520:	e01d      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
10050522:	68fb      	ldr	r3, [r7, #12]
10050524:	21c8      	movs	r1, #200	@ 0xc8
10050526:	687a      	ldr	r2, [r7, #4]
10050528:	505a      	str	r2, [r3, r1]
        break;
1005052a:	e018      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1005052c:	68fb      	ldr	r3, [r7, #12]
1005052e:	2290      	movs	r2, #144	@ 0x90
10050530:	589b      	ldr	r3, [r3, r2]
10050532:	2240      	movs	r2, #64	@ 0x40
10050534:	431a      	orrs	r2, r3
10050536:	68fb      	ldr	r3, [r7, #12]
10050538:	2190      	movs	r1, #144	@ 0x90
1005053a:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
1005053c:	2317      	movs	r3, #23
1005053e:	18fb      	adds	r3, r7, r3
10050540:	2201      	movs	r2, #1
10050542:	701a      	strb	r2, [r3, #0]
        break;
10050544:	e00b      	b.n	1005055e <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
10050546:	68fb      	ldr	r3, [r7, #12]
10050548:	2290      	movs	r2, #144	@ 0x90
1005054a:	589b      	ldr	r3, [r3, r2]
1005054c:	2240      	movs	r2, #64	@ 0x40
1005054e:	431a      	orrs	r2, r3
10050550:	68fb      	ldr	r3, [r7, #12]
10050552:	2190      	movs	r1, #144	@ 0x90
10050554:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
10050556:	2317      	movs	r3, #23
10050558:	18fb      	adds	r3, r7, r3
1005055a:	2201      	movs	r2, #1
1005055c:	701a      	strb	r2, [r3, #0]
  }

  return status;
1005055e:	2317      	movs	r3, #23
10050560:	18fb      	adds	r3, r7, r3
10050562:	781b      	ldrb	r3, [r3, #0]
}
10050564:	0018      	movs	r0, r3
10050566:	46bd      	mov	sp, r7
10050568:	b006      	add	sp, #24
1005056a:	bd80      	pop	{r7, pc}
1005056c:	1006cf08 	.word	0x1006cf08

10050570 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10050570:	b580      	push	{r7, lr}
10050572:	b08a      	sub	sp, #40	@ 0x28
10050574:	af02      	add	r7, sp, #8
10050576:	60f8      	str	r0, [r7, #12]
10050578:	60b9      	str	r1, [r7, #8]
1005057a:	603b      	str	r3, [r7, #0]
1005057c:	1dbb      	adds	r3, r7, #6
1005057e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10050580:	68fb      	ldr	r3, [r7, #12]
10050582:	2288      	movs	r2, #136	@ 0x88
10050584:	589b      	ldr	r3, [r3, r2]
10050586:	2b20      	cmp	r3, #32
10050588:	d000      	beq.n	1005058c <HAL_UART_Transmit+0x1c>
1005058a:	e090      	b.n	100506ae <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
1005058c:	68bb      	ldr	r3, [r7, #8]
1005058e:	2b00      	cmp	r3, #0
10050590:	d003      	beq.n	1005059a <HAL_UART_Transmit+0x2a>
10050592:	1dbb      	adds	r3, r7, #6
10050594:	881b      	ldrh	r3, [r3, #0]
10050596:	2b00      	cmp	r3, #0
10050598:	d101      	bne.n	1005059e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
1005059a:	2301      	movs	r3, #1
1005059c:	e088      	b.n	100506b0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1005059e:	68fb      	ldr	r3, [r7, #12]
100505a0:	689a      	ldr	r2, [r3, #8]
100505a2:	2380      	movs	r3, #128	@ 0x80
100505a4:	015b      	lsls	r3, r3, #5
100505a6:	429a      	cmp	r2, r3
100505a8:	d109      	bne.n	100505be <HAL_UART_Transmit+0x4e>
100505aa:	68fb      	ldr	r3, [r7, #12]
100505ac:	691b      	ldr	r3, [r3, #16]
100505ae:	2b00      	cmp	r3, #0
100505b0:	d105      	bne.n	100505be <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
100505b2:	68bb      	ldr	r3, [r7, #8]
100505b4:	2201      	movs	r2, #1
100505b6:	4013      	ands	r3, r2
100505b8:	d001      	beq.n	100505be <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
100505ba:	2301      	movs	r3, #1
100505bc:	e078      	b.n	100506b0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
100505be:	68fb      	ldr	r3, [r7, #12]
100505c0:	2290      	movs	r2, #144	@ 0x90
100505c2:	2100      	movs	r1, #0
100505c4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
100505c6:	68fb      	ldr	r3, [r7, #12]
100505c8:	2288      	movs	r2, #136	@ 0x88
100505ca:	2121      	movs	r1, #33	@ 0x21
100505cc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
100505ce:	f7fb fcf3 	bl	1004bfb8 <HAL_GetTick>
100505d2:	0003      	movs	r3, r0
100505d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
100505d6:	68fb      	ldr	r3, [r7, #12]
100505d8:	1dba      	adds	r2, r7, #6
100505da:	2154      	movs	r1, #84	@ 0x54
100505dc:	8812      	ldrh	r2, [r2, #0]
100505de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
100505e0:	68fb      	ldr	r3, [r7, #12]
100505e2:	1dba      	adds	r2, r7, #6
100505e4:	2156      	movs	r1, #86	@ 0x56
100505e6:	8812      	ldrh	r2, [r2, #0]
100505e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
100505ea:	68fb      	ldr	r3, [r7, #12]
100505ec:	689a      	ldr	r2, [r3, #8]
100505ee:	2380      	movs	r3, #128	@ 0x80
100505f0:	015b      	lsls	r3, r3, #5
100505f2:	429a      	cmp	r2, r3
100505f4:	d108      	bne.n	10050608 <HAL_UART_Transmit+0x98>
100505f6:	68fb      	ldr	r3, [r7, #12]
100505f8:	691b      	ldr	r3, [r3, #16]
100505fa:	2b00      	cmp	r3, #0
100505fc:	d104      	bne.n	10050608 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
100505fe:	2300      	movs	r3, #0
10050600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
10050602:	68bb      	ldr	r3, [r7, #8]
10050604:	61bb      	str	r3, [r7, #24]
10050606:	e003      	b.n	10050610 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
10050608:	68bb      	ldr	r3, [r7, #8]
1005060a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
1005060c:	2300      	movs	r3, #0
1005060e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
10050610:	e030      	b.n	10050674 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10050612:	697a      	ldr	r2, [r7, #20]
10050614:	68f8      	ldr	r0, [r7, #12]
10050616:	683b      	ldr	r3, [r7, #0]
10050618:	9300      	str	r3, [sp, #0]
1005061a:	0013      	movs	r3, r2
1005061c:	2200      	movs	r2, #0
1005061e:	2180      	movs	r1, #128	@ 0x80
10050620:	f000 ffe6 	bl	100515f0 <UART_WaitOnFlagUntilTimeout>
10050624:	1e03      	subs	r3, r0, #0
10050626:	d005      	beq.n	10050634 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
10050628:	68fb      	ldr	r3, [r7, #12]
1005062a:	2288      	movs	r2, #136	@ 0x88
1005062c:	2120      	movs	r1, #32
1005062e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
10050630:	2303      	movs	r3, #3
10050632:	e03d      	b.n	100506b0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
10050634:	69fb      	ldr	r3, [r7, #28]
10050636:	2b00      	cmp	r3, #0
10050638:	d10b      	bne.n	10050652 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
1005063a:	69bb      	ldr	r3, [r7, #24]
1005063c:	881b      	ldrh	r3, [r3, #0]
1005063e:	001a      	movs	r2, r3
10050640:	68fb      	ldr	r3, [r7, #12]
10050642:	681b      	ldr	r3, [r3, #0]
10050644:	05d2      	lsls	r2, r2, #23
10050646:	0dd2      	lsrs	r2, r2, #23
10050648:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
1005064a:	69bb      	ldr	r3, [r7, #24]
1005064c:	3302      	adds	r3, #2
1005064e:	61bb      	str	r3, [r7, #24]
10050650:	e007      	b.n	10050662 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10050652:	69fb      	ldr	r3, [r7, #28]
10050654:	781a      	ldrb	r2, [r3, #0]
10050656:	68fb      	ldr	r3, [r7, #12]
10050658:	681b      	ldr	r3, [r3, #0]
1005065a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
1005065c:	69fb      	ldr	r3, [r7, #28]
1005065e:	3301      	adds	r3, #1
10050660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10050662:	68fb      	ldr	r3, [r7, #12]
10050664:	2256      	movs	r2, #86	@ 0x56
10050666:	5a9b      	ldrh	r3, [r3, r2]
10050668:	b29b      	uxth	r3, r3
1005066a:	3b01      	subs	r3, #1
1005066c:	b299      	uxth	r1, r3
1005066e:	68fb      	ldr	r3, [r7, #12]
10050670:	2256      	movs	r2, #86	@ 0x56
10050672:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
10050674:	68fb      	ldr	r3, [r7, #12]
10050676:	2256      	movs	r2, #86	@ 0x56
10050678:	5a9b      	ldrh	r3, [r3, r2]
1005067a:	b29b      	uxth	r3, r3
1005067c:	2b00      	cmp	r3, #0
1005067e:	d1c8      	bne.n	10050612 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10050680:	697a      	ldr	r2, [r7, #20]
10050682:	68f8      	ldr	r0, [r7, #12]
10050684:	683b      	ldr	r3, [r7, #0]
10050686:	9300      	str	r3, [sp, #0]
10050688:	0013      	movs	r3, r2
1005068a:	2200      	movs	r2, #0
1005068c:	2140      	movs	r1, #64	@ 0x40
1005068e:	f000 ffaf 	bl	100515f0 <UART_WaitOnFlagUntilTimeout>
10050692:	1e03      	subs	r3, r0, #0
10050694:	d005      	beq.n	100506a2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
10050696:	68fb      	ldr	r3, [r7, #12]
10050698:	2288      	movs	r2, #136	@ 0x88
1005069a:	2120      	movs	r1, #32
1005069c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
1005069e:	2303      	movs	r3, #3
100506a0:	e006      	b.n	100506b0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
100506a2:	68fb      	ldr	r3, [r7, #12]
100506a4:	2288      	movs	r2, #136	@ 0x88
100506a6:	2120      	movs	r1, #32
100506a8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
100506aa:	2300      	movs	r3, #0
100506ac:	e000      	b.n	100506b0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
100506ae:	2302      	movs	r3, #2
  }
}
100506b0:	0018      	movs	r0, r3
100506b2:	46bd      	mov	sp, r7
100506b4:	b008      	add	sp, #32
100506b6:	bd80      	pop	{r7, pc}

100506b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
100506b8:	b580      	push	{r7, lr}
100506ba:	b08a      	sub	sp, #40	@ 0x28
100506bc:	af02      	add	r7, sp, #8
100506be:	60f8      	str	r0, [r7, #12]
100506c0:	60b9      	str	r1, [r7, #8]
100506c2:	603b      	str	r3, [r7, #0]
100506c4:	1dbb      	adds	r3, r7, #6
100506c6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
100506c8:	68fb      	ldr	r3, [r7, #12]
100506ca:	228c      	movs	r2, #140	@ 0x8c
100506cc:	589b      	ldr	r3, [r3, r2]
100506ce:	2b20      	cmp	r3, #32
100506d0:	d000      	beq.n	100506d4 <HAL_UART_Receive+0x1c>
100506d2:	e0d0      	b.n	10050876 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
100506d4:	68bb      	ldr	r3, [r7, #8]
100506d6:	2b00      	cmp	r3, #0
100506d8:	d003      	beq.n	100506e2 <HAL_UART_Receive+0x2a>
100506da:	1dbb      	adds	r3, r7, #6
100506dc:	881b      	ldrh	r3, [r3, #0]
100506de:	2b00      	cmp	r3, #0
100506e0:	d101      	bne.n	100506e6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
100506e2:	2301      	movs	r3, #1
100506e4:	e0c8      	b.n	10050878 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
100506e6:	68fb      	ldr	r3, [r7, #12]
100506e8:	689a      	ldr	r2, [r3, #8]
100506ea:	2380      	movs	r3, #128	@ 0x80
100506ec:	015b      	lsls	r3, r3, #5
100506ee:	429a      	cmp	r2, r3
100506f0:	d109      	bne.n	10050706 <HAL_UART_Receive+0x4e>
100506f2:	68fb      	ldr	r3, [r7, #12]
100506f4:	691b      	ldr	r3, [r3, #16]
100506f6:	2b00      	cmp	r3, #0
100506f8:	d105      	bne.n	10050706 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
100506fa:	68bb      	ldr	r3, [r7, #8]
100506fc:	2201      	movs	r2, #1
100506fe:	4013      	ands	r3, r2
10050700:	d001      	beq.n	10050706 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
10050702:	2301      	movs	r3, #1
10050704:	e0b8      	b.n	10050878 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10050706:	68fb      	ldr	r3, [r7, #12]
10050708:	2290      	movs	r2, #144	@ 0x90
1005070a:	2100      	movs	r1, #0
1005070c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
1005070e:	68fb      	ldr	r3, [r7, #12]
10050710:	228c      	movs	r2, #140	@ 0x8c
10050712:	2122      	movs	r1, #34	@ 0x22
10050714:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10050716:	68fb      	ldr	r3, [r7, #12]
10050718:	2200      	movs	r2, #0
1005071a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
1005071c:	f7fb fc4c 	bl	1004bfb8 <HAL_GetTick>
10050720:	0003      	movs	r3, r0
10050722:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
10050724:	68fb      	ldr	r3, [r7, #12]
10050726:	1dba      	adds	r2, r7, #6
10050728:	215c      	movs	r1, #92	@ 0x5c
1005072a:	8812      	ldrh	r2, [r2, #0]
1005072c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
1005072e:	68fb      	ldr	r3, [r7, #12]
10050730:	1dba      	adds	r2, r7, #6
10050732:	215e      	movs	r1, #94	@ 0x5e
10050734:	8812      	ldrh	r2, [r2, #0]
10050736:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
10050738:	68fb      	ldr	r3, [r7, #12]
1005073a:	689a      	ldr	r2, [r3, #8]
1005073c:	2380      	movs	r3, #128	@ 0x80
1005073e:	015b      	lsls	r3, r3, #5
10050740:	429a      	cmp	r2, r3
10050742:	d10d      	bne.n	10050760 <HAL_UART_Receive+0xa8>
10050744:	68fb      	ldr	r3, [r7, #12]
10050746:	691b      	ldr	r3, [r3, #16]
10050748:	2b00      	cmp	r3, #0
1005074a:	d104      	bne.n	10050756 <HAL_UART_Receive+0x9e>
1005074c:	68fb      	ldr	r3, [r7, #12]
1005074e:	2260      	movs	r2, #96	@ 0x60
10050750:	494b      	ldr	r1, [pc, #300]	@ (10050880 <HAL_UART_Receive+0x1c8>)
10050752:	5299      	strh	r1, [r3, r2]
10050754:	e02e      	b.n	100507b4 <HAL_UART_Receive+0xfc>
10050756:	68fb      	ldr	r3, [r7, #12]
10050758:	2260      	movs	r2, #96	@ 0x60
1005075a:	21ff      	movs	r1, #255	@ 0xff
1005075c:	5299      	strh	r1, [r3, r2]
1005075e:	e029      	b.n	100507b4 <HAL_UART_Receive+0xfc>
10050760:	68fb      	ldr	r3, [r7, #12]
10050762:	689b      	ldr	r3, [r3, #8]
10050764:	2b00      	cmp	r3, #0
10050766:	d10d      	bne.n	10050784 <HAL_UART_Receive+0xcc>
10050768:	68fb      	ldr	r3, [r7, #12]
1005076a:	691b      	ldr	r3, [r3, #16]
1005076c:	2b00      	cmp	r3, #0
1005076e:	d104      	bne.n	1005077a <HAL_UART_Receive+0xc2>
10050770:	68fb      	ldr	r3, [r7, #12]
10050772:	2260      	movs	r2, #96	@ 0x60
10050774:	21ff      	movs	r1, #255	@ 0xff
10050776:	5299      	strh	r1, [r3, r2]
10050778:	e01c      	b.n	100507b4 <HAL_UART_Receive+0xfc>
1005077a:	68fb      	ldr	r3, [r7, #12]
1005077c:	2260      	movs	r2, #96	@ 0x60
1005077e:	217f      	movs	r1, #127	@ 0x7f
10050780:	5299      	strh	r1, [r3, r2]
10050782:	e017      	b.n	100507b4 <HAL_UART_Receive+0xfc>
10050784:	68fb      	ldr	r3, [r7, #12]
10050786:	689a      	ldr	r2, [r3, #8]
10050788:	2380      	movs	r3, #128	@ 0x80
1005078a:	055b      	lsls	r3, r3, #21
1005078c:	429a      	cmp	r2, r3
1005078e:	d10d      	bne.n	100507ac <HAL_UART_Receive+0xf4>
10050790:	68fb      	ldr	r3, [r7, #12]
10050792:	691b      	ldr	r3, [r3, #16]
10050794:	2b00      	cmp	r3, #0
10050796:	d104      	bne.n	100507a2 <HAL_UART_Receive+0xea>
10050798:	68fb      	ldr	r3, [r7, #12]
1005079a:	2260      	movs	r2, #96	@ 0x60
1005079c:	217f      	movs	r1, #127	@ 0x7f
1005079e:	5299      	strh	r1, [r3, r2]
100507a0:	e008      	b.n	100507b4 <HAL_UART_Receive+0xfc>
100507a2:	68fb      	ldr	r3, [r7, #12]
100507a4:	2260      	movs	r2, #96	@ 0x60
100507a6:	213f      	movs	r1, #63	@ 0x3f
100507a8:	5299      	strh	r1, [r3, r2]
100507aa:	e003      	b.n	100507b4 <HAL_UART_Receive+0xfc>
100507ac:	68fb      	ldr	r3, [r7, #12]
100507ae:	2260      	movs	r2, #96	@ 0x60
100507b0:	2100      	movs	r1, #0
100507b2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
100507b4:	2312      	movs	r3, #18
100507b6:	18fb      	adds	r3, r7, r3
100507b8:	68fa      	ldr	r2, [r7, #12]
100507ba:	2160      	movs	r1, #96	@ 0x60
100507bc:	5a52      	ldrh	r2, [r2, r1]
100507be:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
100507c0:	68fb      	ldr	r3, [r7, #12]
100507c2:	689a      	ldr	r2, [r3, #8]
100507c4:	2380      	movs	r3, #128	@ 0x80
100507c6:	015b      	lsls	r3, r3, #5
100507c8:	429a      	cmp	r2, r3
100507ca:	d108      	bne.n	100507de <HAL_UART_Receive+0x126>
100507cc:	68fb      	ldr	r3, [r7, #12]
100507ce:	691b      	ldr	r3, [r3, #16]
100507d0:	2b00      	cmp	r3, #0
100507d2:	d104      	bne.n	100507de <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
100507d4:	2300      	movs	r3, #0
100507d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
100507d8:	68bb      	ldr	r3, [r7, #8]
100507da:	61bb      	str	r3, [r7, #24]
100507dc:	e003      	b.n	100507e6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
100507de:	68bb      	ldr	r3, [r7, #8]
100507e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
100507e2:	2300      	movs	r3, #0
100507e4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
100507e6:	e03a      	b.n	1005085e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
100507e8:	697a      	ldr	r2, [r7, #20]
100507ea:	68f8      	ldr	r0, [r7, #12]
100507ec:	683b      	ldr	r3, [r7, #0]
100507ee:	9300      	str	r3, [sp, #0]
100507f0:	0013      	movs	r3, r2
100507f2:	2200      	movs	r2, #0
100507f4:	2120      	movs	r1, #32
100507f6:	f000 fefb 	bl	100515f0 <UART_WaitOnFlagUntilTimeout>
100507fa:	1e03      	subs	r3, r0, #0
100507fc:	d005      	beq.n	1005080a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
100507fe:	68fb      	ldr	r3, [r7, #12]
10050800:	228c      	movs	r2, #140	@ 0x8c
10050802:	2120      	movs	r1, #32
10050804:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
10050806:	2303      	movs	r3, #3
10050808:	e036      	b.n	10050878 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
1005080a:	69fb      	ldr	r3, [r7, #28]
1005080c:	2b00      	cmp	r3, #0
1005080e:	d10e      	bne.n	1005082e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
10050810:	68fb      	ldr	r3, [r7, #12]
10050812:	681b      	ldr	r3, [r3, #0]
10050814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10050816:	b29b      	uxth	r3, r3
10050818:	2212      	movs	r2, #18
1005081a:	18ba      	adds	r2, r7, r2
1005081c:	8812      	ldrh	r2, [r2, #0]
1005081e:	4013      	ands	r3, r2
10050820:	b29a      	uxth	r2, r3
10050822:	69bb      	ldr	r3, [r7, #24]
10050824:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
10050826:	69bb      	ldr	r3, [r7, #24]
10050828:	3302      	adds	r3, #2
1005082a:	61bb      	str	r3, [r7, #24]
1005082c:	e00e      	b.n	1005084c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
1005082e:	68fb      	ldr	r3, [r7, #12]
10050830:	681b      	ldr	r3, [r3, #0]
10050832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10050834:	b2db      	uxtb	r3, r3
10050836:	2212      	movs	r2, #18
10050838:	18ba      	adds	r2, r7, r2
1005083a:	8812      	ldrh	r2, [r2, #0]
1005083c:	b2d2      	uxtb	r2, r2
1005083e:	4013      	ands	r3, r2
10050840:	b2da      	uxtb	r2, r3
10050842:	69fb      	ldr	r3, [r7, #28]
10050844:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
10050846:	69fb      	ldr	r3, [r7, #28]
10050848:	3301      	adds	r3, #1
1005084a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
1005084c:	68fb      	ldr	r3, [r7, #12]
1005084e:	225e      	movs	r2, #94	@ 0x5e
10050850:	5a9b      	ldrh	r3, [r3, r2]
10050852:	b29b      	uxth	r3, r3
10050854:	3b01      	subs	r3, #1
10050856:	b299      	uxth	r1, r3
10050858:	68fb      	ldr	r3, [r7, #12]
1005085a:	225e      	movs	r2, #94	@ 0x5e
1005085c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
1005085e:	68fb      	ldr	r3, [r7, #12]
10050860:	225e      	movs	r2, #94	@ 0x5e
10050862:	5a9b      	ldrh	r3, [r3, r2]
10050864:	b29b      	uxth	r3, r3
10050866:	2b00      	cmp	r3, #0
10050868:	d1be      	bne.n	100507e8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
1005086a:	68fb      	ldr	r3, [r7, #12]
1005086c:	228c      	movs	r2, #140	@ 0x8c
1005086e:	2120      	movs	r1, #32
10050870:	5099      	str	r1, [r3, r2]

    return HAL_OK;
10050872:	2300      	movs	r3, #0
10050874:	e000      	b.n	10050878 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
10050876:	2302      	movs	r3, #2
  }
}
10050878:	0018      	movs	r0, r3
1005087a:	46bd      	mov	sp, r7
1005087c:	b008      	add	sp, #32
1005087e:	bd80      	pop	{r7, pc}
10050880:	000001ff 	.word	0x000001ff

10050884 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
10050884:	b5b0      	push	{r4, r5, r7, lr}
10050886:	b0aa      	sub	sp, #168	@ 0xa8
10050888:	af00      	add	r7, sp, #0
1005088a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
1005088c:	687b      	ldr	r3, [r7, #4]
1005088e:	681b      	ldr	r3, [r3, #0]
10050890:	69db      	ldr	r3, [r3, #28]
10050892:	22a4      	movs	r2, #164	@ 0xa4
10050894:	18b9      	adds	r1, r7, r2
10050896:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
10050898:	687b      	ldr	r3, [r7, #4]
1005089a:	681b      	ldr	r3, [r3, #0]
1005089c:	681b      	ldr	r3, [r3, #0]
1005089e:	20a0      	movs	r0, #160	@ 0xa0
100508a0:	1839      	adds	r1, r7, r0
100508a2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
100508a4:	687b      	ldr	r3, [r7, #4]
100508a6:	681b      	ldr	r3, [r3, #0]
100508a8:	689b      	ldr	r3, [r3, #8]
100508aa:	249c      	movs	r4, #156	@ 0x9c
100508ac:	1939      	adds	r1, r7, r4
100508ae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
100508b0:	0011      	movs	r1, r2
100508b2:	18bb      	adds	r3, r7, r2
100508b4:	681b      	ldr	r3, [r3, #0]
100508b6:	4aa5      	ldr	r2, [pc, #660]	@ (10050b4c <HAL_UART_IRQHandler+0x2c8>)
100508b8:	4013      	ands	r3, r2
100508ba:	2298      	movs	r2, #152	@ 0x98
100508bc:	18bd      	adds	r5, r7, r2
100508be:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
100508c0:	18bb      	adds	r3, r7, r2
100508c2:	681b      	ldr	r3, [r3, #0]
100508c4:	2b00      	cmp	r3, #0
100508c6:	d11a      	bne.n	100508fe <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
100508c8:	187b      	adds	r3, r7, r1
100508ca:	681b      	ldr	r3, [r3, #0]
100508cc:	2220      	movs	r2, #32
100508ce:	4013      	ands	r3, r2
100508d0:	d015      	beq.n	100508fe <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
100508d2:	183b      	adds	r3, r7, r0
100508d4:	681b      	ldr	r3, [r3, #0]
100508d6:	2220      	movs	r2, #32
100508d8:	4013      	ands	r3, r2
100508da:	d105      	bne.n	100508e8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
100508dc:	193b      	adds	r3, r7, r4
100508de:	681a      	ldr	r2, [r3, #0]
100508e0:	2380      	movs	r3, #128	@ 0x80
100508e2:	055b      	lsls	r3, r3, #21
100508e4:	4013      	ands	r3, r2
100508e6:	d00a      	beq.n	100508fe <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
100508e8:	687b      	ldr	r3, [r7, #4]
100508ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100508ec:	2b00      	cmp	r3, #0
100508ee:	d100      	bne.n	100508f2 <HAL_UART_IRQHandler+0x6e>
100508f0:	e30a      	b.n	10050f08 <HAL_UART_IRQHandler+0x684>
      {
        huart->RxISR(huart);
100508f2:	687b      	ldr	r3, [r7, #4]
100508f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100508f6:	687a      	ldr	r2, [r7, #4]
100508f8:	0010      	movs	r0, r2
100508fa:	4798      	blx	r3
      }
      return;
100508fc:	e304      	b.n	10050f08 <HAL_UART_IRQHandler+0x684>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
100508fe:	2398      	movs	r3, #152	@ 0x98
10050900:	18fb      	adds	r3, r7, r3
10050902:	681b      	ldr	r3, [r3, #0]
10050904:	2b00      	cmp	r3, #0
10050906:	d100      	bne.n	1005090a <HAL_UART_IRQHandler+0x86>
10050908:	e128      	b.n	10050b5c <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1005090a:	239c      	movs	r3, #156	@ 0x9c
1005090c:	18fb      	adds	r3, r7, r3
1005090e:	681b      	ldr	r3, [r3, #0]
10050910:	4a8f      	ldr	r2, [pc, #572]	@ (10050b50 <HAL_UART_IRQHandler+0x2cc>)
10050912:	4013      	ands	r3, r2
10050914:	d106      	bne.n	10050924 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
10050916:	23a0      	movs	r3, #160	@ 0xa0
10050918:	18fb      	adds	r3, r7, r3
1005091a:	681b      	ldr	r3, [r3, #0]
1005091c:	4a8d      	ldr	r2, [pc, #564]	@ (10050b54 <HAL_UART_IRQHandler+0x2d0>)
1005091e:	4013      	ands	r3, r2
10050920:	d100      	bne.n	10050924 <HAL_UART_IRQHandler+0xa0>
10050922:	e11b      	b.n	10050b5c <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
10050924:	23a4      	movs	r3, #164	@ 0xa4
10050926:	18fb      	adds	r3, r7, r3
10050928:	681b      	ldr	r3, [r3, #0]
1005092a:	2201      	movs	r2, #1
1005092c:	4013      	ands	r3, r2
1005092e:	d012      	beq.n	10050956 <HAL_UART_IRQHandler+0xd2>
10050930:	23a0      	movs	r3, #160	@ 0xa0
10050932:	18fb      	adds	r3, r7, r3
10050934:	681a      	ldr	r2, [r3, #0]
10050936:	2380      	movs	r3, #128	@ 0x80
10050938:	005b      	lsls	r3, r3, #1
1005093a:	4013      	ands	r3, r2
1005093c:	d00b      	beq.n	10050956 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
1005093e:	687b      	ldr	r3, [r7, #4]
10050940:	681b      	ldr	r3, [r3, #0]
10050942:	2201      	movs	r2, #1
10050944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
10050946:	687b      	ldr	r3, [r7, #4]
10050948:	2290      	movs	r2, #144	@ 0x90
1005094a:	589b      	ldr	r3, [r3, r2]
1005094c:	2201      	movs	r2, #1
1005094e:	431a      	orrs	r2, r3
10050950:	687b      	ldr	r3, [r7, #4]
10050952:	2190      	movs	r1, #144	@ 0x90
10050954:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
10050956:	23a4      	movs	r3, #164	@ 0xa4
10050958:	18fb      	adds	r3, r7, r3
1005095a:	681b      	ldr	r3, [r3, #0]
1005095c:	2202      	movs	r2, #2
1005095e:	4013      	ands	r3, r2
10050960:	d011      	beq.n	10050986 <HAL_UART_IRQHandler+0x102>
10050962:	239c      	movs	r3, #156	@ 0x9c
10050964:	18fb      	adds	r3, r7, r3
10050966:	681b      	ldr	r3, [r3, #0]
10050968:	2201      	movs	r2, #1
1005096a:	4013      	ands	r3, r2
1005096c:	d00b      	beq.n	10050986 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
1005096e:	687b      	ldr	r3, [r7, #4]
10050970:	681b      	ldr	r3, [r3, #0]
10050972:	2202      	movs	r2, #2
10050974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
10050976:	687b      	ldr	r3, [r7, #4]
10050978:	2290      	movs	r2, #144	@ 0x90
1005097a:	589b      	ldr	r3, [r3, r2]
1005097c:	2204      	movs	r2, #4
1005097e:	431a      	orrs	r2, r3
10050980:	687b      	ldr	r3, [r7, #4]
10050982:	2190      	movs	r1, #144	@ 0x90
10050984:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
10050986:	23a4      	movs	r3, #164	@ 0xa4
10050988:	18fb      	adds	r3, r7, r3
1005098a:	681b      	ldr	r3, [r3, #0]
1005098c:	2204      	movs	r2, #4
1005098e:	4013      	ands	r3, r2
10050990:	d011      	beq.n	100509b6 <HAL_UART_IRQHandler+0x132>
10050992:	239c      	movs	r3, #156	@ 0x9c
10050994:	18fb      	adds	r3, r7, r3
10050996:	681b      	ldr	r3, [r3, #0]
10050998:	2201      	movs	r2, #1
1005099a:	4013      	ands	r3, r2
1005099c:	d00b      	beq.n	100509b6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
1005099e:	687b      	ldr	r3, [r7, #4]
100509a0:	681b      	ldr	r3, [r3, #0]
100509a2:	2204      	movs	r2, #4
100509a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
100509a6:	687b      	ldr	r3, [r7, #4]
100509a8:	2290      	movs	r2, #144	@ 0x90
100509aa:	589b      	ldr	r3, [r3, r2]
100509ac:	2202      	movs	r2, #2
100509ae:	431a      	orrs	r2, r3
100509b0:	687b      	ldr	r3, [r7, #4]
100509b2:	2190      	movs	r1, #144	@ 0x90
100509b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
100509b6:	23a4      	movs	r3, #164	@ 0xa4
100509b8:	18fb      	adds	r3, r7, r3
100509ba:	681b      	ldr	r3, [r3, #0]
100509bc:	2208      	movs	r2, #8
100509be:	4013      	ands	r3, r2
100509c0:	d017      	beq.n	100509f2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
100509c2:	23a0      	movs	r3, #160	@ 0xa0
100509c4:	18fb      	adds	r3, r7, r3
100509c6:	681b      	ldr	r3, [r3, #0]
100509c8:	2220      	movs	r2, #32
100509ca:	4013      	ands	r3, r2
100509cc:	d105      	bne.n	100509da <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
100509ce:	239c      	movs	r3, #156	@ 0x9c
100509d0:	18fb      	adds	r3, r7, r3
100509d2:	681b      	ldr	r3, [r3, #0]
100509d4:	4a5e      	ldr	r2, [pc, #376]	@ (10050b50 <HAL_UART_IRQHandler+0x2cc>)
100509d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
100509d8:	d00b      	beq.n	100509f2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
100509da:	687b      	ldr	r3, [r7, #4]
100509dc:	681b      	ldr	r3, [r3, #0]
100509de:	2208      	movs	r2, #8
100509e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
100509e2:	687b      	ldr	r3, [r7, #4]
100509e4:	2290      	movs	r2, #144	@ 0x90
100509e6:	589b      	ldr	r3, [r3, r2]
100509e8:	2208      	movs	r2, #8
100509ea:	431a      	orrs	r2, r3
100509ec:	687b      	ldr	r3, [r7, #4]
100509ee:	2190      	movs	r1, #144	@ 0x90
100509f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
100509f2:	23a4      	movs	r3, #164	@ 0xa4
100509f4:	18fb      	adds	r3, r7, r3
100509f6:	681a      	ldr	r2, [r3, #0]
100509f8:	2380      	movs	r3, #128	@ 0x80
100509fa:	011b      	lsls	r3, r3, #4
100509fc:	4013      	ands	r3, r2
100509fe:	d013      	beq.n	10050a28 <HAL_UART_IRQHandler+0x1a4>
10050a00:	23a0      	movs	r3, #160	@ 0xa0
10050a02:	18fb      	adds	r3, r7, r3
10050a04:	681a      	ldr	r2, [r3, #0]
10050a06:	2380      	movs	r3, #128	@ 0x80
10050a08:	04db      	lsls	r3, r3, #19
10050a0a:	4013      	ands	r3, r2
10050a0c:	d00c      	beq.n	10050a28 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10050a0e:	687b      	ldr	r3, [r7, #4]
10050a10:	681b      	ldr	r3, [r3, #0]
10050a12:	2280      	movs	r2, #128	@ 0x80
10050a14:	0112      	lsls	r2, r2, #4
10050a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
10050a18:	687b      	ldr	r3, [r7, #4]
10050a1a:	2290      	movs	r2, #144	@ 0x90
10050a1c:	589b      	ldr	r3, [r3, r2]
10050a1e:	2220      	movs	r2, #32
10050a20:	431a      	orrs	r2, r3
10050a22:	687b      	ldr	r3, [r7, #4]
10050a24:	2190      	movs	r1, #144	@ 0x90
10050a26:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
10050a28:	687b      	ldr	r3, [r7, #4]
10050a2a:	2290      	movs	r2, #144	@ 0x90
10050a2c:	589b      	ldr	r3, [r3, r2]
10050a2e:	2b00      	cmp	r3, #0
10050a30:	d100      	bne.n	10050a34 <HAL_UART_IRQHandler+0x1b0>
10050a32:	e26b      	b.n	10050f0c <HAL_UART_IRQHandler+0x688>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
10050a34:	23a4      	movs	r3, #164	@ 0xa4
10050a36:	18fb      	adds	r3, r7, r3
10050a38:	681b      	ldr	r3, [r3, #0]
10050a3a:	2220      	movs	r2, #32
10050a3c:	4013      	ands	r3, r2
10050a3e:	d015      	beq.n	10050a6c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
10050a40:	23a0      	movs	r3, #160	@ 0xa0
10050a42:	18fb      	adds	r3, r7, r3
10050a44:	681b      	ldr	r3, [r3, #0]
10050a46:	2220      	movs	r2, #32
10050a48:	4013      	ands	r3, r2
10050a4a:	d106      	bne.n	10050a5a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
10050a4c:	239c      	movs	r3, #156	@ 0x9c
10050a4e:	18fb      	adds	r3, r7, r3
10050a50:	681a      	ldr	r2, [r3, #0]
10050a52:	2380      	movs	r3, #128	@ 0x80
10050a54:	055b      	lsls	r3, r3, #21
10050a56:	4013      	ands	r3, r2
10050a58:	d008      	beq.n	10050a6c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
10050a5a:	687b      	ldr	r3, [r7, #4]
10050a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10050a5e:	2b00      	cmp	r3, #0
10050a60:	d004      	beq.n	10050a6c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
10050a62:	687b      	ldr	r3, [r7, #4]
10050a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10050a66:	687a      	ldr	r2, [r7, #4]
10050a68:	0010      	movs	r0, r2
10050a6a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
10050a6c:	687b      	ldr	r3, [r7, #4]
10050a6e:	2290      	movs	r2, #144	@ 0x90
10050a70:	589b      	ldr	r3, [r3, r2]
10050a72:	2194      	movs	r1, #148	@ 0x94
10050a74:	187a      	adds	r2, r7, r1
10050a76:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
10050a78:	687b      	ldr	r3, [r7, #4]
10050a7a:	681b      	ldr	r3, [r3, #0]
10050a7c:	689b      	ldr	r3, [r3, #8]
10050a7e:	2240      	movs	r2, #64	@ 0x40
10050a80:	4013      	ands	r3, r2
10050a82:	2b40      	cmp	r3, #64	@ 0x40
10050a84:	d004      	beq.n	10050a90 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
10050a86:	187b      	adds	r3, r7, r1
10050a88:	681b      	ldr	r3, [r3, #0]
10050a8a:	2228      	movs	r2, #40	@ 0x28
10050a8c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
10050a8e:	d050      	beq.n	10050b32 <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
10050a90:	687b      	ldr	r3, [r7, #4]
10050a92:	0018      	movs	r0, r3
10050a94:	f000 fe1c 	bl	100516d0 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10050a98:	687b      	ldr	r3, [r7, #4]
10050a9a:	681b      	ldr	r3, [r3, #0]
10050a9c:	689b      	ldr	r3, [r3, #8]
10050a9e:	2240      	movs	r2, #64	@ 0x40
10050aa0:	4013      	ands	r3, r2
10050aa2:	2b40      	cmp	r3, #64	@ 0x40
10050aa4:	d13e      	bne.n	10050b24 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10050aa6:	f3ef 8310 	mrs	r3, PRIMASK
10050aaa:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
10050aac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
10050aae:	2090      	movs	r0, #144	@ 0x90
10050ab0:	183a      	adds	r2, r7, r0
10050ab2:	6013      	str	r3, [r2, #0]
10050ab4:	2301      	movs	r3, #1
10050ab6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050ab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10050aba:	f383 8810 	msr	PRIMASK, r3
}
10050abe:	46c0      	nop			@ (mov r8, r8)
10050ac0:	687b      	ldr	r3, [r7, #4]
10050ac2:	681b      	ldr	r3, [r3, #0]
10050ac4:	689a      	ldr	r2, [r3, #8]
10050ac6:	687b      	ldr	r3, [r7, #4]
10050ac8:	681b      	ldr	r3, [r3, #0]
10050aca:	2140      	movs	r1, #64	@ 0x40
10050acc:	438a      	bics	r2, r1
10050ace:	609a      	str	r2, [r3, #8]
10050ad0:	183b      	adds	r3, r7, r0
10050ad2:	681b      	ldr	r3, [r3, #0]
10050ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10050ad8:	f383 8810 	msr	PRIMASK, r3
}
10050adc:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
10050ade:	687b      	ldr	r3, [r7, #4]
10050ae0:	2280      	movs	r2, #128	@ 0x80
10050ae2:	589b      	ldr	r3, [r3, r2]
10050ae4:	2b00      	cmp	r3, #0
10050ae6:	d016      	beq.n	10050b16 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
10050ae8:	687b      	ldr	r3, [r7, #4]
10050aea:	2280      	movs	r2, #128	@ 0x80
10050aec:	589b      	ldr	r3, [r3, r2]
10050aee:	4a1a      	ldr	r2, [pc, #104]	@ (10050b58 <HAL_UART_IRQHandler+0x2d4>)
10050af0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
10050af2:	687b      	ldr	r3, [r7, #4]
10050af4:	2280      	movs	r2, #128	@ 0x80
10050af6:	589b      	ldr	r3, [r3, r2]
10050af8:	0018      	movs	r0, r3
10050afa:	f7fb fbaa 	bl	1004c252 <HAL_DMA_Abort_IT>
10050afe:	1e03      	subs	r3, r0, #0
10050b00:	d022      	beq.n	10050b48 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
10050b02:	687b      	ldr	r3, [r7, #4]
10050b04:	2280      	movs	r2, #128	@ 0x80
10050b06:	589b      	ldr	r3, [r3, r2]
10050b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10050b0a:	687a      	ldr	r2, [r7, #4]
10050b0c:	2180      	movs	r1, #128	@ 0x80
10050b0e:	5852      	ldr	r2, [r2, r1]
10050b10:	0010      	movs	r0, r2
10050b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10050b14:	e018      	b.n	10050b48 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
10050b16:	687b      	ldr	r3, [r7, #4]
10050b18:	22a4      	movs	r2, #164	@ 0xa4
10050b1a:	589b      	ldr	r3, [r3, r2]
10050b1c:	687a      	ldr	r2, [r7, #4]
10050b1e:	0010      	movs	r0, r2
10050b20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10050b22:	e011      	b.n	10050b48 <HAL_UART_IRQHandler+0x2c4>
#endif /* HAL_DMA_MODULE_ENABLED */
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
10050b24:	687b      	ldr	r3, [r7, #4]
10050b26:	22a4      	movs	r2, #164	@ 0xa4
10050b28:	589b      	ldr	r3, [r3, r2]
10050b2a:	687a      	ldr	r2, [r7, #4]
10050b2c:	0010      	movs	r0, r2
10050b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10050b30:	e00a      	b.n	10050b48 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
10050b32:	687b      	ldr	r3, [r7, #4]
10050b34:	22a4      	movs	r2, #164	@ 0xa4
10050b36:	589b      	ldr	r3, [r3, r2]
10050b38:	687a      	ldr	r2, [r7, #4]
10050b3a:	0010      	movs	r0, r2
10050b3c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
10050b3e:	687b      	ldr	r3, [r7, #4]
10050b40:	2290      	movs	r2, #144	@ 0x90
10050b42:	2100      	movs	r1, #0
10050b44:	5099      	str	r1, [r3, r2]
      }
    }
    return;
10050b46:	e1e1      	b.n	10050f0c <HAL_UART_IRQHandler+0x688>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10050b48:	46c0      	nop			@ (mov r8, r8)
    return;
10050b4a:	e1df      	b.n	10050f0c <HAL_UART_IRQHandler+0x688>
10050b4c:	0000080f 	.word	0x0000080f
10050b50:	10000001 	.word	0x10000001
10050b54:	04000120 	.word	0x04000120
10050b58:	1005179d 	.word	0x1005179d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10050b5c:	687b      	ldr	r3, [r7, #4]
10050b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
10050b60:	2b01      	cmp	r3, #1
10050b62:	d000      	beq.n	10050b66 <HAL_UART_IRQHandler+0x2e2>
10050b64:	e160      	b.n	10050e28 <HAL_UART_IRQHandler+0x5a4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
10050b66:	23a4      	movs	r3, #164	@ 0xa4
10050b68:	18fb      	adds	r3, r7, r3
10050b6a:	681b      	ldr	r3, [r3, #0]
10050b6c:	2210      	movs	r2, #16
10050b6e:	4013      	ands	r3, r2
10050b70:	d100      	bne.n	10050b74 <HAL_UART_IRQHandler+0x2f0>
10050b72:	e159      	b.n	10050e28 <HAL_UART_IRQHandler+0x5a4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
10050b74:	23a0      	movs	r3, #160	@ 0xa0
10050b76:	18fb      	adds	r3, r7, r3
10050b78:	681b      	ldr	r3, [r3, #0]
10050b7a:	2210      	movs	r2, #16
10050b7c:	4013      	ands	r3, r2
10050b7e:	d100      	bne.n	10050b82 <HAL_UART_IRQHandler+0x2fe>
10050b80:	e152      	b.n	10050e28 <HAL_UART_IRQHandler+0x5a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
10050b82:	687b      	ldr	r3, [r7, #4]
10050b84:	681b      	ldr	r3, [r3, #0]
10050b86:	2210      	movs	r2, #16
10050b88:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
10050b8a:	687b      	ldr	r3, [r7, #4]
10050b8c:	681b      	ldr	r3, [r3, #0]
10050b8e:	689b      	ldr	r3, [r3, #8]
10050b90:	2240      	movs	r2, #64	@ 0x40
10050b92:	4013      	ands	r3, r2
10050b94:	2b40      	cmp	r3, #64	@ 0x40
10050b96:	d000      	beq.n	10050b9a <HAL_UART_IRQHandler+0x316>
10050b98:	e0c5      	b.n	10050d26 <HAL_UART_IRQHandler+0x4a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
10050b9a:	687b      	ldr	r3, [r7, #4]
10050b9c:	2280      	movs	r2, #128	@ 0x80
10050b9e:	589b      	ldr	r3, [r3, r2]
10050ba0:	681b      	ldr	r3, [r3, #0]
10050ba2:	685a      	ldr	r2, [r3, #4]
10050ba4:	217e      	movs	r1, #126	@ 0x7e
10050ba6:	187b      	adds	r3, r7, r1
10050ba8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
10050baa:	187b      	adds	r3, r7, r1
10050bac:	881b      	ldrh	r3, [r3, #0]
10050bae:	2b00      	cmp	r3, #0
10050bb0:	d100      	bne.n	10050bb4 <HAL_UART_IRQHandler+0x330>
10050bb2:	e098      	b.n	10050ce6 <HAL_UART_IRQHandler+0x462>
          && (nb_remaining_rx_data < huart->RxXferSize))
10050bb4:	687b      	ldr	r3, [r7, #4]
10050bb6:	225c      	movs	r2, #92	@ 0x5c
10050bb8:	5a9b      	ldrh	r3, [r3, r2]
10050bba:	187a      	adds	r2, r7, r1
10050bbc:	8812      	ldrh	r2, [r2, #0]
10050bbe:	429a      	cmp	r2, r3
10050bc0:	d300      	bcc.n	10050bc4 <HAL_UART_IRQHandler+0x340>
10050bc2:	e090      	b.n	10050ce6 <HAL_UART_IRQHandler+0x462>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
10050bc4:	687b      	ldr	r3, [r7, #4]
10050bc6:	187a      	adds	r2, r7, r1
10050bc8:	215e      	movs	r1, #94	@ 0x5e
10050bca:	8812      	ldrh	r2, [r2, #0]
10050bcc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
10050bce:	687b      	ldr	r3, [r7, #4]
10050bd0:	2280      	movs	r2, #128	@ 0x80
10050bd2:	589b      	ldr	r3, [r3, r2]
10050bd4:	681b      	ldr	r3, [r3, #0]
10050bd6:	681b      	ldr	r3, [r3, #0]
10050bd8:	2220      	movs	r2, #32
10050bda:	4013      	ands	r3, r2
10050bdc:	d170      	bne.n	10050cc0 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10050bde:	f3ef 8310 	mrs	r3, PRIMASK
10050be2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
10050be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
10050be6:	67bb      	str	r3, [r7, #120]	@ 0x78
10050be8:	2301      	movs	r3, #1
10050bea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10050bee:	f383 8810 	msr	PRIMASK, r3
}
10050bf2:	46c0      	nop			@ (mov r8, r8)
10050bf4:	687b      	ldr	r3, [r7, #4]
10050bf6:	681b      	ldr	r3, [r3, #0]
10050bf8:	681a      	ldr	r2, [r3, #0]
10050bfa:	687b      	ldr	r3, [r7, #4]
10050bfc:	681b      	ldr	r3, [r3, #0]
10050bfe:	49c8      	ldr	r1, [pc, #800]	@ (10050f20 <HAL_UART_IRQHandler+0x69c>)
10050c00:	400a      	ands	r2, r1
10050c02:	601a      	str	r2, [r3, #0]
10050c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10050c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050c0a:	f383 8810 	msr	PRIMASK, r3
}
10050c0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10050c10:	f3ef 8310 	mrs	r3, PRIMASK
10050c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
10050c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10050c18:	677b      	str	r3, [r7, #116]	@ 0x74
10050c1a:	2301      	movs	r3, #1
10050c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10050c20:	f383 8810 	msr	PRIMASK, r3
}
10050c24:	46c0      	nop			@ (mov r8, r8)
10050c26:	687b      	ldr	r3, [r7, #4]
10050c28:	681b      	ldr	r3, [r3, #0]
10050c2a:	689a      	ldr	r2, [r3, #8]
10050c2c:	687b      	ldr	r3, [r7, #4]
10050c2e:	681b      	ldr	r3, [r3, #0]
10050c30:	2101      	movs	r1, #1
10050c32:	438a      	bics	r2, r1
10050c34:	609a      	str	r2, [r3, #8]
10050c36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10050c38:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10050c3c:	f383 8810 	msr	PRIMASK, r3
}
10050c40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10050c42:	f3ef 8310 	mrs	r3, PRIMASK
10050c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
10050c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
10050c4a:	673b      	str	r3, [r7, #112]	@ 0x70
10050c4c:	2301      	movs	r3, #1
10050c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10050c52:	f383 8810 	msr	PRIMASK, r3
}
10050c56:	46c0      	nop			@ (mov r8, r8)
10050c58:	687b      	ldr	r3, [r7, #4]
10050c5a:	681b      	ldr	r3, [r3, #0]
10050c5c:	689a      	ldr	r2, [r3, #8]
10050c5e:	687b      	ldr	r3, [r7, #4]
10050c60:	681b      	ldr	r3, [r3, #0]
10050c62:	2140      	movs	r1, #64	@ 0x40
10050c64:	438a      	bics	r2, r1
10050c66:	609a      	str	r2, [r3, #8]
10050c68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10050c6a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10050c6e:	f383 8810 	msr	PRIMASK, r3
}
10050c72:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
10050c74:	687b      	ldr	r3, [r7, #4]
10050c76:	228c      	movs	r2, #140	@ 0x8c
10050c78:	2120      	movs	r1, #32
10050c7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10050c7c:	687b      	ldr	r3, [r7, #4]
10050c7e:	2200      	movs	r2, #0
10050c80:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10050c82:	f3ef 8310 	mrs	r3, PRIMASK
10050c86:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
10050c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10050c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
10050c8c:	2301      	movs	r3, #1
10050c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
10050c92:	f383 8810 	msr	PRIMASK, r3
}
10050c96:	46c0      	nop			@ (mov r8, r8)
10050c98:	687b      	ldr	r3, [r7, #4]
10050c9a:	681b      	ldr	r3, [r3, #0]
10050c9c:	681a      	ldr	r2, [r3, #0]
10050c9e:	687b      	ldr	r3, [r7, #4]
10050ca0:	681b      	ldr	r3, [r3, #0]
10050ca2:	2110      	movs	r1, #16
10050ca4:	438a      	bics	r2, r1
10050ca6:	601a      	str	r2, [r3, #0]
10050ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10050caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10050cae:	f383 8810 	msr	PRIMASK, r3
}
10050cb2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
10050cb4:	687b      	ldr	r3, [r7, #4]
10050cb6:	2280      	movs	r2, #128	@ 0x80
10050cb8:	589b      	ldr	r3, [r3, r2]
10050cba:	0018      	movs	r0, r3
10050cbc:	f7fb fa8a 	bl	1004c1d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
10050cc0:	687b      	ldr	r3, [r7, #4]
10050cc2:	2202      	movs	r2, #2
10050cc4:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
10050cc6:	687b      	ldr	r3, [r7, #4]
10050cc8:	22c0      	movs	r2, #192	@ 0xc0
10050cca:	589b      	ldr	r3, [r3, r2]
10050ccc:	687a      	ldr	r2, [r7, #4]
10050cce:	215c      	movs	r1, #92	@ 0x5c
10050cd0:	5a51      	ldrh	r1, [r2, r1]
10050cd2:	687a      	ldr	r2, [r7, #4]
10050cd4:	205e      	movs	r0, #94	@ 0x5e
10050cd6:	5a12      	ldrh	r2, [r2, r0]
10050cd8:	b292      	uxth	r2, r2
10050cda:	1a8a      	subs	r2, r1, r2
10050cdc:	b291      	uxth	r1, r2
10050cde:	687a      	ldr	r2, [r7, #4]
10050ce0:	0010      	movs	r0, r2
10050ce2:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
10050ce4:	e114      	b.n	10050f10 <HAL_UART_IRQHandler+0x68c>
        if (nb_remaining_rx_data == huart->RxXferSize)
10050ce6:	687b      	ldr	r3, [r7, #4]
10050ce8:	225c      	movs	r2, #92	@ 0x5c
10050cea:	5a9b      	ldrh	r3, [r3, r2]
10050cec:	227e      	movs	r2, #126	@ 0x7e
10050cee:	18ba      	adds	r2, r7, r2
10050cf0:	8812      	ldrh	r2, [r2, #0]
10050cf2:	429a      	cmp	r2, r3
10050cf4:	d000      	beq.n	10050cf8 <HAL_UART_IRQHandler+0x474>
10050cf6:	e10b      	b.n	10050f10 <HAL_UART_IRQHandler+0x68c>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
10050cf8:	687b      	ldr	r3, [r7, #4]
10050cfa:	2280      	movs	r2, #128	@ 0x80
10050cfc:	589b      	ldr	r3, [r3, r2]
10050cfe:	681b      	ldr	r3, [r3, #0]
10050d00:	681b      	ldr	r3, [r3, #0]
10050d02:	2220      	movs	r2, #32
10050d04:	4013      	ands	r3, r2
10050d06:	2b20      	cmp	r3, #32
10050d08:	d000      	beq.n	10050d0c <HAL_UART_IRQHandler+0x488>
10050d0a:	e101      	b.n	10050f10 <HAL_UART_IRQHandler+0x68c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
10050d0c:	687b      	ldr	r3, [r7, #4]
10050d0e:	2202      	movs	r2, #2
10050d10:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
10050d12:	687b      	ldr	r3, [r7, #4]
10050d14:	22c0      	movs	r2, #192	@ 0xc0
10050d16:	589b      	ldr	r3, [r3, r2]
10050d18:	687a      	ldr	r2, [r7, #4]
10050d1a:	215c      	movs	r1, #92	@ 0x5c
10050d1c:	5a51      	ldrh	r1, [r2, r1]
10050d1e:	687a      	ldr	r2, [r7, #4]
10050d20:	0010      	movs	r0, r2
10050d22:	4798      	blx	r3
      return;
10050d24:	e0f4      	b.n	10050f10 <HAL_UART_IRQHandler+0x68c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
10050d26:	687b      	ldr	r3, [r7, #4]
10050d28:	225c      	movs	r2, #92	@ 0x5c
10050d2a:	5a99      	ldrh	r1, [r3, r2]
10050d2c:	687b      	ldr	r3, [r7, #4]
10050d2e:	225e      	movs	r2, #94	@ 0x5e
10050d30:	5a9b      	ldrh	r3, [r3, r2]
10050d32:	b29a      	uxth	r2, r3
10050d34:	208e      	movs	r0, #142	@ 0x8e
10050d36:	183b      	adds	r3, r7, r0
10050d38:	1a8a      	subs	r2, r1, r2
10050d3a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
10050d3c:	687b      	ldr	r3, [r7, #4]
10050d3e:	225e      	movs	r2, #94	@ 0x5e
10050d40:	5a9b      	ldrh	r3, [r3, r2]
10050d42:	b29b      	uxth	r3, r3
10050d44:	2b00      	cmp	r3, #0
10050d46:	d100      	bne.n	10050d4a <HAL_UART_IRQHandler+0x4c6>
10050d48:	e0e4      	b.n	10050f14 <HAL_UART_IRQHandler+0x690>
          && (nb_rx_data > 0U))
10050d4a:	183b      	adds	r3, r7, r0
10050d4c:	881b      	ldrh	r3, [r3, #0]
10050d4e:	2b00      	cmp	r3, #0
10050d50:	d100      	bne.n	10050d54 <HAL_UART_IRQHandler+0x4d0>
10050d52:	e0df      	b.n	10050f14 <HAL_UART_IRQHandler+0x690>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10050d54:	f3ef 8310 	mrs	r3, PRIMASK
10050d58:	60fb      	str	r3, [r7, #12]
  return(result);
10050d5a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10050d5c:	2488      	movs	r4, #136	@ 0x88
10050d5e:	193a      	adds	r2, r7, r4
10050d60:	6013      	str	r3, [r2, #0]
10050d62:	2301      	movs	r3, #1
10050d64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050d66:	693b      	ldr	r3, [r7, #16]
10050d68:	f383 8810 	msr	PRIMASK, r3
}
10050d6c:	46c0      	nop			@ (mov r8, r8)
10050d6e:	687b      	ldr	r3, [r7, #4]
10050d70:	681b      	ldr	r3, [r3, #0]
10050d72:	681a      	ldr	r2, [r3, #0]
10050d74:	687b      	ldr	r3, [r7, #4]
10050d76:	681b      	ldr	r3, [r3, #0]
10050d78:	496a      	ldr	r1, [pc, #424]	@ (10050f24 <HAL_UART_IRQHandler+0x6a0>)
10050d7a:	400a      	ands	r2, r1
10050d7c:	601a      	str	r2, [r3, #0]
10050d7e:	193b      	adds	r3, r7, r4
10050d80:	681b      	ldr	r3, [r3, #0]
10050d82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050d84:	697b      	ldr	r3, [r7, #20]
10050d86:	f383 8810 	msr	PRIMASK, r3
}
10050d8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10050d8c:	f3ef 8310 	mrs	r3, PRIMASK
10050d90:	61bb      	str	r3, [r7, #24]
  return(result);
10050d92:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
10050d94:	2484      	movs	r4, #132	@ 0x84
10050d96:	193a      	adds	r2, r7, r4
10050d98:	6013      	str	r3, [r2, #0]
10050d9a:	2301      	movs	r3, #1
10050d9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050d9e:	69fb      	ldr	r3, [r7, #28]
10050da0:	f383 8810 	msr	PRIMASK, r3
}
10050da4:	46c0      	nop			@ (mov r8, r8)
10050da6:	687b      	ldr	r3, [r7, #4]
10050da8:	681b      	ldr	r3, [r3, #0]
10050daa:	689a      	ldr	r2, [r3, #8]
10050dac:	687b      	ldr	r3, [r7, #4]
10050dae:	681b      	ldr	r3, [r3, #0]
10050db0:	495d      	ldr	r1, [pc, #372]	@ (10050f28 <HAL_UART_IRQHandler+0x6a4>)
10050db2:	400a      	ands	r2, r1
10050db4:	609a      	str	r2, [r3, #8]
10050db6:	193b      	adds	r3, r7, r4
10050db8:	681b      	ldr	r3, [r3, #0]
10050dba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050dbc:	6a3b      	ldr	r3, [r7, #32]
10050dbe:	f383 8810 	msr	PRIMASK, r3
}
10050dc2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
10050dc4:	687b      	ldr	r3, [r7, #4]
10050dc6:	228c      	movs	r2, #140	@ 0x8c
10050dc8:	2120      	movs	r1, #32
10050dca:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10050dcc:	687b      	ldr	r3, [r7, #4]
10050dce:	2200      	movs	r2, #0
10050dd0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
10050dd2:	687b      	ldr	r3, [r7, #4]
10050dd4:	2200      	movs	r2, #0
10050dd6:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10050dd8:	f3ef 8310 	mrs	r3, PRIMASK
10050ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10050dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10050de0:	2480      	movs	r4, #128	@ 0x80
10050de2:	193a      	adds	r2, r7, r4
10050de4:	6013      	str	r3, [r2, #0]
10050de6:	2301      	movs	r3, #1
10050de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10050dec:	f383 8810 	msr	PRIMASK, r3
}
10050df0:	46c0      	nop			@ (mov r8, r8)
10050df2:	687b      	ldr	r3, [r7, #4]
10050df4:	681b      	ldr	r3, [r3, #0]
10050df6:	681a      	ldr	r2, [r3, #0]
10050df8:	687b      	ldr	r3, [r7, #4]
10050dfa:	681b      	ldr	r3, [r3, #0]
10050dfc:	2110      	movs	r1, #16
10050dfe:	438a      	bics	r2, r1
10050e00:	601a      	str	r2, [r3, #0]
10050e02:	193b      	adds	r3, r7, r4
10050e04:	681b      	ldr	r3, [r3, #0]
10050e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10050e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10050e0a:	f383 8810 	msr	PRIMASK, r3
}
10050e0e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
10050e10:	687b      	ldr	r3, [r7, #4]
10050e12:	2202      	movs	r2, #2
10050e14:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
10050e16:	687b      	ldr	r3, [r7, #4]
10050e18:	22c0      	movs	r2, #192	@ 0xc0
10050e1a:	589b      	ldr	r3, [r3, r2]
10050e1c:	183a      	adds	r2, r7, r0
10050e1e:	8811      	ldrh	r1, [r2, #0]
10050e20:	687a      	ldr	r2, [r7, #4]
10050e22:	0010      	movs	r0, r2
10050e24:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
10050e26:	e075      	b.n	10050f14 <HAL_UART_IRQHandler+0x690>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
10050e28:	23a4      	movs	r3, #164	@ 0xa4
10050e2a:	18fb      	adds	r3, r7, r3
10050e2c:	681a      	ldr	r2, [r3, #0]
10050e2e:	2380      	movs	r3, #128	@ 0x80
10050e30:	035b      	lsls	r3, r3, #13
10050e32:	4013      	ands	r3, r2
10050e34:	d012      	beq.n	10050e5c <HAL_UART_IRQHandler+0x5d8>
10050e36:	239c      	movs	r3, #156	@ 0x9c
10050e38:	18fb      	adds	r3, r7, r3
10050e3a:	681a      	ldr	r2, [r3, #0]
10050e3c:	2380      	movs	r3, #128	@ 0x80
10050e3e:	03db      	lsls	r3, r3, #15
10050e40:	4013      	ands	r3, r2
10050e42:	d00b      	beq.n	10050e5c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
10050e44:	687b      	ldr	r3, [r7, #4]
10050e46:	681b      	ldr	r3, [r3, #0]
10050e48:	2280      	movs	r2, #128	@ 0x80
10050e4a:	0352      	lsls	r2, r2, #13
10050e4c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
10050e4e:	687b      	ldr	r3, [r7, #4]
10050e50:	22b4      	movs	r2, #180	@ 0xb4
10050e52:	589b      	ldr	r3, [r3, r2]
10050e54:	687a      	ldr	r2, [r7, #4]
10050e56:	0010      	movs	r0, r2
10050e58:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
10050e5a:	e05e      	b.n	10050f1a <HAL_UART_IRQHandler+0x696>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
10050e5c:	23a4      	movs	r3, #164	@ 0xa4
10050e5e:	18fb      	adds	r3, r7, r3
10050e60:	681b      	ldr	r3, [r3, #0]
10050e62:	2280      	movs	r2, #128	@ 0x80
10050e64:	4013      	ands	r3, r2
10050e66:	d016      	beq.n	10050e96 <HAL_UART_IRQHandler+0x612>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
10050e68:	23a0      	movs	r3, #160	@ 0xa0
10050e6a:	18fb      	adds	r3, r7, r3
10050e6c:	681b      	ldr	r3, [r3, #0]
10050e6e:	2280      	movs	r2, #128	@ 0x80
10050e70:	4013      	ands	r3, r2
10050e72:	d106      	bne.n	10050e82 <HAL_UART_IRQHandler+0x5fe>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
10050e74:	239c      	movs	r3, #156	@ 0x9c
10050e76:	18fb      	adds	r3, r7, r3
10050e78:	681a      	ldr	r2, [r3, #0]
10050e7a:	2380      	movs	r3, #128	@ 0x80
10050e7c:	041b      	lsls	r3, r3, #16
10050e7e:	4013      	ands	r3, r2
10050e80:	d009      	beq.n	10050e96 <HAL_UART_IRQHandler+0x612>
  {
    if (huart->TxISR != NULL)
10050e82:	687b      	ldr	r3, [r7, #4]
10050e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10050e86:	2b00      	cmp	r3, #0
10050e88:	d046      	beq.n	10050f18 <HAL_UART_IRQHandler+0x694>
    {
      huart->TxISR(huart);
10050e8a:	687b      	ldr	r3, [r7, #4]
10050e8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10050e8e:	687a      	ldr	r2, [r7, #4]
10050e90:	0010      	movs	r0, r2
10050e92:	4798      	blx	r3
    }
    return;
10050e94:	e040      	b.n	10050f18 <HAL_UART_IRQHandler+0x694>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
10050e96:	23a4      	movs	r3, #164	@ 0xa4
10050e98:	18fb      	adds	r3, r7, r3
10050e9a:	681b      	ldr	r3, [r3, #0]
10050e9c:	2240      	movs	r2, #64	@ 0x40
10050e9e:	4013      	ands	r3, r2
10050ea0:	d00a      	beq.n	10050eb8 <HAL_UART_IRQHandler+0x634>
10050ea2:	23a0      	movs	r3, #160	@ 0xa0
10050ea4:	18fb      	adds	r3, r7, r3
10050ea6:	681b      	ldr	r3, [r3, #0]
10050ea8:	2240      	movs	r2, #64	@ 0x40
10050eaa:	4013      	ands	r3, r2
10050eac:	d004      	beq.n	10050eb8 <HAL_UART_IRQHandler+0x634>
  {
    UART_EndTransmit_IT(huart);
10050eae:	687b      	ldr	r3, [r7, #4]
10050eb0:	0018      	movs	r0, r3
10050eb2:	f000 fc88 	bl	100517c6 <UART_EndTransmit_IT>
    return;
10050eb6:	e030      	b.n	10050f1a <HAL_UART_IRQHandler+0x696>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
10050eb8:	23a4      	movs	r3, #164	@ 0xa4
10050eba:	18fb      	adds	r3, r7, r3
10050ebc:	681a      	ldr	r2, [r3, #0]
10050ebe:	2380      	movs	r3, #128	@ 0x80
10050ec0:	041b      	lsls	r3, r3, #16
10050ec2:	4013      	ands	r3, r2
10050ec4:	d00d      	beq.n	10050ee2 <HAL_UART_IRQHandler+0x65e>
10050ec6:	23a0      	movs	r3, #160	@ 0xa0
10050ec8:	18fb      	adds	r3, r7, r3
10050eca:	681a      	ldr	r2, [r3, #0]
10050ecc:	2380      	movs	r3, #128	@ 0x80
10050ece:	05db      	lsls	r3, r3, #23
10050ed0:	4013      	ands	r3, r2
10050ed2:	d006      	beq.n	10050ee2 <HAL_UART_IRQHandler+0x65e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
10050ed4:	687b      	ldr	r3, [r7, #4]
10050ed6:	22bc      	movs	r2, #188	@ 0xbc
10050ed8:	589b      	ldr	r3, [r3, r2]
10050eda:	687a      	ldr	r2, [r7, #4]
10050edc:	0010      	movs	r0, r2
10050ede:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
10050ee0:	e01b      	b.n	10050f1a <HAL_UART_IRQHandler+0x696>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
10050ee2:	23a4      	movs	r3, #164	@ 0xa4
10050ee4:	18fb      	adds	r3, r7, r3
10050ee6:	681a      	ldr	r2, [r3, #0]
10050ee8:	2380      	movs	r3, #128	@ 0x80
10050eea:	045b      	lsls	r3, r3, #17
10050eec:	4013      	ands	r3, r2
10050eee:	d014      	beq.n	10050f1a <HAL_UART_IRQHandler+0x696>
10050ef0:	23a0      	movs	r3, #160	@ 0xa0
10050ef2:	18fb      	adds	r3, r7, r3
10050ef4:	681b      	ldr	r3, [r3, #0]
10050ef6:	2b00      	cmp	r3, #0
10050ef8:	da0f      	bge.n	10050f1a <HAL_UART_IRQHandler+0x696>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
10050efa:	687b      	ldr	r3, [r7, #4]
10050efc:	22b8      	movs	r2, #184	@ 0xb8
10050efe:	589b      	ldr	r3, [r3, r2]
10050f00:	687a      	ldr	r2, [r7, #4]
10050f02:	0010      	movs	r0, r2
10050f04:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
10050f06:	e008      	b.n	10050f1a <HAL_UART_IRQHandler+0x696>
      return;
10050f08:	46c0      	nop			@ (mov r8, r8)
10050f0a:	e006      	b.n	10050f1a <HAL_UART_IRQHandler+0x696>
    return;
10050f0c:	46c0      	nop			@ (mov r8, r8)
10050f0e:	e004      	b.n	10050f1a <HAL_UART_IRQHandler+0x696>
      return;
10050f10:	46c0      	nop			@ (mov r8, r8)
10050f12:	e002      	b.n	10050f1a <HAL_UART_IRQHandler+0x696>
      return;
10050f14:	46c0      	nop			@ (mov r8, r8)
10050f16:	e000      	b.n	10050f1a <HAL_UART_IRQHandler+0x696>
    return;
10050f18:	46c0      	nop			@ (mov r8, r8)
  }
}
10050f1a:	46bd      	mov	sp, r7
10050f1c:	b02a      	add	sp, #168	@ 0xa8
10050f1e:	bdb0      	pop	{r4, r5, r7, pc}
10050f20:	fffffeff 	.word	0xfffffeff
10050f24:	fffffedf 	.word	0xfffffedf
10050f28:	effffffe 	.word	0xeffffffe

10050f2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
10050f2c:	b580      	push	{r7, lr}
10050f2e:	b082      	sub	sp, #8
10050f30:	af00      	add	r7, sp, #0
10050f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
10050f34:	46c0      	nop			@ (mov r8, r8)
10050f36:	46bd      	mov	sp, r7
10050f38:	b002      	add	sp, #8
10050f3a:	bd80      	pop	{r7, pc}

10050f3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
10050f3c:	b580      	push	{r7, lr}
10050f3e:	b082      	sub	sp, #8
10050f40:	af00      	add	r7, sp, #0
10050f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
10050f44:	46c0      	nop			@ (mov r8, r8)
10050f46:	46bd      	mov	sp, r7
10050f48:	b002      	add	sp, #8
10050f4a:	bd80      	pop	{r7, pc}

10050f4c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
10050f4c:	b580      	push	{r7, lr}
10050f4e:	b082      	sub	sp, #8
10050f50:	af00      	add	r7, sp, #0
10050f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
10050f54:	46c0      	nop			@ (mov r8, r8)
10050f56:	46bd      	mov	sp, r7
10050f58:	b002      	add	sp, #8
10050f5a:	bd80      	pop	{r7, pc}

10050f5c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
10050f5c:	b580      	push	{r7, lr}
10050f5e:	b082      	sub	sp, #8
10050f60:	af00      	add	r7, sp, #0
10050f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
10050f64:	46c0      	nop			@ (mov r8, r8)
10050f66:	46bd      	mov	sp, r7
10050f68:	b002      	add	sp, #8
10050f6a:	bd80      	pop	{r7, pc}

10050f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
10050f6c:	b580      	push	{r7, lr}
10050f6e:	b082      	sub	sp, #8
10050f70:	af00      	add	r7, sp, #0
10050f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
10050f74:	46c0      	nop			@ (mov r8, r8)
10050f76:	46bd      	mov	sp, r7
10050f78:	b002      	add	sp, #8
10050f7a:	bd80      	pop	{r7, pc}

10050f7c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
10050f7c:	b580      	push	{r7, lr}
10050f7e:	b082      	sub	sp, #8
10050f80:	af00      	add	r7, sp, #0
10050f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
10050f84:	46c0      	nop			@ (mov r8, r8)
10050f86:	46bd      	mov	sp, r7
10050f88:	b002      	add	sp, #8
10050f8a:	bd80      	pop	{r7, pc}

10050f8c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
10050f8c:	b580      	push	{r7, lr}
10050f8e:	b082      	sub	sp, #8
10050f90:	af00      	add	r7, sp, #0
10050f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
10050f94:	46c0      	nop			@ (mov r8, r8)
10050f96:	46bd      	mov	sp, r7
10050f98:	b002      	add	sp, #8
10050f9a:	bd80      	pop	{r7, pc}

10050f9c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
10050f9c:	b580      	push	{r7, lr}
10050f9e:	b082      	sub	sp, #8
10050fa0:	af00      	add	r7, sp, #0
10050fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
10050fa4:	46c0      	nop			@ (mov r8, r8)
10050fa6:	46bd      	mov	sp, r7
10050fa8:	b002      	add	sp, #8
10050faa:	bd80      	pop	{r7, pc}

10050fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
10050fac:	b580      	push	{r7, lr}
10050fae:	b082      	sub	sp, #8
10050fb0:	af00      	add	r7, sp, #0
10050fb2:	6078      	str	r0, [r7, #4]
10050fb4:	000a      	movs	r2, r1
10050fb6:	1cbb      	adds	r3, r7, #2
10050fb8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
10050fba:	46c0      	nop			@ (mov r8, r8)
10050fbc:	46bd      	mov	sp, r7
10050fbe:	b002      	add	sp, #8
10050fc0:	bd80      	pop	{r7, pc}
	...

10050fc4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
10050fc4:	b580      	push	{r7, lr}
10050fc6:	b082      	sub	sp, #8
10050fc8:	af00      	add	r7, sp, #0
10050fca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
10050fcc:	687b      	ldr	r3, [r7, #4]
10050fce:	2194      	movs	r1, #148	@ 0x94
10050fd0:	4a18      	ldr	r2, [pc, #96]	@ (10051034 <UART_InitCallbacksToDefault+0x70>)
10050fd2:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
10050fd4:	687b      	ldr	r3, [r7, #4]
10050fd6:	2198      	movs	r1, #152	@ 0x98
10050fd8:	4a17      	ldr	r2, [pc, #92]	@ (10051038 <UART_InitCallbacksToDefault+0x74>)
10050fda:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
10050fdc:	687b      	ldr	r3, [r7, #4]
10050fde:	219c      	movs	r1, #156	@ 0x9c
10050fe0:	4a16      	ldr	r2, [pc, #88]	@ (1005103c <UART_InitCallbacksToDefault+0x78>)
10050fe2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
10050fe4:	687b      	ldr	r3, [r7, #4]
10050fe6:	21a0      	movs	r1, #160	@ 0xa0
10050fe8:	4a15      	ldr	r2, [pc, #84]	@ (10051040 <UART_InitCallbacksToDefault+0x7c>)
10050fea:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
10050fec:	687b      	ldr	r3, [r7, #4]
10050fee:	21a4      	movs	r1, #164	@ 0xa4
10050ff0:	4a14      	ldr	r2, [pc, #80]	@ (10051044 <UART_InitCallbacksToDefault+0x80>)
10050ff2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
10050ff4:	687b      	ldr	r3, [r7, #4]
10050ff6:	21a8      	movs	r1, #168	@ 0xa8
10050ff8:	4a13      	ldr	r2, [pc, #76]	@ (10051048 <UART_InitCallbacksToDefault+0x84>)
10050ffa:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
10050ffc:	687b      	ldr	r3, [r7, #4]
10050ffe:	21ac      	movs	r1, #172	@ 0xac
10051000:	4a12      	ldr	r2, [pc, #72]	@ (1005104c <UART_InitCallbacksToDefault+0x88>)
10051002:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
10051004:	687b      	ldr	r3, [r7, #4]
10051006:	21b0      	movs	r1, #176	@ 0xb0
10051008:	4a11      	ldr	r2, [pc, #68]	@ (10051050 <UART_InitCallbacksToDefault+0x8c>)
1005100a:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
1005100c:	687b      	ldr	r3, [r7, #4]
1005100e:	21b4      	movs	r1, #180	@ 0xb4
10051010:	4a10      	ldr	r2, [pc, #64]	@ (10051054 <UART_InitCallbacksToDefault+0x90>)
10051012:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
10051014:	687b      	ldr	r3, [r7, #4]
10051016:	21b8      	movs	r1, #184	@ 0xb8
10051018:	4a0f      	ldr	r2, [pc, #60]	@ (10051058 <UART_InitCallbacksToDefault+0x94>)
1005101a:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
1005101c:	687b      	ldr	r3, [r7, #4]
1005101e:	21bc      	movs	r1, #188	@ 0xbc
10051020:	4a0e      	ldr	r2, [pc, #56]	@ (1005105c <UART_InitCallbacksToDefault+0x98>)
10051022:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
10051024:	687b      	ldr	r3, [r7, #4]
10051026:	21c0      	movs	r1, #192	@ 0xc0
10051028:	4a0d      	ldr	r2, [pc, #52]	@ (10051060 <UART_InitCallbacksToDefault+0x9c>)
1005102a:	505a      	str	r2, [r3, r1]

}
1005102c:	46c0      	nop			@ (mov r8, r8)
1005102e:	46bd      	mov	sp, r7
10051030:	b002      	add	sp, #8
10051032:	bd80      	pop	{r7, pc}
10051034:	10050f3d 	.word	0x10050f3d
10051038:	10050f2d 	.word	0x10050f2d
1005103c:	10050f5d 	.word	0x10050f5d
10051040:	10050f4d 	.word	0x10050f4d
10051044:	10050f6d 	.word	0x10050f6d
10051048:	10050f7d 	.word	0x10050f7d
1005104c:	10050f8d 	.word	0x10050f8d
10051050:	10050f9d 	.word	0x10050f9d
10051054:	10051823 	.word	0x10051823
10051058:	10051833 	.word	0x10051833
1005105c:	10051843 	.word	0x10051843
10051060:	10050fad 	.word	0x10050fad

10051064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10051064:	b5b0      	push	{r4, r5, r7, lr}
10051066:	b090      	sub	sp, #64	@ 0x40
10051068:	af00      	add	r7, sp, #0
1005106a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
1005106c:	231b      	movs	r3, #27
1005106e:	2220      	movs	r2, #32
10051070:	189b      	adds	r3, r3, r2
10051072:	19db      	adds	r3, r3, r7
10051074:	2200      	movs	r2, #0
10051076:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10051078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005107a:	689a      	ldr	r2, [r3, #8]
1005107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005107e:	691b      	ldr	r3, [r3, #16]
10051080:	431a      	orrs	r2, r3
10051082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051084:	695b      	ldr	r3, [r3, #20]
10051086:	431a      	orrs	r2, r3
10051088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005108a:	69db      	ldr	r3, [r3, #28]
1005108c:	4313      	orrs	r3, r2
1005108e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10051090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051092:	681b      	ldr	r3, [r3, #0]
10051094:	681b      	ldr	r3, [r3, #0]
10051096:	4aa1      	ldr	r2, [pc, #644]	@ (1005131c <UART_SetConfig+0x2b8>)
10051098:	4013      	ands	r3, r2
1005109a:	0019      	movs	r1, r3
1005109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005109e:	681a      	ldr	r2, [r3, #0]
100510a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100510a2:	430b      	orrs	r3, r1
100510a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
100510a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100510a8:	681b      	ldr	r3, [r3, #0]
100510aa:	685b      	ldr	r3, [r3, #4]
100510ac:	4a9c      	ldr	r2, [pc, #624]	@ (10051320 <UART_SetConfig+0x2bc>)
100510ae:	4013      	ands	r3, r2
100510b0:	0018      	movs	r0, r3
100510b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100510b4:	68d9      	ldr	r1, [r3, #12]
100510b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100510b8:	681a      	ldr	r2, [r3, #0]
100510ba:	0003      	movs	r3, r0
100510bc:	430b      	orrs	r3, r1
100510be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
100510c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100510c2:	699b      	ldr	r3, [r3, #24]
100510c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
100510c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100510c8:	681b      	ldr	r3, [r3, #0]
100510ca:	4a96      	ldr	r2, [pc, #600]	@ (10051324 <UART_SetConfig+0x2c0>)
100510cc:	4293      	cmp	r3, r2
100510ce:	d004      	beq.n	100510da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
100510d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100510d2:	6a1b      	ldr	r3, [r3, #32]
100510d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100510d6:	4313      	orrs	r3, r2
100510d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
100510da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100510dc:	681b      	ldr	r3, [r3, #0]
100510de:	689b      	ldr	r3, [r3, #8]
100510e0:	4a91      	ldr	r2, [pc, #580]	@ (10051328 <UART_SetConfig+0x2c4>)
100510e2:	4013      	ands	r3, r2
100510e4:	0019      	movs	r1, r3
100510e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100510e8:	681a      	ldr	r2, [r3, #0]
100510ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100510ec:	430b      	orrs	r3, r1
100510ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
100510f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100510f2:	681b      	ldr	r3, [r3, #0]
100510f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100510f6:	220f      	movs	r2, #15
100510f8:	4393      	bics	r3, r2
100510fa:	0018      	movs	r0, r3
100510fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100510fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10051100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051102:	681a      	ldr	r2, [r3, #0]
10051104:	0003      	movs	r3, r0
10051106:	430b      	orrs	r3, r1
10051108:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
1005110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005110c:	681b      	ldr	r3, [r3, #0]
1005110e:	4a85      	ldr	r2, [pc, #532]	@ (10051324 <UART_SetConfig+0x2c0>)
10051110:	4293      	cmp	r3, r2
10051112:	d16d      	bne.n	100511f0 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
10051114:	2010      	movs	r0, #16
10051116:	f7ff f873 	bl	10050200 <HAL_RCCEx_GetPeriphCLKFreq>
1005111a:	0003      	movs	r3, r0
1005111c:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
1005111e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10051120:	2b00      	cmp	r3, #0
10051122:	d100      	bne.n	10051126 <UART_SetConfig+0xc2>
10051124:	e0e3      	b.n	100512ee <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10051126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1005112a:	4b80      	ldr	r3, [pc, #512]	@ (1005132c <UART_SetConfig+0x2c8>)
1005112c:	0052      	lsls	r2, r2, #1
1005112e:	5ad3      	ldrh	r3, [r2, r3]
10051130:	0019      	movs	r1, r3
10051132:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10051134:	f7ef f898 	bl	10040268 <__udivsi3>
10051138:	0003      	movs	r3, r0
1005113a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1005113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005113e:	685a      	ldr	r2, [r3, #4]
10051140:	0013      	movs	r3, r2
10051142:	005b      	lsls	r3, r3, #1
10051144:	189b      	adds	r3, r3, r2
10051146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10051148:	429a      	cmp	r2, r3
1005114a:	d305      	bcc.n	10051158 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
1005114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005114e:	685b      	ldr	r3, [r3, #4]
10051150:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10051152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10051154:	429a      	cmp	r2, r3
10051156:	d906      	bls.n	10051166 <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
10051158:	231b      	movs	r3, #27
1005115a:	2220      	movs	r2, #32
1005115c:	189b      	adds	r3, r3, r2
1005115e:	19db      	adds	r3, r3, r7
10051160:	2201      	movs	r2, #1
10051162:	701a      	strb	r2, [r3, #0]
10051164:	e0c3      	b.n	100512ee <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10051166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10051168:	61bb      	str	r3, [r7, #24]
1005116a:	2300      	movs	r3, #0
1005116c:	61fb      	str	r3, [r7, #28]
1005116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10051172:	4b6e      	ldr	r3, [pc, #440]	@ (1005132c <UART_SetConfig+0x2c8>)
10051174:	0052      	lsls	r2, r2, #1
10051176:	5ad3      	ldrh	r3, [r2, r3]
10051178:	613b      	str	r3, [r7, #16]
1005117a:	2300      	movs	r3, #0
1005117c:	617b      	str	r3, [r7, #20]
1005117e:	693a      	ldr	r2, [r7, #16]
10051180:	697b      	ldr	r3, [r7, #20]
10051182:	69b8      	ldr	r0, [r7, #24]
10051184:	69f9      	ldr	r1, [r7, #28]
10051186:	f7ef fa4d 	bl	10040624 <__aeabi_uldivmod>
1005118a:	0002      	movs	r2, r0
1005118c:	000b      	movs	r3, r1
1005118e:	0e11      	lsrs	r1, r2, #24
10051190:	021d      	lsls	r5, r3, #8
10051192:	430d      	orrs	r5, r1
10051194:	0214      	lsls	r4, r2, #8
10051196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051198:	685b      	ldr	r3, [r3, #4]
1005119a:	085b      	lsrs	r3, r3, #1
1005119c:	60bb      	str	r3, [r7, #8]
1005119e:	2300      	movs	r3, #0
100511a0:	60fb      	str	r3, [r7, #12]
100511a2:	68b8      	ldr	r0, [r7, #8]
100511a4:	68f9      	ldr	r1, [r7, #12]
100511a6:	1900      	adds	r0, r0, r4
100511a8:	4169      	adcs	r1, r5
100511aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100511ac:	685b      	ldr	r3, [r3, #4]
100511ae:	603b      	str	r3, [r7, #0]
100511b0:	2300      	movs	r3, #0
100511b2:	607b      	str	r3, [r7, #4]
100511b4:	683a      	ldr	r2, [r7, #0]
100511b6:	687b      	ldr	r3, [r7, #4]
100511b8:	f7ef fa34 	bl	10040624 <__aeabi_uldivmod>
100511bc:	0002      	movs	r2, r0
100511be:	000b      	movs	r3, r1
100511c0:	0013      	movs	r3, r2
100511c2:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
100511c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100511c6:	23c0      	movs	r3, #192	@ 0xc0
100511c8:	009b      	lsls	r3, r3, #2
100511ca:	429a      	cmp	r2, r3
100511cc:	d309      	bcc.n	100511e2 <UART_SetConfig+0x17e>
100511ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100511d0:	2380      	movs	r3, #128	@ 0x80
100511d2:	035b      	lsls	r3, r3, #13
100511d4:	429a      	cmp	r2, r3
100511d6:	d204      	bcs.n	100511e2 <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
100511d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100511da:	681b      	ldr	r3, [r3, #0]
100511dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100511de:	60da      	str	r2, [r3, #12]
100511e0:	e085      	b.n	100512ee <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
100511e2:	231b      	movs	r3, #27
100511e4:	2220      	movs	r2, #32
100511e6:	189b      	adds	r3, r3, r2
100511e8:	19db      	adds	r3, r3, r7
100511ea:	2201      	movs	r2, #1
100511ec:	701a      	strb	r2, [r3, #0]
100511ee:	e07e      	b.n	100512ee <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
100511f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100511f2:	69da      	ldr	r2, [r3, #28]
100511f4:	2380      	movs	r3, #128	@ 0x80
100511f6:	021b      	lsls	r3, r3, #8
100511f8:	429a      	cmp	r2, r3
100511fa:	d148      	bne.n	1005128e <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
100511fc:	4b4c      	ldr	r3, [pc, #304]	@ (10051330 <UART_SetConfig+0x2cc>)
100511fe:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10051200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10051202:	2b00      	cmp	r3, #0
10051204:	d100      	bne.n	10051208 <UART_SetConfig+0x1a4>
10051206:	e072      	b.n	100512ee <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10051208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005120a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1005120c:	4b47      	ldr	r3, [pc, #284]	@ (1005132c <UART_SetConfig+0x2c8>)
1005120e:	0052      	lsls	r2, r2, #1
10051210:	5ad3      	ldrh	r3, [r2, r3]
10051212:	0019      	movs	r1, r3
10051214:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10051216:	f7ef f827 	bl	10040268 <__udivsi3>
1005121a:	0003      	movs	r3, r0
1005121c:	005a      	lsls	r2, r3, #1
1005121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051220:	685b      	ldr	r3, [r3, #4]
10051222:	085b      	lsrs	r3, r3, #1
10051224:	18d2      	adds	r2, r2, r3
10051226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051228:	685b      	ldr	r3, [r3, #4]
1005122a:	0019      	movs	r1, r3
1005122c:	0010      	movs	r0, r2
1005122e:	f7ef f81b 	bl	10040268 <__udivsi3>
10051232:	0003      	movs	r3, r0
10051234:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10051236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10051238:	2b0f      	cmp	r3, #15
1005123a:	d921      	bls.n	10051280 <UART_SetConfig+0x21c>
1005123c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1005123e:	2380      	movs	r3, #128	@ 0x80
10051240:	025b      	lsls	r3, r3, #9
10051242:	429a      	cmp	r2, r3
10051244:	d21c      	bcs.n	10051280 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10051246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10051248:	b29a      	uxth	r2, r3
1005124a:	200e      	movs	r0, #14
1005124c:	2420      	movs	r4, #32
1005124e:	1903      	adds	r3, r0, r4
10051250:	19db      	adds	r3, r3, r7
10051252:	210f      	movs	r1, #15
10051254:	438a      	bics	r2, r1
10051256:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10051258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1005125a:	085b      	lsrs	r3, r3, #1
1005125c:	b29b      	uxth	r3, r3
1005125e:	2207      	movs	r2, #7
10051260:	4013      	ands	r3, r2
10051262:	b299      	uxth	r1, r3
10051264:	1903      	adds	r3, r0, r4
10051266:	19db      	adds	r3, r3, r7
10051268:	1902      	adds	r2, r0, r4
1005126a:	19d2      	adds	r2, r2, r7
1005126c:	8812      	ldrh	r2, [r2, #0]
1005126e:	430a      	orrs	r2, r1
10051270:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10051272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051274:	681b      	ldr	r3, [r3, #0]
10051276:	1902      	adds	r2, r0, r4
10051278:	19d2      	adds	r2, r2, r7
1005127a:	8812      	ldrh	r2, [r2, #0]
1005127c:	60da      	str	r2, [r3, #12]
1005127e:	e036      	b.n	100512ee <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10051280:	231b      	movs	r3, #27
10051282:	2220      	movs	r2, #32
10051284:	189b      	adds	r3, r3, r2
10051286:	19db      	adds	r3, r3, r7
10051288:	2201      	movs	r2, #1
1005128a:	701a      	strb	r2, [r3, #0]
1005128c:	e02f      	b.n	100512ee <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
1005128e:	4b28      	ldr	r3, [pc, #160]	@ (10051330 <UART_SetConfig+0x2cc>)
10051290:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10051292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10051294:	2b00      	cmp	r3, #0
10051296:	d02a      	beq.n	100512ee <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10051298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005129a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1005129c:	4b23      	ldr	r3, [pc, #140]	@ (1005132c <UART_SetConfig+0x2c8>)
1005129e:	0052      	lsls	r2, r2, #1
100512a0:	5ad3      	ldrh	r3, [r2, r3]
100512a2:	0019      	movs	r1, r3
100512a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
100512a6:	f7ee ffdf 	bl	10040268 <__udivsi3>
100512aa:	0003      	movs	r3, r0
100512ac:	001a      	movs	r2, r3
100512ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100512b0:	685b      	ldr	r3, [r3, #4]
100512b2:	085b      	lsrs	r3, r3, #1
100512b4:	18d2      	adds	r2, r2, r3
100512b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100512b8:	685b      	ldr	r3, [r3, #4]
100512ba:	0019      	movs	r1, r3
100512bc:	0010      	movs	r0, r2
100512be:	f7ee ffd3 	bl	10040268 <__udivsi3>
100512c2:	0003      	movs	r3, r0
100512c4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
100512c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100512c8:	2b0f      	cmp	r3, #15
100512ca:	d90a      	bls.n	100512e2 <UART_SetConfig+0x27e>
100512cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100512ce:	2380      	movs	r3, #128	@ 0x80
100512d0:	025b      	lsls	r3, r3, #9
100512d2:	429a      	cmp	r2, r3
100512d4:	d205      	bcs.n	100512e2 <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
100512d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100512d8:	b29a      	uxth	r2, r3
100512da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100512dc:	681b      	ldr	r3, [r3, #0]
100512de:	60da      	str	r2, [r3, #12]
100512e0:	e005      	b.n	100512ee <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
100512e2:	231b      	movs	r3, #27
100512e4:	2220      	movs	r2, #32
100512e6:	189b      	adds	r3, r3, r2
100512e8:	19db      	adds	r3, r3, r7
100512ea:	2201      	movs	r2, #1
100512ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
100512ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100512f0:	226a      	movs	r2, #106	@ 0x6a
100512f2:	2101      	movs	r1, #1
100512f4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
100512f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100512f8:	2268      	movs	r2, #104	@ 0x68
100512fa:	2101      	movs	r1, #1
100512fc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
100512fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051300:	2200      	movs	r2, #0
10051302:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10051304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051306:	2200      	movs	r2, #0
10051308:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
1005130a:	231b      	movs	r3, #27
1005130c:	2220      	movs	r2, #32
1005130e:	189b      	adds	r3, r3, r2
10051310:	19db      	adds	r3, r3, r7
10051312:	781b      	ldrb	r3, [r3, #0]
}
10051314:	0018      	movs	r0, r3
10051316:	46bd      	mov	sp, r7
10051318:	b010      	add	sp, #64	@ 0x40
1005131a:	bdb0      	pop	{r4, r5, r7, pc}
1005131c:	cfff69f3 	.word	0xcfff69f3
10051320:	ffffcfff 	.word	0xffffcfff
10051324:	41005000 	.word	0x41005000
10051328:	11fff4ff 	.word	0x11fff4ff
1005132c:	1006cef0 	.word	0x1006cef0
10051330:	00f42400 	.word	0x00f42400

10051334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10051334:	b580      	push	{r7, lr}
10051336:	b082      	sub	sp, #8
10051338:	af00      	add	r7, sp, #0
1005133a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1005133c:	687b      	ldr	r3, [r7, #4]
1005133e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051340:	2208      	movs	r2, #8
10051342:	4013      	ands	r3, r2
10051344:	d00b      	beq.n	1005135e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10051346:	687b      	ldr	r3, [r7, #4]
10051348:	681b      	ldr	r3, [r3, #0]
1005134a:	685b      	ldr	r3, [r3, #4]
1005134c:	4a4a      	ldr	r2, [pc, #296]	@ (10051478 <UART_AdvFeatureConfig+0x144>)
1005134e:	4013      	ands	r3, r2
10051350:	0019      	movs	r1, r3
10051352:	687b      	ldr	r3, [r7, #4]
10051354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10051356:	687b      	ldr	r3, [r7, #4]
10051358:	681b      	ldr	r3, [r3, #0]
1005135a:	430a      	orrs	r2, r1
1005135c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1005135e:	687b      	ldr	r3, [r7, #4]
10051360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051362:	2201      	movs	r2, #1
10051364:	4013      	ands	r3, r2
10051366:	d00b      	beq.n	10051380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10051368:	687b      	ldr	r3, [r7, #4]
1005136a:	681b      	ldr	r3, [r3, #0]
1005136c:	685b      	ldr	r3, [r3, #4]
1005136e:	4a43      	ldr	r2, [pc, #268]	@ (1005147c <UART_AdvFeatureConfig+0x148>)
10051370:	4013      	ands	r3, r2
10051372:	0019      	movs	r1, r3
10051374:	687b      	ldr	r3, [r7, #4]
10051376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10051378:	687b      	ldr	r3, [r7, #4]
1005137a:	681b      	ldr	r3, [r3, #0]
1005137c:	430a      	orrs	r2, r1
1005137e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10051380:	687b      	ldr	r3, [r7, #4]
10051382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051384:	2202      	movs	r2, #2
10051386:	4013      	ands	r3, r2
10051388:	d00b      	beq.n	100513a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1005138a:	687b      	ldr	r3, [r7, #4]
1005138c:	681b      	ldr	r3, [r3, #0]
1005138e:	685b      	ldr	r3, [r3, #4]
10051390:	4a3b      	ldr	r2, [pc, #236]	@ (10051480 <UART_AdvFeatureConfig+0x14c>)
10051392:	4013      	ands	r3, r2
10051394:	0019      	movs	r1, r3
10051396:	687b      	ldr	r3, [r7, #4]
10051398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1005139a:	687b      	ldr	r3, [r7, #4]
1005139c:	681b      	ldr	r3, [r3, #0]
1005139e:	430a      	orrs	r2, r1
100513a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
100513a2:	687b      	ldr	r3, [r7, #4]
100513a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100513a6:	2204      	movs	r2, #4
100513a8:	4013      	ands	r3, r2
100513aa:	d00b      	beq.n	100513c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
100513ac:	687b      	ldr	r3, [r7, #4]
100513ae:	681b      	ldr	r3, [r3, #0]
100513b0:	685b      	ldr	r3, [r3, #4]
100513b2:	4a34      	ldr	r2, [pc, #208]	@ (10051484 <UART_AdvFeatureConfig+0x150>)
100513b4:	4013      	ands	r3, r2
100513b6:	0019      	movs	r1, r3
100513b8:	687b      	ldr	r3, [r7, #4]
100513ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100513bc:	687b      	ldr	r3, [r7, #4]
100513be:	681b      	ldr	r3, [r3, #0]
100513c0:	430a      	orrs	r2, r1
100513c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
100513c4:	687b      	ldr	r3, [r7, #4]
100513c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100513c8:	2210      	movs	r2, #16
100513ca:	4013      	ands	r3, r2
100513cc:	d00b      	beq.n	100513e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
100513ce:	687b      	ldr	r3, [r7, #4]
100513d0:	681b      	ldr	r3, [r3, #0]
100513d2:	689b      	ldr	r3, [r3, #8]
100513d4:	4a2c      	ldr	r2, [pc, #176]	@ (10051488 <UART_AdvFeatureConfig+0x154>)
100513d6:	4013      	ands	r3, r2
100513d8:	0019      	movs	r1, r3
100513da:	687b      	ldr	r3, [r7, #4]
100513dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
100513de:	687b      	ldr	r3, [r7, #4]
100513e0:	681b      	ldr	r3, [r3, #0]
100513e2:	430a      	orrs	r2, r1
100513e4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
100513e6:	687b      	ldr	r3, [r7, #4]
100513e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100513ea:	2220      	movs	r2, #32
100513ec:	4013      	ands	r3, r2
100513ee:	d00b      	beq.n	10051408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
100513f0:	687b      	ldr	r3, [r7, #4]
100513f2:	681b      	ldr	r3, [r3, #0]
100513f4:	689b      	ldr	r3, [r3, #8]
100513f6:	4a25      	ldr	r2, [pc, #148]	@ (1005148c <UART_AdvFeatureConfig+0x158>)
100513f8:	4013      	ands	r3, r2
100513fa:	0019      	movs	r1, r3
100513fc:	687b      	ldr	r3, [r7, #4]
100513fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10051400:	687b      	ldr	r3, [r7, #4]
10051402:	681b      	ldr	r3, [r3, #0]
10051404:	430a      	orrs	r2, r1
10051406:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10051408:	687b      	ldr	r3, [r7, #4]
1005140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1005140c:	2240      	movs	r2, #64	@ 0x40
1005140e:	4013      	ands	r3, r2
10051410:	d01d      	beq.n	1005144e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10051412:	687b      	ldr	r3, [r7, #4]
10051414:	681b      	ldr	r3, [r3, #0]
10051416:	685b      	ldr	r3, [r3, #4]
10051418:	4a1d      	ldr	r2, [pc, #116]	@ (10051490 <UART_AdvFeatureConfig+0x15c>)
1005141a:	4013      	ands	r3, r2
1005141c:	0019      	movs	r1, r3
1005141e:	687b      	ldr	r3, [r7, #4]
10051420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10051422:	687b      	ldr	r3, [r7, #4]
10051424:	681b      	ldr	r3, [r3, #0]
10051426:	430a      	orrs	r2, r1
10051428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1005142a:	687b      	ldr	r3, [r7, #4]
1005142c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1005142e:	2380      	movs	r3, #128	@ 0x80
10051430:	035b      	lsls	r3, r3, #13
10051432:	429a      	cmp	r2, r3
10051434:	d10b      	bne.n	1005144e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10051436:	687b      	ldr	r3, [r7, #4]
10051438:	681b      	ldr	r3, [r3, #0]
1005143a:	685b      	ldr	r3, [r3, #4]
1005143c:	4a15      	ldr	r2, [pc, #84]	@ (10051494 <UART_AdvFeatureConfig+0x160>)
1005143e:	4013      	ands	r3, r2
10051440:	0019      	movs	r1, r3
10051442:	687b      	ldr	r3, [r7, #4]
10051444:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10051446:	687b      	ldr	r3, [r7, #4]
10051448:	681b      	ldr	r3, [r3, #0]
1005144a:	430a      	orrs	r2, r1
1005144c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1005144e:	687b      	ldr	r3, [r7, #4]
10051450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10051452:	2280      	movs	r2, #128	@ 0x80
10051454:	4013      	ands	r3, r2
10051456:	d00b      	beq.n	10051470 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10051458:	687b      	ldr	r3, [r7, #4]
1005145a:	681b      	ldr	r3, [r3, #0]
1005145c:	685b      	ldr	r3, [r3, #4]
1005145e:	4a0e      	ldr	r2, [pc, #56]	@ (10051498 <UART_AdvFeatureConfig+0x164>)
10051460:	4013      	ands	r3, r2
10051462:	0019      	movs	r1, r3
10051464:	687b      	ldr	r3, [r7, #4]
10051466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10051468:	687b      	ldr	r3, [r7, #4]
1005146a:	681b      	ldr	r3, [r3, #0]
1005146c:	430a      	orrs	r2, r1
1005146e:	605a      	str	r2, [r3, #4]
  }
}
10051470:	46c0      	nop			@ (mov r8, r8)
10051472:	46bd      	mov	sp, r7
10051474:	b002      	add	sp, #8
10051476:	bd80      	pop	{r7, pc}
10051478:	ffff7fff 	.word	0xffff7fff
1005147c:	fffdffff 	.word	0xfffdffff
10051480:	fffeffff 	.word	0xfffeffff
10051484:	fffbffff 	.word	0xfffbffff
10051488:	ffffefff 	.word	0xffffefff
1005148c:	ffffdfff 	.word	0xffffdfff
10051490:	ffefffff 	.word	0xffefffff
10051494:	ff9fffff 	.word	0xff9fffff
10051498:	fff7ffff 	.word	0xfff7ffff

1005149c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1005149c:	b580      	push	{r7, lr}
1005149e:	b092      	sub	sp, #72	@ 0x48
100514a0:	af02      	add	r7, sp, #8
100514a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
100514a4:	687b      	ldr	r3, [r7, #4]
100514a6:	2290      	movs	r2, #144	@ 0x90
100514a8:	2100      	movs	r1, #0
100514aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
100514ac:	f7fa fd84 	bl	1004bfb8 <HAL_GetTick>
100514b0:	0003      	movs	r3, r0
100514b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
100514b4:	687b      	ldr	r3, [r7, #4]
100514b6:	681b      	ldr	r3, [r3, #0]
100514b8:	681b      	ldr	r3, [r3, #0]
100514ba:	2208      	movs	r2, #8
100514bc:	4013      	ands	r3, r2
100514be:	2b08      	cmp	r3, #8
100514c0:	d12d      	bne.n	1005151e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
100514c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100514c4:	2280      	movs	r2, #128	@ 0x80
100514c6:	0391      	lsls	r1, r2, #14
100514c8:	6878      	ldr	r0, [r7, #4]
100514ca:	4a47      	ldr	r2, [pc, #284]	@ (100515e8 <UART_CheckIdleState+0x14c>)
100514cc:	9200      	str	r2, [sp, #0]
100514ce:	2200      	movs	r2, #0
100514d0:	f000 f88e 	bl	100515f0 <UART_WaitOnFlagUntilTimeout>
100514d4:	1e03      	subs	r3, r0, #0
100514d6:	d022      	beq.n	1005151e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100514d8:	f3ef 8310 	mrs	r3, PRIMASK
100514dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
100514de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
100514e0:	63bb      	str	r3, [r7, #56]	@ 0x38
100514e2:	2301      	movs	r3, #1
100514e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100514e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100514e8:	f383 8810 	msr	PRIMASK, r3
}
100514ec:	46c0      	nop			@ (mov r8, r8)
100514ee:	687b      	ldr	r3, [r7, #4]
100514f0:	681b      	ldr	r3, [r3, #0]
100514f2:	681a      	ldr	r2, [r3, #0]
100514f4:	687b      	ldr	r3, [r7, #4]
100514f6:	681b      	ldr	r3, [r3, #0]
100514f8:	2180      	movs	r1, #128	@ 0x80
100514fa:	438a      	bics	r2, r1
100514fc:	601a      	str	r2, [r3, #0]
100514fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10051500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10051504:	f383 8810 	msr	PRIMASK, r3
}
10051508:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
1005150a:	687b      	ldr	r3, [r7, #4]
1005150c:	2288      	movs	r2, #136	@ 0x88
1005150e:	2120      	movs	r1, #32
10051510:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10051512:	687b      	ldr	r3, [r7, #4]
10051514:	2284      	movs	r2, #132	@ 0x84
10051516:	2100      	movs	r1, #0
10051518:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1005151a:	2303      	movs	r3, #3
1005151c:	e060      	b.n	100515e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1005151e:	687b      	ldr	r3, [r7, #4]
10051520:	681b      	ldr	r3, [r3, #0]
10051522:	681b      	ldr	r3, [r3, #0]
10051524:	2204      	movs	r2, #4
10051526:	4013      	ands	r3, r2
10051528:	2b04      	cmp	r3, #4
1005152a:	d146      	bne.n	100515ba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1005152c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005152e:	2280      	movs	r2, #128	@ 0x80
10051530:	03d1      	lsls	r1, r2, #15
10051532:	6878      	ldr	r0, [r7, #4]
10051534:	4a2c      	ldr	r2, [pc, #176]	@ (100515e8 <UART_CheckIdleState+0x14c>)
10051536:	9200      	str	r2, [sp, #0]
10051538:	2200      	movs	r2, #0
1005153a:	f000 f859 	bl	100515f0 <UART_WaitOnFlagUntilTimeout>
1005153e:	1e03      	subs	r3, r0, #0
10051540:	d03b      	beq.n	100515ba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10051542:	f3ef 8310 	mrs	r3, PRIMASK
10051546:	60fb      	str	r3, [r7, #12]
  return(result);
10051548:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1005154a:	637b      	str	r3, [r7, #52]	@ 0x34
1005154c:	2301      	movs	r3, #1
1005154e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051550:	693b      	ldr	r3, [r7, #16]
10051552:	f383 8810 	msr	PRIMASK, r3
}
10051556:	46c0      	nop			@ (mov r8, r8)
10051558:	687b      	ldr	r3, [r7, #4]
1005155a:	681b      	ldr	r3, [r3, #0]
1005155c:	681a      	ldr	r2, [r3, #0]
1005155e:	687b      	ldr	r3, [r7, #4]
10051560:	681b      	ldr	r3, [r3, #0]
10051562:	4922      	ldr	r1, [pc, #136]	@ (100515ec <UART_CheckIdleState+0x150>)
10051564:	400a      	ands	r2, r1
10051566:	601a      	str	r2, [r3, #0]
10051568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1005156a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005156c:	697b      	ldr	r3, [r7, #20]
1005156e:	f383 8810 	msr	PRIMASK, r3
}
10051572:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10051574:	f3ef 8310 	mrs	r3, PRIMASK
10051578:	61bb      	str	r3, [r7, #24]
  return(result);
1005157a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1005157c:	633b      	str	r3, [r7, #48]	@ 0x30
1005157e:	2301      	movs	r3, #1
10051580:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051582:	69fb      	ldr	r3, [r7, #28]
10051584:	f383 8810 	msr	PRIMASK, r3
}
10051588:	46c0      	nop			@ (mov r8, r8)
1005158a:	687b      	ldr	r3, [r7, #4]
1005158c:	681b      	ldr	r3, [r3, #0]
1005158e:	689a      	ldr	r2, [r3, #8]
10051590:	687b      	ldr	r3, [r7, #4]
10051592:	681b      	ldr	r3, [r3, #0]
10051594:	2101      	movs	r1, #1
10051596:	438a      	bics	r2, r1
10051598:	609a      	str	r2, [r3, #8]
1005159a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1005159c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005159e:	6a3b      	ldr	r3, [r7, #32]
100515a0:	f383 8810 	msr	PRIMASK, r3
}
100515a4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
100515a6:	687b      	ldr	r3, [r7, #4]
100515a8:	228c      	movs	r2, #140	@ 0x8c
100515aa:	2120      	movs	r1, #32
100515ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
100515ae:	687b      	ldr	r3, [r7, #4]
100515b0:	2284      	movs	r2, #132	@ 0x84
100515b2:	2100      	movs	r1, #0
100515b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
100515b6:	2303      	movs	r3, #3
100515b8:	e012      	b.n	100515e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
100515ba:	687b      	ldr	r3, [r7, #4]
100515bc:	2288      	movs	r2, #136	@ 0x88
100515be:	2120      	movs	r1, #32
100515c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
100515c2:	687b      	ldr	r3, [r7, #4]
100515c4:	228c      	movs	r2, #140	@ 0x8c
100515c6:	2120      	movs	r1, #32
100515c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
100515ca:	687b      	ldr	r3, [r7, #4]
100515cc:	2200      	movs	r2, #0
100515ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
100515d0:	687b      	ldr	r3, [r7, #4]
100515d2:	2200      	movs	r2, #0
100515d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
100515d6:	687b      	ldr	r3, [r7, #4]
100515d8:	2284      	movs	r2, #132	@ 0x84
100515da:	2100      	movs	r1, #0
100515dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100515de:	2300      	movs	r3, #0
}
100515e0:	0018      	movs	r0, r3
100515e2:	46bd      	mov	sp, r7
100515e4:	b010      	add	sp, #64	@ 0x40
100515e6:	bd80      	pop	{r7, pc}
100515e8:	01ffffff 	.word	0x01ffffff
100515ec:	fffffedf 	.word	0xfffffedf

100515f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
100515f0:	b580      	push	{r7, lr}
100515f2:	b084      	sub	sp, #16
100515f4:	af00      	add	r7, sp, #0
100515f6:	60f8      	str	r0, [r7, #12]
100515f8:	60b9      	str	r1, [r7, #8]
100515fa:	603b      	str	r3, [r7, #0]
100515fc:	1dfb      	adds	r3, r7, #7
100515fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10051600:	e051      	b.n	100516a6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10051602:	69bb      	ldr	r3, [r7, #24]
10051604:	3301      	adds	r3, #1
10051606:	d04e      	beq.n	100516a6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10051608:	f7fa fcd6 	bl	1004bfb8 <HAL_GetTick>
1005160c:	0002      	movs	r2, r0
1005160e:	683b      	ldr	r3, [r7, #0]
10051610:	1ad3      	subs	r3, r2, r3
10051612:	69ba      	ldr	r2, [r7, #24]
10051614:	429a      	cmp	r2, r3
10051616:	d302      	bcc.n	1005161e <UART_WaitOnFlagUntilTimeout+0x2e>
10051618:	69bb      	ldr	r3, [r7, #24]
1005161a:	2b00      	cmp	r3, #0
1005161c:	d101      	bne.n	10051622 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
1005161e:	2303      	movs	r3, #3
10051620:	e051      	b.n	100516c6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
10051622:	68fb      	ldr	r3, [r7, #12]
10051624:	681b      	ldr	r3, [r3, #0]
10051626:	681b      	ldr	r3, [r3, #0]
10051628:	2204      	movs	r2, #4
1005162a:	4013      	ands	r3, r2
1005162c:	d03b      	beq.n	100516a6 <UART_WaitOnFlagUntilTimeout+0xb6>
1005162e:	68bb      	ldr	r3, [r7, #8]
10051630:	2b80      	cmp	r3, #128	@ 0x80
10051632:	d038      	beq.n	100516a6 <UART_WaitOnFlagUntilTimeout+0xb6>
10051634:	68bb      	ldr	r3, [r7, #8]
10051636:	2b40      	cmp	r3, #64	@ 0x40
10051638:	d035      	beq.n	100516a6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1005163a:	68fb      	ldr	r3, [r7, #12]
1005163c:	681b      	ldr	r3, [r3, #0]
1005163e:	69db      	ldr	r3, [r3, #28]
10051640:	2208      	movs	r2, #8
10051642:	4013      	ands	r3, r2
10051644:	2b08      	cmp	r3, #8
10051646:	d111      	bne.n	1005166c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
10051648:	68fb      	ldr	r3, [r7, #12]
1005164a:	681b      	ldr	r3, [r3, #0]
1005164c:	2208      	movs	r2, #8
1005164e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10051650:	68fb      	ldr	r3, [r7, #12]
10051652:	0018      	movs	r0, r3
10051654:	f000 f83c 	bl	100516d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10051658:	68fb      	ldr	r3, [r7, #12]
1005165a:	2290      	movs	r2, #144	@ 0x90
1005165c:	2108      	movs	r1, #8
1005165e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10051660:	68fb      	ldr	r3, [r7, #12]
10051662:	2284      	movs	r2, #132	@ 0x84
10051664:	2100      	movs	r1, #0
10051666:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10051668:	2301      	movs	r3, #1
1005166a:	e02c      	b.n	100516c6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1005166c:	68fb      	ldr	r3, [r7, #12]
1005166e:	681b      	ldr	r3, [r3, #0]
10051670:	69da      	ldr	r2, [r3, #28]
10051672:	2380      	movs	r3, #128	@ 0x80
10051674:	011b      	lsls	r3, r3, #4
10051676:	401a      	ands	r2, r3
10051678:	2380      	movs	r3, #128	@ 0x80
1005167a:	011b      	lsls	r3, r3, #4
1005167c:	429a      	cmp	r2, r3
1005167e:	d112      	bne.n	100516a6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10051680:	68fb      	ldr	r3, [r7, #12]
10051682:	681b      	ldr	r3, [r3, #0]
10051684:	2280      	movs	r2, #128	@ 0x80
10051686:	0112      	lsls	r2, r2, #4
10051688:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1005168a:	68fb      	ldr	r3, [r7, #12]
1005168c:	0018      	movs	r0, r3
1005168e:	f000 f81f 	bl	100516d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
10051692:	68fb      	ldr	r3, [r7, #12]
10051694:	2290      	movs	r2, #144	@ 0x90
10051696:	2120      	movs	r1, #32
10051698:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1005169a:	68fb      	ldr	r3, [r7, #12]
1005169c:	2284      	movs	r2, #132	@ 0x84
1005169e:	2100      	movs	r1, #0
100516a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
100516a2:	2303      	movs	r3, #3
100516a4:	e00f      	b.n	100516c6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
100516a6:	68fb      	ldr	r3, [r7, #12]
100516a8:	681b      	ldr	r3, [r3, #0]
100516aa:	69db      	ldr	r3, [r3, #28]
100516ac:	68ba      	ldr	r2, [r7, #8]
100516ae:	4013      	ands	r3, r2
100516b0:	68ba      	ldr	r2, [r7, #8]
100516b2:	1ad3      	subs	r3, r2, r3
100516b4:	425a      	negs	r2, r3
100516b6:	4153      	adcs	r3, r2
100516b8:	b2db      	uxtb	r3, r3
100516ba:	001a      	movs	r2, r3
100516bc:	1dfb      	adds	r3, r7, #7
100516be:	781b      	ldrb	r3, [r3, #0]
100516c0:	429a      	cmp	r2, r3
100516c2:	d09e      	beq.n	10051602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
100516c4:	2300      	movs	r3, #0
}
100516c6:	0018      	movs	r0, r3
100516c8:	46bd      	mov	sp, r7
100516ca:	b004      	add	sp, #16
100516cc:	bd80      	pop	{r7, pc}
	...

100516d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
100516d0:	b580      	push	{r7, lr}
100516d2:	b08e      	sub	sp, #56	@ 0x38
100516d4:	af00      	add	r7, sp, #0
100516d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100516d8:	f3ef 8310 	mrs	r3, PRIMASK
100516dc:	617b      	str	r3, [r7, #20]
  return(result);
100516de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
100516e0:	637b      	str	r3, [r7, #52]	@ 0x34
100516e2:	2301      	movs	r3, #1
100516e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100516e6:	69bb      	ldr	r3, [r7, #24]
100516e8:	f383 8810 	msr	PRIMASK, r3
}
100516ec:	46c0      	nop			@ (mov r8, r8)
100516ee:	687b      	ldr	r3, [r7, #4]
100516f0:	681b      	ldr	r3, [r3, #0]
100516f2:	681a      	ldr	r2, [r3, #0]
100516f4:	687b      	ldr	r3, [r7, #4]
100516f6:	681b      	ldr	r3, [r3, #0]
100516f8:	4926      	ldr	r1, [pc, #152]	@ (10051794 <UART_EndRxTransfer+0xc4>)
100516fa:	400a      	ands	r2, r1
100516fc:	601a      	str	r2, [r3, #0]
100516fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10051700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051702:	69fb      	ldr	r3, [r7, #28]
10051704:	f383 8810 	msr	PRIMASK, r3
}
10051708:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005170a:	f3ef 8310 	mrs	r3, PRIMASK
1005170e:	623b      	str	r3, [r7, #32]
  return(result);
10051710:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
10051712:	633b      	str	r3, [r7, #48]	@ 0x30
10051714:	2301      	movs	r3, #1
10051716:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005171a:	f383 8810 	msr	PRIMASK, r3
}
1005171e:	46c0      	nop			@ (mov r8, r8)
10051720:	687b      	ldr	r3, [r7, #4]
10051722:	681b      	ldr	r3, [r3, #0]
10051724:	689a      	ldr	r2, [r3, #8]
10051726:	687b      	ldr	r3, [r7, #4]
10051728:	681b      	ldr	r3, [r3, #0]
1005172a:	491b      	ldr	r1, [pc, #108]	@ (10051798 <UART_EndRxTransfer+0xc8>)
1005172c:	400a      	ands	r2, r1
1005172e:	609a      	str	r2, [r3, #8]
10051730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10051732:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10051736:	f383 8810 	msr	PRIMASK, r3
}
1005173a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1005173c:	687b      	ldr	r3, [r7, #4]
1005173e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
10051740:	2b01      	cmp	r3, #1
10051742:	d118      	bne.n	10051776 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10051744:	f3ef 8310 	mrs	r3, PRIMASK
10051748:	60bb      	str	r3, [r7, #8]
  return(result);
1005174a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1005174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
1005174e:	2301      	movs	r3, #1
10051750:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10051752:	68fb      	ldr	r3, [r7, #12]
10051754:	f383 8810 	msr	PRIMASK, r3
}
10051758:	46c0      	nop			@ (mov r8, r8)
1005175a:	687b      	ldr	r3, [r7, #4]
1005175c:	681b      	ldr	r3, [r3, #0]
1005175e:	681a      	ldr	r2, [r3, #0]
10051760:	687b      	ldr	r3, [r7, #4]
10051762:	681b      	ldr	r3, [r3, #0]
10051764:	2110      	movs	r1, #16
10051766:	438a      	bics	r2, r1
10051768:	601a      	str	r2, [r3, #0]
1005176a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1005176c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005176e:	693b      	ldr	r3, [r7, #16]
10051770:	f383 8810 	msr	PRIMASK, r3
}
10051774:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
10051776:	687b      	ldr	r3, [r7, #4]
10051778:	228c      	movs	r2, #140	@ 0x8c
1005177a:	2120      	movs	r1, #32
1005177c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1005177e:	687b      	ldr	r3, [r7, #4]
10051780:	2200      	movs	r2, #0
10051782:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
10051784:	687b      	ldr	r3, [r7, #4]
10051786:	2200      	movs	r2, #0
10051788:	675a      	str	r2, [r3, #116]	@ 0x74
}
1005178a:	46c0      	nop			@ (mov r8, r8)
1005178c:	46bd      	mov	sp, r7
1005178e:	b00e      	add	sp, #56	@ 0x38
10051790:	bd80      	pop	{r7, pc}
10051792:	46c0      	nop			@ (mov r8, r8)
10051794:	fffffedf 	.word	0xfffffedf
10051798:	effffffe 	.word	0xeffffffe

1005179c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
1005179c:	b580      	push	{r7, lr}
1005179e:	b084      	sub	sp, #16
100517a0:	af00      	add	r7, sp, #0
100517a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
100517a4:	687b      	ldr	r3, [r7, #4]
100517a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100517a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
100517aa:	68fb      	ldr	r3, [r7, #12]
100517ac:	225e      	movs	r2, #94	@ 0x5e
100517ae:	2100      	movs	r1, #0
100517b0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
100517b2:	68fb      	ldr	r3, [r7, #12]
100517b4:	22a4      	movs	r2, #164	@ 0xa4
100517b6:	589b      	ldr	r3, [r3, r2]
100517b8:	68fa      	ldr	r2, [r7, #12]
100517ba:	0010      	movs	r0, r2
100517bc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
100517be:	46c0      	nop			@ (mov r8, r8)
100517c0:	46bd      	mov	sp, r7
100517c2:	b004      	add	sp, #16
100517c4:	bd80      	pop	{r7, pc}

100517c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
100517c6:	b580      	push	{r7, lr}
100517c8:	b086      	sub	sp, #24
100517ca:	af00      	add	r7, sp, #0
100517cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100517ce:	f3ef 8310 	mrs	r3, PRIMASK
100517d2:	60bb      	str	r3, [r7, #8]
  return(result);
100517d4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
100517d6:	617b      	str	r3, [r7, #20]
100517d8:	2301      	movs	r3, #1
100517da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100517dc:	68fb      	ldr	r3, [r7, #12]
100517de:	f383 8810 	msr	PRIMASK, r3
}
100517e2:	46c0      	nop			@ (mov r8, r8)
100517e4:	687b      	ldr	r3, [r7, #4]
100517e6:	681b      	ldr	r3, [r3, #0]
100517e8:	681a      	ldr	r2, [r3, #0]
100517ea:	687b      	ldr	r3, [r7, #4]
100517ec:	681b      	ldr	r3, [r3, #0]
100517ee:	2140      	movs	r1, #64	@ 0x40
100517f0:	438a      	bics	r2, r1
100517f2:	601a      	str	r2, [r3, #0]
100517f4:	697b      	ldr	r3, [r7, #20]
100517f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100517f8:	693b      	ldr	r3, [r7, #16]
100517fa:	f383 8810 	msr	PRIMASK, r3
}
100517fe:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
10051800:	687b      	ldr	r3, [r7, #4]
10051802:	2288      	movs	r2, #136	@ 0x88
10051804:	2120      	movs	r1, #32
10051806:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
10051808:	687b      	ldr	r3, [r7, #4]
1005180a:	2200      	movs	r2, #0
1005180c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
1005180e:	687b      	ldr	r3, [r7, #4]
10051810:	2298      	movs	r2, #152	@ 0x98
10051812:	589b      	ldr	r3, [r3, r2]
10051814:	687a      	ldr	r2, [r7, #4]
10051816:	0010      	movs	r0, r2
10051818:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
1005181a:	46c0      	nop			@ (mov r8, r8)
1005181c:	46bd      	mov	sp, r7
1005181e:	b006      	add	sp, #24
10051820:	bd80      	pop	{r7, pc}

10051822 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
10051822:	b580      	push	{r7, lr}
10051824:	b082      	sub	sp, #8
10051826:	af00      	add	r7, sp, #0
10051828:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
1005182a:	46c0      	nop			@ (mov r8, r8)
1005182c:	46bd      	mov	sp, r7
1005182e:	b002      	add	sp, #8
10051830:	bd80      	pop	{r7, pc}

10051832 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
10051832:	b580      	push	{r7, lr}
10051834:	b082      	sub	sp, #8
10051836:	af00      	add	r7, sp, #0
10051838:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1005183a:	46c0      	nop			@ (mov r8, r8)
1005183c:	46bd      	mov	sp, r7
1005183e:	b002      	add	sp, #8
10051840:	bd80      	pop	{r7, pc}

10051842 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
10051842:	b580      	push	{r7, lr}
10051844:	b082      	sub	sp, #8
10051846:	af00      	add	r7, sp, #0
10051848:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1005184a:	46c0      	nop			@ (mov r8, r8)
1005184c:	46bd      	mov	sp, r7
1005184e:	b002      	add	sp, #8
10051850:	bd80      	pop	{r7, pc}

10051852 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
10051852:	b580      	push	{r7, lr}
10051854:	b084      	sub	sp, #16
10051856:	af00      	add	r7, sp, #0
10051858:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1005185a:	687b      	ldr	r3, [r7, #4]
1005185c:	2284      	movs	r2, #132	@ 0x84
1005185e:	5c9b      	ldrb	r3, [r3, r2]
10051860:	2b01      	cmp	r3, #1
10051862:	d101      	bne.n	10051868 <HAL_UARTEx_EnableFifoMode+0x16>
10051864:	2302      	movs	r3, #2
10051866:	e02d      	b.n	100518c4 <HAL_UARTEx_EnableFifoMode+0x72>
10051868:	687b      	ldr	r3, [r7, #4]
1005186a:	2284      	movs	r2, #132	@ 0x84
1005186c:	2101      	movs	r1, #1
1005186e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10051870:	687b      	ldr	r3, [r7, #4]
10051872:	2288      	movs	r2, #136	@ 0x88
10051874:	2124      	movs	r1, #36	@ 0x24
10051876:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10051878:	687b      	ldr	r3, [r7, #4]
1005187a:	681b      	ldr	r3, [r3, #0]
1005187c:	681b      	ldr	r3, [r3, #0]
1005187e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10051880:	687b      	ldr	r3, [r7, #4]
10051882:	681b      	ldr	r3, [r3, #0]
10051884:	681a      	ldr	r2, [r3, #0]
10051886:	687b      	ldr	r3, [r7, #4]
10051888:	681b      	ldr	r3, [r3, #0]
1005188a:	2101      	movs	r1, #1
1005188c:	438a      	bics	r2, r1
1005188e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
10051890:	68fb      	ldr	r3, [r7, #12]
10051892:	2280      	movs	r2, #128	@ 0x80
10051894:	0592      	lsls	r2, r2, #22
10051896:	4313      	orrs	r3, r2
10051898:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
1005189a:	687b      	ldr	r3, [r7, #4]
1005189c:	2280      	movs	r2, #128	@ 0x80
1005189e:	0592      	lsls	r2, r2, #22
100518a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100518a2:	687b      	ldr	r3, [r7, #4]
100518a4:	681b      	ldr	r3, [r3, #0]
100518a6:	68fa      	ldr	r2, [r7, #12]
100518a8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
100518aa:	687b      	ldr	r3, [r7, #4]
100518ac:	0018      	movs	r0, r3
100518ae:	f000 f88f 	bl	100519d0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
100518b2:	687b      	ldr	r3, [r7, #4]
100518b4:	2288      	movs	r2, #136	@ 0x88
100518b6:	2120      	movs	r1, #32
100518b8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100518ba:	687b      	ldr	r3, [r7, #4]
100518bc:	2284      	movs	r2, #132	@ 0x84
100518be:	2100      	movs	r1, #0
100518c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100518c2:	2300      	movs	r3, #0
}
100518c4:	0018      	movs	r0, r3
100518c6:	46bd      	mov	sp, r7
100518c8:	b004      	add	sp, #16
100518ca:	bd80      	pop	{r7, pc}

100518cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100518cc:	b580      	push	{r7, lr}
100518ce:	b084      	sub	sp, #16
100518d0:	af00      	add	r7, sp, #0
100518d2:	6078      	str	r0, [r7, #4]
100518d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100518d6:	687b      	ldr	r3, [r7, #4]
100518d8:	2284      	movs	r2, #132	@ 0x84
100518da:	5c9b      	ldrb	r3, [r3, r2]
100518dc:	2b01      	cmp	r3, #1
100518de:	d101      	bne.n	100518e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
100518e0:	2302      	movs	r3, #2
100518e2:	e02e      	b.n	10051942 <HAL_UARTEx_SetTxFifoThreshold+0x76>
100518e4:	687b      	ldr	r3, [r7, #4]
100518e6:	2284      	movs	r2, #132	@ 0x84
100518e8:	2101      	movs	r1, #1
100518ea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
100518ec:	687b      	ldr	r3, [r7, #4]
100518ee:	2288      	movs	r2, #136	@ 0x88
100518f0:	2124      	movs	r1, #36	@ 0x24
100518f2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
100518f4:	687b      	ldr	r3, [r7, #4]
100518f6:	681b      	ldr	r3, [r3, #0]
100518f8:	681b      	ldr	r3, [r3, #0]
100518fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
100518fc:	687b      	ldr	r3, [r7, #4]
100518fe:	681b      	ldr	r3, [r3, #0]
10051900:	681a      	ldr	r2, [r3, #0]
10051902:	687b      	ldr	r3, [r7, #4]
10051904:	681b      	ldr	r3, [r3, #0]
10051906:	2101      	movs	r1, #1
10051908:	438a      	bics	r2, r1
1005190a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1005190c:	687b      	ldr	r3, [r7, #4]
1005190e:	681b      	ldr	r3, [r3, #0]
10051910:	689b      	ldr	r3, [r3, #8]
10051912:	00db      	lsls	r3, r3, #3
10051914:	08d9      	lsrs	r1, r3, #3
10051916:	687b      	ldr	r3, [r7, #4]
10051918:	681b      	ldr	r3, [r3, #0]
1005191a:	683a      	ldr	r2, [r7, #0]
1005191c:	430a      	orrs	r2, r1
1005191e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10051920:	687b      	ldr	r3, [r7, #4]
10051922:	0018      	movs	r0, r3
10051924:	f000 f854 	bl	100519d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10051928:	687b      	ldr	r3, [r7, #4]
1005192a:	681b      	ldr	r3, [r3, #0]
1005192c:	68fa      	ldr	r2, [r7, #12]
1005192e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10051930:	687b      	ldr	r3, [r7, #4]
10051932:	2288      	movs	r2, #136	@ 0x88
10051934:	2120      	movs	r1, #32
10051936:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10051938:	687b      	ldr	r3, [r7, #4]
1005193a:	2284      	movs	r2, #132	@ 0x84
1005193c:	2100      	movs	r1, #0
1005193e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10051940:	2300      	movs	r3, #0
}
10051942:	0018      	movs	r0, r3
10051944:	46bd      	mov	sp, r7
10051946:	b004      	add	sp, #16
10051948:	bd80      	pop	{r7, pc}
	...

1005194c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1005194c:	b580      	push	{r7, lr}
1005194e:	b084      	sub	sp, #16
10051950:	af00      	add	r7, sp, #0
10051952:	6078      	str	r0, [r7, #4]
10051954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10051956:	687b      	ldr	r3, [r7, #4]
10051958:	2284      	movs	r2, #132	@ 0x84
1005195a:	5c9b      	ldrb	r3, [r3, r2]
1005195c:	2b01      	cmp	r3, #1
1005195e:	d101      	bne.n	10051964 <HAL_UARTEx_SetRxFifoThreshold+0x18>
10051960:	2302      	movs	r3, #2
10051962:	e02f      	b.n	100519c4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
10051964:	687b      	ldr	r3, [r7, #4]
10051966:	2284      	movs	r2, #132	@ 0x84
10051968:	2101      	movs	r1, #1
1005196a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1005196c:	687b      	ldr	r3, [r7, #4]
1005196e:	2288      	movs	r2, #136	@ 0x88
10051970:	2124      	movs	r1, #36	@ 0x24
10051972:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10051974:	687b      	ldr	r3, [r7, #4]
10051976:	681b      	ldr	r3, [r3, #0]
10051978:	681b      	ldr	r3, [r3, #0]
1005197a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1005197c:	687b      	ldr	r3, [r7, #4]
1005197e:	681b      	ldr	r3, [r3, #0]
10051980:	681a      	ldr	r2, [r3, #0]
10051982:	687b      	ldr	r3, [r7, #4]
10051984:	681b      	ldr	r3, [r3, #0]
10051986:	2101      	movs	r1, #1
10051988:	438a      	bics	r2, r1
1005198a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1005198c:	687b      	ldr	r3, [r7, #4]
1005198e:	681b      	ldr	r3, [r3, #0]
10051990:	689b      	ldr	r3, [r3, #8]
10051992:	4a0e      	ldr	r2, [pc, #56]	@ (100519cc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
10051994:	4013      	ands	r3, r2
10051996:	0019      	movs	r1, r3
10051998:	687b      	ldr	r3, [r7, #4]
1005199a:	681b      	ldr	r3, [r3, #0]
1005199c:	683a      	ldr	r2, [r7, #0]
1005199e:	430a      	orrs	r2, r1
100519a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
100519a2:	687b      	ldr	r3, [r7, #4]
100519a4:	0018      	movs	r0, r3
100519a6:	f000 f813 	bl	100519d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100519aa:	687b      	ldr	r3, [r7, #4]
100519ac:	681b      	ldr	r3, [r3, #0]
100519ae:	68fa      	ldr	r2, [r7, #12]
100519b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100519b2:	687b      	ldr	r3, [r7, #4]
100519b4:	2288      	movs	r2, #136	@ 0x88
100519b6:	2120      	movs	r1, #32
100519b8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100519ba:	687b      	ldr	r3, [r7, #4]
100519bc:	2284      	movs	r2, #132	@ 0x84
100519be:	2100      	movs	r1, #0
100519c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100519c2:	2300      	movs	r3, #0
}
100519c4:	0018      	movs	r0, r3
100519c6:	46bd      	mov	sp, r7
100519c8:	b004      	add	sp, #16
100519ca:	bd80      	pop	{r7, pc}
100519cc:	f1ffffff 	.word	0xf1ffffff

100519d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
100519d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100519d2:	b085      	sub	sp, #20
100519d4:	af00      	add	r7, sp, #0
100519d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
100519d8:	687b      	ldr	r3, [r7, #4]
100519da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100519dc:	2b00      	cmp	r3, #0
100519de:	d108      	bne.n	100519f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
100519e0:	687b      	ldr	r3, [r7, #4]
100519e2:	226a      	movs	r2, #106	@ 0x6a
100519e4:	2101      	movs	r1, #1
100519e6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
100519e8:	687b      	ldr	r3, [r7, #4]
100519ea:	2268      	movs	r2, #104	@ 0x68
100519ec:	2101      	movs	r1, #1
100519ee:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
100519f0:	e043      	b.n	10051a7a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
100519f2:	260f      	movs	r6, #15
100519f4:	19bb      	adds	r3, r7, r6
100519f6:	2208      	movs	r2, #8
100519f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
100519fa:	200e      	movs	r0, #14
100519fc:	183b      	adds	r3, r7, r0
100519fe:	2208      	movs	r2, #8
10051a00:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
10051a02:	687b      	ldr	r3, [r7, #4]
10051a04:	681b      	ldr	r3, [r3, #0]
10051a06:	689b      	ldr	r3, [r3, #8]
10051a08:	0e5b      	lsrs	r3, r3, #25
10051a0a:	b2da      	uxtb	r2, r3
10051a0c:	240d      	movs	r4, #13
10051a0e:	193b      	adds	r3, r7, r4
10051a10:	2107      	movs	r1, #7
10051a12:	400a      	ands	r2, r1
10051a14:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
10051a16:	687b      	ldr	r3, [r7, #4]
10051a18:	681b      	ldr	r3, [r3, #0]
10051a1a:	689b      	ldr	r3, [r3, #8]
10051a1c:	0f5b      	lsrs	r3, r3, #29
10051a1e:	b2da      	uxtb	r2, r3
10051a20:	250c      	movs	r5, #12
10051a22:	197b      	adds	r3, r7, r5
10051a24:	2107      	movs	r1, #7
10051a26:	400a      	ands	r2, r1
10051a28:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
10051a2a:	183b      	adds	r3, r7, r0
10051a2c:	781b      	ldrb	r3, [r3, #0]
10051a2e:	197a      	adds	r2, r7, r5
10051a30:	7812      	ldrb	r2, [r2, #0]
10051a32:	4914      	ldr	r1, [pc, #80]	@ (10051a84 <UARTEx_SetNbDataToProcess+0xb4>)
10051a34:	5c8a      	ldrb	r2, [r1, r2]
10051a36:	435a      	muls	r2, r3
10051a38:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
10051a3a:	197b      	adds	r3, r7, r5
10051a3c:	781b      	ldrb	r3, [r3, #0]
10051a3e:	4a12      	ldr	r2, [pc, #72]	@ (10051a88 <UARTEx_SetNbDataToProcess+0xb8>)
10051a40:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
10051a42:	0019      	movs	r1, r3
10051a44:	f7ee fc9a 	bl	1004037c <__divsi3>
10051a48:	0003      	movs	r3, r0
10051a4a:	b299      	uxth	r1, r3
10051a4c:	687b      	ldr	r3, [r7, #4]
10051a4e:	226a      	movs	r2, #106	@ 0x6a
10051a50:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10051a52:	19bb      	adds	r3, r7, r6
10051a54:	781b      	ldrb	r3, [r3, #0]
10051a56:	193a      	adds	r2, r7, r4
10051a58:	7812      	ldrb	r2, [r2, #0]
10051a5a:	490a      	ldr	r1, [pc, #40]	@ (10051a84 <UARTEx_SetNbDataToProcess+0xb4>)
10051a5c:	5c8a      	ldrb	r2, [r1, r2]
10051a5e:	435a      	muls	r2, r3
10051a60:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
10051a62:	193b      	adds	r3, r7, r4
10051a64:	781b      	ldrb	r3, [r3, #0]
10051a66:	4a08      	ldr	r2, [pc, #32]	@ (10051a88 <UARTEx_SetNbDataToProcess+0xb8>)
10051a68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10051a6a:	0019      	movs	r1, r3
10051a6c:	f7ee fc86 	bl	1004037c <__divsi3>
10051a70:	0003      	movs	r3, r0
10051a72:	b299      	uxth	r1, r3
10051a74:	687b      	ldr	r3, [r7, #4]
10051a76:	2268      	movs	r2, #104	@ 0x68
10051a78:	5299      	strh	r1, [r3, r2]
}
10051a7a:	46c0      	nop			@ (mov r8, r8)
10051a7c:	46bd      	mov	sp, r7
10051a7e:	b005      	add	sp, #20
10051a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10051a82:	46c0      	nop			@ (mov r8, r8)
10051a84:	1006cf3c 	.word	0x1006cf3c
10051a88:	1006cf44 	.word	0x1006cf44

10051a8c <BLEEVT_RegisterGattEvtHandler>:

  return;
}

int BLEEVT_RegisterGattEvtHandler(BLEEVT_GattEvtHandlerFunc_t EvtHandlerFunc)
{
10051a8c:	b580      	push	{r7, lr}
10051a8e:	b082      	sub	sp, #8
10051a90:	af00      	add	r7, sp, #0
10051a92:	6078      	str	r0, [r7, #4]
  if(BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers == BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS)
10051a94:	4b0c      	ldr	r3, [pc, #48]	@ (10051ac8 <BLEEVT_RegisterGattEvtHandler+0x3c>)
10051a96:	7a1b      	ldrb	r3, [r3, #8]
10051a98:	2b02      	cmp	r3, #2
10051a9a:	d102      	bne.n	10051aa2 <BLEEVT_RegisterGattEvtHandler+0x16>
  {
    return -1;
10051a9c:	2301      	movs	r3, #1
10051a9e:	425b      	negs	r3, r3
10051aa0:	e00d      	b.n	10051abe <BLEEVT_RegisterGattEvtHandler+0x32>
  }
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
  BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers] = EvtHandlerFunc;
10051aa2:	4b09      	ldr	r3, [pc, #36]	@ (10051ac8 <BLEEVT_RegisterGattEvtHandler+0x3c>)
10051aa4:	7a1b      	ldrb	r3, [r3, #8]
10051aa6:	001a      	movs	r2, r3
10051aa8:	4b07      	ldr	r3, [pc, #28]	@ (10051ac8 <BLEEVT_RegisterGattEvtHandler+0x3c>)
10051aaa:	0092      	lsls	r2, r2, #2
10051aac:	6879      	ldr	r1, [r7, #4]
10051aae:	50d1      	str	r1, [r2, r3]
  BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers++;
10051ab0:	4b05      	ldr	r3, [pc, #20]	@ (10051ac8 <BLEEVT_RegisterGattEvtHandler+0x3c>)
10051ab2:	7a1b      	ldrb	r3, [r3, #8]
10051ab4:	3301      	adds	r3, #1
10051ab6:	b2da      	uxtb	r2, r3
10051ab8:	4b03      	ldr	r3, [pc, #12]	@ (10051ac8 <BLEEVT_RegisterGattEvtHandler+0x3c>)
10051aba:	721a      	strb	r2, [r3, #8]
#else
  (void)(EvtHandlerFunc);
#endif

  return 0;
10051abc:	2300      	movs	r3, #0
}
10051abe:	0018      	movs	r0, r3
10051ac0:	46bd      	mov	sp, r7
10051ac2:	b002      	add	sp, #8
10051ac4:	bd80      	pop	{r7, pc}
10051ac6:	46c0      	nop			@ (mov r8, r8)
10051ac8:	20001068 	.word	0x20001068

10051acc <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
10051acc:	b5f0      	push	{r4, r5, r6, r7, lr}
10051ace:	b089      	sub	sp, #36	@ 0x24
10051ad0:	af00      	add	r7, sp, #0
10051ad2:	6078      	str	r0, [r7, #4]
10051ad4:	000a      	movs	r2, r1
10051ad6:	1cbb      	adds	r3, r7, #2
10051ad8:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
10051ada:	231f      	movs	r3, #31
10051adc:	18fb      	adds	r3, r7, r3
10051ade:	2200      	movs	r2, #0
10051ae0:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
10051ae2:	687b      	ldr	r3, [r7, #4]
10051ae4:	781b      	ldrb	r3, [r3, #0]
10051ae6:	2b04      	cmp	r3, #4
10051ae8:	d003      	beq.n	10051af2 <BLE_STACK_Event+0x26>
10051aea:	687b      	ldr	r3, [r7, #4]
10051aec:	781b      	ldrb	r3, [r3, #0]
10051aee:	2b82      	cmp	r3, #130	@ 0x82
10051af0:	d148      	bne.n	10051b84 <BLE_STACK_Event+0xb8>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
10051af2:	687b      	ldr	r3, [r7, #4]
10051af4:	3301      	adds	r3, #1
10051af6:	613b      	str	r3, [r7, #16]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
10051af8:	687b      	ldr	r3, [r7, #4]
10051afa:	781b      	ldrb	r3, [r3, #0]
10051afc:	2b04      	cmp	r3, #4
10051afe:	d103      	bne.n	10051b08 <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
10051b00:	693b      	ldr	r3, [r7, #16]
10051b02:	3302      	adds	r3, #2
10051b04:	61bb      	str	r3, [r7, #24]
10051b06:	e005      	b.n	10051b14 <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
10051b08:	687b      	ldr	r3, [r7, #4]
10051b0a:	3301      	adds	r3, #1
10051b0c:	60fb      	str	r3, [r7, #12]
      data = event_pckt->data;
10051b0e:	68fb      	ldr	r3, [r7, #12]
10051b10:	3303      	adds	r3, #3
10051b12:	61bb      	str	r3, [r7, #24]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
10051b14:	693b      	ldr	r3, [r7, #16]
10051b16:	781b      	ldrb	r3, [r3, #0]
10051b18:	2bff      	cmp	r3, #255	@ 0xff
10051b1a:	d133      	bne.n	10051b84 <BLE_STACK_Event+0xb8>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
10051b1c:	69bb      	ldr	r3, [r7, #24]
10051b1e:	60bb      	str	r3, [r7, #8]
      
      if((blecore_evt->ecode & BLEEVT_EGID_EVT_MASK) == BLEEVT_GATT_EVT_TYPE)
10051b20:	68bb      	ldr	r3, [r7, #8]
10051b22:	781a      	ldrb	r2, [r3, #0]
10051b24:	785b      	ldrb	r3, [r3, #1]
10051b26:	021b      	lsls	r3, r3, #8
10051b28:	4313      	orrs	r3, r2
10051b2a:	b29b      	uxth	r3, r3
10051b2c:	001a      	movs	r2, r3
10051b2e:	23fc      	movs	r3, #252	@ 0xfc
10051b30:	021b      	lsls	r3, r3, #8
10051b32:	401a      	ands	r2, r3
10051b34:	23c0      	movs	r3, #192	@ 0xc0
10051b36:	011b      	lsls	r3, r3, #4
10051b38:	429a      	cmp	r2, r3
10051b3a:	d123      	bne.n	10051b84 <BLE_STACK_Event+0xb8>
      {
        /* GATT events */
        
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
        /* For GATT event handler */
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
10051b3c:	2317      	movs	r3, #23
10051b3e:	18fb      	adds	r3, r7, r3
10051b40:	2200      	movs	r2, #0
10051b42:	701a      	strb	r2, [r3, #0]
10051b44:	e015      	b.n	10051b72 <BLE_STACK_Event+0xa6>
        {
          event_notification_status = BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[index](blecore_evt);
10051b46:	2517      	movs	r5, #23
10051b48:	197b      	adds	r3, r7, r5
10051b4a:	781a      	ldrb	r2, [r3, #0]
10051b4c:	4b14      	ldr	r3, [pc, #80]	@ (10051ba0 <BLE_STACK_Event+0xd4>)
10051b4e:	0092      	lsls	r2, r2, #2
10051b50:	58d3      	ldr	r3, [r2, r3]
10051b52:	261f      	movs	r6, #31
10051b54:	19bc      	adds	r4, r7, r6
10051b56:	68ba      	ldr	r2, [r7, #8]
10051b58:	0010      	movs	r0, r2
10051b5a:	4798      	blx	r3
10051b5c:	0003      	movs	r3, r0
10051b5e:	7023      	strb	r3, [r4, #0]
          /**
          * When a GATT event has been acknowledged by application, do not call other registered handler.
          * a GATT event may be relevant for only one Service
          */
          if (event_notification_status == BLEEVT_Ack)
10051b60:	19bb      	adds	r3, r7, r6
10051b62:	781b      	ldrb	r3, [r3, #0]
10051b64:	2b01      	cmp	r3, #1
10051b66:	d00c      	beq.n	10051b82 <BLE_STACK_Event+0xb6>
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
10051b68:	197b      	adds	r3, r7, r5
10051b6a:	781a      	ldrb	r2, [r3, #0]
10051b6c:	197b      	adds	r3, r7, r5
10051b6e:	3201      	adds	r2, #1
10051b70:	701a      	strb	r2, [r3, #0]
10051b72:	4b0b      	ldr	r3, [pc, #44]	@ (10051ba0 <BLE_STACK_Event+0xd4>)
10051b74:	7a1b      	ldrb	r3, [r3, #8]
10051b76:	2217      	movs	r2, #23
10051b78:	18ba      	adds	r2, r7, r2
10051b7a:	7812      	ldrb	r2, [r2, #0]
10051b7c:	429a      	cmp	r2, r3
10051b7e:	d3e2      	bcc.n	10051b46 <BLE_STACK_Event+0x7a>
10051b80:	e000      	b.n	10051b84 <BLE_STACK_Event+0xb8>
          {
            /**
            *  The event has been managed. The Event processing should be stopped
            */
            break;
10051b82:	46c0      	nop			@ (mov r8, r8)
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
10051b84:	231f      	movs	r3, #31
10051b86:	18fb      	adds	r3, r7, r3
10051b88:	781b      	ldrb	r3, [r3, #0]
10051b8a:	2b00      	cmp	r3, #0
10051b8c:	d103      	bne.n	10051b96 <BLE_STACK_Event+0xca>
  {
    BLEEVT_App_Notification(hci_pckt);
10051b8e:	687b      	ldr	r3, [r7, #4]
10051b90:	0018      	movs	r0, r3
10051b92:	f7f2 fa0b 	bl	10043fac <BLEEVT_App_Notification>
  }
}
10051b96:	46c0      	nop			@ (mov r8, r8)
10051b98:	46bd      	mov	sp, r7
10051b9a:	b009      	add	sp, #36	@ 0x24
10051b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10051b9e:	46c0      	nop			@ (mov r8, r8)
10051ba0:	20001068 	.word	0x20001068

10051ba4 <GAP_name_disc_proc_connected_check_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_name_disc_proc_connected_check_ucfg(uint16_t task_idx)
{
10051ba4:	b580      	push	{r7, lr}
10051ba6:	b082      	sub	sp, #8
10051ba8:	af00      	add	r7, sp, #0
10051baa:	0002      	movs	r2, r0
10051bac:	1dbb      	adds	r3, r7, #6
10051bae:	801a      	strh	r2, [r3, #0]
    GAP_name_disc_proc_connected_check(task_idx);
10051bb0:	1dbb      	adds	r3, r7, #6
10051bb2:	881b      	ldrh	r3, [r3, #0]
10051bb4:	0018      	movs	r0, r3
10051bb6:	f002 f9ef 	bl	10053f98 <GAP_name_disc_proc_connected_check>
}
10051bba:	46c0      	nop			@ (mov r8, r8)
10051bbc:	46bd      	mov	sp, r7
10051bbe:	b002      	add	sp, #8
10051bc0:	bd80      	pop	{r7, pc}

10051bc2 <GAP_LimDiscTimeoutcb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_LimDiscTimeoutcb_ucfg(uint8_t timer_id)
{
10051bc2:	b580      	push	{r7, lr}
10051bc4:	b082      	sub	sp, #8
10051bc6:	af00      	add	r7, sp, #0
10051bc8:	0002      	movs	r2, r0
10051bca:	1dfb      	adds	r3, r7, #7
10051bcc:	701a      	strb	r2, [r3, #0]
    GAP_LimDiscTimeoutcb(timer_id);
10051bce:	1dfb      	adds	r3, r7, #7
10051bd0:	781b      	ldrb	r3, [r3, #0]
10051bd2:	0018      	movs	r0, r3
10051bd4:	f002 fc24 	bl	10054420 <GAP_LimDiscTimeoutcb>
}
10051bd8:	46c0      	nop			@ (mov r8, r8)
10051bda:	46bd      	mov	sp, r7
10051bdc:	b002      	add	sp, #8
10051bde:	bd80      	pop	{r7, pc}

10051be0 <hci_acl_data_tx_cmpl_event_int_cb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_tx_cmpl_event_int_cb_ucfg(void* header_p,
                                                  uint8_t* buff_p)
{
10051be0:	b580      	push	{r7, lr}
10051be2:	b082      	sub	sp, #8
10051be4:	af00      	add	r7, sp, #0
10051be6:	6078      	str	r0, [r7, #4]
10051be8:	6039      	str	r1, [r7, #0]
    return hci_acl_data_tx_cmpl_event_int_cb(header_p,
10051bea:	683a      	ldr	r2, [r7, #0]
10051bec:	687b      	ldr	r3, [r7, #4]
10051bee:	0011      	movs	r1, r2
10051bf0:	0018      	movs	r0, r3
10051bf2:	f001 f9cb 	bl	10052f8c <hci_acl_data_tx_cmpl_event_int_cb>
10051bf6:	0003      	movs	r3, r0
                                             buff_p);
}
10051bf8:	0018      	movs	r0, r3
10051bfa:	46bd      	mov	sp, r7
10051bfc:	b002      	add	sp, #8
10051bfe:	bd80      	pop	{r7, pc}

10051c00 <hci_acl_data_ind_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_ind_event_int_cb_ucfg(void* header_p,
                                              uint8_t* buff_p)
{
10051c00:	b580      	push	{r7, lr}
10051c02:	b082      	sub	sp, #8
10051c04:	af00      	add	r7, sp, #0
10051c06:	6078      	str	r0, [r7, #4]
10051c08:	6039      	str	r1, [r7, #0]
    return hci_acl_data_ind_event_int_cb(header_p,
10051c0a:	683a      	ldr	r2, [r7, #0]
10051c0c:	687b      	ldr	r3, [r7, #4]
10051c0e:	0011      	movs	r1, r2
10051c10:	0018      	movs	r0, r3
10051c12:	f001 f9e5 	bl	10052fe0 <hci_acl_data_ind_event_int_cb>
10051c16:	0003      	movs	r3, r0
                                         buff_p);
}
10051c18:	0018      	movs	r0, r3
10051c1a:	46bd      	mov	sp, r7
10051c1c:	b002      	add	sp, #8
10051c1e:	bd80      	pop	{r7, pc}

10051c20 <LLC_offline_control_procedures_processing_ucfg>:
}
#endif /* (DTM_DEBUG_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_offline_control_procedures_processing_ucfg(uint16_t task_idx)
{
10051c20:	b580      	push	{r7, lr}
10051c22:	b082      	sub	sp, #8
10051c24:	af00      	add	r7, sp, #0
10051c26:	0002      	movs	r2, r0
10051c28:	1dbb      	adds	r3, r7, #6
10051c2a:	801a      	strh	r2, [r3, #0]
    LLC_offline_control_procedures_processing(task_idx);
10051c2c:	1dbb      	adds	r3, r7, #6
10051c2e:	881b      	ldrh	r3, [r3, #0]
10051c30:	0018      	movs	r0, r3
10051c32:	f005 fe1f 	bl	10057874 <LLC_offline_control_procedures_processing>
}
10051c36:	46c0      	nop			@ (mov r8, r8)
10051c38:	46bd      	mov	sp, r7
10051c3a:	b002      	add	sp, #8
10051c3c:	bd80      	pop	{r7, pc}

10051c3e <phy_upd_csr_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint32_t phy_upd_csr_ucfg(void)
{
10051c3e:	b580      	push	{r7, lr}
10051c40:	af00      	add	r7, sp, #0
    return phy_upd_csr();
10051c42:	f005 ffc8 	bl	10057bd6 <phy_upd_csr>
10051c46:	0003      	movs	r3, r0
}
10051c48:	0018      	movs	r0, r3
10051c4a:	46bd      	mov	sp, r7
10051c4c:	bd80      	pop	{r7, pc}

10051c4e <conn_supp_csr_ucfg>:
}
#endif /* (CONTROLLER_SCAN_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint32_t conn_supp_csr_ucfg(void)
{
10051c4e:	b580      	push	{r7, lr}
10051c50:	af00      	add	r7, sp, #0
    return conn_supp_csr();
10051c52:	f005 ffc4 	bl	10057bde <conn_supp_csr>
10051c56:	0003      	movs	r3, r0
}
10051c58:	0018      	movs	r0, r3
10051c5a:	46bd      	mov	sp, r7
10051c5c:	bd80      	pop	{r7, pc}

10051c5e <ACL_pkt_init_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus ACL_pkt_init_ucfg(void)
{
10051c5e:	b580      	push	{r7, lr}
10051c60:	af00      	add	r7, sp, #0
    return ACL_pkt_init();
10051c62:	f001 f9ed 	bl	10053040 <ACL_pkt_init>
10051c66:	0003      	movs	r3, r0
}
10051c68:	0018      	movs	r0, r3
10051c6a:	46bd      	mov	sp, r7
10051c6c:	bd80      	pop	{r7, pc}

10051c6e <hci_disconnection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_disconnection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
10051c6e:	b580      	push	{r7, lr}
10051c70:	b082      	sub	sp, #8
10051c72:	af00      	add	r7, sp, #0
10051c74:	6078      	str	r0, [r7, #4]
10051c76:	6039      	str	r1, [r7, #0]
    return hci_disconnection_complete_event_int_cb(header_p,
10051c78:	683a      	ldr	r2, [r7, #0]
10051c7a:	687b      	ldr	r3, [r7, #4]
10051c7c:	0011      	movs	r1, r2
10051c7e:	0018      	movs	r0, r3
10051c80:	f001 fdb2 	bl	100537e8 <hci_disconnection_complete_event_int_cb>
10051c84:	0003      	movs	r3, r0
                                                   buff_p);
}
10051c86:	0018      	movs	r0, r3
10051c88:	46bd      	mov	sp, r7
10051c8a:	b002      	add	sp, #8
10051c8c:	bd80      	pop	{r7, pc}

10051c8e <hci_encryption_change_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_change_event_int_cb_ucfg(void* header_p,
                                                   uint8_t* buff_p)
{
10051c8e:	b580      	push	{r7, lr}
10051c90:	b082      	sub	sp, #8
10051c92:	af00      	add	r7, sp, #0
10051c94:	6078      	str	r0, [r7, #4]
10051c96:	6039      	str	r1, [r7, #0]
    return hci_encryption_change_event_int_cb(header_p,
10051c98:	683a      	ldr	r2, [r7, #0]
10051c9a:	687b      	ldr	r3, [r7, #4]
10051c9c:	0011      	movs	r1, r2
10051c9e:	0018      	movs	r0, r3
10051ca0:	f001 fdd2 	bl	10053848 <hci_encryption_change_event_int_cb>
10051ca4:	0003      	movs	r3, r0
                                              buff_p);
}
10051ca6:	0018      	movs	r0, r3
10051ca8:	46bd      	mov	sp, r7
10051caa:	b002      	add	sp, #8
10051cac:	bd80      	pop	{r7, pc}

10051cae <hci_encryption_key_refresh_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_key_refresh_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
10051cae:	b580      	push	{r7, lr}
10051cb0:	b082      	sub	sp, #8
10051cb2:	af00      	add	r7, sp, #0
10051cb4:	6078      	str	r0, [r7, #4]
10051cb6:	6039      	str	r1, [r7, #0]
    return hci_encryption_key_refresh_complete_event_int_cb(header_p,
10051cb8:	683a      	ldr	r2, [r7, #0]
10051cba:	687b      	ldr	r3, [r7, #4]
10051cbc:	0011      	movs	r1, r2
10051cbe:	0018      	movs	r0, r3
10051cc0:	f001 fdde 	bl	10053880 <hci_encryption_key_refresh_complete_event_int_cb>
10051cc4:	0003      	movs	r3, r0
                                                            buff_p);
}
10051cc6:	0018      	movs	r0, r3
10051cc8:	46bd      	mov	sp, r7
10051cca:	b002      	add	sp, #8
10051ccc:	bd80      	pop	{r7, pc}

10051cce <hci_le_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_connection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
10051cce:	b580      	push	{r7, lr}
10051cd0:	b082      	sub	sp, #8
10051cd2:	af00      	add	r7, sp, #0
10051cd4:	6078      	str	r0, [r7, #4]
10051cd6:	6039      	str	r1, [r7, #0]
    return hci_le_connection_complete_event_int_cb(header_p,
10051cd8:	683a      	ldr	r2, [r7, #0]
10051cda:	687b      	ldr	r3, [r7, #4]
10051cdc:	0011      	movs	r1, r2
10051cde:	0018      	movs	r0, r3
10051ce0:	f001 fdea 	bl	100538b8 <hci_le_connection_complete_event_int_cb>
10051ce4:	0003      	movs	r3, r0
                                                   buff_p);
}
10051ce6:	0018      	movs	r0, r3
10051ce8:	46bd      	mov	sp, r7
10051cea:	b002      	add	sp, #8
10051cec:	bd80      	pop	{r7, pc}

10051cee <hci_le_enhanced_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_enhanced_connection_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
10051cee:	b580      	push	{r7, lr}
10051cf0:	b082      	sub	sp, #8
10051cf2:	af00      	add	r7, sp, #0
10051cf4:	6078      	str	r0, [r7, #4]
10051cf6:	6039      	str	r1, [r7, #0]
    return hci_le_enhanced_connection_complete_event_int_cb(header_p,
10051cf8:	683a      	ldr	r2, [r7, #0]
10051cfa:	687b      	ldr	r3, [r7, #4]
10051cfc:	0011      	movs	r1, r2
10051cfe:	0018      	movs	r0, r3
10051d00:	f001 fe1a 	bl	10053938 <hci_le_enhanced_connection_complete_event_int_cb>
10051d04:	0003      	movs	r3, r0
                                                            buff_p);
}
10051d06:	0018      	movs	r0, r3
10051d08:	46bd      	mov	sp, r7
10051d0a:	b002      	add	sp, #8
10051d0c:	bd80      	pop	{r7, pc}

10051d0e <hci_le_long_term_key_request_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_long_term_key_request_event_int_cb_ucfg(void* header_p,
                                                          uint8_t* buff_p)
{
10051d0e:	b580      	push	{r7, lr}
10051d10:	b082      	sub	sp, #8
10051d12:	af00      	add	r7, sp, #0
10051d14:	6078      	str	r0, [r7, #4]
10051d16:	6039      	str	r1, [r7, #0]
    return hci_le_long_term_key_request_event_int_cb(header_p,
10051d18:	683a      	ldr	r2, [r7, #0]
10051d1a:	687b      	ldr	r3, [r7, #4]
10051d1c:	0011      	movs	r1, r2
10051d1e:	0018      	movs	r0, r3
10051d20:	f001 fe50 	bl	100539c4 <hci_le_long_term_key_request_event_int_cb>
10051d24:	0003      	movs	r3, r0
                                                     buff_p);
}
10051d26:	0018      	movs	r0, r3
10051d28:	46bd      	mov	sp, r7
10051d2a:	b002      	add	sp, #8
10051d2c:	bd80      	pop	{r7, pc}

10051d2e <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg(void* header_p,
                                                                        uint8_t* buff_p)
{
10051d2e:	b580      	push	{r7, lr}
10051d30:	b082      	sub	sp, #8
10051d32:	af00      	add	r7, sp, #0
10051d34:	6078      	str	r0, [r7, #4]
10051d36:	6039      	str	r1, [r7, #0]
    return hci_le_read_local_p256_public_key_complete_event_int_cb(header_p,
10051d38:	683a      	ldr	r2, [r7, #0]
10051d3a:	687b      	ldr	r3, [r7, #4]
10051d3c:	0011      	movs	r1, r2
10051d3e:	0018      	movs	r0, r3
10051d40:	f001 fe70 	bl	10053a24 <hci_le_read_local_p256_public_key_complete_event_int_cb>
10051d44:	0003      	movs	r3, r0
                                                                   buff_p);
}
10051d46:	0018      	movs	r0, r3
10051d48:	46bd      	mov	sp, r7
10051d4a:	b002      	add	sp, #8
10051d4c:	bd80      	pop	{r7, pc}

10051d4e <hci_le_generate_dhkey_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_generate_dhkey_complete_event_int_cb_ucfg(void* header_p,
                                                            uint8_t* buff_p)
{
10051d4e:	b580      	push	{r7, lr}
10051d50:	b082      	sub	sp, #8
10051d52:	af00      	add	r7, sp, #0
10051d54:	6078      	str	r0, [r7, #4]
10051d56:	6039      	str	r1, [r7, #0]
    return hci_le_generate_dhkey_complete_event_int_cb(header_p,
10051d58:	683a      	ldr	r2, [r7, #0]
10051d5a:	687b      	ldr	r3, [r7, #4]
10051d5c:	0011      	movs	r1, r2
10051d5e:	0018      	movs	r0, r3
10051d60:	f001 fe7e 	bl	10053a60 <hci_le_generate_dhkey_complete_event_int_cb>
10051d64:	0003      	movs	r3, r0
                                                       buff_p);
}
10051d66:	0018      	movs	r0, r3
10051d68:	46bd      	mov	sp, r7
10051d6a:	b002      	add	sp, #8
10051d6c:	bd80      	pop	{r7, pc}

10051d6e <MBM_init_ucfg>:
      (CONTROLLER_PERIODIC_ADV_ENABLED == 1) &&\
      (CONTROLLER_BIS_ENABLED == 1)\
     )\
    )
tBleStatus MBM_init_ucfg(void)
{
10051d6e:	b580      	push	{r7, lr}
10051d70:	af00      	add	r7, sp, #0
    return MBM_init();
10051d72:	f00c ff7d 	bl	1005ec70 <MBM_init>
10051d76:	0003      	movs	r3, r0
}
10051d78:	0018      	movs	r0, r3
10051d7a:	46bd      	mov	sp, r7
10051d7c:	bd80      	pop	{r7, pc}

10051d7e <secure_connections_csr_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
uint32_t secure_connections_csr_ucfg(void)
{
10051d7e:	b580      	push	{r7, lr}
10051d80:	af00      	add	r7, sp, #0
    return secure_connections_csr();
10051d82:	f00f ff2f 	bl	10061be4 <secure_connections_csr>
10051d86:	0003      	movs	r3, r0
}
10051d88:	0018      	movs	r0, r3
10051d8a:	46bd      	mov	sp, r7
10051d8c:	bd80      	pop	{r7, pc}

10051d8e <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg>:
#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg(uint8_t status,
                                                                      uint8_t local_p256_public_key[64])
{
10051d8e:	b580      	push	{r7, lr}
10051d90:	b082      	sub	sp, #8
10051d92:	af00      	add	r7, sp, #0
10051d94:	0002      	movs	r2, r0
10051d96:	6039      	str	r1, [r7, #0]
10051d98:	1dfb      	adds	r3, r7, #7
10051d9a:	701a      	strb	r2, [r3, #0]
    smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl(status,
10051d9c:	683a      	ldr	r2, [r7, #0]
10051d9e:	1dfb      	adds	r3, r7, #7
10051da0:	781b      	ldrb	r3, [r3, #0]
10051da2:	0011      	movs	r1, r2
10051da4:	0018      	movs	r0, r3
10051da6:	f00f fec5 	bl	10061b34 <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl>
                                                                local_p256_public_key);
}
10051daa:	46c0      	nop			@ (mov r8, r8)
10051dac:	46bd      	mov	sp, r7
10051dae:	b002      	add	sp, #8
10051db0:	bd80      	pop	{r7, pc}

10051db2 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg>:
#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg(uint8_t status,
                                                          uint8_t dhkey[32])
{
10051db2:	b580      	push	{r7, lr}
10051db4:	b082      	sub	sp, #8
10051db6:	af00      	add	r7, sp, #0
10051db8:	0002      	movs	r2, r0
10051dba:	6039      	str	r1, [r7, #0]
10051dbc:	1dfb      	adds	r3, r7, #7
10051dbe:	701a      	strb	r2, [r3, #0]
    smp_sap_hci_le_generate_dhkey_complete_evt_hndl(status,
10051dc0:	683a      	ldr	r2, [r7, #0]
10051dc2:	1dfb      	adds	r3, r7, #7
10051dc4:	781b      	ldrb	r3, [r3, #0]
10051dc6:	0011      	movs	r1, r2
10051dc8:	0018      	movs	r0, r3
10051dca:	f00f fecb 	bl	10061b64 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl>
                                                    dhkey);
}
10051dce:	46c0      	nop			@ (mov r8, r8)
10051dd0:	46bd      	mov	sp, r7
10051dd2:	b002      	add	sp, #8
10051dd4:	bd80      	pop	{r7, pc}

10051dd6 <L2C_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus L2C_init_ucfg(uint8_t cos_enabled)
{
10051dd6:	b580      	push	{r7, lr}
10051dd8:	b082      	sub	sp, #8
10051dda:	af00      	add	r7, sp, #0
10051ddc:	0002      	movs	r2, r0
10051dde:	1dfb      	adds	r3, r7, #7
10051de0:	701a      	strb	r2, [r3, #0]
    return L2C_init(cos_enabled);
10051de2:	1dfb      	adds	r3, r7, #7
10051de4:	781b      	ldrb	r3, [r3, #0]
10051de6:	0018      	movs	r0, r3
10051de8:	f006 f8da 	bl	10057fa0 <L2C_init>
10051dec:	0003      	movs	r3, r0
}
10051dee:	0018      	movs	r0, r3
10051df0:	46bd      	mov	sp, r7
10051df2:	b002      	add	sp, #8
10051df4:	bd80      	pop	{r7, pc}

10051df6 <llc_conn_mem_allocate_ucfg>:
                                uint8_t cte_en,
                                uint8_t pcl_en,
                                uint8_t cns_en,
                                uint8_t chc_en,
                                uint8_t padv_en)
{
10051df6:	b5b0      	push	{r4, r5, r7, lr}
10051df8:	b084      	sub	sp, #16
10051dfa:	af02      	add	r7, sp, #8
10051dfc:	0005      	movs	r5, r0
10051dfe:	000c      	movs	r4, r1
10051e00:	0010      	movs	r0, r2
10051e02:	0019      	movs	r1, r3
10051e04:	1dfb      	adds	r3, r7, #7
10051e06:	1c2a      	adds	r2, r5, #0
10051e08:	701a      	strb	r2, [r3, #0]
10051e0a:	1dbb      	adds	r3, r7, #6
10051e0c:	1c22      	adds	r2, r4, #0
10051e0e:	701a      	strb	r2, [r3, #0]
10051e10:	1d7b      	adds	r3, r7, #5
10051e12:	1c02      	adds	r2, r0, #0
10051e14:	701a      	strb	r2, [r3, #0]
10051e16:	1d3b      	adds	r3, r7, #4
10051e18:	1c0a      	adds	r2, r1, #0
10051e1a:	701a      	strb	r2, [r3, #0]
    llc_conn_mem_allocate(phy_upd_en,
10051e1c:	1d3b      	adds	r3, r7, #4
10051e1e:	781c      	ldrb	r4, [r3, #0]
10051e20:	1d7b      	adds	r3, r7, #5
10051e22:	781a      	ldrb	r2, [r3, #0]
10051e24:	1dbb      	adds	r3, r7, #6
10051e26:	7819      	ldrb	r1, [r3, #0]
10051e28:	1dfb      	adds	r3, r7, #7
10051e2a:	7818      	ldrb	r0, [r3, #0]
10051e2c:	231c      	movs	r3, #28
10051e2e:	18fb      	adds	r3, r7, r3
10051e30:	781b      	ldrb	r3, [r3, #0]
10051e32:	9301      	str	r3, [sp, #4]
10051e34:	2318      	movs	r3, #24
10051e36:	18fb      	adds	r3, r7, r3
10051e38:	781b      	ldrb	r3, [r3, #0]
10051e3a:	9300      	str	r3, [sp, #0]
10051e3c:	0023      	movs	r3, r4
10051e3e:	f006 fcb3 	bl	100587a8 <llc_conn_mem_allocate>
                          cte_en,
                          pcl_en,
                          cns_en,
                          chc_en,
                          padv_en);
}
10051e42:	46c0      	nop			@ (mov r8, r8)
10051e44:	46bd      	mov	sp, r7
10051e46:	b002      	add	sp, #8
10051e48:	bdb0      	pop	{r4, r5, r7, pc}

10051e4a <llc_conn_peripheral_roll_back_params_tsk_ucfg>:
}
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void llc_conn_peripheral_roll_back_params_tsk_ucfg(uint16_t task_idx)
{
10051e4a:	b580      	push	{r7, lr}
10051e4c:	b082      	sub	sp, #8
10051e4e:	af00      	add	r7, sp, #0
10051e50:	0002      	movs	r2, r0
10051e52:	1dbb      	adds	r3, r7, #6
10051e54:	801a      	strh	r2, [r3, #0]
    llc_conn_peripheral_roll_back_params_tsk(task_idx);
10051e56:	1dbb      	adds	r3, r7, #6
10051e58:	881b      	ldrh	r3, [r3, #0]
10051e5a:	0018      	movs	r0, r3
10051e5c:	f007 feda 	bl	10059c14 <llc_conn_peripheral_roll_back_params_tsk>
}
10051e60:	46c0      	nop			@ (mov r8, r8)
10051e62:	46bd      	mov	sp, r7
10051e64:	b002      	add	sp, #8
10051e66:	bd80      	pop	{r7, pc}

10051e68 <llc_cpe_tsk_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void llc_cpe_tsk_ucfg(uint16_t task_idx)
{
10051e68:	b580      	push	{r7, lr}
10051e6a:	b082      	sub	sp, #8
10051e6c:	af00      	add	r7, sp, #0
10051e6e:	0002      	movs	r2, r0
10051e70:	1dbb      	adds	r3, r7, #6
10051e72:	801a      	strh	r2, [r3, #0]
    llc_cpe_tsk(task_idx);
10051e74:	1dbb      	adds	r3, r7, #6
10051e76:	881b      	ldrh	r3, [r3, #0]
10051e78:	0018      	movs	r0, r3
10051e7a:	f008 fa65 	bl	1005a348 <llc_cpe_tsk>
}
10051e7e:	46c0      	nop			@ (mov r8, r8)
10051e80:	46bd      	mov	sp, r7
10051e82:	b002      	add	sp, #8
10051e84:	bd80      	pop	{r7, pc}

10051e86 <LL_conn_upd_max_tx_time_coded_ucfg>:
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_max_tx_time_coded_ucfg(void* params)
{
10051e86:	b580      	push	{r7, lr}
10051e88:	b082      	sub	sp, #8
10051e8a:	af00      	add	r7, sp, #0
10051e8c:	6078      	str	r0, [r7, #4]
    LL_conn_upd_max_tx_time_coded(params);
10051e8e:	687b      	ldr	r3, [r7, #4]
10051e90:	0018      	movs	r0, r3
10051e92:	f009 fa19 	bl	1005b2c8 <LL_conn_upd_max_tx_time_coded>
}
10051e96:	46c0      	nop			@ (mov r8, r8)
10051e98:	46bd      	mov	sp, r7
10051e9a:	b002      	add	sp, #8
10051e9c:	bd80      	pop	{r7, pc}

10051e9e <LL_conn_upd_data_length_change_event_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_data_length_change_event_ucfg(void* params)
{
10051e9e:	b580      	push	{r7, lr}
10051ea0:	b082      	sub	sp, #8
10051ea2:	af00      	add	r7, sp, #0
10051ea4:	6078      	str	r0, [r7, #4]
    LL_conn_upd_data_length_change_event(params);
10051ea6:	687b      	ldr	r3, [r7, #4]
10051ea8:	0018      	movs	r0, r3
10051eaa:	f009 fa91 	bl	1005b3d0 <LL_conn_upd_data_length_change_event>
}
10051eae:	46c0      	nop			@ (mov r8, r8)
10051eb0:	46bd      	mov	sp, r7
10051eb2:	b002      	add	sp, #8
10051eb4:	bd80      	pop	{r7, pc}

10051eb6 <LLC_authenticated_payload_timeout_processing_ucfg>:
#endif /* (CONTROLLER_DATA_LENGTH_EXTENSION_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_authenticated_payload_timeout_processing_ucfg(uint16_t task_idx)
{
10051eb6:	b580      	push	{r7, lr}
10051eb8:	b082      	sub	sp, #8
10051eba:	af00      	add	r7, sp, #0
10051ebc:	0002      	movs	r2, r0
10051ebe:	1dbb      	adds	r3, r7, #6
10051ec0:	801a      	strh	r2, [r3, #0]
    LLC_authenticated_payload_timeout_processing(task_idx);
10051ec2:	1dbb      	adds	r3, r7, #6
10051ec4:	881b      	ldrh	r3, [r3, #0]
10051ec6:	0018      	movs	r0, r3
10051ec8:	f00a f87e 	bl	1005bfc8 <LLC_authenticated_payload_timeout_processing>
}
10051ecc:	46c0      	nop			@ (mov r8, r8)
10051ece:	46bd      	mov	sp, r7
10051ed0:	b002      	add	sp, #8
10051ed2:	bd80      	pop	{r7, pc}

10051ed4 <LL_phy_upd_pending_ucfg>:
          (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint8_t LL_phy_upd_pending_ucfg(uint8_t conn_idx)
{
10051ed4:	b580      	push	{r7, lr}
10051ed6:	b082      	sub	sp, #8
10051ed8:	af00      	add	r7, sp, #0
10051eda:	0002      	movs	r2, r0
10051edc:	1dfb      	adds	r3, r7, #7
10051ede:	701a      	strb	r2, [r3, #0]
    return LL_phy_upd_pending(conn_idx);
10051ee0:	1dfb      	adds	r3, r7, #7
10051ee2:	781b      	ldrb	r3, [r3, #0]
10051ee4:	0018      	movs	r0, r3
10051ee6:	f00a fa3c 	bl	1005c362 <LL_phy_upd_pending>
10051eea:	0003      	movs	r3, r0
}
10051eec:	0018      	movs	r0, r3
10051eee:	46bd      	mov	sp, r7
10051ef0:	b002      	add	sp, #8
10051ef2:	bd80      	pop	{r7, pc}

10051ef4 <llc_phy_upd_register_cpf_ucfg>:
#endif /* (CONTROLLER_2M_CODED_PHY_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void llc_phy_upd_register_cpf_ucfg(void)
{
10051ef4:	b580      	push	{r7, lr}
10051ef6:	af00      	add	r7, sp, #0
    llc_phy_upd_register_cpf();
10051ef8:	f00a fa74 	bl	1005c3e4 <llc_phy_upd_register_cpf>
}
10051efc:	46c0      	nop			@ (mov r8, r8)
10051efe:	46bd      	mov	sp, r7
10051f00:	bd80      	pop	{r7, pc}

10051f02 <LL_phy_update_init_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_ucfg(void)
{
10051f02:	b580      	push	{r7, lr}
10051f04:	af00      	add	r7, sp, #0
    return LL_phy_update_init();
10051f06:	f00a f9e7 	bl	1005c2d8 <LL_phy_update_init>
10051f0a:	0003      	movs	r3, r0
}
10051f0c:	0018      	movs	r0, r3
10051f0e:	46bd      	mov	sp, r7
10051f10:	bd80      	pop	{r7, pc}

10051f12 <LL_phy_update_init_per_st_data_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_per_st_data_ucfg(uint8_t conn_idx)
{
10051f12:	b580      	push	{r7, lr}
10051f14:	b082      	sub	sp, #8
10051f16:	af00      	add	r7, sp, #0
10051f18:	0002      	movs	r2, r0
10051f1a:	1dfb      	adds	r3, r7, #7
10051f1c:	701a      	strb	r2, [r3, #0]
    return LL_phy_update_init_per_st_data(conn_idx);
10051f1e:	1dfb      	adds	r3, r7, #7
10051f20:	781b      	ldrb	r3, [r3, #0]
10051f22:	0018      	movs	r0, r3
10051f24:	f00a f9e2 	bl	1005c2ec <LL_phy_update_init_per_st_data>
10051f28:	0003      	movs	r3, r0
}
10051f2a:	0018      	movs	r0, r3
10051f2c:	46bd      	mov	sp, r7
10051f2e:	b002      	add	sp, #8
10051f30:	bd80      	pop	{r7, pc}

10051f32 <LL_phy_upd_evt_pending_check_isr_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_phy_upd_evt_pending_check_isr_ucfg(uint8_t conn_idx)
{
10051f32:	b580      	push	{r7, lr}
10051f34:	b082      	sub	sp, #8
10051f36:	af00      	add	r7, sp, #0
10051f38:	0002      	movs	r2, r0
10051f3a:	1dfb      	adds	r3, r7, #7
10051f3c:	701a      	strb	r2, [r3, #0]
    LL_phy_upd_evt_pending_check_isr(conn_idx);
10051f3e:	1dfb      	adds	r3, r7, #7
10051f40:	781b      	ldrb	r3, [r3, #0]
10051f42:	0018      	movs	r0, r3
10051f44:	f00a fde0 	bl	1005cb08 <LL_phy_upd_evt_pending_check_isr>
}
10051f48:	46c0      	nop			@ (mov r8, r8)
10051f4a:	46bd      	mov	sp, r7
10051f4c:	b002      	add	sp, #8
10051f4e:	bd80      	pop	{r7, pc}

10051f50 <ADV_ISR_connect_request_received_ucfg>:

#if (CONNECTION_ENABLED == 1)
void ADV_ISR_connect_request_received_ucfg(void* pointer,
                                           uint8_t* packet,
                                           void* PeerIDAddress_p)
{
10051f50:	b580      	push	{r7, lr}
10051f52:	b084      	sub	sp, #16
10051f54:	af00      	add	r7, sp, #0
10051f56:	60f8      	str	r0, [r7, #12]
10051f58:	60b9      	str	r1, [r7, #8]
10051f5a:	607a      	str	r2, [r7, #4]
    ADV_ISR_connect_request_received(pointer,
10051f5c:	687a      	ldr	r2, [r7, #4]
10051f5e:	68b9      	ldr	r1, [r7, #8]
10051f60:	68fb      	ldr	r3, [r7, #12]
10051f62:	0018      	movs	r0, r3
10051f64:	f00b feaa 	bl	1005dcbc <ADV_ISR_connect_request_received>
                                     packet,
                                     PeerIDAddress_p);
}
10051f68:	46c0      	nop			@ (mov r8, r8)
10051f6a:	46bd      	mov	sp, r7
10051f6c:	b004      	add	sp, #16
10051f6e:	bd80      	pop	{r7, pc}

10051f70 <EADV_start_request_radio_tasks_ucfg>:
}
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint8_t EADV_start_request_radio_tasks_ucfg(void* pointer)
{
10051f70:	b580      	push	{r7, lr}
10051f72:	b082      	sub	sp, #8
10051f74:	af00      	add	r7, sp, #0
10051f76:	6078      	str	r0, [r7, #4]
    return EADV_start_request_radio_tasks(pointer);
10051f78:	687b      	ldr	r3, [r7, #4]
10051f7a:	0018      	movs	r0, r3
10051f7c:	f00c f832 	bl	1005dfe4 <EADV_start_request_radio_tasks>
10051f80:	0003      	movs	r3, r0
}
10051f82:	0018      	movs	r0, r3
10051f84:	46bd      	mov	sp, r7
10051f86:	b002      	add	sp, #8
10051f88:	bd80      	pop	{r7, pc}

10051f8a <LL_init_ucfg>:
                  uint8_t PerAdvScanWr,
                  uint8_t Cte,
                  uint8_t Pcl,
                  uint8_t Cns,
                  uint8_t Chc)
{
10051f8a:	b5b0      	push	{r4, r5, r7, lr}
10051f8c:	b08a      	sub	sp, #40	@ 0x28
10051f8e:	af08      	add	r7, sp, #32
10051f90:	0005      	movs	r5, r0
10051f92:	000c      	movs	r4, r1
10051f94:	0010      	movs	r0, r2
10051f96:	0019      	movs	r1, r3
10051f98:	1dfb      	adds	r3, r7, #7
10051f9a:	1c2a      	adds	r2, r5, #0
10051f9c:	701a      	strb	r2, [r3, #0]
10051f9e:	1dbb      	adds	r3, r7, #6
10051fa0:	1c22      	adds	r2, r4, #0
10051fa2:	701a      	strb	r2, [r3, #0]
10051fa4:	1d7b      	adds	r3, r7, #5
10051fa6:	1c02      	adds	r2, r0, #0
10051fa8:	701a      	strb	r2, [r3, #0]
10051faa:	1d3b      	adds	r3, r7, #4
10051fac:	1c0a      	adds	r2, r1, #0
10051fae:	701a      	strb	r2, [r3, #0]
    LL_init(dataLenExt,
10051fb0:	1d3b      	adds	r3, r7, #4
10051fb2:	781c      	ldrb	r4, [r3, #0]
10051fb4:	1d7b      	adds	r3, r7, #5
10051fb6:	781a      	ldrb	r2, [r3, #0]
10051fb8:	1dbb      	adds	r3, r7, #6
10051fba:	7819      	ldrb	r1, [r3, #0]
10051fbc:	1dfb      	adds	r3, r7, #7
10051fbe:	7818      	ldrb	r0, [r3, #0]
10051fc0:	2330      	movs	r3, #48	@ 0x30
10051fc2:	18fb      	adds	r3, r7, r3
10051fc4:	781b      	ldrb	r3, [r3, #0]
10051fc6:	9306      	str	r3, [sp, #24]
10051fc8:	232c      	movs	r3, #44	@ 0x2c
10051fca:	18fb      	adds	r3, r7, r3
10051fcc:	781b      	ldrb	r3, [r3, #0]
10051fce:	9305      	str	r3, [sp, #20]
10051fd0:	2328      	movs	r3, #40	@ 0x28
10051fd2:	18fb      	adds	r3, r7, r3
10051fd4:	781b      	ldrb	r3, [r3, #0]
10051fd6:	9304      	str	r3, [sp, #16]
10051fd8:	2324      	movs	r3, #36	@ 0x24
10051fda:	18fb      	adds	r3, r7, r3
10051fdc:	781b      	ldrb	r3, [r3, #0]
10051fde:	9303      	str	r3, [sp, #12]
10051fe0:	2320      	movs	r3, #32
10051fe2:	18fb      	adds	r3, r7, r3
10051fe4:	781b      	ldrb	r3, [r3, #0]
10051fe6:	9302      	str	r3, [sp, #8]
10051fe8:	231c      	movs	r3, #28
10051fea:	18fb      	adds	r3, r7, r3
10051fec:	781b      	ldrb	r3, [r3, #0]
10051fee:	9301      	str	r3, [sp, #4]
10051ff0:	2318      	movs	r3, #24
10051ff2:	18fb      	adds	r3, r7, r3
10051ff4:	781b      	ldrb	r3, [r3, #0]
10051ff6:	9300      	str	r3, [sp, #0]
10051ff8:	0023      	movs	r3, r4
10051ffa:	f00c fa8b 	bl	1005e514 <LL_init>
            PerAdvScanWr,
            Cte,
            Pcl,
            Cns,
            Chc);
}
10051ffe:	46c0      	nop			@ (mov r8, r8)
10052000:	46bd      	mov	sp, r7
10052002:	b002      	add	sp, #8
10052004:	bdb0      	pop	{r4, r5, r7, pc}

10052006 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg(void* params)
{
10052006:	b580      	push	{r7, lr}
10052008:	b082      	sub	sp, #8
1005200a:	af00      	add	r7, sp, #0
1005200c:	6078      	str	r0, [r7, #4]
    smp_pp2_per_auth_stage1_start_excerpt_scp(params);
1005200e:	687b      	ldr	r3, [r7, #4]
10052010:	0018      	movs	r0, r3
10052012:	f00e f9cf 	bl	100603b4 <smp_pp2_per_auth_stage1_start_excerpt_scp>
}
10052016:	46c0      	nop			@ (mov r8, r8)
10052018:	46bd      	mov	sp, r7
1005201a:	b002      	add	sp, #8
1005201c:	bd80      	pop	{r7, pc}

1005201e <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg(void* params)
{
1005201e:	b580      	push	{r7, lr}
10052020:	b082      	sub	sp, #8
10052022:	af00      	add	r7, sp, #0
10052024:	6078      	str	r0, [r7, #4]
    smp_pp2_per_rx_process_pairing_confirm_excerpt_scp(params);
10052026:	687b      	ldr	r3, [r7, #4]
10052028:	0018      	movs	r0, r3
1005202a:	f00e fa1b 	bl	10060464 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp>
}
1005202e:	46c0      	nop			@ (mov r8, r8)
10052030:	46bd      	mov	sp, r7
10052032:	b002      	add	sp, #8
10052034:	bd80      	pop	{r7, pc}

10052036 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg(void* params)
{
10052036:	b580      	push	{r7, lr}
10052038:	b082      	sub	sp, #8
1005203a:	af00      	add	r7, sp, #0
1005203c:	6078      	str	r0, [r7, #4]
    smp_pp2_per_rx_process_pairing_random_excerpt_scp(params);
1005203e:	687b      	ldr	r3, [r7, #4]
10052040:	0018      	movs	r0, r3
10052042:	f00e fa2f 	bl	100604a4 <smp_pp2_per_rx_process_pairing_random_excerpt_scp>
}
10052046:	46c0      	nop			@ (mov r8, r8)
10052048:	46bd      	mov	sp, r7
1005204a:	b002      	add	sp, #8
1005204c:	bd80      	pop	{r7, pc}

1005204e <smp_scp_init_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_scp_init_ucfg(uint8_t use_debug_key)
{
1005204e:	b580      	push	{r7, lr}
10052050:	b082      	sub	sp, #8
10052052:	af00      	add	r7, sp, #0
10052054:	0002      	movs	r2, r0
10052056:	1dfb      	adds	r3, r7, #7
10052058:	701a      	strb	r2, [r3, #0]
    smp_scp_init(use_debug_key);
1005205a:	1dfb      	adds	r3, r7, #7
1005205c:	781b      	ldrb	r3, [r3, #0]
1005205e:	0018      	movs	r0, r3
10052060:	f00e fc42 	bl	100608e8 <smp_scp_init>
}
10052064:	46c0      	nop			@ (mov r8, r8)
10052066:	46bd      	mov	sp, r7
10052068:	b002      	add	sp, #8
1005206a:	bd80      	pop	{r7, pc}

1005206c <smp_scp_continue_on_exclusive_sc_pairing_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
tBleStatus smp_scp_continue_on_exclusive_sc_pairing_ucfg(void* params)
{
1005206c:	b580      	push	{r7, lr}
1005206e:	b082      	sub	sp, #8
10052070:	af00      	add	r7, sp, #0
10052072:	6078      	str	r0, [r7, #4]
    return smp_scp_continue_on_exclusive_sc_pairing(params);
10052074:	687b      	ldr	r3, [r7, #4]
10052076:	0018      	movs	r0, r3
10052078:	f00e fc76 	bl	10060968 <smp_scp_continue_on_exclusive_sc_pairing>
1005207c:	0003      	movs	r3, r0
}
1005207e:	0018      	movs	r0, r3
10052080:	46bd      	mov	sp, r7
10052082:	b002      	add	sp, #8
10052084:	bd80      	pop	{r7, pc}

10052086 <smp_scp_public_key_prepare_and_exchange_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
tBleStatus smp_scp_public_key_prepare_and_exchange_ucfg(void* params)
{
10052086:	b580      	push	{r7, lr}
10052088:	b082      	sub	sp, #8
1005208a:	af00      	add	r7, sp, #0
1005208c:	6078      	str	r0, [r7, #4]
    return smp_scp_public_key_prepare_and_exchange(params);
1005208e:	687b      	ldr	r3, [r7, #4]
10052090:	0018      	movs	r0, r3
10052092:	f00e fd4b 	bl	10060b2c <smp_scp_public_key_prepare_and_exchange>
10052096:	0003      	movs	r3, r0
}
10052098:	0018      	movs	r0, r3
1005209a:	46bd      	mov	sp, r7
1005209c:	b002      	add	sp, #8
1005209e:	bd80      	pop	{r7, pc}

100520a0 <smp_scp_stats_update_on_pairing_complete_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_scp_stats_update_on_pairing_complete_ucfg(void* params)
{
100520a0:	b580      	push	{r7, lr}
100520a2:	b082      	sub	sp, #8
100520a4:	af00      	add	r7, sp, #0
100520a6:	6078      	str	r0, [r7, #4]
    smp_scp_stats_update_on_pairing_complete(params);
100520a8:	687b      	ldr	r3, [r7, #4]
100520aa:	0018      	movs	r0, r3
100520ac:	f00e ff54 	bl	10060f58 <smp_scp_stats_update_on_pairing_complete>
}
100520b0:	46c0      	nop			@ (mov r8, r8)
100520b2:	46bd      	mov	sp, r7
100520b4:	b002      	add	sp, #8
100520b6:	bd80      	pop	{r7, pc}

100520b8 <smp_fsm_process_actions_wrt_state_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_fsm_process_actions_wrt_state_tsk_ucfg(uint16_t task_idx)
{
100520b8:	b580      	push	{r7, lr}
100520ba:	b082      	sub	sp, #8
100520bc:	af00      	add	r7, sp, #0
100520be:	0002      	movs	r2, r0
100520c0:	1dbb      	adds	r3, r7, #6
100520c2:	801a      	strh	r2, [r3, #0]
    smp_fsm_process_actions_wrt_state_tsk(task_idx);
100520c4:	1dbb      	adds	r3, r7, #6
100520c6:	881b      	ldrh	r3, [r3, #0]
100520c8:	0018      	movs	r0, r3
100520ca:	f00e ff7f 	bl	10060fcc <smp_fsm_process_actions_wrt_state_tsk>
}
100520ce:	46c0      	nop			@ (mov r8, r8)
100520d0:	46bd      	mov	sp, r7
100520d2:	b002      	add	sp, #8
100520d4:	bd80      	pop	{r7, pc}

100520d6 <smp_fsm_execute_actions_scp_phase2as2_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1))
void smp_fsm_execute_actions_scp_phase2as2_ucfg(void* params)
{
100520d6:	b580      	push	{r7, lr}
100520d8:	b082      	sub	sp, #8
100520da:	af00      	add	r7, sp, #0
100520dc:	6078      	str	r0, [r7, #4]
    smp_fsm_execute_actions_scp_phase2as2(params);
100520de:	687b      	ldr	r3, [r7, #4]
100520e0:	0018      	movs	r0, r3
100520e2:	f00f f855 	bl	10061190 <smp_fsm_execute_actions_scp_phase2as2>
}
100520e6:	46c0      	nop			@ (mov r8, r8)
100520e8:	46bd      	mov	sp, r7
100520ea:	b002      	add	sp, #8
100520ec:	bd80      	pop	{r7, pc}

100520ee <smp_pka_process_ecc_computation_tsk_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
void smp_pka_process_ecc_computation_tsk_ucfg(uint16_t task_idx)
{
100520ee:	b580      	push	{r7, lr}
100520f0:	b082      	sub	sp, #8
100520f2:	af00      	add	r7, sp, #0
100520f4:	0002      	movs	r2, r0
100520f6:	1dbb      	adds	r3, r7, #6
100520f8:	801a      	strh	r2, [r3, #0]
    smp_pka_process_ecc_computation_tsk(task_idx);
100520fa:	1dbb      	adds	r3, r7, #6
100520fc:	881b      	ldrh	r3, [r3, #0]
100520fe:	0018      	movs	r0, r3
10052100:	f00f f85f 	bl	100611c2 <smp_pka_process_ecc_computation_tsk>
}
10052104:	46c0      	nop			@ (mov r8, r8)
10052106:	46bd      	mov	sp, r7
10052108:	b002      	add	sp, #8
1005210a:	bd80      	pop	{r7, pc}

1005210c <smp_rxp_process_rxed_packets_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_rxp_process_rxed_packets_tsk_ucfg(uint16_t task_idx)
{
1005210c:	b580      	push	{r7, lr}
1005210e:	b082      	sub	sp, #8
10052110:	af00      	add	r7, sp, #0
10052112:	0002      	movs	r2, r0
10052114:	1dbb      	adds	r3, r7, #6
10052116:	801a      	strh	r2, [r3, #0]
    smp_rxp_process_rxed_packets_tsk(task_idx);
10052118:	1dbb      	adds	r3, r7, #6
1005211a:	881b      	ldrh	r3, [r3, #0]
1005211c:	0018      	movs	r0, r3
1005211e:	f00f f855 	bl	100611cc <smp_rxp_process_rxed_packets_tsk>
}
10052122:	46c0      	nop			@ (mov r8, r8)
10052124:	46bd      	mov	sp, r7
10052126:	b002      	add	sp, #8
10052128:	bd80      	pop	{r7, pc}

1005212a <smp_rxp_process_exception_cases_excerpt_scp_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
tBleStatus smp_rxp_process_exception_cases_excerpt_scp_ucfg(void* params)
{
1005212a:	b580      	push	{r7, lr}
1005212c:	b082      	sub	sp, #8
1005212e:	af00      	add	r7, sp, #0
10052130:	6078      	str	r0, [r7, #4]
    return smp_rxp_process_exception_cases_excerpt_scp(params);
10052132:	687b      	ldr	r3, [r7, #4]
10052134:	0018      	movs	r0, r3
10052136:	f00f f93b 	bl	100613b0 <smp_rxp_process_exception_cases_excerpt_scp>
1005213a:	0003      	movs	r3, r0
}
1005213c:	0018      	movs	r0, r3
1005213e:	46bd      	mov	sp, r7
10052140:	b002      	add	sp, #8
10052142:	bd80      	pop	{r7, pc}

10052144 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
tBleStatus smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg(void* params)
{
10052144:	b580      	push	{r7, lr}
10052146:	b082      	sub	sp, #8
10052148:	af00      	add	r7, sp, #0
1005214a:	6078      	str	r0, [r7, #4]
    return smp_rxp_process_wrt_current_fsm_excerpt_scp(params);
1005214c:	687b      	ldr	r3, [r7, #4]
1005214e:	0018      	movs	r0, r3
10052150:	f00f f902 	bl	10061358 <smp_rxp_process_wrt_current_fsm_excerpt_scp>
10052154:	0003      	movs	r3, r0
}
10052156:	0018      	movs	r0, r3
10052158:	46bd      	mov	sp, r7
1005215a:	b002      	add	sp, #8
1005215c:	bd80      	pop	{r7, pc}

1005215e <smp_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_init_ucfg(void)
{
1005215e:	b580      	push	{r7, lr}
10052160:	af00      	add	r7, sp, #0
    smp_init();
10052162:	f00f fa11 	bl	10061588 <smp_init>
}
10052166:	46c0      	nop			@ (mov r8, r8)
10052168:	46bd      	mov	sp, r7
1005216a:	bd80      	pop	{r7, pc}

1005216c <GAT_att_cmn_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_init_ucfg(void)
{
1005216c:	b580      	push	{r7, lr}
1005216e:	af00      	add	r7, sp, #0
    GAT_att_cmn_init();
10052170:	f002 fd14 	bl	10054b9c <GAT_att_cmn_init>
}
10052174:	46c0      	nop			@ (mov r8, r8)
10052176:	46bd      	mov	sp, r7
10052178:	bd80      	pop	{r7, pc}

1005217a <GAT_att_cmn_timer_expire_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_timer_expire_tsk_ucfg(uint16_t task_idx)
{
1005217a:	b580      	push	{r7, lr}
1005217c:	b082      	sub	sp, #8
1005217e:	af00      	add	r7, sp, #0
10052180:	0002      	movs	r2, r0
10052182:	1dbb      	adds	r3, r7, #6
10052184:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_timer_expire_tsk(task_idx);
10052186:	1dbb      	adds	r3, r7, #6
10052188:	881b      	ldrh	r3, [r3, #0]
1005218a:	0018      	movs	r0, r3
1005218c:	f002 fd72 	bl	10054c74 <GAT_att_cmn_timer_expire_tsk>
}
10052190:	46c0      	nop			@ (mov r8, r8)
10052192:	46bd      	mov	sp, r7
10052194:	b002      	add	sp, #8
10052196:	bd80      	pop	{r7, pc}

10052198 <GAT_att_cmn_tx_pool_evt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_tx_pool_evt_tsk_ucfg(uint16_t task_idx)
{
10052198:	b580      	push	{r7, lr}
1005219a:	b082      	sub	sp, #8
1005219c:	af00      	add	r7, sp, #0
1005219e:	0002      	movs	r2, r0
100521a0:	1dbb      	adds	r3, r7, #6
100521a2:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_tx_pool_evt_tsk(task_idx);
100521a4:	1dbb      	adds	r3, r7, #6
100521a6:	881b      	ldrh	r3, [r3, #0]
100521a8:	0018      	movs	r0, r3
100521aa:	f002 fdd7 	bl	10054d5c <GAT_att_cmn_tx_pool_evt_tsk>
}
100521ae:	46c0      	nop			@ (mov r8, r8)
100521b0:	46bd      	mov	sp, r7
100521b2:	b002      	add	sp, #8
100521b4:	bd80      	pop	{r7, pc}

100521b6 <GAT_att_srv_process_rx_pckt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_srv_process_rx_pckt_tsk_ucfg(uint16_t task_idx)
{
100521b6:	b580      	push	{r7, lr}
100521b8:	b082      	sub	sp, #8
100521ba:	af00      	add	r7, sp, #0
100521bc:	0002      	movs	r2, r0
100521be:	1dbb      	adds	r3, r7, #6
100521c0:	801a      	strh	r2, [r3, #0]
    GAT_att_srv_process_rx_pckt_tsk(task_idx);
100521c2:	1dbb      	adds	r3, r7, #6
100521c4:	881b      	ldrh	r3, [r3, #0]
100521c6:	0018      	movs	r0, r3
100521c8:	f003 f8f4 	bl	100553b4 <GAT_att_srv_process_rx_pckt_tsk>
}
100521cc:	46c0      	nop			@ (mov r8, r8)
100521ce:	46bd      	mov	sp, r7
100521d0:	b002      	add	sp, #8
100521d2:	bd80      	pop	{r7, pc}

100521d4 <GAT_srv_db_hash_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_db_hash_tsk_ucfg(uint16_t task_idx)
{
100521d4:	b580      	push	{r7, lr}
100521d6:	b082      	sub	sp, #8
100521d8:	af00      	add	r7, sp, #0
100521da:	0002      	movs	r2, r0
100521dc:	1dbb      	adds	r3, r7, #6
100521de:	801a      	strh	r2, [r3, #0]
    GAT_srv_db_hash_tsk(task_idx);
100521e0:	1dbb      	adds	r3, r7, #6
100521e2:	881b      	ldrh	r3, [r3, #0]
100521e4:	0018      	movs	r0, r3
100521e6:	f004 f9d9 	bl	1005659c <GAT_srv_db_hash_tsk>
}
100521ea:	46c0      	nop			@ (mov r8, r8)
100521ec:	46bd      	mov	sp, r7
100521ee:	b002      	add	sp, #8
100521f0:	bd80      	pop	{r7, pc}

100521f2 <GAT_srv_send_srv_change_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_send_srv_change_tsk_ucfg(uint16_t task_idx)
{
100521f2:	b580      	push	{r7, lr}
100521f4:	b082      	sub	sp, #8
100521f6:	af00      	add	r7, sp, #0
100521f8:	0002      	movs	r2, r0
100521fa:	1dbb      	adds	r3, r7, #6
100521fc:	801a      	strh	r2, [r3, #0]
    GAT_srv_send_srv_change_tsk(task_idx);
100521fe:	1dbb      	adds	r3, r7, #6
10052200:	881b      	ldrh	r3, [r3, #0]
10052202:	0018      	movs	r0, r3
10052204:	f004 fa84 	bl	10056710 <GAT_srv_send_srv_change_tsk>
}
10052208:	46c0      	nop			@ (mov r8, r8)
1005220a:	46bd      	mov	sp, r7
1005220c:	b002      	add	sp, #8
1005220e:	bd80      	pop	{r7, pc}

10052210 <aci_gap_terminate>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
10052210:	b580      	push	{r7, lr}
10052212:	b082      	sub	sp, #8
10052214:	af00      	add	r7, sp, #0
10052216:	0002      	movs	r2, r0
10052218:	1dbb      	adds	r3, r7, #6
1005221a:	801a      	strh	r2, [r3, #0]
1005221c:	1d7b      	adds	r3, r7, #5
1005221e:	1c0a      	adds	r2, r1, #0
10052220:	701a      	strb	r2, [r3, #0]
    return aci_gap_terminate_api(Connection_Handle,
10052222:	1d7b      	adds	r3, r7, #5
10052224:	781a      	ldrb	r2, [r3, #0]
10052226:	1dbb      	adds	r3, r7, #6
10052228:	881b      	ldrh	r3, [r3, #0]
1005222a:	0011      	movs	r1, r2
1005222c:	0018      	movs	r0, r3
1005222e:	f000 fbff 	bl	10052a30 <aci_gap_terminate_api>
10052232:	0003      	movs	r3, r0
                                 Reason);
}
10052234:	0018      	movs	r0, r3
10052236:	46bd      	mov	sp, r7
10052238:	b002      	add	sp, #8
1005223a:	bd80      	pop	{r7, pc}

1005223c <aci_gap_set_io_capability>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
1005223c:	b580      	push	{r7, lr}
1005223e:	b082      	sub	sp, #8
10052240:	af00      	add	r7, sp, #0
10052242:	0002      	movs	r2, r0
10052244:	1dfb      	adds	r3, r7, #7
10052246:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_io_capability_api(IO_Capability);
10052248:	1dfb      	adds	r3, r7, #7
1005224a:	781b      	ldrb	r3, [r3, #0]
1005224c:	0018      	movs	r0, r3
1005224e:	f000 fc7a 	bl	10052b46 <aci_gap_set_io_capability_api>
10052252:	0003      	movs	r3, r0
}
10052254:	0018      	movs	r0, r3
10052256:	46bd      	mov	sp, r7
10052258:	b002      	add	sp, #8
1005225a:	bd80      	pop	{r7, pc}

1005225c <aci_gap_set_security_requirements>:
                                             uint8_t SC_Support,
                                             uint8_t KeyPress_Notification_Support,
                                             uint8_t Min_Encryption_Key_Size,
                                             uint8_t Max_Encryption_Key_Size,
                                             uint8_t Pairing_Response)
{
1005225c:	b5b0      	push	{r4, r5, r7, lr}
1005225e:	b086      	sub	sp, #24
10052260:	af04      	add	r7, sp, #16
10052262:	0005      	movs	r5, r0
10052264:	000c      	movs	r4, r1
10052266:	0010      	movs	r0, r2
10052268:	0019      	movs	r1, r3
1005226a:	1dfb      	adds	r3, r7, #7
1005226c:	1c2a      	adds	r2, r5, #0
1005226e:	701a      	strb	r2, [r3, #0]
10052270:	1dbb      	adds	r3, r7, #6
10052272:	1c22      	adds	r2, r4, #0
10052274:	701a      	strb	r2, [r3, #0]
10052276:	1d7b      	adds	r3, r7, #5
10052278:	1c02      	adds	r2, r0, #0
1005227a:	701a      	strb	r2, [r3, #0]
1005227c:	1d3b      	adds	r3, r7, #4
1005227e:	1c0a      	adds	r2, r1, #0
10052280:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_security_requirements_api(Bonding_Mode,
10052282:	1d3b      	adds	r3, r7, #4
10052284:	781c      	ldrb	r4, [r3, #0]
10052286:	1d7b      	adds	r3, r7, #5
10052288:	781a      	ldrb	r2, [r3, #0]
1005228a:	1dbb      	adds	r3, r7, #6
1005228c:	7819      	ldrb	r1, [r3, #0]
1005228e:	1dfb      	adds	r3, r7, #7
10052290:	7818      	ldrb	r0, [r3, #0]
10052292:	2320      	movs	r3, #32
10052294:	18fb      	adds	r3, r7, r3
10052296:	781b      	ldrb	r3, [r3, #0]
10052298:	9302      	str	r3, [sp, #8]
1005229a:	231c      	movs	r3, #28
1005229c:	18fb      	adds	r3, r7, r3
1005229e:	781b      	ldrb	r3, [r3, #0]
100522a0:	9301      	str	r3, [sp, #4]
100522a2:	2318      	movs	r3, #24
100522a4:	18fb      	adds	r3, r7, r3
100522a6:	781b      	ldrb	r3, [r3, #0]
100522a8:	9300      	str	r3, [sp, #0]
100522aa:	0023      	movs	r3, r4
100522ac:	f000 fc54 	bl	10052b58 <aci_gap_set_security_requirements_api>
100522b0:	0003      	movs	r3, r0
                                                 SC_Support,
                                                 KeyPress_Notification_Support,
                                                 Min_Encryption_Key_Size,
                                                 Max_Encryption_Key_Size,
                                                 Pairing_Response);
}
100522b2:	0018      	movs	r0, r3
100522b4:	46bd      	mov	sp, r7
100522b6:	b002      	add	sp, #8
100522b8:	bdb0      	pop	{r4, r5, r7, pc}

100522ba <aci_gap_passkey_resp>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_passkey_resp(uint16_t Connection_Handle,
                                uint32_t Passkey)
{
100522ba:	b580      	push	{r7, lr}
100522bc:	b082      	sub	sp, #8
100522be:	af00      	add	r7, sp, #0
100522c0:	0002      	movs	r2, r0
100522c2:	6039      	str	r1, [r7, #0]
100522c4:	1dbb      	adds	r3, r7, #6
100522c6:	801a      	strh	r2, [r3, #0]
    return aci_gap_passkey_resp_api(Connection_Handle,
100522c8:	683a      	ldr	r2, [r7, #0]
100522ca:	1dbb      	adds	r3, r7, #6
100522cc:	881b      	ldrh	r3, [r3, #0]
100522ce:	0011      	movs	r1, r2
100522d0:	0018      	movs	r0, r3
100522d2:	f000 fc85 	bl	10052be0 <aci_gap_passkey_resp_api>
100522d6:	0003      	movs	r3, r0
                                    Passkey);
}
100522d8:	0018      	movs	r0, r3
100522da:	46bd      	mov	sp, r7
100522dc:	b002      	add	sp, #8
100522de:	bd80      	pop	{r7, pc}

100522e0 <aci_gap_numeric_comparison_value_confirm_yesno>:
#if (BLESTACK_CONTROLLER_ONLY == 0)
#if ((SECURE_CONNECTIONS_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1))
tBleStatus aci_gap_numeric_comparison_value_confirm_yesno(uint16_t Connection_Handle,
                                                          uint8_t Confirm_Yes_No)
{
100522e0:	b580      	push	{r7, lr}
100522e2:	b082      	sub	sp, #8
100522e4:	af00      	add	r7, sp, #0
100522e6:	0002      	movs	r2, r0
100522e8:	1dbb      	adds	r3, r7, #6
100522ea:	801a      	strh	r2, [r3, #0]
100522ec:	1d7b      	adds	r3, r7, #5
100522ee:	1c0a      	adds	r2, r1, #0
100522f0:	701a      	strb	r2, [r3, #0]
    return aci_gap_numeric_comparison_value_confirm_yesno_api(Connection_Handle,
100522f2:	1d7b      	adds	r3, r7, #5
100522f4:	781a      	ldrb	r2, [r3, #0]
100522f6:	1dbb      	adds	r3, r7, #6
100522f8:	881b      	ldrh	r3, [r3, #0]
100522fa:	0011      	movs	r1, r2
100522fc:	0018      	movs	r0, r3
100522fe:	f000 fc7b 	bl	10052bf8 <aci_gap_numeric_comparison_value_confirm_yesno_api>
10052302:	0003      	movs	r3, r0
                                                              Confirm_Yes_No);
}
10052304:	0018      	movs	r0, r3
10052306:	46bd      	mov	sp, r7
10052308:	b002      	add	sp, #8
1005230a:	bd80      	pop	{r7, pc}

1005230c <aci_gap_clear_security_db>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_clear_security_db(void)
{
1005230c:	b580      	push	{r7, lr}
1005230e:	af00      	add	r7, sp, #0
    return aci_gap_clear_security_db_api();
10052310:	f000 fc7a 	bl	10052c08 <aci_gap_clear_security_db_api>
10052314:	0003      	movs	r3, r0
}
10052316:	0018      	movs	r0, r3
10052318:	46bd      	mov	sp, r7
1005231a:	bd80      	pop	{r7, pc}

1005231c <aci_gatt_srv_add_service>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_service(ble_gatt_srv_def_t* Serv_p)
{
1005231c:	b580      	push	{r7, lr}
1005231e:	b082      	sub	sp, #8
10052320:	af00      	add	r7, sp, #0
10052322:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_add_service_api(Serv_p);
10052324:	687b      	ldr	r3, [r7, #4]
10052326:	0018      	movs	r0, r3
10052328:	f000 fc73 	bl	10052c12 <aci_gatt_srv_add_service_api>
1005232c:	0003      	movs	r3, r0
}
1005232e:	0018      	movs	r0, r3
10052330:	46bd      	mov	sp, r7
10052332:	b002      	add	sp, #8
10052334:	bd80      	pop	{r7, pc}

10052336 <aci_gatt_srv_get_service_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_service_handle(ble_gatt_srv_def_t* Serv_p)
{
10052336:	b580      	push	{r7, lr}
10052338:	b082      	sub	sp, #8
1005233a:	af00      	add	r7, sp, #0
1005233c:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_service_handle_api(Serv_p);
1005233e:	687b      	ldr	r3, [r7, #4]
10052340:	0018      	movs	r0, r3
10052342:	f000 fc6a 	bl	10052c1a <aci_gatt_srv_get_service_handle_api>
10052346:	0003      	movs	r3, r0
}
10052348:	0018      	movs	r0, r3
1005234a:	46bd      	mov	sp, r7
1005234c:	b002      	add	sp, #8
1005234e:	bd80      	pop	{r7, pc}

10052350 <aci_gatt_srv_add_char>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_char(ble_gatt_chr_def_t* Char_p,
                                 uint16_t Serv_Attr_H)
{
10052350:	b580      	push	{r7, lr}
10052352:	b082      	sub	sp, #8
10052354:	af00      	add	r7, sp, #0
10052356:	6078      	str	r0, [r7, #4]
10052358:	000a      	movs	r2, r1
1005235a:	1cbb      	adds	r3, r7, #2
1005235c:	801a      	strh	r2, [r3, #0]
    return aci_gatt_srv_add_char_api(Char_p,
1005235e:	1cbb      	adds	r3, r7, #2
10052360:	881a      	ldrh	r2, [r3, #0]
10052362:	687b      	ldr	r3, [r7, #4]
10052364:	0011      	movs	r1, r2
10052366:	0018      	movs	r0, r3
10052368:	f000 fc5b 	bl	10052c22 <aci_gatt_srv_add_char_api>
1005236c:	0003      	movs	r3, r0
                                     Serv_Attr_H);
}
1005236e:	0018      	movs	r0, r3
10052370:	46bd      	mov	sp, r7
10052372:	b002      	add	sp, #8
10052374:	bd80      	pop	{r7, pc}

10052376 <aci_gatt_srv_get_char_decl_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_char_decl_handle(ble_gatt_chr_def_t* Char_p)
{
10052376:	b580      	push	{r7, lr}
10052378:	b082      	sub	sp, #8
1005237a:	af00      	add	r7, sp, #0
1005237c:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_char_decl_handle_api(Char_p);
1005237e:	687b      	ldr	r3, [r7, #4]
10052380:	0018      	movs	r0, r3
10052382:	f000 fc52 	bl	10052c2a <aci_gatt_srv_get_char_decl_handle_api>
10052386:	0003      	movs	r3, r0
}
10052388:	0018      	movs	r0, r3
1005238a:	46bd      	mov	sp, r7
1005238c:	b002      	add	sp, #8
1005238e:	bd80      	pop	{r7, pc}

10052390 <aci_gatt_srv_notify>:
                               uint16_t CID,
                               uint16_t Attr_Handle,
                               uint8_t Flags,
                               uint16_t Val_Length,
                               uint8_t* Val_p)
{
10052390:	b5b0      	push	{r4, r5, r7, lr}
10052392:	b084      	sub	sp, #16
10052394:	af02      	add	r7, sp, #8
10052396:	0005      	movs	r5, r0
10052398:	000c      	movs	r4, r1
1005239a:	0010      	movs	r0, r2
1005239c:	0019      	movs	r1, r3
1005239e:	1dbb      	adds	r3, r7, #6
100523a0:	1c2a      	adds	r2, r5, #0
100523a2:	801a      	strh	r2, [r3, #0]
100523a4:	1d3b      	adds	r3, r7, #4
100523a6:	1c22      	adds	r2, r4, #0
100523a8:	801a      	strh	r2, [r3, #0]
100523aa:	1cbb      	adds	r3, r7, #2
100523ac:	1c02      	adds	r2, r0, #0
100523ae:	801a      	strh	r2, [r3, #0]
100523b0:	1c7b      	adds	r3, r7, #1
100523b2:	1c0a      	adds	r2, r1, #0
100523b4:	701a      	strb	r2, [r3, #0]
    return aci_gatt_srv_notify_api(Connection_Handle,
100523b6:	1c7b      	adds	r3, r7, #1
100523b8:	781c      	ldrb	r4, [r3, #0]
100523ba:	1cbb      	adds	r3, r7, #2
100523bc:	881a      	ldrh	r2, [r3, #0]
100523be:	1d3b      	adds	r3, r7, #4
100523c0:	8819      	ldrh	r1, [r3, #0]
100523c2:	1dbb      	adds	r3, r7, #6
100523c4:	8818      	ldrh	r0, [r3, #0]
100523c6:	69fb      	ldr	r3, [r7, #28]
100523c8:	9301      	str	r3, [sp, #4]
100523ca:	2318      	movs	r3, #24
100523cc:	18fb      	adds	r3, r7, r3
100523ce:	881b      	ldrh	r3, [r3, #0]
100523d0:	9300      	str	r3, [sp, #0]
100523d2:	0023      	movs	r3, r4
100523d4:	f000 fc2d 	bl	10052c32 <aci_gatt_srv_notify_api>
100523d8:	0003      	movs	r3, r0
                                   CID,
                                   Attr_Handle,
                                   Flags,
                                   Val_Length,
                                   Val_p);
}
100523da:	0018      	movs	r0, r3
100523dc:	46bd      	mov	sp, r7
100523de:	b002      	add	sp, #8
100523e0:	bdb0      	pop	{r4, r5, r7, pc}

100523e2 <aci_gatt_srv_resp>:
                             uint16_t CID,
                             uint16_t Attr_Handle,
                             uint8_t Error_Code,
                             uint16_t Data_Len,
                             uint8_t* Data_p)
{
100523e2:	b5b0      	push	{r4, r5, r7, lr}
100523e4:	b084      	sub	sp, #16
100523e6:	af02      	add	r7, sp, #8
100523e8:	0005      	movs	r5, r0
100523ea:	000c      	movs	r4, r1
100523ec:	0010      	movs	r0, r2
100523ee:	0019      	movs	r1, r3
100523f0:	1dbb      	adds	r3, r7, #6
100523f2:	1c2a      	adds	r2, r5, #0
100523f4:	801a      	strh	r2, [r3, #0]
100523f6:	1d3b      	adds	r3, r7, #4
100523f8:	1c22      	adds	r2, r4, #0
100523fa:	801a      	strh	r2, [r3, #0]
100523fc:	1cbb      	adds	r3, r7, #2
100523fe:	1c02      	adds	r2, r0, #0
10052400:	801a      	strh	r2, [r3, #0]
10052402:	1c7b      	adds	r3, r7, #1
10052404:	1c0a      	adds	r2, r1, #0
10052406:	701a      	strb	r2, [r3, #0]
    return aci_gatt_srv_resp_api(Connection_Handle,
10052408:	1c7b      	adds	r3, r7, #1
1005240a:	781c      	ldrb	r4, [r3, #0]
1005240c:	1cbb      	adds	r3, r7, #2
1005240e:	881a      	ldrh	r2, [r3, #0]
10052410:	1d3b      	adds	r3, r7, #4
10052412:	8819      	ldrh	r1, [r3, #0]
10052414:	1dbb      	adds	r3, r7, #6
10052416:	8818      	ldrh	r0, [r3, #0]
10052418:	69fb      	ldr	r3, [r7, #28]
1005241a:	9301      	str	r3, [sp, #4]
1005241c:	2318      	movs	r3, #24
1005241e:	18fb      	adds	r3, r7, r3
10052420:	881b      	ldrh	r3, [r3, #0]
10052422:	9300      	str	r3, [sp, #0]
10052424:	0023      	movs	r3, r4
10052426:	f000 fc13 	bl	10052c50 <aci_gatt_srv_resp_api>
1005242a:	0003      	movs	r3, r0
                                 CID,
                                 Attr_Handle,
                                 Error_Code,
                                 Data_Len,
                                 Data_p);
}
1005242c:	0018      	movs	r0, r3
1005242e:	46bd      	mov	sp, r7
10052430:	b002      	add	sp, #8
10052432:	bdb0      	pop	{r4, r5, r7, pc}

10052434 <aci_gatt_clt_confirm_indication>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_clt_confirm_indication(uint16_t Connection_Handle,
                                           uint16_t CID)
{
10052434:	b580      	push	{r7, lr}
10052436:	b082      	sub	sp, #8
10052438:	af00      	add	r7, sp, #0
1005243a:	0002      	movs	r2, r0
1005243c:	1dbb      	adds	r3, r7, #6
1005243e:	801a      	strh	r2, [r3, #0]
10052440:	1d3b      	adds	r3, r7, #4
10052442:	1c0a      	adds	r2, r1, #0
10052444:	801a      	strh	r2, [r3, #0]
    return aci_gatt_clt_confirm_indication_api(Connection_Handle,
10052446:	1d3b      	adds	r3, r7, #4
10052448:	881a      	ldrh	r2, [r3, #0]
1005244a:	1dbb      	adds	r3, r7, #6
1005244c:	881b      	ldrh	r3, [r3, #0]
1005244e:	0011      	movs	r1, r2
10052450:	0018      	movs	r0, r3
10052452:	f000 fc06 	bl	10052c62 <aci_gatt_clt_confirm_indication_api>
10052456:	0003      	movs	r3, r0
                                               CID);
}
10052458:	0018      	movs	r0, r3
1005245a:	46bd      	mov	sp, r7
1005245c:	b002      	add	sp, #8
1005245e:	bd80      	pop	{r7, pc}

10052460 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Connection_Interval_Min,
                                                     uint16_t Connection_Interval_Max,
                                                     uint16_t Peripheral_Latency,
                                                     uint16_t Timeout_Multiplier)
{
10052460:	b5b0      	push	{r4, r5, r7, lr}
10052462:	b084      	sub	sp, #16
10052464:	af02      	add	r7, sp, #8
10052466:	0005      	movs	r5, r0
10052468:	000c      	movs	r4, r1
1005246a:	0010      	movs	r0, r2
1005246c:	0019      	movs	r1, r3
1005246e:	1dbb      	adds	r3, r7, #6
10052470:	1c2a      	adds	r2, r5, #0
10052472:	801a      	strh	r2, [r3, #0]
10052474:	1d3b      	adds	r3, r7, #4
10052476:	1c22      	adds	r2, r4, #0
10052478:	801a      	strh	r2, [r3, #0]
1005247a:	1cbb      	adds	r3, r7, #2
1005247c:	1c02      	adds	r2, r0, #0
1005247e:	801a      	strh	r2, [r3, #0]
10052480:	003b      	movs	r3, r7
10052482:	1c0a      	adds	r2, r1, #0
10052484:	801a      	strh	r2, [r3, #0]
    return aci_l2cap_connection_parameter_update_req_api(Connection_Handle,
10052486:	003b      	movs	r3, r7
10052488:	881c      	ldrh	r4, [r3, #0]
1005248a:	1cbb      	adds	r3, r7, #2
1005248c:	881a      	ldrh	r2, [r3, #0]
1005248e:	1d3b      	adds	r3, r7, #4
10052490:	8819      	ldrh	r1, [r3, #0]
10052492:	1dbb      	adds	r3, r7, #6
10052494:	8818      	ldrh	r0, [r3, #0]
10052496:	2318      	movs	r3, #24
10052498:	18fb      	adds	r3, r7, r3
1005249a:	881b      	ldrh	r3, [r3, #0]
1005249c:	9300      	str	r3, [sp, #0]
1005249e:	0023      	movs	r3, r4
100524a0:	f000 fcf8 	bl	10052e94 <aci_l2cap_connection_parameter_update_req_api>
100524a4:	0003      	movs	r3, r0
                                                         Connection_Interval_Min,
                                                         Connection_Interval_Max,
                                                         Peripheral_Latency,
                                                         Timeout_Multiplier);
}
100524a6:	0018      	movs	r0, r3
100524a8:	46bd      	mov	sp, r7
100524aa:	b002      	add	sp, #8
100524ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

100524b0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
100524b0:	b580      	push	{r7, lr}
100524b2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
100524b4:	4b04      	ldr	r3, [pc, #16]	@ (100524c8 <UTIL_LPM_Init+0x18>)
100524b6:	2200      	movs	r2, #0
100524b8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
100524ba:	4b04      	ldr	r3, [pc, #16]	@ (100524cc <UTIL_LPM_Init+0x1c>)
100524bc:	2200      	movs	r2, #0
100524be:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
100524c0:	46c0      	nop			@ (mov r8, r8)
100524c2:	46bd      	mov	sp, r7
100524c4:	bd80      	pop	{r7, pc}
100524c6:	46c0      	nop			@ (mov r8, r8)
100524c8:	20001074 	.word	0x20001074
100524cc:	20001078 	.word	0x20001078

100524d0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
100524d0:	b580      	push	{r7, lr}
100524d2:	b086      	sub	sp, #24
100524d4:	af00      	add	r7, sp, #0
100524d6:	6078      	str	r0, [r7, #4]
100524d8:	000a      	movs	r2, r1
100524da:	1cfb      	adds	r3, r7, #3
100524dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100524de:	f3ef 8310 	mrs	r3, PRIMASK
100524e2:	613b      	str	r3, [r7, #16]
  return(result);
100524e4:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
100524e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
100524e8:	b672      	cpsid	i
}
100524ea:	46c0      	nop			@ (mov r8, r8)
  
  switch( state )
100524ec:	1cfb      	adds	r3, r7, #3
100524ee:	781b      	ldrb	r3, [r3, #0]
100524f0:	2b00      	cmp	r3, #0
100524f2:	d008      	beq.n	10052506 <UTIL_LPM_SetStopMode+0x36>
100524f4:	2b01      	cmp	r3, #1
100524f6:	d10e      	bne.n	10052516 <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
100524f8:	4b0c      	ldr	r3, [pc, #48]	@ (1005252c <UTIL_LPM_SetStopMode+0x5c>)
100524fa:	681a      	ldr	r2, [r3, #0]
100524fc:	687b      	ldr	r3, [r7, #4]
100524fe:	431a      	orrs	r2, r3
10052500:	4b0a      	ldr	r3, [pc, #40]	@ (1005252c <UTIL_LPM_SetStopMode+0x5c>)
10052502:	601a      	str	r2, [r3, #0]
      break;
10052504:	e008      	b.n	10052518 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
10052506:	687b      	ldr	r3, [r7, #4]
10052508:	43da      	mvns	r2, r3
1005250a:	4b08      	ldr	r3, [pc, #32]	@ (1005252c <UTIL_LPM_SetStopMode+0x5c>)
1005250c:	681b      	ldr	r3, [r3, #0]
1005250e:	401a      	ands	r2, r3
10052510:	4b06      	ldr	r3, [pc, #24]	@ (1005252c <UTIL_LPM_SetStopMode+0x5c>)
10052512:	601a      	str	r2, [r3, #0]
      break;
10052514:	e000      	b.n	10052518 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
10052516:	46c0      	nop			@ (mov r8, r8)
10052518:	697b      	ldr	r3, [r7, #20]
1005251a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005251c:	68fb      	ldr	r3, [r7, #12]
1005251e:	f383 8810 	msr	PRIMASK, r3
}
10052522:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
10052524:	46c0      	nop			@ (mov r8, r8)
10052526:	46bd      	mov	sp, r7
10052528:	b006      	add	sp, #24
1005252a:	bd80      	pop	{r7, pc}
1005252c:	20001074 	.word	0x20001074

10052530 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
10052530:	b580      	push	{r7, lr}
10052532:	b086      	sub	sp, #24
10052534:	af00      	add	r7, sp, #0
10052536:	6078      	str	r0, [r7, #4]
10052538:	000a      	movs	r2, r1
1005253a:	1cfb      	adds	r3, r7, #3
1005253c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005253e:	f3ef 8310 	mrs	r3, PRIMASK
10052542:	613b      	str	r3, [r7, #16]
  return(result);
10052544:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
10052546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10052548:	b672      	cpsid	i
}
1005254a:	46c0      	nop			@ (mov r8, r8)
  
  switch(state)
1005254c:	1cfb      	adds	r3, r7, #3
1005254e:	781b      	ldrb	r3, [r3, #0]
10052550:	2b00      	cmp	r3, #0
10052552:	d008      	beq.n	10052566 <UTIL_LPM_SetOffMode+0x36>
10052554:	2b01      	cmp	r3, #1
10052556:	d10e      	bne.n	10052576 <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
10052558:	4b0c      	ldr	r3, [pc, #48]	@ (1005258c <UTIL_LPM_SetOffMode+0x5c>)
1005255a:	681a      	ldr	r2, [r3, #0]
1005255c:	687b      	ldr	r3, [r7, #4]
1005255e:	431a      	orrs	r2, r3
10052560:	4b0a      	ldr	r3, [pc, #40]	@ (1005258c <UTIL_LPM_SetOffMode+0x5c>)
10052562:	601a      	str	r2, [r3, #0]
      break;
10052564:	e008      	b.n	10052578 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
10052566:	687b      	ldr	r3, [r7, #4]
10052568:	43da      	mvns	r2, r3
1005256a:	4b08      	ldr	r3, [pc, #32]	@ (1005258c <UTIL_LPM_SetOffMode+0x5c>)
1005256c:	681b      	ldr	r3, [r3, #0]
1005256e:	401a      	ands	r2, r3
10052570:	4b06      	ldr	r3, [pc, #24]	@ (1005258c <UTIL_LPM_SetOffMode+0x5c>)
10052572:	601a      	str	r2, [r3, #0]
      break;
10052574:	e000      	b.n	10052578 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
10052576:	46c0      	nop			@ (mov r8, r8)
10052578:	697b      	ldr	r3, [r7, #20]
1005257a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005257c:	68fb      	ldr	r3, [r7, #12]
1005257e:	f383 8810 	msr	PRIMASK, r3
}
10052582:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
10052584:	46c0      	nop			@ (mov r8, r8)
10052586:	46bd      	mov	sp, r7
10052588:	b006      	add	sp, #24
1005258a:	bd80      	pop	{r7, pc}
1005258c:	20001078 	.word	0x20001078

10052590 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
10052590:	b580      	push	{r7, lr}
10052592:	b084      	sub	sp, #16
10052594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052596:	f3ef 8310 	mrs	r3, PRIMASK
1005259a:	60bb      	str	r3, [r7, #8]
  return(result);
1005259c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
1005259e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
100525a0:	b672      	cpsid	i
}
100525a2:	46c0      	nop			@ (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
100525a4:	4b12      	ldr	r3, [pc, #72]	@ (100525f0 <UTIL_LPM_EnterLowPower+0x60>)
100525a6:	681b      	ldr	r3, [r3, #0]
100525a8:	2b00      	cmp	r3, #0
100525aa:	d006      	beq.n	100525ba <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
100525ac:	4b11      	ldr	r3, [pc, #68]	@ (100525f4 <UTIL_LPM_EnterLowPower+0x64>)
100525ae:	681b      	ldr	r3, [r3, #0]
100525b0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
100525b2:	4b10      	ldr	r3, [pc, #64]	@ (100525f4 <UTIL_LPM_EnterLowPower+0x64>)
100525b4:	685b      	ldr	r3, [r3, #4]
100525b6:	4798      	blx	r3
100525b8:	e010      	b.n	100525dc <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
100525ba:	4b0f      	ldr	r3, [pc, #60]	@ (100525f8 <UTIL_LPM_EnterLowPower+0x68>)
100525bc:	681b      	ldr	r3, [r3, #0]
100525be:	2b00      	cmp	r3, #0
100525c0:	d006      	beq.n	100525d0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
100525c2:	4b0c      	ldr	r3, [pc, #48]	@ (100525f4 <UTIL_LPM_EnterLowPower+0x64>)
100525c4:	689b      	ldr	r3, [r3, #8]
100525c6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
100525c8:	4b0a      	ldr	r3, [pc, #40]	@ (100525f4 <UTIL_LPM_EnterLowPower+0x64>)
100525ca:	68db      	ldr	r3, [r3, #12]
100525cc:	4798      	blx	r3
100525ce:	e005      	b.n	100525dc <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
100525d0:	4b08      	ldr	r3, [pc, #32]	@ (100525f4 <UTIL_LPM_EnterLowPower+0x64>)
100525d2:	691b      	ldr	r3, [r3, #16]
100525d4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
100525d6:	4b07      	ldr	r3, [pc, #28]	@ (100525f4 <UTIL_LPM_EnterLowPower+0x64>)
100525d8:	695b      	ldr	r3, [r3, #20]
100525da:	4798      	blx	r3
100525dc:	68fb      	ldr	r3, [r7, #12]
100525de:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100525e0:	687b      	ldr	r3, [r7, #4]
100525e2:	f383 8810 	msr	PRIMASK, r3
}
100525e6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
100525e8:	46c0      	nop			@ (mov r8, r8)
100525ea:	46bd      	mov	sp, r7
100525ec:	b004      	add	sp, #16
100525ee:	bd80      	pop	{r7, pc}
100525f0:	20001074 	.word	0x20001074
100525f4:	1006cd08 	.word	0x1006cd08
100525f8:	20001078 	.word	0x20001078

100525fc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
100525fc:	b580      	push	{r7, lr}
100525fe:	b090      	sub	sp, #64	@ 0x40
10052600:	af00      	add	r7, sp, #0
10052602:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
10052604:	4b75      	ldr	r3, [pc, #468]	@ (100527dc <UTIL_SEQ_Run+0x1e0>)
10052606:	681b      	ldr	r3, [r3, #0]
10052608:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
1005260a:	4b74      	ldr	r3, [pc, #464]	@ (100527dc <UTIL_SEQ_Run+0x1e0>)
1005260c:	681b      	ldr	r3, [r3, #0]
1005260e:	687a      	ldr	r2, [r7, #4]
10052610:	401a      	ands	r2, r3
10052612:	4b72      	ldr	r3, [pc, #456]	@ (100527dc <UTIL_SEQ_Run+0x1e0>)
10052614:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
10052616:	4b72      	ldr	r3, [pc, #456]	@ (100527e0 <UTIL_SEQ_Run+0x1e4>)
10052618:	681b      	ldr	r3, [r3, #0]
1005261a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
1005261c:	4b71      	ldr	r3, [pc, #452]	@ (100527e4 <UTIL_SEQ_Run+0x1e8>)
1005261e:	681b      	ldr	r3, [r3, #0]
10052620:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
10052622:	4b71      	ldr	r3, [pc, #452]	@ (100527e8 <UTIL_SEQ_Run+0x1ec>)
10052624:	681b      	ldr	r3, [r3, #0]
10052626:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
10052628:	4b70      	ldr	r3, [pc, #448]	@ (100527ec <UTIL_SEQ_Run+0x1f0>)
1005262a:	681b      	ldr	r3, [r3, #0]
1005262c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
1005262e:	e090      	b.n	10052752 <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
10052630:	2300      	movs	r3, #0
10052632:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
10052634:	e002      	b.n	1005263c <UTIL_SEQ_Run+0x40>
    {
      counter++;
10052636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052638:	3301      	adds	r3, #1
1005263a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
1005263c:	4b6c      	ldr	r3, [pc, #432]	@ (100527f0 <UTIL_SEQ_Run+0x1f4>)
1005263e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10052640:	00d2      	lsls	r2, r2, #3
10052642:	58d3      	ldr	r3, [r2, r3]
10052644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10052646:	401a      	ands	r2, r3
10052648:	4b64      	ldr	r3, [pc, #400]	@ (100527dc <UTIL_SEQ_Run+0x1e0>)
1005264a:	681b      	ldr	r3, [r3, #0]
1005264c:	4013      	ands	r3, r2
1005264e:	d0f2      	beq.n	10052636 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
10052650:	4b67      	ldr	r3, [pc, #412]	@ (100527f0 <UTIL_SEQ_Run+0x1f4>)
10052652:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10052654:	00d2      	lsls	r2, r2, #3
10052656:	58d3      	ldr	r3, [r2, r3]
10052658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1005265a:	401a      	ands	r2, r3
1005265c:	4b5f      	ldr	r3, [pc, #380]	@ (100527dc <UTIL_SEQ_Run+0x1e0>)
1005265e:	681b      	ldr	r3, [r3, #0]
10052660:	4013      	ands	r3, r2
10052662:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
10052664:	4a62      	ldr	r2, [pc, #392]	@ (100527f0 <UTIL_SEQ_Run+0x1f4>)
10052666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052668:	00db      	lsls	r3, r3, #3
1005266a:	18d3      	adds	r3, r2, r3
1005266c:	3304      	adds	r3, #4
1005266e:	681b      	ldr	r3, [r3, #0]
10052670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10052672:	4013      	ands	r3, r2
10052674:	d107      	bne.n	10052686 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
10052676:	4a5e      	ldr	r2, [pc, #376]	@ (100527f0 <UTIL_SEQ_Run+0x1f4>)
10052678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005267a:	00db      	lsls	r3, r3, #3
1005267c:	18d3      	adds	r3, r2, r3
1005267e:	3304      	adds	r3, #4
10052680:	2201      	movs	r2, #1
10052682:	4252      	negs	r2, r2
10052684:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
10052686:	4a5a      	ldr	r2, [pc, #360]	@ (100527f0 <UTIL_SEQ_Run+0x1f4>)
10052688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005268a:	00db      	lsls	r3, r3, #3
1005268c:	18d3      	adds	r3, r2, r3
1005268e:	3304      	adds	r3, #4
10052690:	681b      	ldr	r3, [r3, #0]
10052692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10052694:	4013      	ands	r3, r2
10052696:	0018      	movs	r0, r3
10052698:	f000 f97c 	bl	10052994 <SEQ_BitPosition>
1005269c:	0003      	movs	r3, r0
1005269e:	001a      	movs	r2, r3
100526a0:	4b54      	ldr	r3, [pc, #336]	@ (100527f4 <UTIL_SEQ_Run+0x1f8>)
100526a2:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
100526a4:	4a52      	ldr	r2, [pc, #328]	@ (100527f0 <UTIL_SEQ_Run+0x1f4>)
100526a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100526a8:	00db      	lsls	r3, r3, #3
100526aa:	18d3      	adds	r3, r2, r3
100526ac:	3304      	adds	r3, #4
100526ae:	681a      	ldr	r2, [r3, #0]
100526b0:	4b50      	ldr	r3, [pc, #320]	@ (100527f4 <UTIL_SEQ_Run+0x1f8>)
100526b2:	681b      	ldr	r3, [r3, #0]
100526b4:	2101      	movs	r1, #1
100526b6:	4099      	lsls	r1, r3
100526b8:	000b      	movs	r3, r1
100526ba:	43db      	mvns	r3, r3
100526bc:	401a      	ands	r2, r3
100526be:	494c      	ldr	r1, [pc, #304]	@ (100527f0 <UTIL_SEQ_Run+0x1f4>)
100526c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100526c2:	00db      	lsls	r3, r3, #3
100526c4:	18cb      	adds	r3, r1, r3
100526c6:	3304      	adds	r3, #4
100526c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100526ca:	f3ef 8310 	mrs	r3, PRIMASK
100526ce:	61bb      	str	r3, [r7, #24]
  return(result);
100526d0:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100526d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
100526d4:	b672      	cpsid	i
}
100526d6:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
100526d8:	4b46      	ldr	r3, [pc, #280]	@ (100527f4 <UTIL_SEQ_Run+0x1f8>)
100526da:	681b      	ldr	r3, [r3, #0]
100526dc:	2201      	movs	r2, #1
100526de:	409a      	lsls	r2, r3
100526e0:	0013      	movs	r3, r2
100526e2:	43da      	mvns	r2, r3
100526e4:	4b3e      	ldr	r3, [pc, #248]	@ (100527e0 <UTIL_SEQ_Run+0x1e4>)
100526e6:	681b      	ldr	r3, [r3, #0]
100526e8:	401a      	ands	r2, r3
100526ea:	4b3d      	ldr	r3, [pc, #244]	@ (100527e0 <UTIL_SEQ_Run+0x1e4>)
100526ec:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
100526ee:	2302      	movs	r3, #2
100526f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
100526f2:	e013      	b.n	1005271c <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
100526f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100526f6:	1e5a      	subs	r2, r3, #1
100526f8:	4b3d      	ldr	r3, [pc, #244]	@ (100527f0 <UTIL_SEQ_Run+0x1f4>)
100526fa:	00d2      	lsls	r2, r2, #3
100526fc:	58d1      	ldr	r1, [r2, r3]
100526fe:	4b3d      	ldr	r3, [pc, #244]	@ (100527f4 <UTIL_SEQ_Run+0x1f8>)
10052700:	681b      	ldr	r3, [r3, #0]
10052702:	2201      	movs	r2, #1
10052704:	409a      	lsls	r2, r3
10052706:	0013      	movs	r3, r2
10052708:	43db      	mvns	r3, r3
1005270a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1005270c:	3a01      	subs	r2, #1
1005270e:	4019      	ands	r1, r3
10052710:	4b37      	ldr	r3, [pc, #220]	@ (100527f0 <UTIL_SEQ_Run+0x1f4>)
10052712:	00d2      	lsls	r2, r2, #3
10052714:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
10052716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052718:	3b01      	subs	r3, #1
1005271a:	63fb      	str	r3, [r7, #60]	@ 0x3c
1005271c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005271e:	2b00      	cmp	r3, #0
10052720:	d1e8      	bne.n	100526f4 <UTIL_SEQ_Run+0xf8>
10052722:	6a3b      	ldr	r3, [r7, #32]
10052724:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10052726:	697b      	ldr	r3, [r7, #20]
10052728:	f383 8810 	msr	PRIMASK, r3
}
1005272c:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
1005272e:	4b31      	ldr	r3, [pc, #196]	@ (100527f4 <UTIL_SEQ_Run+0x1f8>)
10052730:	681a      	ldr	r2, [r3, #0]
10052732:	4b31      	ldr	r3, [pc, #196]	@ (100527f8 <UTIL_SEQ_Run+0x1fc>)
10052734:	0092      	lsls	r2, r2, #2
10052736:	58d3      	ldr	r3, [r2, r3]
10052738:	4798      	blx	r3

    local_taskset = TaskSet;
1005273a:	4b29      	ldr	r3, [pc, #164]	@ (100527e0 <UTIL_SEQ_Run+0x1e4>)
1005273c:	681b      	ldr	r3, [r3, #0]
1005273e:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10052740:	4b28      	ldr	r3, [pc, #160]	@ (100527e4 <UTIL_SEQ_Run+0x1e8>)
10052742:	681b      	ldr	r3, [r3, #0]
10052744:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
10052746:	4b28      	ldr	r3, [pc, #160]	@ (100527e8 <UTIL_SEQ_Run+0x1ec>)
10052748:	681b      	ldr	r3, [r3, #0]
1005274a:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
1005274c:	4b27      	ldr	r3, [pc, #156]	@ (100527ec <UTIL_SEQ_Run+0x1f0>)
1005274e:	681b      	ldr	r3, [r3, #0]
10052750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
10052752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10052754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10052756:	401a      	ands	r2, r3
10052758:	4b20      	ldr	r3, [pc, #128]	@ (100527dc <UTIL_SEQ_Run+0x1e0>)
1005275a:	681b      	ldr	r3, [r3, #0]
1005275c:	4013      	ands	r3, r2
1005275e:	d004      	beq.n	1005276a <UTIL_SEQ_Run+0x16e>
10052760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10052762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10052764:	4013      	ands	r3, r2
10052766:	d100      	bne.n	1005276a <UTIL_SEQ_Run+0x16e>
10052768:	e762      	b.n	10052630 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
1005276a:	4b22      	ldr	r3, [pc, #136]	@ (100527f4 <UTIL_SEQ_Run+0x1f8>)
1005276c:	2201      	movs	r2, #1
1005276e:	4252      	negs	r2, r2
10052770:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
10052772:	4b1e      	ldr	r3, [pc, #120]	@ (100527ec <UTIL_SEQ_Run+0x1f0>)
10052774:	681b      	ldr	r3, [r3, #0]
10052776:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10052778:	4013      	ands	r3, r2
1005277a:	d127      	bne.n	100527cc <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
1005277c:	f7f0 fbba 	bl	10042ef4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052780:	f3ef 8310 	mrs	r3, PRIMASK
10052784:	613b      	str	r3, [r7, #16]
  return(result);
10052786:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
10052788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1005278a:	b672      	cpsid	i
}
1005278c:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
1005278e:	4b14      	ldr	r3, [pc, #80]	@ (100527e0 <UTIL_SEQ_Run+0x1e4>)
10052790:	681b      	ldr	r3, [r3, #0]
10052792:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10052794:	4b13      	ldr	r3, [pc, #76]	@ (100527e4 <UTIL_SEQ_Run+0x1e8>)
10052796:	681b      	ldr	r3, [r3, #0]
10052798:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
1005279a:	4b13      	ldr	r3, [pc, #76]	@ (100527e8 <UTIL_SEQ_Run+0x1ec>)
1005279c:	681b      	ldr	r3, [r3, #0]
1005279e:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
100527a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100527a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100527a4:	401a      	ands	r2, r3
100527a6:	4b0d      	ldr	r3, [pc, #52]	@ (100527dc <UTIL_SEQ_Run+0x1e0>)
100527a8:	681b      	ldr	r3, [r3, #0]
100527aa:	4013      	ands	r3, r2
100527ac:	d106      	bne.n	100527bc <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
100527ae:	4b0f      	ldr	r3, [pc, #60]	@ (100527ec <UTIL_SEQ_Run+0x1f0>)
100527b0:	681b      	ldr	r3, [r3, #0]
100527b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100527b4:	4013      	ands	r3, r2
100527b6:	d101      	bne.n	100527bc <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
100527b8:	f7f0 fba1 	bl	10042efe <UTIL_SEQ_Idle>
100527bc:	69fb      	ldr	r3, [r7, #28]
100527be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100527c0:	68fb      	ldr	r3, [r7, #12]
100527c2:	f383 8810 	msr	PRIMASK, r3
}
100527c6:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
100527c8:	f000 f8de 	bl	10052988 <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
100527cc:	4b03      	ldr	r3, [pc, #12]	@ (100527dc <UTIL_SEQ_Run+0x1e0>)
100527ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100527d0:	601a      	str	r2, [r3, #0]

  return;
100527d2:	46c0      	nop			@ (mov r8, r8)
}
100527d4:	46bd      	mov	sp, r7
100527d6:	b010      	add	sp, #64	@ 0x40
100527d8:	bd80      	pop	{r7, pc}
100527da:	46c0      	nop			@ (mov r8, r8)
100527dc:	20001518 	.word	0x20001518
100527e0:	2000107c 	.word	0x2000107c
100527e4:	20001080 	.word	0x20001080
100527e8:	20001514 	.word	0x20001514
100527ec:	20001084 	.word	0x20001084
100527f0:	2000110c 	.word	0x2000110c
100527f4:	20001088 	.word	0x20001088
100527f8:	2000108c 	.word	0x2000108c

100527fc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
100527fc:	b580      	push	{r7, lr}
100527fe:	b088      	sub	sp, #32
10052800:	af00      	add	r7, sp, #0
10052802:	60f8      	str	r0, [r7, #12]
10052804:	60b9      	str	r1, [r7, #8]
10052806:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10052808:	f3ef 8310 	mrs	r3, PRIMASK
1005280c:	617b      	str	r3, [r7, #20]
  return(result);
1005280e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
10052810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10052812:	b672      	cpsid	i
}
10052814:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
10052816:	68fb      	ldr	r3, [r7, #12]
10052818:	0018      	movs	r0, r3
1005281a:	f000 f8bb 	bl	10052994 <SEQ_BitPosition>
1005281e:	0003      	movs	r3, r0
10052820:	001a      	movs	r2, r3
10052822:	4b07      	ldr	r3, [pc, #28]	@ (10052840 <UTIL_SEQ_RegTask+0x44>)
10052824:	0092      	lsls	r2, r2, #2
10052826:	6879      	ldr	r1, [r7, #4]
10052828:	50d1      	str	r1, [r2, r3]
1005282a:	69fb      	ldr	r3, [r7, #28]
1005282c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005282e:	69bb      	ldr	r3, [r7, #24]
10052830:	f383 8810 	msr	PRIMASK, r3
}
10052834:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
10052836:	46c0      	nop			@ (mov r8, r8)
}
10052838:	46bd      	mov	sp, r7
1005283a:	b008      	add	sp, #32
1005283c:	bd80      	pop	{r7, pc}
1005283e:	46c0      	nop			@ (mov r8, r8)
10052840:	2000108c 	.word	0x2000108c

10052844 <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
10052844:	b580      	push	{r7, lr}
10052846:	b086      	sub	sp, #24
10052848:	af00      	add	r7, sp, #0
1005284a:	6078      	str	r0, [r7, #4]
1005284c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005284e:	f3ef 8310 	mrs	r3, PRIMASK
10052852:	60fb      	str	r3, [r7, #12]
  return(result);
10052854:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10052856:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10052858:	b672      	cpsid	i
}
1005285a:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
1005285c:	4b0d      	ldr	r3, [pc, #52]	@ (10052894 <UTIL_SEQ_SetTask+0x50>)
1005285e:	681a      	ldr	r2, [r3, #0]
10052860:	687b      	ldr	r3, [r7, #4]
10052862:	431a      	orrs	r2, r3
10052864:	4b0b      	ldr	r3, [pc, #44]	@ (10052894 <UTIL_SEQ_SetTask+0x50>)
10052866:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
10052868:	4b0b      	ldr	r3, [pc, #44]	@ (10052898 <UTIL_SEQ_SetTask+0x54>)
1005286a:	683a      	ldr	r2, [r7, #0]
1005286c:	00d2      	lsls	r2, r2, #3
1005286e:	58d2      	ldr	r2, [r2, r3]
10052870:	687b      	ldr	r3, [r7, #4]
10052872:	431a      	orrs	r2, r3
10052874:	0011      	movs	r1, r2
10052876:	4b08      	ldr	r3, [pc, #32]	@ (10052898 <UTIL_SEQ_SetTask+0x54>)
10052878:	683a      	ldr	r2, [r7, #0]
1005287a:	00d2      	lsls	r2, r2, #3
1005287c:	50d1      	str	r1, [r2, r3]
1005287e:	697b      	ldr	r3, [r7, #20]
10052880:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10052882:	693b      	ldr	r3, [r7, #16]
10052884:	f383 8810 	msr	PRIMASK, r3
}
10052888:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
1005288a:	46c0      	nop			@ (mov r8, r8)
}
1005288c:	46bd      	mov	sp, r7
1005288e:	b006      	add	sp, #24
10052890:	bd80      	pop	{r7, pc}
10052892:	46c0      	nop			@ (mov r8, r8)
10052894:	2000107c 	.word	0x2000107c
10052898:	2000110c 	.word	0x2000110c

1005289c <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
1005289c:	b580      	push	{r7, lr}
1005289e:	b086      	sub	sp, #24
100528a0:	af00      	add	r7, sp, #0
100528a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100528a4:	f3ef 8310 	mrs	r3, PRIMASK
100528a8:	60fb      	str	r3, [r7, #12]
  return(result);
100528aa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100528ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
100528ae:	b672      	cpsid	i
}
100528b0:	46c0      	nop			@ (mov r8, r8)

  EvtSet |= EvtId_bm;
100528b2:	4b08      	ldr	r3, [pc, #32]	@ (100528d4 <UTIL_SEQ_SetEvt+0x38>)
100528b4:	681a      	ldr	r2, [r3, #0]
100528b6:	687b      	ldr	r3, [r7, #4]
100528b8:	431a      	orrs	r2, r3
100528ba:	4b06      	ldr	r3, [pc, #24]	@ (100528d4 <UTIL_SEQ_SetEvt+0x38>)
100528bc:	601a      	str	r2, [r3, #0]
100528be:	697b      	ldr	r3, [r7, #20]
100528c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100528c2:	693b      	ldr	r3, [r7, #16]
100528c4:	f383 8810 	msr	PRIMASK, r3
}
100528c8:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
100528ca:	46c0      	nop			@ (mov r8, r8)
}
100528cc:	46bd      	mov	sp, r7
100528ce:	b006      	add	sp, #24
100528d0:	bd80      	pop	{r7, pc}
100528d2:	46c0      	nop			@ (mov r8, r8)
100528d4:	20001080 	.word	0x20001080

100528d8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
100528d8:	b580      	push	{r7, lr}
100528da:	b088      	sub	sp, #32
100528dc:	af00      	add	r7, sp, #0
100528de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
100528e0:	4b1f      	ldr	r3, [pc, #124]	@ (10052960 <UTIL_SEQ_WaitEvt+0x88>)
100528e2:	681b      	ldr	r3, [r3, #0]
100528e4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
100528e6:	4b1e      	ldr	r3, [pc, #120]	@ (10052960 <UTIL_SEQ_WaitEvt+0x88>)
100528e8:	681b      	ldr	r3, [r3, #0]
100528ea:	3301      	adds	r3, #1
100528ec:	d102      	bne.n	100528f4 <UTIL_SEQ_WaitEvt+0x1c>
  {
    wait_task_idx = 0u;
100528ee:	2300      	movs	r3, #0
100528f0:	61fb      	str	r3, [r7, #28]
100528f2:	e005      	b.n	10052900 <UTIL_SEQ_WaitEvt+0x28>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
100528f4:	4b1a      	ldr	r3, [pc, #104]	@ (10052960 <UTIL_SEQ_WaitEvt+0x88>)
100528f6:	681b      	ldr	r3, [r3, #0]
100528f8:	2201      	movs	r2, #1
100528fa:	409a      	lsls	r2, r3
100528fc:	0013      	movs	r3, r2
100528fe:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
10052900:	4b18      	ldr	r3, [pc, #96]	@ (10052964 <UTIL_SEQ_WaitEvt+0x8c>)
10052902:	681b      	ldr	r3, [r3, #0]
10052904:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
10052906:	4b17      	ldr	r3, [pc, #92]	@ (10052964 <UTIL_SEQ_WaitEvt+0x8c>)
10052908:	687a      	ldr	r2, [r7, #4]
1005290a:	601a      	str	r2, [r3, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
1005290c:	e005      	b.n	1005291a <UTIL_SEQ_WaitEvt+0x42>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
1005290e:	687a      	ldr	r2, [r7, #4]
10052910:	69fb      	ldr	r3, [r7, #28]
10052912:	0011      	movs	r1, r2
10052914:	0018      	movs	r0, r3
10052916:	f000 f829 	bl	1005296c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
1005291a:	4b13      	ldr	r3, [pc, #76]	@ (10052968 <UTIL_SEQ_WaitEvt+0x90>)
1005291c:	681b      	ldr	r3, [r3, #0]
1005291e:	687a      	ldr	r2, [r7, #4]
10052920:	4013      	ands	r3, r2
10052922:	d0f4      	beq.n	1005290e <UTIL_SEQ_WaitEvt+0x36>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
10052924:	4b0e      	ldr	r3, [pc, #56]	@ (10052960 <UTIL_SEQ_WaitEvt+0x88>)
10052926:	69ba      	ldr	r2, [r7, #24]
10052928:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005292a:	f3ef 8310 	mrs	r3, PRIMASK
1005292e:	60bb      	str	r3, [r7, #8]
  return(result);
10052930:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10052932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
10052934:	b672      	cpsid	i
}
10052936:	46c0      	nop			@ (mov r8, r8)

  EvtSet &= (~EvtId_bm);
10052938:	687b      	ldr	r3, [r7, #4]
1005293a:	43da      	mvns	r2, r3
1005293c:	4b0a      	ldr	r3, [pc, #40]	@ (10052968 <UTIL_SEQ_WaitEvt+0x90>)
1005293e:	681b      	ldr	r3, [r3, #0]
10052940:	401a      	ands	r2, r3
10052942:	4b09      	ldr	r3, [pc, #36]	@ (10052968 <UTIL_SEQ_WaitEvt+0x90>)
10052944:	601a      	str	r2, [r3, #0]
10052946:	693b      	ldr	r3, [r7, #16]
10052948:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005294a:	68fb      	ldr	r3, [r7, #12]
1005294c:	f383 8810 	msr	PRIMASK, r3
}
10052950:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
10052952:	4b04      	ldr	r3, [pc, #16]	@ (10052964 <UTIL_SEQ_WaitEvt+0x8c>)
10052954:	697a      	ldr	r2, [r7, #20]
10052956:	601a      	str	r2, [r3, #0]
  return;
10052958:	46c0      	nop			@ (mov r8, r8)
}
1005295a:	46bd      	mov	sp, r7
1005295c:	b008      	add	sp, #32
1005295e:	bd80      	pop	{r7, pc}
10052960:	20001088 	.word	0x20001088
10052964:	20001084 	.word	0x20001084
10052968:	20001080 	.word	0x20001080

1005296c <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
1005296c:	b580      	push	{r7, lr}
1005296e:	b082      	sub	sp, #8
10052970:	af00      	add	r7, sp, #0
10052972:	6078      	str	r0, [r7, #4]
10052974:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
10052976:	687b      	ldr	r3, [r7, #4]
10052978:	43db      	mvns	r3, r3
1005297a:	0018      	movs	r0, r3
1005297c:	f7ff fe3e 	bl	100525fc <UTIL_SEQ_Run>
  return;
10052980:	46c0      	nop			@ (mov r8, r8)
}
10052982:	46bd      	mov	sp, r7
10052984:	b002      	add	sp, #8
10052986:	bd80      	pop	{r7, pc}

10052988 <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
10052988:	b580      	push	{r7, lr}
1005298a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
1005298c:	46c0      	nop			@ (mov r8, r8)
}
1005298e:	46bd      	mov	sp, r7
10052990:	bd80      	pop	{r7, pc}
	...

10052994 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
10052994:	b580      	push	{r7, lr}
10052996:	b084      	sub	sp, #16
10052998:	af00      	add	r7, sp, #0
1005299a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
1005299c:	210f      	movs	r1, #15
1005299e:	187b      	adds	r3, r7, r1
100529a0:	2200      	movs	r2, #0
100529a2:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
100529a4:	687b      	ldr	r3, [r7, #4]
100529a6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
100529a8:	68ba      	ldr	r2, [r7, #8]
100529aa:	2380      	movs	r3, #128	@ 0x80
100529ac:	025b      	lsls	r3, r3, #9
100529ae:	429a      	cmp	r2, r3
100529b0:	d205      	bcs.n	100529be <SEQ_BitPosition+0x2a>
100529b2:	187b      	adds	r3, r7, r1
100529b4:	2210      	movs	r2, #16
100529b6:	701a      	strb	r2, [r3, #0]
100529b8:	68bb      	ldr	r3, [r7, #8]
100529ba:	041b      	lsls	r3, r3, #16
100529bc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
100529be:	68ba      	ldr	r2, [r7, #8]
100529c0:	2380      	movs	r3, #128	@ 0x80
100529c2:	045b      	lsls	r3, r3, #17
100529c4:	429a      	cmp	r2, r3
100529c6:	d208      	bcs.n	100529da <SEQ_BitPosition+0x46>
100529c8:	220f      	movs	r2, #15
100529ca:	18bb      	adds	r3, r7, r2
100529cc:	18ba      	adds	r2, r7, r2
100529ce:	7812      	ldrb	r2, [r2, #0]
100529d0:	3208      	adds	r2, #8
100529d2:	701a      	strb	r2, [r3, #0]
100529d4:	68bb      	ldr	r3, [r7, #8]
100529d6:	021b      	lsls	r3, r3, #8
100529d8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
100529da:	68ba      	ldr	r2, [r7, #8]
100529dc:	2380      	movs	r3, #128	@ 0x80
100529de:	055b      	lsls	r3, r3, #21
100529e0:	429a      	cmp	r2, r3
100529e2:	d208      	bcs.n	100529f6 <SEQ_BitPosition+0x62>
100529e4:	220f      	movs	r2, #15
100529e6:	18bb      	adds	r3, r7, r2
100529e8:	18ba      	adds	r2, r7, r2
100529ea:	7812      	ldrb	r2, [r2, #0]
100529ec:	3204      	adds	r2, #4
100529ee:	701a      	strb	r2, [r3, #0]
100529f0:	68bb      	ldr	r3, [r7, #8]
100529f2:	011b      	lsls	r3, r3, #4
100529f4:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
100529f6:	68bb      	ldr	r3, [r7, #8]
100529f8:	0f1b      	lsrs	r3, r3, #28
100529fa:	4a08      	ldr	r2, [pc, #32]	@ (10052a1c <SEQ_BitPosition+0x88>)
100529fc:	5cd1      	ldrb	r1, [r2, r3]
100529fe:	200f      	movs	r0, #15
10052a00:	183b      	adds	r3, r7, r0
10052a02:	183a      	adds	r2, r7, r0
10052a04:	7812      	ldrb	r2, [r2, #0]
10052a06:	188a      	adds	r2, r1, r2
10052a08:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
10052a0a:	183b      	adds	r3, r7, r0
10052a0c:	781b      	ldrb	r3, [r3, #0]
10052a0e:	221f      	movs	r2, #31
10052a10:	1ad3      	subs	r3, r2, r3
10052a12:	b2db      	uxtb	r3, r3
}
10052a14:	0018      	movs	r0, r3
10052a16:	46bd      	mov	sp, r7
10052a18:	b004      	add	sp, #16
10052a1a:	bd80      	pop	{r7, pc}
10052a1c:	1006cf4c 	.word	0x1006cf4c

10052a20 <aci_gap_init>:
10052a20:	b580      	push	{r7, lr}
10052a22:	2802      	cmp	r0, #2
10052a24:	d901      	bls.n	10052a2a <aci_gap_init+0xa>
10052a26:	2012      	movs	r0, #18
10052a28:	bd80      	pop	{r7, pc}
10052a2a:	f001 fc0f 	bl	1005424c <GAP_Init>
10052a2e:	bd80      	pop	{r7, pc}

10052a30 <aci_gap_terminate_api>:
10052a30:	b580      	push	{r7, lr}
10052a32:	f001 fde1 	bl	100545f8 <GAP_Terminate_Link>
10052a36:	bd80      	pop	{r7, pc}

10052a38 <_aci_gap_lists_check>:
10052a38:	b5b0      	push	{r4, r5, r7, lr}
10052a3a:	4604      	mov	r4, r0
10052a3c:	7800      	ldrb	r0, [r0, #0]
10052a3e:	2800      	cmp	r0, #0
10052a40:	d001      	beq.n	10052a46 <_aci_gap_lists_check+0xe>
10052a42:	2804      	cmp	r0, #4
10052a44:	d301      	bcc.n	10052a4a <_aci_gap_lists_check+0x12>
10052a46:	2012      	movs	r0, #18
10052a48:	e000      	b.n	10052a4c <_aci_gap_lists_check+0x14>
10052a4a:	2000      	movs	r0, #0
10052a4c:	2512      	movs	r5, #18
10052a4e:	2a00      	cmp	r2, #0
10052a50:	462a      	mov	r2, r5
10052a52:	d000      	beq.n	10052a56 <_aci_gap_lists_check+0x1e>
10052a54:	4602      	mov	r2, r0
10052a56:	2901      	cmp	r1, #1
10052a58:	d800      	bhi.n	10052a5c <_aci_gap_lists_check+0x24>
10052a5a:	4615      	mov	r5, r2
10052a5c:	2d00      	cmp	r5, #0
10052a5e:	d107      	bne.n	10052a70 <_aci_gap_lists_check+0x38>
10052a60:	f008 f963 	bl	1005ad2a <llc_priv_controller_privacy_csr_ucfg_weak>
10052a64:	2800      	cmp	r0, #0
10052a66:	d103      	bne.n	10052a70 <_aci_gap_lists_check+0x38>
10052a68:	7820      	ldrb	r0, [r4, #0]
10052a6a:	21fd      	movs	r1, #253	@ 0xfd
10052a6c:	4001      	ands	r1, r0
10052a6e:	7021      	strb	r1, [r4, #0]
10052a70:	4628      	mov	r0, r5
10052a72:	bdb0      	pop	{r4, r5, r7, pc}

10052a74 <aci_gap_configure_filter_accept_and_resolving_list>:
10052a74:	b5e0      	push	{r5, r6, r7, lr}
10052a76:	a901      	add	r1, sp, #4
10052a78:	7008      	strb	r0, [r1, #0]
10052a7a:	2201      	movs	r2, #1
10052a7c:	4608      	mov	r0, r1
10052a7e:	4611      	mov	r1, r2
10052a80:	f7ff ffda 	bl	10052a38 <_aci_gap_lists_check>
10052a84:	2800      	cmp	r0, #0
10052a86:	d000      	beq.n	10052a8a <aci_gap_configure_filter_accept_and_resolving_list+0x16>
10052a88:	bd8c      	pop	{r2, r3, r7, pc}
10052a8a:	a801      	add	r0, sp, #4
10052a8c:	7800      	ldrb	r0, [r0, #0]
10052a8e:	f001 fdc9 	bl	10054624 <GAP_configure_filter_accept_and_resolving_list>
10052a92:	bd8c      	pop	{r2, r3, r7, pc}

10052a94 <GAP_set_advertising_configuration_ucfg_weak>:
10052a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10052a96:	461c      	mov	r4, r3
10052a98:	4608      	mov	r0, r1
10052a9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
10052a9c:	9103      	str	r1, [sp, #12]
10052a9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
10052aa0:	9102      	str	r1, [sp, #8]
10052aa2:	9908      	ldr	r1, [sp, #32]
10052aa4:	9101      	str	r1, [sp, #4]
10052aa6:	9907      	ldr	r1, [sp, #28]
10052aa8:	9100      	str	r1, [sp, #0]
10052aaa:	9b06      	ldr	r3, [sp, #24]
10052aac:	4611      	mov	r1, r2
10052aae:	4622      	mov	r2, r4
10052ab0:	f001 fe98 	bl	100547e4 <GAP_set_legacy_advertising_configuration>
10052ab4:	b004      	add	sp, #16
10052ab6:	bd10      	pop	{r4, pc}

10052ab8 <GAP_set_advertising_data_ucfg_weak>:
10052ab8:	b580      	push	{r7, lr}
10052aba:	4619      	mov	r1, r3
10052abc:	4610      	mov	r0, r2
10052abe:	f002 f805 	bl	10054acc <GAP_set_legacy_advertising_data>
10052ac2:	bd80      	pop	{r7, pc}

10052ac4 <GAP_set_advertising_enable_ucfg_weak>:
10052ac4:	b580      	push	{r7, lr}
10052ac6:	f001 fefd 	bl	100548c4 <GAP_set_legacy_advertising_enable>
10052aca:	bd80      	pop	{r7, pc}

10052acc <aci_gap_set_advertising_configuration>:
10052acc:	b5f0      	push	{r4, r5, r6, r7, lr}
10052ace:	b093      	sub	sp, #76	@ 0x4c
10052ad0:	461f      	mov	r7, r3
10052ad2:	4615      	mov	r5, r2
10052ad4:	460e      	mov	r6, r1
10052ad6:	9012      	str	r0, [sp, #72]	@ 0x48
10052ad8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
10052ada:	4608      	mov	r0, r1
10052adc:	4611      	mov	r1, r2
10052ade:	4622      	mov	r2, r4
10052ae0:	f001 fe52 	bl	10054788 <GAP_check_discoverability_mode>
10052ae4:	2800      	cmp	r0, #0
10052ae6:	d124      	bne.n	10052b32 <aci_gap_set_advertising_configuration+0x66>
10052ae8:	9822      	ldr	r0, [sp, #136]	@ 0x88
10052aea:	900d      	str	r0, [sp, #52]	@ 0x34
10052aec:	ab1f      	add	r3, sp, #124	@ 0x7c
10052aee:	cb0d      	ldmia	r3, {r0, r2, r3}
10052af0:	9011      	str	r0, [sp, #68]	@ 0x44
10052af2:	981e      	ldr	r0, [sp, #120]	@ 0x78
10052af4:	900f      	str	r0, [sp, #60]	@ 0x3c
10052af6:	981d      	ldr	r0, [sp, #116]	@ 0x74
10052af8:	900e      	str	r0, [sp, #56]	@ 0x38
10052afa:	981b      	ldr	r0, [sp, #108]	@ 0x6c
10052afc:	900c      	str	r0, [sp, #48]	@ 0x30
10052afe:	991a      	ldr	r1, [sp, #104]	@ 0x68
10052b00:	9819      	ldr	r0, [sp, #100]	@ 0x64
10052b02:	9710      	str	r7, [sp, #64]	@ 0x40
10052b04:	9f18      	ldr	r7, [sp, #96]	@ 0x60
10052b06:	9208      	str	r2, [sp, #32]
10052b08:	9309      	str	r3, [sp, #36]	@ 0x24
10052b0a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10052b0c:	920a      	str	r2, [sp, #40]	@ 0x28
10052b0e:	9700      	str	r7, [sp, #0]
10052b10:	9001      	str	r0, [sp, #4]
10052b12:	9102      	str	r1, [sp, #8]
10052b14:	980c      	ldr	r0, [sp, #48]	@ 0x30
10052b16:	9003      	str	r0, [sp, #12]
10052b18:	9404      	str	r4, [sp, #16]
10052b1a:	980e      	ldr	r0, [sp, #56]	@ 0x38
10052b1c:	9005      	str	r0, [sp, #20]
10052b1e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10052b20:	9006      	str	r0, [sp, #24]
10052b22:	9811      	ldr	r0, [sp, #68]	@ 0x44
10052b24:	9007      	str	r0, [sp, #28]
10052b26:	9812      	ldr	r0, [sp, #72]	@ 0x48
10052b28:	4631      	mov	r1, r6
10052b2a:	462a      	mov	r2, r5
10052b2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10052b2e:	f7ff ffb1 	bl	10052a94 <GAP_set_advertising_configuration_ucfg_weak>
10052b32:	b013      	add	sp, #76	@ 0x4c
10052b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

10052b36 <aci_gap_set_advertising_data>:
10052b36:	b580      	push	{r7, lr}
10052b38:	f7ff ffbe 	bl	10052ab8 <GAP_set_advertising_data_ucfg_weak>
10052b3c:	bd80      	pop	{r7, pc}

10052b3e <aci_gap_set_advertising_enable>:
10052b3e:	b580      	push	{r7, lr}
10052b40:	f7ff ffc0 	bl	10052ac4 <GAP_set_advertising_enable_ucfg_weak>
10052b44:	bd80      	pop	{r7, pc}

10052b46 <aci_gap_set_io_capability_api>:
10052b46:	b580      	push	{r7, lr}
10052b48:	2804      	cmp	r0, #4
10052b4a:	d901      	bls.n	10052b50 <aci_gap_set_io_capability_api+0xa>
10052b4c:	2012      	movs	r0, #18
10052b4e:	bd80      	pop	{r7, pc}
10052b50:	f00e fd6a 	bl	10061628 <smp_sap_aci_set_io_capabilities>
10052b54:	bd80      	pop	{r7, pc}
	...

10052b58 <aci_gap_set_security_requirements_api>:
10052b58:	b5f0      	push	{r4, r5, r6, r7, lr}
10052b5a:	b089      	sub	sp, #36	@ 0x24
10052b5c:	4605      	mov	r5, r0
10052b5e:	4608      	mov	r0, r1
10052b60:	4328      	orrs	r0, r5
10052b62:	2412      	movs	r4, #18
10052b64:	2801      	cmp	r0, #1
10052b66:	d836      	bhi.n	10052bd6 <aci_gap_set_security_requirements_api+0x7e>
10052b68:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
10052b6a:	2f07      	cmp	r7, #7
10052b6c:	d333      	bcc.n	10052bd6 <aci_gap_set_security_requirements_api+0x7e>
10052b6e:	2f10      	cmp	r7, #16
10052b70:	d831      	bhi.n	10052bd6 <aci_gap_set_security_requirements_api+0x7e>
10052b72:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10052b74:	2810      	cmp	r0, #16
10052b76:	d82e      	bhi.n	10052bd6 <aci_gap_set_security_requirements_api+0x7e>
10052b78:	42b8      	cmp	r0, r7
10052b7a:	d32c      	bcc.n	10052bd6 <aci_gap_set_security_requirements_api+0x7e>
10052b7c:	460e      	mov	r6, r1
10052b7e:	9910      	ldr	r1, [sp, #64]	@ 0x40
10052b80:	2902      	cmp	r1, #2
10052b82:	d828      	bhi.n	10052bd6 <aci_gap_set_security_requirements_api+0x7e>
10052b84:	9101      	str	r1, [sp, #4]
10052b86:	9002      	str	r0, [sp, #8]
10052b88:	9303      	str	r3, [sp, #12]
10052b8a:	9204      	str	r2, [sp, #16]
10052b8c:	f7ff f8f7 	bl	10051d7e <secure_connections_csr_ucfg>
10052b90:	2801      	cmp	r0, #1
10052b92:	d106      	bne.n	10052ba2 <aci_gap_set_security_requirements_api+0x4a>
10052b94:	9904      	ldr	r1, [sp, #16]
10052b96:	2902      	cmp	r1, #2
10052b98:	d81d      	bhi.n	10052bd6 <aci_gap_set_security_requirements_api+0x7e>
10052b9a:	9a03      	ldr	r2, [sp, #12]
10052b9c:	2a01      	cmp	r2, #1
10052b9e:	d907      	bls.n	10052bb0 <aci_gap_set_security_requirements_api+0x58>
10052ba0:	e019      	b.n	10052bd6 <aci_gap_set_security_requirements_api+0x7e>
10052ba2:	9a03      	ldr	r2, [sp, #12]
10052ba4:	4610      	mov	r0, r2
10052ba6:	9904      	ldr	r1, [sp, #16]
10052ba8:	4308      	orrs	r0, r1
10052baa:	d001      	beq.n	10052bb0 <aci_gap_set_security_requirements_api+0x58>
10052bac:	2411      	movs	r4, #17
10052bae:	e012      	b.n	10052bd6 <aci_gap_set_security_requirements_api+0x7e>
10052bb0:	ac05      	add	r4, sp, #20
10052bb2:	9801      	ldr	r0, [sp, #4]
10052bb4:	7320      	strb	r0, [r4, #12]
10052bb6:	4809      	ldr	r0, [pc, #36]	@ (10052bdc <__arm_cp.1_0>)
10052bb8:	80e0      	strh	r0, [r4, #6]
10052bba:	9802      	ldr	r0, [sp, #8]
10052bbc:	7160      	strb	r0, [r4, #5]
10052bbe:	7127      	strb	r7, [r4, #4]
10052bc0:	70e2      	strb	r2, [r4, #3]
10052bc2:	70a1      	strb	r1, [r4, #2]
10052bc4:	7066      	strb	r6, [r4, #1]
10052bc6:	7025      	strb	r5, [r4, #0]
10052bc8:	f001 fcf6 	bl	100545b8 <GAP_get_identity_address_type>
10052bcc:	7360      	strb	r0, [r4, #13]
10052bce:	4620      	mov	r0, r4
10052bd0:	f00e fd60 	bl	10061694 <smp_sap_aci_set_authentication_req>
10052bd4:	4604      	mov	r4, r0
10052bd6:	4620      	mov	r0, r4
10052bd8:	b009      	add	sp, #36	@ 0x24
10052bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

10052bdc <__arm_cp.1_0>:
10052bdc:	00000707 	.word	0x00000707

10052be0 <aci_gap_passkey_resp_api>:
10052be0:	b580      	push	{r7, lr}
10052be2:	4a04      	ldr	r2, [pc, #16]	@ (10052bf4 <__arm_cp.4_0>)
10052be4:	4291      	cmp	r1, r2
10052be6:	d901      	bls.n	10052bec <aci_gap_passkey_resp_api+0xc>
10052be8:	2012      	movs	r0, #18
10052bea:	bd80      	pop	{r7, pc}
10052bec:	f00e fd7c 	bl	100616e8 <smp_sap_aci_passkey_response>
10052bf0:	bd80      	pop	{r7, pc}
10052bf2:	46c0      	nop			@ (mov r8, r8)

10052bf4 <__arm_cp.4_0>:
10052bf4:	000f423f 	.word	0x000f423f

10052bf8 <aci_gap_numeric_comparison_value_confirm_yesno_api>:
10052bf8:	b580      	push	{r7, lr}
10052bfa:	2901      	cmp	r1, #1
10052bfc:	d802      	bhi.n	10052c04 <aci_gap_numeric_comparison_value_confirm_yesno_api+0xc>
10052bfe:	f00e fd91 	bl	10061724 <smp_sap_aci_scp_numeric_comparison_response>
10052c02:	bd80      	pop	{r7, pc}
10052c04:	2012      	movs	r0, #18
10052c06:	bd80      	pop	{r7, pc}

10052c08 <aci_gap_clear_security_db_api>:
10052c08:	b580      	push	{r7, lr}
10052c0a:	f00c fdf7 	bl	1005f7fc <sdb_sap_clear_all_records>
10052c0e:	2000      	movs	r0, #0
10052c10:	bd80      	pop	{r7, pc}

10052c12 <aci_gatt_srv_add_service_api>:
10052c12:	b580      	push	{r7, lr}
10052c14:	f004 fa2c 	bl	10057070 <GAT_srv_add_service>
10052c18:	bd80      	pop	{r7, pc}

10052c1a <aci_gatt_srv_get_service_handle_api>:
10052c1a:	b580      	push	{r7, lr}
10052c1c:	f004 fcee 	bl	100575fc <GAT_srv_get_service_handle>
10052c20:	bd80      	pop	{r7, pc}

10052c22 <aci_gatt_srv_add_char_api>:
10052c22:	b580      	push	{r7, lr}
10052c24:	f004 fad4 	bl	100571d0 <GAT_srv_add_characteristic>
10052c28:	bd80      	pop	{r7, pc}

10052c2a <aci_gatt_srv_get_char_decl_handle_api>:
10052c2a:	b580      	push	{r7, lr}
10052c2c:	f004 fcf0 	bl	10057610 <GAT_srv_get_char_decl_handle>
10052c30:	bd80      	pop	{r7, pc}

10052c32 <aci_gatt_srv_notify_api>:
10052c32:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10052c34:	461c      	mov	r4, r3
10052c36:	ab02      	add	r3, sp, #8
10052c38:	9d08      	ldr	r5, [sp, #32]
10052c3a:	805d      	strh	r5, [r3, #2]
10052c3c:	801a      	strh	r2, [r3, #0]
10052c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10052c40:	9203      	str	r2, [sp, #12]
10052c42:	9300      	str	r3, [sp, #0]
10052c44:	2301      	movs	r3, #1
10052c46:	4622      	mov	r2, r4
10052c48:	f004 fc48 	bl	100574dc <GAT_srv_notify>
10052c4c:	b004      	add	sp, #16
10052c4e:	bdb0      	pop	{r4, r5, r7, pc}

10052c50 <aci_gatt_srv_resp_api>:
10052c50:	b51c      	push	{r2, r3, r4, lr}
10052c52:	9c05      	ldr	r4, [sp, #20]
10052c54:	9401      	str	r4, [sp, #4]
10052c56:	9c04      	ldr	r4, [sp, #16]
10052c58:	9400      	str	r4, [sp, #0]
10052c5a:	f004 fcc7 	bl	100575ec <GAT_srv_resp>
10052c5e:	2000      	movs	r0, #0
10052c60:	bd1c      	pop	{r2, r3, r4, pc}

10052c62 <aci_gatt_clt_confirm_indication_api>:
10052c62:	b580      	push	{r7, lr}
10052c64:	f003 fae3 	bl	1005622e <GAT_clt_confirm_indication>
10052c68:	bd80      	pop	{r7, pc}

10052c6a <configBitmapGet>:
10052c6a:	2000      	movs	r0, #0
10052c6c:	4770      	bx	lr
	...

10052c70 <HAL_Read_ConfigData>:
10052c70:	b5f0      	push	{r4, r5, r6, r7, lr}
10052c72:	b08b      	sub	sp, #44	@ 0x2c
10052c74:	4615      	mov	r5, r2
10052c76:	460c      	mov	r4, r1
10052c78:	493a      	ldr	r1, [pc, #232]	@ (10052d64 <__arm_cp.5_0>)
10052c7a:	680b      	ldr	r3, [r1, #0]
10052c7c:	4606      	mov	r6, r0
10052c7e:	3e28      	subs	r6, #40	@ 0x28
10052c80:	2206      	movs	r2, #6
10052c82:	2112      	movs	r1, #18
10052c84:	2e0b      	cmp	r6, #11
10052c86:	d910      	bls.n	10052caa <HAL_Read_ConfigData+0x3a>
10052c88:	2800      	cmp	r0, #0
10052c8a:	d01c      	beq.n	10052cc6 <HAL_Read_ConfigData+0x56>
10052c8c:	28ff      	cmp	r0, #255	@ 0xff
10052c8e:	d035      	beq.n	10052cfc <HAL_Read_ConfigData+0x8c>
10052c90:	2808      	cmp	r0, #8
10052c92:	d017      	beq.n	10052cc4 <HAL_Read_ConfigData+0x54>
10052c94:	2818      	cmp	r0, #24
10052c96:	d015      	beq.n	10052cc4 <HAL_Read_ConfigData+0x54>
10052c98:	2880      	cmp	r0, #128	@ 0x80
10052c9a:	d03c      	beq.n	10052d16 <HAL_Read_ConfigData+0xa6>
10052c9c:	2881      	cmp	r0, #129	@ 0x81
10052c9e:	d047      	beq.n	10052d30 <HAL_Read_ConfigData+0xc0>
10052ca0:	28fe      	cmp	r0, #254	@ 0xfe
10052ca2:	d04b      	beq.n	10052d3c <HAL_Read_ConfigData+0xcc>
10052ca4:	2806      	cmp	r0, #6
10052ca6:	d00b      	beq.n	10052cc0 <HAL_Read_ConfigData+0x50>
10052ca8:	e013      	b.n	10052cd2 <HAL_Read_ConfigData+0x62>
10052caa:	46c0      	nop			@ (mov r8, r8)
10052cac:	447e      	add	r6, pc
10052cae:	7936      	ldrb	r6, [r6, #4]
10052cb0:	0076      	lsls	r6, r6, #1
10052cb2:	44b7      	add	pc, r6
10052cb4:	0e050e05 	.word	0x0e050e05
10052cb8:	0e080e11 	.word	0x0e080e11
10052cbc:	180e0e0e 	.word	0x180e0e0e
10052cc0:	2202      	movs	r2, #2
10052cc2:	e000      	b.n	10052cc6 <HAL_Read_ConfigData+0x56>
10052cc4:	2210      	movs	r2, #16
10052cc6:	7022      	strb	r2, [r4, #0]
10052cc8:	1819      	adds	r1, r3, r0
10052cca:	4628      	mov	r0, r5
10052ccc:	f7f3 f8d4 	bl	10045e78 <BLEPLAT_MemCpy>
10052cd0:	2100      	movs	r1, #0
10052cd2:	4608      	mov	r0, r1
10052cd4:	b00b      	add	sp, #44	@ 0x2c
10052cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10052cd8:	2001      	movs	r0, #1
10052cda:	7020      	strb	r0, [r4, #0]
10052cdc:	212c      	movs	r1, #44	@ 0x2c
10052cde:	5c59      	ldrb	r1, [r3, r1]
10052ce0:	4001      	ands	r1, r0
10052ce2:	7029      	strb	r1, [r5, #0]
10052ce4:	e7f4      	b.n	10052cd0 <HAL_Read_ConfigData+0x60>
10052ce6:	f001 fd47 	bl	10054778 <GAP_is_rpa_change_at_timeout_enabled>
10052cea:	a901      	add	r1, sp, #4
10052cec:	7008      	strb	r0, [r1, #0]
10052cee:	2601      	movs	r6, #1
10052cf0:	4628      	mov	r0, r5
10052cf2:	4632      	mov	r2, r6
10052cf4:	f7f3 f8c0 	bl	10045e78 <BLEPLAT_MemCpy>
10052cf8:	7026      	strb	r6, [r4, #0]
10052cfa:	e7e9      	b.n	10052cd0 <HAL_Read_ConfigData+0x60>
10052cfc:	a801      	add	r0, sp, #4
10052cfe:	f7ff ffb4 	bl	10052c6a <configBitmapGet>
10052d02:	2800      	cmp	r0, #0
10052d04:	d026      	beq.n	10052d54 <HAL_Read_ConfigData+0xe4>
10052d06:	a901      	add	r1, sp, #4
10052d08:	2604      	movs	r6, #4
10052d0a:	4628      	mov	r0, r5
10052d0c:	4632      	mov	r2, r6
10052d0e:	f7f3 f8b3 	bl	10045e78 <BLEPLAT_MemCpy>
10052d12:	2100      	movs	r1, #0
10052d14:	e020      	b.n	10052d58 <HAL_Read_ConfigData+0xe8>
10052d16:	2006      	movs	r0, #6
10052d18:	7020      	strb	r0, [r4, #0]
10052d1a:	a801      	add	r0, sp, #4
10052d1c:	f00f f94a 	bl	10061fb4 <nvm_dev_id_data_get_record>
10052d20:	2800      	cmp	r0, #0
10052d22:	d01b      	beq.n	10052d5c <HAL_Read_ConfigData+0xec>
10052d24:	7822      	ldrb	r2, [r4, #0]
10052d26:	21ff      	movs	r1, #255	@ 0xff
10052d28:	4628      	mov	r0, r5
10052d2a:	f7f3 f8b5 	bl	10045e98 <BLEPLAT_MemSet>
10052d2e:	e7cf      	b.n	10052cd0 <HAL_Read_ConfigData+0x60>
10052d30:	2206      	movs	r2, #6
10052d32:	7022      	strb	r2, [r4, #0]
10052d34:	480c      	ldr	r0, [pc, #48]	@ (10052d68 <__arm_cp.5_1>)
10052d36:	6801      	ldr	r1, [r0, #0]
10052d38:	3166      	adds	r1, #102	@ 0x66
10052d3a:	e7c6      	b.n	10052cca <HAL_Read_ConfigData+0x5a>
10052d3c:	ae01      	add	r6, sp, #4
10052d3e:	4630      	mov	r0, r6
10052d40:	f000 fb8c 	bl	1005345c <log_verbosity_get_ucfg_weak>
10052d44:	2705      	movs	r7, #5
10052d46:	4628      	mov	r0, r5
10052d48:	4631      	mov	r1, r6
10052d4a:	463a      	mov	r2, r7
10052d4c:	f7f3 f894 	bl	10045e78 <BLEPLAT_MemCpy>
10052d50:	7027      	strb	r7, [r4, #0]
10052d52:	e7bd      	b.n	10052cd0 <HAL_Read_ConfigData+0x60>
10052d54:	2112      	movs	r1, #18
10052d56:	2600      	movs	r6, #0
10052d58:	7026      	strb	r6, [r4, #0]
10052d5a:	e7ba      	b.n	10052cd2 <HAL_Read_ConfigData+0x62>
10052d5c:	7822      	ldrb	r2, [r4, #0]
10052d5e:	a901      	add	r1, sp, #4
10052d60:	3120      	adds	r1, #32
10052d62:	e7b2      	b.n	10052cca <HAL_Read_ConfigData+0x5a>

10052d64 <__arm_cp.5_0>:
10052d64:	20001120 	.word	0x20001120

10052d68 <__arm_cp.5_1>:
10052d68:	20001128 	.word	0x20001128

10052d6c <aci_hal_read_config_data>:
10052d6c:	b580      	push	{r7, lr}
10052d6e:	f7ff ff7f 	bl	10052c70 <HAL_Read_ConfigData>
10052d72:	bd80      	pop	{r7, pc}

10052d74 <aci_hal_set_tx_power_level>:
10052d74:	b580      	push	{r7, lr}
10052d76:	f000 f801 	bl	10052d7c <HAL_Set_TX_Power_Level>
10052d7a:	bd80      	pop	{r7, pc}

10052d7c <HAL_Set_TX_Power_Level>:
10052d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10052d7e:	460e      	mov	r6, r1
10052d80:	4605      	mov	r5, r0
10052d82:	2412      	movs	r4, #18
10052d84:	f7f3 f93d 	bl	10046002 <BLEPLAT_GetMaxPALevel>
10052d88:	42b0      	cmp	r0, r6
10052d8a:	d317      	bcc.n	10052dbc <HAL_Set_TX_Power_Level+0x40>
10052d8c:	2d01      	cmp	r5, #1
10052d8e:	d815      	bhi.n	10052dbc <HAL_Set_TX_Power_Level+0x40>
10052d90:	480b      	ldr	r0, [pc, #44]	@ (10052dc0 <__arm_cp.11_0>)
10052d92:	6800      	ldr	r0, [r0, #0]
10052d94:	7a81      	ldrb	r1, [r0, #10]
10052d96:	9100      	str	r1, [sp, #0]
10052d98:	7285      	strb	r5, [r0, #10]
10052d9a:	7a47      	ldrb	r7, [r0, #9]
10052d9c:	7246      	strb	r6, [r0, #9]
10052d9e:	4628      	mov	r0, r5
10052da0:	f7f3 f93f 	bl	10046022 <BLEPLAT_SetHighPower>
10052da4:	2400      	movs	r4, #0
10052da6:	42b7      	cmp	r7, r6
10052da8:	d102      	bne.n	10052db0 <HAL_Set_TX_Power_Level+0x34>
10052daa:	9800      	ldr	r0, [sp, #0]
10052dac:	42a8      	cmp	r0, r5
10052dae:	d005      	beq.n	10052dbc <HAL_Set_TX_Power_Level+0x40>
10052db0:	20ff      	movs	r0, #255	@ 0xff
10052db2:	227f      	movs	r2, #127	@ 0x7f
10052db4:	2101      	movs	r1, #1
10052db6:	460b      	mov	r3, r1
10052db8:	f009 fa84 	bl	1005c2c4 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
10052dbc:	4620      	mov	r0, r4
10052dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10052dc0 <__arm_cp.11_0>:
10052dc0:	20001174 	.word	0x20001174

10052dc4 <ble_HAL_Init>:
10052dc4:	b580      	push	{r7, lr}
10052dc6:	4804      	ldr	r0, [pc, #16]	@ (10052dd8 <__arm_cp.17_0>)
10052dc8:	6800      	ldr	r0, [r0, #0]
10052dca:	3060      	adds	r0, #96	@ 0x60
10052dcc:	2100      	movs	r1, #0
10052dce:	2204      	movs	r2, #4
10052dd0:	f7f3 f862 	bl	10045e98 <BLEPLAT_MemSet>
10052dd4:	bd80      	pop	{r7, pc}
10052dd6:	46c0      	nop			@ (mov r8, r8)

10052dd8 <__arm_cp.17_0>:
10052dd8:	20001174 	.word	0x20001174

10052ddc <hal_read_radio_activity_state>:
10052ddc:	b570      	push	{r4, r5, r6, lr}
10052dde:	4603      	mov	r3, r0
10052de0:	480a      	ldr	r0, [pc, #40]	@ (10052e0c <__arm_cp.18_0>)
10052de2:	6804      	ldr	r4, [r0, #0]
10052de4:	f3ef 8010 	mrs	r0, PRIMASK
10052de8:	b672      	cpsid	i
10052dea:	7d20      	ldrb	r0, [r4, #20]
10052dec:	2500      	movs	r5, #0
10052dee:	7525      	strb	r5, [r4, #20]
10052df0:	7c25      	ldrb	r5, [r4, #16]
10052df2:	260f      	movs	r6, #15
10052df4:	402e      	ands	r6, r5
10052df6:	701e      	strb	r6, [r3, #0]
10052df8:	7c23      	ldrb	r3, [r4, #16]
10052dfa:	091b      	lsrs	r3, r3, #4
10052dfc:	700b      	strb	r3, [r1, #0]
10052dfe:	68e1      	ldr	r1, [r4, #12]
10052e00:	6011      	str	r1, [r2, #0]
10052e02:	1e41      	subs	r1, r0, #1
10052e04:	4188      	sbcs	r0, r1
10052e06:	b662      	cpsie	i
10052e08:	bd70      	pop	{r4, r5, r6, pc}
10052e0a:	46c0      	nop			@ (mov r8, r8)

10052e0c <__arm_cp.18_0>:
10052e0c:	20001174 	.word	0x20001174

10052e10 <hal_radio_activity_state_init>:
10052e10:	4803      	ldr	r0, [pc, #12]	@ (10052e20 <__arm_cp.20_0>)
10052e12:	6800      	ldr	r0, [r0, #0]
10052e14:	2100      	movs	r1, #0
10052e16:	7501      	strb	r1, [r0, #20]
10052e18:	8241      	strh	r1, [r0, #18]
10052e1a:	7401      	strb	r1, [r0, #16]
10052e1c:	4770      	bx	lr
10052e1e:	46c0      	nop			@ (mov r8, r8)

10052e20 <__arm_cp.20_0>:
10052e20:	20001174 	.word	0x20001174

10052e24 <aci_hal_set_radio_activity_mask>:
10052e24:	4902      	ldr	r1, [pc, #8]	@ (10052e30 <__arm_cp.21_0>)
10052e26:	6809      	ldr	r1, [r1, #0]
10052e28:	8248      	strh	r0, [r1, #18]
10052e2a:	2000      	movs	r0, #0
10052e2c:	4770      	bx	lr
10052e2e:	46c0      	nop			@ (mov r8, r8)

10052e30 <__arm_cp.21_0>:
10052e30:	20001174 	.word	0x20001174

10052e34 <hal_radio_activity_state_cb_check>:
10052e34:	b510      	push	{r4, lr}
10052e36:	b086      	sub	sp, #24
10052e38:	4815      	ldr	r0, [pc, #84]	@ (10052e90 <__arm_cp.22_0>)
10052e3a:	6804      	ldr	r4, [r0, #0]
10052e3c:	a802      	add	r0, sp, #8
10052e3e:	a901      	add	r1, sp, #4
10052e40:	466a      	mov	r2, sp
10052e42:	f7ff ffcb 	bl	10052ddc <hal_read_radio_activity_state>
10052e46:	2800      	cmp	r0, #0
10052e48:	d01f      	beq.n	10052e8a <hal_radio_activity_state_cb_check+0x56>
10052e4a:	a802      	add	r0, sp, #8
10052e4c:	7801      	ldrb	r1, [r0, #0]
10052e4e:	8a60      	ldrh	r0, [r4, #18]
10052e50:	40c8      	lsrs	r0, r1
10052e52:	07c0      	lsls	r0, r0, #31
10052e54:	d019      	beq.n	10052e8a <hal_radio_activity_state_cb_check+0x56>
10052e56:	9a01      	ldr	r2, [sp, #4]
10052e58:	9b00      	ldr	r3, [sp, #0]
10052e5a:	a803      	add	r0, sp, #12
10052e5c:	2408      	movs	r4, #8
10052e5e:	7084      	strb	r4, [r0, #2]
10052e60:	0e1c      	lsrs	r4, r3, #24
10052e62:	72c4      	strb	r4, [r0, #11]
10052e64:	0c1c      	lsrs	r4, r3, #16
10052e66:	7284      	strb	r4, [r0, #10]
10052e68:	0a1c      	lsrs	r4, r3, #8
10052e6a:	7244      	strb	r4, [r0, #9]
10052e6c:	7203      	strb	r3, [r0, #8]
10052e6e:	71c2      	strb	r2, [r0, #7]
10052e70:	7181      	strb	r1, [r0, #6]
10052e72:	21ff      	movs	r1, #255	@ 0xff
10052e74:	7041      	strb	r1, [r0, #1]
10052e76:	2182      	movs	r1, #130	@ 0x82
10052e78:	7001      	strb	r1, [r0, #0]
10052e7a:	2100      	movs	r1, #0
10052e7c:	7141      	strb	r1, [r0, #5]
10052e7e:	2204      	movs	r2, #4
10052e80:	7102      	strb	r2, [r0, #4]
10052e82:	70c1      	strb	r1, [r0, #3]
10052e84:	210c      	movs	r1, #12
10052e86:	f7fe fe21 	bl	10051acc <BLE_STACK_Event>
10052e8a:	b006      	add	sp, #24
10052e8c:	bd10      	pop	{r4, pc}
10052e8e:	46c0      	nop			@ (mov r8, r8)

10052e90 <__arm_cp.22_0>:
10052e90:	20001174 	.word	0x20001174

10052e94 <aci_l2cap_connection_parameter_update_req_api>:
10052e94:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10052e96:	ac01      	add	r4, sp, #4
10052e98:	9d08      	ldr	r5, [sp, #32]
10052e9a:	8125      	strh	r5, [r4, #8]
10052e9c:	80e3      	strh	r3, [r4, #6]
10052e9e:	80a2      	strh	r2, [r4, #4]
10052ea0:	8061      	strh	r1, [r4, #2]
10052ea2:	8020      	strh	r0, [r4, #0]
10052ea4:	4620      	mov	r0, r4
10052ea6:	f004 fe9f 	bl	10057be8 <L2C_build_connect_update_request>
10052eaa:	b004      	add	sp, #16
10052eac:	bdb0      	pop	{r4, r5, r7, pc}
	...

10052eb0 <Acl_Init>:
10052eb0:	4803      	ldr	r0, [pc, #12]	@ (10052ec0 <__arm_cp.0_0>)
10052eb2:	6800      	ldr	r0, [r0, #0]
10052eb4:	2188      	movs	r1, #136	@ 0x88
10052eb6:	4a03      	ldr	r2, [pc, #12]	@ (10052ec4 <__arm_cp.0_1>)
10052eb8:	5042      	str	r2, [r0, r1]
10052eba:	2000      	movs	r0, #0
10052ebc:	4770      	bx	lr
10052ebe:	46c0      	nop			@ (mov r8, r8)

10052ec0 <__arm_cp.0_0>:
10052ec0:	20001174 	.word	0x20001174

10052ec4 <__arm_cp.0_1>:
10052ec4:	03030000 	.word	0x03030000

10052ec8 <isr_Acl_Data_Indication_Queue_Full>:
10052ec8:	4805      	ldr	r0, [pc, #20]	@ (10052ee0 <__arm_cp.1_0>)
10052eca:	6800      	ldr	r0, [r0, #0]
10052ecc:	2188      	movs	r1, #136	@ 0x88
10052ece:	5c41      	ldrb	r1, [r0, r1]
10052ed0:	3088      	adds	r0, #136	@ 0x88
10052ed2:	7880      	ldrb	r0, [r0, #2]
10052ed4:	4281      	cmp	r1, r0
10052ed6:	d801      	bhi.n	10052edc <isr_Acl_Data_Indication_Queue_Full+0x14>
10052ed8:	2000      	movs	r0, #0
10052eda:	4770      	bx	lr
10052edc:	2001      	movs	r0, #1
10052ede:	4770      	bx	lr

10052ee0 <__arm_cp.1_0>:
10052ee0:	20001174 	.word	0x20001174

10052ee4 <isr_Acl_Data_TX_Cmpl_Queue_Full>:
10052ee4:	4805      	ldr	r0, [pc, #20]	@ (10052efc <__arm_cp.2_0>)
10052ee6:	6800      	ldr	r0, [r0, #0]
10052ee8:	2189      	movs	r1, #137	@ 0x89
10052eea:	5c41      	ldrb	r1, [r0, r1]
10052eec:	3089      	adds	r0, #137	@ 0x89
10052eee:	7880      	ldrb	r0, [r0, #2]
10052ef0:	4281      	cmp	r1, r0
10052ef2:	d801      	bhi.n	10052ef8 <isr_Acl_Data_TX_Cmpl_Queue_Full+0x14>
10052ef4:	2000      	movs	r0, #0
10052ef6:	4770      	bx	lr
10052ef8:	2001      	movs	r0, #1
10052efa:	4770      	bx	lr

10052efc <__arm_cp.2_0>:
10052efc:	20001174 	.word	0x20001174

10052f00 <Acl_Rcv_Pkt_Handler>:
10052f00:	b510      	push	{r4, lr}
10052f02:	4604      	mov	r4, r0
10052f04:	480a      	ldr	r0, [pc, #40]	@ (10052f30 <__arm_cp.5_0>)
10052f06:	6800      	ldr	r0, [r0, #0]
10052f08:	6900      	ldr	r0, [r0, #16]
10052f0a:	2190      	movs	r1, #144	@ 0x90
10052f0c:	2201      	movs	r2, #1
10052f0e:	4613      	mov	r3, r2
10052f10:	f000 faaa 	bl	10053468 <aci_event_fifo_push_header>
10052f14:	2800      	cmp	r0, #0
10052f16:	d004      	beq.n	10052f22 <Acl_Rcv_Pkt_Handler+0x22>
10052f18:	4601      	mov	r1, r0
10052f1a:	6044      	str	r4, [r0, #4]
10052f1c:	2090      	movs	r0, #144	@ 0x90
10052f1e:	f000 fb40 	bl	100535a2 <aci_event_fifo_push>
10052f22:	4804      	ldr	r0, [pc, #16]	@ (10052f34 <__arm_cp.5_1>)
10052f24:	6800      	ldr	r0, [r0, #0]
10052f26:	2188      	movs	r1, #136	@ 0x88
10052f28:	5c42      	ldrb	r2, [r0, r1]
10052f2a:	1c52      	adds	r2, r2, #1
10052f2c:	5442      	strb	r2, [r0, r1]
10052f2e:	bd10      	pop	{r4, pc}

10052f30 <__arm_cp.5_0>:
10052f30:	20001124 	.word	0x20001124

10052f34 <__arm_cp.5_1>:
10052f34:	20001174 	.word	0x20001174

10052f38 <Acl_Tx_Cmpl_Pkt_Handler>:
10052f38:	b510      	push	{r4, lr}
10052f3a:	4604      	mov	r4, r0
10052f3c:	7a00      	ldrb	r0, [r0, #8]
10052f3e:	21f7      	movs	r1, #247	@ 0xf7
10052f40:	4001      	ands	r1, r0
10052f42:	7221      	strb	r1, [r4, #8]
10052f44:	480a      	ldr	r0, [pc, #40]	@ (10052f70 <__arm_cp.6_0>)
10052f46:	6800      	ldr	r0, [r0, #0]
10052f48:	6900      	ldr	r0, [r0, #16]
10052f4a:	2190      	movs	r1, #144	@ 0x90
10052f4c:	2200      	movs	r2, #0
10052f4e:	2301      	movs	r3, #1
10052f50:	f000 fa8a 	bl	10053468 <aci_event_fifo_push_header>
10052f54:	2800      	cmp	r0, #0
10052f56:	d004      	beq.n	10052f62 <Acl_Tx_Cmpl_Pkt_Handler+0x2a>
10052f58:	4601      	mov	r1, r0
10052f5a:	6044      	str	r4, [r0, #4]
10052f5c:	2090      	movs	r0, #144	@ 0x90
10052f5e:	f000 fb20 	bl	100535a2 <aci_event_fifo_push>
10052f62:	4804      	ldr	r0, [pc, #16]	@ (10052f74 <__arm_cp.6_1>)
10052f64:	6800      	ldr	r0, [r0, #0]
10052f66:	2189      	movs	r1, #137	@ 0x89
10052f68:	5c42      	ldrb	r2, [r0, r1]
10052f6a:	1c52      	adds	r2, r2, #1
10052f6c:	5442      	strb	r2, [r0, r1]
10052f6e:	bd10      	pop	{r4, pc}

10052f70 <__arm_cp.6_0>:
10052f70:	20001124 	.word	0x20001124

10052f74 <__arm_cp.6_1>:
10052f74:	20001174 	.word	0x20001174

10052f78 <Acl_Transmit_Data>:
10052f78:	b510      	push	{r4, lr}
10052f7a:	2400      	movs	r4, #0
10052f7c:	61c4      	str	r4, [r0, #28]
10052f7e:	f006 fd35 	bl	100599ec <llc_conn_send_acl_data>
10052f82:	2884      	cmp	r0, #132	@ 0x84
10052f84:	d000      	beq.n	10052f88 <Acl_Transmit_Data+0x10>
10052f86:	2481      	movs	r4, #129	@ 0x81
10052f88:	4620      	mov	r0, r4
10052f8a:	bd10      	pop	{r4, pc}

10052f8c <hci_acl_data_tx_cmpl_event_int_cb>:
10052f8c:	b5b0      	push	{r4, r5, r7, lr}
10052f8e:	6809      	ldr	r1, [r1, #0]
10052f90:	2483      	movs	r4, #131	@ 0x83
10052f92:	2200      	movs	r2, #0
10052f94:	2900      	cmp	r1, #0
10052f96:	d012      	beq.n	10052fbe <hci_acl_data_tx_cmpl_event_int_cb+0x32>
10052f98:	69cd      	ldr	r5, [r1, #28]
10052f9a:	2400      	movs	r4, #0
10052f9c:	61cc      	str	r4, [r1, #28]
10052f9e:	7a08      	ldrb	r0, [r1, #8]
10052fa0:	06c0      	lsls	r0, r0, #27
10052fa2:	d403      	bmi.n	10052fac <hci_acl_data_tx_cmpl_event_int_cb+0x20>
10052fa4:	2000      	movs	r0, #0
10052fa6:	f005 f91b 	bl	100581e0 <L2C_mux_acl_packet>
10052faa:	e002      	b.n	10052fb2 <hci_acl_data_tx_cmpl_event_int_cb+0x26>
10052fac:	4608      	mov	r0, r1
10052fae:	f004 fb6d 	bl	1005768c <hci_tx_acl_data_done>
10052fb2:	2201      	movs	r2, #1
10052fb4:	2800      	cmp	r0, #0
10052fb6:	4629      	mov	r1, r5
10052fb8:	d0ec      	beq.n	10052f94 <hci_acl_data_tx_cmpl_event_int_cb+0x8>
10052fba:	2483      	movs	r4, #131	@ 0x83
10052fbc:	e00c      	b.n	10052fd8 <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10052fbe:	07d0      	lsls	r0, r2, #31
10052fc0:	d00a      	beq.n	10052fd8 <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10052fc2:	f3ef 8010 	mrs	r0, PRIMASK
10052fc6:	b672      	cpsid	i
10052fc8:	4804      	ldr	r0, [pc, #16]	@ (10052fdc <__arm_cp.9_0>)
10052fca:	6800      	ldr	r0, [r0, #0]
10052fcc:	2189      	movs	r1, #137	@ 0x89
10052fce:	5c42      	ldrb	r2, [r0, r1]
10052fd0:	1e52      	subs	r2, r2, #1
10052fd2:	5442      	strb	r2, [r0, r1]
10052fd4:	b662      	cpsie	i
10052fd6:	2400      	movs	r4, #0
10052fd8:	b2e0      	uxtb	r0, r4
10052fda:	bdb0      	pop	{r4, r5, r7, pc}

10052fdc <__arm_cp.9_0>:
10052fdc:	20001174 	.word	0x20001174

10052fe0 <hci_acl_data_ind_event_int_cb>:
10052fe0:	b510      	push	{r4, lr}
10052fe2:	680c      	ldr	r4, [r1, #0]
10052fe4:	7b20      	ldrb	r0, [r4, #12]
10052fe6:	07c0      	lsls	r0, r0, #31
10052fe8:	d008      	beq.n	10052ffc <hci_acl_data_ind_event_int_cb+0x1c>
10052fea:	2100      	movs	r1, #0
10052fec:	2201      	movs	r2, #1
10052fee:	4620      	mov	r0, r4
10052ff0:	f000 f8f6 	bl	100531e0 <ACL_pkt_remove_buffer_interval>
10052ff4:	7b20      	ldrb	r0, [r4, #12]
10052ff6:	21fe      	movs	r1, #254	@ 0xfe
10052ff8:	4001      	ands	r1, r0
10052ffa:	7321      	strb	r1, [r4, #12]
10052ffc:	480e      	ldr	r0, [pc, #56]	@ (10053038 <__arm_cp.11_0>)
10052ffe:	6800      	ldr	r0, [r0, #0]
10053000:	212c      	movs	r1, #44	@ 0x2c
10053002:	5c40      	ldrb	r0, [r0, r1]
10053004:	07c0      	lsls	r0, r0, #31
10053006:	d103      	bne.n	10053010 <hci_acl_data_ind_event_int_cb+0x30>
10053008:	4620      	mov	r0, r4
1005300a:	f005 f85b 	bl	100580c4 <L2C_receive_data>
1005300e:	e002      	b.n	10053016 <hci_acl_data_ind_event_int_cb+0x36>
10053010:	4620      	mov	r0, r4
10053012:	f004 fb07 	bl	10057624 <hci_rx_acl_data>
10053016:	2800      	cmp	r0, #0
10053018:	d001      	beq.n	1005301e <hci_acl_data_ind_event_int_cb+0x3e>
1005301a:	2083      	movs	r0, #131	@ 0x83
1005301c:	bd10      	pop	{r4, pc}
1005301e:	f3ef 8010 	mrs	r0, PRIMASK
10053022:	b672      	cpsid	i
10053024:	4805      	ldr	r0, [pc, #20]	@ (1005303c <__arm_cp.11_1>)
10053026:	6800      	ldr	r0, [r0, #0]
10053028:	2188      	movs	r1, #136	@ 0x88
1005302a:	5c42      	ldrb	r2, [r0, r1]
1005302c:	1e52      	subs	r2, r2, #1
1005302e:	5442      	strb	r2, [r0, r1]
10053030:	b662      	cpsie	i
10053032:	2000      	movs	r0, #0
10053034:	bd10      	pop	{r4, pc}
10053036:	46c0      	nop			@ (mov r8, r8)

10053038 <__arm_cp.11_0>:
10053038:	20001120 	.word	0x20001120

1005303c <__arm_cp.11_1>:
1005303c:	20001174 	.word	0x20001174

10053040 <ACL_pkt_init>:
10053040:	b570      	push	{r4, r5, r6, lr}
10053042:	4c0b      	ldr	r4, [pc, #44]	@ (10053070 <__arm_cp.1_0>)
10053044:	2501      	movs	r5, #1
10053046:	2204      	movs	r2, #4
10053048:	4620      	mov	r0, r4
1005304a:	4629      	mov	r1, r5
1005304c:	f00b ff6c 	bl	1005ef28 <csmem_mem_assign>
10053050:	4e08      	ldr	r6, [pc, #32]	@ (10053074 <__arm_cp.1_1>)
10053052:	6030      	str	r0, [r6, #0]
10053054:	2206      	movs	r2, #6
10053056:	4620      	mov	r0, r4
10053058:	4629      	mov	r1, r5
1005305a:	f00b ff65 	bl	1005ef28 <csmem_mem_assign>
1005305e:	6831      	ldr	r1, [r6, #0]
10053060:	6008      	str	r0, [r1, #0]
10053062:	6830      	ldr	r0, [r6, #0]
10053064:	6801      	ldr	r1, [r0, #0]
10053066:	2000      	movs	r0, #0
10053068:	8088      	strh	r0, [r1, #4]
1005306a:	8048      	strh	r0, [r1, #2]
1005306c:	7008      	strb	r0, [r1, #0]
1005306e:	bd70      	pop	{r4, r5, r6, pc}

10053070 <__arm_cp.1_0>:
10053070:	20001184 	.word	0x20001184

10053074 <__arm_cp.1_1>:
10053074:	2000111c 	.word	0x2000111c

10053078 <ACL_pkt_get>:
10053078:	b5b0      	push	{r4, r5, r7, lr}
1005307a:	460d      	mov	r5, r1
1005307c:	4604      	mov	r4, r0
1005307e:	1e41      	subs	r1, r0, #1
10053080:	4188      	sbcs	r0, r1
10053082:	1e51      	subs	r1, r2, #1
10053084:	221f      	movs	r2, #31
10053086:	430a      	orrs	r2, r1
10053088:	3221      	adds	r2, #33	@ 0x21
1005308a:	b291      	uxth	r1, r2
1005308c:	f00b fe2a 	bl	1005ece4 <MBM_get>
10053090:	2800      	cmp	r0, #0
10053092:	d006      	beq.n	100530a2 <ACL_pkt_get+0x2a>
10053094:	8085      	strh	r5, [r0, #4]
10053096:	6801      	ldr	r1, [r0, #0]
10053098:	6081      	str	r1, [r0, #8]
1005309a:	2c00      	cmp	r4, #0
1005309c:	d103      	bne.n	100530a6 <ACL_pkt_get+0x2e>
1005309e:	2140      	movs	r1, #64	@ 0x40
100530a0:	e003      	b.n	100530aa <ACL_pkt_get+0x32>
100530a2:	2000      	movs	r0, #0
100530a4:	bdb0      	pop	{r4, r5, r7, pc}
100530a6:	217f      	movs	r1, #127	@ 0x7f
100530a8:	43c9      	mvns	r1, r1
100530aa:	7301      	strb	r1, [r0, #12]
100530ac:	1d00      	adds	r0, r0, #4
100530ae:	bdb0      	pop	{r4, r5, r7, pc}

100530b0 <ACL_pkt_get_available_mem_buffers>:
100530b0:	b580      	push	{r7, lr}
100530b2:	1e41      	subs	r1, r0, #1
100530b4:	4188      	sbcs	r0, r1
100530b6:	f00b fe7d 	bl	1005edb4 <MBM_get_available_mem_buffers>
100530ba:	bd80      	pop	{r7, pc}

100530bc <ACL_pkt_release>:
100530bc:	b580      	push	{r7, lr}
100530be:	7a01      	ldrb	r1, [r0, #8]
100530c0:	098a      	lsrs	r2, r1, #6
100530c2:	2101      	movs	r1, #1
100530c4:	4391      	bics	r1, r2
100530c6:	1f00      	subs	r0, r0, #4
100530c8:	f00b fe46 	bl	1005ed58 <MBM_release>
100530cc:	bd80      	pop	{r7, pc}

100530ce <ACL_pkt_resize>:
100530ce:	b580      	push	{r7, lr}
100530d0:	460a      	mov	r2, r1
100530d2:	7a01      	ldrb	r1, [r0, #8]
100530d4:	098b      	lsrs	r3, r1, #6
100530d6:	2101      	movs	r1, #1
100530d8:	4399      	bics	r1, r3
100530da:	6840      	ldr	r0, [r0, #4]
100530dc:	f00b fe7e 	bl	1005eddc <MBM_resize>
100530e0:	bd80      	pop	{r7, pc}

100530e2 <ACL_pkt_cmp>:
100530e2:	b510      	push	{r4, lr}
100530e4:	4614      	mov	r4, r2
100530e6:	460a      	mov	r2, r1
100530e8:	6840      	ldr	r0, [r0, #4]
100530ea:	4619      	mov	r1, r3
100530ec:	4623      	mov	r3, r4
100530ee:	f00c f84f 	bl	1005f190 <Mem_Buff_cmp>
100530f2:	bd10      	pop	{r4, pc}

100530f4 <ACL_pkt_read>:
100530f4:	b510      	push	{r4, lr}
100530f6:	4614      	mov	r4, r2
100530f8:	460a      	mov	r2, r1
100530fa:	6840      	ldr	r0, [r0, #4]
100530fc:	4619      	mov	r1, r3
100530fe:	4623      	mov	r3, r4
10053100:	f00c f80d 	bl	1005f11e <Mem_Buff_read>
10053104:	bd10      	pop	{r4, pc}

10053106 <ACL_pkt_read_16b>:
10053106:	b5e0      	push	{r5, r6, r7, lr}
10053108:	2202      	movs	r2, #2
1005310a:	ab01      	add	r3, sp, #4
1005310c:	f7ff fff2 	bl	100530f4 <ACL_pkt_read>
10053110:	2800      	cmp	r0, #0
10053112:	d001      	beq.n	10053118 <ACL_pkt_read_16b+0x12>
10053114:	2000      	movs	r0, #0
10053116:	e004      	b.n	10053122 <ACL_pkt_read_16b+0x1c>
10053118:	a801      	add	r0, sp, #4
1005311a:	7801      	ldrb	r1, [r0, #0]
1005311c:	7840      	ldrb	r0, [r0, #1]
1005311e:	0200      	lsls	r0, r0, #8
10053120:	1840      	adds	r0, r0, r1
10053122:	b280      	uxth	r0, r0
10053124:	bd8c      	pop	{r2, r3, r7, pc}

10053126 <ACL_pkt_write_16b>:
10053126:	b5e0      	push	{r5, r6, r7, lr}
10053128:	ab01      	add	r3, sp, #4
1005312a:	701a      	strb	r2, [r3, #0]
1005312c:	0a12      	lsrs	r2, r2, #8
1005312e:	705a      	strb	r2, [r3, #1]
10053130:	2202      	movs	r2, #2
10053132:	f000 f801 	bl	10053138 <ACL_pkt_write>
10053136:	bd8c      	pop	{r2, r3, r7, pc}

10053138 <ACL_pkt_write>:
10053138:	b510      	push	{r4, lr}
1005313a:	4614      	mov	r4, r2
1005313c:	460a      	mov	r2, r1
1005313e:	6840      	ldr	r0, [r0, #4]
10053140:	4619      	mov	r1, r3
10053142:	4623      	mov	r3, r4
10053144:	f00b ffb1 	bl	1005f0aa <Mem_Buff_write>
10053148:	bd10      	pop	{r4, pc}

1005314a <ACL_pkt_extract_pdu>:
1005314a:	1f01      	subs	r1, r0, #4
1005314c:	2200      	movs	r2, #0
1005314e:	600a      	str	r2, [r1, #0]
10053150:	6840      	ldr	r0, [r0, #4]
10053152:	4770      	bx	lr

10053154 <ACL_pkt_connection>:
10053154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053156:	480f      	ldr	r0, [pc, #60]	@ (10053194 <__arm_cp.14_0>)
10053158:	6800      	ldr	r0, [r0, #0]
1005315a:	6805      	ldr	r5, [r0, #0]
1005315c:	7828      	ldrb	r0, [r5, #0]
1005315e:	1c41      	adds	r1, r0, #1
10053160:	7029      	strb	r1, [r5, #0]
10053162:	4f0d      	ldr	r7, [pc, #52]	@ (10053198 <__arm_cp.14_1>)
10053164:	8a39      	ldrh	r1, [r7, #16]
10053166:	3125      	adds	r1, #37	@ 0x25
10053168:	094e      	lsrs	r6, r1, #5
1005316a:	1c74      	adds	r4, r6, #1
1005316c:	2800      	cmp	r0, #0
1005316e:	d109      	bne.n	10053184 <ACL_pkt_connection+0x30>
10053170:	2000      	movs	r0, #0
10053172:	4621      	mov	r1, r4
10053174:	f00b fe6e 	bl	1005ee54 <MBM_reserve>
10053178:	8a38      	ldrh	r0, [r7, #16]
1005317a:	3025      	adds	r0, #37	@ 0x25
1005317c:	0940      	lsrs	r0, r0, #5
1005317e:	1c40      	adds	r0, r0, #1
10053180:	8068      	strh	r0, [r5, #2]
10053182:	1cb4      	adds	r4, r6, #2
10053184:	2001      	movs	r0, #1
10053186:	4621      	mov	r1, r4
10053188:	f00b fe64 	bl	1005ee54 <MBM_reserve>
1005318c:	88a8      	ldrh	r0, [r5, #4]
1005318e:	1900      	adds	r0, r0, r4
10053190:	80a8      	strh	r0, [r5, #4]
10053192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10053194 <__arm_cp.14_0>:
10053194:	2000111c 	.word	0x2000111c

10053198 <__arm_cp.14_1>:
10053198:	20001188 	.word	0x20001188

1005319c <ACL_pkt_disconnection>:
1005319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005319e:	480e      	ldr	r0, [pc, #56]	@ (100531d8 <__arm_cp.15_0>)
100531a0:	6800      	ldr	r0, [r0, #0]
100531a2:	6806      	ldr	r6, [r0, #0]
100531a4:	7830      	ldrb	r0, [r6, #0]
100531a6:	1e40      	subs	r0, r0, #1
100531a8:	7030      	strb	r0, [r6, #0]
100531aa:	490c      	ldr	r1, [pc, #48]	@ (100531dc <__arm_cp.15_1>)
100531ac:	8a09      	ldrh	r1, [r1, #16]
100531ae:	3125      	adds	r1, #37	@ 0x25
100531b0:	094f      	lsrs	r7, r1, #5
100531b2:	1c7c      	adds	r4, r7, #1
100531b4:	0600      	lsls	r0, r0, #24
100531b6:	d106      	bne.n	100531c6 <ACL_pkt_disconnection+0x2a>
100531b8:	2500      	movs	r5, #0
100531ba:	4628      	mov	r0, r5
100531bc:	4621      	mov	r1, r4
100531be:	f00b fe9d 	bl	1005eefc <MBM_unreserve>
100531c2:	8075      	strh	r5, [r6, #2]
100531c4:	1cbc      	adds	r4, r7, #2
100531c6:	2001      	movs	r0, #1
100531c8:	4621      	mov	r1, r4
100531ca:	f00b fe97 	bl	1005eefc <MBM_unreserve>
100531ce:	88b0      	ldrh	r0, [r6, #4]
100531d0:	1b00      	subs	r0, r0, r4
100531d2:	80b0      	strh	r0, [r6, #4]
100531d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100531d6:	46c0      	nop			@ (mov r8, r8)

100531d8 <__arm_cp.15_0>:
100531d8:	2000111c 	.word	0x2000111c

100531dc <__arm_cp.15_1>:
100531dc:	20001188 	.word	0x20001188

100531e0 <ACL_pkt_remove_buffer_interval>:
100531e0:	b570      	push	{r4, r5, r6, lr}
100531e2:	4291      	cmp	r1, r2
100531e4:	d20e      	bcs.n	10053204 <ACL_pkt_remove_buffer_interval+0x24>
100531e6:	4615      	mov	r5, r2
100531e8:	460e      	mov	r6, r1
100531ea:	4604      	mov	r4, r0
100531ec:	6840      	ldr	r0, [r0, #4]
100531ee:	f00c f846 	bl	1005f27e <Mem_Buff_squize_buffer>
100531f2:	1b75      	subs	r5, r6, r5
100531f4:	6860      	ldr	r0, [r4, #4]
100531f6:	f00b ff17 	bl	1005f028 <Mem_Buff_get_chain_size>
100531fa:	1828      	adds	r0, r5, r0
100531fc:	b281      	uxth	r1, r0
100531fe:	4620      	mov	r0, r4
10053200:	f7ff ff65 	bl	100530ce <ACL_pkt_resize>
10053204:	bd70      	pop	{r4, r5, r6, pc}

10053206 <BLE_STACK_Tick>:
10053206:	b580      	push	{r7, lr}
10053208:	2000      	movs	r0, #0
1005320a:	f00e fef7 	bl	10061ffc <tsk_scheduler>
1005320e:	bd80      	pop	{r7, pc}

10053210 <BlueNRG_Stack_Initialize_Layers>:
10053210:	b5f0      	push	{r4, r5, r6, r7, lr}
10053212:	b08f      	sub	sp, #60	@ 0x3c
10053214:	9309      	str	r3, [sp, #36]	@ 0x24
10053216:	920b      	str	r2, [sp, #44]	@ 0x2c
10053218:	910a      	str	r1, [sp, #40]	@ 0x28
1005321a:	9008      	str	r0, [sp, #32]
1005321c:	f00b fe7e 	bl	1005ef1c <csmem_init>
10053220:	2401      	movs	r4, #1
10053222:	2138      	movs	r1, #56	@ 0x38
10053224:	4620      	mov	r0, r4
10053226:	f00b fe91 	bl	1005ef4c <csmem_mem_0_assign>
1005322a:	4933      	ldr	r1, [pc, #204]	@ (100532f8 <__arm_cp.2_0>)
1005322c:	7ac9      	ldrb	r1, [r1, #11]
1005322e:	2234      	movs	r2, #52	@ 0x34
10053230:	5481      	strb	r1, [r0, r2]
10053232:	4e32      	ldr	r6, [pc, #200]	@ (100532fc <__arm_cp.2_1>)
10053234:	6030      	str	r0, [r6, #0]
10053236:	2700      	movs	r7, #0
10053238:	7007      	strb	r7, [r0, #0]
1005323a:	6830      	ldr	r0, [r6, #0]
1005323c:	7047      	strb	r7, [r0, #1]
1005323e:	6830      	ldr	r0, [r6, #0]
10053240:	7087      	strb	r7, [r0, #2]
10053242:	6830      	ldr	r0, [r6, #0]
10053244:	21e1      	movs	r1, #225	@ 0xe1
10053246:	70c1      	strb	r1, [r0, #3]
10053248:	2005      	movs	r0, #5
1005324a:	01c0      	lsls	r0, r0, #7
1005324c:	6831      	ldr	r1, [r6, #0]
1005324e:	8088      	strh	r0, [r1, #4]
10053250:	2030      	movs	r0, #48	@ 0x30
10053252:	8508      	strh	r0, [r1, #40]	@ 0x28
10053254:	ad0e      	add	r5, sp, #56	@ 0x38
10053256:	a90d      	add	r1, sp, #52	@ 0x34
10053258:	aa0c      	add	r2, sp, #48	@ 0x30
1005325a:	4628      	mov	r0, r5
1005325c:	f7f2 fe3d 	bl	10045eda <BLEPLAT_GetPartInfo>
10053260:	980c      	ldr	r0, [sp, #48]	@ 0x30
10053262:	0200      	lsls	r0, r0, #8
10053264:	7829      	ldrb	r1, [r5, #0]
10053266:	0109      	lsls	r1, r1, #4
10053268:	4301      	orrs	r1, r0
1005326a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005326c:	0300      	lsls	r0, r0, #12
1005326e:	4308      	orrs	r0, r1
10053270:	1d00      	adds	r0, r0, #4
10053272:	6831      	ldr	r1, [r6, #0]
10053274:	8548      	strh	r0, [r1, #42]	@ 0x2a
10053276:	2118      	movs	r1, #24
10053278:	4620      	mov	r0, r4
1005327a:	f00b fe67 	bl	1005ef4c <csmem_mem_0_assign>
1005327e:	4920      	ldr	r1, [pc, #128]	@ (10053300 <__arm_cp.2_2>)
10053280:	6008      	str	r0, [r1, #0]
10053282:	7507      	strb	r7, [r0, #20]
10053284:	f00e feb0 	bl	10061fe8 <tsk_init>
10053288:	981c      	ldr	r0, [sp, #112]	@ 0x70
1005328a:	9006      	str	r0, [sp, #24]
1005328c:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
1005328e:	9405      	str	r4, [sp, #20]
10053290:	981a      	ldr	r0, [sp, #104]	@ 0x68
10053292:	9004      	str	r0, [sp, #16]
10053294:	9819      	ldr	r0, [sp, #100]	@ 0x64
10053296:	9003      	str	r0, [sp, #12]
10053298:	9818      	ldr	r0, [sp, #96]	@ 0x60
1005329a:	9002      	str	r0, [sp, #8]
1005329c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005329e:	9001      	str	r0, [sp, #4]
100532a0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
100532a2:	9500      	str	r5, [sp, #0]
100532a4:	9808      	ldr	r0, [sp, #32]
100532a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
100532a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
100532aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100532ac:	f7fe fe6d 	bl	10051f8a <LL_init_ucfg>
100532b0:	f7fe fd5d 	bl	10051d6e <MBM_init_ucfg>
100532b4:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
100532b6:	2c01      	cmp	r4, #1
100532b8:	d101      	bne.n	100532be <BlueNRG_Stack_Initialize_Layers+0xae>
100532ba:	f7fe fcd0 	bl	10051c5e <ACL_pkt_init_ucfg>
100532be:	f000 f999 	bl	100535f4 <Events_Process_init>
100532c2:	2f01      	cmp	r7, #1
100532c4:	d101      	bne.n	100532ca <BlueNRG_Stack_Initialize_Layers+0xba>
100532c6:	f000 f8ca 	bl	1005345e <log_init_ucfg_weak>
100532ca:	6830      	ldr	r0, [r6, #0]
100532cc:	212c      	movs	r1, #44	@ 0x2c
100532ce:	5c40      	ldrb	r0, [r0, r1]
100532d0:	07c0      	lsls	r0, r0, #31
100532d2:	d10e      	bne.n	100532f2 <BlueNRG_Stack_Initialize_Layers+0xe2>
100532d4:	2c01      	cmp	r4, #1
100532d6:	d106      	bne.n	100532e6 <BlueNRG_Stack_Initialize_Layers+0xd6>
100532d8:	9816      	ldr	r0, [sp, #88]	@ 0x58
100532da:	f7fe fd7c 	bl	10051dd6 <L2C_init_ucfg>
100532de:	f7fe ff3e 	bl	1005215e <smp_init_ucfg>
100532e2:	f7fe ff43 	bl	1005216c <GAT_att_cmn_init_ucfg>
100532e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
100532e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100532ea:	462a      	mov	r2, r5
100532ec:	4623      	mov	r3, r4
100532ee:	f000 ff11 	bl	10054114 <GAP_init_context>
100532f2:	b00f      	add	sp, #60	@ 0x3c
100532f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100532f6:	46c0      	nop			@ (mov r8, r8)

100532f8 <__arm_cp.2_0>:
100532f8:	20001188 	.word	0x20001188

100532fc <__arm_cp.2_1>:
100532fc:	20001120 	.word	0x20001120

10053300 <__arm_cp.2_2>:
10053300:	200011c8 	.word	0x200011c8

10053304 <_BlueNRG_Stack_Initialization>:
10053304:	b5f0      	push	{r4, r5, r6, r7, lr}
10053306:	b095      	sub	sp, #84	@ 0x54
10053308:	2001      	movs	r0, #1
1005330a:	0481      	lsls	r1, r0, #18
1005330c:	9114      	str	r1, [sp, #80]	@ 0x50
1005330e:	482e      	ldr	r0, [pc, #184]	@ (100533c8 <__arm_cp.3_0>)
10053310:	6001      	str	r1, [r0, #0]
10053312:	f3bf 8f4f 	dsb	sy
10053316:	f3bf 8f6f 	isb	sy
1005331a:	f7f3 fe95 	bl	10047048 <BLEPLAT_CNTR_GlobDisableBlue>
1005331e:	f7f2 fed8 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
10053322:	2000      	movs	r0, #0
10053324:	9012      	str	r0, [sp, #72]	@ 0x48
10053326:	43c0      	mvns	r0, r0
10053328:	f7f3 fe7a 	bl	10047020 <BLEPLAT_CNTR_ClearInterrupt>
1005332c:	f004 fc4f 	bl	10057bce <data_length_extension_csr_ucfg_weak>
10053330:	9013      	str	r0, [sp, #76]	@ 0x4c
10053332:	f7fe fc84 	bl	10051c3e <phy_upd_csr_ucfg>
10053336:	9011      	str	r0, [sp, #68]	@ 0x44
10053338:	f00a fe95 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005333c:	9010      	str	r0, [sp, #64]	@ 0x40
1005333e:	f007 fcf4 	bl	1005ad2a <llc_priv_controller_privacy_csr_ucfg_weak>
10053342:	900f      	str	r0, [sp, #60]	@ 0x3c
10053344:	f7fe fd1b 	bl	10051d7e <secure_connections_csr_ucfg>
10053348:	f004 fc47 	bl	10057bda <scan_csr_ucfg_weak>
1005334c:	900e      	str	r0, [sp, #56]	@ 0x38
1005334e:	f004 fe0b 	bl	10057f68 <l2c_cos_csr_ucfg_weak>
10053352:	900d      	str	r0, [sp, #52]	@ 0x34
10053354:	f007 fcda 	bl	1005ad0c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10053358:	900c      	str	r0, [sp, #48]	@ 0x30
1005335a:	f007 fcd9 	bl	1005ad10 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005335e:	900b      	str	r0, [sp, #44]	@ 0x2c
10053360:	f004 faf0 	bl	10057944 <cte_csr_ucfg_weak>
10053364:	4604      	mov	r4, r0
10053366:	f004 fc34 	bl	10057bd2 <pcl_csr_ucfg_weak>
1005336a:	4605      	mov	r5, r0
1005336c:	f7fe fc6f 	bl	10051c4e <conn_supp_csr_ucfg>
10053370:	4606      	mov	r6, r0
10053372:	f007 fe2a 	bl	1005afca <chc_csr_ucfg_weak>
10053376:	4607      	mov	r7, r0
10053378:	f000 f874 	bl	10053464 <log_csr_ucfg_weak>
1005337c:	b2c0      	uxtb	r0, r0
1005337e:	b2f9      	uxtb	r1, r7
10053380:	9108      	str	r1, [sp, #32]
10053382:	9009      	str	r0, [sp, #36]	@ 0x24
10053384:	b2f0      	uxtb	r0, r6
10053386:	b2e9      	uxtb	r1, r5
10053388:	b2e2      	uxtb	r2, r4
1005338a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005338c:	b2db      	uxtb	r3, r3
1005338e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10053390:	b2e4      	uxtb	r4, r4
10053392:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10053394:	b2ed      	uxtb	r5, r5
10053396:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
10053398:	b2f6      	uxtb	r6, r6
1005339a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
1005339c:	9700      	str	r7, [sp, #0]
1005339e:	9601      	str	r6, [sp, #4]
100533a0:	9502      	str	r5, [sp, #8]
100533a2:	9403      	str	r4, [sp, #12]
100533a4:	9304      	str	r3, [sp, #16]
100533a6:	9205      	str	r2, [sp, #20]
100533a8:	9106      	str	r1, [sp, #24]
100533aa:	9007      	str	r0, [sp, #28]
100533ac:	9813      	ldr	r0, [sp, #76]	@ 0x4c
100533ae:	b2c0      	uxtb	r0, r0
100533b0:	9911      	ldr	r1, [sp, #68]	@ 0x44
100533b2:	b2c9      	uxtb	r1, r1
100533b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
100533b6:	b2d3      	uxtb	r3, r2
100533b8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
100533ba:	f7ff ff29 	bl	10053210 <BlueNRG_Stack_Initialize_Layers>
100533be:	4803      	ldr	r0, [pc, #12]	@ (100533cc <__arm_cp.3_1>)
100533c0:	9914      	ldr	r1, [sp, #80]	@ 0x50
100533c2:	6001      	str	r1, [r0, #0]
100533c4:	b015      	add	sp, #84	@ 0x54
100533c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100533c8 <__arm_cp.3_0>:
100533c8:	e000e180 	.word	0xe000e180

100533cc <__arm_cp.3_1>:
100533cc:	e000e100 	.word	0xe000e100

100533d0 <BLE_STACK_Init>:
100533d0:	b5b0      	push	{r4, r5, r7, lr}
100533d2:	4605      	mov	r5, r0
100533d4:	7ac0      	ldrb	r0, [r0, #11]
100533d6:	2412      	movs	r4, #18
100533d8:	2880      	cmp	r0, #128	@ 0x80
100533da:	d829      	bhi.n	10053430 <BLE_STACK_Init+0x60>
100533dc:	8c29      	ldrh	r1, [r5, #32]
100533de:	2917      	cmp	r1, #23
100533e0:	d326      	bcc.n	10053430 <BLE_STACK_Init+0x60>
100533e2:	4814      	ldr	r0, [pc, #80]	@ (10053434 <__arm_cp.4_0>)
100533e4:	1d82      	adds	r2, r0, #6
100533e6:	4291      	cmp	r1, r2
100533e8:	d822      	bhi.n	10053430 <BLE_STACK_Init+0x60>
100533ea:	8a29      	ldrh	r1, [r5, #16]
100533ec:	2917      	cmp	r1, #23
100533ee:	d31f      	bcc.n	10053430 <BLE_STACK_Init+0x60>
100533f0:	4281      	cmp	r1, r0
100533f2:	d81d      	bhi.n	10053430 <BLE_STACK_Init+0x60>
100533f4:	7ea8      	ldrb	r0, [r5, #26]
100533f6:	2800      	cmp	r0, #0
100533f8:	d01a      	beq.n	10053430 <BLE_STACK_Init+0x60>
100533fa:	f007 fc89 	bl	1005ad10 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
100533fe:	2800      	cmp	r0, #0
10053400:	d008      	beq.n	10053414 <BLE_STACK_Init+0x44>
10053402:	7ee8      	ldrb	r0, [r5, #27]
10053404:	2800      	cmp	r0, #0
10053406:	d013      	beq.n	10053430 <BLE_STACK_Init+0x60>
10053408:	2880      	cmp	r0, #128	@ 0x80
1005340a:	d811      	bhi.n	10053430 <BLE_STACK_Init+0x60>
1005340c:	7f28      	ldrb	r0, [r5, #28]
1005340e:	1e40      	subs	r0, r0, #1
10053410:	280e      	cmp	r0, #14
10053412:	d80d      	bhi.n	10053430 <BLE_STACK_Init+0x60>
10053414:	4808      	ldr	r0, [pc, #32]	@ (10053438 <__arm_cp.4_1>)
10053416:	2234      	movs	r2, #52	@ 0x34
10053418:	4629      	mov	r1, r5
1005341a:	f7f2 fd2d 	bl	10045e78 <BLEPLAT_MemCpy>
1005341e:	f00b ffb9 	bl	1005f394 <BlueNRG_Stack_Initialize_RAM_check>
10053422:	2800      	cmp	r0, #0
10053424:	d403      	bmi.n	1005342e <BLE_STACK_Init+0x5e>
10053426:	f7ff ff6d 	bl	10053304 <_BlueNRG_Stack_Initialization>
1005342a:	2400      	movs	r4, #0
1005342c:	e000      	b.n	10053430 <BLE_STACK_Init+0x60>
1005342e:	2487      	movs	r4, #135	@ 0x87
10053430:	4620      	mov	r0, r4
10053432:	bdb0      	pop	{r4, r5, r7, pc}

10053434 <__arm_cp.4_0>:
10053434:	000003fa 	.word	0x000003fa

10053438 <__arm_cp.4_1>:
10053438:	20001188 	.word	0x20001188

1005343c <BLE_STACK_SleepCheck>:
1005343c:	b580      	push	{r7, lr}
1005343e:	f00e fe23 	bl	10062088 <tsk_no_idle_check>
10053442:	2800      	cmp	r0, #0
10053444:	d104      	bne.n	10053450 <BLE_STACK_SleepCheck+0x14>
10053446:	4804      	ldr	r0, [pc, #16]	@ (10053458 <__arm_cp.5_0>)
10053448:	6800      	ldr	r0, [r0, #0]
1005344a:	7ac0      	ldrb	r0, [r0, #11]
1005344c:	2800      	cmp	r0, #0
1005344e:	d001      	beq.n	10053454 <BLE_STACK_SleepCheck+0x18>
10053450:	2000      	movs	r0, #0
10053452:	bd80      	pop	{r7, pc}
10053454:	2003      	movs	r0, #3
10053456:	bd80      	pop	{r7, pc}

10053458 <__arm_cp.5_0>:
10053458:	20001174 	.word	0x20001174

1005345c <log_verbosity_get_ucfg_weak>:
1005345c:	4770      	bx	lr

1005345e <log_init_ucfg_weak>:
1005345e:	4770      	bx	lr

10053460 <log_notify_stu_ucfg_weak>:
10053460:	4770      	bx	lr

10053462 <log_notify_us_flush_ucfg_weak>:
10053462:	4770      	bx	lr

10053464 <log_csr_ucfg_weak>:
10053464:	2000      	movs	r0, #0
10053466:	4770      	bx	lr

10053468 <aci_event_fifo_push_header>:
10053468:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005346a:	4615      	mov	r5, r2
1005346c:	460c      	mov	r4, r1
1005346e:	4606      	mov	r6, r0
10053470:	0608      	lsls	r0, r1, #24
10053472:	d414      	bmi.n	1005349e <aci_event_fifo_push_header+0x36>
10053474:	aa02      	add	r2, sp, #8
10053476:	af01      	add	r7, sp, #4
10053478:	4630      	mov	r0, r6
1005347a:	4619      	mov	r1, r3
1005347c:	463b      	mov	r3, r7
1005347e:	f000 f853 	bl	10053528 <fifoBuf_getFreeHeader>
10053482:	2800      	cmp	r0, #0
10053484:	d021      	beq.n	100534ca <aci_event_fifo_push_header+0x62>
10053486:	0660      	lsls	r0, r4, #25
10053488:	d438      	bmi.n	100534fc <aci_event_fifo_push_header+0x94>
1005348a:	9802      	ldr	r0, [sp, #8]
1005348c:	7881      	ldrb	r1, [r0, #2]
1005348e:	22fc      	movs	r2, #252	@ 0xfc
10053490:	400a      	ands	r2, r1
10053492:	7082      	strb	r2, [r0, #2]
10053494:	9901      	ldr	r1, [sp, #4]
10053496:	8001      	strh	r1, [r0, #0]
10053498:	8071      	strh	r1, [r6, #2]
1005349a:	2701      	movs	r7, #1
1005349c:	e02f      	b.n	100534fe <aci_event_fifo_push_header+0x96>
1005349e:	f3ef 8010 	mrs	r0, PRIMASK
100534a2:	b672      	cpsid	i
100534a4:	aa02      	add	r2, sp, #8
100534a6:	af01      	add	r7, sp, #4
100534a8:	4630      	mov	r0, r6
100534aa:	4619      	mov	r1, r3
100534ac:	463b      	mov	r3, r7
100534ae:	f000 f83b 	bl	10053528 <fifoBuf_getFreeHeader>
100534b2:	2800      	cmp	r0, #0
100534b4:	d00b      	beq.n	100534ce <aci_event_fifo_push_header+0x66>
100534b6:	9902      	ldr	r1, [sp, #8]
100534b8:	788a      	ldrb	r2, [r1, #2]
100534ba:	23fc      	movs	r3, #252	@ 0xfc
100534bc:	4013      	ands	r3, r2
100534be:	708b      	strb	r3, [r1, #2]
100534c0:	9a01      	ldr	r2, [sp, #4]
100534c2:	800a      	strh	r2, [r1, #0]
100534c4:	8072      	strh	r2, [r6, #2]
100534c6:	2701      	movs	r7, #1
100534c8:	e002      	b.n	100534d0 <aci_event_fifo_push_header+0x68>
100534ca:	2700      	movs	r7, #0
100534cc:	e003      	b.n	100534d6 <aci_event_fifo_push_header+0x6e>
100534ce:	2700      	movs	r7, #0
100534d0:	b662      	cpsie	i
100534d2:	2800      	cmp	r0, #0
100534d4:	d113      	bne.n	100534fe <aci_event_fifo_push_header+0x96>
100534d6:	f3ef 8010 	mrs	r0, PRIMASK
100534da:	b672      	cpsid	i
100534dc:	06a0      	lsls	r0, r4, #26
100534de:	d40a      	bmi.n	100534f6 <aci_event_fifo_push_header+0x8e>
100534e0:	4810      	ldr	r0, [pc, #64]	@ (10053524 <__arm_cp.0_0>)
100534e2:	6800      	ldr	r0, [r0, #0]
100534e4:	6801      	ldr	r1, [r0, #0]
100534e6:	2208      	movs	r2, #8
100534e8:	430a      	orrs	r2, r1
100534ea:	6002      	str	r2, [r0, #0]
100534ec:	2000      	movs	r0, #0
100534ee:	f00e fdd5 	bl	1006209c <tsk_notify_idx>
100534f2:	f7f0 fcd4 	bl	10043e9e <BLE_STACK_ProcessRequest>
100534f6:	b662      	cpsie	i
100534f8:	2600      	movs	r6, #0
100534fa:	e00a      	b.n	10053512 <aci_event_fifo_push_header+0xaa>
100534fc:	2700      	movs	r7, #0
100534fe:	9e02      	ldr	r6, [sp, #8]
10053500:	70f5      	strb	r5, [r6, #3]
10053502:	00a0      	lsls	r0, r4, #2
10053504:	2160      	movs	r1, #96	@ 0x60
10053506:	4001      	ands	r1, r0
10053508:	78b0      	ldrb	r0, [r6, #2]
1005350a:	2203      	movs	r2, #3
1005350c:	4002      	ands	r2, r0
1005350e:	1850      	adds	r0, r2, r1
10053510:	70b0      	strb	r0, [r6, #2]
10053512:	2f00      	cmp	r7, #0
10053514:	d004      	beq.n	10053520 <aci_event_fifo_push_header+0xb8>
10053516:	2000      	movs	r0, #0
10053518:	f00e fdc0 	bl	1006209c <tsk_notify_idx>
1005351c:	f7f0 fcbf 	bl	10043e9e <BLE_STACK_ProcessRequest>
10053520:	4630      	mov	r0, r6
10053522:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10053524 <__arm_cp.0_0>:
10053524:	20001124 	.word	0x20001124

10053528 <fifoBuf_getFreeHeader>:
10053528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005352a:	9200      	str	r2, [sp, #0]
1005352c:	8845      	ldrh	r5, [r0, #2]
1005352e:	08ac      	lsrs	r4, r5, #2
10053530:	801c      	strh	r4, [r3, #0]
10053532:	1c49      	adds	r1, r1, #1
10053534:	b28a      	uxth	r2, r1
10053536:	18a6      	adds	r6, r4, r2
10053538:	8887      	ldrh	r7, [r0, #4]
1005353a:	42be      	cmp	r6, r7
1005353c:	d900      	bls.n	10053540 <fifoBuf_getFreeHeader+0x18>
1005353e:	1b09      	subs	r1, r1, r4
10053540:	190a      	adds	r2, r1, r4
10053542:	0092      	lsls	r2, r2, #2
10053544:	42be      	cmp	r6, r7
10053546:	d900      	bls.n	1005354a <fifoBuf_getFreeHeader+0x22>
10053548:	1c6d      	adds	r5, r5, #1
1005354a:	2603      	movs	r6, #3
1005354c:	4035      	ands	r5, r6
1005354e:	1952      	adds	r2, r2, r5
10053550:	801a      	strh	r2, [r3, #0]
10053552:	00a3      	lsls	r3, r4, #2
10053554:	181b      	adds	r3, r3, r0
10053556:	3308      	adds	r3, #8
10053558:	9c00      	ldr	r4, [sp, #0]
1005355a:	6023      	str	r3, [r4, #0]
1005355c:	b292      	uxth	r2, r2
1005355e:	8805      	ldrh	r5, [r0, #0]
10053560:	1b52      	subs	r2, r2, r5
10053562:	4617      	mov	r7, r2
10053564:	4037      	ands	r7, r6
10053566:	8884      	ldrh	r4, [r0, #4]
10053568:	4367      	muls	r7, r4
1005356a:	4035      	ands	r5, r6
1005356c:	1952      	adds	r2, r2, r5
1005356e:	0892      	lsrs	r2, r2, #2
10053570:	19d2      	adds	r2, r2, r7
10053572:	b295      	uxth	r5, r2
10053574:	88c6      	ldrh	r6, [r0, #6]
10053576:	42b5      	cmp	r5, r6
10053578:	d900      	bls.n	1005357c <fifoBuf_getFreeHeader+0x54>
1005357a:	80c2      	strh	r2, [r0, #6]
1005357c:	42a5      	cmp	r5, r4
1005357e:	d80a      	bhi.n	10053596 <fifoBuf_getFreeHeader+0x6e>
10053580:	b209      	sxth	r1, r1
10053582:	2900      	cmp	r1, #0
10053584:	d507      	bpl.n	10053596 <fifoBuf_getFreeHeader+0x6e>
10053586:	7899      	ldrb	r1, [r3, #2]
10053588:	22fc      	movs	r2, #252	@ 0xfc
1005358a:	400a      	ands	r2, r1
1005358c:	1c51      	adds	r1, r2, #1
1005358e:	7099      	strb	r1, [r3, #2]
10053590:	3008      	adds	r0, #8
10053592:	9900      	ldr	r1, [sp, #0]
10053594:	6008      	str	r0, [r1, #0]
10053596:	42a5      	cmp	r5, r4
10053598:	d901      	bls.n	1005359e <fifoBuf_getFreeHeader+0x76>
1005359a:	2000      	movs	r0, #0
1005359c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005359e:	2001      	movs	r0, #1
100535a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100535a2 <aci_event_fifo_push>:
100535a2:	b580      	push	{r7, lr}
100535a4:	0640      	lsls	r0, r0, #25
100535a6:	d405      	bmi.n	100535b4 <aci_event_fifo_push+0x12>
100535a8:	7888      	ldrb	r0, [r1, #2]
100535aa:	22fc      	movs	r2, #252	@ 0xfc
100535ac:	4002      	ands	r2, r0
100535ae:	1c90      	adds	r0, r2, #2
100535b0:	7088      	strb	r0, [r1, #2]
100535b2:	bd80      	pop	{r7, pc}
100535b4:	4608      	mov	r0, r1
100535b6:	f000 f801 	bl	100535bc <event_notify_cb>
100535ba:	bd80      	pop	{r7, pc}

100535bc <event_notify_cb>:
100535bc:	b580      	push	{r7, lr}
100535be:	1d01      	adds	r1, r0, #4
100535c0:	78c2      	ldrb	r2, [r0, #3]
100535c2:	2a14      	cmp	r2, #20
100535c4:	d804      	bhi.n	100535d0 <event_notify_cb+0x14>
100535c6:	6842      	ldr	r2, [r0, #4]
100535c8:	7880      	ldrb	r0, [r0, #2]
100535ca:	0880      	lsrs	r0, r0, #2
100535cc:	4790      	blx	r2
100535ce:	bd80      	pop	{r7, pc}
100535d0:	2a3d      	cmp	r2, #61	@ 0x3d
100535d2:	d803      	bhi.n	100535dc <event_notify_cb+0x20>
100535d4:	2000      	movs	r0, #0
100535d6:	f000 f8e9 	bl	100537ac <hci_event_notify_cb>
100535da:	bd80      	pop	{r7, pc}
100535dc:	2a3f      	cmp	r2, #63	@ 0x3f
100535de:	d803      	bhi.n	100535e8 <event_notify_cb+0x2c>
100535e0:	2000      	movs	r0, #0
100535e2:	f000 f8f5 	bl	100537d0 <hci_rx_data_notify_cb>
100535e6:	bd80      	pop	{r7, pc}
100535e8:	2a60      	cmp	r2, #96	@ 0x60
100535ea:	d802      	bhi.n	100535f2 <event_notify_cb+0x36>
100535ec:	2000      	movs	r0, #0
100535ee:	f000 f8e4 	bl	100537ba <hci_aci_event_notify_cb>
100535f2:	bd80      	pop	{r7, pc}

100535f4 <Events_Process_init>:
100535f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100535f6:	2001      	movs	r0, #1
100535f8:	211c      	movs	r1, #28
100535fa:	4a29      	ldr	r2, [pc, #164]	@ (100536a0 <__arm_cp.7_0>)
100535fc:	4790      	blx	r2
100535fe:	4f29      	ldr	r7, [pc, #164]	@ (100536a4 <__arm_cp.7_1>)
10053600:	6038      	str	r0, [r7, #0]
10053602:	4d29      	ldr	r5, [pc, #164]	@ (100536a8 <__arm_cp.7_2>)
10053604:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
10053606:	1e40      	subs	r0, r0, #1
10053608:	2603      	movs	r6, #3
1005360a:	4330      	orrs	r0, r6
1005360c:	1c40      	adds	r0, r0, #1
1005360e:	0880      	lsrs	r0, r0, #2
10053610:	1cc0      	adds	r0, r0, #3
10053612:	2404      	movs	r4, #4
10053614:	4621      	mov	r1, r4
10053616:	4a22      	ldr	r2, [pc, #136]	@ (100536a0 <__arm_cp.7_0>)
10053618:	4790      	blx	r2
1005361a:	6839      	ldr	r1, [r7, #0]
1005361c:	6048      	str	r0, [r1, #4]
1005361e:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
10053620:	1e40      	subs	r0, r0, #1
10053622:	4330      	orrs	r0, r6
10053624:	1c40      	adds	r0, r0, #1
10053626:	0880      	lsrs	r0, r0, #2
10053628:	1cc0      	adds	r0, r0, #3
1005362a:	4621      	mov	r1, r4
1005362c:	4d1c      	ldr	r5, [pc, #112]	@ (100536a0 <__arm_cp.7_0>)
1005362e:	47a8      	blx	r5
10053630:	462a      	mov	r2, r5
10053632:	6839      	ldr	r1, [r7, #0]
10053634:	6088      	str	r0, [r1, #8]
10053636:	4d1c      	ldr	r5, [pc, #112]	@ (100536a8 <__arm_cp.7_2>)
10053638:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
1005363a:	1e40      	subs	r0, r0, #1
1005363c:	4330      	orrs	r0, r6
1005363e:	1c40      	adds	r0, r0, #1
10053640:	0880      	lsrs	r0, r0, #2
10053642:	1cc0      	adds	r0, r0, #3
10053644:	4621      	mov	r1, r4
10053646:	4790      	blx	r2
10053648:	6839      	ldr	r1, [r7, #0]
1005364a:	60c8      	str	r0, [r1, #12]
1005364c:	f7ff fbe0 	bl	10052e10 <hal_radio_activity_state_init>
10053650:	6838      	ldr	r0, [r7, #0]
10053652:	6842      	ldr	r2, [r0, #4]
10053654:	2100      	movs	r1, #0
10053656:	8011      	strh	r1, [r2, #0]
10053658:	8051      	strh	r1, [r2, #2]
1005365a:	6883      	ldr	r3, [r0, #8]
1005365c:	8019      	strh	r1, [r3, #0]
1005365e:	80d1      	strh	r1, [r2, #6]
10053660:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
10053662:	1e7f      	subs	r7, r7, #1
10053664:	4337      	orrs	r7, r6
10053666:	1c7f      	adds	r7, r7, #1
10053668:	08bf      	lsrs	r7, r7, #2
1005366a:	8097      	strh	r7, [r2, #4]
1005366c:	8059      	strh	r1, [r3, #2]
1005366e:	80d9      	strh	r1, [r3, #6]
10053670:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
10053672:	1e7f      	subs	r7, r7, #1
10053674:	4337      	orrs	r7, r6
10053676:	1c7f      	adds	r7, r7, #1
10053678:	08bf      	lsrs	r7, r7, #2
1005367a:	809f      	strh	r7, [r3, #4]
1005367c:	68c7      	ldr	r7, [r0, #12]
1005367e:	8039      	strh	r1, [r7, #0]
10053680:	6102      	str	r2, [r0, #16]
10053682:	6143      	str	r3, [r0, #20]
10053684:	80f9      	strh	r1, [r7, #6]
10053686:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
10053688:	1e52      	subs	r2, r2, #1
1005368a:	4332      	orrs	r2, r6
1005368c:	1c52      	adds	r2, r2, #1
1005368e:	0892      	lsrs	r2, r2, #2
10053690:	80ba      	strh	r2, [r7, #4]
10053692:	8079      	strh	r1, [r7, #2]
10053694:	6187      	str	r7, [r0, #24]
10053696:	4622      	mov	r2, r4
10053698:	f7f2 fbfe 	bl	10045e98 <BLEPLAT_MemSet>
1005369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005369e:	46c0      	nop			@ (mov r8, r8)

100536a0 <__arm_cp.7_0>:
100536a0:	1005ef4d 	.word	0x1005ef4d

100536a4 <__arm_cp.7_1>:
100536a4:	20001124 	.word	0x20001124

100536a8 <__arm_cp.7_2>:
100536a8:	20001188 	.word	0x20001188

100536ac <Events_Process_Q>:
100536ac:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100536ae:	4d3d      	ldr	r5, [pc, #244]	@ (100537a4 <__arm_cp.8_0>)
100536b0:	6828      	ldr	r0, [r5, #0]
100536b2:	3010      	adds	r0, #16
100536b4:	2100      	movs	r1, #0
100536b6:	2906      	cmp	r1, #6
100536b8:	d005      	beq.n	100536c6 <Events_Process_Q+0x1a>
100536ba:	c804      	ldmia	r0!, {r2}
100536bc:	8852      	ldrh	r2, [r2, #2]
100536be:	ab01      	add	r3, sp, #4
100536c0:	525a      	strh	r2, [r3, r1]
100536c2:	1c89      	adds	r1, r1, #2
100536c4:	e7f7      	b.n	100536b6 <Events_Process_Q+0xa>
100536c6:	f3ef 8010 	mrs	r0, PRIMASK
100536ca:	b672      	cpsid	i
100536cc:	6828      	ldr	r0, [r5, #0]
100536ce:	6804      	ldr	r4, [r0, #0]
100536d0:	2700      	movs	r7, #0
100536d2:	6007      	str	r7, [r0, #0]
100536d4:	b662      	cpsie	i
100536d6:	07e0      	lsls	r0, r4, #31
100536d8:	d002      	beq.n	100536e0 <Events_Process_Q+0x34>
100536da:	2000      	movs	r0, #0
100536dc:	f000 fc4a 	bl	10053f74 <hci_hardware_error_event_cb>
100536e0:	07a0      	lsls	r0, r4, #30
100536e2:	d502      	bpl.n	100536ea <Events_Process_Q+0x3e>
100536e4:	2001      	movs	r0, #1
100536e6:	f000 fc45 	bl	10053f74 <hci_hardware_error_event_cb>
100536ea:	0760      	lsls	r0, r4, #29
100536ec:	d502      	bpl.n	100536f4 <Events_Process_Q+0x48>
100536ee:	2002      	movs	r0, #2
100536f0:	f000 fc40 	bl	10053f74 <hci_hardware_error_event_cb>
100536f4:	0720      	lsls	r0, r4, #28
100536f6:	d502      	bpl.n	100536fe <Events_Process_Q+0x52>
100536f8:	2003      	movs	r0, #3
100536fa:	f000 fc3b 	bl	10053f74 <hci_hardware_error_event_cb>
100536fe:	06e0      	lsls	r0, r4, #27
10053700:	d54a      	bpl.n	10053798 <Events_Process_Q+0xec>
10053702:	2004      	movs	r0, #4
10053704:	f000 fc36 	bl	10053f74 <hci_hardware_error_event_cb>
10053708:	e046      	b.n	10053798 <Events_Process_Q+0xec>
1005370a:	0078      	lsls	r0, r7, #1
1005370c:	a901      	add	r1, sp, #4
1005370e:	5a0e      	ldrh	r6, [r1, r0]
10053710:	9700      	str	r7, [sp, #0]
10053712:	00bf      	lsls	r7, r7, #2
10053714:	6828      	ldr	r0, [r5, #0]
10053716:	19c0      	adds	r0, r0, r7
10053718:	6900      	ldr	r0, [r0, #16]
1005371a:	8801      	ldrh	r1, [r0, #0]
1005371c:	8802      	ldrh	r2, [r0, #0]
1005371e:	42b2      	cmp	r2, r6
10053720:	d02a      	beq.n	10053778 <Events_Process_Q+0xcc>
10053722:	0889      	lsrs	r1, r1, #2
10053724:	1c89      	adds	r1, r1, #2
10053726:	0089      	lsls	r1, r1, #2
10053728:	1844      	adds	r4, r0, r1
1005372a:	78a1      	ldrb	r1, [r4, #2]
1005372c:	2203      	movs	r2, #3
1005372e:	400a      	ands	r2, r1
10053730:	2a01      	cmp	r2, #1
10053732:	d002      	beq.n	1005373a <Events_Process_Q+0x8e>
10053734:	2a00      	cmp	r2, #0
10053736:	d103      	bne.n	10053740 <Events_Process_Q+0x94>
10053738:	e01e      	b.n	10053778 <Events_Process_Q+0xcc>
1005373a:	7a81      	ldrb	r1, [r0, #10]
1005373c:	3008      	adds	r0, #8
1005373e:	4604      	mov	r4, r0
10053740:	0648      	lsls	r0, r1, #25
10053742:	d403      	bmi.n	1005374c <Events_Process_Q+0xa0>
10053744:	4620      	mov	r0, r4
10053746:	f7ff ff39 	bl	100535bc <event_notify_cb>
1005374a:	e00a      	b.n	10053762 <Events_Process_Q+0xb6>
1005374c:	78e0      	ldrb	r0, [r4, #3]
1005374e:	2813      	cmp	r0, #19
10053750:	d207      	bcs.n	10053762 <Events_Process_Q+0xb6>
10053752:	0080      	lsls	r0, r0, #2
10053754:	4914      	ldr	r1, [pc, #80]	@ (100537a8 <__arm_cp.8_1>)
10053756:	580a      	ldr	r2, [r1, r0]
10053758:	1d21      	adds	r1, r4, #4
1005375a:	4620      	mov	r0, r4
1005375c:	4790      	blx	r2
1005375e:	2800      	cmp	r0, #0
10053760:	d105      	bne.n	1005376e <Events_Process_Q+0xc2>
10053762:	6828      	ldr	r0, [r5, #0]
10053764:	19c0      	adds	r0, r0, r7
10053766:	6900      	ldr	r0, [r0, #16]
10053768:	8821      	ldrh	r1, [r4, #0]
1005376a:	8001      	strh	r1, [r0, #0]
1005376c:	e7d5      	b.n	1005371a <Events_Process_Q+0x6e>
1005376e:	2000      	movs	r0, #0
10053770:	f00e fc94 	bl	1006209c <tsk_notify_idx>
10053774:	f7f0 fb93 	bl	10043e9e <BLE_STACK_ProcessRequest>
10053778:	f3ef 8010 	mrs	r0, PRIMASK
1005377c:	b672      	cpsid	i
1005377e:	6828      	ldr	r0, [r5, #0]
10053780:	19c0      	adds	r0, r0, r7
10053782:	6900      	ldr	r0, [r0, #16]
10053784:	8841      	ldrh	r1, [r0, #2]
10053786:	8802      	ldrh	r2, [r0, #0]
10053788:	4291      	cmp	r1, r2
1005378a:	d102      	bne.n	10053792 <Events_Process_Q+0xe6>
1005378c:	2100      	movs	r1, #0
1005378e:	8001      	strh	r1, [r0, #0]
10053790:	8041      	strh	r1, [r0, #2]
10053792:	b662      	cpsie	i
10053794:	9f00      	ldr	r7, [sp, #0]
10053796:	1c7f      	adds	r7, r7, #1
10053798:	2f03      	cmp	r7, #3
1005379a:	d1b6      	bne.n	1005370a <Events_Process_Q+0x5e>
1005379c:	f7ff fb4a 	bl	10052e34 <hal_radio_activity_state_cb_check>
100537a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100537a2:	46c0      	nop			@ (mov r8, r8)

100537a4 <__arm_cp.8_0>:
100537a4:	20001124 	.word	0x20001124

100537a8 <__arm_cp.8_1>:
100537a8:	1006cf5c 	.word	0x1006cf5c

100537ac <hci_event_notify_cb>:
100537ac:	b580      	push	{r7, lr}
100537ae:	4608      	mov	r0, r1
100537b0:	7889      	ldrb	r1, [r1, #2]
100537b2:	1cc9      	adds	r1, r1, #3
100537b4:	f7fe f98a 	bl	10051acc <BLE_STACK_Event>
100537b8:	bd80      	pop	{r7, pc}

100537ba <hci_aci_event_notify_cb>:
100537ba:	b580      	push	{r7, lr}
100537bc:	4608      	mov	r0, r1
100537be:	7889      	ldrb	r1, [r1, #2]
100537c0:	78c2      	ldrb	r2, [r0, #3]
100537c2:	0212      	lsls	r2, r2, #8
100537c4:	1851      	adds	r1, r2, r1
100537c6:	1d09      	adds	r1, r1, #4
100537c8:	b289      	uxth	r1, r1
100537ca:	f7fe f97f 	bl	10051acc <BLE_STACK_Event>
100537ce:	bd80      	pop	{r7, pc}

100537d0 <hci_rx_data_notify_cb>:
100537d0:	b580      	push	{r7, lr}
100537d2:	4608      	mov	r0, r1
100537d4:	78c9      	ldrb	r1, [r1, #3]
100537d6:	7902      	ldrb	r2, [r0, #4]
100537d8:	0212      	lsls	r2, r2, #8
100537da:	1851      	adds	r1, r2, r1
100537dc:	1d49      	adds	r1, r1, #5
100537de:	b289      	uxth	r1, r1
100537e0:	f7fe f974 	bl	10051acc <BLE_STACK_Event>
100537e4:	bd80      	pop	{r7, pc}
	...

100537e8 <hci_disconnection_complete_event_int_cb>:
100537e8:	b5b0      	push	{r4, r5, r7, lr}
100537ea:	460d      	mov	r5, r1
100537ec:	4604      	mov	r4, r0
100537ee:	7908      	ldrb	r0, [r1, #4]
100537f0:	7949      	ldrb	r1, [r1, #5]
100537f2:	0209      	lsls	r1, r1, #8
100537f4:	1808      	adds	r0, r1, r0
100537f6:	f001 fb3f 	bl	10054e78 <GAT_att_cmn_disconnection>
100537fa:	7928      	ldrb	r0, [r5, #4]
100537fc:	7969      	ldrb	r1, [r5, #5]
100537fe:	0209      	lsls	r1, r1, #8
10053800:	1808      	adds	r0, r1, r0
10053802:	f00e f969 	bl	10061ad8 <smp_sap_hci_disconnection_complete_evt_hndl>
10053806:	7928      	ldrb	r0, [r5, #4]
10053808:	7969      	ldrb	r1, [r5, #5]
1005380a:	0209      	lsls	r1, r1, #8
1005380c:	1808      	adds	r0, r1, r0
1005380e:	f004 fe7f 	bl	10058510 <l2c_sap_hci_disconnection_complete_evt_hndl>
10053812:	f000 feba 	bl	1005458a <GAP_hci_disconnection_complete_evt_hndl>
10053816:	7928      	ldrb	r0, [r5, #4]
10053818:	7969      	ldrb	r1, [r5, #5]
1005381a:	0209      	lsls	r1, r1, #8
1005381c:	1808      	adds	r0, r1, r0
1005381e:	f7ff fcbd 	bl	1005319c <ACL_pkt_disconnection>
10053822:	4808      	ldr	r0, [pc, #32]	@ (10053844 <__arm_cp.14_0>)
10053824:	6800      	ldr	r0, [r0, #0]
10053826:	2136      	movs	r1, #54	@ 0x36
10053828:	5c40      	ldrb	r0, [r0, r1]
1005382a:	06c0      	lsls	r0, r0, #27
1005382c:	d401      	bmi.n	10053832 <hci_disconnection_complete_event_int_cb+0x4a>
1005382e:	2000      	movs	r0, #0
10053830:	bdb0      	pop	{r4, r5, r7, pc}
10053832:	2015      	movs	r0, #21
10053834:	70e0      	strb	r0, [r4, #3]
10053836:	78a0      	ldrb	r0, [r4, #2]
10053838:	21bf      	movs	r1, #191	@ 0xbf
1005383a:	4001      	ands	r1, r0
1005383c:	70a1      	strb	r1, [r4, #2]
1005383e:	2084      	movs	r0, #132	@ 0x84
10053840:	bdb0      	pop	{r4, r5, r7, pc}
10053842:	46c0      	nop			@ (mov r8, r8)

10053844 <__arm_cp.14_0>:
10053844:	20001174 	.word	0x20001174

10053848 <hci_encryption_change_event_int_cb>:
10053848:	b510      	push	{r4, lr}
1005384a:	4604      	mov	r4, r0
1005384c:	7908      	ldrb	r0, [r1, #4]
1005384e:	794a      	ldrb	r2, [r1, #5]
10053850:	0212      	lsls	r2, r2, #8
10053852:	1812      	adds	r2, r2, r0
10053854:	78c9      	ldrb	r1, [r1, #3]
10053856:	2006      	movs	r0, #6
10053858:	f00e f8c4 	bl	100619e4 <smp_sap_hci_encryption_change_evt_hndl>
1005385c:	4807      	ldr	r0, [pc, #28]	@ (1005387c <__arm_cp.16_0>)
1005385e:	6800      	ldr	r0, [r0, #0]
10053860:	2136      	movs	r1, #54	@ 0x36
10053862:	5640      	ldrsb	r0, [r0, r1]
10053864:	2800      	cmp	r0, #0
10053866:	d401      	bmi.n	1005386c <hci_encryption_change_event_int_cb+0x24>
10053868:	2000      	movs	r0, #0
1005386a:	bd10      	pop	{r4, pc}
1005386c:	2016      	movs	r0, #22
1005386e:	70e0      	strb	r0, [r4, #3]
10053870:	78a0      	ldrb	r0, [r4, #2]
10053872:	21bf      	movs	r1, #191	@ 0xbf
10053874:	4001      	ands	r1, r0
10053876:	70a1      	strb	r1, [r4, #2]
10053878:	2084      	movs	r0, #132	@ 0x84
1005387a:	bd10      	pop	{r4, pc}

1005387c <__arm_cp.16_0>:
1005387c:	20001174 	.word	0x20001174

10053880 <hci_encryption_key_refresh_complete_event_int_cb>:
10053880:	b510      	push	{r4, lr}
10053882:	4604      	mov	r4, r0
10053884:	7908      	ldrb	r0, [r1, #4]
10053886:	794a      	ldrb	r2, [r1, #5]
10053888:	0212      	lsls	r2, r2, #8
1005388a:	1812      	adds	r2, r2, r0
1005388c:	78c9      	ldrb	r1, [r1, #3]
1005388e:	2007      	movs	r0, #7
10053890:	f00e f8a8 	bl	100619e4 <smp_sap_hci_encryption_change_evt_hndl>
10053894:	4807      	ldr	r0, [pc, #28]	@ (100538b4 <__arm_cp.18_0>)
10053896:	6800      	ldr	r0, [r0, #0]
10053898:	213b      	movs	r1, #59	@ 0x3b
1005389a:	5640      	ldrsb	r0, [r0, r1]
1005389c:	2800      	cmp	r0, #0
1005389e:	d401      	bmi.n	100538a4 <hci_encryption_key_refresh_complete_event_int_cb+0x24>
100538a0:	2000      	movs	r0, #0
100538a2:	bd10      	pop	{r4, pc}
100538a4:	2017      	movs	r0, #23
100538a6:	70e0      	strb	r0, [r4, #3]
100538a8:	78a0      	ldrb	r0, [r4, #2]
100538aa:	21bf      	movs	r1, #191	@ 0xbf
100538ac:	4001      	ands	r1, r0
100538ae:	70a1      	strb	r1, [r4, #2]
100538b0:	2084      	movs	r0, #132	@ 0x84
100538b2:	bd10      	pop	{r4, pc}

100538b4 <__arm_cp.18_0>:
100538b4:	20001174 	.word	0x20001174

100538b8 <hci_le_connection_complete_event_int_cb>:
100538b8:	b5b0      	push	{r4, r5, r7, lr}
100538ba:	460d      	mov	r5, r1
100538bc:	4604      	mov	r4, r0
100538be:	7908      	ldrb	r0, [r1, #4]
100538c0:	2800      	cmp	r0, #0
100538c2:	d11d      	bne.n	10053900 <hci_le_connection_complete_event_int_cb+0x48>
100538c4:	7968      	ldrb	r0, [r5, #5]
100538c6:	79a9      	ldrb	r1, [r5, #6]
100538c8:	0209      	lsls	r1, r1, #8
100538ca:	1808      	adds	r0, r1, r0
100538cc:	f7ff fc42 	bl	10053154 <ACL_pkt_connection>
100538d0:	7968      	ldrb	r0, [r5, #5]
100538d2:	79a9      	ldrb	r1, [r5, #6]
100538d4:	0209      	lsls	r1, r1, #8
100538d6:	1808      	adds	r0, r1, r0
100538d8:	7a2a      	ldrb	r2, [r5, #8]
100538da:	79e9      	ldrb	r1, [r5, #7]
100538dc:	462b      	mov	r3, r5
100538de:	3309      	adds	r3, #9
100538e0:	f00d ff3e 	bl	10061760 <smp_sap_hci_le_connection_complete_evt_hndl>
100538e4:	7968      	ldrb	r0, [r5, #5]
100538e6:	79a9      	ldrb	r1, [r5, #6]
100538e8:	0209      	lsls	r1, r1, #8
100538ea:	1808      	adds	r0, r1, r0
100538ec:	f001 faa4 	bl	10054e38 <GAT_att_cmn_connection>
100538f0:	7968      	ldrb	r0, [r5, #5]
100538f2:	79a9      	ldrb	r1, [r5, #6]
100538f4:	0209      	lsls	r1, r1, #8
100538f6:	1808      	adds	r0, r1, r0
100538f8:	79e9      	ldrb	r1, [r5, #7]
100538fa:	f004 fdf9 	bl	100584f0 <l2c_sap_hci_le_connection_complete_evt_hndl>
100538fe:	7928      	ldrb	r0, [r5, #4]
10053900:	7969      	ldrb	r1, [r5, #5]
10053902:	79aa      	ldrb	r2, [r5, #6]
10053904:	0212      	lsls	r2, r2, #8
10053906:	1851      	adds	r1, r2, r1
10053908:	79ea      	ldrb	r2, [r5, #7]
1005390a:	f000 fe3f 	bl	1005458c <GAP_hci_le_connection_complete_evt_hndl>
1005390e:	4809      	ldr	r0, [pc, #36]	@ (10053934 <__arm_cp.20_0>)
10053910:	6801      	ldr	r1, [r0, #0]
10053912:	203d      	movs	r0, #61	@ 0x3d
10053914:	5c0a      	ldrb	r2, [r1, r0]
10053916:	2000      	movs	r0, #0
10053918:	0692      	lsls	r2, r2, #26
1005391a:	d50a      	bpl.n	10053932 <hci_le_connection_complete_event_int_cb+0x7a>
1005391c:	313d      	adds	r1, #61	@ 0x3d
1005391e:	7a49      	ldrb	r1, [r1, #9]
10053920:	07c9      	lsls	r1, r1, #31
10053922:	d006      	beq.n	10053932 <hci_le_connection_complete_event_int_cb+0x7a>
10053924:	2018      	movs	r0, #24
10053926:	70e0      	strb	r0, [r4, #3]
10053928:	78a0      	ldrb	r0, [r4, #2]
1005392a:	21bf      	movs	r1, #191	@ 0xbf
1005392c:	4001      	ands	r1, r0
1005392e:	70a1      	strb	r1, [r4, #2]
10053930:	2084      	movs	r0, #132	@ 0x84
10053932:	bdb0      	pop	{r4, r5, r7, pc}

10053934 <__arm_cp.20_0>:
10053934:	20001174 	.word	0x20001174

10053938 <hci_le_enhanced_connection_complete_event_int_cb>:
10053938:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005393a:	460d      	mov	r5, r1
1005393c:	4604      	mov	r4, r0
1005393e:	7908      	ldrb	r0, [r1, #4]
10053940:	2800      	cmp	r0, #0
10053942:	d123      	bne.n	1005398c <hci_le_enhanced_connection_complete_event_int_cb+0x54>
10053944:	7968      	ldrb	r0, [r5, #5]
10053946:	79a9      	ldrb	r1, [r5, #6]
10053948:	0209      	lsls	r1, r1, #8
1005394a:	1808      	adds	r0, r1, r0
1005394c:	f7ff fc02 	bl	10053154 <ACL_pkt_connection>
10053950:	7a2a      	ldrb	r2, [r5, #8]
10053952:	79e9      	ldrb	r1, [r5, #7]
10053954:	7968      	ldrb	r0, [r5, #5]
10053956:	79ab      	ldrb	r3, [r5, #6]
10053958:	462e      	mov	r6, r5
1005395a:	3615      	adds	r6, #21
1005395c:	462f      	mov	r7, r5
1005395e:	370f      	adds	r7, #15
10053960:	9700      	str	r7, [sp, #0]
10053962:	9601      	str	r6, [sp, #4]
10053964:	021b      	lsls	r3, r3, #8
10053966:	1818      	adds	r0, r3, r0
10053968:	462b      	mov	r3, r5
1005396a:	3309      	adds	r3, #9
1005396c:	f00d ff92 	bl	10061894 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>
10053970:	7968      	ldrb	r0, [r5, #5]
10053972:	79a9      	ldrb	r1, [r5, #6]
10053974:	0209      	lsls	r1, r1, #8
10053976:	1808      	adds	r0, r1, r0
10053978:	f001 fa5e 	bl	10054e38 <GAT_att_cmn_connection>
1005397c:	7968      	ldrb	r0, [r5, #5]
1005397e:	79a9      	ldrb	r1, [r5, #6]
10053980:	0209      	lsls	r1, r1, #8
10053982:	1808      	adds	r0, r1, r0
10053984:	79e9      	ldrb	r1, [r5, #7]
10053986:	f004 fdb3 	bl	100584f0 <l2c_sap_hci_le_connection_complete_evt_hndl>
1005398a:	7928      	ldrb	r0, [r5, #4]
1005398c:	7969      	ldrb	r1, [r5, #5]
1005398e:	79aa      	ldrb	r2, [r5, #6]
10053990:	0212      	lsls	r2, r2, #8
10053992:	1851      	adds	r1, r2, r1
10053994:	79ea      	ldrb	r2, [r5, #7]
10053996:	f000 fdf9 	bl	1005458c <GAP_hci_le_connection_complete_evt_hndl>
1005399a:	4809      	ldr	r0, [pc, #36]	@ (100539c0 <__arm_cp.22_0>)
1005399c:	6801      	ldr	r1, [r0, #0]
1005399e:	203d      	movs	r0, #61	@ 0x3d
100539a0:	5c0a      	ldrb	r2, [r1, r0]
100539a2:	2000      	movs	r0, #0
100539a4:	0692      	lsls	r2, r2, #26
100539a6:	d50a      	bpl.n	100539be <hci_le_enhanced_connection_complete_event_int_cb+0x86>
100539a8:	313d      	adds	r1, #61	@ 0x3d
100539aa:	7a89      	ldrb	r1, [r1, #10]
100539ac:	0789      	lsls	r1, r1, #30
100539ae:	d506      	bpl.n	100539be <hci_le_enhanced_connection_complete_event_int_cb+0x86>
100539b0:	201c      	movs	r0, #28
100539b2:	70e0      	strb	r0, [r4, #3]
100539b4:	78a0      	ldrb	r0, [r4, #2]
100539b6:	21bf      	movs	r1, #191	@ 0xbf
100539b8:	4001      	ands	r1, r0
100539ba:	70a1      	strb	r1, [r4, #2]
100539bc:	2084      	movs	r0, #132	@ 0x84
100539be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100539c0 <__arm_cp.22_0>:
100539c0:	20001174 	.word	0x20001174

100539c4 <hci_le_long_term_key_request_event_int_cb>:
100539c4:	b570      	push	{r4, r5, r6, lr}
100539c6:	4604      	mov	r4, r0
100539c8:	4d14      	ldr	r5, [pc, #80]	@ (10053a1c <__arm_cp.24_0>)
100539ca:	6828      	ldr	r0, [r5, #0]
100539cc:	2636      	movs	r6, #54	@ 0x36
100539ce:	5d80      	ldrb	r0, [r0, r6]
100539d0:	2800      	cmp	r0, #0
100539d2:	d10e      	bne.n	100539f2 <hci_le_long_term_key_request_event_int_cb+0x2e>
100539d4:	7908      	ldrb	r0, [r1, #4]
100539d6:	794a      	ldrb	r2, [r1, #5]
100539d8:	0212      	lsls	r2, r2, #8
100539da:	1810      	adds	r0, r2, r0
100539dc:	7b8a      	ldrb	r2, [r1, #14]
100539de:	7bcb      	ldrb	r3, [r1, #15]
100539e0:	021b      	lsls	r3, r3, #8
100539e2:	189a      	adds	r2, r3, r2
100539e4:	1d89      	adds	r1, r1, #6
100539e6:	f00d ff7d 	bl	100618e4 <smp_sap_hci_le_long_term_key_request_evt_hndl>
100539ea:	6828      	ldr	r0, [r5, #0]
100539ec:	5d80      	ldrb	r0, [r0, r6]
100539ee:	2800      	cmp	r0, #0
100539f0:	d012      	beq.n	10053a18 <hci_le_long_term_key_request_event_int_cb+0x54>
100539f2:	480b      	ldr	r0, [pc, #44]	@ (10053a20 <__arm_cp.24_1>)
100539f4:	6801      	ldr	r1, [r0, #0]
100539f6:	203d      	movs	r0, #61	@ 0x3d
100539f8:	5c0a      	ldrb	r2, [r1, r0]
100539fa:	2000      	movs	r0, #0
100539fc:	0692      	lsls	r2, r2, #26
100539fe:	d50a      	bpl.n	10053a16 <hci_le_long_term_key_request_event_int_cb+0x52>
10053a00:	313d      	adds	r1, #61	@ 0x3d
10053a02:	7a49      	ldrb	r1, [r1, #9]
10053a04:	06c9      	lsls	r1, r1, #27
10053a06:	d506      	bpl.n	10053a16 <hci_le_long_term_key_request_event_int_cb+0x52>
10053a08:	2019      	movs	r0, #25
10053a0a:	70e0      	strb	r0, [r4, #3]
10053a0c:	78a0      	ldrb	r0, [r4, #2]
10053a0e:	21bf      	movs	r1, #191	@ 0xbf
10053a10:	4001      	ands	r1, r0
10053a12:	70a1      	strb	r1, [r4, #2]
10053a14:	2084      	movs	r0, #132	@ 0x84
10053a16:	bd70      	pop	{r4, r5, r6, pc}
10053a18:	2000      	movs	r0, #0
10053a1a:	bd70      	pop	{r4, r5, r6, pc}

10053a1c <__arm_cp.24_0>:
10053a1c:	20001120 	.word	0x20001120

10053a20 <__arm_cp.24_1>:
10053a20:	20001174 	.word	0x20001174

10053a24 <hci_le_read_local_p256_public_key_complete_event_int_cb>:
10053a24:	b510      	push	{r4, lr}
10053a26:	4604      	mov	r4, r0
10053a28:	7908      	ldrb	r0, [r1, #4]
10053a2a:	1d49      	adds	r1, r1, #5
10053a2c:	f7fe f9af 	bl	10051d8e <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg>
10053a30:	480a      	ldr	r0, [pc, #40]	@ (10053a5c <__arm_cp.26_0>)
10053a32:	6801      	ldr	r1, [r0, #0]
10053a34:	203d      	movs	r0, #61	@ 0x3d
10053a36:	5c0a      	ldrb	r2, [r1, r0]
10053a38:	2000      	movs	r0, #0
10053a3a:	0692      	lsls	r2, r2, #26
10053a3c:	d504      	bpl.n	10053a48 <hci_le_read_local_p256_public_key_complete_event_int_cb+0x24>
10053a3e:	313d      	adds	r1, #61	@ 0x3d
10053a40:	2209      	movs	r2, #9
10053a42:	5689      	ldrsb	r1, [r1, r2]
10053a44:	2900      	cmp	r1, #0
10053a46:	d400      	bmi.n	10053a4a <hci_le_read_local_p256_public_key_complete_event_int_cb+0x26>
10053a48:	bd10      	pop	{r4, pc}
10053a4a:	201a      	movs	r0, #26
10053a4c:	70e0      	strb	r0, [r4, #3]
10053a4e:	78a0      	ldrb	r0, [r4, #2]
10053a50:	21bf      	movs	r1, #191	@ 0xbf
10053a52:	4001      	ands	r1, r0
10053a54:	70a1      	strb	r1, [r4, #2]
10053a56:	2084      	movs	r0, #132	@ 0x84
10053a58:	bd10      	pop	{r4, pc}
10053a5a:	46c0      	nop			@ (mov r8, r8)

10053a5c <__arm_cp.26_0>:
10053a5c:	20001174 	.word	0x20001174

10053a60 <hci_le_generate_dhkey_complete_event_int_cb>:
10053a60:	b510      	push	{r4, lr}
10053a62:	4604      	mov	r4, r0
10053a64:	7908      	ldrb	r0, [r1, #4]
10053a66:	1d49      	adds	r1, r1, #5
10053a68:	f7fe f9a3 	bl	10051db2 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg>
10053a6c:	4809      	ldr	r0, [pc, #36]	@ (10053a94 <__arm_cp.28_0>)
10053a6e:	6801      	ldr	r1, [r0, #0]
10053a70:	203d      	movs	r0, #61	@ 0x3d
10053a72:	5c0a      	ldrb	r2, [r1, r0]
10053a74:	2000      	movs	r0, #0
10053a76:	0692      	lsls	r2, r2, #26
10053a78:	d50a      	bpl.n	10053a90 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
10053a7a:	313d      	adds	r1, #61	@ 0x3d
10053a7c:	7a89      	ldrb	r1, [r1, #10]
10053a7e:	07c9      	lsls	r1, r1, #31
10053a80:	d006      	beq.n	10053a90 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
10053a82:	201b      	movs	r0, #27
10053a84:	70e0      	strb	r0, [r4, #3]
10053a86:	78a0      	ldrb	r0, [r4, #2]
10053a88:	21bf      	movs	r1, #191	@ 0xbf
10053a8a:	4001      	ands	r1, r0
10053a8c:	70a1      	strb	r1, [r4, #2]
10053a8e:	2084      	movs	r0, #132	@ 0x84
10053a90:	bd10      	pop	{r4, pc}
10053a92:	46c0      	nop			@ (mov r8, r8)

10053a94 <__arm_cp.28_0>:
10053a94:	20001174 	.word	0x20001174

10053a98 <hci_le_advertising_report_event_int_cb_ucfg_weak>:
10053a98:	2000      	movs	r0, #0
10053a9a:	4770      	bx	lr

10053a9c <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
10053a9c:	2000      	movs	r0, #0
10053a9e:	4770      	bx	lr

10053aa0 <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
10053aa0:	2000      	movs	r0, #0
10053aa2:	4770      	bx	lr

10053aa4 <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
10053aa4:	2000      	movs	r0, #0
10053aa6:	4770      	bx	lr

10053aa8 <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
10053aa8:	2000      	movs	r0, #0
10053aaa:	4770      	bx	lr

10053aac <hci_read_remote_version_information_complete_event_copy>:
10053aac:	7101      	strb	r1, [r0, #4]
10053aae:	2300      	movs	r3, #0
10053ab0:	70c3      	strb	r3, [r0, #3]
10053ab2:	0a09      	lsrs	r1, r1, #8
10053ab4:	7141      	strb	r1, [r0, #5]
10053ab6:	7811      	ldrb	r1, [r2, #0]
10053ab8:	7181      	strb	r1, [r0, #6]
10053aba:	7851      	ldrb	r1, [r2, #1]
10053abc:	7893      	ldrb	r3, [r2, #2]
10053abe:	7203      	strb	r3, [r0, #8]
10053ac0:	71c1      	strb	r1, [r0, #7]
10053ac2:	78d1      	ldrb	r1, [r2, #3]
10053ac4:	7912      	ldrb	r2, [r2, #4]
10053ac6:	7282      	strb	r2, [r0, #10]
10053ac8:	7241      	strb	r1, [r0, #9]
10053aca:	4770      	bx	lr

10053acc <hci_number_of_completed_packets_event_copy>:
10053acc:	2200      	movs	r2, #0
10053ace:	7102      	strb	r2, [r0, #4]
10053ad0:	2201      	movs	r2, #1
10053ad2:	70c2      	strb	r2, [r0, #3]
10053ad4:	7041      	strb	r1, [r0, #1]
10053ad6:	7002      	strb	r2, [r0, #0]
10053ad8:	0a09      	lsrs	r1, r1, #8
10053ada:	7081      	strb	r1, [r0, #2]
10053adc:	4770      	bx	lr

10053ade <aci_gap_proc_complete_event_copy>:
10053ade:	b510      	push	{r4, lr}
10053ae0:	7813      	ldrb	r3, [r2, #0]
10053ae2:	7183      	strb	r3, [r0, #6]
10053ae4:	7853      	ldrb	r3, [r2, #1]
10053ae6:	1e8c      	subs	r4, r1, #2
10053ae8:	7204      	strb	r4, [r0, #8]
10053aea:	71c3      	strb	r3, [r0, #7]
10053aec:	3009      	adds	r0, #9
10053aee:	1c91      	adds	r1, r2, #2
10053af0:	b2e2      	uxtb	r2, r4
10053af2:	f7f2 f9c1 	bl	10045e78 <BLEPLAT_MemCpy>
10053af6:	bd10      	pop	{r4, pc}

10053af8 <aci_l2cap_connection_update_req_event_copy>:
10053af8:	b5f0      	push	{r4, r5, r6, r7, lr}
10053afa:	b085      	sub	sp, #20
10053afc:	4617      	mov	r7, r2
10053afe:	9103      	str	r1, [sp, #12]
10053b00:	4604      	mov	r4, r0
10053b02:	6850      	ldr	r0, [r2, #4]
10053b04:	7a40      	ldrb	r0, [r0, #9]
10053b06:	9004      	str	r0, [sp, #16]
10053b08:	2106      	movs	r1, #6
10053b0a:	4d16      	ldr	r5, [pc, #88]	@ (10053b64 <__arm_cp.42_0>)
10053b0c:	4610      	mov	r0, r2
10053b0e:	47a8      	blx	r5
10053b10:	9002      	str	r0, [sp, #8]
10053b12:	2108      	movs	r1, #8
10053b14:	4638      	mov	r0, r7
10053b16:	47a8      	blx	r5
10053b18:	9001      	str	r0, [sp, #4]
10053b1a:	210a      	movs	r1, #10
10053b1c:	4638      	mov	r0, r7
10053b1e:	47a8      	blx	r5
10053b20:	4606      	mov	r6, r0
10053b22:	210c      	movs	r1, #12
10053b24:	4638      	mov	r0, r7
10053b26:	47a8      	blx	r5
10053b28:	462a      	mov	r2, r5
10053b2a:	4605      	mov	r5, r0
10053b2c:	210e      	movs	r1, #14
10053b2e:	4638      	mov	r0, r7
10053b30:	4790      	blx	r2
10053b32:	7460      	strb	r0, [r4, #17]
10053b34:	0a29      	lsrs	r1, r5, #8
10053b36:	7421      	strb	r1, [r4, #16]
10053b38:	73e5      	strb	r5, [r4, #15]
10053b3a:	0a31      	lsrs	r1, r6, #8
10053b3c:	73a1      	strb	r1, [r4, #14]
10053b3e:	7366      	strb	r6, [r4, #13]
10053b40:	9a01      	ldr	r2, [sp, #4]
10053b42:	0a11      	lsrs	r1, r2, #8
10053b44:	7321      	strb	r1, [r4, #12]
10053b46:	72e2      	strb	r2, [r4, #11]
10053b48:	9a02      	ldr	r2, [sp, #8]
10053b4a:	0a11      	lsrs	r1, r2, #8
10053b4c:	72a1      	strb	r1, [r4, #10]
10053b4e:	7262      	strb	r2, [r4, #9]
10053b50:	9a03      	ldr	r2, [sp, #12]
10053b52:	0a11      	lsrs	r1, r2, #8
10053b54:	71e1      	strb	r1, [r4, #7]
10053b56:	71a2      	strb	r2, [r4, #6]
10053b58:	9904      	ldr	r1, [sp, #16]
10053b5a:	7221      	strb	r1, [r4, #8]
10053b5c:	0a00      	lsrs	r0, r0, #8
10053b5e:	74a0      	strb	r0, [r4, #18]
10053b60:	b005      	add	sp, #20
10053b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

10053b64 <__arm_cp.42_0>:
10053b64:	10053107 	.word	0x10053107

10053b68 <ACL_pkt_read_8b>:
10053b68:	b51c      	push	{r2, r3, r4, lr}
10053b6a:	291f      	cmp	r1, #31
10053b6c:	d803      	bhi.n	10053b76 <ACL_pkt_read_8b+0xe>
10053b6e:	aa01      	add	r2, sp, #4
10053b70:	8011      	strh	r1, [r2, #0]
10053b72:	6840      	ldr	r0, [r0, #4]
10053b74:	e005      	b.n	10053b82 <ACL_pkt_read_8b+0x1a>
10053b76:	6840      	ldr	r0, [r0, #4]
10053b78:	ac01      	add	r4, sp, #4
10053b7a:	4622      	mov	r2, r4
10053b7c:	f00b fa85 	bl	1005f08a <Mem_Buff_get_buff_off>
10053b80:	8821      	ldrh	r1, [r4, #0]
10053b82:	1840      	adds	r0, r0, r1
10053b84:	7900      	ldrb	r0, [r0, #4]
10053b86:	bd1c      	pop	{r2, r3, r4, pc}

10053b88 <aci_l2cap_command_reject_event_copy>:
10053b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053b8a:	4615      	mov	r5, r2
10053b8c:	460e      	mov	r6, r1
10053b8e:	4604      	mov	r4, r0
10053b90:	6850      	ldr	r0, [r2, #4]
10053b92:	7a40      	ldrb	r0, [r0, #9]
10053b94:	9000      	str	r0, [sp, #0]
10053b96:	2106      	movs	r1, #6
10053b98:	4610      	mov	r0, r2
10053b9a:	f7ff fab4 	bl	10053106 <ACL_pkt_read_16b>
10053b9e:	4607      	mov	r7, r0
10053ba0:	2108      	movs	r1, #8
10053ba2:	4628      	mov	r0, r5
10053ba4:	f7ff faaf 	bl	10053106 <ACL_pkt_read_16b>
10053ba8:	1eb9      	subs	r1, r7, #2
10053baa:	72e1      	strb	r1, [r4, #11]
10053bac:	7260      	strb	r0, [r4, #9]
10053bae:	9a00      	ldr	r2, [sp, #0]
10053bb0:	7222      	strb	r2, [r4, #8]
10053bb2:	0a32      	lsrs	r2, r6, #8
10053bb4:	71e2      	strb	r2, [r4, #7]
10053bb6:	71a6      	strb	r6, [r4, #6]
10053bb8:	0a00      	lsrs	r0, r0, #8
10053bba:	72a0      	strb	r0, [r4, #10]
10053bbc:	b2ca      	uxtb	r2, r1
10053bbe:	89a8      	ldrh	r0, [r5, #12]
10053bc0:	340c      	adds	r4, #12
10053bc2:	1d80      	adds	r0, r0, #6
10053bc4:	b281      	uxth	r1, r0
10053bc6:	4628      	mov	r0, r5
10053bc8:	4623      	mov	r3, r4
10053bca:	f7ff fa93 	bl	100530f4 <ACL_pkt_read>
10053bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10053bd0 <aci_att_clt_find_info_resp_event_copy>:
10053bd0:	b570      	push	{r4, r5, r6, lr}
10053bd2:	461c      	mov	r4, r3
10053bd4:	4605      	mov	r5, r0
10053bd6:	885e      	ldrh	r6, [r3, #2]
10053bd8:	0a10      	lsrs	r0, r2, #8
10053bda:	70e8      	strb	r0, [r5, #3]
10053bdc:	70aa      	strb	r2, [r5, #2]
10053bde:	0a08      	lsrs	r0, r1, #8
10053be0:	7068      	strb	r0, [r5, #1]
10053be2:	7029      	strb	r1, [r5, #0]
10053be4:	8998      	ldrh	r0, [r3, #12]
10053be6:	1c40      	adds	r0, r0, #1
10053be8:	b281      	uxth	r1, r0
10053bea:	4618      	mov	r0, r3
10053bec:	f7ff ffbc 	bl	10053b68 <ACL_pkt_read_8b>
10053bf0:	1eb1      	subs	r1, r6, #2
10053bf2:	0a0a      	lsrs	r2, r1, #8
10053bf4:	71aa      	strb	r2, [r5, #6]
10053bf6:	7169      	strb	r1, [r5, #5]
10053bf8:	7128      	strb	r0, [r5, #4]
10053bfa:	89a0      	ldrh	r0, [r4, #12]
10053bfc:	1deb      	adds	r3, r5, #7
10053bfe:	b28a      	uxth	r2, r1
10053c00:	1c80      	adds	r0, r0, #2
10053c02:	b281      	uxth	r1, r0
10053c04:	4620      	mov	r0, r4
10053c06:	f7ff fa75 	bl	100530f4 <ACL_pkt_read>
10053c0a:	bd70      	pop	{r4, r5, r6, pc}

10053c0c <aci_att_clt_find_by_type_value_resp_event_copy>:
10053c0c:	b5b0      	push	{r4, r5, r7, lr}
10053c0e:	461c      	mov	r4, r3
10053c10:	885b      	ldrh	r3, [r3, #2]
10053c12:	0a15      	lsrs	r5, r2, #8
10053c14:	70c5      	strb	r5, [r0, #3]
10053c16:	7082      	strb	r2, [r0, #2]
10053c18:	0a0a      	lsrs	r2, r1, #8
10053c1a:	7042      	strb	r2, [r0, #1]
10053c1c:	7001      	strb	r1, [r0, #0]
10053c1e:	1e59      	subs	r1, r3, #1
10053c20:	088a      	lsrs	r2, r1, #2
10053c22:	7102      	strb	r2, [r0, #4]
10053c24:	89a5      	ldrh	r5, [r4, #12]
10053c26:	1d43      	adds	r3, r0, #5
10053c28:	b28a      	uxth	r2, r1
10053c2a:	1c68      	adds	r0, r5, #1
10053c2c:	b281      	uxth	r1, r0
10053c2e:	4620      	mov	r0, r4
10053c30:	f7ff fa60 	bl	100530f4 <ACL_pkt_read>
10053c34:	bdb0      	pop	{r4, r5, r7, pc}

10053c36 <aci_att_clt_read_by_type_resp_event_copy>:
10053c36:	b570      	push	{r4, r5, r6, lr}
10053c38:	461c      	mov	r4, r3
10053c3a:	4605      	mov	r5, r0
10053c3c:	885e      	ldrh	r6, [r3, #2]
10053c3e:	0a10      	lsrs	r0, r2, #8
10053c40:	70e8      	strb	r0, [r5, #3]
10053c42:	70aa      	strb	r2, [r5, #2]
10053c44:	0a08      	lsrs	r0, r1, #8
10053c46:	7068      	strb	r0, [r5, #1]
10053c48:	7029      	strb	r1, [r5, #0]
10053c4a:	8998      	ldrh	r0, [r3, #12]
10053c4c:	1c40      	adds	r0, r0, #1
10053c4e:	b281      	uxth	r1, r0
10053c50:	4618      	mov	r0, r3
10053c52:	f7ff ff89 	bl	10053b68 <ACL_pkt_read_8b>
10053c56:	1eb1      	subs	r1, r6, #2
10053c58:	0a0a      	lsrs	r2, r1, #8
10053c5a:	71aa      	strb	r2, [r5, #6]
10053c5c:	7169      	strb	r1, [r5, #5]
10053c5e:	7128      	strb	r0, [r5, #4]
10053c60:	89a0      	ldrh	r0, [r4, #12]
10053c62:	1deb      	adds	r3, r5, #7
10053c64:	b28a      	uxth	r2, r1
10053c66:	1c80      	adds	r0, r0, #2
10053c68:	b281      	uxth	r1, r0
10053c6a:	4620      	mov	r0, r4
10053c6c:	f7ff fa42 	bl	100530f4 <ACL_pkt_read>
10053c70:	bd70      	pop	{r4, r5, r6, pc}

10053c72 <aci_att_clt_read_resp_event_copy>:
10053c72:	b5b0      	push	{r4, r5, r7, lr}
10053c74:	461c      	mov	r4, r3
10053c76:	885b      	ldrh	r3, [r3, #2]
10053c78:	0a15      	lsrs	r5, r2, #8
10053c7a:	70c5      	strb	r5, [r0, #3]
10053c7c:	7082      	strb	r2, [r0, #2]
10053c7e:	0a0a      	lsrs	r2, r1, #8
10053c80:	7042      	strb	r2, [r0, #1]
10053c82:	7001      	strb	r1, [r0, #0]
10053c84:	1e59      	subs	r1, r3, #1
10053c86:	7101      	strb	r1, [r0, #4]
10053c88:	0a0a      	lsrs	r2, r1, #8
10053c8a:	7142      	strb	r2, [r0, #5]
10053c8c:	89a5      	ldrh	r5, [r4, #12]
10053c8e:	1d83      	adds	r3, r0, #6
10053c90:	b28a      	uxth	r2, r1
10053c92:	1c68      	adds	r0, r5, #1
10053c94:	b281      	uxth	r1, r0
10053c96:	4620      	mov	r0, r4
10053c98:	f7ff fa2c 	bl	100530f4 <ACL_pkt_read>
10053c9c:	bdb0      	pop	{r4, r5, r7, pc}

10053c9e <aci_att_clt_read_blob_resp_event_copy>:
10053c9e:	b5b0      	push	{r4, r5, r7, lr}
10053ca0:	461c      	mov	r4, r3
10053ca2:	885b      	ldrh	r3, [r3, #2]
10053ca4:	0a15      	lsrs	r5, r2, #8
10053ca6:	70c5      	strb	r5, [r0, #3]
10053ca8:	7082      	strb	r2, [r0, #2]
10053caa:	0a0a      	lsrs	r2, r1, #8
10053cac:	7042      	strb	r2, [r0, #1]
10053cae:	7001      	strb	r1, [r0, #0]
10053cb0:	1e59      	subs	r1, r3, #1
10053cb2:	7101      	strb	r1, [r0, #4]
10053cb4:	0a0a      	lsrs	r2, r1, #8
10053cb6:	7142      	strb	r2, [r0, #5]
10053cb8:	89a5      	ldrh	r5, [r4, #12]
10053cba:	1d83      	adds	r3, r0, #6
10053cbc:	b28a      	uxth	r2, r1
10053cbe:	1c68      	adds	r0, r5, #1
10053cc0:	b281      	uxth	r1, r0
10053cc2:	4620      	mov	r0, r4
10053cc4:	f7ff fa16 	bl	100530f4 <ACL_pkt_read>
10053cc8:	bdb0      	pop	{r4, r5, r7, pc}

10053cca <aci_att_clt_read_multiple_resp_event_copy>:
10053cca:	b5b0      	push	{r4, r5, r7, lr}
10053ccc:	461c      	mov	r4, r3
10053cce:	885b      	ldrh	r3, [r3, #2]
10053cd0:	0a15      	lsrs	r5, r2, #8
10053cd2:	70c5      	strb	r5, [r0, #3]
10053cd4:	7082      	strb	r2, [r0, #2]
10053cd6:	0a0a      	lsrs	r2, r1, #8
10053cd8:	7042      	strb	r2, [r0, #1]
10053cda:	7001      	strb	r1, [r0, #0]
10053cdc:	1e59      	subs	r1, r3, #1
10053cde:	7101      	strb	r1, [r0, #4]
10053ce0:	0a0a      	lsrs	r2, r1, #8
10053ce2:	7142      	strb	r2, [r0, #5]
10053ce4:	89a5      	ldrh	r5, [r4, #12]
10053ce6:	1d83      	adds	r3, r0, #6
10053ce8:	b28a      	uxth	r2, r1
10053cea:	1c68      	adds	r0, r5, #1
10053cec:	b281      	uxth	r1, r0
10053cee:	4620      	mov	r0, r4
10053cf0:	f7ff fa00 	bl	100530f4 <ACL_pkt_read>
10053cf4:	bdb0      	pop	{r4, r5, r7, pc}

10053cf6 <aci_att_clt_read_by_group_type_resp_event_copy>:
10053cf6:	b570      	push	{r4, r5, r6, lr}
10053cf8:	461c      	mov	r4, r3
10053cfa:	4605      	mov	r5, r0
10053cfc:	885e      	ldrh	r6, [r3, #2]
10053cfe:	0a10      	lsrs	r0, r2, #8
10053d00:	70e8      	strb	r0, [r5, #3]
10053d02:	70aa      	strb	r2, [r5, #2]
10053d04:	0a08      	lsrs	r0, r1, #8
10053d06:	7068      	strb	r0, [r5, #1]
10053d08:	7029      	strb	r1, [r5, #0]
10053d0a:	8998      	ldrh	r0, [r3, #12]
10053d0c:	1c40      	adds	r0, r0, #1
10053d0e:	b281      	uxth	r1, r0
10053d10:	4618      	mov	r0, r3
10053d12:	f7ff ff29 	bl	10053b68 <ACL_pkt_read_8b>
10053d16:	1eb1      	subs	r1, r6, #2
10053d18:	0a0a      	lsrs	r2, r1, #8
10053d1a:	71aa      	strb	r2, [r5, #6]
10053d1c:	7169      	strb	r1, [r5, #5]
10053d1e:	7128      	strb	r0, [r5, #4]
10053d20:	89a0      	ldrh	r0, [r4, #12]
10053d22:	1deb      	adds	r3, r5, #7
10053d24:	b28a      	uxth	r2, r1
10053d26:	1c80      	adds	r0, r0, #2
10053d28:	b281      	uxth	r1, r0
10053d2a:	4620      	mov	r0, r4
10053d2c:	f7ff f9e2 	bl	100530f4 <ACL_pkt_read>
10053d30:	bd70      	pop	{r4, r5, r6, pc}

10053d32 <aci_att_clt_prepare_write_resp_event_copy>:
10053d32:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10053d34:	461c      	mov	r4, r3
10053d36:	4617      	mov	r7, r2
10053d38:	9102      	str	r1, [sp, #8]
10053d3a:	4605      	mov	r5, r0
10053d3c:	8858      	ldrh	r0, [r3, #2]
10053d3e:	9001      	str	r0, [sp, #4]
10053d40:	8998      	ldrh	r0, [r3, #12]
10053d42:	1c40      	adds	r0, r0, #1
10053d44:	b281      	uxth	r1, r0
10053d46:	4618      	mov	r0, r3
10053d48:	f7ff f9dd 	bl	10053106 <ACL_pkt_read_16b>
10053d4c:	4606      	mov	r6, r0
10053d4e:	89a0      	ldrh	r0, [r4, #12]
10053d50:	1cc0      	adds	r0, r0, #3
10053d52:	b281      	uxth	r1, r0
10053d54:	4620      	mov	r0, r4
10053d56:	f7ff f9d6 	bl	10053106 <ACL_pkt_read_16b>
10053d5a:	9901      	ldr	r1, [sp, #4]
10053d5c:	1f49      	subs	r1, r1, #5
10053d5e:	0a0a      	lsrs	r2, r1, #8
10053d60:	726a      	strb	r2, [r5, #9]
10053d62:	7229      	strb	r1, [r5, #8]
10053d64:	71a8      	strb	r0, [r5, #6]
10053d66:	0a32      	lsrs	r2, r6, #8
10053d68:	716a      	strb	r2, [r5, #5]
10053d6a:	712e      	strb	r6, [r5, #4]
10053d6c:	0a3a      	lsrs	r2, r7, #8
10053d6e:	70ea      	strb	r2, [r5, #3]
10053d70:	70af      	strb	r7, [r5, #2]
10053d72:	9b02      	ldr	r3, [sp, #8]
10053d74:	0a1a      	lsrs	r2, r3, #8
10053d76:	706a      	strb	r2, [r5, #1]
10053d78:	702b      	strb	r3, [r5, #0]
10053d7a:	0a00      	lsrs	r0, r0, #8
10053d7c:	71e8      	strb	r0, [r5, #7]
10053d7e:	89a0      	ldrh	r0, [r4, #12]
10053d80:	350a      	adds	r5, #10
10053d82:	b28a      	uxth	r2, r1
10053d84:	1d40      	adds	r0, r0, #5
10053d86:	b281      	uxth	r1, r0
10053d88:	4620      	mov	r0, r4
10053d8a:	462b      	mov	r3, r5
10053d8c:	f7ff f9b2 	bl	100530f4 <ACL_pkt_read>
10053d90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10053d92 <aci_gatt_clt_indication_event_copy>:
10053d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053d94:	461c      	mov	r4, r3
10053d96:	4617      	mov	r7, r2
10053d98:	460e      	mov	r6, r1
10053d9a:	4605      	mov	r5, r0
10053d9c:	8858      	ldrh	r0, [r3, #2]
10053d9e:	9000      	str	r0, [sp, #0]
10053da0:	8998      	ldrh	r0, [r3, #12]
10053da2:	1c40      	adds	r0, r0, #1
10053da4:	b281      	uxth	r1, r0
10053da6:	4618      	mov	r0, r3
10053da8:	f7ff f9ad 	bl	10053106 <ACL_pkt_read_16b>
10053dac:	9900      	ldr	r1, [sp, #0]
10053dae:	1ec9      	subs	r1, r1, #3
10053db0:	0a0a      	lsrs	r2, r1, #8
10053db2:	71ea      	strb	r2, [r5, #7]
10053db4:	71a9      	strb	r1, [r5, #6]
10053db6:	7128      	strb	r0, [r5, #4]
10053db8:	0a3a      	lsrs	r2, r7, #8
10053dba:	70ea      	strb	r2, [r5, #3]
10053dbc:	70af      	strb	r7, [r5, #2]
10053dbe:	0a32      	lsrs	r2, r6, #8
10053dc0:	706a      	strb	r2, [r5, #1]
10053dc2:	702e      	strb	r6, [r5, #0]
10053dc4:	0a00      	lsrs	r0, r0, #8
10053dc6:	7168      	strb	r0, [r5, #5]
10053dc8:	89a0      	ldrh	r0, [r4, #12]
10053dca:	3508      	adds	r5, #8
10053dcc:	b28a      	uxth	r2, r1
10053dce:	1cc0      	adds	r0, r0, #3
10053dd0:	b281      	uxth	r1, r0
10053dd2:	4620      	mov	r0, r4
10053dd4:	462b      	mov	r3, r5
10053dd6:	f7ff f98d 	bl	100530f4 <ACL_pkt_read>
10053dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10053ddc <aci_gatt_clt_notification_event_copy>:
10053ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10053dde:	461c      	mov	r4, r3
10053de0:	4617      	mov	r7, r2
10053de2:	460e      	mov	r6, r1
10053de4:	4605      	mov	r5, r0
10053de6:	8858      	ldrh	r0, [r3, #2]
10053de8:	9000      	str	r0, [sp, #0]
10053dea:	8998      	ldrh	r0, [r3, #12]
10053dec:	1c40      	adds	r0, r0, #1
10053dee:	b281      	uxth	r1, r0
10053df0:	4618      	mov	r0, r3
10053df2:	f7ff f988 	bl	10053106 <ACL_pkt_read_16b>
10053df6:	9900      	ldr	r1, [sp, #0]
10053df8:	1ec9      	subs	r1, r1, #3
10053dfa:	0a0a      	lsrs	r2, r1, #8
10053dfc:	71ea      	strb	r2, [r5, #7]
10053dfe:	71a9      	strb	r1, [r5, #6]
10053e00:	7128      	strb	r0, [r5, #4]
10053e02:	0a3a      	lsrs	r2, r7, #8
10053e04:	70ea      	strb	r2, [r5, #3]
10053e06:	70af      	strb	r7, [r5, #2]
10053e08:	0a32      	lsrs	r2, r6, #8
10053e0a:	706a      	strb	r2, [r5, #1]
10053e0c:	702e      	strb	r6, [r5, #0]
10053e0e:	0a00      	lsrs	r0, r0, #8
10053e10:	7168      	strb	r0, [r5, #5]
10053e12:	89a0      	ldrh	r0, [r4, #12]
10053e14:	3508      	adds	r5, #8
10053e16:	b28a      	uxth	r2, r1
10053e18:	1cc0      	adds	r0, r0, #3
10053e1a:	b281      	uxth	r1, r0
10053e1c:	4620      	mov	r0, r4
10053e1e:	462b      	mov	r3, r5
10053e20:	f7ff f968 	bl	100530f4 <ACL_pkt_read>
10053e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10053e26 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>:
10053e26:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10053e28:	461d      	mov	r5, r3
10053e2a:	4604      	mov	r4, r0
10053e2c:	7202      	strb	r2, [r0, #8]
10053e2e:	7181      	strb	r1, [r0, #6]
10053e30:	0a10      	lsrs	r0, r2, #8
10053e32:	7260      	strb	r0, [r4, #9]
10053e34:	0a08      	lsrs	r0, r1, #8
10053e36:	71e0      	strb	r0, [r4, #7]
10053e38:	9e07      	ldr	r6, [sp, #28]
10053e3a:	89b0      	ldrh	r0, [r6, #12]
10053e3c:	18c0      	adds	r0, r0, r3
10053e3e:	b281      	uxth	r1, r0
10053e40:	2202      	movs	r2, #2
10053e42:	ab01      	add	r3, sp, #4
10053e44:	4630      	mov	r0, r6
10053e46:	f7ff f955 	bl	100530f4 <ACL_pkt_read>
10053e4a:	9806      	ldr	r0, [sp, #24]
10053e4c:	1e80      	subs	r0, r0, #2
10053e4e:	7320      	strb	r0, [r4, #12]
10053e50:	9901      	ldr	r1, [sp, #4]
10053e52:	72a1      	strb	r1, [r4, #10]
10053e54:	0a09      	lsrs	r1, r1, #8
10053e56:	72e1      	strb	r1, [r4, #11]
10053e58:	89b1      	ldrh	r1, [r6, #12]
10053e5a:	1869      	adds	r1, r5, r1
10053e5c:	1c89      	adds	r1, r1, #2
10053e5e:	b289      	uxth	r1, r1
10053e60:	340d      	adds	r4, #13
10053e62:	b2c2      	uxtb	r2, r0
10053e64:	4630      	mov	r0, r6
10053e66:	4623      	mov	r3, r4
10053e68:	f7ff f944 	bl	100530f4 <ACL_pkt_read>
10053e6c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10053e6e <aci_gatt_srv_write_event_copy>:
10053e6e:	b5b0      	push	{r4, r5, r7, lr}
10053e70:	4615      	mov	r5, r2
10053e72:	4604      	mov	r4, r0
10053e74:	9a05      	ldr	r2, [sp, #20]
10053e76:	71c2      	strb	r2, [r0, #7]
10053e78:	9804      	ldr	r0, [sp, #16]
10053e7a:	7160      	strb	r0, [r4, #5]
10053e7c:	7123      	strb	r3, [r4, #4]
10053e7e:	70a5      	strb	r5, [r4, #2]
10053e80:	7021      	strb	r1, [r4, #0]
10053e82:	0a13      	lsrs	r3, r2, #8
10053e84:	7223      	strb	r3, [r4, #8]
10053e86:	0a00      	lsrs	r0, r0, #8
10053e88:	71a0      	strb	r0, [r4, #6]
10053e8a:	0a28      	lsrs	r0, r5, #8
10053e8c:	70e0      	strb	r0, [r4, #3]
10053e8e:	0a08      	lsrs	r0, r1, #8
10053e90:	7060      	strb	r0, [r4, #1]
10053e92:	9806      	ldr	r0, [sp, #24]
10053e94:	8981      	ldrh	r1, [r0, #12]
10053e96:	3409      	adds	r4, #9
10053e98:	1cc9      	adds	r1, r1, #3
10053e9a:	b289      	uxth	r1, r1
10053e9c:	4623      	mov	r3, r4
10053e9e:	f7ff f929 	bl	100530f4 <ACL_pkt_read>
10053ea2:	bdb0      	pop	{r4, r5, r7, pc}

10053ea4 <aci_att_srv_prepare_write_req_event_copy>:
10053ea4:	b570      	push	{r4, r5, r6, lr}
10053ea6:	4615      	mov	r5, r2
10053ea8:	4604      	mov	r4, r0
10053eaa:	9a05      	ldr	r2, [sp, #20]
10053eac:	7202      	strb	r2, [r0, #8]
10053eae:	9804      	ldr	r0, [sp, #16]
10053eb0:	71a0      	strb	r0, [r4, #6]
10053eb2:	7123      	strb	r3, [r4, #4]
10053eb4:	70a5      	strb	r5, [r4, #2]
10053eb6:	7021      	strb	r1, [r4, #0]
10053eb8:	0a16      	lsrs	r6, r2, #8
10053eba:	7266      	strb	r6, [r4, #9]
10053ebc:	0a00      	lsrs	r0, r0, #8
10053ebe:	71e0      	strb	r0, [r4, #7]
10053ec0:	0a18      	lsrs	r0, r3, #8
10053ec2:	7160      	strb	r0, [r4, #5]
10053ec4:	0a28      	lsrs	r0, r5, #8
10053ec6:	70e0      	strb	r0, [r4, #3]
10053ec8:	0a08      	lsrs	r0, r1, #8
10053eca:	7060      	strb	r0, [r4, #1]
10053ecc:	9806      	ldr	r0, [sp, #24]
10053ece:	8981      	ldrh	r1, [r0, #12]
10053ed0:	340a      	adds	r4, #10
10053ed2:	1d49      	adds	r1, r1, #5
10053ed4:	b289      	uxth	r1, r1
10053ed6:	4623      	mov	r3, r4
10053ed8:	f7ff f90c 	bl	100530f4 <ACL_pkt_read>
10053edc:	bd70      	pop	{r4, r5, r6, pc}

10053ede <aci_gatt_clt_multi_notification_int_event_copy>:
10053ede:	b5b0      	push	{r4, r5, r7, lr}
10053ee0:	461c      	mov	r4, r3
10053ee2:	885b      	ldrh	r3, [r3, #2]
10053ee4:	0a15      	lsrs	r5, r2, #8
10053ee6:	70c5      	strb	r5, [r0, #3]
10053ee8:	7082      	strb	r2, [r0, #2]
10053eea:	0a0a      	lsrs	r2, r1, #8
10053eec:	7042      	strb	r2, [r0, #1]
10053eee:	7001      	strb	r1, [r0, #0]
10053ef0:	1e59      	subs	r1, r3, #1
10053ef2:	7101      	strb	r1, [r0, #4]
10053ef4:	0a0a      	lsrs	r2, r1, #8
10053ef6:	7142      	strb	r2, [r0, #5]
10053ef8:	89a5      	ldrh	r5, [r4, #12]
10053efa:	1d83      	adds	r3, r0, #6
10053efc:	b28a      	uxth	r2, r1
10053efe:	1c68      	adds	r0, r5, #1
10053f00:	b281      	uxth	r1, r0
10053f02:	4620      	mov	r0, r4
10053f04:	f7ff f8f6 	bl	100530f4 <ACL_pkt_read>
10053f08:	bdb0      	pop	{r4, r5, r7, pc}

10053f0a <aci_att_clt_read_multiple_var_len_resp_event_copy>:
10053f0a:	b5b0      	push	{r4, r5, r7, lr}
10053f0c:	461c      	mov	r4, r3
10053f0e:	885b      	ldrh	r3, [r3, #2]
10053f10:	0a15      	lsrs	r5, r2, #8
10053f12:	70c5      	strb	r5, [r0, #3]
10053f14:	7082      	strb	r2, [r0, #2]
10053f16:	0a0a      	lsrs	r2, r1, #8
10053f18:	7042      	strb	r2, [r0, #1]
10053f1a:	7001      	strb	r1, [r0, #0]
10053f1c:	1e59      	subs	r1, r3, #1
10053f1e:	7101      	strb	r1, [r0, #4]
10053f20:	0a0a      	lsrs	r2, r1, #8
10053f22:	7142      	strb	r2, [r0, #5]
10053f24:	89a5      	ldrh	r5, [r4, #12]
10053f26:	1d83      	adds	r3, r0, #6
10053f28:	b28a      	uxth	r2, r1
10053f2a:	1c68      	adds	r0, r5, #1
10053f2c:	b281      	uxth	r1, r0
10053f2e:	4620      	mov	r0, r4
10053f30:	f7ff f8e0 	bl	100530f4 <ACL_pkt_read>
10053f34:	bdb0      	pop	{r4, r5, r7, pc}

10053f36 <hci_rx_acl_data_event_copy>:
10053f36:	b5b0      	push	{r4, r5, r7, lr}
10053f38:	4614      	mov	r4, r2
10053f3a:	9a04      	ldr	r2, [sp, #16]
10053f3c:	70c2      	strb	r2, [r0, #3]
10053f3e:	7041      	strb	r1, [r0, #1]
10053f40:	0a15      	lsrs	r5, r2, #8
10053f42:	7105      	strb	r5, [r0, #4]
10053f44:	250f      	movs	r5, #15
10053f46:	022d      	lsls	r5, r5, #8
10053f48:	400d      	ands	r5, r1
10053f4a:	07a1      	lsls	r1, r4, #30
10053f4c:	0c89      	lsrs	r1, r1, #18
10053f4e:	1949      	adds	r1, r1, r5
10053f50:	039b      	lsls	r3, r3, #14
10053f52:	18c9      	adds	r1, r1, r3
10053f54:	0a09      	lsrs	r1, r1, #8
10053f56:	7081      	strb	r1, [r0, #2]
10053f58:	1d43      	adds	r3, r0, #5
10053f5a:	9805      	ldr	r0, [sp, #20]
10053f5c:	2100      	movs	r1, #0
10053f5e:	f7ff f8c9 	bl	100530f4 <ACL_pkt_read>
10053f62:	bdb0      	pop	{r4, r5, r7, pc}

10053f64 <aci_l2cap_proc_timeout_event_copy>:
10053f64:	7001      	strb	r1, [r0, #0]
10053f66:	2200      	movs	r2, #0
10053f68:	7082      	strb	r2, [r0, #2]
10053f6a:	0a09      	lsrs	r1, r1, #8
10053f6c:	7041      	strb	r1, [r0, #1]
10053f6e:	4770      	bx	lr

10053f70 <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
10053f70:	2000      	movs	r0, #0
10053f72:	4770      	bx	lr

10053f74 <hci_hardware_error_event_cb>:
10053f74:	b5e0      	push	{r5, r6, r7, lr}
10053f76:	aa01      	add	r2, sp, #4
10053f78:	70d0      	strb	r0, [r2, #3]
10053f7a:	2001      	movs	r0, #1
10053f7c:	7090      	strb	r0, [r2, #2]
10053f7e:	2010      	movs	r0, #16
10053f80:	7050      	strb	r0, [r2, #1]
10053f82:	2104      	movs	r1, #4
10053f84:	7011      	strb	r1, [r2, #0]
10053f86:	4610      	mov	r0, r2
10053f88:	f7fd fda0 	bl	10051acc <BLE_STACK_Event>
10053f8c:	bd8c      	pop	{r2, r3, r7, pc}

10053f8e <GAP_enable_disable_scan_ucfg_weak>:
10053f8e:	2000      	movs	r0, #0
10053f90:	4770      	bx	lr

10053f92 <GAP_discover_peer_name_ucfg_weak>:
10053f92:	2000      	movs	r0, #0
10053f94:	4770      	bx	lr
	...

10053f98 <GAP_name_disc_proc_connected_check>:
10053f98:	b51c      	push	{r2, r3, r4, lr}
10053f9a:	4811      	ldr	r0, [pc, #68]	@ (10053fe0 <__arm_cp.18_0>)
10053f9c:	6804      	ldr	r4, [r0, #0]
10053f9e:	f7ff fff8 	bl	10053f92 <GAP_discover_peer_name_ucfg_weak>
10053fa2:	2888      	cmp	r0, #136	@ 0x88
10053fa4:	d007      	beq.n	10053fb6 <GAP_name_disc_proc_connected_check+0x1e>
10053fa6:	280c      	cmp	r0, #12
10053fa8:	d005      	beq.n	10053fb6 <GAP_name_disc_proc_connected_check+0x1e>
10053faa:	345d      	adds	r4, #93	@ 0x5d
10053fac:	2800      	cmp	r0, #0
10053fae:	d108      	bne.n	10053fc2 <GAP_name_disc_proc_connected_check+0x2a>
10053fb0:	2002      	movs	r0, #2
10053fb2:	7060      	strb	r0, [r4, #1]
10053fb4:	bd1c      	pop	{r2, r3, r4, pc}
10053fb6:	2005      	movs	r0, #5
10053fb8:	f00e f870 	bl	1006209c <tsk_notify_idx>
10053fbc:	f7ef ff6f 	bl	10043e9e <BLE_STACK_ProcessRequest>
10053fc0:	bd1c      	pop	{r2, r3, r4, pc}
10053fc2:	2000      	movs	r0, #0
10053fc4:	7060      	strb	r0, [r4, #1]
10053fc6:	7820      	ldrb	r0, [r4, #0]
10053fc8:	217f      	movs	r1, #127	@ 0x7f
10053fca:	4001      	ands	r1, r0
10053fcc:	7021      	strb	r1, [r4, #0]
10053fce:	a901      	add	r1, sp, #4
10053fd0:	2086      	movs	r0, #134	@ 0x86
10053fd2:	7048      	strb	r0, [r1, #1]
10053fd4:	2080      	movs	r0, #128	@ 0x80
10053fd6:	7008      	strb	r0, [r1, #0]
10053fd8:	2002      	movs	r0, #2
10053fda:	f000 f9bf 	bl	1005435c <aci_gap_proc_complete_event_wrapper>
10053fde:	bd1c      	pop	{r2, r3, r4, pc}

10053fe0 <__arm_cp.18_0>:
10053fe0:	20001128 	.word	0x20001128

10053fe4 <GAP_central_connection_complete_handler_ucfg_weak>:
10053fe4:	4770      	bx	lr

10053fe6 <GAP_DiscProcTimeoutcb_ucfg_weak>:
10053fe6:	4770      	bx	lr

10053fe8 <GAP_started_gatt_proc>:
10053fe8:	4907      	ldr	r1, [pc, #28]	@ (10054008 <__arm_cp.28_0>)
10053fea:	6809      	ldr	r1, [r1, #0]
10053fec:	225d      	movs	r2, #93	@ 0x5d
10053fee:	5c8a      	ldrb	r2, [r1, r2]
10053ff0:	2388      	movs	r3, #136	@ 0x88
10053ff2:	421a      	tst	r2, r3
10053ff4:	d004      	beq.n	10054000 <GAP_started_gatt_proc+0x18>
10053ff6:	3172      	adds	r1, #114	@ 0x72
10053ff8:	8809      	ldrh	r1, [r1, #0]
10053ffa:	4041      	eors	r1, r0
10053ffc:	0508      	lsls	r0, r1, #20
10053ffe:	d001      	beq.n	10054004 <GAP_started_gatt_proc+0x1c>
10054000:	2000      	movs	r0, #0
10054002:	4770      	bx	lr
10054004:	2001      	movs	r0, #1
10054006:	4770      	bx	lr

10054008 <__arm_cp.28_0>:
10054008:	20001128 	.word	0x20001128

1005400c <gap_timers_callback_wrapper>:
1005400c:	b580      	push	{r7, lr}
1005400e:	6940      	ldr	r0, [r0, #20]
10054010:	4901      	ldr	r1, [pc, #4]	@ (10054018 <__arm_cp.0_0>)
10054012:	f00e f97a 	bl	1006230a <cst_sharedCallback>
10054016:	bd80      	pop	{r7, pc}

10054018 <__arm_cp.0_0>:
10054018:	1005401d 	.word	0x1005401d

1005401c <gap_timers_callback>:
1005401c:	b580      	push	{r7, lr}
1005401e:	2802      	cmp	r0, #2
10054020:	d007      	beq.n	10054032 <gap_timers_callback+0x16>
10054022:	2801      	cmp	r0, #1
10054024:	d009      	beq.n	1005403a <gap_timers_callback+0x1e>
10054026:	2800      	cmp	r0, #0
10054028:	d106      	bne.n	10054038 <gap_timers_callback+0x1c>
1005402a:	2000      	movs	r0, #0
1005402c:	f7fd fdc9 	bl	10051bc2 <GAP_LimDiscTimeoutcb_ucfg>
10054030:	bd80      	pop	{r7, pc}
10054032:	2000      	movs	r0, #0
10054034:	f7ff ffd7 	bl	10053fe6 <GAP_DiscProcTimeoutcb_ucfg_weak>
10054038:	bd80      	pop	{r7, pc}
1005403a:	2000      	movs	r0, #0
1005403c:	f000 f802 	bl	10054044 <GAP_PrivateAddrTimercb>
10054040:	bd80      	pop	{r7, pc}
	...

10054044 <GAP_PrivateAddrTimercb>:
10054044:	b5f0      	push	{r4, r5, r6, r7, lr}
10054046:	b087      	sub	sp, #28
10054048:	4831      	ldr	r0, [pc, #196]	@ (10054110 <__arm_cp.2_0>)
1005404a:	6804      	ldr	r4, [r0, #0]
1005404c:	a906      	add	r1, sp, #24
1005404e:	9104      	str	r1, [sp, #16]
10054050:	2000      	movs	r0, #0
10054052:	9001      	str	r0, [sp, #4]
10054054:	7008      	strb	r0, [r1, #0]
10054056:	ae05      	add	r6, sp, #20
10054058:	2001      	movs	r0, #1
1005405a:	7030      	strb	r0, [r6, #0]
1005405c:	f000 f950 	bl	10054300 <GAP_reset_privacy_timer>
10054060:	205d      	movs	r0, #93	@ 0x5d
10054062:	9403      	str	r4, [sp, #12]
10054064:	5c27      	ldrb	r7, [r4, r0]
10054066:	1e78      	subs	r0, r7, #1
10054068:	463d      	mov	r5, r7
1005406a:	4185      	sbcs	r5, r0
1005406c:	2020      	movs	r0, #32
1005406e:	4038      	ands	r0, r7
10054070:	4244      	negs	r4, r0
10054072:	9002      	str	r0, [sp, #8]
10054074:	4144      	adcs	r4, r0
10054076:	9804      	ldr	r0, [sp, #16]
10054078:	4631      	mov	r1, r6
1005407a:	f000 fd51 	bl	10054b20 <GAP_check_adv_status>
1005407e:	2f00      	cmp	r7, #0
10054080:	d101      	bne.n	10054086 <GAP_PrivateAddrTimercb+0x42>
10054082:	2801      	cmp	r0, #1
10054084:	d13e      	bne.n	10054104 <GAP_PrivateAddrTimercb+0xc0>
10054086:	402c      	ands	r4, r5
10054088:	d138      	bne.n	100540fc <GAP_PrivateAddrTimercb+0xb8>
1005408a:	a805      	add	r0, sp, #20
1005408c:	7800      	ldrb	r0, [r0, #0]
1005408e:	2800      	cmp	r0, #0
10054090:	d034      	beq.n	100540fc <GAP_PrivateAddrTimercb+0xb8>
10054092:	9c03      	ldr	r4, [sp, #12]
10054094:	4620      	mov	r0, r4
10054096:	305d      	adds	r0, #93	@ 0x5d
10054098:	7bc0      	ldrb	r0, [r0, #15]
1005409a:	2800      	cmp	r0, #0
1005409c:	d034      	beq.n	10054108 <GAP_PrivateAddrTimercb+0xc4>
1005409e:	3428      	adds	r4, #40	@ 0x28
100540a0:	9d02      	ldr	r5, [sp, #8]
100540a2:	2d00      	cmp	r5, #0
100540a4:	d003      	beq.n	100540ae <GAP_PrivateAddrTimercb+0x6a>
100540a6:	7821      	ldrb	r1, [r4, #0]
100540a8:	2000      	movs	r0, #0
100540aa:	f7ff ff70 	bl	10053f8e <GAP_enable_disable_scan_ucfg_weak>
100540ae:	a806      	add	r0, sp, #24
100540b0:	7800      	ldrb	r0, [r0, #0]
100540b2:	2801      	cmp	r0, #1
100540b4:	d102      	bne.n	100540bc <GAP_PrivateAddrTimercb+0x78>
100540b6:	2000      	movs	r0, #0
100540b8:	f000 fcf6 	bl	10054aa8 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
100540bc:	f000 fafc 	bl	100546b8 <GAP_generate_new_rpa>
100540c0:	2800      	cmp	r0, #0
100540c2:	d104      	bne.n	100540ce <GAP_PrivateAddrTimercb+0x8a>
100540c4:	2000      	movs	r0, #0
100540c6:	2101      	movs	r1, #1
100540c8:	f000 face 	bl	10054668 <GAP_start_privacy_timer>
100540cc:	9001      	str	r0, [sp, #4]
100540ce:	2d00      	cmp	r5, #0
100540d0:	d00a      	beq.n	100540e8 <GAP_PrivateAddrTimercb+0xa4>
100540d2:	7821      	ldrb	r1, [r4, #0]
100540d4:	2001      	movs	r0, #1
100540d6:	f7ff ff5a 	bl	10053f8e <GAP_enable_disable_scan_ucfg_weak>
100540da:	2800      	cmp	r0, #0
100540dc:	d004      	beq.n	100540e8 <GAP_PrivateAddrTimercb+0xa4>
100540de:	9801      	ldr	r0, [sp, #4]
100540e0:	2800      	cmp	r0, #0
100540e2:	d001      	beq.n	100540e8 <GAP_PrivateAddrTimercb+0xa4>
100540e4:	f000 fa2c 	bl	10054540 <GAP_stop_privacy_timer>
100540e8:	a806      	add	r0, sp, #24
100540ea:	7800      	ldrb	r0, [r0, #0]
100540ec:	2801      	cmp	r0, #1
100540ee:	d109      	bne.n	10054104 <GAP_PrivateAddrTimercb+0xc0>
100540f0:	2006      	movs	r0, #6
100540f2:	f00d ffd3 	bl	1006209c <tsk_notify_idx>
100540f6:	f7ef fed2 	bl	10043e9e <BLE_STACK_ProcessRequest>
100540fa:	e003      	b.n	10054104 <GAP_PrivateAddrTimercb+0xc0>
100540fc:	2001      	movs	r0, #1
100540fe:	4601      	mov	r1, r0
10054100:	f000 fab2 	bl	10054668 <GAP_start_privacy_timer>
10054104:	b007      	add	sp, #28
10054106:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054108:	2000      	movs	r0, #0
1005410a:	2101      	movs	r1, #1
1005410c:	e7f8      	b.n	10054100 <GAP_PrivateAddrTimercb+0xbc>
1005410e:	46c0      	nop			@ (mov r8, r8)

10054110 <__arm_cp.2_0>:
10054110:	20001128 	.word	0x20001128

10054114 <GAP_init_context>:
10054114:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10054116:	461f      	mov	r7, r3
10054118:	9201      	str	r2, [sp, #4]
1005411a:	9102      	str	r1, [sp, #8]
1005411c:	4605      	mov	r5, r0
1005411e:	2401      	movs	r4, #1
10054120:	2178      	movs	r1, #120	@ 0x78
10054122:	4620      	mov	r0, r4
10054124:	f00a ff12 	bl	1005ef4c <csmem_mem_0_assign>
10054128:	21e1      	movs	r1, #225	@ 0xe1
1005412a:	0089      	lsls	r1, r1, #2
1005412c:	225a      	movs	r2, #90	@ 0x5a
1005412e:	5281      	strh	r1, [r0, r2]
10054130:	4e24      	ldr	r6, [pc, #144]	@ (100541c4 <__arm_cp.3_0>)
10054132:	6030      	str	r0, [r6, #0]
10054134:	2d01      	cmp	r5, #1
10054136:	d117      	bne.n	10054168 <GAP_init_context+0x54>
10054138:	2001      	movs	r0, #1
1005413a:	2106      	movs	r1, #6
1005413c:	f00a ff06 	bl	1005ef4c <csmem_mem_0_assign>
10054140:	4601      	mov	r1, r0
10054142:	6830      	ldr	r0, [r6, #0]
10054144:	6381      	str	r1, [r0, #56]	@ 0x38
10054146:	2f01      	cmp	r7, #1
10054148:	d10e      	bne.n	10054168 <GAP_init_context+0x54>
1005414a:	2501      	movs	r5, #1
1005414c:	270e      	movs	r7, #14
1005414e:	4628      	mov	r0, r5
10054150:	4639      	mov	r1, r7
10054152:	f00a fefb 	bl	1005ef4c <csmem_mem_0_assign>
10054156:	6831      	ldr	r1, [r6, #0]
10054158:	64c8      	str	r0, [r1, #76]	@ 0x4c
1005415a:	4628      	mov	r0, r5
1005415c:	4639      	mov	r1, r7
1005415e:	f00a fef5 	bl	1005ef4c <csmem_mem_0_assign>
10054162:	4601      	mov	r1, r0
10054164:	6830      	ldr	r0, [r6, #0]
10054166:	6501      	str	r1, [r0, #80]	@ 0x50
10054168:	9902      	ldr	r1, [sp, #8]
1005416a:	2901      	cmp	r1, #1
1005416c:	d10b      	bne.n	10054186 <GAP_init_context+0x72>
1005416e:	9801      	ldr	r0, [sp, #4]
10054170:	2801      	cmp	r0, #1
10054172:	d105      	bne.n	10054180 <GAP_init_context+0x6c>
10054174:	201c      	movs	r0, #28
10054176:	2101      	movs	r1, #1
10054178:	f00a fee8 	bl	1005ef4c <csmem_mem_0_assign>
1005417c:	6831      	ldr	r1, [r6, #0]
1005417e:	62c8      	str	r0, [r1, #44]	@ 0x2c
10054180:	4811      	ldr	r0, [pc, #68]	@ (100541c8 <__arm_cp.3_1>)
10054182:	7e84      	ldrb	r4, [r0, #26]
10054184:	e001      	b.n	1005418a <GAP_init_context+0x76>
10054186:	2100      	movs	r1, #0
10054188:	62c1      	str	r1, [r0, #44]	@ 0x2c
1005418a:	2114      	movs	r1, #20
1005418c:	4620      	mov	r0, r4
1005418e:	f00a fedd 	bl	1005ef4c <csmem_mem_0_assign>
10054192:	6831      	ldr	r1, [r6, #0]
10054194:	6548      	str	r0, [r1, #84]	@ 0x54
10054196:	4c0d      	ldr	r4, [pc, #52]	@ (100541cc <__arm_cp.3_2>)
10054198:	2104      	movs	r1, #4
1005419a:	2201      	movs	r2, #1
1005419c:	4620      	mov	r0, r4
1005419e:	f00a fec3 	bl	1005ef28 <csmem_mem_assign>
100541a2:	6831      	ldr	r1, [r6, #0]
100541a4:	6208      	str	r0, [r1, #32]
100541a6:	2503      	movs	r5, #3
100541a8:	2202      	movs	r2, #2
100541aa:	4620      	mov	r0, r4
100541ac:	4629      	mov	r1, r5
100541ae:	f00a febb 	bl	1005ef28 <csmem_mem_assign>
100541b2:	6831      	ldr	r1, [r6, #0]
100541b4:	6248      	str	r0, [r1, #36]	@ 0x24
100541b6:	4a06      	ldr	r2, [pc, #24]	@ (100541d0 <__arm_cp.3_3>)
100541b8:	2307      	movs	r3, #7
100541ba:	4608      	mov	r0, r1
100541bc:	4629      	mov	r1, r5
100541be:	f00d ffcb 	bl	10062158 <CST_init>
100541c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100541c4 <__arm_cp.3_0>:
100541c4:	20001128 	.word	0x20001128

100541c8 <__arm_cp.3_1>:
100541c8:	20001188 	.word	0x20001188

100541cc <__arm_cp.3_2>:
100541cc:	20001184 	.word	0x20001184

100541d0 <__arm_cp.3_3>:
100541d0:	1005400d 	.word	0x1005400d

100541d4 <GAP_get_default_le_event_mask>:
100541d4:	b5b0      	push	{r4, r5, r7, lr}
100541d6:	4604      	mov	r4, r0
100541d8:	2100      	movs	r1, #0
100541da:	2508      	movs	r5, #8
100541dc:	462a      	mov	r2, r5
100541de:	f7f1 fe5b 	bl	10045e98 <BLEPLAT_MemSet>
100541e2:	7820      	ldrb	r0, [r4, #0]
100541e4:	21df      	movs	r1, #223	@ 0xdf
100541e6:	4301      	orrs	r1, r0
100541e8:	7021      	strb	r1, [r4, #0]
100541ea:	7860      	ldrb	r0, [r4, #1]
100541ec:	2109      	movs	r1, #9
100541ee:	4301      	orrs	r1, r0
100541f0:	7061      	strb	r1, [r4, #1]
100541f2:	78a1      	ldrb	r1, [r4, #2]
100541f4:	4329      	orrs	r1, r5
100541f6:	70a1      	strb	r1, [r4, #2]
100541f8:	4911      	ldr	r1, [pc, #68]	@ (10054240 <__arm_cp.4_0>)
100541fa:	6809      	ldr	r1, [r1, #0]
100541fc:	225c      	movs	r2, #92	@ 0x5c
100541fe:	5c89      	ldrb	r1, [r1, r2]
10054200:	0689      	lsls	r1, r1, #26
10054202:	d502      	bpl.n	1005420a <GAP_get_default_le_event_mask+0x36>
10054204:	210f      	movs	r1, #15
10054206:	4308      	orrs	r0, r1
10054208:	7060      	strb	r0, [r4, #1]
1005420a:	f009 ff2c 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005420e:	2801      	cmp	r0, #1
10054210:	d107      	bne.n	10054222 <GAP_get_default_le_event_mask+0x4e>
10054212:	7860      	ldrb	r0, [r4, #1]
10054214:	2112      	movs	r1, #18
10054216:	4301      	orrs	r1, r0
10054218:	7061      	strb	r1, [r4, #1]
1005421a:	78a0      	ldrb	r0, [r4, #2]
1005421c:	2107      	movs	r1, #7
1005421e:	4301      	orrs	r1, r0
10054220:	70a1      	strb	r1, [r4, #2]
10054222:	f006 fd73 	bl	1005ad0c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10054226:	b2c0      	uxtb	r0, r0
10054228:	2801      	cmp	r0, #1
1005422a:	d107      	bne.n	1005423c <GAP_get_default_le_event_mask+0x68>
1005422c:	7860      	ldrb	r0, [r4, #1]
1005422e:	21e0      	movs	r1, #224	@ 0xe0
10054230:	4301      	orrs	r1, r0
10054232:	7061      	strb	r1, [r4, #1]
10054234:	78a0      	ldrb	r0, [r4, #2]
10054236:	2180      	movs	r1, #128	@ 0x80
10054238:	4301      	orrs	r1, r0
1005423a:	70a1      	strb	r1, [r4, #2]
1005423c:	bdb0      	pop	{r4, r5, r7, pc}
1005423e:	46c0      	nop			@ (mov r8, r8)

10054240 <__arm_cp.4_0>:
10054240:	20001128 	.word	0x20001128

10054244 <gap_extended_adv_scan_supported>:
10054244:	b580      	push	{r7, lr}
10054246:	f009 ff0e 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005424a:	bd80      	pop	{r7, pc}

1005424c <GAP_Init>:
1005424c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005424e:	b085      	sub	sp, #20
10054250:	4605      	mov	r5, r0
10054252:	a804      	add	r0, sp, #16
10054254:	2700      	movs	r7, #0
10054256:	7007      	strb	r7, [r0, #0]
10054258:	2412      	movs	r4, #18
1005425a:	2901      	cmp	r1, #1
1005425c:	d901      	bls.n	10054262 <GAP_Init+0x16>
1005425e:	4620      	mov	r0, r4
10054260:	e048      	b.n	100542f4 <GAP_Init+0xa8>
10054262:	460e      	mov	r6, r1
10054264:	4824      	ldr	r0, [pc, #144]	@ (100542f8 <__arm_cp.7_0>)
10054266:	6800      	ldr	r0, [r0, #0]
10054268:	9000      	str	r0, [sp, #0]
1005426a:	f00e fa73 	bl	10062754 <IDD_Initialize_Device_IDs>
1005426e:	2800      	cmp	r0, #0
10054270:	d140      	bne.n	100542f4 <GAP_Init+0xa8>
10054272:	9900      	ldr	r1, [sp, #0]
10054274:	315c      	adds	r1, #92	@ 0x5c
10054276:	7808      	ldrb	r0, [r1, #0]
10054278:	07c0      	lsls	r0, r0, #31
1005427a:	d111      	bne.n	100542a0 <GAP_Init+0x54>
1005427c:	78c8      	ldrb	r0, [r1, #3]
1005427e:	4330      	orrs	r0, r6
10054280:	460e      	mov	r6, r1
10054282:	70c8      	strb	r0, [r1, #3]
10054284:	a803      	add	r0, sp, #12
10054286:	2107      	movs	r1, #7
10054288:	7001      	strb	r1, [r0, #0]
1005428a:	2d00      	cmp	r5, #0
1005428c:	d012      	beq.n	100542b4 <GAP_Init+0x68>
1005428e:	2d02      	cmp	r5, #2
10054290:	d008      	beq.n	100542a4 <GAP_Init+0x58>
10054292:	2d01      	cmp	r5, #1
10054294:	4620      	mov	r0, r4
10054296:	d12d      	bne.n	100542f4 <GAP_Init+0xa8>
10054298:	a804      	add	r0, sp, #16
1005429a:	2110      	movs	r1, #16
1005429c:	7001      	strb	r1, [r0, #0]
1005429e:	e009      	b.n	100542b4 <GAP_Init+0x68>
100542a0:	200c      	movs	r0, #12
100542a2:	e027      	b.n	100542f4 <GAP_Init+0xa8>
100542a4:	a804      	add	r0, sp, #16
100542a6:	2120      	movs	r1, #32
100542a8:	7001      	strb	r1, [r0, #0]
100542aa:	a903      	add	r1, sp, #12
100542ac:	f000 f9a2 	bl	100545f4 <GAP_enable_controller_privacy_ucfg_weak>
100542b0:	2800      	cmp	r0, #0
100542b2:	d11f      	bne.n	100542f4 <GAP_Init+0xa8>
100542b4:	f000 f9d6 	bl	10054664 <GAP_init_advertising_sets_ucfg_weak>
100542b8:	2800      	cmp	r0, #0
100542ba:	d11b      	bne.n	100542f4 <GAP_Init+0xa8>
100542bc:	9800      	ldr	r0, [sp, #0]
100542be:	3060      	adds	r0, #96	@ 0x60
100542c0:	f000 f9cc 	bl	1005465c <GAP_set_controller_random_address_ucfg_weak>
100542c4:	2800      	cmp	r0, #0
100542c6:	d115      	bne.n	100542f4 <GAP_Init+0xa8>
100542c8:	9804      	ldr	r0, [sp, #16]
100542ca:	2101      	movs	r1, #1
100542cc:	7431      	strb	r1, [r6, #16]
100542ce:	4308      	orrs	r0, r1
100542d0:	7030      	strb	r0, [r6, #0]
100542d2:	f000 f815 	bl	10054300 <GAP_reset_privacy_timer>
100542d6:	ac01      	add	r4, sp, #4
100542d8:	4620      	mov	r0, r4
100542da:	f7ff ff7b 	bl	100541d4 <GAP_get_default_le_event_mask>
100542de:	4620      	mov	r0, r4
100542e0:	f003 faa0 	bl	10057824 <hci_le_set_event_mask>
100542e4:	43f8      	mvns	r0, r7
100542e6:	9001      	str	r0, [sp, #4]
100542e8:	4804      	ldr	r0, [pc, #16]	@ (100542fc <__arm_cp.7_1>)
100542ea:	9002      	str	r0, [sp, #8]
100542ec:	4620      	mov	r0, r4
100542ee:	f003 fa89 	bl	10057804 <hci_set_event_mask>
100542f2:	4638      	mov	r0, r7
100542f4:	b005      	add	sp, #20
100542f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100542f8 <__arm_cp.7_0>:
100542f8:	20001128 	.word	0x20001128

100542fc <__arm_cp.7_1>:
100542fc:	20009fff 	.word	0x20009fff

10054300 <GAP_reset_privacy_timer>:
10054300:	4806      	ldr	r0, [pc, #24]	@ (1005431c <__arm_cp.8_0>)
10054302:	6800      	ldr	r0, [r0, #0]
10054304:	215c      	movs	r1, #92	@ 0x5c
10054306:	5c41      	ldrb	r1, [r0, r1]
10054308:	0689      	lsls	r1, r1, #26
1005430a:	0f89      	lsrs	r1, r1, #30
1005430c:	d004      	beq.n	10054318 <GAP_reset_privacy_timer+0x18>
1005430e:	305c      	adds	r0, #92	@ 0x5c
10054310:	78c1      	ldrb	r1, [r0, #3]
10054312:	2202      	movs	r2, #2
10054314:	430a      	orrs	r2, r1
10054316:	70c2      	strb	r2, [r0, #3]
10054318:	4770      	bx	lr
1005431a:	46c0      	nop			@ (mov r8, r8)

1005431c <__arm_cp.8_0>:
1005431c:	20001128 	.word	0x20001128

10054320 <GAP_internal_evt_handler>:
10054320:	b5b0      	push	{r4, r5, r7, lr}
10054322:	285c      	cmp	r0, #92	@ 0x5c
10054324:	d106      	bne.n	10054334 <GAP_internal_evt_handler+0x14>
10054326:	480c      	ldr	r0, [pc, #48]	@ (10054358 <__arm_cp.12_0>)
10054328:	6804      	ldr	r4, [r0, #0]
1005432a:	345d      	adds	r4, #93	@ 0x5d
1005432c:	2500      	movs	r5, #0
1005432e:	5760      	ldrsb	r0, [r4, r5]
10054330:	2800      	cmp	r0, #0
10054332:	d400      	bmi.n	10054336 <GAP_internal_evt_handler+0x16>
10054334:	bdb0      	pop	{r4, r5, r7, pc}
10054336:	7860      	ldrb	r0, [r4, #1]
10054338:	2802      	cmp	r0, #2
1005433a:	d1fb      	bne.n	10054334 <GAP_internal_evt_handler+0x14>
1005433c:	7055      	strb	r5, [r2, #1]
1005433e:	2080      	movs	r0, #128	@ 0x80
10054340:	7010      	strb	r0, [r2, #0]
10054342:	b2c8      	uxtb	r0, r1
10054344:	4611      	mov	r1, r2
10054346:	f000 f809 	bl	1005435c <aci_gap_proc_complete_event_wrapper>
1005434a:	7065      	strb	r5, [r4, #1]
1005434c:	7820      	ldrb	r0, [r4, #0]
1005434e:	217f      	movs	r1, #127	@ 0x7f
10054350:	4001      	ands	r1, r0
10054352:	7021      	strb	r1, [r4, #0]
10054354:	bdb0      	pop	{r4, r5, r7, pc}
10054356:	46c0      	nop			@ (mov r8, r8)

10054358 <__arm_cp.12_0>:
10054358:	20001128 	.word	0x20001128

1005435c <aci_gap_proc_complete_event_wrapper>:
1005435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005435e:	2900      	cmp	r1, #0
10054360:	d016      	beq.n	10054390 <aci_gap_proc_complete_event_wrapper+0x34>
10054362:	460e      	mov	r6, r1
10054364:	4605      	mov	r5, r0
10054366:	7809      	ldrb	r1, [r1, #0]
10054368:	2400      	movs	r4, #0
1005436a:	07c8      	lsls	r0, r1, #31
1005436c:	4620      	mov	r0, r4
1005436e:	d11f      	bne.n	100543b0 <aci_gap_proc_complete_event_wrapper+0x54>
10054370:	0788      	lsls	r0, r1, #30
10054372:	d40f      	bmi.n	10054394 <aci_gap_proc_complete_event_wrapper+0x38>
10054374:	0748      	lsls	r0, r1, #29
10054376:	d40f      	bmi.n	10054398 <aci_gap_proc_complete_event_wrapper+0x3c>
10054378:	0708      	lsls	r0, r1, #28
1005437a:	d40f      	bmi.n	1005439c <aci_gap_proc_complete_event_wrapper+0x40>
1005437c:	06c8      	lsls	r0, r1, #27
1005437e:	d40f      	bmi.n	100543a0 <aci_gap_proc_complete_event_wrapper+0x44>
10054380:	0688      	lsls	r0, r1, #26
10054382:	d40f      	bmi.n	100543a4 <aci_gap_proc_complete_event_wrapper+0x48>
10054384:	0648      	lsls	r0, r1, #25
10054386:	d40f      	bmi.n	100543a8 <aci_gap_proc_complete_event_wrapper+0x4c>
10054388:	0608      	lsls	r0, r1, #24
1005438a:	d50f      	bpl.n	100543ac <aci_gap_proc_complete_event_wrapper+0x50>
1005438c:	2007      	movs	r0, #7
1005438e:	e00f      	b.n	100543b0 <aci_gap_proc_complete_event_wrapper+0x54>
10054390:	2412      	movs	r4, #18
10054392:	e03c      	b.n	1005440e <aci_gap_proc_complete_event_wrapper+0xb2>
10054394:	2001      	movs	r0, #1
10054396:	e00b      	b.n	100543b0 <aci_gap_proc_complete_event_wrapper+0x54>
10054398:	2002      	movs	r0, #2
1005439a:	e009      	b.n	100543b0 <aci_gap_proc_complete_event_wrapper+0x54>
1005439c:	2003      	movs	r0, #3
1005439e:	e007      	b.n	100543b0 <aci_gap_proc_complete_event_wrapper+0x54>
100543a0:	2004      	movs	r0, #4
100543a2:	e005      	b.n	100543b0 <aci_gap_proc_complete_event_wrapper+0x54>
100543a4:	2005      	movs	r0, #5
100543a6:	e003      	b.n	100543b0 <aci_gap_proc_complete_event_wrapper+0x54>
100543a8:	2006      	movs	r0, #6
100543aa:	e001      	b.n	100543b0 <aci_gap_proc_complete_event_wrapper+0x54>
100543ac:	2000      	movs	r0, #0
100543ae:	43c0      	mvns	r0, r0
100543b0:	7030      	strb	r0, [r6, #0]
100543b2:	4818      	ldr	r0, [pc, #96]	@ (10054414 <__arm_cp.13_0>)
100543b4:	6800      	ldr	r0, [r0, #0]
100543b6:	214e      	movs	r1, #78	@ 0x4e
100543b8:	5640      	ldrsb	r0, [r0, r1]
100543ba:	2800      	cmp	r0, #0
100543bc:	d527      	bpl.n	1005440e <aci_gap_proc_complete_event_wrapper+0xb2>
100543be:	4816      	ldr	r0, [pc, #88]	@ (10054418 <__arm_cp.13_1>)
100543c0:	1828      	adds	r0, r5, r0
100543c2:	2103      	movs	r1, #3
100543c4:	4301      	orrs	r1, r0
100543c6:	310d      	adds	r1, #13
100543c8:	0888      	lsrs	r0, r1, #2
100543ca:	b283      	uxth	r3, r0
100543cc:	4813      	ldr	r0, [pc, #76]	@ (1005441c <__arm_cp.13_2>)
100543ce:	6800      	ldr	r0, [r0, #0]
100543d0:	6980      	ldr	r0, [r0, #24]
100543d2:	2102      	movs	r1, #2
100543d4:	2247      	movs	r2, #71	@ 0x47
100543d6:	f7ff f847 	bl	10053468 <aci_event_fifo_push_header>
100543da:	2800      	cmp	r0, #0
100543dc:	d016      	beq.n	1005440c <aci_gap_proc_complete_event_wrapper+0xb0>
100543de:	4607      	mov	r7, r0
100543e0:	1d00      	adds	r0, r0, #4
100543e2:	4629      	mov	r1, r5
100543e4:	4632      	mov	r2, r6
100543e6:	f7ff fb7a 	bl	10053ade <aci_gap_proc_complete_event_copy>
100543ea:	2004      	movs	r0, #4
100543ec:	7278      	strb	r0, [r7, #9]
100543ee:	2007      	movs	r0, #7
100543f0:	7238      	strb	r0, [r7, #8]
100543f2:	1ce8      	adds	r0, r5, #3
100543f4:	0a01      	lsrs	r1, r0, #8
100543f6:	71f9      	strb	r1, [r7, #7]
100543f8:	71b8      	strb	r0, [r7, #6]
100543fa:	20ff      	movs	r0, #255	@ 0xff
100543fc:	7178      	strb	r0, [r7, #5]
100543fe:	2082      	movs	r0, #130	@ 0x82
10054400:	7138      	strb	r0, [r7, #4]
10054402:	2002      	movs	r0, #2
10054404:	4639      	mov	r1, r7
10054406:	f7ff f8cc 	bl	100535a2 <aci_event_fifo_push>
1005440a:	e000      	b.n	1005440e <aci_gap_proc_complete_event_wrapper+0xb2>
1005440c:	2407      	movs	r4, #7
1005440e:	4620      	mov	r0, r4
10054410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10054412:	46c0      	nop			@ (mov r8, r8)

10054414 <__arm_cp.13_0>:
10054414:	20001174 	.word	0x20001174

10054418 <__arm_cp.13_1>:
10054418:	0003fffd 	.word	0x0003fffd

1005441c <__arm_cp.13_2>:
1005441c:	20001124 	.word	0x20001124

10054420 <GAP_LimDiscTimeoutcb>:
10054420:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10054422:	4811      	ldr	r0, [pc, #68]	@ (10054468 <__arm_cp.15_0>)
10054424:	6800      	ldr	r0, [r0, #0]
10054426:	6d44      	ldr	r4, [r0, #84]	@ 0x54
10054428:	f009 fe1d 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005442c:	2800      	cmp	r0, #0
1005442e:	d002      	beq.n	10054436 <GAP_LimDiscTimeoutcb+0x16>
10054430:	480e      	ldr	r0, [pc, #56]	@ (1005446c <__arm_cp.15_1>)
10054432:	7e80      	ldrb	r0, [r0, #26]
10054434:	e000      	b.n	10054438 <GAP_LimDiscTimeoutcb+0x18>
10054436:	2001      	movs	r0, #1
10054438:	b2c5      	uxtb	r5, r0
1005443a:	3411      	adds	r4, #17
1005443c:	2d00      	cmp	r5, #0
1005443e:	d011      	beq.n	10054464 <GAP_LimDiscTimeoutcb+0x44>
10054440:	7820      	ldrb	r0, [r4, #0]
10054442:	2800      	cmp	r0, #0
10054444:	d00b      	beq.n	1005445e <GAP_LimDiscTimeoutcb+0x3e>
10054446:	4620      	mov	r0, r4
10054448:	380f      	subs	r0, #15
1005444a:	7800      	ldrb	r0, [r0, #0]
1005444c:	0780      	lsls	r0, r0, #30
1005444e:	d506      	bpl.n	1005445e <GAP_LimDiscTimeoutcb+0x3e>
10054450:	7860      	ldrb	r0, [r4, #1]
10054452:	466a      	mov	r2, sp
10054454:	7010      	strb	r0, [r2, #0]
10054456:	2000      	movs	r0, #0
10054458:	2101      	movs	r1, #1
1005445a:	f7fe fb33 	bl	10052ac4 <GAP_set_advertising_enable_ucfg_weak>
1005445e:	3414      	adds	r4, #20
10054460:	1e6d      	subs	r5, r5, #1
10054462:	e7eb      	b.n	1005443c <GAP_LimDiscTimeoutcb+0x1c>
10054464:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10054466:	46c0      	nop			@ (mov r8, r8)

10054468 <__arm_cp.15_0>:
10054468:	20001128 	.word	0x20001128

1005446c <__arm_cp.15_1>:
1005446c:	20001188 	.word	0x20001188

10054470 <GAP_stop_discoverability>:
10054470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054472:	4604      	mov	r4, r0
10054474:	4668      	mov	r0, sp
10054476:	2500      	movs	r5, #0
10054478:	7005      	strb	r5, [r0, #0]
1005447a:	f009 fdf4 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005447e:	2800      	cmp	r0, #0
10054480:	d005      	beq.n	1005448e <GAP_stop_discoverability+0x1e>
10054482:	466d      	mov	r5, sp
10054484:	4620      	mov	r0, r4
10054486:	4629      	mov	r1, r5
10054488:	f000 f9fe 	bl	10054888 <GAP_get_advertising_set_index>
1005448c:	782d      	ldrb	r5, [r5, #0]
1005448e:	f009 fdea 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
10054492:	2800      	cmp	r0, #0
10054494:	d002      	beq.n	1005449c <GAP_stop_discoverability+0x2c>
10054496:	4826      	ldr	r0, [pc, #152]	@ (10054530 <__arm_cp.18_0>)
10054498:	7e83      	ldrb	r3, [r0, #26]
1005449a:	e000      	b.n	1005449e <GAP_stop_discoverability+0x2e>
1005449c:	2301      	movs	r3, #1
1005449e:	2614      	movs	r6, #20
100544a0:	4375      	muls	r5, r6
100544a2:	4f24      	ldr	r7, [pc, #144]	@ (10054534 <__arm_cp.18_1>)
100544a4:	6838      	ldr	r0, [r7, #0]
100544a6:	6d41      	ldr	r1, [r0, #84]	@ 0x54
100544a8:	194c      	adds	r4, r1, r5
100544aa:	78a5      	ldrb	r5, [r4, #2]
100544ac:	2202      	movs	r2, #2
100544ae:	402a      	ands	r2, r5
100544b0:	d002      	beq.n	100544b8 <GAP_stop_discoverability+0x48>
100544b2:	1ca4      	adds	r4, r4, #2
100544b4:	2500      	movs	r5, #0
100544b6:	7025      	strb	r5, [r4, #0]
100544b8:	3111      	adds	r1, #17
100544ba:	b2db      	uxtb	r3, r3
100544bc:	2b00      	cmp	r3, #0
100544be:	d00a      	beq.n	100544d6 <GAP_stop_discoverability+0x66>
100544c0:	780c      	ldrb	r4, [r1, #0]
100544c2:	2c00      	cmp	r4, #0
100544c4:	d004      	beq.n	100544d0 <GAP_stop_discoverability+0x60>
100544c6:	460c      	mov	r4, r1
100544c8:	3c0f      	subs	r4, #15
100544ca:	7824      	ldrb	r4, [r4, #0]
100544cc:	07a4      	lsls	r4, r4, #30
100544ce:	d426      	bmi.n	1005451e <GAP_stop_discoverability+0xae>
100544d0:	1e5b      	subs	r3, r3, #1
100544d2:	3114      	adds	r1, #20
100544d4:	e7f2      	b.n	100544bc <GAP_stop_discoverability+0x4c>
100544d6:	2a00      	cmp	r2, #0
100544d8:	d021      	beq.n	1005451e <GAP_stop_discoverability+0xae>
100544da:	2400      	movs	r4, #0
100544dc:	4621      	mov	r1, r4
100544de:	f00d fe50 	bl	10062182 <CST_stop>
100544e2:	4815      	ldr	r0, [pc, #84]	@ (10054538 <__arm_cp.18_2>)
100544e4:	6800      	ldr	r0, [r0, #0]
100544e6:	214e      	movs	r1, #78	@ 0x4e
100544e8:	5c40      	ldrb	r0, [r0, r1]
100544ea:	07c0      	lsls	r0, r0, #31
100544ec:	d017      	beq.n	1005451e <GAP_stop_discoverability+0xae>
100544ee:	4813      	ldr	r0, [pc, #76]	@ (1005453c <__arm_cp.18_3>)
100544f0:	6800      	ldr	r0, [r0, #0]
100544f2:	6980      	ldr	r0, [r0, #24]
100544f4:	2244      	movs	r2, #68	@ 0x44
100544f6:	2502      	movs	r5, #2
100544f8:	4629      	mov	r1, r5
100544fa:	462b      	mov	r3, r5
100544fc:	f7fe ffb4 	bl	10053468 <aci_event_fifo_push_header>
10054500:	2800      	cmp	r0, #0
10054502:	d00c      	beq.n	1005451e <GAP_stop_discoverability+0xae>
10054504:	4601      	mov	r1, r0
10054506:	7185      	strb	r5, [r0, #6]
10054508:	71c4      	strb	r4, [r0, #7]
1005450a:	7204      	strb	r4, [r0, #8]
1005450c:	20ff      	movs	r0, #255	@ 0xff
1005450e:	7148      	strb	r0, [r1, #5]
10054510:	2082      	movs	r0, #130	@ 0x82
10054512:	7108      	strb	r0, [r1, #4]
10054514:	2004      	movs	r0, #4
10054516:	7248      	strb	r0, [r1, #9]
10054518:	4628      	mov	r0, r5
1005451a:	f7ff f842 	bl	100535a2 <aci_event_fifo_push>
1005451e:	4668      	mov	r0, sp
10054520:	7800      	ldrb	r0, [r0, #0]
10054522:	4346      	muls	r6, r0
10054524:	6838      	ldr	r0, [r7, #0]
10054526:	6d40      	ldr	r0, [r0, #84]	@ 0x54
10054528:	1980      	adds	r0, r0, r6
1005452a:	2100      	movs	r1, #0
1005452c:	7441      	strb	r1, [r0, #17]
1005452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054530 <__arm_cp.18_0>:
10054530:	20001188 	.word	0x20001188

10054534 <__arm_cp.18_1>:
10054534:	20001128 	.word	0x20001128

10054538 <__arm_cp.18_2>:
10054538:	20001174 	.word	0x20001174

1005453c <__arm_cp.18_3>:
1005453c:	20001124 	.word	0x20001124

10054540 <GAP_stop_privacy_timer>:
10054540:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10054542:	4c0d      	ldr	r4, [pc, #52]	@ (10054578 <__arm_cp.19_0>)
10054544:	6825      	ldr	r5, [r4, #0]
10054546:	205c      	movs	r0, #92	@ 0x5c
10054548:	5c28      	ldrb	r0, [r5, r0]
1005454a:	0680      	lsls	r0, r0, #26
1005454c:	0f80      	lsrs	r0, r0, #30
1005454e:	d012      	beq.n	10054576 <GAP_stop_privacy_timer+0x36>
10054550:	355c      	adds	r5, #92	@ 0x5c
10054552:	78e8      	ldrb	r0, [r5, #3]
10054554:	2602      	movs	r6, #2
10054556:	4030      	ands	r0, r6
10054558:	d10d      	bne.n	10054576 <GAP_stop_privacy_timer+0x36>
1005455a:	a801      	add	r0, sp, #4
1005455c:	4669      	mov	r1, sp
1005455e:	f000 fadf 	bl	10054b20 <GAP_check_adv_status>
10054562:	7869      	ldrb	r1, [r5, #1]
10054564:	4301      	orrs	r1, r0
10054566:	d106      	bne.n	10054576 <GAP_stop_privacy_timer+0x36>
10054568:	78e8      	ldrb	r0, [r5, #3]
1005456a:	4330      	orrs	r0, r6
1005456c:	70e8      	strb	r0, [r5, #3]
1005456e:	6820      	ldr	r0, [r4, #0]
10054570:	2101      	movs	r1, #1
10054572:	f00d fe06 	bl	10062182 <CST_stop>
10054576:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10054578 <__arm_cp.19_0>:
10054578:	20001128 	.word	0x20001128

1005457c <GAP_peripheral_connection_complete_handler_ucfg_weak>:
1005457c:	b580      	push	{r7, lr}
1005457e:	2000      	movs	r0, #0
10054580:	f7ff ff76 	bl	10054470 <GAP_stop_discoverability>
10054584:	f7ff ffdc 	bl	10054540 <GAP_stop_privacy_timer>
10054588:	bd80      	pop	{r7, pc}

1005458a <GAP_hci_disconnection_complete_evt_hndl>:
1005458a:	4770      	bx	lr

1005458c <GAP_hci_le_connection_complete_evt_hndl>:
1005458c:	b580      	push	{r7, lr}
1005458e:	2a00      	cmp	r2, #0
10054590:	d003      	beq.n	1005459a <GAP_hci_le_connection_complete_evt_hndl+0xe>
10054592:	4608      	mov	r0, r1
10054594:	f7ff fff2 	bl	1005457c <GAP_peripheral_connection_complete_handler_ucfg_weak>
10054598:	bd80      	pop	{r7, pc}
1005459a:	f7ff fd23 	bl	10053fe4 <GAP_central_connection_complete_handler_ucfg_weak>
1005459e:	bd80      	pop	{r7, pc}

100545a0 <GapIsPrivacySupported>:
100545a0:	4804      	ldr	r0, [pc, #16]	@ (100545b4 <__arm_cp.26_0>)
100545a2:	6800      	ldr	r0, [r0, #0]
100545a4:	215c      	movs	r1, #92	@ 0x5c
100545a6:	5c41      	ldrb	r1, [r0, r1]
100545a8:	2030      	movs	r0, #48	@ 0x30
100545aa:	4008      	ands	r0, r1
100545ac:	1e41      	subs	r1, r0, #1
100545ae:	4188      	sbcs	r0, r1
100545b0:	4770      	bx	lr
100545b2:	46c0      	nop			@ (mov r8, r8)

100545b4 <__arm_cp.26_0>:
100545b4:	20001128 	.word	0x20001128

100545b8 <GAP_get_identity_address_type>:
100545b8:	4803      	ldr	r0, [pc, #12]	@ (100545c8 <__arm_cp.28_0>)
100545ba:	6800      	ldr	r0, [r0, #0]
100545bc:	215f      	movs	r1, #95	@ 0x5f
100545be:	5c41      	ldrb	r1, [r0, r1]
100545c0:	2001      	movs	r0, #1
100545c2:	4008      	ands	r0, r1
100545c4:	4770      	bx	lr
100545c6:	46c0      	nop			@ (mov r8, r8)

100545c8 <__arm_cp.28_0>:
100545c8:	20001128 	.word	0x20001128

100545cc <GAP_get_own_address_type>:
100545cc:	4808      	ldr	r0, [pc, #32]	@ (100545f0 <__arm_cp.29_0>)
100545ce:	6800      	ldr	r0, [r0, #0]
100545d0:	215c      	movs	r1, #92	@ 0x5c
100545d2:	5c41      	ldrb	r1, [r0, r1]
100545d4:	06ca      	lsls	r2, r1, #27
100545d6:	d406      	bmi.n	100545e6 <GAP_get_own_address_type+0x1a>
100545d8:	0689      	lsls	r1, r1, #26
100545da:	d406      	bmi.n	100545ea <GAP_get_own_address_type+0x1e>
100545dc:	305c      	adds	r0, #92	@ 0x5c
100545de:	78c1      	ldrb	r1, [r0, #3]
100545e0:	2001      	movs	r0, #1
100545e2:	4008      	ands	r0, r1
100545e4:	4770      	bx	lr
100545e6:	2001      	movs	r0, #1
100545e8:	4770      	bx	lr
100545ea:	2003      	movs	r0, #3
100545ec:	4770      	bx	lr
100545ee:	46c0      	nop			@ (mov r8, r8)

100545f0 <__arm_cp.29_0>:
100545f0:	20001128 	.word	0x20001128

100545f4 <GAP_enable_controller_privacy_ucfg_weak>:
100545f4:	2012      	movs	r0, #18
100545f6:	4770      	bx	lr

100545f8 <GAP_Terminate_Link>:
100545f8:	b580      	push	{r7, lr}
100545fa:	f004 fe29 	bl	10059250 <llc_conn_disconnect_link>
100545fe:	bd80      	pop	{r7, pc}

10054600 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>:
10054600:	b580      	push	{r7, lr}
10054602:	07c0      	lsls	r0, r0, #31
10054604:	d101      	bne.n	1005460a <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak+0xa>
10054606:	2000      	movs	r0, #0
10054608:	bd80      	pop	{r7, pc}
1005460a:	4608      	mov	r0, r1
1005460c:	4611      	mov	r1, r2
1005460e:	f003 fac9 	bl	10057ba4 <hci_le_add_device_to_filter_accept_list>
10054612:	bd80      	pop	{r7, pc}

10054614 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>:
10054614:	b580      	push	{r7, lr}
10054616:	07c0      	lsls	r0, r0, #31
10054618:	d101      	bne.n	1005461e <GAP_clear_filter_accept_and_resolving_list_ucfg_weak+0xa>
1005461a:	2000      	movs	r0, #0
1005461c:	bd80      	pop	{r7, pc}
1005461e:	f003 fabd 	bl	10057b9c <hci_le_clear_filter_accept_list>
10054622:	bd80      	pop	{r7, pc}

10054624 <GAP_configure_filter_accept_and_resolving_list>:
10054624:	b570      	push	{r4, r5, r6, lr}
10054626:	b094      	sub	sp, #80	@ 0x50
10054628:	4604      	mov	r4, r0
1005462a:	f7ff fff3 	bl	10054614 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>
1005462e:	4606      	mov	r6, r0
10054630:	466d      	mov	r5, sp
10054632:	353e      	adds	r5, #62	@ 0x3e
10054634:	4668      	mov	r0, sp
10054636:	f00b f95f 	bl	1005f8f8 <sdb_sap_read_security_record_sequential>
1005463a:	2800      	cmp	r0, #0
1005463c:	d10b      	bne.n	10054656 <GAP_configure_filter_accept_and_resolving_list+0x32>
1005463e:	2e00      	cmp	r6, #0
10054640:	d109      	bne.n	10054656 <GAP_configure_filter_accept_and_resolving_list+0x32>
10054642:	4668      	mov	r0, sp
10054644:	7840      	ldrb	r0, [r0, #1]
10054646:	2101      	movs	r1, #1
10054648:	4001      	ands	r1, r0
1005464a:	4620      	mov	r0, r4
1005464c:	462a      	mov	r2, r5
1005464e:	f7ff ffd7 	bl	10054600 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>
10054652:	4606      	mov	r6, r0
10054654:	e7ee      	b.n	10054634 <GAP_configure_filter_accept_and_resolving_list+0x10>
10054656:	b2f0      	uxtb	r0, r6
10054658:	b014      	add	sp, #80	@ 0x50
1005465a:	bd70      	pop	{r4, r5, r6, pc}

1005465c <GAP_set_controller_random_address_ucfg_weak>:
1005465c:	b580      	push	{r7, lr}
1005465e:	f003 f8cd 	bl	100577fc <hci_le_set_random_address>
10054662:	bd80      	pop	{r7, pc}

10054664 <GAP_init_advertising_sets_ucfg_weak>:
10054664:	2000      	movs	r0, #0
10054666:	4770      	bx	lr

10054668 <GAP_start_privacy_timer>:
10054668:	b5b0      	push	{r4, r5, r7, lr}
1005466a:	4602      	mov	r2, r0
1005466c:	4810      	ldr	r0, [pc, #64]	@ (100546b0 <__arm_cp.47_0>)
1005466e:	6800      	ldr	r0, [r0, #0]
10054670:	4605      	mov	r5, r0
10054672:	355a      	adds	r5, #90	@ 0x5a
10054674:	2900      	cmp	r1, #0
10054676:	d108      	bne.n	1005468a <GAP_start_privacy_timer+0x22>
10054678:	78a9      	ldrb	r1, [r5, #2]
1005467a:	0689      	lsls	r1, r1, #26
1005467c:	2400      	movs	r4, #0
1005467e:	0f89      	lsrs	r1, r1, #30
10054680:	d014      	beq.n	100546ac <GAP_start_privacy_timer+0x44>
10054682:	7969      	ldrb	r1, [r5, #5]
10054684:	2302      	movs	r3, #2
10054686:	400b      	ands	r3, r1
10054688:	d010      	beq.n	100546ac <GAP_start_privacy_timer+0x44>
1005468a:	2a00      	cmp	r2, #0
1005468c:	d001      	beq.n	10054692 <GAP_start_privacy_timer+0x2a>
1005468e:	4b09      	ldr	r3, [pc, #36]	@ (100546b4 <__arm_cp.47_1>)
10054690:	e003      	b.n	1005469a <GAP_start_privacy_timer+0x32>
10054692:	217d      	movs	r1, #125	@ 0x7d
10054694:	00c9      	lsls	r1, r1, #3
10054696:	882b      	ldrh	r3, [r5, #0]
10054698:	434b      	muls	r3, r1
1005469a:	2401      	movs	r4, #1
1005469c:	4621      	mov	r1, r4
1005469e:	4622      	mov	r2, r4
100546a0:	f00d fda5 	bl	100621ee <CST_start>
100546a4:	7968      	ldrb	r0, [r5, #5]
100546a6:	21fd      	movs	r1, #253	@ 0xfd
100546a8:	4001      	ands	r1, r0
100546aa:	7169      	strb	r1, [r5, #5]
100546ac:	4620      	mov	r0, r4
100546ae:	bdb0      	pop	{r4, r5, r7, pc}

100546b0 <__arm_cp.47_0>:
100546b0:	20001128 	.word	0x20001128

100546b4 <__arm_cp.47_1>:
100546b4:	00007530 	.word	0x00007530

100546b8 <GAP_generate_new_rpa>:
100546b8:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100546ba:	4d0d      	ldr	r5, [pc, #52]	@ (100546f0 <__arm_cp.48_0>)
100546bc:	6828      	ldr	r0, [r5, #0]
100546be:	215f      	movs	r1, #95	@ 0x5f
100546c0:	5c40      	ldrb	r0, [r0, r1]
100546c2:	0780      	lsls	r0, r0, #30
100546c4:	d401      	bmi.n	100546ca <GAP_generate_new_rpa+0x12>
100546c6:	240c      	movs	r4, #12
100546c8:	e00f      	b.n	100546ea <GAP_generate_new_rpa+0x32>
100546ca:	466c      	mov	r4, sp
100546cc:	4620      	mov	r0, r4
100546ce:	f00b fa23 	bl	1005fb18 <smp_sap_crt_generate_rpa>
100546d2:	4620      	mov	r0, r4
100546d4:	f7ff ffc2 	bl	1005465c <GAP_set_controller_random_address_ucfg_weak>
100546d8:	4604      	mov	r4, r0
100546da:	2800      	cmp	r0, #0
100546dc:	d105      	bne.n	100546ea <GAP_generate_new_rpa+0x32>
100546de:	6828      	ldr	r0, [r5, #0]
100546e0:	3066      	adds	r0, #102	@ 0x66
100546e2:	4669      	mov	r1, sp
100546e4:	2206      	movs	r2, #6
100546e6:	f7f1 fbc7 	bl	10045e78 <BLEPLAT_MemCpy>
100546ea:	4620      	mov	r0, r4
100546ec:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100546ee:	46c0      	nop			@ (mov r8, r8)

100546f0 <__arm_cp.48_0>:
100546f0:	20001128 	.word	0x20001128

100546f4 <GAP_get_current_address>:
100546f4:	b5b0      	push	{r4, r5, r7, lr}
100546f6:	460d      	mov	r5, r1
100546f8:	4604      	mov	r4, r0
100546fa:	480f      	ldr	r0, [pc, #60]	@ (10054738 <__arm_cp.49_0>)
100546fc:	6800      	ldr	r0, [r0, #0]
100546fe:	215c      	movs	r1, #92	@ 0x5c
10054700:	5c40      	ldrb	r0, [r0, r1]
10054702:	0680      	lsls	r0, r0, #26
10054704:	0f80      	lsrs	r0, r0, #30
10054706:	d005      	beq.n	10054714 <GAP_get_current_address+0x20>
10054708:	2001      	movs	r0, #1
1005470a:	7028      	strb	r0, [r5, #0]
1005470c:	4620      	mov	r0, r4
1005470e:	f000 f815 	bl	1005473c <GAP_get_rpa>
10054712:	e00e      	b.n	10054732 <GAP_get_current_address+0x3e>
10054714:	f7ff ff5a 	bl	100545cc <GAP_get_own_address_type>
10054718:	2800      	cmp	r0, #0
1005471a:	d005      	beq.n	10054728 <GAP_get_current_address+0x34>
1005471c:	2001      	movs	r0, #1
1005471e:	7028      	strb	r0, [r5, #0]
10054720:	4620      	mov	r0, r4
10054722:	f000 f81f 	bl	10054764 <GAP_get_static_random_address>
10054726:	e004      	b.n	10054732 <GAP_get_current_address+0x3e>
10054728:	2000      	movs	r0, #0
1005472a:	7028      	strb	r0, [r5, #0]
1005472c:	4620      	mov	r0, r4
1005472e:	f000 f80f 	bl	10054750 <GAP_get_public_address>
10054732:	2000      	movs	r0, #0
10054734:	bdb0      	pop	{r4, r5, r7, pc}
10054736:	46c0      	nop			@ (mov r8, r8)

10054738 <__arm_cp.49_0>:
10054738:	20001128 	.word	0x20001128

1005473c <GAP_get_rpa>:
1005473c:	b580      	push	{r7, lr}
1005473e:	4903      	ldr	r1, [pc, #12]	@ (1005474c <__arm_cp.50_0>)
10054740:	6809      	ldr	r1, [r1, #0]
10054742:	3166      	adds	r1, #102	@ 0x66
10054744:	2206      	movs	r2, #6
10054746:	f7f1 fb97 	bl	10045e78 <BLEPLAT_MemCpy>
1005474a:	bd80      	pop	{r7, pc}

1005474c <__arm_cp.50_0>:
1005474c:	20001128 	.word	0x20001128

10054750 <GAP_get_public_address>:
10054750:	b580      	push	{r7, lr}
10054752:	4903      	ldr	r1, [pc, #12]	@ (10054760 <__arm_cp.51_0>)
10054754:	6809      	ldr	r1, [r1, #0]
10054756:	2206      	movs	r2, #6
10054758:	f7f1 fb8e 	bl	10045e78 <BLEPLAT_MemCpy>
1005475c:	bd80      	pop	{r7, pc}
1005475e:	46c0      	nop			@ (mov r8, r8)

10054760 <__arm_cp.51_0>:
10054760:	20001120 	.word	0x20001120

10054764 <GAP_get_static_random_address>:
10054764:	b580      	push	{r7, lr}
10054766:	4903      	ldr	r1, [pc, #12]	@ (10054774 <__arm_cp.52_0>)
10054768:	6809      	ldr	r1, [r1, #0]
1005476a:	3160      	adds	r1, #96	@ 0x60
1005476c:	2206      	movs	r2, #6
1005476e:	f7f1 fb83 	bl	10045e78 <BLEPLAT_MemCpy>
10054772:	bd80      	pop	{r7, pc}

10054774 <__arm_cp.52_0>:
10054774:	20001128 	.word	0x20001128

10054778 <GAP_is_rpa_change_at_timeout_enabled>:
10054778:	4802      	ldr	r0, [pc, #8]	@ (10054784 <__arm_cp.54_0>)
1005477a:	6800      	ldr	r0, [r0, #0]
1005477c:	216c      	movs	r1, #108	@ 0x6c
1005477e:	5c40      	ldrb	r0, [r0, r1]
10054780:	4770      	bx	lr
10054782:	46c0      	nop			@ (mov r8, r8)

10054784 <__arm_cp.54_0>:
10054784:	20001128 	.word	0x20001128

10054788 <GAP_check_discoverability_mode>:
10054788:	1e43      	subs	r3, r0, #1
1005478a:	2b02      	cmp	r3, #2
1005478c:	d309      	bcc.n	100547a2 <GAP_check_discoverability_mode+0x1a>
1005478e:	2800      	cmp	r0, #0
10054790:	d00c      	beq.n	100547ac <GAP_check_discoverability_mode+0x24>
10054792:	2803      	cmp	r0, #3
10054794:	d109      	bne.n	100547aa <GAP_check_discoverability_mode+0x22>
10054796:	2001      	movs	r0, #1
10054798:	4001      	ands	r1, r0
1005479a:	4249      	negs	r1, r1
1005479c:	2012      	movs	r0, #18
1005479e:	4008      	ands	r0, r1
100547a0:	4770      	bx	lr
100547a2:	2a00      	cmp	r2, #0
100547a4:	d101      	bne.n	100547aa <GAP_check_discoverability_mode+0x22>
100547a6:	4610      	mov	r0, r2
100547a8:	4770      	bx	lr
100547aa:	2012      	movs	r0, #18
100547ac:	4770      	bx	lr
	...

100547b0 <GAP_advEvtProp_to_advType>:
100547b0:	4601      	mov	r1, r0
100547b2:	3910      	subs	r1, #16
100547b4:	2905      	cmp	r1, #5
100547b6:	d80a      	bhi.n	100547ce <GAP_advEvtProp_to_advType+0x1e>
100547b8:	2000      	movs	r0, #0
100547ba:	46c0      	nop			@ (mov r8, r8)
100547bc:	4479      	add	r1, pc
100547be:	7909      	ldrb	r1, [r1, #4]
100547c0:	0049      	lsls	r1, r1, #1
100547c2:	448f      	add	pc, r1
100547c4:	090a0802 	.word	0x090a0802
100547c8:	0c08      	.short	0x0c08
100547ca:	2003      	movs	r0, #3
100547cc:	4770      	bx	lr
100547ce:	281d      	cmp	r0, #29
100547d0:	d101      	bne.n	100547d6 <GAP_advEvtProp_to_advType+0x26>
100547d2:	2001      	movs	r0, #1
100547d4:	4770      	bx	lr
100547d6:	2005      	movs	r0, #5
100547d8:	4770      	bx	lr
100547da:	2002      	movs	r0, #2
100547dc:	4770      	bx	lr
100547de:	2004      	movs	r0, #4
100547e0:	4770      	bx	lr
	...

100547e4 <GAP_set_legacy_advertising_configuration>:
100547e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100547e6:	b08b      	sub	sp, #44	@ 0x2c
100547e8:	4615      	mov	r5, r2
100547ea:	460f      	mov	r7, r1
100547ec:	4601      	mov	r1, r0
100547ee:	06fa      	lsls	r2, r7, #27
100547f0:	2012      	movs	r0, #18
100547f2:	2a00      	cmp	r2, #0
100547f4:	d53f      	bpl.n	10054876 <GAP_set_legacy_advertising_configuration+0x92>
100547f6:	461c      	mov	r4, r3
100547f8:	2301      	movs	r3, #1
100547fa:	039a      	lsls	r2, r3, #14
100547fc:	4295      	cmp	r5, r2
100547fe:	d83a      	bhi.n	10054876 <GAP_set_legacy_advertising_configuration+0x92>
10054800:	4294      	cmp	r4, r2
10054802:	d838      	bhi.n	10054876 <GAP_set_legacy_advertising_configuration+0x92>
10054804:	930a      	str	r3, [sp, #40]	@ 0x28
10054806:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10054808:	9009      	str	r0, [sp, #36]	@ 0x24
1005480a:	9812      	ldr	r0, [sp, #72]	@ 0x48
1005480c:	9008      	str	r0, [sp, #32]
1005480e:	9811      	ldr	r0, [sp, #68]	@ 0x44
10054810:	9006      	str	r0, [sp, #24]
10054812:	9810      	ldr	r0, [sp, #64]	@ 0x40
10054814:	9007      	str	r0, [sp, #28]
10054816:	4819      	ldr	r0, [pc, #100]	@ (1005487c <__arm_cp.2_0>)
10054818:	6800      	ldr	r0, [r0, #0]
1005481a:	6d46      	ldr	r6, [r0, #84]	@ 0x54
1005481c:	2000      	movs	r0, #0
1005481e:	9004      	str	r0, [sp, #16]
10054820:	7070      	strb	r0, [r6, #1]
10054822:	7031      	strb	r1, [r6, #0]
10054824:	f7ff fed2 	bl	100545cc <GAP_get_own_address_type>
10054828:	9005      	str	r0, [sp, #20]
1005482a:	4638      	mov	r0, r7
1005482c:	f7ff ffc0 	bl	100547b0 <GAP_advEvtProp_to_advType>
10054830:	4602      	mov	r2, r0
10054832:	7870      	ldrb	r0, [r6, #1]
10054834:	2120      	movs	r1, #32
10054836:	4301      	orrs	r1, r0
10054838:	7071      	strb	r1, [r6, #1]
1005483a:	2a04      	cmp	r2, #4
1005483c:	d808      	bhi.n	10054850 <GAP_set_legacy_advertising_configuration+0x6c>
1005483e:	2117      	movs	r1, #23
10054840:	40d1      	lsrs	r1, r2
10054842:	07c9      	lsls	r1, r1, #31
10054844:	d004      	beq.n	10054850 <GAP_set_legacy_advertising_configuration+0x6c>
10054846:	b251      	sxtb	r1, r2
10054848:	a30d      	add	r3, pc, #52	@ (adr r3, 10054880 <__arm_cp.2_0+0x4>)
1005484a:	5c59      	ldrb	r1, [r3, r1]
1005484c:	4308      	orrs	r0, r1
1005484e:	7070      	strb	r0, [r6, #1]
10054850:	9806      	ldr	r0, [sp, #24]
10054852:	9000      	str	r0, [sp, #0]
10054854:	9808      	ldr	r0, [sp, #32]
10054856:	9001      	str	r0, [sp, #4]
10054858:	9807      	ldr	r0, [sp, #28]
1005485a:	9002      	str	r0, [sp, #8]
1005485c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005485e:	9003      	str	r0, [sp, #12]
10054860:	b2a8      	uxth	r0, r5
10054862:	b2a1      	uxth	r1, r4
10054864:	9b05      	ldr	r3, [sp, #20]
10054866:	f002 ff1f 	bl	100576a8 <hci_le_set_advertising_parameters>
1005486a:	2800      	cmp	r0, #0
1005486c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005486e:	d102      	bne.n	10054876 <GAP_set_legacy_advertising_configuration+0x92>
10054870:	9804      	ldr	r0, [sp, #16]
10054872:	74b0      	strb	r0, [r6, #18]
10054874:	7431      	strb	r1, [r6, #16]
10054876:	b00b      	add	sp, #44	@ 0x2c
10054878:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005487a:	46c0      	nop			@ (mov r8, r8)

1005487c <__arm_cp.2_0>:
1005487c:	20001128 	.word	0x20001128
10054880:	70287028 	.word	0x70287028
10054884:	00000030 	.word	0x00000030

10054888 <GAP_get_advertising_set_index>:
10054888:	b570      	push	{r4, r5, r6, lr}
1005488a:	4602      	mov	r2, r0
1005488c:	480b      	ldr	r0, [pc, #44]	@ (100548bc <__arm_cp.4_0>)
1005488e:	7e84      	ldrb	r4, [r0, #26]
10054890:	480b      	ldr	r0, [pc, #44]	@ (100548c0 <__arm_cp.4_1>)
10054892:	6800      	ldr	r0, [r0, #0]
10054894:	6d45      	ldr	r5, [r0, #84]	@ 0x54
10054896:	3510      	adds	r5, #16
10054898:	2000      	movs	r0, #0
1005489a:	4603      	mov	r3, r0
1005489c:	429c      	cmp	r4, r3
1005489e:	d008      	beq.n	100548b2 <GAP_get_advertising_set_index+0x2a>
100548a0:	782e      	ldrb	r6, [r5, #0]
100548a2:	2e00      	cmp	r6, #0
100548a4:	d008      	beq.n	100548b8 <GAP_get_advertising_set_index+0x30>
100548a6:	78ae      	ldrb	r6, [r5, #2]
100548a8:	4296      	cmp	r6, r2
100548aa:	d004      	beq.n	100548b6 <GAP_get_advertising_set_index+0x2e>
100548ac:	3514      	adds	r5, #20
100548ae:	1c5b      	adds	r3, r3, #1
100548b0:	e7f4      	b.n	1005489c <GAP_get_advertising_set_index+0x14>
100548b2:	4623      	mov	r3, r4
100548b4:	e000      	b.n	100548b8 <GAP_get_advertising_set_index+0x30>
100548b6:	2001      	movs	r0, #1
100548b8:	700b      	strb	r3, [r1, #0]
100548ba:	bd70      	pop	{r4, r5, r6, pc}

100548bc <__arm_cp.4_0>:
100548bc:	20001188 	.word	0x20001188

100548c0 <__arm_cp.4_1>:
100548c0:	20001128 	.word	0x20001128

100548c4 <GAP_set_legacy_advertising_enable>:
100548c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100548c6:	4604      	mov	r4, r0
100548c8:	4819      	ldr	r0, [pc, #100]	@ (10054930 <__arm_cp.5_0>)
100548ca:	6800      	ldr	r0, [r0, #0]
100548cc:	6d47      	ldr	r7, [r0, #84]	@ 0x54
100548ce:	2c00      	cmp	r4, #0
100548d0:	d00d      	beq.n	100548ee <GAP_set_legacy_advertising_enable+0x2a>
100548d2:	7c38      	ldrb	r0, [r7, #16]
100548d4:	2800      	cmp	r0, #0
100548d6:	d023      	beq.n	10054920 <GAP_set_legacy_advertising_enable+0x5c>
100548d8:	2000      	movs	r0, #0
100548da:	4601      	mov	r1, r0
100548dc:	f000 f82a 	bl	10054934 <GAP_check_flags>
100548e0:	4605      	mov	r5, r0
100548e2:	2800      	cmp	r0, #0
100548e4:	d122      	bne.n	1005492c <GAP_set_legacy_advertising_enable+0x68>
100548e6:	f7ff fee7 	bl	100546b8 <GAP_generate_new_rpa>
100548ea:	4606      	mov	r6, r0
100548ec:	e000      	b.n	100548f0 <GAP_set_legacy_advertising_enable+0x2c>
100548ee:	260c      	movs	r6, #12
100548f0:	4620      	mov	r0, r4
100548f2:	f002 ff39 	bl	10057768 <hci_le_set_advertising_enable>
100548f6:	4605      	mov	r5, r0
100548f8:	2800      	cmp	r0, #0
100548fa:	d117      	bne.n	1005492c <GAP_set_legacy_advertising_enable+0x68>
100548fc:	2500      	movs	r5, #0
100548fe:	4620      	mov	r0, r4
10054900:	4629      	mov	r1, r5
10054902:	462a      	mov	r2, r5
10054904:	f000 f870 	bl	100549e8 <GAP_set_discoverability_mode>
10054908:	2c00      	cmp	r4, #0
1005490a:	d00b      	beq.n	10054924 <GAP_set_legacy_advertising_enable+0x60>
1005490c:	2001      	movs	r0, #1
1005490e:	7478      	strb	r0, [r7, #17]
10054910:	2e00      	cmp	r6, #0
10054912:	d10b      	bne.n	1005492c <GAP_set_legacy_advertising_enable+0x68>
10054914:	2500      	movs	r5, #0
10054916:	4628      	mov	r0, r5
10054918:	4629      	mov	r1, r5
1005491a:	f7ff fea5 	bl	10054668 <GAP_start_privacy_timer>
1005491e:	e005      	b.n	1005492c <GAP_set_legacy_advertising_enable+0x68>
10054920:	25d3      	movs	r5, #211	@ 0xd3
10054922:	e003      	b.n	1005492c <GAP_set_legacy_advertising_enable+0x68>
10054924:	2500      	movs	r5, #0
10054926:	747d      	strb	r5, [r7, #17]
10054928:	f7ff fe0a 	bl	10054540 <GAP_stop_privacy_timer>
1005492c:	4628      	mov	r0, r5
1005492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054930 <__arm_cp.5_0>:
10054930:	20001128 	.word	0x20001128

10054934 <GAP_check_flags>:
10054934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054936:	4a28      	ldr	r2, [pc, #160]	@ (100549d8 <__arm_cp.6_0>)
10054938:	7e92      	ldrb	r2, [r2, #26]
1005493a:	2512      	movs	r5, #18
1005493c:	428a      	cmp	r2, r1
1005493e:	d925      	bls.n	1005498c <GAP_check_flags+0x58>
10054940:	2800      	cmp	r0, #0
10054942:	d100      	bne.n	10054946 <GAP_check_flags+0x12>
10054944:	4601      	mov	r1, r0
10054946:	2214      	movs	r2, #20
10054948:	434a      	muls	r2, r1
1005494a:	4824      	ldr	r0, [pc, #144]	@ (100549dc <__arm_cp.6_1>)
1005494c:	6800      	ldr	r0, [r0, #0]
1005494e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
10054950:	1899      	adds	r1, r3, r2
10054952:	784c      	ldrb	r4, [r1, #1]
10054954:	06a0      	lsls	r0, r4, #26
10054956:	0fc6      	lsrs	r6, r0, #31
10054958:	2000      	movs	r0, #0
1005495a:	2e00      	cmp	r6, #0
1005495c:	d002      	beq.n	10054964 <GAP_check_flags+0x30>
1005495e:	2710      	movs	r7, #16
10054960:	4027      	ands	r7, r4
10054962:	d114      	bne.n	1005498e <GAP_check_flags+0x5a>
10054964:	2e00      	cmp	r6, #0
10054966:	d102      	bne.n	1005496e <GAP_check_flags+0x3a>
10054968:	2608      	movs	r6, #8
1005496a:	4034      	ands	r4, r6
1005496c:	d10f      	bne.n	1005498e <GAP_check_flags+0x5a>
1005496e:	5c9e      	ldrb	r6, [r3, r2]
10054970:	684c      	ldr	r4, [r1, #4]
10054972:	8988      	ldrh	r0, [r1, #12]
10054974:	4621      	mov	r1, r4
10054976:	f000 f8bb 	bl	10054af0 <GAP_search_flags_index>
1005497a:	4919      	ldr	r1, [pc, #100]	@ (100549e0 <__arm_cp.6_2>)
1005497c:	4288      	cmp	r0, r1
1005497e:	d008      	beq.n	10054992 <GAP_check_flags+0x5e>
10054980:	1900      	adds	r0, r0, r4
10054982:	7881      	ldrb	r1, [r0, #2]
10054984:	0748      	lsls	r0, r1, #29
10054986:	d40b      	bmi.n	100549a0 <GAP_check_flags+0x6c>
10054988:	20d4      	movs	r0, #212	@ 0xd4
1005498a:	e000      	b.n	1005498e <GAP_check_flags+0x5a>
1005498c:	4628      	mov	r0, r5
1005498e:	b2c0      	uxtb	r0, r0
10054990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10054992:	2e03      	cmp	r6, #3
10054994:	4628      	mov	r0, r5
10054996:	d8fa      	bhi.n	1005498e <GAP_check_flags+0x5a>
10054998:	00f1      	lsls	r1, r6, #3
1005499a:	4812      	ldr	r0, [pc, #72]	@ (100549e4 <__arm_cp.6_3>)
1005499c:	40c8      	lsrs	r0, r1
1005499e:	e7f6      	b.n	1005498e <GAP_check_flags+0x5a>
100549a0:	2e03      	cmp	r6, #3
100549a2:	4628      	mov	r0, r5
100549a4:	d8f3      	bhi.n	1005498e <GAP_check_flags+0x5a>
100549a6:	46c0      	nop			@ (mov r8, r8)
100549a8:	447e      	add	r6, pc
100549aa:	7936      	ldrb	r6, [r6, #4]
100549ac:	0076      	lsls	r6, r6, #1
100549ae:	44b7      	add	pc, r6
100549b0:	010d0601 	.word	0x010d0601
100549b4:	2003      	movs	r0, #3
100549b6:	4001      	ands	r1, r0
100549b8:	d105      	bne.n	100549c6 <GAP_check_flags+0x92>
100549ba:	4608      	mov	r0, r1
100549bc:	e7e7      	b.n	1005498e <GAP_check_flags+0x5a>
100549be:	2003      	movs	r0, #3
100549c0:	4001      	ands	r1, r0
100549c2:	2901      	cmp	r1, #1
100549c4:	d006      	beq.n	100549d4 <GAP_check_flags+0xa0>
100549c6:	202b      	movs	r0, #43	@ 0x2b
100549c8:	43c0      	mvns	r0, r0
100549ca:	e7e0      	b.n	1005498e <GAP_check_flags+0x5a>
100549cc:	2003      	movs	r0, #3
100549ce:	4001      	ands	r1, r0
100549d0:	2902      	cmp	r1, #2
100549d2:	d1f8      	bne.n	100549c6 <GAP_check_flags+0x92>
100549d4:	2000      	movs	r0, #0
100549d6:	e7da      	b.n	1005498e <GAP_check_flags+0x5a>

100549d8 <__arm_cp.6_0>:
100549d8:	20001188 	.word	0x20001188

100549dc <__arm_cp.6_1>:
100549dc:	20001128 	.word	0x20001128

100549e0 <__arm_cp.6_2>:
100549e0:	0000ffff 	.word	0x0000ffff

100549e4 <__arm_cp.6_3>:
100549e4:	00d4d400 	.word	0x00d4d400

100549e8 <GAP_set_discoverability_mode>:
100549e8:	b570      	push	{r4, r5, r6, lr}
100549ea:	4603      	mov	r3, r0
100549ec:	2900      	cmp	r1, #0
100549ee:	d100      	bne.n	100549f2 <GAP_set_discoverability_mode+0xa>
100549f0:	460a      	mov	r2, r1
100549f2:	4829      	ldr	r0, [pc, #164]	@ (10054a98 <__arm_cp.7_0>)
100549f4:	6800      	ldr	r0, [r0, #0]
100549f6:	6d41      	ldr	r1, [r0, #84]	@ 0x54
100549f8:	2b01      	cmp	r3, #1
100549fa:	d10c      	bne.n	10054a16 <GAP_set_discoverability_mode+0x2e>
100549fc:	2314      	movs	r3, #20
100549fe:	4353      	muls	r3, r2
10054a00:	5cca      	ldrb	r2, [r1, r3]
10054a02:	2a01      	cmp	r2, #1
10054a04:	d033      	beq.n	10054a6e <GAP_set_discoverability_mode+0x86>
10054a06:	2a02      	cmp	r2, #2
10054a08:	d13e      	bne.n	10054a88 <GAP_set_discoverability_mode+0xa0>
10054a0a:	18ca      	adds	r2, r1, r3
10054a0c:	7894      	ldrb	r4, [r2, #2]
10054a0e:	2004      	movs	r0, #4
10054a10:	4320      	orrs	r0, r4
10054a12:	7090      	strb	r0, [r2, #2]
10054a14:	e03a      	b.n	10054a8c <GAP_set_discoverability_mode+0xa4>
10054a16:	2314      	movs	r3, #20
10054a18:	4353      	muls	r3, r2
10054a1a:	18c9      	adds	r1, r1, r3
10054a1c:	1c8e      	adds	r6, r1, #2
10054a1e:	7889      	ldrb	r1, [r1, #2]
10054a20:	0789      	lsls	r1, r1, #30
10054a22:	d521      	bpl.n	10054a68 <GAP_set_discoverability_mode+0x80>
10054a24:	2400      	movs	r4, #0
10054a26:	4621      	mov	r1, r4
10054a28:	f00d fbab 	bl	10062182 <CST_stop>
10054a2c:	481b      	ldr	r0, [pc, #108]	@ (10054a9c <__arm_cp.7_1>)
10054a2e:	6800      	ldr	r0, [r0, #0]
10054a30:	214e      	movs	r1, #78	@ 0x4e
10054a32:	5c40      	ldrb	r0, [r0, r1]
10054a34:	07c0      	lsls	r0, r0, #31
10054a36:	d017      	beq.n	10054a68 <GAP_set_discoverability_mode+0x80>
10054a38:	4819      	ldr	r0, [pc, #100]	@ (10054aa0 <__arm_cp.7_2>)
10054a3a:	6800      	ldr	r0, [r0, #0]
10054a3c:	6980      	ldr	r0, [r0, #24]
10054a3e:	2244      	movs	r2, #68	@ 0x44
10054a40:	2502      	movs	r5, #2
10054a42:	4629      	mov	r1, r5
10054a44:	462b      	mov	r3, r5
10054a46:	f7fe fd0f 	bl	10053468 <aci_event_fifo_push_header>
10054a4a:	2800      	cmp	r0, #0
10054a4c:	d00c      	beq.n	10054a68 <GAP_set_discoverability_mode+0x80>
10054a4e:	4601      	mov	r1, r0
10054a50:	7185      	strb	r5, [r0, #6]
10054a52:	71c4      	strb	r4, [r0, #7]
10054a54:	7204      	strb	r4, [r0, #8]
10054a56:	20ff      	movs	r0, #255	@ 0xff
10054a58:	7148      	strb	r0, [r1, #5]
10054a5a:	2082      	movs	r0, #130	@ 0x82
10054a5c:	7108      	strb	r0, [r1, #4]
10054a5e:	2004      	movs	r0, #4
10054a60:	7248      	strb	r0, [r1, #9]
10054a62:	4628      	mov	r0, r5
10054a64:	f7fe fd9d 	bl	100535a2 <aci_event_fifo_push>
10054a68:	2000      	movs	r0, #0
10054a6a:	7030      	strb	r0, [r6, #0]
10054a6c:	bd70      	pop	{r4, r5, r6, pc}
10054a6e:	18c9      	adds	r1, r1, r3
10054a70:	784a      	ldrb	r2, [r1, #1]
10054a72:	788b      	ldrb	r3, [r1, #2]
10054a74:	4313      	orrs	r3, r2
10054a76:	2202      	movs	r2, #2
10054a78:	431a      	orrs	r2, r3
10054a7a:	708a      	strb	r2, [r1, #2]
10054a7c:	2100      	movs	r1, #0
10054a7e:	2201      	movs	r2, #1
10054a80:	4b08      	ldr	r3, [pc, #32]	@ (10054aa4 <__arm_cp.7_3>)
10054a82:	f00d fbb4 	bl	100621ee <CST_start>
10054a86:	bd70      	pop	{r4, r5, r6, pc}
10054a88:	18c8      	adds	r0, r1, r3
10054a8a:	7880      	ldrb	r0, [r0, #2]
10054a8c:	18c9      	adds	r1, r1, r3
10054a8e:	784a      	ldrb	r2, [r1, #1]
10054a90:	4302      	orrs	r2, r0
10054a92:	708a      	strb	r2, [r1, #2]
10054a94:	bd70      	pop	{r4, r5, r6, pc}
10054a96:	46c0      	nop			@ (mov r8, r8)

10054a98 <__arm_cp.7_0>:
10054a98:	20001128 	.word	0x20001128

10054a9c <__arm_cp.7_1>:
10054a9c:	20001174 	.word	0x20001174

10054aa0 <__arm_cp.7_2>:
10054aa0:	20001124 	.word	0x20001124

10054aa4 <__arm_cp.7_3>:
10054aa4:	0002bf20 	.word	0x0002bf20

10054aa8 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
10054aa8:	b580      	push	{r7, lr}
10054aaa:	f000 f801 	bl	10054ab0 <GAP_suspend_resume_active_advertising_sets_legacy>
10054aae:	bd80      	pop	{r7, pc}

10054ab0 <GAP_suspend_resume_active_advertising_sets_legacy>:
10054ab0:	b580      	push	{r7, lr}
10054ab2:	4905      	ldr	r1, [pc, #20]	@ (10054ac8 <__arm_cp.11_0>)
10054ab4:	6809      	ldr	r1, [r1, #0]
10054ab6:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10054ab8:	7c49      	ldrb	r1, [r1, #17]
10054aba:	2901      	cmp	r1, #1
10054abc:	d102      	bne.n	10054ac4 <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
10054abe:	f002 fe53 	bl	10057768 <hci_le_set_advertising_enable>
10054ac2:	bd80      	pop	{r7, pc}
10054ac4:	2000      	movs	r0, #0
10054ac6:	bd80      	pop	{r7, pc}

10054ac8 <__arm_cp.11_0>:
10054ac8:	20001128 	.word	0x20001128

10054acc <GAP_set_legacy_advertising_data>:
10054acc:	b5b0      	push	{r4, r5, r7, lr}
10054ace:	460c      	mov	r4, r1
10054ad0:	4605      	mov	r5, r0
10054ad2:	b2c0      	uxtb	r0, r0
10054ad4:	f008 fec2 	bl	1005d85c <ll_set_legacy_advertising_data_ptr>
10054ad8:	2800      	cmp	r0, #0
10054ada:	d000      	beq.n	10054ade <GAP_set_legacy_advertising_data+0x12>
10054adc:	bdb0      	pop	{r4, r5, r7, pc}
10054ade:	4903      	ldr	r1, [pc, #12]	@ (10054aec <__arm_cp.12_0>)
10054ae0:	6809      	ldr	r1, [r1, #0]
10054ae2:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10054ae4:	818d      	strh	r5, [r1, #12]
10054ae6:	604c      	str	r4, [r1, #4]
10054ae8:	bdb0      	pop	{r4, r5, r7, pc}
10054aea:	46c0      	nop			@ (mov r8, r8)

10054aec <__arm_cp.12_0>:
10054aec:	20001128 	.word	0x20001128

10054af0 <GAP_search_flags_index>:
10054af0:	b5b0      	push	{r4, r5, r7, lr}
10054af2:	4a0a      	ldr	r2, [pc, #40]	@ (10054b1c <__arm_cp.16_0>)
10054af4:	2803      	cmp	r0, #3
10054af6:	d30f      	bcc.n	10054b18 <GAP_search_flags_index+0x28>
10054af8:	2300      	movs	r3, #0
10054afa:	b29d      	uxth	r5, r3
10054afc:	5d4c      	ldrb	r4, [r1, r5]
10054afe:	2c02      	cmp	r4, #2
10054b00:	d103      	bne.n	10054b0a <GAP_search_flags_index+0x1a>
10054b02:	186d      	adds	r5, r5, r1
10054b04:	786d      	ldrb	r5, [r5, #1]
10054b06:	2d01      	cmp	r5, #1
10054b08:	d005      	beq.n	10054b16 <GAP_search_flags_index+0x26>
10054b0a:	191b      	adds	r3, r3, r4
10054b0c:	1c5b      	adds	r3, r3, #1
10054b0e:	b29c      	uxth	r4, r3
10054b10:	4284      	cmp	r4, r0
10054b12:	d3f2      	bcc.n	10054afa <GAP_search_flags_index+0xa>
10054b14:	e000      	b.n	10054b18 <GAP_search_flags_index+0x28>
10054b16:	461a      	mov	r2, r3
10054b18:	b290      	uxth	r0, r2
10054b1a:	bdb0      	pop	{r4, r5, r7, pc}

10054b1c <__arm_cp.16_0>:
10054b1c:	0000ffff 	.word	0x0000ffff

10054b20 <GAP_check_adv_status>:
10054b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054b22:	4605      	mov	r5, r0
10054b24:	2600      	movs	r6, #0
10054b26:	7006      	strb	r6, [r0, #0]
10054b28:	2401      	movs	r4, #1
10054b2a:	9100      	str	r1, [sp, #0]
10054b2c:	700c      	strb	r4, [r1, #0]
10054b2e:	4816      	ldr	r0, [pc, #88]	@ (10054b88 <__arm_cp.17_0>)
10054b30:	6800      	ldr	r0, [r0, #0]
10054b32:	6d47      	ldr	r7, [r0, #84]	@ 0x54
10054b34:	f7ff fb86 	bl	10054244 <gap_extended_adv_scan_supported>
10054b38:	2800      	cmp	r0, #0
10054b3a:	d001      	beq.n	10054b40 <GAP_check_adv_status+0x20>
10054b3c:	4813      	ldr	r0, [pc, #76]	@ (10054b8c <__arm_cp.17_1>)
10054b3e:	7e84      	ldrb	r4, [r0, #26]
10054b40:	b2e1      	uxtb	r1, r4
10054b42:	3711      	adds	r7, #17
10054b44:	4630      	mov	r0, r6
10054b46:	4632      	mov	r2, r6
10054b48:	2900      	cmp	r1, #0
10054b4a:	d00f      	beq.n	10054b6c <GAP_check_adv_status+0x4c>
10054b4c:	783b      	ldrb	r3, [r7, #0]
10054b4e:	2b00      	cmp	r3, #0
10054b50:	d009      	beq.n	10054b66 <GAP_check_adv_status+0x46>
10054b52:	2b02      	cmp	r3, #2
10054b54:	d100      	bne.n	10054b58 <GAP_check_adv_status+0x38>
10054b56:	2001      	movs	r0, #1
10054b58:	463a      	mov	r2, r7
10054b5a:	3a0f      	subs	r2, #15
10054b5c:	7813      	ldrb	r3, [r2, #0]
10054b5e:	2201      	movs	r2, #1
10054b60:	079b      	lsls	r3, r3, #30
10054b62:	d500      	bpl.n	10054b66 <GAP_check_adv_status+0x46>
10054b64:	4616      	mov	r6, r2
10054b66:	3714      	adds	r7, #20
10054b68:	1e49      	subs	r1, r1, #1
10054b6a:	e7ed      	b.n	10054b48 <GAP_check_adv_status+0x28>
10054b6c:	2a01      	cmp	r2, #1
10054b6e:	d101      	bne.n	10054b74 <GAP_check_adv_status+0x54>
10054b70:	2101      	movs	r1, #1
10054b72:	7029      	strb	r1, [r5, #0]
10054b74:	2801      	cmp	r0, #1
10054b76:	d002      	beq.n	10054b7e <GAP_check_adv_status+0x5e>
10054b78:	b2f0      	uxtb	r0, r6
10054b7a:	2801      	cmp	r0, #1
10054b7c:	d102      	bne.n	10054b84 <GAP_check_adv_status+0x64>
10054b7e:	2000      	movs	r0, #0
10054b80:	9900      	ldr	r1, [sp, #0]
10054b82:	7008      	strb	r0, [r1, #0]
10054b84:	b2d0      	uxtb	r0, r2
10054b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054b88 <__arm_cp.17_0>:
10054b88:	20001128 	.word	0x20001128

10054b8c <__arm_cp.17_1>:
10054b8c:	20001188 	.word	0x20001188

10054b90 <GAP_ResumeAdvertising_ucfg_weak>:
10054b90:	b580      	push	{r7, lr}
10054b92:	2001      	movs	r0, #1
10054b94:	f7ff ff8c 	bl	10054ab0 <GAP_suspend_resume_active_advertising_sets_legacy>
10054b98:	bd80      	pop	{r7, pc}
	...

10054b9c <GAT_att_cmn_init>:
10054b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054b9e:	2001      	movs	r0, #1
10054ba0:	2198      	movs	r1, #152	@ 0x98
10054ba2:	f00a f9d3 	bl	1005ef4c <csmem_mem_0_assign>
10054ba6:	4e2b      	ldr	r6, [pc, #172]	@ (10054c54 <__arm_cp.1_0>)
10054ba8:	6030      	str	r0, [r6, #0]
10054baa:	4f2b      	ldr	r7, [pc, #172]	@ (10054c58 <__arm_cp.1_1>)
10054bac:	7af8      	ldrb	r0, [r7, #11]
10054bae:	7b39      	ldrb	r1, [r7, #12]
10054bb0:	1808      	adds	r0, r1, r0
10054bb2:	2414      	movs	r4, #20
10054bb4:	4621      	mov	r1, r4
10054bb6:	f00a f9c9 	bl	1005ef4c <csmem_mem_0_assign>
10054bba:	6832      	ldr	r2, [r6, #0]
10054bbc:	2500      	movs	r5, #0
10054bbe:	6355      	str	r5, [r2, #52]	@ 0x34
10054bc0:	62d5      	str	r5, [r2, #44]	@ 0x2c
10054bc2:	7af9      	ldrb	r1, [r7, #11]
10054bc4:	4603      	mov	r3, r0
10054bc6:	462f      	mov	r7, r5
10054bc8:	42b9      	cmp	r1, r7
10054bca:	d00a      	beq.n	10054be2 <GAT_att_cmn_init+0x46>
10054bcc:	611d      	str	r5, [r3, #16]
10054bce:	705f      	strb	r7, [r3, #1]
10054bd0:	701f      	strb	r7, [r3, #0]
10054bd2:	6832      	ldr	r2, [r6, #0]
10054bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
10054bd6:	4625      	mov	r5, r4
10054bd8:	437d      	muls	r5, r7
10054bda:	1945      	adds	r5, r0, r5
10054bdc:	3314      	adds	r3, #20
10054bde:	1c7f      	adds	r7, r7, #1
10054be0:	e7f2      	b.n	10054bc8 <GAT_att_cmn_init+0x2c>
10054be2:	2300      	movs	r3, #0
10054be4:	6313      	str	r3, [r2, #48]	@ 0x30
10054be6:	4a1c      	ldr	r2, [pc, #112]	@ (10054c58 <__arm_cp.1_1>)
10054be8:	7b12      	ldrb	r2, [r2, #12]
10054bea:	1852      	adds	r2, r2, r1
10054bec:	b2cd      	uxtb	r5, r1
10054bee:	42aa      	cmp	r2, r5
10054bf0:	d90a      	bls.n	10054c08 <GAT_att_cmn_init+0x6c>
10054bf2:	4365      	muls	r5, r4
10054bf4:	27ff      	movs	r7, #255	@ 0xff
10054bf6:	5547      	strb	r7, [r0, r5]
10054bf8:	1945      	adds	r5, r0, r5
10054bfa:	612b      	str	r3, [r5, #16]
10054bfc:	7069      	strb	r1, [r5, #1]
10054bfe:	6833      	ldr	r3, [r6, #0]
10054c00:	631d      	str	r5, [r3, #48]	@ 0x30
10054c02:	1c49      	adds	r1, r1, #1
10054c04:	462b      	mov	r3, r5
10054c06:	e7f1      	b.n	10054bec <GAT_att_cmn_init+0x50>
10054c08:	0690      	lsls	r0, r2, #26
10054c0a:	0e00      	lsrs	r0, r0, #24
10054c0c:	1c41      	adds	r1, r0, #1
10054c0e:	4c13      	ldr	r4, [pc, #76]	@ (10054c5c <__arm_cp.1_2>)
10054c10:	2201      	movs	r2, #1
10054c12:	4620      	mov	r0, r4
10054c14:	f00a f988 	bl	1005ef28 <csmem_mem_assign>
10054c18:	6831      	ldr	r1, [r6, #0]
10054c1a:	6208      	str	r0, [r1, #32]
10054c1c:	4d0e      	ldr	r5, [pc, #56]	@ (10054c58 <__arm_cp.1_1>)
10054c1e:	7ae8      	ldrb	r0, [r5, #11]
10054c20:	7b29      	ldrb	r1, [r5, #12]
10054c22:	1808      	adds	r0, r1, r0
10054c24:	0680      	lsls	r0, r0, #26
10054c26:	0e01      	lsrs	r1, r0, #24
10054c28:	2202      	movs	r2, #2
10054c2a:	4620      	mov	r0, r4
10054c2c:	f00a f97c 	bl	1005ef28 <csmem_mem_assign>
10054c30:	6834      	ldr	r4, [r6, #0]
10054c32:	6260      	str	r0, [r4, #36]	@ 0x24
10054c34:	7ae8      	ldrb	r0, [r5, #11]
10054c36:	7b29      	ldrb	r1, [r5, #12]
10054c38:	1808      	adds	r0, r1, r0
10054c3a:	0680      	lsls	r0, r0, #26
10054c3c:	0e01      	lsrs	r1, r0, #24
10054c3e:	4a08      	ldr	r2, [pc, #32]	@ (10054c60 <__arm_cp.1_3>)
10054c40:	2307      	movs	r3, #7
10054c42:	4620      	mov	r0, r4
10054c44:	f00d fa88 	bl	10062158 <CST_init>
10054c48:	f000 f9f2 	bl	10055030 <GAT_att_srv_init>
10054c4c:	f00e feea 	bl	10063a24 <GAT_att_clt_init>
10054c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10054c52:	46c0      	nop			@ (mov r8, r8)

10054c54 <__arm_cp.1_0>:
10054c54:	2000112c 	.word	0x2000112c

10054c58 <__arm_cp.1_1>:
10054c58:	20001188 	.word	0x20001188

10054c5c <__arm_cp.1_2>:
10054c5c:	20001184 	.word	0x20001184

10054c60 <__arm_cp.1_3>:
10054c60:	10054c65 	.word	0x10054c65

10054c64 <GAT_att_cmn_timeout_cb_wrapper>:
10054c64:	b580      	push	{r7, lr}
10054c66:	6940      	ldr	r0, [r0, #20]
10054c68:	4901      	ldr	r1, [pc, #4]	@ (10054c70 <__arm_cp.2_0>)
10054c6a:	f00d fb4e 	bl	1006230a <cst_sharedCallback>
10054c6e:	bd80      	pop	{r7, pc}

10054c70 <__arm_cp.2_0>:
10054c70:	10054fdd 	.word	0x10054fdd

10054c74 <GAT_att_cmn_timer_expire_tsk>:
10054c74:	b5e0      	push	{r5, r6, r7, lr}
10054c76:	2000      	movs	r0, #0
10054c78:	9000      	str	r0, [sp, #0]
10054c7a:	4b06      	ldr	r3, [pc, #24]	@ (10054c94 <__arm_cp.4_0>)
10054c7c:	4601      	mov	r1, r0
10054c7e:	4602      	mov	r2, r0
10054c80:	f000 f80a 	bl	10054c98 <GAT_att_cmn_for_each_ch_descr>
10054c84:	2800      	cmp	r0, #0
10054c86:	d004      	beq.n	10054c92 <GAT_att_cmn_timer_expire_tsk+0x1e>
10054c88:	2007      	movs	r0, #7
10054c8a:	f00d fa07 	bl	1006209c <tsk_notify_idx>
10054c8e:	f7ef f906 	bl	10043e9e <BLE_STACK_ProcessRequest>
10054c92:	bd8c      	pop	{r2, r3, r7, pc}

10054c94 <__arm_cp.4_0>:
10054c94:	10054cf5 	.word	0x10054cf5

10054c98 <GAT_att_cmn_for_each_ch_descr>:
10054c98:	b5f0      	push	{r4, r5, r6, r7, lr}
10054c9a:	b085      	sub	sp, #20
10054c9c:	9304      	str	r3, [sp, #16]
10054c9e:	9201      	str	r2, [sp, #4]
10054ca0:	9102      	str	r1, [sp, #8]
10054ca2:	4607      	mov	r7, r0
10054ca4:	2002      	movs	r0, #2
10054ca6:	4038      	ands	r0, r7
10054ca8:	9003      	str	r0, [sp, #12]
10054caa:	2401      	movs	r4, #1
10054cac:	403c      	ands	r4, r7
10054cae:	4810      	ldr	r0, [pc, #64]	@ (10054cf0 <__arm_cp.5_0>)
10054cb0:	6805      	ldr	r5, [r0, #0]
10054cb2:	3534      	adds	r5, #52	@ 0x34
10054cb4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10054cb6:	682d      	ldr	r5, [r5, #0]
10054cb8:	2d00      	cmp	r5, #0
10054cba:	d016      	beq.n	10054cea <GAT_att_cmn_for_each_ch_descr+0x52>
10054cbc:	2f00      	cmp	r7, #0
10054cbe:	d00c      	beq.n	10054cda <GAT_att_cmn_for_each_ch_descr+0x42>
10054cc0:	2c00      	cmp	r4, #0
10054cc2:	d003      	beq.n	10054ccc <GAT_att_cmn_for_each_ch_descr+0x34>
10054cc4:	8928      	ldrh	r0, [r5, #8]
10054cc6:	9902      	ldr	r1, [sp, #8]
10054cc8:	4288      	cmp	r0, r1
10054cca:	d10c      	bne.n	10054ce6 <GAT_att_cmn_for_each_ch_descr+0x4e>
10054ccc:	9803      	ldr	r0, [sp, #12]
10054cce:	2800      	cmp	r0, #0
10054cd0:	d003      	beq.n	10054cda <GAT_att_cmn_for_each_ch_descr+0x42>
10054cd2:	8968      	ldrh	r0, [r5, #10]
10054cd4:	9901      	ldr	r1, [sp, #4]
10054cd6:	4288      	cmp	r0, r1
10054cd8:	d105      	bne.n	10054ce6 <GAT_att_cmn_for_each_ch_descr+0x4e>
10054cda:	4628      	mov	r0, r5
10054cdc:	4631      	mov	r1, r6
10054cde:	9a04      	ldr	r2, [sp, #16]
10054ce0:	4790      	blx	r2
10054ce2:	2800      	cmp	r0, #0
10054ce4:	d102      	bne.n	10054cec <GAT_att_cmn_for_each_ch_descr+0x54>
10054ce6:	3510      	adds	r5, #16
10054ce8:	e7e5      	b.n	10054cb6 <GAT_att_cmn_for_each_ch_descr+0x1e>
10054cea:	2000      	movs	r0, #0
10054cec:	b005      	add	sp, #20
10054cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054cf0 <__arm_cp.5_0>:
10054cf0:	2000112c 	.word	0x2000112c

10054cf4 <GAT_att_cmn_handle_disconnec_iterate_f>:
10054cf4:	b5b0      	push	{r4, r5, r7, lr}
10054cf6:	4604      	mov	r4, r0
10054cf8:	8880      	ldrh	r0, [r0, #4]
10054cfa:	2500      	movs	r5, #0
10054cfc:	05c0      	lsls	r0, r0, #23
10054cfe:	d401      	bmi.n	10054d04 <GAT_att_cmn_handle_disconnec_iterate_f+0x10>
10054d00:	4628      	mov	r0, r5
10054d02:	e006      	b.n	10054d12 <GAT_att_cmn_handle_disconnec_iterate_f+0x1e>
10054d04:	8962      	ldrh	r2, [r4, #10]
10054d06:	8921      	ldrh	r1, [r4, #8]
10054d08:	2002      	movs	r0, #2
10054d0a:	f00e f871 	bl	10062df0 <aci_gatt_proc_timeout_event_push_noinline>
10054d0e:	2800      	cmp	r0, #0
10054d10:	d000      	beq.n	10054d14 <GAT_att_cmn_handle_disconnec_iterate_f+0x20>
10054d12:	bdb0      	pop	{r4, r5, r7, pc}
10054d14:	8920      	ldrh	r0, [r4, #8]
10054d16:	8961      	ldrh	r1, [r4, #10]
10054d18:	2904      	cmp	r1, #4
10054d1a:	d102      	bne.n	10054d22 <GAT_att_cmn_handle_disconnec_iterate_f+0x2e>
10054d1c:	f000 f8ac 	bl	10054e78 <GAT_att_cmn_disconnection>
10054d20:	e7ee      	b.n	10054d00 <GAT_att_cmn_handle_disconnec_iterate_f+0xc>
10054d22:	f000 fb17 	bl	10055354 <GAT_att_srv_bearer_close>
10054d26:	8961      	ldrh	r1, [r4, #10]
10054d28:	8920      	ldrh	r0, [r4, #8]
10054d2a:	f00e ff6c 	bl	10063c06 <GAT_att_clt_bearer_close>
10054d2e:	2000      	movs	r0, #0
10054d30:	8120      	strh	r0, [r4, #8]
10054d32:	4909      	ldr	r1, [pc, #36]	@ (10054d58 <__arm_cp.6_0>)
10054d34:	6809      	ldr	r1, [r1, #0]
10054d36:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
10054d38:	42a3      	cmp	r3, r4
10054d3a:	d005      	beq.n	10054d48 <GAT_att_cmn_handle_disconnec_iterate_f+0x54>
10054d3c:	461a      	mov	r2, r3
10054d3e:	691b      	ldr	r3, [r3, #16]
10054d40:	42a3      	cmp	r3, r4
10054d42:	d1fb      	bne.n	10054d3c <GAT_att_cmn_handle_disconnec_iterate_f+0x48>
10054d44:	3210      	adds	r2, #16
10054d46:	e001      	b.n	10054d4c <GAT_att_cmn_handle_disconnec_iterate_f+0x58>
10054d48:	460a      	mov	r2, r1
10054d4a:	3234      	adds	r2, #52	@ 0x34
10054d4c:	6923      	ldr	r3, [r4, #16]
10054d4e:	6013      	str	r3, [r2, #0]
10054d50:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
10054d52:	6122      	str	r2, [r4, #16]
10054d54:	630c      	str	r4, [r1, #48]	@ 0x30
10054d56:	bdb0      	pop	{r4, r5, r7, pc}

10054d58 <__arm_cp.6_0>:
10054d58:	2000112c 	.word	0x2000112c

10054d5c <GAT_att_cmn_tx_pool_evt_tsk>:
10054d5c:	b580      	push	{r7, lr}
10054d5e:	2000      	movs	r0, #0
10054d60:	f7fe f9a6 	bl	100530b0 <ACL_pkt_get_available_mem_buffers>
10054d64:	490d      	ldr	r1, [pc, #52]	@ (10054d9c <__arm_cp.8_0>)
10054d66:	8a09      	ldrh	r1, [r1, #16]
10054d68:	3125      	adds	r1, #37	@ 0x25
10054d6a:	0949      	lsrs	r1, r1, #5
10054d6c:	4288      	cmp	r0, r1
10054d6e:	d90f      	bls.n	10054d90 <GAT_att_cmn_tx_pool_evt_tsk+0x34>
10054d70:	1c49      	adds	r1, r1, #1
10054d72:	f7eb fa79 	bl	10040268 <__udivsi3>
10054d76:	4602      	mov	r2, r0
10054d78:	2042      	movs	r0, #66	@ 0x42
10054d7a:	2100      	movs	r1, #0
10054d7c:	f00e f974 	bl	10063068 <aci_gatt_tx_pool_available_event_push_noinline>
10054d80:	2800      	cmp	r0, #0
10054d82:	d004      	beq.n	10054d8e <GAT_att_cmn_tx_pool_evt_tsk+0x32>
10054d84:	2008      	movs	r0, #8
10054d86:	f00d f989 	bl	1006209c <tsk_notify_idx>
10054d8a:	f7ef f888 	bl	10043e9e <BLE_STACK_ProcessRequest>
10054d8e:	bd80      	pop	{r7, pc}
10054d90:	2008      	movs	r0, #8
10054d92:	2100      	movs	r1, #0
10054d94:	f00d f994 	bl	100620c0 <tsk_wait_resource_idx>
10054d98:	bd80      	pop	{r7, pc}
10054d9a:	46c0      	nop			@ (mov r8, r8)

10054d9c <__arm_cp.8_0>:
10054d9c:	20001188 	.word	0x20001188

10054da0 <GAT_att_cmn_rcv>:
10054da0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10054da2:	460c      	mov	r4, r1
10054da4:	2800      	cmp	r0, #0
10054da6:	d013      	beq.n	10054dd0 <GAT_att_cmn_rcv+0x30>
10054da8:	8825      	ldrh	r5, [r4, #0]
10054daa:	4620      	mov	r0, r4
10054dac:	f003 f823 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10054db0:	4601      	mov	r1, r0
10054db2:	4628      	mov	r0, r5
10054db4:	f000 f82e 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
10054db8:	2800      	cmp	r0, #0
10054dba:	d009      	beq.n	10054dd0 <GAT_att_cmn_rcv+0x30>
10054dbc:	8860      	ldrh	r0, [r4, #2]
10054dbe:	2800      	cmp	r0, #0
10054dc0:	d006      	beq.n	10054dd0 <GAT_att_cmn_rcv+0x30>
10054dc2:	89a1      	ldrh	r1, [r4, #12]
10054dc4:	291f      	cmp	r1, #31
10054dc6:	d808      	bhi.n	10054dda <GAT_att_cmn_rcv+0x3a>
10054dc8:	a801      	add	r0, sp, #4
10054dca:	8001      	strh	r1, [r0, #0]
10054dcc:	6860      	ldr	r0, [r4, #4]
10054dce:	e00a      	b.n	10054de6 <GAT_att_cmn_rcv+0x46>
10054dd0:	4620      	mov	r0, r4
10054dd2:	f7fe f973 	bl	100530bc <ACL_pkt_release>
10054dd6:	2000      	movs	r0, #0
10054dd8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10054dda:	6860      	ldr	r0, [r4, #4]
10054ddc:	ad01      	add	r5, sp, #4
10054dde:	462a      	mov	r2, r5
10054de0:	f00a f953 	bl	1005f08a <Mem_Buff_get_buff_off>
10054de4:	8829      	ldrh	r1, [r5, #0]
10054de6:	1840      	adds	r0, r0, r1
10054de8:	7900      	ldrb	r0, [r0, #4]
10054dea:	07c1      	lsls	r1, r0, #31
10054dec:	d104      	bne.n	10054df8 <GAT_att_cmn_rcv+0x58>
10054dee:	281b      	cmp	r0, #27
10054df0:	d008      	beq.n	10054e04 <GAT_att_cmn_rcv+0x64>
10054df2:	281d      	cmp	r0, #29
10054df4:	d006      	beq.n	10054e04 <GAT_att_cmn_rcv+0x64>
10054df6:	e009      	b.n	10054e0c <GAT_att_cmn_rcv+0x6c>
10054df8:	281e      	cmp	r0, #30
10054dfa:	d303      	bcc.n	10054e04 <GAT_att_cmn_rcv+0x64>
10054dfc:	2102      	movs	r1, #2
10054dfe:	4308      	orrs	r0, r1
10054e00:	2823      	cmp	r0, #35	@ 0x23
10054e02:	d103      	bne.n	10054e0c <GAT_att_cmn_rcv+0x6c>
10054e04:	4620      	mov	r0, r4
10054e06:	f00e fe11 	bl	10063a2c <GAT_att_clt_rcv>
10054e0a:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10054e0c:	4620      	mov	r0, r4
10054e0e:	f000 f927 	bl	10055060 <GAT_att_srv_rcv>
10054e12:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10054e14 <GAT_att_cmn_get_channel_descr_p>:
10054e14:	4a07      	ldr	r2, [pc, #28]	@ (10054e34 <__arm_cp.10_0>)
10054e16:	6812      	ldr	r2, [r2, #0]
10054e18:	3234      	adds	r2, #52	@ 0x34
10054e1a:	6812      	ldr	r2, [r2, #0]
10054e1c:	2a00      	cmp	r2, #0
10054e1e:	d007      	beq.n	10054e30 <GAT_att_cmn_get_channel_descr_p+0x1c>
10054e20:	8913      	ldrh	r3, [r2, #8]
10054e22:	4283      	cmp	r3, r0
10054e24:	d102      	bne.n	10054e2c <GAT_att_cmn_get_channel_descr_p+0x18>
10054e26:	8953      	ldrh	r3, [r2, #10]
10054e28:	428b      	cmp	r3, r1
10054e2a:	d001      	beq.n	10054e30 <GAT_att_cmn_get_channel_descr_p+0x1c>
10054e2c:	3210      	adds	r2, #16
10054e2e:	e7f4      	b.n	10054e1a <GAT_att_cmn_get_channel_descr_p+0x6>
10054e30:	4610      	mov	r0, r2
10054e32:	4770      	bx	lr

10054e34 <__arm_cp.10_0>:
10054e34:	2000112c 	.word	0x2000112c

10054e38 <GAT_att_cmn_connection>:
10054e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054e3a:	4604      	mov	r4, r0
10054e3c:	4e0d      	ldr	r6, [pc, #52]	@ (10054e74 <__arm_cp.11_0>)
10054e3e:	6830      	ldr	r0, [r6, #0]
10054e40:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
10054e42:	6929      	ldr	r1, [r5, #16]
10054e44:	62c1      	str	r1, [r0, #44]	@ 0x2c
10054e46:	882f      	ldrh	r7, [r5, #0]
10054e48:	2100      	movs	r1, #0
10054e4a:	2214      	movs	r2, #20
10054e4c:	4628      	mov	r0, r5
10054e4e:	f7f1 f823 	bl	10045e98 <BLEPLAT_MemSet>
10054e52:	2004      	movs	r0, #4
10054e54:	8168      	strh	r0, [r5, #10]
10054e56:	2017      	movs	r0, #23
10054e58:	80e8      	strh	r0, [r5, #6]
10054e5a:	812c      	strh	r4, [r5, #8]
10054e5c:	802f      	strh	r7, [r5, #0]
10054e5e:	6830      	ldr	r0, [r6, #0]
10054e60:	6b41      	ldr	r1, [r0, #52]	@ 0x34
10054e62:	6345      	str	r5, [r0, #52]	@ 0x34
10054e64:	6129      	str	r1, [r5, #16]
10054e66:	4620      	mov	r0, r4
10054e68:	f000 fa70 	bl	1005534c <GAT_att_srv_connection>
10054e6c:	4620      	mov	r0, r4
10054e6e:	f00e fec6 	bl	10063bfe <GAT_att_clt_connection>
10054e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054e74 <__arm_cp.11_0>:
10054e74:	2000112c 	.word	0x2000112c

10054e78 <GAT_att_cmn_disconnection>:
10054e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054e7a:	4604      	mov	r4, r0
10054e7c:	f00c ff99 	bl	10061db2 <smp_sap_forget_device_upon_disconnection>
10054e80:	481c      	ldr	r0, [pc, #112]	@ (10054ef4 <__arm_cp.12_0>)
10054e82:	6800      	ldr	r0, [r0, #0]
10054e84:	6b46      	ldr	r6, [r0, #52]	@ 0x34
10054e86:	2e00      	cmp	r6, #0
10054e88:	d032      	beq.n	10054ef0 <GAT_att_cmn_disconnection+0x78>
10054e8a:	4637      	mov	r7, r6
10054e8c:	6936      	ldr	r6, [r6, #16]
10054e8e:	8938      	ldrh	r0, [r7, #8]
10054e90:	42a0      	cmp	r0, r4
10054e92:	d1f8      	bne.n	10054e86 <GAT_att_cmn_disconnection+0xe>
10054e94:	2500      	movs	r5, #0
10054e96:	897a      	ldrh	r2, [r7, #10]
10054e98:	b2e8      	uxtb	r0, r5
10054e9a:	2803      	cmp	r0, #3
10054e9c:	d804      	bhi.n	10054ea8 <GAT_att_cmn_disconnection+0x30>
10054e9e:	4621      	mov	r1, r4
10054ea0:	f000 f82a 	bl	10054ef8 <GAT_att_cmn_stop_timer>
10054ea4:	1c6d      	adds	r5, r5, #1
10054ea6:	e7f6      	b.n	10054e96 <GAT_att_cmn_disconnection+0x1e>
10054ea8:	4620      	mov	r0, r4
10054eaa:	4611      	mov	r1, r2
10054eac:	f000 fa52 	bl	10055354 <GAT_att_srv_bearer_close>
10054eb0:	8979      	ldrh	r1, [r7, #10]
10054eb2:	4620      	mov	r0, r4
10054eb4:	f00e fea7 	bl	10063c06 <GAT_att_clt_bearer_close>
10054eb8:	2000      	movs	r0, #0
10054eba:	8138      	strh	r0, [r7, #8]
10054ebc:	480d      	ldr	r0, [pc, #52]	@ (10054ef4 <__arm_cp.12_0>)
10054ebe:	6800      	ldr	r0, [r0, #0]
10054ec0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
10054ec2:	42ba      	cmp	r2, r7
10054ec4:	d005      	beq.n	10054ed2 <GAT_att_cmn_disconnection+0x5a>
10054ec6:	4611      	mov	r1, r2
10054ec8:	6912      	ldr	r2, [r2, #16]
10054eca:	42ba      	cmp	r2, r7
10054ecc:	d1fb      	bne.n	10054ec6 <GAT_att_cmn_disconnection+0x4e>
10054ece:	3110      	adds	r1, #16
10054ed0:	e001      	b.n	10054ed6 <GAT_att_cmn_disconnection+0x5e>
10054ed2:	4601      	mov	r1, r0
10054ed4:	3134      	adds	r1, #52	@ 0x34
10054ed6:	693a      	ldr	r2, [r7, #16]
10054ed8:	600a      	str	r2, [r1, #0]
10054eda:	8979      	ldrh	r1, [r7, #10]
10054edc:	2904      	cmp	r1, #4
10054ede:	d103      	bne.n	10054ee8 <GAT_att_cmn_disconnection+0x70>
10054ee0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
10054ee2:	6139      	str	r1, [r7, #16]
10054ee4:	62c7      	str	r7, [r0, #44]	@ 0x2c
10054ee6:	e7ce      	b.n	10054e86 <GAT_att_cmn_disconnection+0xe>
10054ee8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
10054eea:	6139      	str	r1, [r7, #16]
10054eec:	6307      	str	r7, [r0, #48]	@ 0x30
10054eee:	e7ca      	b.n	10054e86 <GAT_att_cmn_disconnection+0xe>
10054ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10054ef2:	46c0      	nop			@ (mov r8, r8)

10054ef4 <__arm_cp.12_0>:
10054ef4:	2000112c 	.word	0x2000112c

10054ef8 <GAT_att_cmn_stop_timer>:
10054ef8:	b510      	push	{r4, lr}
10054efa:	4604      	mov	r4, r0
10054efc:	4608      	mov	r0, r1
10054efe:	4611      	mov	r1, r2
10054f00:	f000 f858 	bl	10054fb4 <GAT_att_cmn_get_timer_index>
10054f04:	0080      	lsls	r0, r0, #2
10054f06:	1900      	adds	r0, r0, r4
10054f08:	b2c1      	uxtb	r1, r0
10054f0a:	4802      	ldr	r0, [pc, #8]	@ (10054f14 <__arm_cp.13_0>)
10054f0c:	6800      	ldr	r0, [r0, #0]
10054f0e:	f00d f938 	bl	10062182 <CST_stop>
10054f12:	bd10      	pop	{r4, pc}

10054f14 <__arm_cp.13_0>:
10054f14:	2000112c 	.word	0x2000112c

10054f18 <GAT_att_cmn_send>:
10054f18:	b5b0      	push	{r4, r5, r7, lr}
10054f1a:	460c      	mov	r4, r1
10054f1c:	4605      	mov	r5, r0
10054f1e:	8848      	ldrh	r0, [r1, #2]
10054f20:	1d00      	adds	r0, r0, #4
10054f22:	b281      	uxth	r1, r0
10054f24:	4620      	mov	r0, r4
10054f26:	f7fe f8d2 	bl	100530ce <ACL_pkt_resize>
10054f2a:	4628      	mov	r0, r5
10054f2c:	4621      	mov	r1, r4
10054f2e:	f003 f88d 	bl	1005804c <L2C_send_frame>
10054f32:	2800      	cmp	r0, #0
10054f34:	d004      	beq.n	10054f40 <GAT_att_cmn_send+0x28>
10054f36:	4620      	mov	r0, r4
10054f38:	f7fe f8c0 	bl	100530bc <ACL_pkt_release>
10054f3c:	2081      	movs	r0, #129	@ 0x81
10054f3e:	bdb0      	pop	{r4, r5, r7, pc}
10054f40:	2000      	movs	r0, #0
10054f42:	bdb0      	pop	{r4, r5, r7, pc}

10054f44 <GAT_att_cmn_dscr_flag_check_is_not_set_f>:
10054f44:	8809      	ldrh	r1, [r1, #0]
10054f46:	8880      	ldrh	r0, [r0, #4]
10054f48:	4008      	ands	r0, r1
10054f4a:	d000      	beq.n	10054f4e <GAT_att_cmn_dscr_flag_check_is_not_set_f+0xa>
10054f4c:	2086      	movs	r0, #134	@ 0x86
10054f4e:	4770      	bx	lr

10054f50 <GAT_att_cmn_dscr_flag_set_f>:
10054f50:	8809      	ldrh	r1, [r1, #0]
10054f52:	8882      	ldrh	r2, [r0, #4]
10054f54:	430a      	orrs	r2, r1
10054f56:	8082      	strh	r2, [r0, #4]
10054f58:	2000      	movs	r0, #0
10054f5a:	4770      	bx	lr

10054f5c <GAT_att_cmn_dscr_flag_clear_f>:
10054f5c:	8809      	ldrh	r1, [r1, #0]
10054f5e:	8882      	ldrh	r2, [r0, #4]
10054f60:	438a      	bics	r2, r1
10054f62:	8082      	strh	r2, [r0, #4]
10054f64:	2000      	movs	r0, #0
10054f66:	4770      	bx	lr

10054f68 <GAT_att_cmn_get_conn_index>:
10054f68:	4907      	ldr	r1, [pc, #28]	@ (10054f88 <__arm_cp.22_0>)
10054f6a:	6809      	ldr	r1, [r1, #0]
10054f6c:	3134      	adds	r1, #52	@ 0x34
10054f6e:	6809      	ldr	r1, [r1, #0]
10054f70:	2900      	cmp	r1, #0
10054f72:	d004      	beq.n	10054f7e <GAT_att_cmn_get_conn_index+0x16>
10054f74:	890a      	ldrh	r2, [r1, #8]
10054f76:	4282      	cmp	r2, r0
10054f78:	d003      	beq.n	10054f82 <GAT_att_cmn_get_conn_index+0x1a>
10054f7a:	3110      	adds	r1, #16
10054f7c:	e7f7      	b.n	10054f6e <GAT_att_cmn_get_conn_index+0x6>
10054f7e:	20ff      	movs	r0, #255	@ 0xff
10054f80:	4770      	bx	lr
10054f82:	7808      	ldrb	r0, [r1, #0]
10054f84:	4770      	bx	lr
10054f86:	46c0      	nop			@ (mov r8, r8)

10054f88 <__arm_cp.22_0>:
10054f88:	2000112c 	.word	0x2000112c

10054f8c <GAT_att_cmn_start_timer>:
10054f8c:	b510      	push	{r4, lr}
10054f8e:	4604      	mov	r4, r0
10054f90:	4608      	mov	r0, r1
10054f92:	4611      	mov	r1, r2
10054f94:	f000 f80e 	bl	10054fb4 <GAT_att_cmn_get_timer_index>
10054f98:	0080      	lsls	r0, r0, #2
10054f9a:	1900      	adds	r0, r0, r4
10054f9c:	b2c1      	uxtb	r1, r0
10054f9e:	4803      	ldr	r0, [pc, #12]	@ (10054fac <__arm_cp.23_0>)
10054fa0:	6800      	ldr	r0, [r0, #0]
10054fa2:	2200      	movs	r2, #0
10054fa4:	4b02      	ldr	r3, [pc, #8]	@ (10054fb0 <__arm_cp.23_1>)
10054fa6:	f00d f922 	bl	100621ee <CST_start>
10054faa:	bd10      	pop	{r4, pc}

10054fac <__arm_cp.23_0>:
10054fac:	2000112c 	.word	0x2000112c

10054fb0 <__arm_cp.23_1>:
10054fb0:	00007530 	.word	0x00007530

10054fb4 <GAT_att_cmn_get_timer_index>:
10054fb4:	4a08      	ldr	r2, [pc, #32]	@ (10054fd8 <__arm_cp.24_0>)
10054fb6:	6812      	ldr	r2, [r2, #0]
10054fb8:	3234      	adds	r2, #52	@ 0x34
10054fba:	6812      	ldr	r2, [r2, #0]
10054fbc:	2a00      	cmp	r2, #0
10054fbe:	d007      	beq.n	10054fd0 <GAT_att_cmn_get_timer_index+0x1c>
10054fc0:	8913      	ldrh	r3, [r2, #8]
10054fc2:	4283      	cmp	r3, r0
10054fc4:	d102      	bne.n	10054fcc <GAT_att_cmn_get_timer_index+0x18>
10054fc6:	8953      	ldrh	r3, [r2, #10]
10054fc8:	428b      	cmp	r3, r1
10054fca:	d003      	beq.n	10054fd4 <GAT_att_cmn_get_timer_index+0x20>
10054fcc:	3210      	adds	r2, #16
10054fce:	e7f4      	b.n	10054fba <GAT_att_cmn_get_timer_index+0x6>
10054fd0:	20ff      	movs	r0, #255	@ 0xff
10054fd2:	4770      	bx	lr
10054fd4:	7850      	ldrb	r0, [r2, #1]
10054fd6:	4770      	bx	lr

10054fd8 <__arm_cp.24_0>:
10054fd8:	2000112c 	.word	0x2000112c

10054fdc <GAT_att_cmn_timeout_cb>:
10054fdc:	b580      	push	{r7, lr}
10054fde:	0881      	lsrs	r1, r0, #2
10054fe0:	480a      	ldr	r0, [pc, #40]	@ (1005500c <__arm_cp.25_0>)
10054fe2:	6800      	ldr	r0, [r0, #0]
10054fe4:	3034      	adds	r0, #52	@ 0x34
10054fe6:	6800      	ldr	r0, [r0, #0]
10054fe8:	2800      	cmp	r0, #0
10054fea:	d00e      	beq.n	1005500a <GAT_att_cmn_timeout_cb+0x2e>
10054fec:	7842      	ldrb	r2, [r0, #1]
10054fee:	428a      	cmp	r2, r1
10054ff0:	d001      	beq.n	10054ff6 <GAT_att_cmn_timeout_cb+0x1a>
10054ff2:	3010      	adds	r0, #16
10054ff4:	e7f7      	b.n	10054fe6 <GAT_att_cmn_timeout_cb+0xa>
10054ff6:	2101      	movs	r1, #1
10054ff8:	0209      	lsls	r1, r1, #8
10054ffa:	8882      	ldrh	r2, [r0, #4]
10054ffc:	430a      	orrs	r2, r1
10054ffe:	8082      	strh	r2, [r0, #4]
10055000:	2007      	movs	r0, #7
10055002:	f00d f84b 	bl	1006209c <tsk_notify_idx>
10055006:	f7ee ff4a 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005500a:	bd80      	pop	{r7, pc}

1005500c <__arm_cp.25_0>:
1005500c:	2000112c 	.word	0x2000112c

10055010 <GAT_att_cmn_get_pckt>:
10055010:	b510      	push	{r4, lr}
10055012:	8944      	ldrh	r4, [r0, #10]
10055014:	2c04      	cmp	r4, #4
10055016:	d000      	beq.n	1005501a <GAT_att_cmn_get_pckt+0xa>
10055018:	2406      	movs	r4, #6
1005501a:	1861      	adds	r1, r4, r1
1005501c:	b28a      	uxth	r2, r1
1005501e:	8901      	ldrh	r1, [r0, #8]
10055020:	2000      	movs	r0, #0
10055022:	f7fe f829 	bl	10053078 <ACL_pkt_get>
10055026:	2800      	cmp	r0, #0
10055028:	d000      	beq.n	1005502c <GAT_att_cmn_get_pckt+0x1c>
1005502a:	8184      	strh	r4, [r0, #12]
1005502c:	bd10      	pop	{r4, pc}
	...

10055030 <GAT_att_srv_init>:
10055030:	b510      	push	{r4, lr}
10055032:	4c08      	ldr	r4, [pc, #32]	@ (10055054 <__arm_cp.0_0>)
10055034:	6820      	ldr	r0, [r4, #0]
10055036:	3040      	adds	r0, #64	@ 0x40
10055038:	f00d fa22 	bl	10062480 <ACL_list_init>
1005503c:	6820      	ldr	r0, [r4, #0]
1005503e:	3038      	adds	r0, #56	@ 0x38
10055040:	f00d fa1e 	bl	10062480 <ACL_list_init>
10055044:	4804      	ldr	r0, [pc, #16]	@ (10055058 <__arm_cp.0_1>)
10055046:	4905      	ldr	r1, [pc, #20]	@ (1005505c <__arm_cp.0_2>)
10055048:	223c      	movs	r2, #60	@ 0x3c
1005504a:	f7f0 ff15 	bl	10045e78 <BLEPLAT_MemCpy>
1005504e:	f001 f8f9 	bl	10056244 <GAT_srv_init>
10055052:	bd10      	pop	{r4, pc}

10055054 <__arm_cp.0_0>:
10055054:	2000112c 	.word	0x2000112c

10055058 <__arm_cp.0_1>:
10055058:	20001130 	.word	0x20001130

1005505c <__arm_cp.0_2>:
1005505c:	1006cfa8 	.word	0x1006cfa8

10055060 <GAT_att_srv_rcv>:
10055060:	b5f0      	push	{r4, r5, r6, r7, lr}
10055062:	b087      	sub	sp, #28
10055064:	4604      	mov	r4, r0
10055066:	8805      	ldrh	r5, [r0, #0]
10055068:	f002 fec5 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
1005506c:	4601      	mov	r1, r0
1005506e:	4628      	mov	r0, r5
10055070:	f7ff fed0 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
10055074:	4605      	mov	r5, r0
10055076:	4620      	mov	r0, r4
10055078:	f000 f858 	bl	1005512c <GAT_att_cmn_get_opcode>
1005507c:	4606      	mov	r6, r0
1005507e:	f000 f85b 	bl	10055138 <GAT_att_srv_get_exec_fn_id_by_op>
10055082:	280f      	cmp	r0, #15
10055084:	d119      	bne.n	100550ba <GAT_att_srv_rcv+0x5a>
10055086:	2e1e      	cmp	r6, #30
10055088:	d047      	beq.n	1005511a <GAT_att_srv_rcv+0xba>
1005508a:	2040      	movs	r0, #64	@ 0x40
1005508c:	4030      	ands	r0, r6
1005508e:	d144      	bne.n	1005511a <GAT_att_srv_rcv+0xba>
10055090:	2105      	movs	r1, #5
10055092:	4628      	mov	r0, r5
10055094:	f7ff ffbc 	bl	10055010 <GAT_att_cmn_get_pckt>
10055098:	2800      	cmp	r0, #0
1005509a:	d045      	beq.n	10055128 <GAT_att_srv_rcv+0xc8>
1005509c:	4607      	mov	r7, r0
1005509e:	2100      	movs	r1, #0
100550a0:	2206      	movs	r2, #6
100550a2:	4630      	mov	r0, r6
100550a4:	463b      	mov	r3, r7
100550a6:	f000 fafd 	bl	100556a4 <GAT_att_srv_write_err_packet>
100550aa:	8968      	ldrh	r0, [r5, #10]
100550ac:	4639      	mov	r1, r7
100550ae:	f7ff ff33 	bl	10054f18 <GAT_att_cmn_send>
100550b2:	4607      	mov	r7, r0
100550b4:	2800      	cmp	r0, #0
100550b6:	d134      	bne.n	10055122 <GAT_att_srv_rcv+0xc2>
100550b8:	e02f      	b.n	1005511a <GAT_att_srv_rcv+0xba>
100550ba:	9501      	str	r5, [sp, #4]
100550bc:	2500      	movs	r5, #0
100550be:	2e1e      	cmp	r6, #30
100550c0:	462f      	mov	r7, r5
100550c2:	d016      	beq.n	100550f2 <GAT_att_srv_rcv+0x92>
100550c4:	2040      	movs	r0, #64	@ 0x40
100550c6:	4006      	ands	r6, r0
100550c8:	462f      	mov	r7, r5
100550ca:	d112      	bne.n	100550f2 <GAT_att_srv_rcv+0x92>
100550cc:	9b01      	ldr	r3, [sp, #4]
100550ce:	8898      	ldrh	r0, [r3, #4]
100550d0:	07c0      	lsls	r0, r0, #31
100550d2:	d118      	bne.n	10055106 <GAT_att_srv_rcv+0xa6>
100550d4:	895a      	ldrh	r2, [r3, #10]
100550d6:	8919      	ldrh	r1, [r3, #8]
100550d8:	2600      	movs	r6, #0
100550da:	4630      	mov	r0, r6
100550dc:	f7ff ff56 	bl	10054f8c <GAT_att_cmn_start_timer>
100550e0:	4607      	mov	r7, r0
100550e2:	2800      	cmp	r0, #0
100550e4:	d105      	bne.n	100550f2 <GAT_att_srv_rcv+0x92>
100550e6:	9a01      	ldr	r2, [sp, #4]
100550e8:	8890      	ldrh	r0, [r2, #4]
100550ea:	2101      	movs	r1, #1
100550ec:	4301      	orrs	r1, r0
100550ee:	8091      	strh	r1, [r2, #4]
100550f0:	4637      	mov	r7, r6
100550f2:	a802      	add	r0, sp, #8
100550f4:	8005      	strh	r5, [r0, #0]
100550f6:	9506      	str	r5, [sp, #24]
100550f8:	9505      	str	r5, [sp, #20]
100550fa:	9901      	ldr	r1, [sp, #4]
100550fc:	9104      	str	r1, [sp, #16]
100550fe:	9403      	str	r4, [sp, #12]
10055100:	f000 f854 	bl	100551ac <GAT_att_srv_run>
10055104:	e00d      	b.n	10055122 <GAT_att_srv_rcv+0xc2>
10055106:	3308      	adds	r3, #8
10055108:	2042      	movs	r0, #66	@ 0x42
1005510a:	2103      	movs	r1, #3
1005510c:	2202      	movs	r2, #2
1005510e:	f00e fbd9 	bl	100638c4 <aci_hal_fw_error_event_push_noinline>
10055112:	2800      	cmp	r0, #0
10055114:	d001      	beq.n	1005511a <GAT_att_srv_rcv+0xba>
10055116:	2784      	movs	r7, #132	@ 0x84
10055118:	e003      	b.n	10055122 <GAT_att_srv_rcv+0xc2>
1005511a:	4620      	mov	r0, r4
1005511c:	f7fd ffce 	bl	100530bc <ACL_pkt_release>
10055120:	2700      	movs	r7, #0
10055122:	4638      	mov	r0, r7
10055124:	b007      	add	sp, #28
10055126:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055128:	2788      	movs	r7, #136	@ 0x88
1005512a:	e7fa      	b.n	10055122 <GAT_att_srv_rcv+0xc2>

1005512c <GAT_att_cmn_get_opcode>:
1005512c:	b580      	push	{r7, lr}
1005512e:	8981      	ldrh	r1, [r0, #12]
10055130:	f001 f84d 	bl	100561ce <ACL_pkt_read_8b>
10055134:	bd80      	pop	{r7, pc}
	...

10055138 <GAT_att_srv_get_exec_fn_id_by_op>:
10055138:	1e81      	subs	r1, r0, #2
1005513a:	291e      	cmp	r1, #30
1005513c:	d816      	bhi.n	1005516c <GAT_att_srv_get_exec_fn_id_by_op+0x34>
1005513e:	2000      	movs	r0, #0
10055140:	4479      	add	r1, pc
10055142:	7909      	ldrb	r1, [r1, #4]
10055144:	0049      	lsls	r1, r1, #1
10055146:	448f      	add	pc, r1
10055148:	170f1718 	.word	0x170f1718
1005514c:	171b1719 	.word	0x171b1719
10055150:	171f171d 	.word	0x171f171d
10055154:	17231721 	.word	0x17231721
10055158:	17171725 	.word	0x17171725
1005515c:	17291727 	.word	0x17291727
10055160:	17171717 	.word	0x17171717
10055164:	002d172b 	.word	0x002d172b
10055168:	2001      	movs	r0, #1
1005516a:	4770      	bx	lr
1005516c:	2852      	cmp	r0, #82	@ 0x52
1005516e:	d01b      	beq.n	100551a8 <GAT_att_srv_get_exec_fn_id_by_op+0x70>
10055170:	28d2      	cmp	r0, #210	@ 0xd2
10055172:	d101      	bne.n	10055178 <GAT_att_srv_get_exec_fn_id_by_op+0x40>
10055174:	200a      	movs	r0, #10
10055176:	4770      	bx	lr
10055178:	200f      	movs	r0, #15
1005517a:	4770      	bx	lr
1005517c:	2002      	movs	r0, #2
1005517e:	4770      	bx	lr
10055180:	2003      	movs	r0, #3
10055182:	4770      	bx	lr
10055184:	2004      	movs	r0, #4
10055186:	4770      	bx	lr
10055188:	2005      	movs	r0, #5
1005518a:	4770      	bx	lr
1005518c:	2006      	movs	r0, #6
1005518e:	4770      	bx	lr
10055190:	2007      	movs	r0, #7
10055192:	4770      	bx	lr
10055194:	2008      	movs	r0, #8
10055196:	4770      	bx	lr
10055198:	200b      	movs	r0, #11
1005519a:	4770      	bx	lr
1005519c:	200c      	movs	r0, #12
1005519e:	4770      	bx	lr
100551a0:	200d      	movs	r0, #13
100551a2:	4770      	bx	lr
100551a4:	200e      	movs	r0, #14
100551a6:	4770      	bx	lr
100551a8:	2009      	movs	r0, #9
100551aa:	4770      	bx	lr

100551ac <GAT_att_srv_run>:
100551ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100551ae:	b085      	sub	sp, #20
100551b0:	4604      	mov	r4, r0
100551b2:	7800      	ldrb	r0, [r0, #0]
100551b4:	2800      	cmp	r0, #0
100551b6:	d107      	bne.n	100551c8 <GAT_att_srv_run+0x1c>
100551b8:	6860      	ldr	r0, [r4, #4]
100551ba:	f7ff ffb7 	bl	1005512c <GAT_att_cmn_get_opcode>
100551be:	7060      	strb	r0, [r4, #1]
100551c0:	68a5      	ldr	r5, [r4, #8]
100551c2:	68e8      	ldr	r0, [r5, #12]
100551c4:	2800      	cmp	r0, #0
100551c6:	d03c      	beq.n	10055242 <GAT_att_srv_run+0x96>
100551c8:	7865      	ldrb	r5, [r4, #1]
100551ca:	4628      	mov	r0, r5
100551cc:	f7ff ffb4 	bl	10055138 <GAT_att_srv_get_exec_fn_id_by_op>
100551d0:	280e      	cmp	r0, #14
100551d2:	d808      	bhi.n	100551e6 <GAT_att_srv_run+0x3a>
100551d4:	0080      	lsls	r0, r0, #2
100551d6:	495b      	ldr	r1, [pc, #364]	@ (10055344 <__arm_cp.4_3>)
100551d8:	5809      	ldr	r1, [r1, r0]
100551da:	2900      	cmp	r1, #0
100551dc:	d003      	beq.n	100551e6 <GAT_att_srv_run+0x3a>
100551de:	4620      	mov	r0, r4
100551e0:	4788      	blx	r1
100551e2:	4607      	mov	r7, r0
100551e4:	e007      	b.n	100551f6 <GAT_att_srv_run+0x4a>
100551e6:	68a0      	ldr	r0, [r4, #8]
100551e8:	68c3      	ldr	r3, [r0, #12]
100551ea:	2100      	movs	r1, #0
100551ec:	2206      	movs	r2, #6
100551ee:	4628      	mov	r0, r5
100551f0:	f000 fa58 	bl	100556a4 <GAT_att_srv_write_err_packet>
100551f4:	2786      	movs	r7, #134	@ 0x86
100551f6:	6861      	ldr	r1, [r4, #4]
100551f8:	2900      	cmp	r1, #0
100551fa:	d019      	beq.n	10055230 <GAT_att_srv_run+0x84>
100551fc:	2f88      	cmp	r7, #136	@ 0x88
100551fe:	d003      	beq.n	10055208 <GAT_att_srv_run+0x5c>
10055200:	2f84      	cmp	r7, #132	@ 0x84
10055202:	d00c      	beq.n	1005521e <GAT_att_srv_run+0x72>
10055204:	2f07      	cmp	r7, #7
10055206:	d110      	bne.n	1005522a <GAT_att_srv_run+0x7e>
10055208:	484f      	ldr	r0, [pc, #316]	@ (10055348 <__arm_cp.4_4>)
1005520a:	6800      	ldr	r0, [r0, #0]
1005520c:	3040      	adds	r0, #64	@ 0x40
1005520e:	f00d f93b 	bl	10062488 <ACL_list_insert_tail>
10055212:	2009      	movs	r0, #9
10055214:	f00c ff42 	bl	1006209c <tsk_notify_idx>
10055218:	f7ee fe41 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005521c:	e008      	b.n	10055230 <GAT_att_srv_run+0x84>
1005521e:	484a      	ldr	r0, [pc, #296]	@ (10055348 <__arm_cp.4_4>)
10055220:	6800      	ldr	r0, [r0, #0]
10055222:	3038      	adds	r0, #56	@ 0x38
10055224:	f00d f930 	bl	10062488 <ACL_list_insert_tail>
10055228:	e009      	b.n	1005523e <GAT_att_srv_run+0x92>
1005522a:	4608      	mov	r0, r1
1005522c:	f7fd ff46 	bl	100530bc <ACL_pkt_release>
10055230:	2f86      	cmp	r7, #134	@ 0x86
10055232:	d001      	beq.n	10055238 <GAT_att_srv_run+0x8c>
10055234:	2f00      	cmp	r7, #0
10055236:	d102      	bne.n	1005523e <GAT_att_srv_run+0x92>
10055238:	68a0      	ldr	r0, [r4, #8]
1005523a:	f000 fa47 	bl	100556cc <GAT_att_srv_send_response>
1005523e:	b005      	add	sp, #20
10055240:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055242:	6867      	ldr	r7, [r4, #4]
10055244:	4638      	mov	r0, r7
10055246:	f7ff ff71 	bl	1005512c <GAT_att_cmn_get_opcode>
1005524a:	4606      	mov	r6, r0
1005524c:	f7ff ff74 	bl	10055138 <GAT_att_srv_get_exec_fn_id_by_op>
10055250:	8879      	ldrh	r1, [r7, #2]
10055252:	88ea      	ldrh	r2, [r5, #6]
10055254:	2304      	movs	r3, #4
10055256:	9302      	str	r3, [sp, #8]
10055258:	2300      	movs	r3, #0
1005525a:	4291      	cmp	r1, r2
1005525c:	d83e      	bhi.n	100552dc <GAT_att_srv_run+0x130>
1005525e:	280e      	cmp	r0, #14
10055260:	d83c      	bhi.n	100552dc <GAT_att_srv_run+0x130>
10055262:	9301      	str	r3, [sp, #4]
10055264:	0042      	lsls	r2, r0, #1
10055266:	4b34      	ldr	r3, [pc, #208]	@ (10055338 <__arm_cp.4_0>)
10055268:	5a9a      	ldrh	r2, [r3, r2]
1005526a:	4b34      	ldr	r3, [pc, #208]	@ (1005533c <__arm_cp.4_1>)
1005526c:	40c3      	lsrs	r3, r0
1005526e:	07db      	lsls	r3, r3, #31
10055270:	d105      	bne.n	1005527e <GAT_att_srv_run+0xd2>
10055272:	2380      	movs	r3, #128	@ 0x80
10055274:	439a      	bics	r2, r3
10055276:	4291      	cmp	r1, r2
10055278:	9b01      	ldr	r3, [sp, #4]
1005527a:	d003      	beq.n	10055284 <GAT_att_srv_run+0xd8>
1005527c:	e02e      	b.n	100552dc <GAT_att_srv_run+0x130>
1005527e:	4291      	cmp	r1, r2
10055280:	9b01      	ldr	r3, [sp, #4]
10055282:	d32b      	bcc.n	100552dc <GAT_att_srv_run+0x130>
10055284:	1e41      	subs	r1, r0, #1
10055286:	2903      	cmp	r1, #3
10055288:	d301      	bcc.n	1005528e <GAT_att_srv_run+0xe2>
1005528a:	2807      	cmp	r0, #7
1005528c:	d10d      	bne.n	100552aa <GAT_att_srv_run+0xfe>
1005528e:	a904      	add	r1, sp, #16
10055290:	aa03      	add	r2, sp, #12
10055292:	9202      	str	r2, [sp, #8]
10055294:	4638      	mov	r0, r7
10055296:	460f      	mov	r7, r1
10055298:	f000 ff49 	bl	1005612e <GAT_att_srv_get_handle_range>
1005529c:	883b      	ldrh	r3, [r7, #0]
1005529e:	9802      	ldr	r0, [sp, #8]
100552a0:	8800      	ldrh	r0, [r0, #0]
100552a2:	4283      	cmp	r3, r0
100552a4:	d818      	bhi.n	100552d8 <GAT_att_srv_run+0x12c>
100552a6:	2b00      	cmp	r3, #0
100552a8:	d016      	beq.n	100552d8 <GAT_att_srv_run+0x12c>
100552aa:	6866      	ldr	r6, [r4, #4]
100552ac:	4630      	mov	r0, r6
100552ae:	f7ff ff3d 	bl	1005512c <GAT_att_cmn_get_opcode>
100552b2:	4607      	mov	r7, r0
100552b4:	8835      	ldrh	r5, [r6, #0]
100552b6:	4630      	mov	r0, r6
100552b8:	f002 fd9d 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
100552bc:	4601      	mov	r1, r0
100552be:	4628      	mov	r0, r5
100552c0:	f7ff fda8 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
100552c4:	4605      	mov	r5, r0
100552c6:	2f1e      	cmp	r7, #30
100552c8:	d01d      	beq.n	10055306 <GAT_att_srv_run+0x15a>
100552ca:	2040      	movs	r0, #64	@ 0x40
100552cc:	4038      	ands	r0, r7
100552ce:	d11a      	bne.n	10055306 <GAT_att_srv_run+0x15a>
100552d0:	2f16      	cmp	r7, #22
100552d2:	d11b      	bne.n	1005530c <GAT_att_srv_run+0x160>
100552d4:	8871      	ldrh	r1, [r6, #2]
100552d6:	e026      	b.n	10055326 <GAT_att_srv_run+0x17a>
100552d8:	2001      	movs	r0, #1
100552da:	9002      	str	r0, [sp, #8]
100552dc:	2786      	movs	r7, #134	@ 0x86
100552de:	2e1e      	cmp	r6, #30
100552e0:	d089      	beq.n	100551f6 <GAT_att_srv_run+0x4a>
100552e2:	2040      	movs	r0, #64	@ 0x40
100552e4:	4030      	ands	r0, r6
100552e6:	d186      	bne.n	100551f6 <GAT_att_srv_run+0x4a>
100552e8:	9301      	str	r3, [sp, #4]
100552ea:	2105      	movs	r1, #5
100552ec:	4628      	mov	r0, r5
100552ee:	f7ff fe8f 	bl	10055010 <GAT_att_cmn_get_pckt>
100552f2:	60e8      	str	r0, [r5, #12]
100552f4:	2800      	cmp	r0, #0
100552f6:	d01d      	beq.n	10055334 <GAT_att_srv_run+0x188>
100552f8:	4603      	mov	r3, r0
100552fa:	4630      	mov	r0, r6
100552fc:	9901      	ldr	r1, [sp, #4]
100552fe:	9a02      	ldr	r2, [sp, #8]
10055300:	f000 f9d0 	bl	100556a4 <GAT_att_srv_write_err_packet>
10055304:	e777      	b.n	100551f6 <GAT_att_srv_run+0x4a>
10055306:	2000      	movs	r0, #0
10055308:	60e8      	str	r0, [r5, #12]
1005530a:	e75d      	b.n	100551c8 <GAT_att_srv_run+0x1c>
1005530c:	4638      	mov	r0, r7
1005530e:	f7ff ff13 	bl	10055138 <GAT_att_srv_get_exec_fn_id_by_op>
10055312:	280e      	cmp	r0, #14
10055314:	d900      	bls.n	10055318 <GAT_att_srv_run+0x16c>
10055316:	e76d      	b.n	100551f4 <GAT_att_srv_run+0x48>
10055318:	0040      	lsls	r0, r0, #1
1005531a:	4909      	ldr	r1, [pc, #36]	@ (10055340 <__arm_cp.4_2>)
1005531c:	5a09      	ldrh	r1, [r1, r0]
1005531e:	88e8      	ldrh	r0, [r5, #6]
10055320:	4281      	cmp	r1, r0
10055322:	d300      	bcc.n	10055326 <GAT_att_srv_run+0x17a>
10055324:	4601      	mov	r1, r0
10055326:	4628      	mov	r0, r5
10055328:	f7ff fe72 	bl	10055010 <GAT_att_cmn_get_pckt>
1005532c:	60e8      	str	r0, [r5, #12]
1005532e:	2800      	cmp	r0, #0
10055330:	d000      	beq.n	10055334 <GAT_att_srv_run+0x188>
10055332:	e749      	b.n	100551c8 <GAT_att_srv_run+0x1c>
10055334:	2788      	movs	r7, #136	@ 0x88
10055336:	e75e      	b.n	100551f6 <GAT_att_srv_run+0x4a>

10055338 <__arm_cp.4_0>:
10055338:	1006cfe4 	.word	0x1006cfe4

1005533c <__arm_cp.4_1>:
1005533c:	00004fcc 	.word	0x00004fcc

10055340 <__arm_cp.4_2>:
10055340:	1006d002 	.word	0x1006d002

10055344 <__arm_cp.4_3>:
10055344:	20001130 	.word	0x20001130

10055348 <__arm_cp.4_4>:
10055348:	2000112c 	.word	0x2000112c

1005534c <GAT_att_srv_connection>:
1005534c:	b580      	push	{r7, lr}
1005534e:	f000 ff8b 	bl	10056268 <GAT_srv_connection>
10055352:	bd80      	pop	{r7, pc}

10055354 <GAT_att_srv_bearer_close>:
10055354:	b570      	push	{r4, r5, r6, lr}
10055356:	460c      	mov	r4, r1
10055358:	4605      	mov	r5, r0
1005535a:	f001 f82b 	bl	100563b4 <GAT_srv_bearer_close>
1005535e:	4e07      	ldr	r6, [pc, #28]	@ (1005537c <__arm_cp.6_0>)
10055360:	6832      	ldr	r2, [r6, #0]
10055362:	3240      	adds	r2, #64	@ 0x40
10055364:	4628      	mov	r0, r5
10055366:	4621      	mov	r1, r4
10055368:	f000 f80a 	bl	10055380 <GAT_att_srv_flush_rx_pckts>
1005536c:	6832      	ldr	r2, [r6, #0]
1005536e:	3238      	adds	r2, #56	@ 0x38
10055370:	4628      	mov	r0, r5
10055372:	4621      	mov	r1, r4
10055374:	f000 f804 	bl	10055380 <GAT_att_srv_flush_rx_pckts>
10055378:	bd70      	pop	{r4, r5, r6, pc}
1005537a:	46c0      	nop			@ (mov r8, r8)

1005537c <__arm_cp.6_0>:
1005537c:	2000112c 	.word	0x2000112c

10055380 <GAT_att_srv_flush_rx_pckts>:
10055380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055382:	460d      	mov	r5, r1
10055384:	4606      	mov	r6, r0
10055386:	9200      	str	r2, [sp, #0]
10055388:	6814      	ldr	r4, [r2, #0]
1005538a:	2c00      	cmp	r4, #0
1005538c:	d011      	beq.n	100553b2 <GAT_att_srv_flush_rx_pckts+0x32>
1005538e:	4627      	mov	r7, r4
10055390:	69e4      	ldr	r4, [r4, #28]
10055392:	8838      	ldrh	r0, [r7, #0]
10055394:	42b0      	cmp	r0, r6
10055396:	d1f8      	bne.n	1005538a <GAT_att_srv_flush_rx_pckts+0xa>
10055398:	4638      	mov	r0, r7
1005539a:	f002 fd2c 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
1005539e:	42a8      	cmp	r0, r5
100553a0:	d1f3      	bne.n	1005538a <GAT_att_srv_flush_rx_pckts+0xa>
100553a2:	9800      	ldr	r0, [sp, #0]
100553a4:	4639      	mov	r1, r7
100553a6:	f00d f87f 	bl	100624a8 <ACL_list_remove>
100553aa:	4638      	mov	r0, r7
100553ac:	f7fd fe86 	bl	100530bc <ACL_pkt_release>
100553b0:	e7eb      	b.n	1005538a <GAT_att_srv_flush_rx_pckts+0xa>
100553b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100553b4 <GAT_att_srv_process_rx_pckt_tsk>:
100553b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100553b6:	b085      	sub	sp, #20
100553b8:	4f0f      	ldr	r7, [pc, #60]	@ (100553f8 <__arm_cp.9_0>)
100553ba:	6838      	ldr	r0, [r7, #0]
100553bc:	3040      	adds	r0, #64	@ 0x40
100553be:	f00d f893 	bl	100624e8 <ACL_list_get_pckt_count>
100553c2:	4604      	mov	r4, r0
100553c4:	0420      	lsls	r0, r4, #16
100553c6:	d014      	beq.n	100553f2 <GAT_att_srv_process_rx_pckt_tsk+0x3e>
100553c8:	466d      	mov	r5, sp
100553ca:	2000      	movs	r0, #0
100553cc:	7028      	strb	r0, [r5, #0]
100553ce:	6838      	ldr	r0, [r7, #0]
100553d0:	3040      	adds	r0, #64	@ 0x40
100553d2:	f00d f87f 	bl	100624d4 <ACL_list_remove_head>
100553d6:	9001      	str	r0, [sp, #4]
100553d8:	8806      	ldrh	r6, [r0, #0]
100553da:	f002 fd0c 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
100553de:	4601      	mov	r1, r0
100553e0:	4630      	mov	r0, r6
100553e2:	f7ff fd17 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
100553e6:	9002      	str	r0, [sp, #8]
100553e8:	4628      	mov	r0, r5
100553ea:	f7ff fedf 	bl	100551ac <GAT_att_srv_run>
100553ee:	1e64      	subs	r4, r4, #1
100553f0:	e7e8      	b.n	100553c4 <GAT_att_srv_process_rx_pckt_tsk+0x10>
100553f2:	b005      	add	sp, #20
100553f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100553f6:	46c0      	nop			@ (mov r8, r8)

100553f8 <__arm_cp.9_0>:
100553f8:	2000112c 	.word	0x2000112c

100553fc <GAT_att_srv_hvtx>:
100553fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100553fe:	b08b      	sub	sp, #44	@ 0x2c
10055400:	930a      	str	r3, [sp, #40]	@ 0x28
10055402:	4614      	mov	r4, r2
10055404:	460d      	mov	r5, r1
10055406:	4607      	mov	r7, r0
10055408:	f7ff fd04 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
1005540c:	2800      	cmp	r0, #0
1005540e:	d011      	beq.n	10055434 <GAT_att_srv_hvtx+0x38>
10055410:	4606      	mov	r6, r0
10055412:	9704      	str	r7, [sp, #16]
10055414:	8880      	ldrh	r0, [r0, #4]
10055416:	270c      	movs	r7, #12
10055418:	0741      	lsls	r1, r0, #29
1005541a:	d47f      	bmi.n	1005551c <GAT_att_srv_hvtx+0x120>
1005541c:	2c02      	cmp	r4, #2
1005541e:	d101      	bne.n	10055424 <GAT_att_srv_hvtx+0x28>
10055420:	0780      	lsls	r0, r0, #30
10055422:	d47b      	bmi.n	1005551c <GAT_att_srv_hvtx+0x120>
10055424:	9502      	str	r5, [sp, #8]
10055426:	9403      	str	r4, [sp, #12]
10055428:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1005542a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005542c:	2b01      	cmp	r3, #1
1005542e:	d803      	bhi.n	10055438 <GAT_att_srv_hvtx+0x3c>
10055430:	2503      	movs	r5, #3
10055432:	e003      	b.n	1005543c <GAT_att_srv_hvtx+0x40>
10055434:	2712      	movs	r7, #18
10055436:	e071      	b.n	1005551c <GAT_att_srv_hvtx+0x120>
10055438:	0098      	lsls	r0, r3, #2
1005543a:	1c45      	adds	r5, r0, #1
1005543c:	1ca0      	adds	r0, r4, #2
1005543e:	4619      	mov	r1, r3
10055440:	2900      	cmp	r1, #0
10055442:	d004      	beq.n	1005544e <GAT_att_srv_hvtx+0x52>
10055444:	8802      	ldrh	r2, [r0, #0]
10055446:	1955      	adds	r5, r2, r5
10055448:	3008      	adds	r0, #8
1005544a:	1e49      	subs	r1, r1, #1
1005544c:	e7f8      	b.n	10055440 <GAT_att_srv_hvtx+0x44>
1005544e:	88f0      	ldrh	r0, [r6, #6]
10055450:	2b02      	cmp	r3, #2
10055452:	d302      	bcc.n	1005545a <GAT_att_srv_hvtx+0x5e>
10055454:	b2a9      	uxth	r1, r5
10055456:	4281      	cmp	r1, r0
10055458:	d860      	bhi.n	1005551c <GAT_att_srv_hvtx+0x120>
1005545a:	b2a9      	uxth	r1, r5
1005545c:	4281      	cmp	r1, r0
1005545e:	d300      	bcc.n	10055462 <GAT_att_srv_hvtx+0x66>
10055460:	4605      	mov	r5, r0
10055462:	b2a9      	uxth	r1, r5
10055464:	4630      	mov	r0, r6
10055466:	9106      	str	r1, [sp, #24]
10055468:	f7ff fdd2 	bl	10055010 <GAT_att_cmn_get_pckt>
1005546c:	2800      	cmp	r0, #0
1005546e:	d00e      	beq.n	1005548e <GAT_att_srv_hvtx+0x92>
10055470:	4607      	mov	r7, r0
10055472:	9803      	ldr	r0, [sp, #12]
10055474:	2802      	cmp	r0, #2
10055476:	9707      	str	r7, [sp, #28]
10055478:	9601      	str	r6, [sp, #4]
1005547a:	d10f      	bne.n	1005549c <GAT_att_srv_hvtx+0xa0>
1005547c:	89b9      	ldrh	r1, [r7, #12]
1005547e:	221d      	movs	r2, #29
10055480:	4638      	mov	r0, r7
10055482:	f000 f889 	bl	10055598 <ACL_pkt_write_8b>
10055486:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055488:	2801      	cmp	r0, #1
1005548a:	d00f      	beq.n	100554ac <GAT_att_srv_hvtx+0xb0>
1005548c:	e04e      	b.n	1005552c <GAT_att_srv_hvtx+0x130>
1005548e:	2008      	movs	r0, #8
10055490:	f00c fe04 	bl	1006209c <tsk_notify_idx>
10055494:	f7ee fd03 	bl	10043e9e <BLE_STACK_ProcessRequest>
10055498:	2788      	movs	r7, #136	@ 0x88
1005549a:	e03f      	b.n	1005551c <GAT_att_srv_hvtx+0x120>
1005549c:	89b9      	ldrh	r1, [r7, #12]
1005549e:	980a      	ldr	r0, [sp, #40]	@ 0x28
100554a0:	2801      	cmp	r0, #1
100554a2:	d13e      	bne.n	10055522 <GAT_att_srv_hvtx+0x126>
100554a4:	221b      	movs	r2, #27
100554a6:	4638      	mov	r0, r7
100554a8:	f000 f876 	bl	10055598 <ACL_pkt_write_8b>
100554ac:	8822      	ldrh	r2, [r4, #0]
100554ae:	89b8      	ldrh	r0, [r7, #12]
100554b0:	1c40      	adds	r0, r0, #1
100554b2:	b281      	uxth	r1, r0
100554b4:	4638      	mov	r0, r7
100554b6:	f7fd fe36 	bl	10053126 <ACL_pkt_write_16b>
100554ba:	6863      	ldr	r3, [r4, #4]
100554bc:	89b8      	ldrh	r0, [r7, #12]
100554be:	1ee9      	subs	r1, r5, #3
100554c0:	b28a      	uxth	r2, r1
100554c2:	1cc0      	adds	r0, r0, #3
100554c4:	b281      	uxth	r1, r0
100554c6:	4638      	mov	r0, r7
100554c8:	f7fd fe36 	bl	10053138 <ACL_pkt_write>
100554cc:	9807      	ldr	r0, [sp, #28]
100554ce:	8045      	strh	r5, [r0, #2]
100554d0:	9d03      	ldr	r5, [sp, #12]
100554d2:	2d02      	cmp	r5, #2
100554d4:	d10c      	bne.n	100554f0 <GAT_att_srv_hvtx+0xf4>
100554d6:	2001      	movs	r0, #1
100554d8:	9904      	ldr	r1, [sp, #16]
100554da:	9a02      	ldr	r2, [sp, #8]
100554dc:	f7ff fd56 	bl	10054f8c <GAT_att_cmn_start_timer>
100554e0:	2800      	cmp	r0, #0
100554e2:	9c01      	ldr	r4, [sp, #4]
100554e4:	d00c      	beq.n	10055500 <GAT_att_srv_hvtx+0x104>
100554e6:	4607      	mov	r7, r0
100554e8:	9807      	ldr	r0, [sp, #28]
100554ea:	f7fd fde7 	bl	100530bc <ACL_pkt_release>
100554ee:	e015      	b.n	1005551c <GAT_att_srv_hvtx+0x120>
100554f0:	07e8      	lsls	r0, r5, #31
100554f2:	9c01      	ldr	r4, [sp, #4]
100554f4:	d004      	beq.n	10055500 <GAT_att_srv_hvtx+0x104>
100554f6:	9a07      	ldr	r2, [sp, #28]
100554f8:	7a10      	ldrb	r0, [r2, #8]
100554fa:	2108      	movs	r1, #8
100554fc:	4301      	orrs	r1, r0
100554fe:	7211      	strb	r1, [r2, #8]
10055500:	9802      	ldr	r0, [sp, #8]
10055502:	9907      	ldr	r1, [sp, #28]
10055504:	f7ff fd08 	bl	10054f18 <GAT_att_cmn_send>
10055508:	4607      	mov	r7, r0
1005550a:	2d02      	cmp	r5, #2
1005550c:	d106      	bne.n	1005551c <GAT_att_srv_hvtx+0x120>
1005550e:	2f00      	cmp	r7, #0
10055510:	d104      	bne.n	1005551c <GAT_att_srv_hvtx+0x120>
10055512:	88a0      	ldrh	r0, [r4, #4]
10055514:	2102      	movs	r1, #2
10055516:	4301      	orrs	r1, r0
10055518:	80a1      	strh	r1, [r4, #4]
1005551a:	2700      	movs	r7, #0
1005551c:	4638      	mov	r0, r7
1005551e:	b00b      	add	sp, #44	@ 0x2c
10055520:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055522:	2223      	movs	r2, #35	@ 0x23
10055524:	4638      	mov	r0, r7
10055526:	f000 f837 	bl	10055598 <ACL_pkt_write_8b>
1005552a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005552c:	1ca7      	adds	r7, r4, #2
1005552e:	2101      	movs	r1, #1
10055530:	9505      	str	r5, [sp, #20]
10055532:	2800      	cmp	r0, #0
10055534:	d0ca      	beq.n	100554cc <GAT_att_srv_hvtx+0xd0>
10055536:	900a      	str	r0, [sp, #40]	@ 0x28
10055538:	9d07      	ldr	r5, [sp, #28]
1005553a:	89a8      	ldrh	r0, [r5, #12]
1005553c:	1840      	adds	r0, r0, r1
1005553e:	9108      	str	r1, [sp, #32]
10055540:	b281      	uxth	r1, r0
10055542:	1ebb      	subs	r3, r7, #2
10055544:	2402      	movs	r4, #2
10055546:	4628      	mov	r0, r5
10055548:	4622      	mov	r2, r4
1005554a:	4e12      	ldr	r6, [pc, #72]	@ (10055594 <__arm_cp.10_0>)
1005554c:	47b0      	blx	r6
1005554e:	89a8      	ldrh	r0, [r5, #12]
10055550:	9e08      	ldr	r6, [sp, #32]
10055552:	1830      	adds	r0, r6, r0
10055554:	1c80      	adds	r0, r0, #2
10055556:	b281      	uxth	r1, r0
10055558:	4628      	mov	r0, r5
1005555a:	9409      	str	r4, [sp, #36]	@ 0x24
1005555c:	4622      	mov	r2, r4
1005555e:	463b      	mov	r3, r7
10055560:	4c0c      	ldr	r4, [pc, #48]	@ (10055594 <__arm_cp.10_0>)
10055562:	47a0      	blx	r4
10055564:	1d31      	adds	r1, r6, #4
10055566:	89a8      	ldrh	r0, [r5, #12]
10055568:	1840      	adds	r0, r0, r1
1005556a:	b28e      	uxth	r6, r1
1005556c:	9906      	ldr	r1, [sp, #24]
1005556e:	1b8a      	subs	r2, r1, r6
10055570:	8839      	ldrh	r1, [r7, #0]
10055572:	428a      	cmp	r2, r1
10055574:	db00      	blt.n	10055578 <GAT_att_srv_hvtx+0x17c>
10055576:	460a      	mov	r2, r1
10055578:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005557a:	587b      	ldr	r3, [r7, r1]
1005557c:	b281      	uxth	r1, r0
1005557e:	b294      	uxth	r4, r2
10055580:	4628      	mov	r0, r5
10055582:	4622      	mov	r2, r4
10055584:	4d03      	ldr	r5, [pc, #12]	@ (10055594 <__arm_cp.10_0>)
10055586:	47a8      	blx	r5
10055588:	19a1      	adds	r1, r4, r6
1005558a:	3708      	adds	r7, #8
1005558c:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005558e:	1e40      	subs	r0, r0, #1
10055590:	9d05      	ldr	r5, [sp, #20]
10055592:	e7ce      	b.n	10055532 <GAT_att_srv_hvtx+0x136>

10055594 <__arm_cp.10_0>:
10055594:	10053139 	.word	0x10053139

10055598 <ACL_pkt_write_8b>:
10055598:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005559a:	4614      	mov	r4, r2
1005559c:	6840      	ldr	r0, [r0, #4]
1005559e:	2920      	cmp	r1, #32
100555a0:	d304      	bcc.n	100555ac <ACL_pkt_write_8b+0x14>
100555a2:	ad01      	add	r5, sp, #4
100555a4:	462a      	mov	r2, r5
100555a6:	f009 fd70 	bl	1005f08a <Mem_Buff_get_buff_off>
100555aa:	8829      	ldrh	r1, [r5, #0]
100555ac:	1840      	adds	r0, r0, r1
100555ae:	7104      	strb	r4, [r0, #4]
100555b0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100555b2 <GAT_att_srv_extract_write_packet_data>:
100555b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100555b4:	461d      	mov	r5, r3
100555b6:	4614      	mov	r4, r2
100555b8:	460f      	mov	r7, r1
100555ba:	4606      	mov	r6, r0
100555bc:	f7ff fdb6 	bl	1005512c <GAT_att_cmn_get_opcode>
100555c0:	210e      	movs	r1, #14
100555c2:	43c9      	mvns	r1, r1
100555c4:	28d2      	cmp	r0, #210	@ 0xd2
100555c6:	d000      	beq.n	100555ca <GAT_att_srv_extract_write_packet_data+0x18>
100555c8:	310c      	adds	r1, #12
100555ca:	8870      	ldrh	r0, [r6, #2]
100555cc:	1808      	adds	r0, r1, r0
100555ce:	b282      	uxth	r2, r0
100555d0:	9906      	ldr	r1, [sp, #24]
100555d2:	42ba      	cmp	r2, r7
100555d4:	d905      	bls.n	100555e2 <GAT_att_srv_extract_write_packet_data+0x30>
100555d6:	200d      	movs	r0, #13
100555d8:	7008      	strb	r0, [r1, #0]
100555da:	2000      	movs	r0, #0
100555dc:	8028      	strh	r0, [r5, #0]
100555de:	2786      	movs	r7, #134	@ 0x86
100555e0:	e009      	b.n	100555f6 <GAT_att_srv_extract_write_packet_data+0x44>
100555e2:	2700      	movs	r7, #0
100555e4:	700f      	strb	r7, [r1, #0]
100555e6:	8028      	strh	r0, [r5, #0]
100555e8:	89b0      	ldrh	r0, [r6, #12]
100555ea:	1cc0      	adds	r0, r0, #3
100555ec:	b281      	uxth	r1, r0
100555ee:	4630      	mov	r0, r6
100555f0:	4623      	mov	r3, r4
100555f2:	f7fd fd7f 	bl	100530f4 <ACL_pkt_read>
100555f6:	4638      	mov	r0, r7
100555f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100555fc <GAT_att_srv_resp>:
100555fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100555fe:	b089      	sub	sp, #36	@ 0x24
10055600:	461f      	mov	r7, r3
10055602:	9203      	str	r2, [sp, #12]
10055604:	460e      	mov	r6, r1
10055606:	4605      	mov	r5, r0
10055608:	f7ff fc04 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
1005560c:	2800      	cmp	r0, #0
1005560e:	d045      	beq.n	1005569c <GAT_att_srv_resp+0xa0>
10055610:	4604      	mov	r4, r0
10055612:	68c0      	ldr	r0, [r0, #12]
10055614:	2800      	cmp	r0, #0
10055616:	d041      	beq.n	1005569c <GAT_att_srv_resp+0xa0>
10055618:	9702      	str	r7, [sp, #8]
1005561a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1005561c:	9001      	str	r0, [sp, #4]
1005561e:	980e      	ldr	r0, [sp, #56]	@ 0x38
10055620:	9000      	str	r0, [sp, #0]
10055622:	481f      	ldr	r0, [pc, #124]	@ (100556a0 <__arm_cp.13_0>)
10055624:	6807      	ldr	r7, [r0, #0]
10055626:	3738      	adds	r7, #56	@ 0x38
10055628:	683f      	ldr	r7, [r7, #0]
1005562a:	2f00      	cmp	r7, #0
1005562c:	d00f      	beq.n	1005564e <GAT_att_srv_resp+0x52>
1005562e:	8838      	ldrh	r0, [r7, #0]
10055630:	42a8      	cmp	r0, r5
10055632:	d104      	bne.n	1005563e <GAT_att_srv_resp+0x42>
10055634:	4638      	mov	r0, r7
10055636:	f002 fbde 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
1005563a:	42b0      	cmp	r0, r6
1005563c:	d001      	beq.n	10055642 <GAT_att_srv_resp+0x46>
1005563e:	371c      	adds	r7, #28
10055640:	e7f2      	b.n	10055628 <GAT_att_srv_resp+0x2c>
10055642:	4817      	ldr	r0, [pc, #92]	@ (100556a0 <__arm_cp.13_0>)
10055644:	6800      	ldr	r0, [r0, #0]
10055646:	3038      	adds	r0, #56	@ 0x38
10055648:	4639      	mov	r1, r7
1005564a:	f00c ff2d 	bl	100624a8 <ACL_list_remove>
1005564e:	68e0      	ldr	r0, [r4, #12]
10055650:	f7ff fd6c 	bl	1005512c <GAT_att_cmn_get_opcode>
10055654:	1e41      	subs	r1, r0, #1
10055656:	9802      	ldr	r0, [sp, #8]
10055658:	2800      	cmp	r0, #0
1005565a:	d013      	beq.n	10055684 <GAT_att_srv_resp+0x88>
1005565c:	b2c8      	uxtb	r0, r1
1005565e:	281e      	cmp	r0, #30
10055660:	d007      	beq.n	10055672 <GAT_att_srv_resp+0x76>
10055662:	2240      	movs	r2, #64	@ 0x40
10055664:	4011      	ands	r1, r2
10055666:	d104      	bne.n	10055672 <GAT_att_srv_resp+0x76>
10055668:	68e3      	ldr	r3, [r4, #12]
1005566a:	9903      	ldr	r1, [sp, #12]
1005566c:	9a02      	ldr	r2, [sp, #8]
1005566e:	f000 f819 	bl	100556a4 <GAT_att_srv_write_err_packet>
10055672:	4620      	mov	r0, r4
10055674:	f000 f82a 	bl	100556cc <GAT_att_srv_send_response>
10055678:	2f00      	cmp	r7, #0
1005567a:	d00f      	beq.n	1005569c <GAT_att_srv_resp+0xa0>
1005567c:	4638      	mov	r0, r7
1005567e:	f7fd fd1d 	bl	100530bc <ACL_pkt_release>
10055682:	e00b      	b.n	1005569c <GAT_att_srv_resp+0xa0>
10055684:	a804      	add	r0, sp, #16
10055686:	9a00      	ldr	r2, [sp, #0]
10055688:	8182      	strh	r2, [r0, #12]
1005568a:	7041      	strb	r1, [r0, #1]
1005568c:	2101      	movs	r1, #1
1005568e:	7001      	strb	r1, [r0, #0]
10055690:	9901      	ldr	r1, [sp, #4]
10055692:	9108      	str	r1, [sp, #32]
10055694:	9406      	str	r4, [sp, #24]
10055696:	9705      	str	r7, [sp, #20]
10055698:	f7ff fd88 	bl	100551ac <GAT_att_srv_run>
1005569c:	b009      	add	sp, #36	@ 0x24
1005569e:	bdf0      	pop	{r4, r5, r6, r7, pc}

100556a0 <__arm_cp.13_0>:
100556a0:	2000112c 	.word	0x2000112c

100556a4 <GAT_att_srv_write_err_packet>:
100556a4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100556a6:	2b00      	cmp	r3, #0
100556a8:	d00f      	beq.n	100556ca <GAT_att_srv_write_err_packet+0x26>
100556aa:	461c      	mov	r4, r3
100556ac:	466b      	mov	r3, sp
100556ae:	7099      	strb	r1, [r3, #2]
100556b0:	7058      	strb	r0, [r3, #1]
100556b2:	2001      	movs	r0, #1
100556b4:	7018      	strb	r0, [r3, #0]
100556b6:	711a      	strb	r2, [r3, #4]
100556b8:	0a08      	lsrs	r0, r1, #8
100556ba:	70d8      	strb	r0, [r3, #3]
100556bc:	89a1      	ldrh	r1, [r4, #12]
100556be:	2505      	movs	r5, #5
100556c0:	4620      	mov	r0, r4
100556c2:	462a      	mov	r2, r5
100556c4:	f7fd fd38 	bl	10053138 <ACL_pkt_write>
100556c8:	8065      	strh	r5, [r4, #2]
100556ca:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100556cc <GAT_att_srv_send_response>:
100556cc:	b510      	push	{r4, lr}
100556ce:	4604      	mov	r4, r0
100556d0:	68c0      	ldr	r0, [r0, #12]
100556d2:	2800      	cmp	r0, #0
100556d4:	d015      	beq.n	10055702 <GAT_att_srv_send_response+0x36>
100556d6:	8841      	ldrh	r1, [r0, #2]
100556d8:	1d09      	adds	r1, r1, #4
100556da:	b289      	uxth	r1, r1
100556dc:	f7fd fcf7 	bl	100530ce <ACL_pkt_resize>
100556e0:	68e1      	ldr	r1, [r4, #12]
100556e2:	8960      	ldrh	r0, [r4, #10]
100556e4:	f7ff fc18 	bl	10054f18 <GAT_att_cmn_send>
100556e8:	2800      	cmp	r0, #0
100556ea:	d108      	bne.n	100556fe <GAT_att_srv_send_response+0x32>
100556ec:	8962      	ldrh	r2, [r4, #10]
100556ee:	8921      	ldrh	r1, [r4, #8]
100556f0:	2000      	movs	r0, #0
100556f2:	f7ff fc01 	bl	10054ef8 <GAT_att_cmn_stop_timer>
100556f6:	88a0      	ldrh	r0, [r4, #4]
100556f8:	2101      	movs	r1, #1
100556fa:	4388      	bics	r0, r1
100556fc:	80a0      	strh	r0, [r4, #4]
100556fe:	2000      	movs	r0, #0
10055700:	60e0      	str	r0, [r4, #12]
10055702:	bd10      	pop	{r4, pc}

10055704 <GAT_att_srv_confirmation_pending>:
10055704:	b5e0      	push	{r5, r6, r7, lr}
10055706:	a801      	add	r0, sp, #4
10055708:	2102      	movs	r1, #2
1005570a:	8001      	strh	r1, [r0, #0]
1005570c:	9000      	str	r0, [sp, #0]
1005570e:	2000      	movs	r0, #0
10055710:	4b04      	ldr	r3, [pc, #16]	@ (10055724 <__arm_cp.16_0>)
10055712:	4601      	mov	r1, r0
10055714:	4602      	mov	r2, r0
10055716:	f7ff fabf 	bl	10054c98 <GAT_att_cmn_for_each_ch_descr>
1005571a:	3886      	subs	r0, #134	@ 0x86
1005571c:	4241      	negs	r1, r0
1005571e:	4148      	adcs	r0, r1
10055720:	bd8c      	pop	{r2, r3, r7, pc}
10055722:	46c0      	nop			@ (mov r8, r8)

10055724 <__arm_cp.16_0>:
10055724:	10054f45 	.word	0x10054f45

10055728 <GAT_att_srv_request_user_pending>:
10055728:	b510      	push	{r4, lr}
1005572a:	480a      	ldr	r0, [pc, #40]	@ (10055754 <__arm_cp.17_0>)
1005572c:	6804      	ldr	r4, [r0, #0]
1005572e:	3438      	adds	r4, #56	@ 0x38
10055730:	6824      	ldr	r4, [r4, #0]
10055732:	2c00      	cmp	r4, #0
10055734:	d009      	beq.n	1005574a <GAT_att_srv_request_user_pending+0x22>
10055736:	4620      	mov	r0, r4
10055738:	f7ff fcf8 	bl	1005512c <GAT_att_cmn_get_opcode>
1005573c:	281e      	cmp	r0, #30
1005573e:	d002      	beq.n	10055746 <GAT_att_srv_request_user_pending+0x1e>
10055740:	2140      	movs	r1, #64	@ 0x40
10055742:	4008      	ands	r0, r1
10055744:	d003      	beq.n	1005574e <GAT_att_srv_request_user_pending+0x26>
10055746:	341c      	adds	r4, #28
10055748:	e7f2      	b.n	10055730 <GAT_att_srv_request_user_pending+0x8>
1005574a:	2000      	movs	r0, #0
1005574c:	bd10      	pop	{r4, pc}
1005574e:	2001      	movs	r0, #1
10055750:	bd10      	pop	{r4, pc}
10055752:	46c0      	nop			@ (mov r8, r8)

10055754 <__arm_cp.17_0>:
10055754:	2000112c 	.word	0x2000112c

10055758 <GAT_att_srv_flush_user_pending_list>:
10055758:	b570      	push	{r4, r5, r6, lr}
1005575a:	4d08      	ldr	r5, [pc, #32]	@ (1005577c <__arm_cp.18_0>)
1005575c:	6828      	ldr	r0, [r5, #0]
1005575e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
10055760:	2c00      	cmp	r4, #0
10055762:	d00a      	beq.n	1005577a <GAT_att_srv_flush_user_pending_list+0x22>
10055764:	69e6      	ldr	r6, [r4, #28]
10055766:	6828      	ldr	r0, [r5, #0]
10055768:	3038      	adds	r0, #56	@ 0x38
1005576a:	4621      	mov	r1, r4
1005576c:	f00c fe9c 	bl	100624a8 <ACL_list_remove>
10055770:	4620      	mov	r0, r4
10055772:	f7fd fca3 	bl	100530bc <ACL_pkt_release>
10055776:	4634      	mov	r4, r6
10055778:	e7f2      	b.n	10055760 <GAT_att_srv_flush_user_pending_list+0x8>
1005577a:	bd70      	pop	{r4, r5, r6, pc}

1005577c <__arm_cp.18_0>:
1005577c:	2000112c 	.word	0x2000112c

10055780 <GAT_att_srv_exchange_mtu_exc>:
10055780:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10055782:	4604      	mov	r4, r0
10055784:	6880      	ldr	r0, [r0, #8]
10055786:	8941      	ldrh	r1, [r0, #10]
10055788:	2904      	cmp	r1, #4
1005578a:	d11a      	bne.n	100557c2 <GAT_att_srv_exchange_mtu_exc+0x42>
1005578c:	6860      	ldr	r0, [r4, #4]
1005578e:	8981      	ldrh	r1, [r0, #12]
10055790:	1c49      	adds	r1, r1, #1
10055792:	b289      	uxth	r1, r1
10055794:	f7fd fcb7 	bl	10053106 <ACL_pkt_read_16b>
10055798:	4605      	mov	r5, r0
1005579a:	2817      	cmp	r0, #23
1005579c:	d800      	bhi.n	100557a0 <GAT_att_srv_exchange_mtu_exc+0x20>
1005579e:	2517      	movs	r5, #23
100557a0:	4e1d      	ldr	r6, [pc, #116]	@ (10055818 <__arm_cp.19_0>)
100557a2:	8a30      	ldrh	r0, [r6, #16]
100557a4:	4285      	cmp	r5, r0
100557a6:	d300      	bcc.n	100557aa <GAT_att_srv_exchange_mtu_exc+0x2a>
100557a8:	4605      	mov	r5, r0
100557aa:	68a3      	ldr	r3, [r4, #8]
100557ac:	8898      	ldrh	r0, [r3, #4]
100557ae:	0700      	lsls	r0, r0, #28
100557b0:	d40f      	bmi.n	100557d2 <GAT_att_srv_exchange_mtu_exc+0x52>
100557b2:	8919      	ldrh	r1, [r3, #8]
100557b4:	2002      	movs	r0, #2
100557b6:	462a      	mov	r2, r5
100557b8:	f00d fd54 	bl	10063264 <aci_att_exchange_mtu_resp_event_push_noinline>
100557bc:	2800      	cmp	r0, #0
100557be:	d014      	beq.n	100557ea <GAT_att_srv_exchange_mtu_exc+0x6a>
100557c0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
100557c2:	68c3      	ldr	r3, [r0, #12]
100557c4:	2002      	movs	r0, #2
100557c6:	2100      	movs	r1, #0
100557c8:	2206      	movs	r2, #6
100557ca:	f7ff ff6b 	bl	100556a4 <GAT_att_srv_write_err_packet>
100557ce:	2086      	movs	r0, #134	@ 0x86
100557d0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
100557d2:	88d8      	ldrh	r0, [r3, #6]
100557d4:	42a8      	cmp	r0, r5
100557d6:	d00e      	beq.n	100557f6 <GAT_att_srv_exchange_mtu_exc+0x76>
100557d8:	3308      	adds	r3, #8
100557da:	2042      	movs	r0, #66	@ 0x42
100557dc:	2103      	movs	r1, #3
100557de:	2202      	movs	r2, #2
100557e0:	f00e f870 	bl	100638c4 <aci_hal_fw_error_event_push_noinline>
100557e4:	2800      	cmp	r0, #0
100557e6:	d1eb      	bne.n	100557c0 <GAT_att_srv_exchange_mtu_exc+0x40>
100557e8:	e005      	b.n	100557f6 <GAT_att_srv_exchange_mtu_exc+0x76>
100557ea:	68a0      	ldr	r0, [r4, #8]
100557ec:	80c5      	strh	r5, [r0, #6]
100557ee:	8881      	ldrh	r1, [r0, #4]
100557f0:	2208      	movs	r2, #8
100557f2:	430a      	orrs	r2, r1
100557f4:	8082      	strh	r2, [r0, #4]
100557f6:	8a30      	ldrh	r0, [r6, #16]
100557f8:	ab01      	add	r3, sp, #4
100557fa:	7058      	strb	r0, [r3, #1]
100557fc:	2503      	movs	r5, #3
100557fe:	701d      	strb	r5, [r3, #0]
10055800:	0a00      	lsrs	r0, r0, #8
10055802:	7098      	strb	r0, [r3, #2]
10055804:	68a0      	ldr	r0, [r4, #8]
10055806:	68c4      	ldr	r4, [r0, #12]
10055808:	89a1      	ldrh	r1, [r4, #12]
1005580a:	4620      	mov	r0, r4
1005580c:	462a      	mov	r2, r5
1005580e:	f7fd fc93 	bl	10053138 <ACL_pkt_write>
10055812:	8065      	strh	r5, [r4, #2]
10055814:	2000      	movs	r0, #0
10055816:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10055818 <__arm_cp.19_0>:
10055818:	20001188 	.word	0x20001188

1005581c <GAT_att_srv_find_info_exc>:
1005581c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005581e:	b08f      	sub	sp, #60	@ 0x3c
10055820:	4601      	mov	r1, r0
10055822:	6840      	ldr	r0, [r0, #4]
10055824:	9101      	str	r1, [sp, #4]
10055826:	6889      	ldr	r1, [r1, #8]
10055828:	68cf      	ldr	r7, [r1, #12]
1005582a:	ad0d      	add	r5, sp, #52	@ 0x34
1005582c:	ac0e      	add	r4, sp, #56	@ 0x38
1005582e:	4629      	mov	r1, r5
10055830:	4622      	mov	r2, r4
10055832:	f000 fc7c 	bl	1005612e <GAT_att_srv_get_handle_range>
10055836:	8828      	ldrh	r0, [r5, #0]
10055838:	9007      	str	r0, [sp, #28]
1005583a:	f00e fd05 	bl	10064248 <GAT_att_db_find_from_handle>
1005583e:	4602      	mov	r2, r0
10055840:	8820      	ldrh	r0, [r4, #0]
10055842:	9002      	str	r0, [sp, #8]
10055844:	2500      	movs	r5, #0
10055846:	462b      	mov	r3, r5
10055848:	9500      	str	r5, [sp, #0]
1005584a:	9503      	str	r5, [sp, #12]
1005584c:	2a00      	cmp	r2, #0
1005584e:	9506      	str	r5, [sp, #24]
10055850:	d050      	beq.n	100558f4 <GAT_att_srv_find_info_exc+0xd8>
10055852:	8850      	ldrh	r0, [r2, #2]
10055854:	9007      	str	r0, [sp, #28]
10055856:	9902      	ldr	r1, [sp, #8]
10055858:	4288      	cmp	r0, r1
1005585a:	d84b      	bhi.n	100558f4 <GAT_att_srv_find_info_exc+0xd8>
1005585c:	b2a8      	uxth	r0, r5
1005585e:	18c0      	adds	r0, r0, r3
10055860:	9901      	ldr	r1, [sp, #4]
10055862:	6889      	ldr	r1, [r1, #8]
10055864:	88c9      	ldrh	r1, [r1, #6]
10055866:	4288      	cmp	r0, r1
10055868:	d844      	bhi.n	100558f4 <GAT_att_srv_find_info_exc+0xd8>
1005586a:	461c      	mov	r4, r3
1005586c:	ad08      	add	r5, sp, #32
1005586e:	9205      	str	r2, [sp, #20]
10055870:	4610      	mov	r0, r2
10055872:	4629      	mov	r1, r5
10055874:	f000 ffc4 	bl	10056800 <GAT_srv_get_attr_type>
10055878:	7c2e      	ldrb	r6, [r5, #16]
1005587a:	9803      	ldr	r0, [sp, #12]
1005587c:	0600      	lsls	r0, r0, #24
1005587e:	d006      	beq.n	1005588e <GAT_att_srv_find_info_exc+0x72>
10055880:	9800      	ldr	r0, [sp, #0]
10055882:	4286      	cmp	r6, r0
10055884:	d139      	bne.n	100558fa <GAT_att_srv_find_info_exc+0xde>
10055886:	08c0      	lsrs	r0, r0, #3
10055888:	9004      	str	r0, [sp, #16]
1005588a:	9d06      	ldr	r5, [sp, #24]
1005588c:	e016      	b.n	100558bc <GAT_att_srv_find_info_exc+0xa0>
1005588e:	89b9      	ldrh	r1, [r7, #12]
10055890:	2205      	movs	r2, #5
10055892:	4638      	mov	r0, r7
10055894:	f7ff fe80 	bl	10055598 <ACL_pkt_write_8b>
10055898:	2e10      	cmp	r6, #16
1005589a:	d001      	beq.n	100558a0 <GAT_att_srv_find_info_exc+0x84>
1005589c:	2202      	movs	r2, #2
1005589e:	e000      	b.n	100558a2 <GAT_att_srv_find_info_exc+0x86>
100558a0:	2201      	movs	r2, #1
100558a2:	9d06      	ldr	r5, [sp, #24]
100558a4:	89b8      	ldrh	r0, [r7, #12]
100558a6:	1c40      	adds	r0, r0, #1
100558a8:	b281      	uxth	r1, r0
100558aa:	4638      	mov	r0, r7
100558ac:	9203      	str	r2, [sp, #12]
100558ae:	f7ff fe73 	bl	10055598 <ACL_pkt_write_8b>
100558b2:	1cad      	adds	r5, r5, #2
100558b4:	08f0      	lsrs	r0, r6, #3
100558b6:	9004      	str	r0, [sp, #16]
100558b8:	1c84      	adds	r4, r0, #2
100558ba:	9600      	str	r6, [sp, #0]
100558bc:	89b8      	ldrh	r0, [r7, #12]
100558be:	1940      	adds	r0, r0, r5
100558c0:	b281      	uxth	r1, r0
100558c2:	4638      	mov	r0, r7
100558c4:	9a07      	ldr	r2, [sp, #28]
100558c6:	f7fd fc2e 	bl	10053126 <ACL_pkt_write_16b>
100558ca:	89b8      	ldrh	r0, [r7, #12]
100558cc:	1828      	adds	r0, r5, r0
100558ce:	1c86      	adds	r6, r0, #2
100558d0:	a808      	add	r0, sp, #32
100558d2:	f00c fdd0 	bl	10062476 <UUID_get_value_p>
100558d6:	4603      	mov	r3, r0
100558d8:	b2b1      	uxth	r1, r6
100558da:	9804      	ldr	r0, [sp, #16]
100558dc:	b2c2      	uxtb	r2, r0
100558de:	4638      	mov	r0, r7
100558e0:	f7fd fc2a 	bl	10053138 <ACL_pkt_write>
100558e4:	b2e0      	uxtb	r0, r4
100558e6:	182d      	adds	r5, r5, r0
100558e8:	9805      	ldr	r0, [sp, #20]
100558ea:	f00e fd0f 	bl	1006430c <GAT_att_db_get_next>
100558ee:	4602      	mov	r2, r0
100558f0:	4623      	mov	r3, r4
100558f2:	e7ab      	b.n	1005584c <GAT_att_srv_find_info_exc+0x30>
100558f4:	9803      	ldr	r0, [sp, #12]
100558f6:	0600      	lsls	r0, r0, #24
100558f8:	d003      	beq.n	10055902 <GAT_att_srv_find_info_exc+0xe6>
100558fa:	9806      	ldr	r0, [sp, #24]
100558fc:	8078      	strh	r0, [r7, #2]
100558fe:	2000      	movs	r0, #0
10055900:	e007      	b.n	10055912 <GAT_att_srv_find_info_exc+0xf6>
10055902:	9807      	ldr	r0, [sp, #28]
10055904:	b281      	uxth	r1, r0
10055906:	2004      	movs	r0, #4
10055908:	220a      	movs	r2, #10
1005590a:	463b      	mov	r3, r7
1005590c:	f7ff feca 	bl	100556a4 <GAT_att_srv_write_err_packet>
10055910:	2086      	movs	r0, #134	@ 0x86
10055912:	b00f      	add	sp, #60	@ 0x3c
10055914:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055916 <GAT_att_srv_find_by_type_val_exc>:
10055916:	b5f0      	push	{r4, r5, r6, r7, lr}
10055918:	b091      	sub	sp, #68	@ 0x44
1005591a:	4607      	mov	r7, r0
1005591c:	ac09      	add	r4, sp, #36	@ 0x24
1005591e:	2010      	movs	r0, #16
10055920:	7420      	strb	r0, [r4, #16]
10055922:	6878      	ldr	r0, [r7, #4]
10055924:	8981      	ldrh	r1, [r0, #12]
10055926:	1d49      	adds	r1, r1, #5
10055928:	b289      	uxth	r1, r1
1005592a:	f7fd fbec 	bl	10053106 <ACL_pkt_read_16b>
1005592e:	81a0      	strh	r0, [r4, #12]
10055930:	6878      	ldr	r0, [r7, #4]
10055932:	ae0f      	add	r6, sp, #60	@ 0x3c
10055934:	ad0e      	add	r5, sp, #56	@ 0x38
10055936:	4631      	mov	r1, r6
10055938:	462a      	mov	r2, r5
1005593a:	f000 fbf8 	bl	1005612e <GAT_att_srv_get_handle_range>
1005593e:	8836      	ldrh	r6, [r6, #0]
10055940:	6878      	ldr	r0, [r7, #4]
10055942:	9706      	str	r7, [sp, #24]
10055944:	68b9      	ldr	r1, [r7, #8]
10055946:	8844      	ldrh	r4, [r0, #2]
10055948:	68c8      	ldr	r0, [r1, #12]
1005594a:	8981      	ldrh	r1, [r0, #12]
1005594c:	2207      	movs	r2, #7
1005594e:	9002      	str	r0, [sp, #8]
10055950:	f7ff fe22 	bl	10055598 <ACL_pkt_write_8b>
10055954:	1fe0      	subs	r0, r4, #7
10055956:	8829      	ldrh	r1, [r5, #0]
10055958:	9104      	str	r1, [sp, #16]
1005595a:	2101      	movs	r1, #1
1005595c:	9105      	str	r1, [sp, #20]
1005595e:	b280      	uxth	r0, r0
10055960:	9003      	str	r0, [sp, #12]
10055962:	9601      	str	r6, [sp, #4]
10055964:	9805      	ldr	r0, [sp, #20]
10055966:	b287      	uxth	r7, r0
10055968:	1d3c      	adds	r4, r7, #4
1005596a:	9806      	ldr	r0, [sp, #24]
1005596c:	6880      	ldr	r0, [r0, #8]
1005596e:	88c0      	ldrh	r0, [r0, #6]
10055970:	4284      	cmp	r4, r0
10055972:	d83c      	bhi.n	100559ee <GAT_att_srv_find_by_type_val_exc+0xd8>
10055974:	b2b0      	uxth	r0, r6
10055976:	aa09      	add	r2, sp, #36	@ 0x24
10055978:	9904      	ldr	r1, [sp, #16]
1005597a:	f001 fab1 	bl	10056ee0 <GAT_srv_find_by_type_attr_p>
1005597e:	2800      	cmp	r0, #0
10055980:	d035      	beq.n	100559ee <GAT_att_srv_find_by_type_val_exc+0xd8>
10055982:	4605      	mov	r5, r0
10055984:	a810      	add	r0, sp, #64	@ 0x40
10055986:	9000      	str	r0, [sp, #0]
10055988:	2200      	movs	r2, #0
1005598a:	ab08      	add	r3, sp, #32
1005598c:	9806      	ldr	r0, [sp, #24]
1005598e:	4629      	mov	r1, r5
10055990:	f000 fbe0 	bl	10056154 <GAT_att_srv_value_read>
10055994:	2886      	cmp	r0, #134	@ 0x86
10055996:	d028      	beq.n	100559ea <GAT_att_srv_find_by_type_val_exc+0xd4>
10055998:	2800      	cmp	r0, #0
1005599a:	d136      	bne.n	10055a0a <GAT_att_srv_find_by_type_val_exc+0xf4>
1005599c:	886e      	ldrh	r6, [r5, #2]
1005599e:	9808      	ldr	r0, [sp, #32]
100559a0:	6843      	ldr	r3, [r0, #4]
100559a2:	9806      	ldr	r0, [sp, #24]
100559a4:	6840      	ldr	r0, [r0, #4]
100559a6:	8981      	ldrh	r1, [r0, #12]
100559a8:	1dc9      	adds	r1, r1, #7
100559aa:	b289      	uxth	r1, r1
100559ac:	9f03      	ldr	r7, [sp, #12]
100559ae:	463a      	mov	r2, r7
100559b0:	f7fd fb97 	bl	100530e2 <ACL_pkt_cmp>
100559b4:	9908      	ldr	r1, [sp, #32]
100559b6:	8809      	ldrh	r1, [r1, #0]
100559b8:	42b9      	cmp	r1, r7
100559ba:	d116      	bne.n	100559ea <GAT_att_srv_find_by_type_val_exc+0xd4>
100559bc:	2800      	cmp	r0, #0
100559be:	d114      	bne.n	100559ea <GAT_att_srv_find_by_type_val_exc+0xd4>
100559c0:	af07      	add	r7, sp, #28
100559c2:	703e      	strb	r6, [r7, #0]
100559c4:	0a30      	lsrs	r0, r6, #8
100559c6:	7078      	strb	r0, [r7, #1]
100559c8:	4628      	mov	r0, r5
100559ca:	f000 ff41 	bl	10056850 <GAT_srv_get_att_group_end_handle>
100559ce:	4606      	mov	r6, r0
100559d0:	70b8      	strb	r0, [r7, #2]
100559d2:	0a00      	lsrs	r0, r0, #8
100559d4:	70f8      	strb	r0, [r7, #3]
100559d6:	9802      	ldr	r0, [sp, #8]
100559d8:	8981      	ldrh	r1, [r0, #12]
100559da:	9a05      	ldr	r2, [sp, #20]
100559dc:	1889      	adds	r1, r1, r2
100559de:	b289      	uxth	r1, r1
100559e0:	2204      	movs	r2, #4
100559e2:	463b      	mov	r3, r7
100559e4:	f7fd fba8 	bl	10053138 <ACL_pkt_write>
100559e8:	9405      	str	r4, [sp, #20]
100559ea:	1c76      	adds	r6, r6, #1
100559ec:	e7ba      	b.n	10055964 <GAT_att_srv_find_by_type_val_exc+0x4e>
100559ee:	2f01      	cmp	r7, #1
100559f0:	d107      	bne.n	10055a02 <GAT_att_srv_find_by_type_val_exc+0xec>
100559f2:	2006      	movs	r0, #6
100559f4:	220a      	movs	r2, #10
100559f6:	9901      	ldr	r1, [sp, #4]
100559f8:	9b02      	ldr	r3, [sp, #8]
100559fa:	f7ff fe53 	bl	100556a4 <GAT_att_srv_write_err_packet>
100559fe:	2086      	movs	r0, #134	@ 0x86
10055a00:	e003      	b.n	10055a0a <GAT_att_srv_find_by_type_val_exc+0xf4>
10055a02:	9802      	ldr	r0, [sp, #8]
10055a04:	9905      	ldr	r1, [sp, #20]
10055a06:	8041      	strh	r1, [r0, #2]
10055a08:	2000      	movs	r0, #0
10055a0a:	b011      	add	sp, #68	@ 0x44
10055a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055a0e <GAT_att_srv_read_by_type_exc>:
10055a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
10055a10:	b097      	sub	sp, #92	@ 0x5c
10055a12:	4604      	mov	r4, r0
10055a14:	6840      	ldr	r0, [r0, #4]
10055a16:	a915      	add	r1, sp, #84	@ 0x54
10055a18:	aa14      	add	r2, sp, #80	@ 0x50
10055a1a:	f000 fb88 	bl	1005612e <GAT_att_srv_get_handle_range>
10055a1e:	940a      	str	r4, [sp, #40]	@ 0x28
10055a20:	6860      	ldr	r0, [r4, #4]
10055a22:	8981      	ldrh	r1, [r0, #12]
10055a24:	1d49      	adds	r1, r1, #5
10055a26:	8842      	ldrh	r2, [r0, #2]
10055a28:	b289      	uxth	r1, r1
10055a2a:	2a07      	cmp	r2, #7
10055a2c:	d105      	bne.n	10055a3a <GAT_att_srv_read_by_type_exc+0x2c>
10055a2e:	f7fd fb6a 	bl	10053106 <ACL_pkt_read_16b>
10055a32:	a90f      	add	r1, sp, #60	@ 0x3c
10055a34:	8188      	strh	r0, [r1, #12]
10055a36:	2010      	movs	r0, #16
10055a38:	e004      	b.n	10055a44 <GAT_att_srv_read_by_type_exc+0x36>
10055a3a:	2210      	movs	r2, #16
10055a3c:	ab0f      	add	r3, sp, #60	@ 0x3c
10055a3e:	f7fd fb59 	bl	100530f4 <ACL_pkt_read>
10055a42:	2080      	movs	r0, #128	@ 0x80
10055a44:	a90f      	add	r1, sp, #60	@ 0x3c
10055a46:	7408      	strb	r0, [r1, #16]
10055a48:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055a4a:	7840      	ldrb	r0, [r0, #1]
10055a4c:	2810      	cmp	r0, #16
10055a4e:	d001      	beq.n	10055a54 <GAT_att_srv_read_by_type_exc+0x46>
10055a50:	2102      	movs	r1, #2
10055a52:	e000      	b.n	10055a56 <GAT_att_srv_read_by_type_exc+0x48>
10055a54:	2104      	movs	r1, #4
10055a56:	9107      	str	r1, [sp, #28]
10055a58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10055a5a:	6891      	ldr	r1, [r2, #8]
10055a5c:	68cc      	ldr	r4, [r1, #12]
10055a5e:	88cb      	ldrh	r3, [r1, #6]
10055a60:	9305      	str	r3, [sp, #20]
10055a62:	7812      	ldrb	r2, [r2, #0]
10055a64:	2a00      	cmp	r2, #0
10055a66:	9404      	str	r4, [sp, #16]
10055a68:	d00a      	beq.n	10055a80 <GAT_att_srv_read_by_type_exc+0x72>
10055a6a:	8865      	ldrh	r5, [r4, #2]
10055a6c:	2d02      	cmp	r5, #2
10055a6e:	d315      	bcc.n	10055a9c <GAT_att_srv_read_by_type_exc+0x8e>
10055a70:	89a0      	ldrh	r0, [r4, #12]
10055a72:	1c40      	adds	r0, r0, #1
10055a74:	b281      	uxth	r1, r0
10055a76:	4620      	mov	r0, r4
10055a78:	f000 fba9 	bl	100561ce <ACL_pkt_read_8b>
10055a7c:	4606      	mov	r6, r0
10055a7e:	e00e      	b.n	10055a9e <GAT_att_srv_read_by_type_exc+0x90>
10055a80:	aa15      	add	r2, sp, #84	@ 0x54
10055a82:	8815      	ldrh	r5, [r2, #0]
10055a84:	2810      	cmp	r0, #16
10055a86:	d112      	bne.n	10055aae <GAT_att_srv_read_by_type_exc+0xa0>
10055a88:	a80f      	add	r0, sp, #60	@ 0x3c
10055a8a:	f001 f98b 	bl	10056da4 <GAT_srv_is_supported_grouping_type>
10055a8e:	2800      	cmp	r0, #0
10055a90:	d100      	bne.n	10055a94 <GAT_att_srv_read_by_type_exc+0x86>
10055a92:	e0b8      	b.n	10055c06 <GAT_att_srv_read_by_type_exc+0x1f8>
10055a94:	9508      	str	r5, [sp, #32]
10055a96:	89a1      	ldrh	r1, [r4, #12]
10055a98:	2211      	movs	r2, #17
10055a9a:	e01b      	b.n	10055ad4 <GAT_att_srv_read_by_type_exc+0xc6>
10055a9c:	2600      	movs	r6, #0
10055a9e:	89a0      	ldrh	r0, [r4, #12]
10055aa0:	1940      	adds	r0, r0, r5
10055aa2:	b281      	uxth	r1, r0
10055aa4:	4620      	mov	r0, r4
10055aa6:	f7fd fb2e 	bl	10053106 <ACL_pkt_read_16b>
10055aaa:	9008      	str	r0, [sp, #32]
10055aac:	e018      	b.n	10055ae0 <GAT_att_srv_read_by_type_exc+0xd2>
10055aae:	a80b      	add	r0, sp, #44	@ 0x2c
10055ab0:	8105      	strh	r5, [r0, #8]
10055ab2:	2202      	movs	r2, #2
10055ab4:	7102      	strb	r2, [r0, #4]
10055ab6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
10055ab8:	8142      	strh	r2, [r0, #10]
10055aba:	910b      	str	r1, [sp, #44]	@ 0x2c
10055abc:	a90f      	add	r1, sp, #60	@ 0x3c
10055abe:	910e      	str	r1, [sp, #56]	@ 0x38
10055ac0:	f001 f9b2 	bl	10056e28 <GAT_srv_check_change_aware>
10055ac4:	2886      	cmp	r0, #134	@ 0x86
10055ac6:	d102      	bne.n	10055ace <GAT_att_srv_read_by_type_exc+0xc0>
10055ac8:	a816      	add	r0, sp, #88	@ 0x58
10055aca:	2212      	movs	r2, #18
10055acc:	e09d      	b.n	10055c0a <GAT_att_srv_read_by_type_exc+0x1fc>
10055ace:	9508      	str	r5, [sp, #32]
10055ad0:	89a1      	ldrh	r1, [r4, #12]
10055ad2:	2209      	movs	r2, #9
10055ad4:	4620      	mov	r0, r4
10055ad6:	f7ff fd5f 	bl	10055598 <ACL_pkt_write_8b>
10055ada:	2501      	movs	r5, #1
10055adc:	8065      	strh	r5, [r4, #2]
10055ade:	2600      	movs	r6, #0
10055ae0:	9805      	ldr	r0, [sp, #20]
10055ae2:	1e80      	subs	r0, r0, #2
10055ae4:	9001      	str	r0, [sp, #4]
10055ae6:	a814      	add	r0, sp, #80	@ 0x50
10055ae8:	8800      	ldrh	r0, [r0, #0]
10055aea:	9003      	str	r0, [sp, #12]
10055aec:	9609      	str	r6, [sp, #36]	@ 0x24
10055aee:	b2f6      	uxtb	r6, r6
10055af0:	9506      	str	r5, [sp, #24]
10055af2:	b2af      	uxth	r7, r5
10055af4:	19b8      	adds	r0, r7, r6
10055af6:	9905      	ldr	r1, [sp, #20]
10055af8:	4288      	cmp	r0, r1
10055afa:	d874      	bhi.n	10055be6 <GAT_att_srv_read_by_type_exc+0x1d8>
10055afc:	9808      	ldr	r0, [sp, #32]
10055afe:	b285      	uxth	r5, r0
10055b00:	aa0f      	add	r2, sp, #60	@ 0x3c
10055b02:	4628      	mov	r0, r5
10055b04:	9903      	ldr	r1, [sp, #12]
10055b06:	f001 f9eb 	bl	10056ee0 <GAT_srv_find_by_type_attr_p>
10055b0a:	2800      	cmp	r0, #0
10055b0c:	d06b      	beq.n	10055be6 <GAT_att_srv_read_by_type_exc+0x1d8>
10055b0e:	4604      	mov	r4, r0
10055b10:	9502      	str	r5, [sp, #8]
10055b12:	a816      	add	r0, sp, #88	@ 0x58
10055b14:	9000      	str	r0, [sp, #0]
10055b16:	2500      	movs	r5, #0
10055b18:	ab0b      	add	r3, sp, #44	@ 0x2c
10055b1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055b1c:	4621      	mov	r1, r4
10055b1e:	462a      	mov	r2, r5
10055b20:	f000 fb18 	bl	10056154 <GAT_att_srv_value_read>
10055b24:	2800      	cmp	r0, #0
10055b26:	d14f      	bne.n	10055bc8 <GAT_att_srv_read_by_type_exc+0x1ba>
10055b28:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10055b2a:	8800      	ldrh	r0, [r0, #0]
10055b2c:	9907      	ldr	r1, [sp, #28]
10055b2e:	1809      	adds	r1, r1, r0
10055b30:	2f01      	cmp	r7, #1
10055b32:	d111      	bne.n	10055b58 <GAT_att_srv_read_by_type_exc+0x14a>
10055b34:	29ff      	cmp	r1, #255	@ 0xff
10055b36:	d300      	bcc.n	10055b3a <GAT_att_srv_read_by_type_exc+0x12c>
10055b38:	21ff      	movs	r1, #255	@ 0xff
10055b3a:	9801      	ldr	r0, [sp, #4]
10055b3c:	4281      	cmp	r1, r0
10055b3e:	d300      	bcc.n	10055b42 <GAT_att_srv_read_by_type_exc+0x134>
10055b40:	9901      	ldr	r1, [sp, #4]
10055b42:	9109      	str	r1, [sp, #36]	@ 0x24
10055b44:	b2ca      	uxtb	r2, r1
10055b46:	9e04      	ldr	r6, [sp, #16]
10055b48:	89b0      	ldrh	r0, [r6, #12]
10055b4a:	1c40      	adds	r0, r0, #1
10055b4c:	b281      	uxth	r1, r0
10055b4e:	4630      	mov	r0, r6
10055b50:	f7ff fd22 	bl	10055598 <ACL_pkt_write_8b>
10055b54:	2702      	movs	r7, #2
10055b56:	e003      	b.n	10055b60 <GAT_att_srv_read_by_type_exc+0x152>
10055b58:	42b1      	cmp	r1, r6
10055b5a:	9e04      	ldr	r6, [sp, #16]
10055b5c:	9f06      	ldr	r7, [sp, #24]
10055b5e:	d15c      	bne.n	10055c1a <GAT_att_srv_read_by_type_exc+0x20c>
10055b60:	8865      	ldrh	r5, [r4, #2]
10055b62:	4620      	mov	r0, r4
10055b64:	f000 fe74 	bl	10056850 <GAT_srv_get_att_group_end_handle>
10055b68:	9008      	str	r0, [sp, #32]
10055b6a:	89b0      	ldrh	r0, [r6, #12]
10055b6c:	19c0      	adds	r0, r0, r7
10055b6e:	b281      	uxth	r1, r0
10055b70:	4630      	mov	r0, r6
10055b72:	462a      	mov	r2, r5
10055b74:	f7fd fad7 	bl	10053126 <ACL_pkt_write_16b>
10055b78:	9807      	ldr	r0, [sp, #28]
10055b7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
10055b7c:	1a0a      	subs	r2, r1, r0
10055b7e:	463c      	mov	r4, r7
10055b80:	1cbf      	adds	r7, r7, #2
10055b82:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055b84:	7840      	ldrb	r0, [r0, #1]
10055b86:	2810      	cmp	r0, #16
10055b88:	d10a      	bne.n	10055ba0 <GAT_att_srv_read_by_type_exc+0x192>
10055b8a:	89b0      	ldrh	r0, [r6, #12]
10055b8c:	19c0      	adds	r0, r0, r7
10055b8e:	b281      	uxth	r1, r0
10055b90:	4630      	mov	r0, r6
10055b92:	9d08      	ldr	r5, [sp, #32]
10055b94:	4617      	mov	r7, r2
10055b96:	462a      	mov	r2, r5
10055b98:	f7fd fac5 	bl	10053126 <ACL_pkt_write_16b>
10055b9c:	463a      	mov	r2, r7
10055b9e:	1d27      	adds	r7, r4, #4
10055ba0:	462c      	mov	r4, r5
10055ba2:	89b0      	ldrh	r0, [r6, #12]
10055ba4:	19c0      	adds	r0, r0, r7
10055ba6:	b281      	uxth	r1, r0
10055ba8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10055baa:	6843      	ldr	r3, [r0, #4]
10055bac:	b2d5      	uxtb	r5, r2
10055bae:	4630      	mov	r0, r6
10055bb0:	462a      	mov	r2, r5
10055bb2:	f7fd fac1 	bl	10053138 <ACL_pkt_write>
10055bb6:	197d      	adds	r5, r7, r5
10055bb8:	8075      	strh	r5, [r6, #2]
10055bba:	2002      	movs	r0, #2
10055bbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
10055bbe:	7008      	strb	r0, [r1, #0]
10055bc0:	1c60      	adds	r0, r4, #1
10055bc2:	9008      	str	r0, [sp, #32]
10055bc4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
10055bc6:	e791      	b.n	10055aec <GAT_att_srv_read_by_type_exc+0xde>
10055bc8:	2886      	cmp	r0, #134	@ 0x86
10055bca:	9a06      	ldr	r2, [sp, #24]
10055bcc:	d016      	beq.n	10055bfc <GAT_att_srv_read_by_type_exc+0x1ee>
10055bce:	2884      	cmp	r0, #132	@ 0x84
10055bd0:	4605      	mov	r5, r0
10055bd2:	9804      	ldr	r0, [sp, #16]
10055bd4:	d121      	bne.n	10055c1a <GAT_att_srv_read_by_type_exc+0x20c>
10055bd6:	8981      	ldrh	r1, [r0, #12]
10055bd8:	1889      	adds	r1, r1, r2
10055bda:	b289      	uxth	r1, r1
10055bdc:	9a02      	ldr	r2, [sp, #8]
10055bde:	f7fd faa2 	bl	10053126 <ACL_pkt_write_16b>
10055be2:	2584      	movs	r5, #132	@ 0x84
10055be4:	e019      	b.n	10055c1a <GAT_att_srv_read_by_type_exc+0x20c>
10055be6:	2f01      	cmp	r7, #1
10055be8:	d106      	bne.n	10055bf8 <GAT_att_srv_read_by_type_exc+0x1ea>
10055bea:	a816      	add	r0, sp, #88	@ 0x58
10055bec:	220a      	movs	r2, #10
10055bee:	7002      	strb	r2, [r0, #0]
10055bf0:	a815      	add	r0, sp, #84	@ 0x54
10055bf2:	8805      	ldrh	r5, [r0, #0]
10055bf4:	9c04      	ldr	r4, [sp, #16]
10055bf6:	e009      	b.n	10055c0c <GAT_att_srv_read_by_type_exc+0x1fe>
10055bf8:	2500      	movs	r5, #0
10055bfa:	e00e      	b.n	10055c1a <GAT_att_srv_read_by_type_exc+0x20c>
10055bfc:	a816      	add	r0, sp, #88	@ 0x58
10055bfe:	7802      	ldrb	r2, [r0, #0]
10055c00:	9c04      	ldr	r4, [sp, #16]
10055c02:	9d08      	ldr	r5, [sp, #32]
10055c04:	e002      	b.n	10055c0c <GAT_att_srv_read_by_type_exc+0x1fe>
10055c06:	a816      	add	r0, sp, #88	@ 0x58
10055c08:	2210      	movs	r2, #16
10055c0a:	7002      	strb	r2, [r0, #0]
10055c0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055c0e:	7840      	ldrb	r0, [r0, #1]
10055c10:	b2a9      	uxth	r1, r5
10055c12:	4623      	mov	r3, r4
10055c14:	f7ff fd46 	bl	100556a4 <GAT_att_srv_write_err_packet>
10055c18:	2586      	movs	r5, #134	@ 0x86
10055c1a:	4628      	mov	r0, r5
10055c1c:	b017      	add	sp, #92	@ 0x5c
10055c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055c20 <GAT_att_srv_read_exc>:
10055c20:	b5f0      	push	{r4, r5, r6, r7, lr}
10055c22:	b08b      	sub	sp, #44	@ 0x2c
10055c24:	4605      	mov	r5, r0
10055c26:	6880      	ldr	r0, [r0, #8]
10055c28:	68c4      	ldr	r4, [r0, #12]
10055c2a:	88c7      	ldrh	r7, [r0, #6]
10055c2c:	7828      	ldrb	r0, [r5, #0]
10055c2e:	2800      	cmp	r0, #0
10055c30:	d024      	beq.n	10055c7c <GAT_att_srv_read_exc+0x5c>
10055c32:	462e      	mov	r6, r5
10055c34:	360c      	adds	r6, #12
10055c36:	9605      	str	r6, [sp, #20]
10055c38:	6868      	ldr	r0, [r5, #4]
10055c3a:	8980      	ldrh	r0, [r0, #12]
10055c3c:	1c40      	adds	r0, r0, #1
10055c3e:	b281      	uxth	r1, r0
10055c40:	2204      	movs	r2, #4
10055c42:	ab04      	add	r3, sp, #16
10055c44:	4620      	mov	r0, r4
10055c46:	f7fd fa55 	bl	100530f4 <ACL_pkt_read>
10055c4a:	8830      	ldrh	r0, [r6, #0]
10055c4c:	7869      	ldrb	r1, [r5, #1]
10055c4e:	1e7f      	subs	r7, r7, #1
10055c50:	290c      	cmp	r1, #12
10055c52:	d103      	bne.n	10055c5c <GAT_att_srv_read_exc+0x3c>
10055c54:	4287      	cmp	r7, r0
10055c56:	d253      	bcs.n	10055d00 <GAT_att_srv_read_exc+0xe0>
10055c58:	9904      	ldr	r1, [sp, #16]
10055c5a:	1a40      	subs	r0, r0, r1
10055c5c:	b280      	uxth	r0, r0
10055c5e:	4287      	cmp	r7, r0
10055c60:	d300      	bcc.n	10055c64 <GAT_att_srv_read_exc+0x44>
10055c62:	4607      	mov	r7, r0
10055c64:	b2ba      	uxth	r2, r7
10055c66:	6873      	ldr	r3, [r6, #4]
10055c68:	89a0      	ldrh	r0, [r4, #12]
10055c6a:	1c40      	adds	r0, r0, #1
10055c6c:	b281      	uxth	r1, r0
10055c6e:	4620      	mov	r0, r4
10055c70:	f7fd fa62 	bl	10053138 <ACL_pkt_write>
10055c74:	1c78      	adds	r0, r7, #1
10055c76:	8060      	strh	r0, [r4, #2]
10055c78:	2000      	movs	r0, #0
10055c7a:	e04d      	b.n	10055d18 <GAT_att_srv_read_exc+0xf8>
10055c7c:	7868      	ldrb	r0, [r5, #1]
10055c7e:	280c      	cmp	r0, #12
10055c80:	9702      	str	r7, [sp, #8]
10055c82:	d107      	bne.n	10055c94 <GAT_att_srv_read_exc+0x74>
10055c84:	6868      	ldr	r0, [r5, #4]
10055c86:	8981      	ldrh	r1, [r0, #12]
10055c88:	1cc9      	adds	r1, r1, #3
10055c8a:	b289      	uxth	r1, r1
10055c8c:	f7fd fa3b 	bl	10053106 <ACL_pkt_read_16b>
10055c90:	220d      	movs	r2, #13
10055c92:	e001      	b.n	10055c98 <GAT_att_srv_read_exc+0x78>
10055c94:	220b      	movs	r2, #11
10055c96:	2000      	movs	r0, #0
10055c98:	af04      	add	r7, sp, #16
10055c9a:	9003      	str	r0, [sp, #12]
10055c9c:	8038      	strh	r0, [r7, #0]
10055c9e:	89a1      	ldrh	r1, [r4, #12]
10055ca0:	4620      	mov	r0, r4
10055ca2:	f7ff fc79 	bl	10055598 <ACL_pkt_write_8b>
10055ca6:	6868      	ldr	r0, [r5, #4]
10055ca8:	8981      	ldrh	r1, [r0, #12]
10055caa:	1c49      	adds	r1, r1, #1
10055cac:	b289      	uxth	r1, r1
10055cae:	f7fd fa2a 	bl	10053106 <ACL_pkt_read_16b>
10055cb2:	4606      	mov	r6, r0
10055cb4:	8078      	strh	r0, [r7, #2]
10055cb6:	a807      	add	r0, sp, #28
10055cb8:	8106      	strh	r6, [r0, #8]
10055cba:	2701      	movs	r7, #1
10055cbc:	7107      	strb	r7, [r0, #4]
10055cbe:	68a9      	ldr	r1, [r5, #8]
10055cc0:	9107      	str	r1, [sp, #28]
10055cc2:	f001 f8b1 	bl	10056e28 <GAT_srv_check_change_aware>
10055cc6:	2886      	cmp	r0, #134	@ 0x86
10055cc8:	d101      	bne.n	10055cce <GAT_att_srv_read_exc+0xae>
10055cca:	2712      	movs	r7, #18
10055ccc:	e015      	b.n	10055cfa <GAT_att_srv_read_exc+0xda>
10055cce:	4630      	mov	r0, r6
10055cd0:	f00e fa92 	bl	100641f8 <GAT_att_db_find_by_handle>
10055cd4:	2800      	cmp	r0, #0
10055cd6:	d010      	beq.n	10055cfa <GAT_att_srv_read_exc+0xda>
10055cd8:	4601      	mov	r1, r0
10055cda:	a806      	add	r0, sp, #24
10055cdc:	9000      	str	r0, [sp, #0]
10055cde:	ab05      	add	r3, sp, #20
10055ce0:	4628      	mov	r0, r5
10055ce2:	9a03      	ldr	r2, [sp, #12]
10055ce4:	f000 fa36 	bl	10056154 <GAT_att_srv_value_read>
10055ce8:	2800      	cmp	r0, #0
10055cea:	d017      	beq.n	10055d1c <GAT_att_srv_read_exc+0xfc>
10055cec:	2884      	cmp	r0, #132	@ 0x84
10055cee:	d018      	beq.n	10055d22 <GAT_att_srv_read_exc+0x102>
10055cf0:	2886      	cmp	r0, #134	@ 0x86
10055cf2:	d111      	bne.n	10055d18 <GAT_att_srv_read_exc+0xf8>
10055cf4:	a806      	add	r0, sp, #24
10055cf6:	7807      	ldrb	r7, [r0, #0]
10055cf8:	e007      	b.n	10055d0a <GAT_att_srv_read_exc+0xea>
10055cfa:	a806      	add	r0, sp, #24
10055cfc:	7007      	strb	r7, [r0, #0]
10055cfe:	e004      	b.n	10055d0a <GAT_att_srv_read_exc+0xea>
10055d00:	a806      	add	r0, sp, #24
10055d02:	270b      	movs	r7, #11
10055d04:	7007      	strb	r7, [r0, #0]
10055d06:	a804      	add	r0, sp, #16
10055d08:	8846      	ldrh	r6, [r0, #2]
10055d0a:	7868      	ldrb	r0, [r5, #1]
10055d0c:	4631      	mov	r1, r6
10055d0e:	463a      	mov	r2, r7
10055d10:	4623      	mov	r3, r4
10055d12:	f7ff fcc7 	bl	100556a4 <GAT_att_srv_write_err_packet>
10055d16:	2086      	movs	r0, #134	@ 0x86
10055d18:	b00b      	add	sp, #44	@ 0x2c
10055d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055d1c:	9e05      	ldr	r6, [sp, #20]
10055d1e:	9f02      	ldr	r7, [sp, #8]
10055d20:	e793      	b.n	10055c4a <GAT_att_srv_read_exc+0x2a>
10055d22:	89a0      	ldrh	r0, [r4, #12]
10055d24:	1c40      	adds	r0, r0, #1
10055d26:	b281      	uxth	r1, r0
10055d28:	2204      	movs	r2, #4
10055d2a:	ab04      	add	r3, sp, #16
10055d2c:	4620      	mov	r0, r4
10055d2e:	f7fd fa03 	bl	10053138 <ACL_pkt_write>
10055d32:	2084      	movs	r0, #132	@ 0x84
10055d34:	e7f0      	b.n	10055d18 <GAT_att_srv_read_exc+0xf8>

10055d36 <GAT_att_srv_read_multi_exc>:
10055d36:	b5f0      	push	{r4, r5, r6, r7, lr}
10055d38:	b08d      	sub	sp, #52	@ 0x34
10055d3a:	6881      	ldr	r1, [r0, #8]
10055d3c:	68ce      	ldr	r6, [r1, #12]
10055d3e:	88c9      	ldrh	r1, [r1, #6]
10055d40:	9106      	str	r1, [sp, #24]
10055d42:	7801      	ldrb	r1, [r0, #0]
10055d44:	2900      	cmp	r1, #0
10055d46:	9007      	str	r0, [sp, #28]
10055d48:	d009      	beq.n	10055d5e <GAT_att_srv_read_multi_exc+0x28>
10055d4a:	8877      	ldrh	r7, [r6, #2]
10055d4c:	89b0      	ldrh	r0, [r6, #12]
10055d4e:	19c0      	adds	r0, r0, r7
10055d50:	b281      	uxth	r1, r0
10055d52:	4630      	mov	r0, r6
10055d54:	f7fd f9d7 	bl	10053106 <ACL_pkt_read_16b>
10055d58:	9907      	ldr	r1, [sp, #28]
10055d5a:	4602      	mov	r2, r0
10055d5c:	e00c      	b.n	10055d78 <GAT_att_srv_read_multi_exc+0x42>
10055d5e:	7840      	ldrb	r0, [r0, #1]
10055d60:	280e      	cmp	r0, #14
10055d62:	d001      	beq.n	10055d68 <GAT_att_srv_read_multi_exc+0x32>
10055d64:	2221      	movs	r2, #33	@ 0x21
10055d66:	e000      	b.n	10055d6a <GAT_att_srv_read_multi_exc+0x34>
10055d68:	220f      	movs	r2, #15
10055d6a:	89b1      	ldrh	r1, [r6, #12]
10055d6c:	4630      	mov	r0, r6
10055d6e:	f7ff fc13 	bl	10055598 <ACL_pkt_write_8b>
10055d72:	2201      	movs	r2, #1
10055d74:	4617      	mov	r7, r2
10055d76:	9907      	ldr	r1, [sp, #28]
10055d78:	6848      	ldr	r0, [r1, #4]
10055d7a:	7880      	ldrb	r0, [r0, #2]
10055d7c:	1a80      	subs	r0, r0, r2
10055d7e:	b2c0      	uxtb	r0, r0
10055d80:	0845      	lsrs	r5, r0, #1
10055d82:	7808      	ldrb	r0, [r1, #0]
10055d84:	2800      	cmp	r0, #0
10055d86:	9602      	str	r6, [sp, #8]
10055d88:	d066      	beq.n	10055e58 <GAT_att_srv_read_multi_exc+0x122>
10055d8a:	9907      	ldr	r1, [sp, #28]
10055d8c:	4608      	mov	r0, r1
10055d8e:	300c      	adds	r0, #12
10055d90:	9001      	str	r0, [sp, #4]
10055d92:	b2ed      	uxtb	r5, r5
10055d94:	35ff      	adds	r5, #255	@ 0xff
10055d96:	b2e8      	uxtb	r0, r5
10055d98:	2300      	movs	r3, #0
10055d9a:	9303      	str	r3, [sp, #12]
10055d9c:	42a8      	cmp	r0, r5
10055d9e:	d100      	bne.n	10055da2 <GAT_att_srv_read_multi_exc+0x6c>
10055da0:	e0b3      	b.n	10055f0a <GAT_att_srv_read_multi_exc+0x1d4>
10055da2:	b2bc      	uxth	r4, r7
10055da4:	9806      	ldr	r0, [sp, #24]
10055da6:	42a0      	cmp	r0, r4
10055da8:	d800      	bhi.n	10055dac <GAT_att_srv_read_multi_exc+0x76>
10055daa:	e0ae      	b.n	10055f0a <GAT_att_srv_read_multi_exc+0x1d4>
10055dac:	6848      	ldr	r0, [r1, #4]
10055dae:	8981      	ldrh	r1, [r0, #12]
10055db0:	9205      	str	r2, [sp, #20]
10055db2:	1889      	adds	r1, r1, r2
10055db4:	b289      	uxth	r1, r1
10055db6:	2202      	movs	r2, #2
10055db8:	ab0c      	add	r3, sp, #48	@ 0x30
10055dba:	9204      	str	r2, [sp, #16]
10055dbc:	f7fd f99a 	bl	100530f4 <ACL_pkt_read>
10055dc0:	9907      	ldr	r1, [sp, #28]
10055dc2:	7808      	ldrb	r0, [r1, #0]
10055dc4:	2801      	cmp	r0, #1
10055dc6:	d102      	bne.n	10055dce <GAT_att_srv_read_multi_exc+0x98>
10055dc8:	9801      	ldr	r0, [sp, #4]
10055dca:	9008      	str	r0, [sp, #32]
10055dcc:	e00d      	b.n	10055dea <GAT_att_srv_read_multi_exc+0xb4>
10055dce:	a80c      	add	r0, sp, #48	@ 0x30
10055dd0:	8800      	ldrh	r0, [r0, #0]
10055dd2:	f00e fa11 	bl	100641f8 <GAT_att_db_find_by_handle>
10055dd6:	4601      	mov	r1, r0
10055dd8:	9807      	ldr	r0, [sp, #28]
10055dda:	6880      	ldr	r0, [r0, #8]
10055ddc:	8900      	ldrh	r0, [r0, #8]
10055dde:	aa08      	add	r2, sp, #32
10055de0:	f000 fdd0 	bl	10056984 <GAT_srv_get_attr_value>
10055de4:	9907      	ldr	r1, [sp, #28]
10055de6:	2884      	cmp	r0, #132	@ 0x84
10055de8:	d065      	beq.n	10055eb6 <GAT_att_srv_read_multi_exc+0x180>
10055dea:	9806      	ldr	r0, [sp, #24]
10055dec:	1b04      	subs	r4, r0, r4
10055dee:	7848      	ldrb	r0, [r1, #1]
10055df0:	280e      	cmp	r0, #14
10055df2:	d109      	bne.n	10055e08 <GAT_att_srv_read_multi_exc+0xd2>
10055df4:	89b0      	ldrh	r0, [r6, #12]
10055df6:	19c1      	adds	r1, r0, r7
10055df8:	9808      	ldr	r0, [sp, #32]
10055dfa:	8802      	ldrh	r2, [r0, #0]
10055dfc:	4294      	cmp	r4, r2
10055dfe:	db00      	blt.n	10055e02 <GAT_att_srv_read_multi_exc+0xcc>
10055e00:	4614      	mov	r4, r2
10055e02:	b289      	uxth	r1, r1
10055e04:	b2a2      	uxth	r2, r4
10055e06:	e013      	b.n	10055e30 <GAT_att_srv_read_multi_exc+0xfa>
10055e08:	89b0      	ldrh	r0, [r6, #12]
10055e0a:	19c0      	adds	r0, r0, r7
10055e0c:	b281      	uxth	r1, r0
10055e0e:	9a08      	ldr	r2, [sp, #32]
10055e10:	4630      	mov	r0, r6
10055e12:	8816      	ldrh	r6, [r2, #0]
10055e14:	4632      	mov	r2, r6
10055e16:	f7fd f986 	bl	10053126 <ACL_pkt_write_16b>
10055e1a:	1ea4      	subs	r4, r4, #2
10055e1c:	42b4      	cmp	r4, r6
10055e1e:	d300      	bcc.n	10055e22 <GAT_att_srv_read_multi_exc+0xec>
10055e20:	4634      	mov	r4, r6
10055e22:	b2a2      	uxth	r2, r4
10055e24:	1cbf      	adds	r7, r7, #2
10055e26:	9e02      	ldr	r6, [sp, #8]
10055e28:	89b0      	ldrh	r0, [r6, #12]
10055e2a:	19c0      	adds	r0, r0, r7
10055e2c:	b281      	uxth	r1, r0
10055e2e:	9808      	ldr	r0, [sp, #32]
10055e30:	6843      	ldr	r3, [r0, #4]
10055e32:	4630      	mov	r0, r6
10055e34:	f7fd f980 	bl	10053138 <ACL_pkt_write>
10055e38:	193f      	adds	r7, r7, r4
10055e3a:	8077      	strh	r7, [r6, #2]
10055e3c:	9907      	ldr	r1, [sp, #28]
10055e3e:	7848      	ldrb	r0, [r1, #1]
10055e40:	2820      	cmp	r0, #32
10055e42:	9a05      	ldr	r2, [sp, #20]
10055e44:	d104      	bne.n	10055e50 <GAT_att_srv_read_multi_exc+0x11a>
10055e46:	9806      	ldr	r0, [sp, #24]
10055e48:	1bc0      	subs	r0, r0, r7
10055e4a:	b280      	uxth	r0, r0
10055e4c:	2802      	cmp	r0, #2
10055e4e:	d35c      	bcc.n	10055f0a <GAT_att_srv_read_multi_exc+0x1d4>
10055e50:	9804      	ldr	r0, [sp, #16]
10055e52:	7008      	strb	r0, [r1, #0]
10055e54:	1c92      	adds	r2, r2, #2
10055e56:	e79c      	b.n	10055d92 <GAT_att_srv_read_multi_exc+0x5c>
10055e58:	2100      	movs	r1, #0
10055e5a:	9205      	str	r2, [sp, #20]
10055e5c:	9c07      	ldr	r4, [sp, #28]
10055e5e:	b288      	uxth	r0, r1
10055e60:	42a8      	cmp	r0, r5
10055e62:	d292      	bcs.n	10055d8a <GAT_att_srv_read_multi_exc+0x54>
10055e64:	9104      	str	r1, [sp, #16]
10055e66:	0049      	lsls	r1, r1, #1
10055e68:	6860      	ldr	r0, [r4, #4]
10055e6a:	8982      	ldrh	r2, [r0, #12]
10055e6c:	1851      	adds	r1, r2, r1
10055e6e:	1c49      	adds	r1, r1, #1
10055e70:	b289      	uxth	r1, r1
10055e72:	2202      	movs	r2, #2
10055e74:	ab0c      	add	r3, sp, #48	@ 0x30
10055e76:	f7fd f93d 	bl	100530f4 <ACL_pkt_read>
10055e7a:	a808      	add	r0, sp, #32
10055e7c:	2601      	movs	r6, #1
10055e7e:	7106      	strb	r6, [r0, #4]
10055e80:	990c      	ldr	r1, [sp, #48]	@ 0x30
10055e82:	8101      	strh	r1, [r0, #8]
10055e84:	68a1      	ldr	r1, [r4, #8]
10055e86:	9108      	str	r1, [sp, #32]
10055e88:	f000 ffce 	bl	10056e28 <GAT_srv_check_change_aware>
10055e8c:	2886      	cmp	r0, #134	@ 0x86
10055e8e:	d02a      	beq.n	10055ee6 <GAT_att_srv_read_multi_exc+0x1b0>
10055e90:	a80c      	add	r0, sp, #48	@ 0x30
10055e92:	8800      	ldrh	r0, [r0, #0]
10055e94:	f00e f9b0 	bl	100641f8 <GAT_att_db_find_by_handle>
10055e98:	2800      	cmp	r0, #0
10055e9a:	d027      	beq.n	10055eec <GAT_att_srv_read_multi_exc+0x1b6>
10055e9c:	9907      	ldr	r1, [sp, #28]
10055e9e:	6889      	ldr	r1, [r1, #8]
10055ea0:	8909      	ldrh	r1, [r1, #8]
10055ea2:	2201      	movs	r2, #1
10055ea4:	f000 fcf8 	bl	10056898 <GAT_srv_check_perms>
10055ea8:	2800      	cmp	r0, #0
10055eaa:	d11e      	bne.n	10055eea <GAT_att_srv_read_multi_exc+0x1b4>
10055eac:	9904      	ldr	r1, [sp, #16]
10055eae:	1c49      	adds	r1, r1, #1
10055eb0:	9e02      	ldr	r6, [sp, #8]
10055eb2:	9a05      	ldr	r2, [sp, #20]
10055eb4:	e7d3      	b.n	10055e5e <GAT_att_srv_read_multi_exc+0x128>
10055eb6:	a80c      	add	r0, sp, #48	@ 0x30
10055eb8:	8803      	ldrh	r3, [r0, #0]
10055eba:	6888      	ldr	r0, [r1, #8]
10055ebc:	8942      	ldrh	r2, [r0, #10]
10055ebe:	8901      	ldrh	r1, [r0, #8]
10055ec0:	2000      	movs	r0, #0
10055ec2:	9000      	str	r0, [sp, #0]
10055ec4:	2002      	movs	r0, #2
10055ec6:	f00d f933 	bl	10063130 <aci_gatt_srv_read_event_push_noinline>
10055eca:	9003      	str	r0, [sp, #12]
10055ecc:	2800      	cmp	r0, #0
10055ece:	9a05      	ldr	r2, [sp, #20]
10055ed0:	d11b      	bne.n	10055f0a <GAT_att_srv_read_multi_exc+0x1d4>
10055ed2:	8077      	strh	r7, [r6, #2]
10055ed4:	89b0      	ldrh	r0, [r6, #12]
10055ed6:	19c0      	adds	r0, r0, r7
10055ed8:	b281      	uxth	r1, r0
10055eda:	b292      	uxth	r2, r2
10055edc:	4630      	mov	r0, r6
10055ede:	f7fd f922 	bl	10053126 <ACL_pkt_write_16b>
10055ee2:	2084      	movs	r0, #132	@ 0x84
10055ee4:	e010      	b.n	10055f08 <GAT_att_srv_read_multi_exc+0x1d2>
10055ee6:	2612      	movs	r6, #18
10055ee8:	e000      	b.n	10055eec <GAT_att_srv_read_multi_exc+0x1b6>
10055eea:	4606      	mov	r6, r0
10055eec:	a80c      	add	r0, sp, #48	@ 0x30
10055eee:	8801      	ldrh	r1, [r0, #0]
10055ef0:	9807      	ldr	r0, [sp, #28]
10055ef2:	7840      	ldrb	r0, [r0, #1]
10055ef4:	280e      	cmp	r0, #14
10055ef6:	d101      	bne.n	10055efc <GAT_att_srv_read_multi_exc+0x1c6>
10055ef8:	200e      	movs	r0, #14
10055efa:	e000      	b.n	10055efe <GAT_att_srv_read_multi_exc+0x1c8>
10055efc:	2020      	movs	r0, #32
10055efe:	4632      	mov	r2, r6
10055f00:	9b02      	ldr	r3, [sp, #8]
10055f02:	f7ff fbcf 	bl	100556a4 <GAT_att_srv_write_err_packet>
10055f06:	2086      	movs	r0, #134	@ 0x86
10055f08:	9003      	str	r0, [sp, #12]
10055f0a:	9803      	ldr	r0, [sp, #12]
10055f0c:	b00d      	add	sp, #52	@ 0x34
10055f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055f10 <GAT_att_srv_write_exc>:
10055f10:	b5f0      	push	{r4, r5, r6, r7, lr}
10055f12:	b089      	sub	sp, #36	@ 0x24
10055f14:	4604      	mov	r4, r0
10055f16:	7800      	ldrb	r0, [r0, #0]
10055f18:	2800      	cmp	r0, #0
10055f1a:	d001      	beq.n	10055f20 <GAT_att_srv_write_exc+0x10>
10055f1c:	2000      	movs	r0, #0
10055f1e:	e03b      	b.n	10055f98 <GAT_att_srv_write_exc+0x88>
10055f20:	6860      	ldr	r0, [r4, #4]
10055f22:	68a1      	ldr	r1, [r4, #8]
10055f24:	68c9      	ldr	r1, [r1, #12]
10055f26:	9106      	str	r1, [sp, #24]
10055f28:	8846      	ldrh	r6, [r0, #2]
10055f2a:	8981      	ldrh	r1, [r0, #12]
10055f2c:	1c49      	adds	r1, r1, #1
10055f2e:	b289      	uxth	r1, r1
10055f30:	f7fd f8e9 	bl	10053106 <ACL_pkt_read_16b>
10055f34:	4605      	mov	r5, r0
10055f36:	1ef1      	subs	r1, r6, #3
10055f38:	7860      	ldrb	r0, [r4, #1]
10055f3a:	2700      	movs	r7, #0
10055f3c:	2852      	cmp	r0, #82	@ 0x52
10055f3e:	d00c      	beq.n	10055f5a <GAT_att_srv_write_exc+0x4a>
10055f40:	28d2      	cmp	r0, #210	@ 0xd2
10055f42:	d10e      	bne.n	10055f62 <GAT_att_srv_write_exc+0x52>
10055f44:	68a0      	ldr	r0, [r4, #8]
10055f46:	8940      	ldrh	r0, [r0, #10]
10055f48:	2804      	cmp	r0, #4
10055f4a:	d124      	bne.n	10055f96 <GAT_att_srv_write_exc+0x86>
10055f4c:	3e0f      	subs	r6, #15
10055f4e:	2205      	movs	r2, #5
10055f50:	2701      	movs	r7, #1
10055f52:	2000      	movs	r0, #0
10055f54:	9004      	str	r0, [sp, #16]
10055f56:	9605      	str	r6, [sp, #20]
10055f58:	e00e      	b.n	10055f78 <GAT_att_srv_write_exc+0x68>
10055f5a:	9105      	str	r1, [sp, #20]
10055f5c:	2204      	movs	r2, #4
10055f5e:	9704      	str	r7, [sp, #16]
10055f60:	e00a      	b.n	10055f78 <GAT_att_srv_write_exc+0x68>
10055f62:	9105      	str	r1, [sp, #20]
10055f64:	9e06      	ldr	r6, [sp, #24]
10055f66:	89b1      	ldrh	r1, [r6, #12]
10055f68:	2213      	movs	r2, #19
10055f6a:	4630      	mov	r0, r6
10055f6c:	f7ff fb14 	bl	10055598 <ACL_pkt_write_8b>
10055f70:	2001      	movs	r0, #1
10055f72:	9004      	str	r0, [sp, #16]
10055f74:	8070      	strh	r0, [r6, #2]
10055f76:	2203      	movs	r2, #3
10055f78:	ab07      	add	r3, sp, #28
10055f7a:	4620      	mov	r0, r4
10055f7c:	4629      	mov	r1, r5
10055f7e:	f000 f936 	bl	100561ee <GAT_att_srv_set_attr_value_check>
10055f82:	4602      	mov	r2, r0
10055f84:	a808      	add	r0, sp, #32
10055f86:	7002      	strb	r2, [r0, #0]
10055f88:	2a00      	cmp	r2, #0
10055f8a:	d007      	beq.n	10055f9c <GAT_att_srv_write_exc+0x8c>
10055f8c:	7860      	ldrb	r0, [r4, #1]
10055f8e:	4629      	mov	r1, r5
10055f90:	9b06      	ldr	r3, [sp, #24]
10055f92:	f7ff fb87 	bl	100556a4 <GAT_att_srv_write_err_packet>
10055f96:	2086      	movs	r0, #134	@ 0x86
10055f98:	b009      	add	sp, #36	@ 0x24
10055f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055f9c:	2f00      	cmp	r7, #0
10055f9e:	d008      	beq.n	10055fb2 <GAT_att_srv_write_exc+0xa2>
10055fa0:	6861      	ldr	r1, [r4, #4]
10055fa2:	68a0      	ldr	r0, [r4, #8]
10055fa4:	8900      	ldrh	r0, [r0, #8]
10055fa6:	f00b ff42 	bl	10061e2e <smp_sap_sm2_packet_data_signing_validate>
10055faa:	2800      	cmp	r0, #0
10055fac:	d001      	beq.n	10055fb2 <GAT_att_srv_write_exc+0xa2>
10055fae:	2200      	movs	r2, #0
10055fb0:	e7ec      	b.n	10055f8c <GAT_att_srv_write_exc+0x7c>
10055fb2:	6861      	ldr	r1, [r4, #4]
10055fb4:	9807      	ldr	r0, [sp, #28]
10055fb6:	aa08      	add	r2, sp, #32
10055fb8:	f000 fde4 	bl	10056b84 <GAT_srv_attr_value_write>
10055fbc:	2800      	cmp	r0, #0
10055fbe:	d0eb      	beq.n	10055f98 <GAT_att_srv_write_exc+0x88>
10055fc0:	2884      	cmp	r0, #132	@ 0x84
10055fc2:	d112      	bne.n	10055fea <GAT_att_srv_write_exc+0xda>
10055fc4:	6860      	ldr	r0, [r4, #4]
10055fc6:	68a1      	ldr	r1, [r4, #8]
10055fc8:	894a      	ldrh	r2, [r1, #10]
10055fca:	8909      	ldrh	r1, [r1, #8]
10055fcc:	9b05      	ldr	r3, [sp, #20]
10055fce:	b29b      	uxth	r3, r3
10055fd0:	9500      	str	r5, [sp, #0]
10055fd2:	9301      	str	r3, [sp, #4]
10055fd4:	9002      	str	r0, [sp, #8]
10055fd6:	200a      	movs	r0, #10
10055fd8:	9b04      	ldr	r3, [sp, #16]
10055fda:	f00d f8e3 	bl	100631a4 <aci_gatt_srv_write_event_push_noinline>
10055fde:	2800      	cmp	r0, #0
10055fe0:	d1da      	bne.n	10055f98 <GAT_att_srv_write_exc+0x88>
10055fe2:	2000      	movs	r0, #0
10055fe4:	6060      	str	r0, [r4, #4]
10055fe6:	2084      	movs	r0, #132	@ 0x84
10055fe8:	e7d6      	b.n	10055f98 <GAT_att_srv_write_exc+0x88>
10055fea:	a808      	add	r0, sp, #32
10055fec:	7802      	ldrb	r2, [r0, #0]
10055fee:	e7cd      	b.n	10055f8c <GAT_att_srv_write_exc+0x7c>

10055ff0 <GAT_att_srv_prep_wr_exc>:
10055ff0:	b570      	push	{r4, r5, r6, lr}
10055ff2:	b086      	sub	sp, #24
10055ff4:	4604      	mov	r4, r0
10055ff6:	7800      	ldrb	r0, [r0, #0]
10055ff8:	2800      	cmp	r0, #0
10055ffa:	d014      	beq.n	10056026 <GAT_att_srv_prep_wr_exc+0x36>
10055ffc:	89a5      	ldrh	r5, [r4, #12]
10055ffe:	68a0      	ldr	r0, [r4, #8]
10056000:	88c1      	ldrh	r1, [r0, #6]
10056002:	1f49      	subs	r1, r1, #5
10056004:	42a9      	cmp	r1, r5
10056006:	d800      	bhi.n	1005600a <GAT_att_srv_prep_wr_exc+0x1a>
10056008:	460d      	mov	r5, r1
1005600a:	b2aa      	uxth	r2, r5
1005600c:	6923      	ldr	r3, [r4, #16]
1005600e:	68c0      	ldr	r0, [r0, #12]
10056010:	8981      	ldrh	r1, [r0, #12]
10056012:	1d49      	adds	r1, r1, #5
10056014:	b289      	uxth	r1, r1
10056016:	f7fd f88f 	bl	10053138 <ACL_pkt_write>
1005601a:	1d68      	adds	r0, r5, #5
1005601c:	68a1      	ldr	r1, [r4, #8]
1005601e:	68c9      	ldr	r1, [r1, #12]
10056020:	8048      	strh	r0, [r1, #2]
10056022:	2000      	movs	r0, #0
10056024:	e040      	b.n	100560a8 <GAT_att_srv_prep_wr_exc+0xb8>
10056026:	6860      	ldr	r0, [r4, #4]
10056028:	8981      	ldrh	r1, [r0, #12]
1005602a:	1c49      	adds	r1, r1, #1
1005602c:	b289      	uxth	r1, r1
1005602e:	f7fd f86a 	bl	10053106 <ACL_pkt_read_16b>
10056032:	4605      	mov	r5, r0
10056034:	2203      	movs	r2, #3
10056036:	ab05      	add	r3, sp, #20
10056038:	4620      	mov	r0, r4
1005603a:	4629      	mov	r1, r5
1005603c:	f000 f8d7 	bl	100561ee <GAT_att_srv_set_attr_value_check>
10056040:	2800      	cmp	r0, #0
10056042:	d008      	beq.n	10056056 <GAT_att_srv_prep_wr_exc+0x66>
10056044:	4602      	mov	r2, r0
10056046:	68a0      	ldr	r0, [r4, #8]
10056048:	68c3      	ldr	r3, [r0, #12]
1005604a:	2016      	movs	r0, #22
1005604c:	4629      	mov	r1, r5
1005604e:	f7ff fb29 	bl	100556a4 <GAT_att_srv_write_err_packet>
10056052:	2086      	movs	r0, #134	@ 0x86
10056054:	e028      	b.n	100560a8 <GAT_att_srv_prep_wr_exc+0xb8>
10056056:	6860      	ldr	r0, [r4, #4]
10056058:	8981      	ldrh	r1, [r0, #12]
1005605a:	1cc9      	adds	r1, r1, #3
1005605c:	b289      	uxth	r1, r1
1005605e:	f7fd f852 	bl	10053106 <ACL_pkt_read_16b>
10056062:	4606      	mov	r6, r0
10056064:	6860      	ldr	r0, [r4, #4]
10056066:	68a1      	ldr	r1, [r4, #8]
10056068:	894a      	ldrh	r2, [r1, #10]
1005606a:	8909      	ldrh	r1, [r1, #8]
1005606c:	8843      	ldrh	r3, [r0, #2]
1005606e:	1f5b      	subs	r3, r3, #5
10056070:	b29b      	uxth	r3, r3
10056072:	9600      	str	r6, [sp, #0]
10056074:	9301      	str	r3, [sp, #4]
10056076:	9002      	str	r0, [sp, #8]
10056078:	200a      	movs	r0, #10
1005607a:	462b      	mov	r3, r5
1005607c:	f00d fafa 	bl	10063674 <aci_att_srv_prepare_write_req_event_push_noinline>
10056080:	2800      	cmp	r0, #0
10056082:	d111      	bne.n	100560a8 <GAT_att_srv_prep_wr_exc+0xb8>
10056084:	ab03      	add	r3, sp, #12
10056086:	705d      	strb	r5, [r3, #1]
10056088:	0a28      	lsrs	r0, r5, #8
1005608a:	7098      	strb	r0, [r3, #2]
1005608c:	70de      	strb	r6, [r3, #3]
1005608e:	2017      	movs	r0, #23
10056090:	7018      	strb	r0, [r3, #0]
10056092:	0a30      	lsrs	r0, r6, #8
10056094:	7118      	strb	r0, [r3, #4]
10056096:	68a0      	ldr	r0, [r4, #8]
10056098:	68c0      	ldr	r0, [r0, #12]
1005609a:	8981      	ldrh	r1, [r0, #12]
1005609c:	2205      	movs	r2, #5
1005609e:	f7fd f84b 	bl	10053138 <ACL_pkt_write>
100560a2:	2000      	movs	r0, #0
100560a4:	6060      	str	r0, [r4, #4]
100560a6:	2084      	movs	r0, #132	@ 0x84
100560a8:	b006      	add	sp, #24
100560aa:	bd70      	pop	{r4, r5, r6, pc}

100560ac <GAT_att_srv_exec_wr_exc>:
100560ac:	b510      	push	{r4, lr}
100560ae:	4604      	mov	r4, r0
100560b0:	7800      	ldrb	r0, [r0, #0]
100560b2:	2800      	cmp	r0, #0
100560b4:	d001      	beq.n	100560ba <GAT_att_srv_exec_wr_exc+0xe>
100560b6:	2000      	movs	r0, #0
100560b8:	bd10      	pop	{r4, pc}
100560ba:	6860      	ldr	r0, [r4, #4]
100560bc:	8981      	ldrh	r1, [r0, #12]
100560be:	1c49      	adds	r1, r1, #1
100560c0:	b289      	uxth	r1, r1
100560c2:	f000 f884 	bl	100561ce <ACL_pkt_read_8b>
100560c6:	4603      	mov	r3, r0
100560c8:	68a0      	ldr	r0, [r4, #8]
100560ca:	8942      	ldrh	r2, [r0, #10]
100560cc:	8901      	ldrh	r1, [r0, #8]
100560ce:	2002      	movs	r0, #2
100560d0:	f00d fafe 	bl	100636d0 <aci_att_srv_exec_write_req_event_push_noinline>
100560d4:	2800      	cmp	r0, #0
100560d6:	d000      	beq.n	100560da <GAT_att_srv_exec_wr_exc+0x2e>
100560d8:	bd10      	pop	{r4, pc}
100560da:	68a0      	ldr	r0, [r4, #8]
100560dc:	68c0      	ldr	r0, [r0, #12]
100560de:	8981      	ldrh	r1, [r0, #12]
100560e0:	2219      	movs	r2, #25
100560e2:	f7ff fa59 	bl	10055598 <ACL_pkt_write_8b>
100560e6:	68a0      	ldr	r0, [r4, #8]
100560e8:	68c0      	ldr	r0, [r0, #12]
100560ea:	2101      	movs	r1, #1
100560ec:	8041      	strh	r1, [r0, #2]
100560ee:	2084      	movs	r0, #132	@ 0x84
100560f0:	bd10      	pop	{r4, pc}

100560f2 <GAT_att_srv_confirm_exc>:
100560f2:	b5b0      	push	{r4, r5, r7, lr}
100560f4:	4605      	mov	r5, r0
100560f6:	6880      	ldr	r0, [r0, #8]
100560f8:	8942      	ldrh	r2, [r0, #10]
100560fa:	8901      	ldrh	r1, [r0, #8]
100560fc:	2042      	movs	r0, #66	@ 0x42
100560fe:	f00c ffe5 	bl	100630cc <aci_gatt_srv_confirmation_event_push_noinline>
10056102:	4604      	mov	r4, r0
10056104:	2800      	cmp	r0, #0
10056106:	d110      	bne.n	1005612a <GAT_att_srv_confirm_exc+0x38>
10056108:	68a8      	ldr	r0, [r5, #8]
1005610a:	8942      	ldrh	r2, [r0, #10]
1005610c:	8901      	ldrh	r1, [r0, #8]
1005610e:	2001      	movs	r0, #1
10056110:	f7fe fef2 	bl	10054ef8 <GAT_att_cmn_stop_timer>
10056114:	68a8      	ldr	r0, [r5, #8]
10056116:	8881      	ldrh	r1, [r0, #4]
10056118:	064a      	lsls	r2, r1, #25
1005611a:	d503      	bpl.n	10056124 <GAT_att_srv_confirm_exc+0x32>
1005611c:	f000 fe76 	bl	10056e0c <GAT_srv_set_change_aware>
10056120:	68a8      	ldr	r0, [r5, #8]
10056122:	8881      	ldrh	r1, [r0, #4]
10056124:	2202      	movs	r2, #2
10056126:	4391      	bics	r1, r2
10056128:	8081      	strh	r1, [r0, #4]
1005612a:	4620      	mov	r0, r4
1005612c:	bdb0      	pop	{r4, r5, r7, pc}

1005612e <GAT_att_srv_get_handle_range>:
1005612e:	b570      	push	{r4, r5, r6, lr}
10056130:	4614      	mov	r4, r2
10056132:	460d      	mov	r5, r1
10056134:	4606      	mov	r6, r0
10056136:	8980      	ldrh	r0, [r0, #12]
10056138:	1c40      	adds	r0, r0, #1
1005613a:	b281      	uxth	r1, r0
1005613c:	4630      	mov	r0, r6
1005613e:	f7fc ffe2 	bl	10053106 <ACL_pkt_read_16b>
10056142:	8028      	strh	r0, [r5, #0]
10056144:	89b0      	ldrh	r0, [r6, #12]
10056146:	1cc0      	adds	r0, r0, #3
10056148:	b281      	uxth	r1, r0
1005614a:	4630      	mov	r0, r6
1005614c:	f7fc ffdb 	bl	10053106 <ACL_pkt_read_16b>
10056150:	8020      	strh	r0, [r4, #0]
10056152:	bd70      	pop	{r4, r5, r6, pc}

10056154 <GAT_att_srv_value_read>:
10056154:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056156:	461f      	mov	r7, r3
10056158:	4606      	mov	r6, r0
1005615a:	9d08      	ldr	r5, [sp, #32]
1005615c:	2400      	movs	r4, #0
1005615e:	702c      	strb	r4, [r5, #0]
10056160:	7800      	ldrb	r0, [r0, #0]
10056162:	2801      	cmp	r0, #1
10056164:	d107      	bne.n	10056176 <GAT_att_srv_value_read+0x22>
10056166:	6930      	ldr	r0, [r6, #16]
10056168:	2800      	cmp	r0, #0
1005616a:	d01f      	beq.n	100561ac <GAT_att_srv_value_read+0x58>
1005616c:	360c      	adds	r6, #12
1005616e:	603e      	str	r6, [r7, #0]
10056170:	2000      	movs	r0, #0
10056172:	7028      	strb	r0, [r5, #0]
10056174:	e029      	b.n	100561ca <GAT_att_srv_value_read+0x76>
10056176:	9202      	str	r2, [sp, #8]
10056178:	68b0      	ldr	r0, [r6, #8]
1005617a:	8900      	ldrh	r0, [r0, #8]
1005617c:	9101      	str	r1, [sp, #4]
1005617e:	463a      	mov	r2, r7
10056180:	462b      	mov	r3, r5
10056182:	f000 fb70 	bl	10056866 <GAT_srv_attr_value_read>
10056186:	2800      	cmp	r0, #0
10056188:	d012      	beq.n	100561b0 <GAT_att_srv_value_read+0x5c>
1005618a:	2884      	cmp	r0, #132	@ 0x84
1005618c:	d11d      	bne.n	100561ca <GAT_att_srv_value_read+0x76>
1005618e:	9801      	ldr	r0, [sp, #4]
10056190:	8843      	ldrh	r3, [r0, #2]
10056192:	68b0      	ldr	r0, [r6, #8]
10056194:	8942      	ldrh	r2, [r0, #10]
10056196:	8901      	ldrh	r1, [r0, #8]
10056198:	9802      	ldr	r0, [sp, #8]
1005619a:	9000      	str	r0, [sp, #0]
1005619c:	2002      	movs	r0, #2
1005619e:	f00c ffc7 	bl	10063130 <aci_gatt_srv_read_event_push_noinline>
100561a2:	2800      	cmp	r0, #0
100561a4:	d111      	bne.n	100561ca <GAT_att_srv_value_read+0x76>
100561a6:	207b      	movs	r0, #123	@ 0x7b
100561a8:	43c0      	mvns	r0, r0
100561aa:	e00e      	b.n	100561ca <GAT_att_srv_value_read+0x76>
100561ac:	200e      	movs	r0, #14
100561ae:	e005      	b.n	100561bc <GAT_att_srv_value_read+0x68>
100561b0:	6838      	ldr	r0, [r7, #0]
100561b2:	8801      	ldrh	r1, [r0, #0]
100561b4:	9a02      	ldr	r2, [sp, #8]
100561b6:	4291      	cmp	r1, r2
100561b8:	d203      	bcs.n	100561c2 <GAT_att_srv_value_read+0x6e>
100561ba:	2007      	movs	r0, #7
100561bc:	7028      	strb	r0, [r5, #0]
100561be:	2086      	movs	r0, #134	@ 0x86
100561c0:	e003      	b.n	100561ca <GAT_att_srv_value_read+0x76>
100561c2:	6841      	ldr	r1, [r0, #4]
100561c4:	1889      	adds	r1, r1, r2
100561c6:	6041      	str	r1, [r0, #4]
100561c8:	4620      	mov	r0, r4
100561ca:	b2c0      	uxtb	r0, r0
100561cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100561ce <ACL_pkt_read_8b>:
100561ce:	b51c      	push	{r2, r3, r4, lr}
100561d0:	291f      	cmp	r1, #31
100561d2:	d803      	bhi.n	100561dc <ACL_pkt_read_8b+0xe>
100561d4:	aa01      	add	r2, sp, #4
100561d6:	8011      	strh	r1, [r2, #0]
100561d8:	6840      	ldr	r0, [r0, #4]
100561da:	e005      	b.n	100561e8 <ACL_pkt_read_8b+0x1a>
100561dc:	6840      	ldr	r0, [r0, #4]
100561de:	ac01      	add	r4, sp, #4
100561e0:	4622      	mov	r2, r4
100561e2:	f008 ff52 	bl	1005f08a <Mem_Buff_get_buff_off>
100561e6:	8821      	ldrh	r1, [r4, #0]
100561e8:	1840      	adds	r0, r0, r1
100561ea:	7900      	ldrb	r0, [r0, #4]
100561ec:	bd1c      	pop	{r2, r3, r4, pc}

100561ee <GAT_att_srv_set_attr_value_check>:
100561ee:	b5f0      	push	{r4, r5, r6, r7, lr}
100561f0:	b085      	sub	sp, #20
100561f2:	461e      	mov	r6, r3
100561f4:	4614      	mov	r4, r2
100561f6:	460f      	mov	r7, r1
100561f8:	4605      	mov	r5, r0
100561fa:	a801      	add	r0, sp, #4
100561fc:	8101      	strh	r1, [r0, #8]
100561fe:	7102      	strb	r2, [r0, #4]
10056200:	68a9      	ldr	r1, [r5, #8]
10056202:	9101      	str	r1, [sp, #4]
10056204:	f000 fe10 	bl	10056e28 <GAT_srv_check_change_aware>
10056208:	2886      	cmp	r0, #134	@ 0x86
1005620a:	d101      	bne.n	10056210 <GAT_att_srv_set_attr_value_check+0x22>
1005620c:	2012      	movs	r0, #18
1005620e:	e00c      	b.n	1005622a <GAT_att_srv_set_attr_value_check+0x3c>
10056210:	4638      	mov	r0, r7
10056212:	f00d fff1 	bl	100641f8 <GAT_att_db_find_by_handle>
10056216:	6030      	str	r0, [r6, #0]
10056218:	2800      	cmp	r0, #0
1005621a:	d005      	beq.n	10056228 <GAT_att_srv_set_attr_value_check+0x3a>
1005621c:	68a9      	ldr	r1, [r5, #8]
1005621e:	8909      	ldrh	r1, [r1, #8]
10056220:	4622      	mov	r2, r4
10056222:	f000 fb39 	bl	10056898 <GAT_srv_check_perms>
10056226:	e000      	b.n	1005622a <GAT_att_srv_set_attr_value_check+0x3c>
10056228:	2001      	movs	r0, #1
1005622a:	b005      	add	sp, #20
1005622c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005622e <GAT_clt_confirm_indication>:
1005622e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056230:	aa01      	add	r2, sp, #4
10056232:	8091      	strh	r1, [r2, #4]
10056234:	8050      	strh	r0, [r2, #2]
10056236:	201e      	movs	r0, #30
10056238:	7010      	strb	r0, [r2, #0]
1005623a:	4610      	mov	r0, r2
1005623c:	f00d fce8 	bl	10063c10 <GAT_att_clt_tx>
10056240:	b006      	add	sp, #24
10056242:	bd80      	pop	{r7, pc}

10056244 <GAT_srv_init>:
10056244:	b580      	push	{r7, lr}
10056246:	4806      	ldr	r0, [pc, #24]	@ (10056260 <__arm_cp.0_0>)
10056248:	8900      	ldrh	r0, [r0, #8]
1005624a:	3016      	adds	r0, #22
1005624c:	b280      	uxth	r0, r0
1005624e:	f00d ff6f 	bl	10064130 <GAT_att_db_init>
10056252:	4804      	ldr	r0, [pc, #16]	@ (10056264 <__arm_cp.0_1>)
10056254:	6800      	ldr	r0, [r0, #0]
10056256:	215c      	movs	r1, #92	@ 0x5c
10056258:	2201      	movs	r2, #1
1005625a:	5442      	strb	r2, [r0, r1]
1005625c:	bd80      	pop	{r7, pc}
1005625e:	46c0      	nop			@ (mov r8, r8)

10056260 <__arm_cp.0_0>:
10056260:	20001188 	.word	0x20001188

10056264 <__arm_cp.0_1>:
10056264:	2000112c 	.word	0x2000112c

10056268 <GAT_srv_connection>:
10056268:	b5f0      	push	{r4, r5, r6, r7, lr}
1005626a:	b0a1      	sub	sp, #132	@ 0x84
1005626c:	4604      	mov	r4, r0
1005626e:	f000 f89b 	bl	100563a8 <GAT_srv_is_bonded>
10056272:	2801      	cmp	r0, #1
10056274:	d114      	bne.n	100562a0 <GAT_srv_connection+0x38>
10056276:	a807      	add	r0, sp, #28
10056278:	4945      	ldr	r1, [pc, #276]	@ (10056390 <__arm_cp.1_0>)
1005627a:	2514      	movs	r5, #20
1005627c:	462a      	mov	r2, r5
1005627e:	f011 fbb4 	bl	100679ea <__aeabi_memcpy>
10056282:	a802      	add	r0, sp, #8
10056284:	4943      	ldr	r1, [pc, #268]	@ (10056394 <__arm_cp.1_1>)
10056286:	462a      	mov	r2, r5
10056288:	f011 fbaf 	bl	100679ea <__aeabi_memcpy>
1005628c:	2044      	movs	r0, #68	@ 0x44
1005628e:	900f      	str	r0, [sp, #60]	@ 0x3c
10056290:	2101      	movs	r1, #1
10056292:	aa0d      	add	r2, sp, #52	@ 0x34
10056294:	ab0c      	add	r3, sp, #48	@ 0x30
10056296:	4620      	mov	r0, r4
10056298:	f00b fd2b 	bl	10061cf2 <smp_sap_get_remote_address_check_addr_type>
1005629c:	2800      	cmp	r0, #0
1005629e:	d001      	beq.n	100562a4 <GAT_srv_connection+0x3c>
100562a0:	b021      	add	sp, #132	@ 0x84
100562a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100562a4:	a80c      	add	r0, sp, #48	@ 0x30
100562a6:	7801      	ldrb	r1, [r0, #0]
100562a8:	a80d      	add	r0, sp, #52	@ 0x34
100562aa:	aa0f      	add	r2, sp, #60	@ 0x3c
100562ac:	ab10      	add	r3, sp, #64	@ 0x40
100562ae:	f009 fb9c 	bl	1005f9ea <SDB_sap_read_peer_bonded_gatt_client_data>
100562b2:	2800      	cmp	r0, #0
100562b4:	d1f4      	bne.n	100562a0 <GAT_srv_connection+0x38>
100562b6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
100562b8:	2844      	cmp	r0, #68	@ 0x44
100562ba:	d8f1      	bhi.n	100562a0 <GAT_srv_connection+0x38>
100562bc:	2001      	movs	r0, #1
100562be:	4d36      	ldr	r5, [pc, #216]	@ (10056398 <__arm_cp.1_2>)
100562c0:	aa02      	add	r2, sp, #8
100562c2:	4629      	mov	r1, r5
100562c4:	f000 fe0c 	bl	10056ee0 <GAT_srv_find_by_type_attr_p>
100562c8:	2800      	cmp	r0, #0
100562ca:	d010      	beq.n	100562ee <GAT_srv_connection+0x86>
100562cc:	4606      	mov	r6, r0
100562ce:	4620      	mov	r0, r4
100562d0:	f7fe fe4a 	bl	10054f68 <GAT_att_cmn_get_conn_index>
100562d4:	a910      	add	r1, sp, #64	@ 0x40
100562d6:	7c0a      	ldrb	r2, [r1, #16]
100562d8:	4930      	ldr	r1, [pc, #192]	@ (1005639c <__arm_cp.1_3>)
100562da:	7ac9      	ldrb	r1, [r1, #11]
100562dc:	6873      	ldr	r3, [r6, #4]
100562de:	6a1b      	ldr	r3, [r3, #32]
100562e0:	689b      	ldr	r3, [r3, #8]
100562e2:	9300      	str	r3, [sp, #0]
100562e4:	0849      	lsrs	r1, r1, #1
100562e6:	1c4b      	adds	r3, r1, #1
100562e8:	2104      	movs	r1, #4
100562ea:	f000 fd08 	bl	10056cfe <GAT_srv_set_zip_val>
100562ee:	482c      	ldr	r0, [pc, #176]	@ (100563a0 <__arm_cp.1_4>)
100562f0:	6801      	ldr	r1, [r0, #0]
100562f2:	3183      	adds	r1, #131	@ 0x83
100562f4:	a810      	add	r0, sp, #64	@ 0x40
100562f6:	2210      	movs	r2, #16
100562f8:	f7ef fdde 	bl	10045eb8 <BLEPLAT_MemCmp>
100562fc:	2800      	cmp	r0, #0
100562fe:	d01f      	beq.n	10056340 <GAT_srv_connection+0xd8>
10056300:	2001      	movs	r0, #1
10056302:	aa07      	add	r2, sp, #28
10056304:	4629      	mov	r1, r5
10056306:	f000 fdeb 	bl	10056ee0 <GAT_srv_find_by_type_attr_p>
1005630a:	2800      	cmp	r0, #0
1005630c:	d0c8      	beq.n	100562a0 <GAT_srv_connection+0x38>
1005630e:	f000 fe3f 	bl	10056f90 <GAT_srv_get_cccd_attr_p>
10056312:	2800      	cmp	r0, #0
10056314:	d0c4      	beq.n	100562a0 <GAT_srv_connection+0x38>
10056316:	4605      	mov	r5, r0
10056318:	2104      	movs	r1, #4
1005631a:	4620      	mov	r0, r4
1005631c:	f7fe fd7a 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
10056320:	8881      	ldrh	r1, [r0, #4]
10056322:	2240      	movs	r2, #64	@ 0x40
10056324:	430a      	orrs	r2, r1
10056326:	8082      	strh	r2, [r0, #4]
10056328:	a810      	add	r0, sp, #64	@ 0x40
1005632a:	7c42      	ldrb	r2, [r0, #17]
1005632c:	4620      	mov	r0, r4
1005632e:	4629      	mov	r1, r5
10056330:	f000 fd26 	bl	10056d80 <GAT_srv_set_cccd_val>
10056334:	200b      	movs	r0, #11
10056336:	f00b feb1 	bl	1006209c <tsk_notify_idx>
1005633a:	f7ed fdb0 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005633e:	e7af      	b.n	100562a0 <GAT_srv_connection+0x38>
10056340:	2001      	movs	r0, #1
10056342:	f00d ff81 	bl	10064248 <GAT_att_db_find_from_handle>
10056346:	4606      	mov	r6, r0
10056348:	ad10      	add	r5, sp, #64	@ 0x40
1005634a:	3512      	adds	r5, #18
1005634c:	2700      	movs	r7, #0
1005634e:	2e00      	cmp	r6, #0
10056350:	d0a6      	beq.n	100562a0 <GAT_srv_connection+0x38>
10056352:	b2b8      	uxth	r0, r7
10056354:	2863      	cmp	r0, #99	@ 0x63
10056356:	d8a3      	bhi.n	100562a0 <GAT_srv_connection+0x38>
10056358:	7831      	ldrb	r1, [r6, #0]
1005635a:	2904      	cmp	r1, #4
1005635c:	d112      	bne.n	10056384 <GAT_srv_connection+0x11c>
1005635e:	6871      	ldr	r1, [r6, #4]
10056360:	7d0a      	ldrb	r2, [r1, #20]
10056362:	2a10      	cmp	r2, #16
10056364:	d10e      	bne.n	10056384 <GAT_srv_connection+0x11c>
10056366:	8a09      	ldrh	r1, [r1, #16]
10056368:	4a0e      	ldr	r2, [pc, #56]	@ (100563a4 <__arm_cp.1_5>)
1005636a:	4291      	cmp	r1, r2
1005636c:	d10a      	bne.n	10056384 <GAT_srv_connection+0x11c>
1005636e:	2102      	movs	r1, #2
10056370:	2232      	movs	r2, #50	@ 0x32
10056372:	462b      	mov	r3, r5
10056374:	f000 fcb0 	bl	10056cd8 <GAT_srv_get_zip_val>
10056378:	4602      	mov	r2, r0
1005637a:	4620      	mov	r0, r4
1005637c:	4631      	mov	r1, r6
1005637e:	f000 fcff 	bl	10056d80 <GAT_srv_set_cccd_val>
10056382:	1c7f      	adds	r7, r7, #1
10056384:	4630      	mov	r0, r6
10056386:	f00d ffc1 	bl	1006430c <GAT_att_db_get_next>
1005638a:	4606      	mov	r6, r0
1005638c:	e7df      	b.n	1005634e <GAT_srv_connection+0xe6>
1005638e:	46c0      	nop			@ (mov r8, r8)

10056390 <__arm_cp.1_0>:
10056390:	1006d020 	.word	0x1006d020

10056394 <__arm_cp.1_1>:
10056394:	1006d034 	.word	0x1006d034

10056398 <__arm_cp.1_2>:
10056398:	0000ffff 	.word	0x0000ffff

1005639c <__arm_cp.1_3>:
1005639c:	20001188 	.word	0x20001188

100563a0 <__arm_cp.1_4>:
100563a0:	2000112c 	.word	0x2000112c

100563a4 <__arm_cp.1_5>:
100563a4:	00002902 	.word	0x00002902

100563a8 <GAT_srv_is_bonded>:
100563a8:	b580      	push	{r7, lr}
100563aa:	f00b fcd8 	bl	10061d5e <smp_sap_check_is_peer_device_bonded>
100563ae:	4241      	negs	r1, r0
100563b0:	4148      	adcs	r0, r1
100563b2:	bd80      	pop	{r7, pc}

100563b4 <GAT_srv_bearer_close>:
100563b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100563b6:	b0a1      	sub	sp, #132	@ 0x84
100563b8:	2904      	cmp	r1, #4
100563ba:	d000      	beq.n	100563be <GAT_srv_bearer_close+0xa>
100563bc:	e0de      	b.n	1005657c <GAT_srv_bearer_close+0x1c8>
100563be:	4607      	mov	r7, r0
100563c0:	f7ff fff2 	bl	100563a8 <GAT_srv_is_bonded>
100563c4:	4c6e      	ldr	r4, [pc, #440]	@ (10056580 <__arm_cp.3_0>)
100563c6:	4e6f      	ldr	r6, [pc, #444]	@ (10056584 <__arm_cp.3_1>)
100563c8:	2801      	cmp	r0, #1
100563ca:	d000      	beq.n	100563ce <GAT_srv_bearer_close+0x1a>
100563cc:	e0a0      	b.n	10056510 <GAT_srv_bearer_close+0x15c>
100563ce:	ad0b      	add	r5, sp, #44	@ 0x2c
100563d0:	496d      	ldr	r1, [pc, #436]	@ (10056588 <__arm_cp.3_2>)
100563d2:	2214      	movs	r2, #20
100563d4:	4628      	mov	r0, r5
100563d6:	f011 fb08 	bl	100679ea <__aeabi_memcpy>
100563da:	a810      	add	r0, sp, #64	@ 0x40
100563dc:	4634      	mov	r4, r6
100563de:	2600      	movs	r6, #0
100563e0:	2244      	movs	r2, #68	@ 0x44
100563e2:	4631      	mov	r1, r6
100563e4:	f7ef fd58 	bl	10045e98 <BLEPLAT_MemSet>
100563e8:	2001      	movs	r0, #1
100563ea:	4621      	mov	r1, r4
100563ec:	462a      	mov	r2, r5
100563ee:	f000 fd77 	bl	10056ee0 <GAT_srv_find_by_type_attr_p>
100563f2:	2800      	cmp	r0, #0
100563f4:	d00f      	beq.n	10056416 <GAT_srv_bearer_close+0x62>
100563f6:	4604      	mov	r4, r0
100563f8:	4638      	mov	r0, r7
100563fa:	f7fe fdb5 	bl	10054f68 <GAT_att_cmn_get_conn_index>
100563fe:	6861      	ldr	r1, [r4, #4]
10056400:	6a09      	ldr	r1, [r1, #32]
10056402:	688b      	ldr	r3, [r1, #8]
10056404:	4961      	ldr	r1, [pc, #388]	@ (1005658c <__arm_cp.3_3>)
10056406:	7ac9      	ldrb	r1, [r1, #11]
10056408:	0849      	lsrs	r1, r1, #1
1005640a:	1c4a      	adds	r2, r1, #1
1005640c:	2104      	movs	r1, #4
1005640e:	f000 fc63 	bl	10056cd8 <GAT_srv_get_zip_val>
10056412:	a910      	add	r1, sp, #64	@ 0x40
10056414:	7408      	strb	r0, [r1, #16]
10056416:	2104      	movs	r1, #4
10056418:	9704      	str	r7, [sp, #16]
1005641a:	4638      	mov	r0, r7
1005641c:	f7fe fcfa 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
10056420:	a910      	add	r1, sp, #64	@ 0x40
10056422:	7c09      	ldrb	r1, [r1, #16]
10056424:	2901      	cmp	r1, #1
10056426:	d103      	bne.n	10056430 <GAT_srv_bearer_close+0x7c>
10056428:	8880      	ldrh	r0, [r0, #4]
1005642a:	0600      	lsls	r0, r0, #24
1005642c:	0f80      	lsrs	r0, r0, #30
1005642e:	d106      	bne.n	1005643e <GAT_srv_bearer_close+0x8a>
10056430:	4857      	ldr	r0, [pc, #348]	@ (10056590 <__arm_cp.3_4>)
10056432:	6801      	ldr	r1, [r0, #0]
10056434:	3183      	adds	r1, #131	@ 0x83
10056436:	a810      	add	r0, sp, #64	@ 0x40
10056438:	2210      	movs	r2, #16
1005643a:	f7ef fd1d 	bl	10045e78 <BLEPLAT_MemCpy>
1005643e:	2001      	movs	r0, #1
10056440:	9003      	str	r0, [sp, #12]
10056442:	f00d ff01 	bl	10064248 <GAT_att_db_find_from_handle>
10056446:	4605      	mov	r5, r0
10056448:	a810      	add	r0, sp, #64	@ 0x40
1005644a:	3012      	adds	r0, #18
1005644c:	9002      	str	r0, [sp, #8]
1005644e:	9605      	str	r6, [sp, #20]
10056450:	4c4b      	ldr	r4, [pc, #300]	@ (10056580 <__arm_cp.3_0>)
10056452:	2d00      	cmp	r5, #0
10056454:	d034      	beq.n	100564c0 <GAT_srv_bearer_close+0x10c>
10056456:	b2b7      	uxth	r7, r6
10056458:	2f63      	cmp	r7, #99	@ 0x63
1005645a:	d831      	bhi.n	100564c0 <GAT_srv_bearer_close+0x10c>
1005645c:	7828      	ldrb	r0, [r5, #0]
1005645e:	2804      	cmp	r0, #4
10056460:	d00b      	beq.n	1005647a <GAT_srv_bearer_close+0xc6>
10056462:	2802      	cmp	r0, #2
10056464:	d127      	bne.n	100564b6 <GAT_srv_bearer_close+0x102>
10056466:	6868      	ldr	r0, [r5, #4]
10056468:	7d01      	ldrb	r1, [r0, #20]
1005646a:	2910      	cmp	r1, #16
1005646c:	d121      	bne.n	100564b2 <GAT_srv_bearer_close+0xfe>
1005646e:	8a00      	ldrh	r0, [r0, #16]
10056470:	4949      	ldr	r1, [pc, #292]	@ (10056598 <__arm_cp.3_6>)
10056472:	4288      	cmp	r0, r1
10056474:	d11d      	bne.n	100564b2 <GAT_srv_bearer_close+0xfe>
10056476:	9803      	ldr	r0, [sp, #12]
10056478:	e01c      	b.n	100564b4 <GAT_srv_bearer_close+0x100>
1005647a:	6868      	ldr	r0, [r5, #4]
1005647c:	7d01      	ldrb	r1, [r0, #20]
1005647e:	2910      	cmp	r1, #16
10056480:	d119      	bne.n	100564b6 <GAT_srv_bearer_close+0x102>
10056482:	8a00      	ldrh	r0, [r0, #16]
10056484:	42a0      	cmp	r0, r4
10056486:	d116      	bne.n	100564b6 <GAT_srv_bearer_close+0x102>
10056488:	9804      	ldr	r0, [sp, #16]
1005648a:	4629      	mov	r1, r5
1005648c:	f000 fdb0 	bl	10056ff0 <GAT_srv_get_cccd_val>
10056490:	4604      	mov	r4, r0
10056492:	9802      	ldr	r0, [sp, #8]
10056494:	9000      	str	r0, [sp, #0]
10056496:	b2e2      	uxtb	r2, r4
10056498:	2102      	movs	r1, #2
1005649a:	2332      	movs	r3, #50	@ 0x32
1005649c:	4638      	mov	r0, r7
1005649e:	f000 fc2e 	bl	10056cfe <GAT_srv_set_zip_val>
100564a2:	9805      	ldr	r0, [sp, #20]
100564a4:	2801      	cmp	r0, #1
100564a6:	d101      	bne.n	100564ac <GAT_srv_bearer_close+0xf8>
100564a8:	a810      	add	r0, sp, #64	@ 0x40
100564aa:	7444      	strb	r4, [r0, #17]
100564ac:	1c76      	adds	r6, r6, #1
100564ae:	4c34      	ldr	r4, [pc, #208]	@ (10056580 <__arm_cp.3_0>)
100564b0:	e001      	b.n	100564b6 <GAT_srv_bearer_close+0x102>
100564b2:	2000      	movs	r0, #0
100564b4:	9005      	str	r0, [sp, #20]
100564b6:	4628      	mov	r0, r5
100564b8:	f00d ff28 	bl	1006430c <GAT_att_db_get_next>
100564bc:	4605      	mov	r5, r0
100564be:	e7c8      	b.n	10056452 <GAT_srv_bearer_close+0x9e>
100564c0:	2101      	movs	r1, #1
100564c2:	aa09      	add	r2, sp, #36	@ 0x24
100564c4:	ab08      	add	r3, sp, #32
100564c6:	9f04      	ldr	r7, [sp, #16]
100564c8:	4638      	mov	r0, r7
100564ca:	f00b fc12 	bl	10061cf2 <smp_sap_get_remote_address_check_addr_type>
100564ce:	2800      	cmp	r0, #0
100564d0:	d11c      	bne.n	1005650c <GAT_srv_bearer_close+0x158>
100564d2:	b2b0      	uxth	r0, r6
100564d4:	0040      	lsls	r0, r0, #1
100564d6:	492f      	ldr	r1, [pc, #188]	@ (10056594 <__arm_cp.3_5>)
100564d8:	1840      	adds	r0, r0, r1
100564da:	0880      	lsrs	r0, r0, #2
100564dc:	3013      	adds	r0, #19
100564de:	b282      	uxth	r2, r0
100564e0:	a808      	add	r0, sp, #32
100564e2:	7801      	ldrb	r1, [r0, #0]
100564e4:	a809      	add	r0, sp, #36	@ 0x24
100564e6:	ab10      	add	r3, sp, #64	@ 0x40
100564e8:	f009 fa4d 	bl	1005f986 <SDB_sap_write_peer_bonded_gatt_client_data>
100564ec:	2800      	cmp	r0, #0
100564ee:	d00d      	beq.n	1005650c <GAT_srv_bearer_close+0x158>
100564f0:	4604      	mov	r4, r0
100564f2:	ad06      	add	r5, sp, #24
100564f4:	a909      	add	r1, sp, #36	@ 0x24
100564f6:	2206      	movs	r2, #6
100564f8:	4628      	mov	r0, r5
100564fa:	f7ef fcbd 	bl	10045e78 <BLEPLAT_MemCpy>
100564fe:	71ac      	strb	r4, [r5, #6]
10056500:	2042      	movs	r0, #66	@ 0x42
10056502:	2104      	movs	r1, #4
10056504:	2207      	movs	r2, #7
10056506:	462b      	mov	r3, r5
10056508:	f00d f9dc 	bl	100638c4 <aci_hal_fw_error_event_push_noinline>
1005650c:	4e1d      	ldr	r6, [pc, #116]	@ (10056584 <__arm_cp.3_1>)
1005650e:	4c1c      	ldr	r4, [pc, #112]	@ (10056580 <__arm_cp.3_0>)
10056510:	2001      	movs	r0, #1
10056512:	f00d fe99 	bl	10064248 <GAT_att_db_find_from_handle>
10056516:	4605      	mov	r5, r0
10056518:	2800      	cmp	r0, #0
1005651a:	d012      	beq.n	10056542 <GAT_srv_bearer_close+0x18e>
1005651c:	7828      	ldrb	r0, [r5, #0]
1005651e:	2804      	cmp	r0, #4
10056520:	d10b      	bne.n	1005653a <GAT_srv_bearer_close+0x186>
10056522:	6868      	ldr	r0, [r5, #4]
10056524:	7d01      	ldrb	r1, [r0, #20]
10056526:	2910      	cmp	r1, #16
10056528:	d107      	bne.n	1005653a <GAT_srv_bearer_close+0x186>
1005652a:	8a00      	ldrh	r0, [r0, #16]
1005652c:	42a0      	cmp	r0, r4
1005652e:	d104      	bne.n	1005653a <GAT_srv_bearer_close+0x186>
10056530:	2200      	movs	r2, #0
10056532:	4638      	mov	r0, r7
10056534:	4629      	mov	r1, r5
10056536:	f000 fc23 	bl	10056d80 <GAT_srv_set_cccd_val>
1005653a:	4628      	mov	r0, r5
1005653c:	f00d fee6 	bl	1006430c <GAT_att_db_get_next>
10056540:	e7e9      	b.n	10056516 <GAT_srv_bearer_close+0x162>
10056542:	ac10      	add	r4, sp, #64	@ 0x40
10056544:	4910      	ldr	r1, [pc, #64]	@ (10056588 <__arm_cp.3_2>)
10056546:	2214      	movs	r2, #20
10056548:	4620      	mov	r0, r4
1005654a:	f011 fa4e 	bl	100679ea <__aeabi_memcpy>
1005654e:	2001      	movs	r0, #1
10056550:	4631      	mov	r1, r6
10056552:	4622      	mov	r2, r4
10056554:	f000 fcc4 	bl	10056ee0 <GAT_srv_find_by_type_attr_p>
10056558:	2800      	cmp	r0, #0
1005655a:	d00f      	beq.n	1005657c <GAT_srv_bearer_close+0x1c8>
1005655c:	4604      	mov	r4, r0
1005655e:	4638      	mov	r0, r7
10056560:	f7fe fd02 	bl	10054f68 <GAT_att_cmn_get_conn_index>
10056564:	4909      	ldr	r1, [pc, #36]	@ (1005658c <__arm_cp.3_3>)
10056566:	7ac9      	ldrb	r1, [r1, #11]
10056568:	6862      	ldr	r2, [r4, #4]
1005656a:	6a12      	ldr	r2, [r2, #32]
1005656c:	6892      	ldr	r2, [r2, #8]
1005656e:	9200      	str	r2, [sp, #0]
10056570:	0849      	lsrs	r1, r1, #1
10056572:	1c4b      	adds	r3, r1, #1
10056574:	2104      	movs	r1, #4
10056576:	2200      	movs	r2, #0
10056578:	f000 fbc1 	bl	10056cfe <GAT_srv_set_zip_val>
1005657c:	b021      	add	sp, #132	@ 0x84
1005657e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10056580 <__arm_cp.3_0>:
10056580:	00002902 	.word	0x00002902

10056584 <__arm_cp.3_1>:
10056584:	0000ffff 	.word	0x0000ffff

10056588 <__arm_cp.3_2>:
10056588:	1006d034 	.word	0x1006d034

1005658c <__arm_cp.3_3>:
1005658c:	20001188 	.word	0x20001188

10056590 <__arm_cp.3_4>:
10056590:	2000112c 	.word	0x2000112c

10056594 <__arm_cp.3_5>:
10056594:	0003fffe 	.word	0x0003fffe

10056598 <__arm_cp.3_6>:
10056598:	00002a05 	.word	0x00002a05

1005659c <GAT_srv_db_hash_tsk>:
1005659c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005659e:	b0d3      	sub	sp, #332	@ 0x14c
100565a0:	2500      	movs	r5, #0
100565a2:	950c      	str	r5, [sp, #48]	@ 0x30
100565a4:	950b      	str	r5, [sp, #44]	@ 0x2c
100565a6:	950a      	str	r5, [sp, #40]	@ 0x28
100565a8:	9509      	str	r5, [sp, #36]	@ 0x24
100565aa:	2041      	movs	r0, #65	@ 0x41
100565ac:	0082      	lsls	r2, r0, #2
100565ae:	ac0d      	add	r4, sp, #52	@ 0x34
100565b0:	4620      	mov	r0, r4
100565b2:	4629      	mov	r1, r5
100565b4:	f7ef fc70 	bl	10045e98 <BLEPLAT_MemSet>
100565b8:	7125      	strb	r5, [r4, #4]
100565ba:	2010      	movs	r0, #16
100565bc:	9044      	str	r0, [sp, #272]	@ 0x110
100565be:	9016      	str	r0, [sp, #88]	@ 0x58
100565c0:	a809      	add	r0, sp, #36	@ 0x24
100565c2:	900f      	str	r0, [sp, #60]	@ 0x3c
100565c4:	4620      	mov	r0, r4
100565c6:	f7ef fcd5 	bl	10045f74 <BLEPLAT_AesCMACEncryptInit>
100565ca:	34dc      	adds	r4, #220	@ 0xdc
100565cc:	9401      	str	r4, [sp, #4]
100565ce:	2001      	movs	r0, #1
100565d0:	f00d fe3a 	bl	10064248 <GAT_att_db_find_from_handle>
100565d4:	4606      	mov	r6, r0
100565d6:	a84e      	add	r0, sp, #312	@ 0x138
100565d8:	300c      	adds	r0, #12
100565da:	9002      	str	r0, [sp, #8]
100565dc:	4d48      	ldr	r5, [pc, #288]	@ (10056700 <__arm_cp.5_2>)
100565de:	2e00      	cmp	r6, #0
100565e0:	d041      	beq.n	10056666 <GAT_srv_db_hash_tsk+0xca>
100565e2:	7830      	ldrb	r0, [r6, #0]
100565e4:	2803      	cmp	r0, #3
100565e6:	d039      	beq.n	1005665c <GAT_srv_db_hash_tsk+0xc0>
100565e8:	af4e      	add	r7, sp, #312	@ 0x138
100565ea:	4630      	mov	r0, r6
100565ec:	4639      	mov	r1, r7
100565ee:	f000 f907 	bl	10056800 <GAT_srv_get_attr_type>
100565f2:	7c38      	ldrb	r0, [r7, #16]
100565f4:	2810      	cmp	r0, #16
100565f6:	d131      	bne.n	1005665c <GAT_srv_db_hash_tsk+0xc0>
100565f8:	8870      	ldrh	r0, [r6, #2]
100565fa:	a904      	add	r1, sp, #16
100565fc:	8008      	strh	r0, [r1, #0]
100565fe:	a84e      	add	r0, sp, #312	@ 0x138
10056600:	8980      	ldrh	r0, [r0, #12]
10056602:	493d      	ldr	r1, [pc, #244]	@ (100566f8 <__arm_cp.5_0>)
10056604:	1841      	adds	r1, r0, r1
10056606:	2905      	cmp	r1, #5
10056608:	d31c      	bcc.n	10056644 <GAT_srv_db_hash_tsk+0xa8>
1005660a:	493c      	ldr	r1, [pc, #240]	@ (100566fc <__arm_cp.5_1>)
1005660c:	1841      	adds	r1, r0, r1
1005660e:	2904      	cmp	r1, #4
10056610:	d303      	bcc.n	1005661a <GAT_srv_db_hash_tsk+0x7e>
10056612:	2129      	movs	r1, #41	@ 0x29
10056614:	0209      	lsls	r1, r1, #8
10056616:	4288      	cmp	r0, r1
10056618:	d120      	bne.n	1005665c <GAT_srv_db_hash_tsk+0xc0>
1005661a:	af0d      	add	r7, sp, #52	@ 0x34
1005661c:	2402      	movs	r4, #2
1005661e:	aa04      	add	r2, sp, #16
10056620:	4638      	mov	r0, r7
10056622:	4621      	mov	r1, r4
10056624:	47a8      	blx	r5
10056626:	4638      	mov	r0, r7
10056628:	4621      	mov	r1, r4
1005662a:	9a02      	ldr	r2, [sp, #8]
1005662c:	47a8      	blx	r5
1005662e:	2000      	movs	r0, #0
10056630:	aa05      	add	r2, sp, #20
10056632:	4631      	mov	r1, r6
10056634:	f000 f9a6 	bl	10056984 <GAT_srv_get_attr_value>
10056638:	9805      	ldr	r0, [sp, #20]
1005663a:	6842      	ldr	r2, [r0, #4]
1005663c:	8801      	ldrh	r1, [r0, #0]
1005663e:	4638      	mov	r0, r7
10056640:	47a8      	blx	r5
10056642:	e00b      	b.n	1005665c <GAT_srv_db_hash_tsk+0xc0>
10056644:	ac0d      	add	r4, sp, #52	@ 0x34
10056646:	2702      	movs	r7, #2
10056648:	aa04      	add	r2, sp, #16
1005664a:	4620      	mov	r0, r4
1005664c:	4639      	mov	r1, r7
1005664e:	f000 fcdb 	bl	10057008 <GAT_srv_aes_cmac_append>
10056652:	4620      	mov	r0, r4
10056654:	4639      	mov	r1, r7
10056656:	9a02      	ldr	r2, [sp, #8]
10056658:	f000 fcd6 	bl	10057008 <GAT_srv_aes_cmac_append>
1005665c:	4630      	mov	r0, r6
1005665e:	f00d fe55 	bl	1006430c <GAT_att_db_get_next>
10056662:	4606      	mov	r6, r0
10056664:	e7bb      	b.n	100565de <GAT_srv_db_hash_tsk+0x42>
10056666:	9801      	ldr	r0, [sp, #4]
10056668:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
1005666a:	2a00      	cmp	r2, #0
1005666c:	d006      	beq.n	1005667c <GAT_srv_db_hash_tsk+0xe0>
1005666e:	a80d      	add	r0, sp, #52	@ 0x34
10056670:	2120      	movs	r1, #32
10056672:	7101      	strb	r1, [r0, #4]
10056674:	4601      	mov	r1, r0
10056676:	31e0      	adds	r1, #224	@ 0xe0
10056678:	f7ef fc89 	bl	10045f8e <BLEPLAT_AesCMACEncryptAppend>
1005667c:	a80d      	add	r0, sp, #52	@ 0x34
1005667e:	ac4e      	add	r4, sp, #312	@ 0x138
10056680:	aa04      	add	r2, sp, #16
10056682:	4621      	mov	r1, r4
10056684:	f7ef fc94 	bl	10045fb0 <BLEPLAT_AesCMACEncryptFinish>
10056688:	ad05      	add	r5, sp, #20
1005668a:	2610      	movs	r6, #16
1005668c:	2301      	movs	r3, #1
1005668e:	4628      	mov	r0, r5
10056690:	4621      	mov	r1, r4
10056692:	4632      	mov	r2, r6
10056694:	f00b fe68 	bl	10062368 <copy_swap_buffer>
10056698:	4f1a      	ldr	r7, [pc, #104]	@ (10056704 <__arm_cp.5_3>)
1005669a:	6839      	ldr	r1, [r7, #0]
1005669c:	3183      	adds	r1, #131	@ 0x83
1005669e:	4628      	mov	r0, r5
100566a0:	4632      	mov	r2, r6
100566a2:	f7ef fc09 	bl	10045eb8 <BLEPLAT_MemCmp>
100566a6:	2800      	cmp	r0, #0
100566a8:	d019      	beq.n	100566de <GAT_srv_db_hash_tsk+0x142>
100566aa:	6838      	ldr	r0, [r7, #0]
100566ac:	3083      	adds	r0, #131	@ 0x83
100566ae:	a905      	add	r1, sp, #20
100566b0:	2210      	movs	r2, #16
100566b2:	f7ef fbe1 	bl	10045e78 <BLEPLAT_MemCpy>
100566b6:	ad03      	add	r5, sp, #12
100566b8:	2082      	movs	r0, #130	@ 0x82
100566ba:	8028      	strh	r0, [r5, #0]
100566bc:	9500      	str	r5, [sp, #0]
100566be:	2400      	movs	r4, #0
100566c0:	4b11      	ldr	r3, [pc, #68]	@ (10056708 <__arm_cp.5_4>)
100566c2:	4620      	mov	r0, r4
100566c4:	4621      	mov	r1, r4
100566c6:	4622      	mov	r2, r4
100566c8:	f7fe fae6 	bl	10054c98 <GAT_att_cmn_for_each_ch_descr>
100566cc:	2040      	movs	r0, #64	@ 0x40
100566ce:	8028      	strh	r0, [r5, #0]
100566d0:	9500      	str	r5, [sp, #0]
100566d2:	4b0e      	ldr	r3, [pc, #56]	@ (1005670c <__arm_cp.5_5>)
100566d4:	4620      	mov	r0, r4
100566d6:	4621      	mov	r1, r4
100566d8:	4622      	mov	r2, r4
100566da:	f7fe fadd 	bl	10054c98 <GAT_att_cmn_for_each_ch_descr>
100566de:	6838      	ldr	r0, [r7, #0]
100566e0:	215c      	movs	r1, #92	@ 0x5c
100566e2:	5c42      	ldrb	r2, [r0, r1]
100566e4:	23fd      	movs	r3, #253	@ 0xfd
100566e6:	4013      	ands	r3, r2
100566e8:	5443      	strb	r3, [r0, r1]
100566ea:	200b      	movs	r0, #11
100566ec:	f00b fcd6 	bl	1006209c <tsk_notify_idx>
100566f0:	f7ed fbd5 	bl	10043e9e <BLE_STACK_ProcessRequest>
100566f4:	b053      	add	sp, #332	@ 0x14c
100566f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100566f8 <__arm_cp.5_0>:
100566f8:	ffffd6ff 	.word	0xffffd6ff

100566fc <__arm_cp.5_1>:
100566fc:	ffffd800 	.word	0xffffd800

10056700 <__arm_cp.5_2>:
10056700:	10057009 	.word	0x10057009

10056704 <__arm_cp.5_3>:
10056704:	2000112c 	.word	0x2000112c

10056708 <__arm_cp.5_4>:
10056708:	10054f5d 	.word	0x10054f5d

1005670c <__arm_cp.5_5>:
1005670c:	10054f51 	.word	0x10054f51

10056710 <GAT_srv_send_srv_change_tsk>:
10056710:	b5e0      	push	{r5, r6, r7, lr}
10056712:	2100      	movs	r1, #0
10056714:	9100      	str	r1, [sp, #0]
10056716:	2002      	movs	r0, #2
10056718:	2204      	movs	r2, #4
1005671a:	4b07      	ldr	r3, [pc, #28]	@ (10056738 <__arm_cp.7_0>)
1005671c:	f7fe fabc 	bl	10054c98 <GAT_att_cmn_for_each_ch_descr>
10056720:	2800      	cmp	r0, #0
10056722:	d001      	beq.n	10056728 <GAT_srv_send_srv_change_tsk+0x18>
10056724:	2881      	cmp	r0, #129	@ 0x81
10056726:	d100      	bne.n	1005672a <GAT_srv_send_srv_change_tsk+0x1a>
10056728:	bd8c      	pop	{r2, r3, r7, pc}
1005672a:	200b      	movs	r0, #11
1005672c:	f00b fcb6 	bl	1006209c <tsk_notify_idx>
10056730:	f7ed fbb5 	bl	10043e9e <BLE_STACK_ProcessRequest>
10056734:	bd8c      	pop	{r2, r3, r7, pc}
10056736:	46c0      	nop			@ (mov r8, r8)

10056738 <__arm_cp.7_0>:
10056738:	1005673d 	.word	0x1005673d

1005673c <GAT_srv_tx_service_change>:
1005673c:	b5b0      	push	{r4, r5, r7, lr}
1005673e:	b08a      	sub	sp, #40	@ 0x28
10056740:	4604      	mov	r4, r0
10056742:	8880      	ldrh	r0, [r0, #4]
10056744:	0640      	lsls	r0, r0, #25
10056746:	d401      	bmi.n	1005674c <GAT_srv_tx_service_change+0x10>
10056748:	2500      	movs	r5, #0
1005674a:	e04b      	b.n	100567e4 <GAT_srv_tx_service_change+0xa8>
1005674c:	a809      	add	r0, sp, #36	@ 0x24
1005674e:	2180      	movs	r1, #128	@ 0x80
10056750:	8001      	strh	r1, [r0, #0]
10056752:	8921      	ldrh	r1, [r4, #8]
10056754:	9000      	str	r0, [sp, #0]
10056756:	2001      	movs	r0, #1
10056758:	2500      	movs	r5, #0
1005675a:	4b24      	ldr	r3, [pc, #144]	@ (100567ec <__arm_cp.8_0>)
1005675c:	462a      	mov	r2, r5
1005675e:	f7fe fa9b 	bl	10054c98 <GAT_att_cmn_for_each_ch_descr>
10056762:	88a1      	ldrh	r1, [r4, #4]
10056764:	0789      	lsls	r1, r1, #30
10056766:	d43d      	bmi.n	100567e4 <GAT_srv_tx_service_change+0xa8>
10056768:	2800      	cmp	r0, #0
1005676a:	d13b      	bne.n	100567e4 <GAT_srv_tx_service_change+0xa8>
1005676c:	ad04      	add	r5, sp, #16
1005676e:	4920      	ldr	r1, [pc, #128]	@ (100567f0 <__arm_cp.8_1>)
10056770:	2214      	movs	r2, #20
10056772:	4628      	mov	r0, r5
10056774:	f011 f939 	bl	100679ea <__aeabi_memcpy>
10056778:	2001      	movs	r0, #1
1005677a:	491e      	ldr	r1, [pc, #120]	@ (100567f4 <__arm_cp.8_2>)
1005677c:	462a      	mov	r2, r5
1005677e:	f000 fbaf 	bl	10056ee0 <GAT_srv_find_by_type_attr_p>
10056782:	2800      	cmp	r0, #0
10056784:	d012      	beq.n	100567ac <GAT_srv_tx_service_change+0x70>
10056786:	4605      	mov	r5, r0
10056788:	f000 fc02 	bl	10056f90 <GAT_srv_get_cccd_attr_p>
1005678c:	2800      	cmp	r0, #0
1005678e:	d00d      	beq.n	100567ac <GAT_srv_tx_service_change+0x70>
10056790:	4601      	mov	r1, r0
10056792:	8920      	ldrh	r0, [r4, #8]
10056794:	f000 fc2c 	bl	10056ff0 <GAT_srv_get_cccd_val>
10056798:	0780      	lsls	r0, r0, #30
1005679a:	d412      	bmi.n	100567c2 <GAT_srv_tx_service_change+0x86>
1005679c:	8920      	ldrh	r0, [r4, #8]
1005679e:	2100      	movs	r1, #0
100567a0:	2201      	movs	r2, #1
100567a2:	f000 fbbd 	bl	10056f20 <GAT_srv_check_client_support_feature>
100567a6:	4605      	mov	r5, r0
100567a8:	2881      	cmp	r0, #129	@ 0x81
100567aa:	d11b      	bne.n	100567e4 <GAT_srv_tx_service_change+0xa8>
100567ac:	a809      	add	r0, sp, #36	@ 0x24
100567ae:	2140      	movs	r1, #64	@ 0x40
100567b0:	8001      	strh	r1, [r0, #0]
100567b2:	8921      	ldrh	r1, [r4, #8]
100567b4:	9000      	str	r0, [sp, #0]
100567b6:	2001      	movs	r0, #1
100567b8:	2200      	movs	r2, #0
100567ba:	4b10      	ldr	r3, [pc, #64]	@ (100567fc <__arm_cp.8_4>)
100567bc:	f7fe fa6c 	bl	10054c98 <GAT_att_cmn_for_each_ch_descr>
100567c0:	e00f      	b.n	100567e2 <GAT_srv_tx_service_change+0xa6>
100567c2:	480d      	ldr	r0, [pc, #52]	@ (100567f8 <__arm_cp.8_3>)
100567c4:	9003      	str	r0, [sp, #12]
100567c6:	aa01      	add	r2, sp, #4
100567c8:	2004      	movs	r0, #4
100567ca:	8050      	strh	r0, [r2, #2]
100567cc:	8868      	ldrh	r0, [r5, #2]
100567ce:	8010      	strh	r0, [r2, #0]
100567d0:	a803      	add	r0, sp, #12
100567d2:	9002      	str	r0, [sp, #8]
100567d4:	8961      	ldrh	r1, [r4, #10]
100567d6:	8920      	ldrh	r0, [r4, #8]
100567d8:	9200      	str	r2, [sp, #0]
100567da:	2202      	movs	r2, #2
100567dc:	2301      	movs	r3, #1
100567de:	f7fe fe0d 	bl	100553fc <GAT_att_srv_hvtx>
100567e2:	4605      	mov	r5, r0
100567e4:	4628      	mov	r0, r5
100567e6:	b00a      	add	sp, #40	@ 0x28
100567e8:	bdb0      	pop	{r4, r5, r7, pc}
100567ea:	46c0      	nop			@ (mov r8, r8)

100567ec <__arm_cp.8_0>:
100567ec:	10054f45 	.word	0x10054f45

100567f0 <__arm_cp.8_1>:
100567f0:	1006d020 	.word	0x1006d020

100567f4 <__arm_cp.8_2>:
100567f4:	0000ffff 	.word	0x0000ffff

100567f8 <__arm_cp.8_3>:
100567f8:	ffff0001 	.word	0xffff0001

100567fc <__arm_cp.8_4>:
100567fc:	10054f5d 	.word	0x10054f5d

10056800 <GAT_srv_get_attr_type>:
10056800:	b580      	push	{r7, lr}
10056802:	2210      	movs	r2, #16
10056804:	740a      	strb	r2, [r1, #16]
10056806:	7802      	ldrb	r2, [r0, #0]
10056808:	2a04      	cmp	r2, #4
1005680a:	d80d      	bhi.n	10056828 <GAT_srv_get_attr_type+0x28>
1005680c:	447a      	add	r2, pc
1005680e:	7912      	ldrb	r2, [r2, #4]
10056810:	0052      	lsls	r2, r2, #1
10056812:	4497      	add	pc, r2
10056814:	0212160a 	.word	0x0212160a
10056818:	0002      	.short	0x0002
1005681a:	6840      	ldr	r0, [r0, #4]
1005681c:	1d03      	adds	r3, r0, #4
1005681e:	2214      	movs	r2, #20
10056820:	4608      	mov	r0, r1
10056822:	4619      	mov	r1, r3
10056824:	f7ef fb28 	bl	10045e78 <BLEPLAT_MemCpy>
10056828:	bd80      	pop	{r7, pc}
1005682a:	2205      	movs	r2, #5
1005682c:	02d2      	lsls	r2, r2, #11
1005682e:	6840      	ldr	r0, [r0, #4]
10056830:	7d00      	ldrb	r0, [r0, #20]
10056832:	2801      	cmp	r0, #1
10056834:	d109      	bne.n	1005684a <GAT_srv_get_attr_type+0x4a>
10056836:	818a      	strh	r2, [r1, #12]
10056838:	bd80      	pop	{r7, pc}
1005683a:	2005      	movs	r0, #5
1005683c:	02c0      	lsls	r0, r0, #11
1005683e:	1cc0      	adds	r0, r0, #3
10056840:	e004      	b.n	1005684c <GAT_srv_get_attr_type+0x4c>
10056842:	2005      	movs	r0, #5
10056844:	02c0      	lsls	r0, r0, #11
10056846:	1c80      	adds	r0, r0, #2
10056848:	e000      	b.n	1005684c <GAT_srv_get_attr_type+0x4c>
1005684a:	1c50      	adds	r0, r2, #1
1005684c:	8188      	strh	r0, [r1, #12]
1005684e:	bd80      	pop	{r7, pc}

10056850 <GAT_srv_get_att_group_end_handle>:
10056850:	b580      	push	{r7, lr}
10056852:	7801      	ldrb	r1, [r0, #0]
10056854:	2202      	movs	r2, #2
10056856:	430a      	orrs	r2, r1
10056858:	2a02      	cmp	r2, #2
1005685a:	d102      	bne.n	10056862 <GAT_srv_get_att_group_end_handle+0x12>
1005685c:	f00d fd6a 	bl	10064334 <GAT_att_db_get_last_group_handle>
10056860:	bd80      	pop	{r7, pc}
10056862:	8840      	ldrh	r0, [r0, #2]
10056864:	bd80      	pop	{r7, pc}

10056866 <GAT_srv_attr_value_read>:
10056866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056868:	461c      	mov	r4, r3
1005686a:	9200      	str	r2, [sp, #0]
1005686c:	460e      	mov	r6, r1
1005686e:	4607      	mov	r7, r0
10056870:	2201      	movs	r2, #1
10056872:	4608      	mov	r0, r1
10056874:	4639      	mov	r1, r7
10056876:	f000 f80f 	bl	10056898 <GAT_srv_check_perms>
1005687a:	7020      	strb	r0, [r4, #0]
1005687c:	2586      	movs	r5, #134	@ 0x86
1005687e:	2800      	cmp	r0, #0
10056880:	d108      	bne.n	10056894 <GAT_srv_attr_value_read+0x2e>
10056882:	4638      	mov	r0, r7
10056884:	4631      	mov	r1, r6
10056886:	9a00      	ldr	r2, [sp, #0]
10056888:	f000 f87c 	bl	10056984 <GAT_srv_get_attr_value>
1005688c:	2886      	cmp	r0, #134	@ 0x86
1005688e:	d102      	bne.n	10056896 <GAT_srv_attr_value_read+0x30>
10056890:	200e      	movs	r0, #14
10056892:	7020      	strb	r0, [r4, #0]
10056894:	4628      	mov	r0, r5
10056896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056898 <GAT_srv_check_perms>:
10056898:	b5f0      	push	{r4, r5, r6, r7, lr}
1005689a:	b085      	sub	sp, #20
1005689c:	4615      	mov	r5, r2
1005689e:	9101      	str	r1, [sp, #4]
100568a0:	4601      	mov	r1, r0
100568a2:	7804      	ldrb	r4, [r0, #0]
100568a4:	2700      	movs	r7, #0
100568a6:	2302      	movs	r3, #2
100568a8:	200e      	movs	r0, #14
100568aa:	2c03      	cmp	r4, #3
100568ac:	461a      	mov	r2, r3
100568ae:	463e      	mov	r6, r7
100568b0:	d312      	bcc.n	100568d8 <GAT_srv_check_perms+0x40>
100568b2:	d00b      	beq.n	100568cc <GAT_srv_check_perms+0x34>
100568b4:	2c04      	cmp	r4, #4
100568b6:	d158      	bne.n	1005696a <GAT_srv_check_perms+0xd2>
100568b8:	6848      	ldr	r0, [r1, #4]
100568ba:	7801      	ldrb	r1, [r0, #0]
100568bc:	078c      	lsls	r4, r1, #30
100568be:	07c9      	lsls	r1, r1, #31
100568c0:	0f8a      	lsrs	r2, r1, #30
100568c2:	2c00      	cmp	r4, #0
100568c4:	d500      	bpl.n	100568c8 <GAT_srv_check_perms+0x30>
100568c6:	324c      	adds	r2, #76	@ 0x4c
100568c8:	1c41      	adds	r1, r0, #1
100568ca:	e002      	b.n	100568d2 <GAT_srv_check_perms+0x3a>
100568cc:	6848      	ldr	r0, [r1, #4]
100568ce:	1c41      	adds	r1, r0, #1
100568d0:	7802      	ldrb	r2, [r0, #0]
100568d2:	1c80      	adds	r0, r0, #2
100568d4:	780e      	ldrb	r6, [r1, #0]
100568d6:	7807      	ldrb	r7, [r0, #0]
100568d8:	2d01      	cmp	r5, #1
100568da:	d103      	bne.n	100568e4 <GAT_srv_check_perms+0x4c>
100568dc:	4610      	mov	r0, r2
100568de:	4018      	ands	r0, r3
100568e0:	4618      	mov	r0, r3
100568e2:	d042      	beq.n	1005696a <GAT_srv_check_perms+0xd2>
100568e4:	2003      	movs	r0, #3
100568e6:	2d03      	cmp	r5, #3
100568e8:	d102      	bne.n	100568f0 <GAT_srv_check_perms+0x58>
100568ea:	2108      	movs	r1, #8
100568ec:	4011      	ands	r1, r2
100568ee:	d03c      	beq.n	1005696a <GAT_srv_check_perms+0xd2>
100568f0:	2d04      	cmp	r5, #4
100568f2:	d102      	bne.n	100568fa <GAT_srv_check_perms+0x62>
100568f4:	2104      	movs	r1, #4
100568f6:	4011      	ands	r1, r2
100568f8:	d037      	beq.n	1005696a <GAT_srv_check_perms+0xd2>
100568fa:	2d05      	cmp	r5, #5
100568fc:	d102      	bne.n	10056904 <GAT_srv_check_perms+0x6c>
100568fe:	2140      	movs	r1, #64	@ 0x40
10056900:	400a      	ands	r2, r1
10056902:	d032      	beq.n	1005696a <GAT_srv_check_perms+0xd2>
10056904:	a904      	add	r1, sp, #16
10056906:	aa03      	add	r2, sp, #12
10056908:	ab02      	add	r3, sp, #8
1005690a:	9c01      	ldr	r4, [sp, #4]
1005690c:	4620      	mov	r0, r4
1005690e:	f00b f9ca 	bl	10061ca6 <smp_sap_get_security_level>
10056912:	2802      	cmp	r0, #2
10056914:	d102      	bne.n	1005691c <GAT_srv_check_perms+0x84>
10056916:	2f00      	cmp	r7, #0
10056918:	d10f      	bne.n	1005693a <GAT_srv_check_perms+0xa2>
1005691a:	e025      	b.n	10056968 <GAT_srv_check_perms+0xd0>
1005691c:	2d01      	cmp	r5, #1
1005691e:	d000      	beq.n	10056922 <GAT_srv_check_perms+0x8a>
10056920:	08ff      	lsrs	r7, r7, #3
10056922:	2d05      	cmp	r5, #5
10056924:	d10b      	bne.n	1005693e <GAT_srv_check_perms+0xa6>
10056926:	a804      	add	r0, sp, #16
10056928:	7800      	ldrb	r0, [r0, #0]
1005692a:	2802      	cmp	r0, #2
1005692c:	d105      	bne.n	1005693a <GAT_srv_check_perms+0xa2>
1005692e:	a802      	add	r0, sp, #8
10056930:	7800      	ldrb	r0, [r0, #0]
10056932:	2802      	cmp	r0, #2
10056934:	d114      	bne.n	10056960 <GAT_srv_check_perms+0xc8>
10056936:	2000      	movs	r0, #0
10056938:	e013      	b.n	10056962 <GAT_srv_check_perms+0xca>
1005693a:	200e      	movs	r0, #14
1005693c:	e015      	b.n	1005696a <GAT_srv_check_perms+0xd2>
1005693e:	2000      	movs	r0, #0
10056940:	2f00      	cmp	r7, #0
10056942:	d012      	beq.n	1005696a <GAT_srv_check_perms+0xd2>
10056944:	a903      	add	r1, sp, #12
10056946:	7809      	ldrb	r1, [r1, #0]
10056948:	07fa      	lsls	r2, r7, #31
1005694a:	d003      	beq.n	10056954 <GAT_srv_check_perms+0xbc>
1005694c:	2903      	cmp	r1, #3
1005694e:	d201      	bcs.n	10056954 <GAT_srv_check_perms+0xbc>
10056950:	2005      	movs	r0, #5
10056952:	e00a      	b.n	1005696a <GAT_srv_check_perms+0xd2>
10056954:	077a      	lsls	r2, r7, #29
10056956:	d508      	bpl.n	1005696a <GAT_srv_check_perms+0xd2>
10056958:	2902      	cmp	r1, #2
1005695a:	d208      	bcs.n	1005696e <GAT_srv_check_perms+0xd6>
1005695c:	200f      	movs	r0, #15
1005695e:	e004      	b.n	1005696a <GAT_srv_check_perms+0xd2>
10056960:	2005      	movs	r0, #5
10056962:	2101      	movs	r1, #1
10056964:	400f      	ands	r7, r1
10056966:	d100      	bne.n	1005696a <GAT_srv_check_perms+0xd2>
10056968:	4638      	mov	r0, r7
1005696a:	b005      	add	sp, #20
1005696c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005696e:	4620      	mov	r0, r4
10056970:	4631      	mov	r1, r6
10056972:	f00b fa0e 	bl	10061d92 <smp_sap_check_encryption_key_size>
10056976:	28b6      	cmp	r0, #182	@ 0xb6
10056978:	d001      	beq.n	1005697e <GAT_srv_check_perms+0xe6>
1005697a:	2000      	movs	r0, #0
1005697c:	e7f5      	b.n	1005696a <GAT_srv_check_perms+0xd2>
1005697e:	200c      	movs	r0, #12
10056980:	e7f3      	b.n	1005696a <GAT_srv_check_perms+0xd2>
	...

10056984 <GAT_srv_get_attr_value>:
10056984:	b5f0      	push	{r4, r5, r6, r7, lr}
10056986:	b085      	sub	sp, #20
10056988:	460d      	mov	r5, r1
1005698a:	7809      	ldrb	r1, [r1, #0]
1005698c:	2904      	cmp	r1, #4
1005698e:	d811      	bhi.n	100569b4 <GAT_srv_get_attr_value+0x30>
10056990:	4614      	mov	r4, r2
10056992:	46c0      	nop			@ (mov r8, r8)
10056994:	4479      	add	r1, pc
10056996:	7909      	ldrb	r1, [r1, #4]
10056998:	0049      	lsls	r1, r1, #1
1005699a:	448f      	add	pc, r1
1005699c:	694a0d02 	.word	0x694a0d02
100569a0:	007e      	.short	0x007e
100569a2:	4e73      	ldr	r6, [pc, #460]	@ (10056b70 <__arm_cp.13_0>)
100569a4:	6830      	ldr	r0, [r6, #0]
100569a6:	4601      	mov	r1, r0
100569a8:	3170      	adds	r1, #112	@ 0x70
100569aa:	66c1      	str	r1, [r0, #108]	@ 0x6c
100569ac:	6868      	ldr	r0, [r5, #4]
100569ae:	f00b fd4d 	bl	1006244c <UUID_write_to_flat>
100569b2:	e057      	b.n	10056a64 <GAT_srv_get_attr_value+0xe0>
100569b4:	2686      	movs	r6, #134	@ 0x86
100569b6:	e0d3      	b.n	10056b60 <GAT_srv_get_attr_value+0x1dc>
100569b8:	4f6d      	ldr	r7, [pc, #436]	@ (10056b70 <__arm_cp.13_0>)
100569ba:	6838      	ldr	r0, [r7, #0]
100569bc:	4601      	mov	r1, r0
100569be:	3170      	adds	r1, #112	@ 0x70
100569c0:	66c1      	str	r1, [r0, #108]	@ 0x6c
100569c2:	686b      	ldr	r3, [r5, #4]
100569c4:	2001      	movs	r0, #1
100569c6:	496e      	ldr	r1, [pc, #440]	@ (10056b80 <__arm_cp.13_4>)
100569c8:	2600      	movs	r6, #0
100569ca:	4632      	mov	r2, r6
100569cc:	f000 fad6 	bl	10056f7c <GAT_srv_get_attribute_handle>
100569d0:	a901      	add	r1, sp, #4
100569d2:	8008      	strh	r0, [r1, #0]
100569d4:	2800      	cmp	r0, #0
100569d6:	d100      	bne.n	100569da <GAT_srv_get_attr_value+0x56>
100569d8:	e0ad      	b.n	10056b36 <GAT_srv_get_attr_value+0x1b2>
100569da:	f00d fc0d 	bl	100641f8 <GAT_att_db_find_by_handle>
100569de:	f7ff ff37 	bl	10056850 <GAT_srv_get_att_group_end_handle>
100569e2:	a902      	add	r1, sp, #8
100569e4:	9100      	str	r1, [sp, #0]
100569e6:	8008      	strh	r0, [r1, #0]
100569e8:	6838      	ldr	r0, [r7, #0]
100569ea:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
100569ec:	a901      	add	r1, sp, #4
100569ee:	2702      	movs	r7, #2
100569f0:	463a      	mov	r2, r7
100569f2:	f7ef fa41 	bl	10045e78 <BLEPLAT_MemCpy>
100569f6:	485e      	ldr	r0, [pc, #376]	@ (10056b70 <__arm_cp.13_0>)
100569f8:	6800      	ldr	r0, [r0, #0]
100569fa:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
100569fc:	1c80      	adds	r0, r0, #2
100569fe:	9900      	ldr	r1, [sp, #0]
10056a00:	463a      	mov	r2, r7
10056a02:	f7ef fa39 	bl	10045e78 <BLEPLAT_MemCpy>
10056a06:	485a      	ldr	r0, [pc, #360]	@ (10056b70 <__arm_cp.13_0>)
10056a08:	6800      	ldr	r0, [r0, #0]
10056a0a:	2768      	movs	r7, #104	@ 0x68
10056a0c:	2104      	movs	r1, #4
10056a0e:	53c1      	strh	r1, [r0, r7]
10056a10:	6869      	ldr	r1, [r5, #4]
10056a12:	7c0a      	ldrb	r2, [r1, #16]
10056a14:	2a10      	cmp	r2, #16
10056a16:	d000      	beq.n	10056a1a <GAT_srv_get_attr_value+0x96>
10056a18:	e091      	b.n	10056b3e <GAT_srv_get_attr_value+0x1ba>
10056a1a:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10056a1c:	310c      	adds	r1, #12
10056a1e:	1d00      	adds	r0, r0, #4
10056a20:	2202      	movs	r2, #2
10056a22:	f7ef fa29 	bl	10045e78 <BLEPLAT_MemCpy>
10056a26:	4852      	ldr	r0, [pc, #328]	@ (10056b70 <__arm_cp.13_0>)
10056a28:	6800      	ldr	r0, [r0, #0]
10056a2a:	5bc1      	ldrh	r1, [r0, r7]
10056a2c:	1c89      	adds	r1, r1, #2
10056a2e:	53c1      	strh	r1, [r0, r7]
10056a30:	e085      	b.n	10056b3e <GAT_srv_get_attr_value+0x1ba>
10056a32:	4e4f      	ldr	r6, [pc, #316]	@ (10056b70 <__arm_cp.13_0>)
10056a34:	6830      	ldr	r0, [r6, #0]
10056a36:	4601      	mov	r1, r0
10056a38:	3170      	adds	r1, #112	@ 0x70
10056a3a:	66c1      	str	r1, [r0, #108]	@ 0x6c
10056a3c:	6869      	ldr	r1, [r5, #4]
10056a3e:	7809      	ldrb	r1, [r1, #0]
10056a40:	2270      	movs	r2, #112	@ 0x70
10056a42:	5481      	strb	r1, [r0, r2]
10056a44:	8869      	ldrh	r1, [r5, #2]
10056a46:	1c4a      	adds	r2, r1, #1
10056a48:	a903      	add	r1, sp, #12
10056a4a:	800a      	strh	r2, [r1, #0]
10056a4c:	3071      	adds	r0, #113	@ 0x71
10056a4e:	2202      	movs	r2, #2
10056a50:	f7ef fa12 	bl	10045e78 <BLEPLAT_MemCpy>
10056a54:	6830      	ldr	r0, [r6, #0]
10056a56:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
10056a58:	6868      	ldr	r0, [r5, #4]
10056a5a:	1d00      	adds	r0, r0, #4
10056a5c:	1cc9      	adds	r1, r1, #3
10056a5e:	f00b fcf5 	bl	1006244c <UUID_write_to_flat>
10056a62:	1cc0      	adds	r0, r0, #3
10056a64:	6831      	ldr	r1, [r6, #0]
10056a66:	2268      	movs	r2, #104	@ 0x68
10056a68:	5288      	strh	r0, [r1, r2]
10056a6a:	3168      	adds	r1, #104	@ 0x68
10056a6c:	6021      	str	r1, [r4, #0]
10056a6e:	e076      	b.n	10056b5e <GAT_srv_get_attr_value+0x1da>
10056a70:	6869      	ldr	r1, [r5, #4]
10056a72:	7d0a      	ldrb	r2, [r1, #20]
10056a74:	2a10      	cmp	r2, #16
10056a76:	d132      	bne.n	10056ade <GAT_srv_get_attr_value+0x15a>
10056a78:	4a3f      	ldr	r2, [pc, #252]	@ (10056b78 <__arm_cp.13_2>)
10056a7a:	1c52      	adds	r2, r2, #1
10056a7c:	8a0b      	ldrh	r3, [r1, #16]
10056a7e:	4293      	cmp	r3, r2
10056a80:	d12d      	bne.n	10056ade <GAT_srv_get_attr_value+0x15a>
10056a82:	483b      	ldr	r0, [pc, #236]	@ (10056b70 <__arm_cp.13_0>)
10056a84:	6801      	ldr	r1, [r0, #0]
10056a86:	3168      	adds	r1, #104	@ 0x68
10056a88:	6021      	str	r1, [r4, #0]
10056a8a:	6800      	ldr	r0, [r0, #0]
10056a8c:	2168      	movs	r1, #104	@ 0x68
10056a8e:	2210      	movs	r2, #16
10056a90:	5242      	strh	r2, [r0, r1]
10056a92:	4601      	mov	r1, r0
10056a94:	3183      	adds	r1, #131	@ 0x83
10056a96:	66c1      	str	r1, [r0, #108]	@ 0x6c
10056a98:	e061      	b.n	10056b5e <GAT_srv_get_attr_value+0x1da>
10056a9a:	6869      	ldr	r1, [r5, #4]
10056a9c:	6989      	ldr	r1, [r1, #24]
10056a9e:	2900      	cmp	r1, #0
10056aa0:	d045      	beq.n	10056b2e <GAT_srv_get_attr_value+0x1aa>
10056aa2:	4e33      	ldr	r6, [pc, #204]	@ (10056b70 <__arm_cp.13_0>)
10056aa4:	6831      	ldr	r1, [r6, #0]
10056aa6:	3168      	adds	r1, #104	@ 0x68
10056aa8:	6021      	str	r1, [r4, #0]
10056aaa:	6869      	ldr	r1, [r5, #4]
10056aac:	7d0a      	ldrb	r2, [r1, #20]
10056aae:	2a10      	cmp	r2, #16
10056ab0:	d13f      	bne.n	10056b32 <GAT_srv_get_attr_value+0x1ae>
10056ab2:	8a0a      	ldrh	r2, [r1, #16]
10056ab4:	4b2f      	ldr	r3, [pc, #188]	@ (10056b74 <__arm_cp.13_1>)
10056ab6:	429a      	cmp	r2, r3
10056ab8:	d13b      	bne.n	10056b32 <GAT_srv_get_attr_value+0x1ae>
10056aba:	6831      	ldr	r1, [r6, #0]
10056abc:	2268      	movs	r2, #104	@ 0x68
10056abe:	2402      	movs	r4, #2
10056ac0:	528c      	strh	r4, [r1, r2]
10056ac2:	460a      	mov	r2, r1
10056ac4:	3270      	adds	r2, #112	@ 0x70
10056ac6:	66ca      	str	r2, [r1, #108]	@ 0x6c
10056ac8:	4629      	mov	r1, r5
10056aca:	f000 fa91 	bl	10056ff0 <GAT_srv_get_cccd_val>
10056ace:	a904      	add	r1, sp, #16
10056ad0:	8008      	strh	r0, [r1, #0]
10056ad2:	6830      	ldr	r0, [r6, #0]
10056ad4:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10056ad6:	4622      	mov	r2, r4
10056ad8:	f7ef f9ce 	bl	10045e78 <BLEPLAT_MemCpy>
10056adc:	e03f      	b.n	10056b5e <GAT_srv_get_attr_value+0x1da>
10056ade:	6a09      	ldr	r1, [r1, #32]
10056ae0:	2900      	cmp	r1, #0
10056ae2:	d024      	beq.n	10056b2e <GAT_srv_get_attr_value+0x1aa>
10056ae4:	4e22      	ldr	r6, [pc, #136]	@ (10056b70 <__arm_cp.13_0>)
10056ae6:	6831      	ldr	r1, [r6, #0]
10056ae8:	3168      	adds	r1, #104	@ 0x68
10056aea:	6021      	str	r1, [r4, #0]
10056aec:	6869      	ldr	r1, [r5, #4]
10056aee:	7d0a      	ldrb	r2, [r1, #20]
10056af0:	2a10      	cmp	r2, #16
10056af2:	d127      	bne.n	10056b44 <GAT_srv_get_attr_value+0x1c0>
10056af4:	8a0a      	ldrh	r2, [r1, #16]
10056af6:	4b20      	ldr	r3, [pc, #128]	@ (10056b78 <__arm_cp.13_2>)
10056af8:	429a      	cmp	r2, r3
10056afa:	d123      	bne.n	10056b44 <GAT_srv_get_attr_value+0x1c0>
10056afc:	6831      	ldr	r1, [r6, #0]
10056afe:	2268      	movs	r2, #104	@ 0x68
10056b00:	2301      	movs	r3, #1
10056b02:	528b      	strh	r3, [r1, r2]
10056b04:	460a      	mov	r2, r1
10056b06:	3270      	adds	r2, #112	@ 0x70
10056b08:	66ca      	str	r2, [r1, #108]	@ 0x6c
10056b0a:	f7fe fa2d 	bl	10054f68 <GAT_att_cmn_get_conn_index>
10056b0e:	28ff      	cmp	r0, #255	@ 0xff
10056b10:	d029      	beq.n	10056b66 <GAT_srv_get_attr_value+0x1e2>
10056b12:	6869      	ldr	r1, [r5, #4]
10056b14:	6a09      	ldr	r1, [r1, #32]
10056b16:	688b      	ldr	r3, [r1, #8]
10056b18:	4918      	ldr	r1, [pc, #96]	@ (10056b7c <__arm_cp.13_3>)
10056b1a:	7ac9      	ldrb	r1, [r1, #11]
10056b1c:	0849      	lsrs	r1, r1, #1
10056b1e:	1c4a      	adds	r2, r1, #1
10056b20:	2104      	movs	r1, #4
10056b22:	f000 f8d9 	bl	10056cd8 <GAT_srv_get_zip_val>
10056b26:	6831      	ldr	r1, [r6, #0]
10056b28:	2270      	movs	r2, #112	@ 0x70
10056b2a:	5488      	strb	r0, [r1, r2]
10056b2c:	e017      	b.n	10056b5e <GAT_srv_get_attr_value+0x1da>
10056b2e:	2684      	movs	r6, #132	@ 0x84
10056b30:	e016      	b.n	10056b60 <GAT_srv_get_attr_value+0x1dc>
10056b32:	6988      	ldr	r0, [r1, #24]
10056b34:	e007      	b.n	10056b46 <GAT_srv_get_attr_value+0x1c2>
10056b36:	6838      	ldr	r0, [r7, #0]
10056b38:	2168      	movs	r1, #104	@ 0x68
10056b3a:	2200      	movs	r2, #0
10056b3c:	5242      	strh	r2, [r0, r1]
10056b3e:	3068      	adds	r0, #104	@ 0x68
10056b40:	6020      	str	r0, [r4, #0]
10056b42:	e00d      	b.n	10056b60 <GAT_srv_get_attr_value+0x1dc>
10056b44:	6a08      	ldr	r0, [r1, #32]
10056b46:	7801      	ldrb	r1, [r0, #0]
10056b48:	0789      	lsls	r1, r1, #30
10056b4a:	d501      	bpl.n	10056b50 <GAT_srv_get_attr_value+0x1cc>
10056b4c:	2102      	movs	r1, #2
10056b4e:	e000      	b.n	10056b52 <GAT_srv_get_attr_value+0x1ce>
10056b50:	2104      	movs	r1, #4
10056b52:	5a41      	ldrh	r1, [r0, r1]
10056b54:	6880      	ldr	r0, [r0, #8]
10056b56:	6832      	ldr	r2, [r6, #0]
10056b58:	2368      	movs	r3, #104	@ 0x68
10056b5a:	52d1      	strh	r1, [r2, r3]
10056b5c:	66d0      	str	r0, [r2, #108]	@ 0x6c
10056b5e:	2600      	movs	r6, #0
10056b60:	4630      	mov	r0, r6
10056b62:	b005      	add	sp, #20
10056b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056b66:	6830      	ldr	r0, [r6, #0]
10056b68:	2170      	movs	r1, #112	@ 0x70
10056b6a:	2600      	movs	r6, #0
10056b6c:	5446      	strb	r6, [r0, r1]
10056b6e:	e7f7      	b.n	10056b60 <GAT_srv_get_attr_value+0x1dc>

10056b70 <__arm_cp.13_0>:
10056b70:	2000112c 	.word	0x2000112c

10056b74 <__arm_cp.13_1>:
10056b74:	00002902 	.word	0x00002902

10056b78 <__arm_cp.13_2>:
10056b78:	00002b29 	.word	0x00002b29

10056b7c <__arm_cp.13_3>:
10056b7c:	20001188 	.word	0x20001188

10056b80 <__arm_cp.13_4>:
10056b80:	0000ffff 	.word	0x0000ffff

10056b84 <GAT_srv_attr_value_write>:
10056b84:	b5f0      	push	{r4, r5, r6, r7, lr}
10056b86:	b089      	sub	sp, #36	@ 0x24
10056b88:	4617      	mov	r7, r2
10056b8a:	460d      	mov	r5, r1
10056b8c:	4606      	mov	r6, r0
10056b8e:	7800      	ldrb	r0, [r0, #0]
10056b90:	8874      	ldrh	r4, [r6, #2]
10056b92:	2804      	cmp	r0, #4
10056b94:	d045      	beq.n	10056c22 <GAT_srv_attr_value_write+0x9e>
10056b96:	2803      	cmp	r0, #3
10056b98:	d177      	bne.n	10056c8a <GAT_srv_attr_value_write+0x106>
10056b9a:	6871      	ldr	r1, [r6, #4]
10056b9c:	6a08      	ldr	r0, [r1, #32]
10056b9e:	2800      	cmp	r0, #0
10056ba0:	d07d      	beq.n	10056c9e <GAT_srv_attr_value_write+0x11a>
10056ba2:	7d0a      	ldrb	r2, [r1, #20]
10056ba4:	2a10      	cmp	r2, #16
10056ba6:	d174      	bne.n	10056c92 <GAT_srv_attr_value_write+0x10e>
10056ba8:	8a09      	ldrh	r1, [r1, #16]
10056baa:	4a49      	ldr	r2, [pc, #292]	@ (10056cd0 <__arm_cp.14_1>)
10056bac:	4291      	cmp	r1, r2
10056bae:	d170      	bne.n	10056c92 <GAT_srv_attr_value_write+0x10e>
10056bb0:	9700      	str	r7, [sp, #0]
10056bb2:	2101      	movs	r1, #1
10056bb4:	aa07      	add	r2, sp, #28
10056bb6:	ab08      	add	r3, sp, #32
10056bb8:	4628      	mov	r0, r5
10056bba:	f7fe fcfa 	bl	100555b2 <GAT_att_srv_extract_write_packet_data>
10056bbe:	2800      	cmp	r0, #0
10056bc0:	d16e      	bne.n	10056ca0 <GAT_srv_attr_value_write+0x11c>
10056bc2:	8828      	ldrh	r0, [r5, #0]
10056bc4:	f7fe f9d0 	bl	10054f68 <GAT_att_cmn_get_conn_index>
10056bc8:	aa07      	add	r2, sp, #28
10056bca:	7811      	ldrb	r1, [r2, #0]
10056bcc:	2307      	movs	r3, #7
10056bce:	400b      	ands	r3, r1
10056bd0:	9305      	str	r3, [sp, #20]
10056bd2:	7013      	strb	r3, [r2, #0]
10056bd4:	6871      	ldr	r1, [r6, #4]
10056bd6:	6a09      	ldr	r1, [r1, #32]
10056bd8:	688b      	ldr	r3, [r1, #8]
10056bda:	493e      	ldr	r1, [pc, #248]	@ (10056cd4 <__arm_cp.14_2>)
10056bdc:	7ac9      	ldrb	r1, [r1, #11]
10056bde:	0849      	lsrs	r1, r1, #1
10056be0:	1c4a      	adds	r2, r1, #1
10056be2:	2104      	movs	r1, #4
10056be4:	9004      	str	r0, [sp, #16]
10056be6:	9203      	str	r2, [sp, #12]
10056be8:	9302      	str	r3, [sp, #8]
10056bea:	f000 f875 	bl	10056cd8 <GAT_srv_get_zip_val>
10056bee:	9a05      	ldr	r2, [sp, #20]
10056bf0:	4601      	mov	r1, r0
10056bf2:	4011      	ands	r1, r2
10056bf4:	4281      	cmp	r1, r0
10056bf6:	d157      	bne.n	10056ca8 <GAT_srv_attr_value_write+0x124>
10056bf8:	9802      	ldr	r0, [sp, #8]
10056bfa:	9000      	str	r0, [sp, #0]
10056bfc:	2104      	movs	r1, #4
10056bfe:	9804      	ldr	r0, [sp, #16]
10056c00:	9b03      	ldr	r3, [sp, #12]
10056c02:	f000 f87c 	bl	10056cfe <GAT_srv_set_zip_val>
10056c06:	6870      	ldr	r0, [r6, #4]
10056c08:	6a00      	ldr	r0, [r0, #32]
10056c0a:	7800      	ldrb	r0, [r0, #0]
10056c0c:	07c0      	lsls	r0, r0, #31
10056c0e:	d03a      	beq.n	10056c86 <GAT_srv_attr_value_write+0x102>
10056c10:	882e      	ldrh	r6, [r5, #0]
10056c12:	4628      	mov	r0, r5
10056c14:	f001 f8ef 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10056c18:	4602      	mov	r2, r0
10056c1a:	a808      	add	r0, sp, #32
10056c1c:	8800      	ldrh	r0, [r0, #0]
10056c1e:	a907      	add	r1, sp, #28
10056c20:	e04c      	b.n	10056cbc <GAT_srv_attr_value_write+0x138>
10056c22:	6871      	ldr	r1, [r6, #4]
10056c24:	6988      	ldr	r0, [r1, #24]
10056c26:	2800      	cmp	r0, #0
10056c28:	d039      	beq.n	10056c9e <GAT_srv_attr_value_write+0x11a>
10056c2a:	7d0a      	ldrb	r2, [r1, #20]
10056c2c:	2a10      	cmp	r2, #16
10056c2e:	d130      	bne.n	10056c92 <GAT_srv_attr_value_write+0x10e>
10056c30:	8a09      	ldrh	r1, [r1, #16]
10056c32:	4a26      	ldr	r2, [pc, #152]	@ (10056ccc <__arm_cp.14_0>)
10056c34:	4291      	cmp	r1, r2
10056c36:	d12c      	bne.n	10056c92 <GAT_srv_attr_value_write+0x10e>
10056c38:	9700      	str	r7, [sp, #0]
10056c3a:	2102      	movs	r1, #2
10056c3c:	aa06      	add	r2, sp, #24
10056c3e:	ab08      	add	r3, sp, #32
10056c40:	4628      	mov	r0, r5
10056c42:	f7fe fcb6 	bl	100555b2 <GAT_att_srv_extract_write_packet_data>
10056c46:	2800      	cmp	r0, #0
10056c48:	d12a      	bne.n	10056ca0 <GAT_srv_attr_value_write+0x11c>
10056c4a:	a806      	add	r0, sp, #24
10056c4c:	8800      	ldrh	r0, [r0, #0]
10056c4e:	9005      	str	r0, [sp, #20]
10056c50:	8870      	ldrh	r0, [r6, #2]
10056c52:	1e80      	subs	r0, r0, #2
10056c54:	b281      	uxth	r1, r0
10056c56:	2002      	movs	r0, #2
10056c58:	f00d fc04 	bl	10064464 <GAT_att_db_reverse_find_attr_of_type>
10056c5c:	2800      	cmp	r0, #0
10056c5e:	d021      	beq.n	10056ca4 <GAT_srv_attr_value_write+0x120>
10056c60:	9905      	ldr	r1, [sp, #20]
10056c62:	0789      	lsls	r1, r1, #30
10056c64:	0e89      	lsrs	r1, r1, #26
10056c66:	6840      	ldr	r0, [r0, #4]
10056c68:	7800      	ldrb	r0, [r0, #0]
10056c6a:	4008      	ands	r0, r1
10056c6c:	4288      	cmp	r0, r1
10056c6e:	d119      	bne.n	10056ca4 <GAT_srv_attr_value_write+0x120>
10056c70:	a806      	add	r0, sp, #24
10056c72:	8802      	ldrh	r2, [r0, #0]
10056c74:	8828      	ldrh	r0, [r5, #0]
10056c76:	4631      	mov	r1, r6
10056c78:	f000 f882 	bl	10056d80 <GAT_srv_set_cccd_val>
10056c7c:	6870      	ldr	r0, [r6, #4]
10056c7e:	6980      	ldr	r0, [r0, #24]
10056c80:	7800      	ldrb	r0, [r0, #0]
10056c82:	07c0      	lsls	r0, r0, #31
10056c84:	d112      	bne.n	10056cac <GAT_srv_attr_value_write+0x128>
10056c86:	2000      	movs	r0, #0
10056c88:	e00a      	b.n	10056ca0 <GAT_srv_attr_value_write+0x11c>
10056c8a:	2003      	movs	r0, #3
10056c8c:	7038      	strb	r0, [r7, #0]
10056c8e:	2086      	movs	r0, #134	@ 0x86
10056c90:	e006      	b.n	10056ca0 <GAT_srv_attr_value_write+0x11c>
10056c92:	4621      	mov	r1, r4
10056c94:	462a      	mov	r2, r5
10056c96:	463b      	mov	r3, r7
10056c98:	f000 f847 	bl	10056d2a <GAT_srv_attr_direct_value_write>
10056c9c:	e000      	b.n	10056ca0 <GAT_srv_attr_value_write+0x11c>
10056c9e:	2084      	movs	r0, #132	@ 0x84
10056ca0:	b009      	add	sp, #36	@ 0x24
10056ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056ca4:	20fd      	movs	r0, #253	@ 0xfd
10056ca6:	e7f1      	b.n	10056c8c <GAT_srv_attr_value_write+0x108>
10056ca8:	2013      	movs	r0, #19
10056caa:	e7ef      	b.n	10056c8c <GAT_srv_attr_value_write+0x108>
10056cac:	882e      	ldrh	r6, [r5, #0]
10056cae:	4628      	mov	r0, r5
10056cb0:	f001 f8a1 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10056cb4:	4602      	mov	r2, r0
10056cb6:	a808      	add	r0, sp, #32
10056cb8:	8800      	ldrh	r0, [r0, #0]
10056cba:	a906      	add	r1, sp, #24
10056cbc:	9000      	str	r0, [sp, #0]
10056cbe:	9101      	str	r1, [sp, #4]
10056cc0:	2002      	movs	r0, #2
10056cc2:	4631      	mov	r1, r6
10056cc4:	4623      	mov	r3, r4
10056cc6:	f00c f83d 	bl	10062d44 <aci_gatt_srv_attribute_modified_event_push_noinline>
10056cca:	e7e9      	b.n	10056ca0 <GAT_srv_attr_value_write+0x11c>

10056ccc <__arm_cp.14_0>:
10056ccc:	00002902 	.word	0x00002902

10056cd0 <__arm_cp.14_1>:
10056cd0:	00002b29 	.word	0x00002b29

10056cd4 <__arm_cp.14_2>:
10056cd4:	20001188 	.word	0x20001188

10056cd8 <GAT_srv_get_zip_val>:
10056cd8:	b510      	push	{r4, lr}
10056cda:	4348      	muls	r0, r1
10056cdc:	08c4      	lsrs	r4, r0, #3
10056cde:	b2a4      	uxth	r4, r4
10056ce0:	4294      	cmp	r4, r2
10056ce2:	d901      	bls.n	10056ce8 <GAT_srv_get_zip_val+0x10>
10056ce4:	2000      	movs	r0, #0
10056ce6:	bd10      	pop	{r4, pc}
10056ce8:	2207      	movs	r2, #7
10056cea:	4010      	ands	r0, r2
10056cec:	5d1a      	ldrb	r2, [r3, r4]
10056cee:	40c2      	lsrs	r2, r0
10056cf0:	2020      	movs	r0, #32
10056cf2:	1a41      	subs	r1, r0, r1
10056cf4:	2000      	movs	r0, #0
10056cf6:	43c0      	mvns	r0, r0
10056cf8:	40c8      	lsrs	r0, r1
10056cfa:	4010      	ands	r0, r2
10056cfc:	bd10      	pop	{r4, pc}

10056cfe <GAT_srv_set_zip_val>:
10056cfe:	b5b0      	push	{r4, r5, r7, lr}
10056d00:	4348      	muls	r0, r1
10056d02:	08c4      	lsrs	r4, r0, #3
10056d04:	b2a4      	uxth	r4, r4
10056d06:	429c      	cmp	r4, r3
10056d08:	d80e      	bhi.n	10056d28 <GAT_srv_set_zip_val+0x2a>
10056d0a:	9b04      	ldr	r3, [sp, #16]
10056d0c:	2507      	movs	r5, #7
10056d0e:	4028      	ands	r0, r5
10056d10:	2520      	movs	r5, #32
10056d12:	1a69      	subs	r1, r5, r1
10056d14:	2500      	movs	r5, #0
10056d16:	43ed      	mvns	r5, r5
10056d18:	40cd      	lsrs	r5, r1
10056d1a:	402a      	ands	r2, r5
10056d1c:	4082      	lsls	r2, r0
10056d1e:	4085      	lsls	r5, r0
10056d20:	5d18      	ldrb	r0, [r3, r4]
10056d22:	43a8      	bics	r0, r5
10056d24:	4310      	orrs	r0, r2
10056d26:	5518      	strb	r0, [r3, r4]
10056d28:	bdb0      	pop	{r4, r5, r7, pc}

10056d2a <GAT_srv_attr_direct_value_write>:
10056d2a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10056d2c:	4616      	mov	r6, r2
10056d2e:	460c      	mov	r4, r1
10056d30:	4605      	mov	r5, r0
10056d32:	6882      	ldr	r2, [r0, #8]
10056d34:	8881      	ldrh	r1, [r0, #4]
10056d36:	9300      	str	r3, [sp, #0]
10056d38:	ab02      	add	r3, sp, #8
10056d3a:	4630      	mov	r0, r6
10056d3c:	f7fe fc39 	bl	100555b2 <GAT_att_srv_extract_write_packet_data>
10056d40:	2800      	cmp	r0, #0
10056d42:	d000      	beq.n	10056d46 <GAT_srv_attr_direct_value_write+0x1c>
10056d44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10056d46:	7828      	ldrb	r0, [r5, #0]
10056d48:	0781      	lsls	r1, r0, #30
10056d4a:	d403      	bmi.n	10056d54 <GAT_srv_attr_direct_value_write+0x2a>
10056d4c:	88a9      	ldrh	r1, [r5, #4]
10056d4e:	aa02      	add	r2, sp, #8
10056d50:	8011      	strh	r1, [r2, #0]
10056d52:	e001      	b.n	10056d58 <GAT_srv_attr_direct_value_write+0x2e>
10056d54:	9902      	ldr	r1, [sp, #8]
10056d56:	8069      	strh	r1, [r5, #2]
10056d58:	07c0      	lsls	r0, r0, #31
10056d5a:	d101      	bne.n	10056d60 <GAT_srv_attr_direct_value_write+0x36>
10056d5c:	2000      	movs	r0, #0
10056d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10056d60:	8837      	ldrh	r7, [r6, #0]
10056d62:	4630      	mov	r0, r6
10056d64:	f001 f847 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10056d68:	4602      	mov	r2, r0
10056d6a:	a802      	add	r0, sp, #8
10056d6c:	8800      	ldrh	r0, [r0, #0]
10056d6e:	68a9      	ldr	r1, [r5, #8]
10056d70:	9000      	str	r0, [sp, #0]
10056d72:	9101      	str	r1, [sp, #4]
10056d74:	2002      	movs	r0, #2
10056d76:	4639      	mov	r1, r7
10056d78:	4623      	mov	r3, r4
10056d7a:	f00b ffe3 	bl	10062d44 <aci_gatt_srv_attribute_modified_event_push_noinline>
10056d7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10056d80 <GAT_srv_set_cccd_val>:
10056d80:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10056d82:	4614      	mov	r4, r2
10056d84:	460d      	mov	r5, r1
10056d86:	f7fe f8ef 	bl	10054f68 <GAT_att_cmn_get_conn_index>
10056d8a:	6869      	ldr	r1, [r5, #4]
10056d8c:	6989      	ldr	r1, [r1, #24]
10056d8e:	888b      	ldrh	r3, [r1, #4]
10056d90:	6889      	ldr	r1, [r1, #8]
10056d92:	9100      	str	r1, [sp, #0]
10056d94:	2103      	movs	r1, #3
10056d96:	400c      	ands	r4, r1
10056d98:	2102      	movs	r1, #2
10056d9a:	4622      	mov	r2, r4
10056d9c:	f7ff ffaf 	bl	10056cfe <GAT_srv_set_zip_val>
10056da0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
	...

10056da4 <GAT_srv_is_supported_grouping_type>:
10056da4:	b570      	push	{r4, r5, r6, lr}
10056da6:	b08a      	sub	sp, #40	@ 0x28
10056da8:	4604      	mov	r4, r0
10056daa:	ad05      	add	r5, sp, #20
10056dac:	a10d      	add	r1, pc, #52	@ (adr r1, 10056de4 <GAT_srv_is_supported_grouping_type+0x40>)
10056dae:	2614      	movs	r6, #20
10056db0:	4628      	mov	r0, r5
10056db2:	4632      	mov	r2, r6
10056db4:	f010 fe19 	bl	100679ea <__aeabi_memcpy>
10056db8:	4668      	mov	r0, sp
10056dba:	a10f      	add	r1, pc, #60	@ (adr r1, 10056df8 <GAT_srv_is_supported_grouping_type+0x54>)
10056dbc:	4632      	mov	r2, r6
10056dbe:	f010 fe14 	bl	100679ea <__aeabi_memcpy>
10056dc2:	4620      	mov	r0, r4
10056dc4:	4629      	mov	r1, r5
10056dc6:	f00b fb11 	bl	100623ec <UUID_cmp_128bits>
10056dca:	2800      	cmp	r0, #0
10056dcc:	d007      	beq.n	10056dde <GAT_srv_is_supported_grouping_type+0x3a>
10056dce:	4669      	mov	r1, sp
10056dd0:	4620      	mov	r0, r4
10056dd2:	f00b fb0b 	bl	100623ec <UUID_cmp_128bits>
10056dd6:	4601      	mov	r1, r0
10056dd8:	4240      	negs	r0, r0
10056dda:	4148      	adcs	r0, r1
10056ddc:	e000      	b.n	10056de0 <GAT_srv_is_supported_grouping_type+0x3c>
10056dde:	2001      	movs	r0, #1
10056de0:	b00a      	add	sp, #40	@ 0x28
10056de2:	bd70      	pop	{r4, r5, r6, pc}
10056de4:	5f9b34fb 	.word	0x5f9b34fb
10056de8:	80000080 	.word	0x80000080
10056dec:	00001000 	.word	0x00001000
10056df0:	00002800 	.word	0x00002800
10056df4:	00000010 	.word	0x00000010
10056df8:	5f9b34fb 	.word	0x5f9b34fb
10056dfc:	80000080 	.word	0x80000080
10056e00:	00001000 	.word	0x00001000
10056e04:	00002801 	.word	0x00002801
10056e08:	00000010 	.word	0x00000010

10056e0c <GAT_srv_set_change_aware>:
10056e0c:	b5e0      	push	{r5, r6, r7, lr}
10056e0e:	aa01      	add	r2, sp, #4
10056e10:	21c2      	movs	r1, #194	@ 0xc2
10056e12:	8011      	strh	r1, [r2, #0]
10056e14:	8901      	ldrh	r1, [r0, #8]
10056e16:	9200      	str	r2, [sp, #0]
10056e18:	2001      	movs	r0, #1
10056e1a:	2200      	movs	r2, #0
10056e1c:	4b01      	ldr	r3, [pc, #4]	@ (10056e24 <__arm_cp.21_0>)
10056e1e:	f7fd ff3b 	bl	10054c98 <GAT_att_cmn_for_each_ch_descr>
10056e22:	bd8c      	pop	{r2, r3, r7, pc}

10056e24 <__arm_cp.21_0>:
10056e24:	10054f5d 	.word	0x10054f5d

10056e28 <GAT_srv_check_change_aware>:
10056e28:	b5f0      	push	{r4, r5, r6, r7, lr}
10056e2a:	b087      	sub	sp, #28
10056e2c:	4605      	mov	r5, r0
10056e2e:	ac02      	add	r4, sp, #8
10056e30:	4927      	ldr	r1, [pc, #156]	@ (10056ed0 <__arm_cp.22_0>)
10056e32:	2214      	movs	r2, #20
10056e34:	4620      	mov	r0, r4
10056e36:	f010 fdd8 	bl	100679ea <__aeabi_memcpy>
10056e3a:	2001      	movs	r0, #1
10056e3c:	4e25      	ldr	r6, [pc, #148]	@ (10056ed4 <__arm_cp.22_1>)
10056e3e:	4631      	mov	r1, r6
10056e40:	4622      	mov	r2, r4
10056e42:	f000 f84d 	bl	10056ee0 <GAT_srv_find_by_type_attr_p>
10056e46:	2700      	movs	r7, #0
10056e48:	2800      	cmp	r0, #0
10056e4a:	d03c      	beq.n	10056ec6 <GAT_srv_check_change_aware+0x9e>
10056e4c:	4601      	mov	r1, r0
10056e4e:	6828      	ldr	r0, [r5, #0]
10056e50:	8882      	ldrh	r2, [r0, #4]
10056e52:	0652      	lsls	r2, r2, #25
10056e54:	d537      	bpl.n	10056ec6 <GAT_srv_check_change_aware+0x9e>
10056e56:	792a      	ldrb	r2, [r5, #4]
10056e58:	23fe      	movs	r3, #254	@ 0xfe
10056e5a:	4013      	ands	r3, r2
10056e5c:	2486      	movs	r4, #134	@ 0x86
10056e5e:	2b04      	cmp	r3, #4
10056e60:	d032      	beq.n	10056ec8 <GAT_srv_check_change_aware+0xa0>
10056e62:	8900      	ldrh	r0, [r0, #8]
10056e64:	2201      	movs	r2, #1
10056e66:	f000 f85b 	bl	10056f20 <GAT_srv_check_client_support_feature>
10056e6a:	2881      	cmp	r0, #129	@ 0x81
10056e6c:	d02b      	beq.n	10056ec6 <GAT_srv_check_change_aware+0x9e>
10056e6e:	6828      	ldr	r0, [r5, #0]
10056e70:	8881      	ldrh	r1, [r0, #4]
10056e72:	060a      	lsls	r2, r1, #24
10056e74:	d425      	bmi.n	10056ec2 <GAT_srv_check_change_aware+0x9a>
10056e76:	2780      	movs	r7, #128	@ 0x80
10056e78:	4339      	orrs	r1, r7
10056e7a:	8081      	strh	r1, [r0, #4]
10056e7c:	7928      	ldrb	r0, [r5, #4]
10056e7e:	2802      	cmp	r0, #2
10056e80:	d122      	bne.n	10056ec8 <GAT_srv_check_change_aware+0xa0>
10056e82:	8928      	ldrh	r0, [r5, #8]
10056e84:	2801      	cmp	r0, #1
10056e86:	d11f      	bne.n	10056ec8 <GAT_srv_check_change_aware+0xa0>
10056e88:	8968      	ldrh	r0, [r5, #10]
10056e8a:	42b0      	cmp	r0, r6
10056e8c:	d11c      	bne.n	10056ec8 <GAT_srv_check_change_aware+0xa0>
10056e8e:	68ea      	ldr	r2, [r5, #12]
10056e90:	7c10      	ldrb	r0, [r2, #16]
10056e92:	2810      	cmp	r0, #16
10056e94:	d118      	bne.n	10056ec8 <GAT_srv_check_change_aware+0xa0>
10056e96:	8990      	ldrh	r0, [r2, #12]
10056e98:	490f      	ldr	r1, [pc, #60]	@ (10056ed8 <__arm_cp.22_2>)
10056e9a:	4288      	cmp	r0, r1
10056e9c:	d114      	bne.n	10056ec8 <GAT_srv_check_change_aware+0xa0>
10056e9e:	2001      	movs	r0, #1
10056ea0:	4631      	mov	r1, r6
10056ea2:	f000 f81d 	bl	10056ee0 <GAT_srv_find_by_type_attr_p>
10056ea6:	2800      	cmp	r0, #0
10056ea8:	d00e      	beq.n	10056ec8 <GAT_srv_check_change_aware+0xa0>
10056eaa:	a801      	add	r0, sp, #4
10056eac:	8007      	strh	r7, [r0, #0]
10056eae:	6829      	ldr	r1, [r5, #0]
10056eb0:	8909      	ldrh	r1, [r1, #8]
10056eb2:	9000      	str	r0, [sp, #0]
10056eb4:	2001      	movs	r0, #1
10056eb6:	2400      	movs	r4, #0
10056eb8:	4b08      	ldr	r3, [pc, #32]	@ (10056edc <__arm_cp.22_3>)
10056eba:	4622      	mov	r2, r4
10056ebc:	f7fd feec 	bl	10054c98 <GAT_att_cmn_for_each_ch_descr>
10056ec0:	e002      	b.n	10056ec8 <GAT_srv_check_change_aware+0xa0>
10056ec2:	f7ff ffa3 	bl	10056e0c <GAT_srv_set_change_aware>
10056ec6:	463c      	mov	r4, r7
10056ec8:	4620      	mov	r0, r4
10056eca:	b007      	add	sp, #28
10056ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056ece:	46c0      	nop			@ (mov r8, r8)

10056ed0 <__arm_cp.22_0>:
10056ed0:	1006d034 	.word	0x1006d034

10056ed4 <__arm_cp.22_1>:
10056ed4:	0000ffff 	.word	0x0000ffff

10056ed8 <__arm_cp.22_2>:
10056ed8:	00002b2a 	.word	0x00002b2a

10056edc <__arm_cp.22_3>:
10056edc:	10054f51 	.word	0x10054f51

10056ee0 <GAT_srv_find_by_type_attr_p>:
10056ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
10056ee2:	b085      	sub	sp, #20
10056ee4:	4614      	mov	r4, r2
10056ee6:	460d      	mov	r5, r1
10056ee8:	f00d f9ae 	bl	10064248 <GAT_att_db_find_from_handle>
10056eec:	4606      	mov	r6, r0
10056eee:	2000      	movs	r0, #0
10056ef0:	2e00      	cmp	r6, #0
10056ef2:	d012      	beq.n	10056f1a <GAT_srv_find_by_type_attr_p+0x3a>
10056ef4:	8871      	ldrh	r1, [r6, #2]
10056ef6:	42a9      	cmp	r1, r5
10056ef8:	d80f      	bhi.n	10056f1a <GAT_srv_find_by_type_attr_p+0x3a>
10056efa:	466f      	mov	r7, sp
10056efc:	4630      	mov	r0, r6
10056efe:	4639      	mov	r1, r7
10056f00:	f7ff fc7e 	bl	10056800 <GAT_srv_get_attr_type>
10056f04:	4620      	mov	r0, r4
10056f06:	4639      	mov	r1, r7
10056f08:	f00b fa59 	bl	100623be <UUID_cmp>
10056f0c:	2800      	cmp	r0, #0
10056f0e:	d003      	beq.n	10056f18 <GAT_srv_find_by_type_attr_p+0x38>
10056f10:	4630      	mov	r0, r6
10056f12:	f00d f9fb 	bl	1006430c <GAT_att_db_get_next>
10056f16:	e7e9      	b.n	10056eec <GAT_srv_find_by_type_attr_p+0xc>
10056f18:	4630      	mov	r0, r6
10056f1a:	b005      	add	sp, #20
10056f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10056f20 <GAT_srv_check_client_support_feature>:
10056f20:	b570      	push	{r4, r5, r6, lr}
10056f22:	b086      	sub	sp, #24
10056f24:	4614      	mov	r4, r2
10056f26:	460e      	mov	r6, r1
10056f28:	4605      	mov	r5, r0
10056f2a:	a801      	add	r0, sp, #4
10056f2c:	4910      	ldr	r1, [pc, #64]	@ (10056f70 <__arm_cp.24_0>)
10056f2e:	2214      	movs	r2, #20
10056f30:	f010 fd5b 	bl	100679ea <__aeabi_memcpy>
10056f34:	2e00      	cmp	r6, #0
10056f36:	d107      	bne.n	10056f48 <GAT_srv_check_client_support_feature+0x28>
10056f38:	2001      	movs	r0, #1
10056f3a:	490e      	ldr	r1, [pc, #56]	@ (10056f74 <__arm_cp.24_1>)
10056f3c:	aa01      	add	r2, sp, #4
10056f3e:	f7ff ffcf 	bl	10056ee0 <GAT_srv_find_by_type_attr_p>
10056f42:	4606      	mov	r6, r0
10056f44:	2800      	cmp	r0, #0
10056f46:	d010      	beq.n	10056f6a <GAT_srv_check_client_support_feature+0x4a>
10056f48:	4628      	mov	r0, r5
10056f4a:	f7fe f80d 	bl	10054f68 <GAT_att_cmn_get_conn_index>
10056f4e:	6871      	ldr	r1, [r6, #4]
10056f50:	6a09      	ldr	r1, [r1, #32]
10056f52:	688b      	ldr	r3, [r1, #8]
10056f54:	4908      	ldr	r1, [pc, #32]	@ (10056f78 <__arm_cp.24_2>)
10056f56:	7ac9      	ldrb	r1, [r1, #11]
10056f58:	0849      	lsrs	r1, r1, #1
10056f5a:	1c4a      	adds	r2, r1, #1
10056f5c:	2104      	movs	r1, #4
10056f5e:	f7ff febb 	bl	10056cd8 <GAT_srv_get_zip_val>
10056f62:	4220      	tst	r0, r4
10056f64:	d001      	beq.n	10056f6a <GAT_srv_check_client_support_feature+0x4a>
10056f66:	2000      	movs	r0, #0
10056f68:	e000      	b.n	10056f6c <GAT_srv_check_client_support_feature+0x4c>
10056f6a:	2081      	movs	r0, #129	@ 0x81
10056f6c:	b006      	add	sp, #24
10056f6e:	bd70      	pop	{r4, r5, r6, pc}

10056f70 <__arm_cp.24_0>:
10056f70:	1006d034 	.word	0x1006d034

10056f74 <__arm_cp.24_1>:
10056f74:	0000ffff 	.word	0x0000ffff

10056f78 <__arm_cp.24_2>:
10056f78:	20001188 	.word	0x20001188

10056f7c <GAT_srv_get_attribute_handle>:
10056f7c:	b580      	push	{r7, lr}
10056f7e:	f00d f98d 	bl	1006429c <GAT_att_db_find_by_def>
10056f82:	2800      	cmp	r0, #0
10056f84:	d001      	beq.n	10056f8a <GAT_srv_get_attribute_handle+0xe>
10056f86:	8840      	ldrh	r0, [r0, #2]
10056f88:	bd80      	pop	{r7, pc}
10056f8a:	2000      	movs	r0, #0
10056f8c:	bd80      	pop	{r7, pc}
	...

10056f90 <GAT_srv_get_cccd_attr_p>:
10056f90:	b570      	push	{r4, r5, r6, lr}
10056f92:	b08a      	sub	sp, #40	@ 0x28
10056f94:	4605      	mov	r5, r0
10056f96:	a805      	add	r0, sp, #20
10056f98:	a110      	add	r1, pc, #64	@ (adr r1, 10056fdc <GAT_srv_get_cccd_attr_p+0x4c>)
10056f9a:	2214      	movs	r2, #20
10056f9c:	f010 fd25 	bl	100679ea <__aeabi_memcpy>
10056fa0:	7828      	ldrb	r0, [r5, #0]
10056fa2:	21fe      	movs	r1, #254	@ 0xfe
10056fa4:	4001      	ands	r1, r0
10056fa6:	2400      	movs	r4, #0
10056fa8:	2902      	cmp	r1, #2
10056faa:	d114      	bne.n	10056fd6 <GAT_srv_get_cccd_attr_p+0x46>
10056fac:	4628      	mov	r0, r5
10056fae:	f00d f9ad 	bl	1006430c <GAT_att_db_get_next>
10056fb2:	4605      	mov	r5, r0
10056fb4:	2800      	cmp	r0, #0
10056fb6:	d00e      	beq.n	10056fd6 <GAT_srv_get_cccd_attr_p+0x46>
10056fb8:	7828      	ldrb	r0, [r5, #0]
10056fba:	2802      	cmp	r0, #2
10056fbc:	d00b      	beq.n	10056fd6 <GAT_srv_get_cccd_attr_p+0x46>
10056fbe:	466e      	mov	r6, sp
10056fc0:	4628      	mov	r0, r5
10056fc2:	4631      	mov	r1, r6
10056fc4:	f7ff fc1c 	bl	10056800 <GAT_srv_get_attr_type>
10056fc8:	a805      	add	r0, sp, #20
10056fca:	4631      	mov	r1, r6
10056fcc:	f00b f9f7 	bl	100623be <UUID_cmp>
10056fd0:	2800      	cmp	r0, #0
10056fd2:	d1eb      	bne.n	10056fac <GAT_srv_get_cccd_attr_p+0x1c>
10056fd4:	462c      	mov	r4, r5
10056fd6:	4620      	mov	r0, r4
10056fd8:	b00a      	add	sp, #40	@ 0x28
10056fda:	bd70      	pop	{r4, r5, r6, pc}
10056fdc:	5f9b34fb 	.word	0x5f9b34fb
10056fe0:	80000080 	.word	0x80000080
10056fe4:	00001000 	.word	0x00001000
10056fe8:	00002902 	.word	0x00002902
10056fec:	00000010 	.word	0x00000010

10056ff0 <GAT_srv_get_cccd_val>:
10056ff0:	b510      	push	{r4, lr}
10056ff2:	460c      	mov	r4, r1
10056ff4:	f7fd ffb8 	bl	10054f68 <GAT_att_cmn_get_conn_index>
10056ff8:	6861      	ldr	r1, [r4, #4]
10056ffa:	6989      	ldr	r1, [r1, #24]
10056ffc:	688b      	ldr	r3, [r1, #8]
10056ffe:	888a      	ldrh	r2, [r1, #4]
10057000:	2102      	movs	r1, #2
10057002:	f7ff fe69 	bl	10056cd8 <GAT_srv_get_zip_val>
10057006:	bd10      	pop	{r4, pc}

10057008 <GAT_srv_aes_cmac_append>:
10057008:	b5f0      	push	{r4, r5, r6, r7, lr}
1005700a:	b085      	sub	sp, #20
1005700c:	9203      	str	r2, [sp, #12]
1005700e:	460c      	mov	r4, r1
10057010:	2101      	movs	r1, #1
10057012:	0209      	lsls	r1, r1, #8
10057014:	1841      	adds	r1, r0, r1
10057016:	9104      	str	r1, [sp, #16]
10057018:	9002      	str	r0, [sp, #8]
1005701a:	30e0      	adds	r0, #224	@ 0xe0
1005701c:	9001      	str	r0, [sp, #4]
1005701e:	0420      	lsls	r0, r4, #16
10057020:	d023      	beq.n	1005706a <GAT_srv_aes_cmac_append+0x62>
10057022:	9804      	ldr	r0, [sp, #16]
10057024:	8800      	ldrh	r0, [r0, #0]
10057026:	2810      	cmp	r0, #16
10057028:	d107      	bne.n	1005703a <GAT_srv_aes_cmac_append+0x32>
1005702a:	2210      	movs	r2, #16
1005702c:	9802      	ldr	r0, [sp, #8]
1005702e:	9901      	ldr	r1, [sp, #4]
10057030:	f7ee ffad 	bl	10045f8e <BLEPLAT_AesCMACEncryptAppend>
10057034:	2000      	movs	r0, #0
10057036:	9904      	ldr	r1, [sp, #16]
10057038:	8008      	strh	r0, [r1, #0]
1005703a:	2110      	movs	r1, #16
1005703c:	1a0d      	subs	r5, r1, r0
1005703e:	b2a9      	uxth	r1, r5
10057040:	b2a2      	uxth	r2, r4
10057042:	4291      	cmp	r1, r2
10057044:	d300      	bcc.n	10057048 <GAT_srv_aes_cmac_append+0x40>
10057046:	4625      	mov	r5, r4
10057048:	b2af      	uxth	r7, r5
1005704a:	9902      	ldr	r1, [sp, #8]
1005704c:	1808      	adds	r0, r1, r0
1005704e:	30e0      	adds	r0, #224	@ 0xe0
10057050:	9e03      	ldr	r6, [sp, #12]
10057052:	4631      	mov	r1, r6
10057054:	463a      	mov	r2, r7
10057056:	f7ee ff0f 	bl	10045e78 <BLEPLAT_MemCpy>
1005705a:	9904      	ldr	r1, [sp, #16]
1005705c:	8808      	ldrh	r0, [r1, #0]
1005705e:	1828      	adds	r0, r5, r0
10057060:	8008      	strh	r0, [r1, #0]
10057062:	1b64      	subs	r4, r4, r5
10057064:	19f6      	adds	r6, r6, r7
10057066:	9603      	str	r6, [sp, #12]
10057068:	e7d9      	b.n	1005701e <GAT_srv_aes_cmac_append+0x16>
1005706a:	b005      	add	sp, #20
1005706c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10057070 <GAT_srv_add_service>:
10057070:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10057072:	4604      	mov	r4, r0
10057074:	f000 f89c 	bl	100571b0 <GAT_srv_db_update_allowed>
10057078:	250c      	movs	r5, #12
1005707a:	2800      	cmp	r0, #0
1005707c:	d025      	beq.n	100570ca <GAT_srv_add_service+0x5a>
1005707e:	2612      	movs	r6, #18
10057080:	2c00      	cmp	r4, #0
10057082:	d023      	beq.n	100570cc <GAT_srv_add_service+0x5c>
10057084:	7d20      	ldrb	r0, [r4, #20]
10057086:	1e40      	subs	r0, r0, #1
10057088:	2801      	cmp	r0, #1
1005708a:	d81f      	bhi.n	100570cc <GAT_srv_add_service+0x5c>
1005708c:	7c20      	ldrb	r0, [r4, #16]
1005708e:	2880      	cmp	r0, #128	@ 0x80
10057090:	d01e      	beq.n	100570d0 <GAT_srv_add_service+0x60>
10057092:	2810      	cmp	r0, #16
10057094:	d11a      	bne.n	100570cc <GAT_srv_add_service+0x5c>
10057096:	89a0      	ldrh	r0, [r4, #12]
10057098:	2101      	movs	r1, #1
1005709a:	4388      	bics	r0, r1
1005709c:	2103      	movs	r1, #3
1005709e:	02c9      	lsls	r1, r1, #11
100570a0:	4288      	cmp	r0, r1
100570a2:	d115      	bne.n	100570d0 <GAT_srv_add_service+0x60>
100570a4:	2001      	movs	r0, #1
100570a6:	f00d f8cf 	bl	10064248 <GAT_att_db_find_from_handle>
100570aa:	2800      	cmp	r0, #0
100570ac:	d010      	beq.n	100570d0 <GAT_srv_add_service+0x60>
100570ae:	7801      	ldrb	r1, [r0, #0]
100570b0:	2900      	cmp	r1, #0
100570b2:	d107      	bne.n	100570c4 <GAT_srv_add_service+0x54>
100570b4:	6841      	ldr	r1, [r0, #4]
100570b6:	7c0a      	ldrb	r2, [r1, #16]
100570b8:	2a10      	cmp	r2, #16
100570ba:	d103      	bne.n	100570c4 <GAT_srv_add_service+0x54>
100570bc:	8989      	ldrh	r1, [r1, #12]
100570be:	89a2      	ldrh	r2, [r4, #12]
100570c0:	428a      	cmp	r2, r1
100570c2:	d002      	beq.n	100570ca <GAT_srv_add_service+0x5a>
100570c4:	f00d f922 	bl	1006430c <GAT_att_db_get_next>
100570c8:	e7ef      	b.n	100570aa <GAT_srv_add_service+0x3a>
100570ca:	462e      	mov	r6, r5
100570cc:	4630      	mov	r0, r6
100570ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100570d0:	2000      	movs	r0, #0
100570d2:	f00d f9b1 	bl	10064438 <GAT_att_db_find_last_attr_of_type>
100570d6:	2800      	cmp	r0, #0
100570d8:	d006      	beq.n	100570e8 <GAT_srv_add_service+0x78>
100570da:	6841      	ldr	r1, [r0, #4]
100570dc:	8ac9      	ldrh	r1, [r1, #22]
100570de:	2900      	cmp	r1, #0
100570e0:	d004      	beq.n	100570ec <GAT_srv_add_service+0x7c>
100570e2:	8840      	ldrh	r0, [r0, #2]
100570e4:	1840      	adds	r0, r0, r1
100570e6:	e004      	b.n	100570f2 <GAT_srv_add_service+0x82>
100570e8:	2001      	movs	r0, #1
100570ea:	e002      	b.n	100570f2 <GAT_srv_add_service+0x82>
100570ec:	f00d f952 	bl	10064394 <GAT_att_db_get_last_handle>
100570f0:	1c40      	adds	r0, r0, #1
100570f2:	b282      	uxth	r2, r0
100570f4:	2600      	movs	r6, #0
100570f6:	4630      	mov	r0, r6
100570f8:	4631      	mov	r1, r6
100570fa:	4623      	mov	r3, r4
100570fc:	f00d f828 	bl	10064150 <GAT_att_db_insert>
10057100:	2800      	cmp	r0, #0
10057102:	d020      	beq.n	10057146 <GAT_srv_add_service+0xd6>
10057104:	43f7      	mvns	r7, r6
10057106:	8ae1      	ldrh	r1, [r4, #22]
10057108:	1e49      	subs	r1, r1, #1
1005710a:	9102      	str	r1, [sp, #8]
1005710c:	9000      	str	r0, [sp, #0]
1005710e:	9401      	str	r4, [sp, #4]
10057110:	1c7f      	adds	r7, r7, #1
10057112:	7e21      	ldrb	r1, [r4, #24]
10057114:	428f      	cmp	r7, r1
10057116:	d218      	bcs.n	1005714a <GAT_srv_add_service+0xda>
10057118:	8ae1      	ldrh	r1, [r4, #22]
1005711a:	2900      	cmp	r1, #0
1005711c:	d004      	beq.n	10057128 <GAT_srv_add_service+0xb8>
1005711e:	9a02      	ldr	r2, [sp, #8]
10057120:	0411      	lsls	r1, r2, #16
10057122:	d03a      	beq.n	1005719a <GAT_srv_add_service+0x12a>
10057124:	1e52      	subs	r2, r2, #1
10057126:	9202      	str	r2, [sp, #8]
10057128:	1d35      	adds	r5, r6, #4
1005712a:	1c40      	adds	r0, r0, #1
1005712c:	9c01      	ldr	r4, [sp, #4]
1005712e:	69e1      	ldr	r1, [r4, #28]
10057130:	598b      	ldr	r3, [r1, r6]
10057132:	b282      	uxth	r2, r0
10057134:	2001      	movs	r0, #1
10057136:	2100      	movs	r1, #0
10057138:	f00d f80a 	bl	10064150 <GAT_att_db_insert>
1005713c:	2800      	cmp	r0, #0
1005713e:	462e      	mov	r6, r5
10057140:	d1e6      	bne.n	10057110 <GAT_srv_add_service+0xa0>
10057142:	2687      	movs	r6, #135	@ 0x87
10057144:	e02e      	b.n	100571a4 <GAT_srv_add_service+0x134>
10057146:	2687      	movs	r6, #135	@ 0x87
10057148:	e7c0      	b.n	100570cc <GAT_srv_add_service+0x5c>
1005714a:	4818      	ldr	r0, [pc, #96]	@ (100571ac <__arm_cp.0_0>)
1005714c:	6800      	ldr	r0, [r0, #0]
1005714e:	215c      	movs	r1, #92	@ 0x5c
10057150:	5c42      	ldrb	r2, [r0, r1]
10057152:	2302      	movs	r3, #2
10057154:	4313      	orrs	r3, r2
10057156:	5443      	strb	r3, [r0, r1]
10057158:	200a      	movs	r0, #10
1005715a:	f00a ff9f 	bl	1006209c <tsk_notify_idx>
1005715e:	f7ec fe9e 	bl	10043e9e <BLE_STACK_ProcessRequest>
10057162:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10057164:	2600      	movs	r6, #0
10057166:	2800      	cmp	r0, #0
10057168:	d0b0      	beq.n	100570cc <GAT_srv_add_service+0x5c>
1005716a:	2020      	movs	r0, #32
1005716c:	5c20      	ldrb	r0, [r4, r0]
1005716e:	2800      	cmp	r0, #0
10057170:	d0ac      	beq.n	100570cc <GAT_srv_add_service+0x5c>
10057172:	4621      	mov	r1, r4
10057174:	3120      	adds	r1, #32
10057176:	9102      	str	r1, [sp, #8]
10057178:	2500      	movs	r5, #0
1005717a:	462f      	mov	r7, r5
1005717c:	9501      	str	r5, [sp, #4]
1005717e:	4285      	cmp	r5, r0
10057180:	9900      	ldr	r1, [sp, #0]
10057182:	d20c      	bcs.n	1005719e <GAT_srv_add_service+0x12e>
10057184:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10057186:	19c0      	adds	r0, r0, r7
10057188:	f000 f822 	bl	100571d0 <GAT_srv_add_characteristic>
1005718c:	2800      	cmp	r0, #0
1005718e:	d108      	bne.n	100571a2 <GAT_srv_add_service+0x132>
10057190:	3724      	adds	r7, #36	@ 0x24
10057192:	9802      	ldr	r0, [sp, #8]
10057194:	7800      	ldrb	r0, [r0, #0]
10057196:	1c6d      	adds	r5, r5, #1
10057198:	e7f1      	b.n	1005717e <GAT_srv_add_service+0x10e>
1005719a:	2612      	movs	r6, #18
1005719c:	e002      	b.n	100571a4 <GAT_srv_add_service+0x134>
1005719e:	9e01      	ldr	r6, [sp, #4]
100571a0:	e794      	b.n	100570cc <GAT_srv_add_service+0x5c>
100571a2:	4606      	mov	r6, r0
100571a4:	9800      	ldr	r0, [sp, #0]
100571a6:	f000 f8a3 	bl	100572f0 <GAT_srv_rm_service>
100571aa:	e78f      	b.n	100570cc <GAT_srv_add_service+0x5c>

100571ac <__arm_cp.0_0>:
100571ac:	2000112c 	.word	0x2000112c

100571b0 <GAT_srv_db_update_allowed>:
100571b0:	b510      	push	{r4, lr}
100571b2:	f7fe fab9 	bl	10055728 <GAT_att_srv_request_user_pending>
100571b6:	2400      	movs	r4, #0
100571b8:	2800      	cmp	r0, #0
100571ba:	d106      	bne.n	100571ca <GAT_srv_db_update_allowed+0x1a>
100571bc:	f7fe faa2 	bl	10055704 <GAT_att_srv_confirmation_pending>
100571c0:	2800      	cmp	r0, #0
100571c2:	d102      	bne.n	100571ca <GAT_srv_db_update_allowed+0x1a>
100571c4:	f7fe fac8 	bl	10055758 <GAT_att_srv_flush_user_pending_list>
100571c8:	2401      	movs	r4, #1
100571ca:	4620      	mov	r0, r4
100571cc:	bd10      	pop	{r4, pc}
	...

100571d0 <GAT_srv_add_characteristic>:
100571d0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100571d2:	460e      	mov	r6, r1
100571d4:	4604      	mov	r4, r0
100571d6:	f7ff ffeb 	bl	100571b0 <GAT_srv_db_update_allowed>
100571da:	2800      	cmp	r0, #0
100571dc:	d066      	beq.n	100572ac <GAT_srv_add_characteristic+0xdc>
100571de:	2512      	movs	r5, #18
100571e0:	2c00      	cmp	r4, #0
100571e2:	d064      	beq.n	100572ae <GAT_srv_add_characteristic+0xde>
100571e4:	7d20      	ldrb	r0, [r4, #20]
100571e6:	2880      	cmp	r0, #128	@ 0x80
100571e8:	d013      	beq.n	10057212 <GAT_srv_add_characteristic+0x42>
100571ea:	2810      	cmp	r0, #16
100571ec:	d15f      	bne.n	100572ae <GAT_srv_add_characteristic+0xde>
100571ee:	8a20      	ldrh	r0, [r4, #16]
100571f0:	493c      	ldr	r1, [pc, #240]	@ (100572e4 <__arm_cp.2_0>)
100571f2:	4288      	cmp	r0, r1
100571f4:	d10d      	bne.n	10057212 <GAT_srv_add_characteristic+0x42>
100571f6:	6a20      	ldr	r0, [r4, #32]
100571f8:	2800      	cmp	r0, #0
100571fa:	d058      	beq.n	100572ae <GAT_srv_add_characteristic+0xde>
100571fc:	8882      	ldrh	r2, [r0, #4]
100571fe:	493a      	ldr	r1, [pc, #232]	@ (100572e8 <__arm_cp.2_1>)
10057200:	7ac9      	ldrb	r1, [r1, #11]
10057202:	0849      	lsrs	r1, r1, #1
10057204:	1c49      	adds	r1, r1, #1
10057206:	428a      	cmp	r2, r1
10057208:	d351      	bcc.n	100572ae <GAT_srv_add_characteristic+0xde>
1005720a:	6880      	ldr	r0, [r0, #8]
1005720c:	2100      	movs	r1, #0
1005720e:	f7ee fe43 	bl	10045e98 <BLEPLAT_MemSet>
10057212:	78a0      	ldrb	r0, [r4, #2]
10057214:	2124      	movs	r1, #36	@ 0x24
10057216:	4208      	tst	r0, r1
10057218:	d003      	beq.n	10057222 <GAT_srv_add_characteristic+0x52>
1005721a:	7860      	ldrb	r0, [r4, #1]
1005721c:	1fc0      	subs	r0, r0, #7
1005721e:	2809      	cmp	r0, #9
10057220:	d845      	bhi.n	100572ae <GAT_srv_add_characteristic+0xde>
10057222:	4630      	mov	r0, r6
10057224:	f00c ffe8 	bl	100641f8 <GAT_att_db_find_by_handle>
10057228:	2800      	cmp	r0, #0
1005722a:	d040      	beq.n	100572ae <GAT_srv_add_characteristic+0xde>
1005722c:	4606      	mov	r6, r0
1005722e:	7800      	ldrb	r0, [r0, #0]
10057230:	2800      	cmp	r0, #0
10057232:	d13c      	bne.n	100572ae <GAT_srv_add_characteristic+0xde>
10057234:	7e20      	ldrb	r0, [r4, #24]
10057236:	1c81      	adds	r1, r0, #2
10057238:	4630      	mov	r0, r6
1005723a:	f000 f883 	bl	10057344 <GAT_srv_check_group_size>
1005723e:	4605      	mov	r5, r0
10057240:	2800      	cmp	r0, #0
10057242:	d134      	bne.n	100572ae <GAT_srv_add_characteristic+0xde>
10057244:	4630      	mov	r0, r6
10057246:	f7ff fb03 	bl	10056850 <GAT_srv_get_att_group_end_handle>
1005724a:	4605      	mov	r5, r0
1005724c:	f00c ffd4 	bl	100641f8 <GAT_att_db_find_by_handle>
10057250:	4601      	mov	r1, r0
10057252:	1c68      	adds	r0, r5, #1
10057254:	b286      	uxth	r6, r0
10057256:	2702      	movs	r7, #2
10057258:	4638      	mov	r0, r7
1005725a:	4632      	mov	r2, r6
1005725c:	4623      	mov	r3, r4
1005725e:	f00c ff77 	bl	10064150 <GAT_att_db_insert>
10057262:	42b0      	cmp	r0, r6
10057264:	d125      	bne.n	100572b2 <GAT_srv_add_characteristic+0xe2>
10057266:	4630      	mov	r0, r6
10057268:	f00c ffc6 	bl	100641f8 <GAT_att_db_find_by_handle>
1005726c:	4601      	mov	r1, r0
1005726e:	1ca8      	adds	r0, r5, #2
10057270:	b282      	uxth	r2, r0
10057272:	2003      	movs	r0, #3
10057274:	4623      	mov	r3, r4
10057276:	f00c ff6b 	bl	10064150 <GAT_att_db_insert>
1005727a:	2800      	cmp	r0, #0
1005727c:	d029      	beq.n	100572d2 <GAT_srv_add_characteristic+0x102>
1005727e:	9701      	str	r7, [sp, #4]
10057280:	9602      	str	r6, [sp, #8]
10057282:	69e0      	ldr	r0, [r4, #28]
10057284:	2800      	cmp	r0, #0
10057286:	d016      	beq.n	100572b6 <GAT_srv_add_characteristic+0xe6>
10057288:	7e20      	ldrb	r0, [r4, #24]
1005728a:	2800      	cmp	r0, #0
1005728c:	d013      	beq.n	100572b6 <GAT_srv_add_characteristic+0xe6>
1005728e:	2600      	movs	r6, #0
10057290:	4637      	mov	r7, r6
10057292:	4287      	cmp	r7, r0
10057294:	d20f      	bcs.n	100572b6 <GAT_srv_add_characteristic+0xe6>
10057296:	69e0      	ldr	r0, [r4, #28]
10057298:	1980      	adds	r0, r0, r6
1005729a:	9902      	ldr	r1, [sp, #8]
1005729c:	f000 f86c 	bl	10057378 <GAT_srv_add_char_descriptor>
100572a0:	2800      	cmp	r0, #0
100572a2:	d118      	bne.n	100572d6 <GAT_srv_add_characteristic+0x106>
100572a4:	361c      	adds	r6, #28
100572a6:	7e20      	ldrb	r0, [r4, #24]
100572a8:	1c7f      	adds	r7, r7, #1
100572aa:	e7f2      	b.n	10057292 <GAT_srv_add_characteristic+0xc2>
100572ac:	250c      	movs	r5, #12
100572ae:	4628      	mov	r0, r5
100572b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100572b2:	2587      	movs	r5, #135	@ 0x87
100572b4:	e7fb      	b.n	100572ae <GAT_srv_add_characteristic+0xde>
100572b6:	480d      	ldr	r0, [pc, #52]	@ (100572ec <__arm_cp.2_2>)
100572b8:	6800      	ldr	r0, [r0, #0]
100572ba:	215c      	movs	r1, #92	@ 0x5c
100572bc:	5c42      	ldrb	r2, [r0, r1]
100572be:	9b01      	ldr	r3, [sp, #4]
100572c0:	431a      	orrs	r2, r3
100572c2:	5442      	strb	r2, [r0, r1]
100572c4:	200a      	movs	r0, #10
100572c6:	f00a fee9 	bl	1006209c <tsk_notify_idx>
100572ca:	f7ec fde8 	bl	10043e9e <BLE_STACK_ProcessRequest>
100572ce:	2500      	movs	r5, #0
100572d0:	e7ed      	b.n	100572ae <GAT_srv_add_characteristic+0xde>
100572d2:	2587      	movs	r5, #135	@ 0x87
100572d4:	e001      	b.n	100572da <GAT_srv_add_characteristic+0x10a>
100572d6:	4605      	mov	r5, r0
100572d8:	9e02      	ldr	r6, [sp, #8]
100572da:	4630      	mov	r0, r6
100572dc:	f000 f8d4 	bl	10057488 <GAT_srv_rm_characteristic>
100572e0:	e7e5      	b.n	100572ae <GAT_srv_add_characteristic+0xde>
100572e2:	46c0      	nop			@ (mov r8, r8)

100572e4 <__arm_cp.2_0>:
100572e4:	00002b29 	.word	0x00002b29

100572e8 <__arm_cp.2_1>:
100572e8:	20001188 	.word	0x20001188

100572ec <__arm_cp.2_2>:
100572ec:	2000112c 	.word	0x2000112c

100572f0 <GAT_srv_rm_service>:
100572f0:	b510      	push	{r4, lr}
100572f2:	4604      	mov	r4, r0
100572f4:	f7ff ff5c 	bl	100571b0 <GAT_srv_db_update_allowed>
100572f8:	2800      	cmp	r0, #0
100572fa:	d00a      	beq.n	10057312 <GAT_srv_rm_service+0x22>
100572fc:	4620      	mov	r0, r4
100572fe:	f00c ff7b 	bl	100641f8 <GAT_att_db_find_by_handle>
10057302:	4601      	mov	r1, r0
10057304:	2012      	movs	r0, #18
10057306:	2900      	cmp	r1, #0
10057308:	d002      	beq.n	10057310 <GAT_srv_rm_service+0x20>
1005730a:	780a      	ldrb	r2, [r1, #0]
1005730c:	2a00      	cmp	r2, #0
1005730e:	d002      	beq.n	10057316 <GAT_srv_rm_service+0x26>
10057310:	bd10      	pop	{r4, pc}
10057312:	200c      	movs	r0, #12
10057314:	bd10      	pop	{r4, pc}
10057316:	4608      	mov	r0, r1
10057318:	f00d f80c 	bl	10064334 <GAT_att_db_get_last_group_handle>
1005731c:	4601      	mov	r1, r0
1005731e:	4620      	mov	r0, r4
10057320:	f00d f848 	bl	100643b4 <GAT_att_db_rm_att_range>
10057324:	4806      	ldr	r0, [pc, #24]	@ (10057340 <__arm_cp.3_0>)
10057326:	6800      	ldr	r0, [r0, #0]
10057328:	215c      	movs	r1, #92	@ 0x5c
1005732a:	5c42      	ldrb	r2, [r0, r1]
1005732c:	2302      	movs	r3, #2
1005732e:	4313      	orrs	r3, r2
10057330:	5443      	strb	r3, [r0, r1]
10057332:	200a      	movs	r0, #10
10057334:	f00a feb2 	bl	1006209c <tsk_notify_idx>
10057338:	f7ec fdb1 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005733c:	2000      	movs	r0, #0
1005733e:	bd10      	pop	{r4, pc}

10057340 <__arm_cp.3_0>:
10057340:	2000112c 	.word	0x2000112c

10057344 <GAT_srv_check_group_size>:
10057344:	b5b0      	push	{r4, r5, r7, lr}
10057346:	460d      	mov	r5, r1
10057348:	4604      	mov	r4, r0
1005734a:	f7ff fa81 	bl	10056850 <GAT_srv_get_att_group_end_handle>
1005734e:	6861      	ldr	r1, [r4, #4]
10057350:	8ac9      	ldrh	r1, [r1, #22]
10057352:	2900      	cmp	r1, #0
10057354:	d008      	beq.n	10057368 <GAT_srv_check_group_size+0x24>
10057356:	43c0      	mvns	r0, r0
10057358:	1808      	adds	r0, r1, r0
1005735a:	8861      	ldrh	r1, [r4, #2]
1005735c:	1840      	adds	r0, r0, r1
1005735e:	b280      	uxth	r0, r0
10057360:	42a8      	cmp	r0, r5
10057362:	d306      	bcc.n	10057372 <GAT_srv_check_group_size+0x2e>
10057364:	2000      	movs	r0, #0
10057366:	bdb0      	pop	{r4, r5, r7, pc}
10057368:	2000      	movs	r0, #0
1005736a:	f00d f865 	bl	10064438 <GAT_att_db_find_last_attr_of_type>
1005736e:	42a0      	cmp	r0, r4
10057370:	d0f8      	beq.n	10057364 <GAT_srv_check_group_size+0x20>
10057372:	200c      	movs	r0, #12
10057374:	bdb0      	pop	{r4, r5, r7, pc}
	...

10057378 <GAT_srv_add_char_descriptor>:
10057378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005737a:	460e      	mov	r6, r1
1005737c:	4604      	mov	r4, r0
1005737e:	f7ff ff17 	bl	100571b0 <GAT_srv_db_update_allowed>
10057382:	2800      	cmp	r0, #0
10057384:	d075      	beq.n	10057472 <GAT_srv_add_char_descriptor+0xfa>
10057386:	2512      	movs	r5, #18
10057388:	2c00      	cmp	r4, #0
1005738a:	d073      	beq.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
1005738c:	7d20      	ldrb	r0, [r4, #20]
1005738e:	2880      	cmp	r0, #128	@ 0x80
10057390:	d001      	beq.n	10057396 <GAT_srv_add_char_descriptor+0x1e>
10057392:	2810      	cmp	r0, #16
10057394:	d16e      	bne.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
10057396:	2810      	cmp	r0, #16
10057398:	d108      	bne.n	100573ac <GAT_srv_add_char_descriptor+0x34>
1005739a:	8a21      	ldrh	r1, [r4, #16]
1005739c:	2229      	movs	r2, #41	@ 0x29
1005739e:	0212      	lsls	r2, r2, #8
100573a0:	1c92      	adds	r2, r2, #2
100573a2:	4291      	cmp	r1, r2
100573a4:	d102      	bne.n	100573ac <GAT_srv_add_char_descriptor+0x34>
100573a6:	69a1      	ldr	r1, [r4, #24]
100573a8:	2900      	cmp	r1, #0
100573aa:	d063      	beq.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
100573ac:	78a1      	ldrb	r1, [r4, #2]
100573ae:	2224      	movs	r2, #36	@ 0x24
100573b0:	4211      	tst	r1, r2
100573b2:	d003      	beq.n	100573bc <GAT_srv_add_char_descriptor+0x44>
100573b4:	7862      	ldrb	r2, [r4, #1]
100573b6:	1fd2      	subs	r2, r2, #7
100573b8:	2a09      	cmp	r2, #9
100573ba:	d85b      	bhi.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
100573bc:	2810      	cmp	r0, #16
100573be:	d115      	bne.n	100573ec <GAT_srv_add_char_descriptor+0x74>
100573c0:	8a20      	ldrh	r0, [r4, #16]
100573c2:	4a2f      	ldr	r2, [pc, #188]	@ (10057480 <__arm_cp.7_0>)
100573c4:	1882      	adds	r2, r0, r2
100573c6:	2a05      	cmp	r2, #5
100573c8:	d810      	bhi.n	100573ec <GAT_srv_add_char_descriptor+0x74>
100573ca:	2301      	movs	r3, #1
100573cc:	4093      	lsls	r3, r2
100573ce:	2231      	movs	r2, #49	@ 0x31
100573d0:	4213      	tst	r3, r2
100573d2:	d00b      	beq.n	100573ec <GAT_srv_add_char_descriptor+0x74>
100573d4:	7822      	ldrb	r2, [r4, #0]
100573d6:	2a01      	cmp	r2, #1
100573d8:	d14c      	bne.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
100573da:	2900      	cmp	r1, #0
100573dc:	d14a      	bne.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
100573de:	2129      	movs	r1, #41	@ 0x29
100573e0:	0209      	lsls	r1, r1, #8
100573e2:	4288      	cmp	r0, r1
100573e4:	d102      	bne.n	100573ec <GAT_srv_add_char_descriptor+0x74>
100573e6:	69a0      	ldr	r0, [r4, #24]
100573e8:	2800      	cmp	r0, #0
100573ea:	d043      	beq.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
100573ec:	4630      	mov	r0, r6
100573ee:	f00c ff03 	bl	100641f8 <GAT_att_db_find_by_handle>
100573f2:	2800      	cmp	r0, #0
100573f4:	d03e      	beq.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
100573f6:	4607      	mov	r7, r0
100573f8:	7800      	ldrb	r0, [r0, #0]
100573fa:	2802      	cmp	r0, #2
100573fc:	d13a      	bne.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
100573fe:	2500      	movs	r5, #0
10057400:	4628      	mov	r0, r5
10057402:	4631      	mov	r1, r6
10057404:	f00d f82e 	bl	10064464 <GAT_att_db_reverse_find_attr_of_type>
10057408:	2800      	cmp	r0, #0
1005740a:	d035      	beq.n	10057478 <GAT_srv_add_char_descriptor+0x100>
1005740c:	462e      	mov	r6, r5
1005740e:	2101      	movs	r1, #1
10057410:	f7ff ff98 	bl	10057344 <GAT_srv_check_group_size>
10057414:	4605      	mov	r5, r0
10057416:	2800      	cmp	r0, #0
10057418:	d12c      	bne.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
1005741a:	4638      	mov	r0, r7
1005741c:	f7ff fa18 	bl	10056850 <GAT_srv_get_att_group_end_handle>
10057420:	4605      	mov	r5, r0
10057422:	f00c fee9 	bl	100641f8 <GAT_att_db_find_by_handle>
10057426:	4601      	mov	r1, r0
10057428:	1c6d      	adds	r5, r5, #1
1005742a:	b2aa      	uxth	r2, r5
1005742c:	2004      	movs	r0, #4
1005742e:	4623      	mov	r3, r4
10057430:	f00c fe8e 	bl	10064150 <GAT_att_db_insert>
10057434:	4285      	cmp	r5, r0
10057436:	d121      	bne.n	1005747c <GAT_srv_add_char_descriptor+0x104>
10057438:	7d20      	ldrb	r0, [r4, #20]
1005743a:	2810      	cmp	r0, #16
1005743c:	d10b      	bne.n	10057456 <GAT_srv_add_char_descriptor+0xde>
1005743e:	8a20      	ldrh	r0, [r4, #16]
10057440:	2129      	movs	r1, #41	@ 0x29
10057442:	0209      	lsls	r1, r1, #8
10057444:	1c89      	adds	r1, r1, #2
10057446:	4288      	cmp	r0, r1
10057448:	d105      	bne.n	10057456 <GAT_srv_add_char_descriptor+0xde>
1005744a:	69a0      	ldr	r0, [r4, #24]
1005744c:	8882      	ldrh	r2, [r0, #4]
1005744e:	6880      	ldr	r0, [r0, #8]
10057450:	2100      	movs	r1, #0
10057452:	f7ee fd21 	bl	10045e98 <BLEPLAT_MemSet>
10057456:	480b      	ldr	r0, [pc, #44]	@ (10057484 <__arm_cp.7_1>)
10057458:	6800      	ldr	r0, [r0, #0]
1005745a:	215c      	movs	r1, #92	@ 0x5c
1005745c:	5c42      	ldrb	r2, [r0, r1]
1005745e:	2302      	movs	r3, #2
10057460:	4313      	orrs	r3, r2
10057462:	5443      	strb	r3, [r0, r1]
10057464:	200a      	movs	r0, #10
10057466:	f00a fe19 	bl	1006209c <tsk_notify_idx>
1005746a:	f7ec fd18 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005746e:	4635      	mov	r5, r6
10057470:	e000      	b.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
10057472:	250c      	movs	r5, #12
10057474:	4628      	mov	r0, r5
10057476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10057478:	2586      	movs	r5, #134	@ 0x86
1005747a:	e7fb      	b.n	10057474 <GAT_srv_add_char_descriptor+0xfc>
1005747c:	2587      	movs	r5, #135	@ 0x87
1005747e:	e7f9      	b.n	10057474 <GAT_srv_add_char_descriptor+0xfc>

10057480 <__arm_cp.7_0>:
10057480:	ffffd700 	.word	0xffffd700

10057484 <__arm_cp.7_1>:
10057484:	2000112c 	.word	0x2000112c

10057488 <GAT_srv_rm_characteristic>:
10057488:	b510      	push	{r4, lr}
1005748a:	4604      	mov	r4, r0
1005748c:	f7ff fe90 	bl	100571b0 <GAT_srv_db_update_allowed>
10057490:	2800      	cmp	r0, #0
10057492:	d01e      	beq.n	100574d2 <GAT_srv_rm_characteristic+0x4a>
10057494:	4620      	mov	r0, r4
10057496:	f00c feaf 	bl	100641f8 <GAT_att_db_find_by_handle>
1005749a:	4601      	mov	r1, r0
1005749c:	2012      	movs	r0, #18
1005749e:	2900      	cmp	r1, #0
100574a0:	d016      	beq.n	100574d0 <GAT_srv_rm_characteristic+0x48>
100574a2:	780a      	ldrb	r2, [r1, #0]
100574a4:	2a02      	cmp	r2, #2
100574a6:	d113      	bne.n	100574d0 <GAT_srv_rm_characteristic+0x48>
100574a8:	4608      	mov	r0, r1
100574aa:	f00c ff43 	bl	10064334 <GAT_att_db_get_last_group_handle>
100574ae:	4601      	mov	r1, r0
100574b0:	4620      	mov	r0, r4
100574b2:	f00c ff7f 	bl	100643b4 <GAT_att_db_rm_att_range>
100574b6:	4808      	ldr	r0, [pc, #32]	@ (100574d8 <__arm_cp.8_0>)
100574b8:	6800      	ldr	r0, [r0, #0]
100574ba:	215c      	movs	r1, #92	@ 0x5c
100574bc:	5c42      	ldrb	r2, [r0, r1]
100574be:	2302      	movs	r3, #2
100574c0:	4313      	orrs	r3, r2
100574c2:	5443      	strb	r3, [r0, r1]
100574c4:	200a      	movs	r0, #10
100574c6:	f00a fde9 	bl	1006209c <tsk_notify_idx>
100574ca:	f7ec fce8 	bl	10043e9e <BLE_STACK_ProcessRequest>
100574ce:	2000      	movs	r0, #0
100574d0:	bd10      	pop	{r4, pc}
100574d2:	200c      	movs	r0, #12
100574d4:	bd10      	pop	{r4, pc}
100574d6:	46c0      	nop			@ (mov r8, r8)

100574d8 <__arm_cp.8_0>:
100574d8:	2000112c 	.word	0x2000112c

100574dc <GAT_srv_notify>:
100574dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100574de:	b085      	sub	sp, #20
100574e0:	9104      	str	r1, [sp, #16]
100574e2:	2412      	movs	r4, #18
100574e4:	2800      	cmp	r0, #0
100574e6:	d039      	beq.n	1005755c <GAT_srv_notify+0x80>
100574e8:	461d      	mov	r5, r3
100574ea:	4616      	mov	r6, r2
100574ec:	4607      	mov	r7, r0
100574ee:	2b02      	cmp	r3, #2
100574f0:	d30a      	bcc.n	10057508 <GAT_srv_notify+0x2c>
100574f2:	2e02      	cmp	r6, #2
100574f4:	d032      	beq.n	1005755c <GAT_srv_notify+0x80>
100574f6:	2100      	movs	r1, #0
100574f8:	2204      	movs	r2, #4
100574fa:	4638      	mov	r0, r7
100574fc:	f7ff fd10 	bl	10056f20 <GAT_srv_check_client_support_feature>
10057500:	2881      	cmp	r0, #129	@ 0x81
10057502:	d101      	bne.n	10057508 <GAT_srv_notify+0x2c>
10057504:	240c      	movs	r4, #12
10057506:	e029      	b.n	1005755c <GAT_srv_notify+0x80>
10057508:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005750a:	2e02      	cmp	r6, #2
1005750c:	9003      	str	r0, [sp, #12]
1005750e:	9502      	str	r5, [sp, #8]
10057510:	9601      	str	r6, [sp, #4]
10057512:	d20f      	bcs.n	10057534 <GAT_srv_notify+0x58>
10057514:	1c6d      	adds	r5, r5, #1
10057516:	4606      	mov	r6, r0
10057518:	1e6d      	subs	r5, r5, #1
1005751a:	d017      	beq.n	1005754c <GAT_srv_notify+0x70>
1005751c:	8832      	ldrh	r2, [r6, #0]
1005751e:	3608      	adds	r6, #8
10057520:	2310      	movs	r3, #16
10057522:	4638      	mov	r0, r7
10057524:	9904      	ldr	r1, [sp, #16]
10057526:	f000 f81d 	bl	10057564 <GAT_srv_checks_for_notify>
1005752a:	4604      	mov	r4, r0
1005752c:	9803      	ldr	r0, [sp, #12]
1005752e:	2c00      	cmp	r4, #0
10057530:	d0f2      	beq.n	10057518 <GAT_srv_notify+0x3c>
10057532:	e013      	b.n	1005755c <GAT_srv_notify+0x80>
10057534:	2e02      	cmp	r6, #2
10057536:	d111      	bne.n	1005755c <GAT_srv_notify+0x80>
10057538:	8802      	ldrh	r2, [r0, #0]
1005753a:	2320      	movs	r3, #32
1005753c:	4638      	mov	r0, r7
1005753e:	9904      	ldr	r1, [sp, #16]
10057540:	f000 f810 	bl	10057564 <GAT_srv_checks_for_notify>
10057544:	4604      	mov	r4, r0
10057546:	9803      	ldr	r0, [sp, #12]
10057548:	2c00      	cmp	r4, #0
1005754a:	d107      	bne.n	1005755c <GAT_srv_notify+0x80>
1005754c:	9000      	str	r0, [sp, #0]
1005754e:	4638      	mov	r0, r7
10057550:	9904      	ldr	r1, [sp, #16]
10057552:	9a01      	ldr	r2, [sp, #4]
10057554:	9b02      	ldr	r3, [sp, #8]
10057556:	f7fd ff51 	bl	100553fc <GAT_att_srv_hvtx>
1005755a:	4604      	mov	r4, r0
1005755c:	4620      	mov	r0, r4
1005755e:	b005      	add	sp, #20
10057560:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10057564 <GAT_srv_checks_for_notify>:
10057564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057566:	461d      	mov	r5, r3
10057568:	4616      	mov	r6, r2
1005756a:	4604      	mov	r4, r0
1005756c:	f7fd fc52 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
10057570:	2712      	movs	r7, #18
10057572:	2800      	cmp	r0, #0
10057574:	d024      	beq.n	100575c0 <GAT_srv_checks_for_notify+0x5c>
10057576:	4601      	mov	r1, r0
10057578:	481b      	ldr	r0, [pc, #108]	@ (100575e8 <__arm_cp.11_0>)
1005757a:	6800      	ldr	r0, [r0, #0]
1005757c:	225c      	movs	r2, #92	@ 0x5c
1005757e:	5c82      	ldrb	r2, [r0, r2]
10057580:	2081      	movs	r0, #129	@ 0x81
10057582:	0792      	lsls	r2, r2, #30
10057584:	d42c      	bmi.n	100575e0 <GAT_srv_checks_for_notify+0x7c>
10057586:	8889      	ldrh	r1, [r1, #4]
10057588:	0649      	lsls	r1, r1, #25
1005758a:	d429      	bmi.n	100575e0 <GAT_srv_checks_for_notify+0x7c>
1005758c:	1e70      	subs	r0, r6, #1
1005758e:	b280      	uxth	r0, r0
10057590:	f00c fe32 	bl	100641f8 <GAT_att_db_find_by_handle>
10057594:	4601      	mov	r1, r0
10057596:	2800      	cmp	r0, #0
10057598:	4638      	mov	r0, r7
1005759a:	d021      	beq.n	100575e0 <GAT_srv_checks_for_notify+0x7c>
1005759c:	6848      	ldr	r0, [r1, #4]
1005759e:	7800      	ldrb	r0, [r0, #0]
100575a0:	4228      	tst	r0, r5
100575a2:	d01e      	beq.n	100575e2 <GAT_srv_checks_for_notify+0x7e>
100575a4:	4608      	mov	r0, r1
100575a6:	f7ff fcf3 	bl	10056f90 <GAT_srv_get_cccd_attr_p>
100575aa:	2800      	cmp	r0, #0
100575ac:	d00a      	beq.n	100575c4 <GAT_srv_checks_for_notify+0x60>
100575ae:	4606      	mov	r6, r0
100575b0:	2203      	movs	r2, #3
100575b2:	4621      	mov	r1, r4
100575b4:	f7ff f970 	bl	10056898 <GAT_srv_check_perms>
100575b8:	2800      	cmp	r0, #0
100575ba:	d005      	beq.n	100575c8 <GAT_srv_checks_for_notify+0x64>
100575bc:	20c0      	movs	r0, #192	@ 0xc0
100575be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100575c0:	4638      	mov	r0, r7
100575c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100575c4:	2086      	movs	r0, #134	@ 0x86
100575c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100575c8:	2d10      	cmp	r5, #16
100575ca:	d001      	beq.n	100575d0 <GAT_srv_checks_for_notify+0x6c>
100575cc:	2502      	movs	r5, #2
100575ce:	e000      	b.n	100575d2 <GAT_srv_checks_for_notify+0x6e>
100575d0:	2501      	movs	r5, #1
100575d2:	4620      	mov	r0, r4
100575d4:	4631      	mov	r1, r6
100575d6:	f7ff fd0b 	bl	10056ff0 <GAT_srv_get_cccd_val>
100575da:	4205      	tst	r5, r0
100575dc:	d001      	beq.n	100575e2 <GAT_srv_checks_for_notify+0x7e>
100575de:	2000      	movs	r0, #0
100575e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100575e2:	200c      	movs	r0, #12
100575e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100575e6:	46c0      	nop			@ (mov r8, r8)

100575e8 <__arm_cp.11_0>:
100575e8:	2000112c 	.word	0x2000112c

100575ec <GAT_srv_resp>:
100575ec:	b51c      	push	{r2, r3, r4, lr}
100575ee:	9c05      	ldr	r4, [sp, #20]
100575f0:	9401      	str	r4, [sp, #4]
100575f2:	9c04      	ldr	r4, [sp, #16]
100575f4:	9400      	str	r4, [sp, #0]
100575f6:	f7fe f801 	bl	100555fc <GAT_att_srv_resp>
100575fa:	bd1c      	pop	{r2, r3, r4, pc}

100575fc <GAT_srv_get_service_handle>:
100575fc:	b580      	push	{r7, lr}
100575fe:	4603      	mov	r3, r0
10057600:	2001      	movs	r0, #1
10057602:	4902      	ldr	r1, [pc, #8]	@ (1005760c <__arm_cp.14_0>)
10057604:	2200      	movs	r2, #0
10057606:	f7ff fcb9 	bl	10056f7c <GAT_srv_get_attribute_handle>
1005760a:	bd80      	pop	{r7, pc}

1005760c <__arm_cp.14_0>:
1005760c:	0000ffff 	.word	0x0000ffff

10057610 <GAT_srv_get_char_decl_handle>:
10057610:	b580      	push	{r7, lr}
10057612:	4603      	mov	r3, r0
10057614:	2001      	movs	r0, #1
10057616:	4902      	ldr	r1, [pc, #8]	@ (10057620 <__arm_cp.16_0>)
10057618:	2202      	movs	r2, #2
1005761a:	f7ff fcaf 	bl	10056f7c <GAT_srv_get_attribute_handle>
1005761e:	bd80      	pop	{r7, pc}

10057620 <__arm_cp.16_0>:
10057620:	0000ffff 	.word	0x0000ffff

10057624 <hci_rx_acl_data>:
10057624:	b5f0      	push	{r4, r5, r6, r7, lr}
10057626:	b085      	sub	sp, #20
10057628:	4604      	mov	r4, r0
1005762a:	7887      	ldrb	r7, [r0, #2]
1005762c:	1e78      	subs	r0, r7, #1
1005762e:	2103      	movs	r1, #3
10057630:	9104      	str	r1, [sp, #16]
10057632:	4308      	orrs	r0, r1
10057634:	3009      	adds	r0, #9
10057636:	0880      	lsrs	r0, r0, #2
10057638:	b283      	uxth	r3, r0
1005763a:	7a20      	ldrb	r0, [r4, #8]
1005763c:	9003      	str	r0, [sp, #12]
1005763e:	8820      	ldrh	r0, [r4, #0]
10057640:	9002      	str	r0, [sp, #8]
10057642:	4811      	ldr	r0, [pc, #68]	@ (10057688 <__arm_cp.2_0>)
10057644:	6800      	ldr	r0, [r0, #0]
10057646:	6980      	ldr	r0, [r0, #24]
10057648:	2502      	movs	r5, #2
1005764a:	223e      	movs	r2, #62	@ 0x3e
1005764c:	4629      	mov	r1, r5
1005764e:	f7fb ff0b 	bl	10053468 <aci_event_fifo_push_header>
10057652:	2800      	cmp	r0, #0
10057654:	d014      	beq.n	10057680 <hci_rx_acl_data+0x5c>
10057656:	4606      	mov	r6, r0
10057658:	9700      	str	r7, [sp, #0]
1005765a:	9401      	str	r4, [sp, #4]
1005765c:	9804      	ldr	r0, [sp, #16]
1005765e:	9a03      	ldr	r2, [sp, #12]
10057660:	4002      	ands	r2, r0
10057662:	1d30      	adds	r0, r6, #4
10057664:	2700      	movs	r7, #0
10057666:	9902      	ldr	r1, [sp, #8]
10057668:	463b      	mov	r3, r7
1005766a:	f7fc fc64 	bl	10053f36 <hci_rx_acl_data_event_copy>
1005766e:	7135      	strb	r5, [r6, #4]
10057670:	4628      	mov	r0, r5
10057672:	4631      	mov	r1, r6
10057674:	f7fb ff95 	bl	100535a2 <aci_event_fifo_push>
10057678:	4620      	mov	r0, r4
1005767a:	f7fb fd1f 	bl	100530bc <ACL_pkt_release>
1005767e:	e000      	b.n	10057682 <hci_rx_acl_data+0x5e>
10057680:	2707      	movs	r7, #7
10057682:	4638      	mov	r0, r7
10057684:	b005      	add	sp, #20
10057686:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057688 <__arm_cp.2_0>:
10057688:	20001124 	.word	0x20001124

1005768c <hci_tx_acl_data_done>:
1005768c:	b5b0      	push	{r4, r5, r7, lr}
1005768e:	4604      	mov	r4, r0
10057690:	8801      	ldrh	r1, [r0, #0]
10057692:	2002      	movs	r0, #2
10057694:	f00c f894 	bl	100637c0 <hci_number_of_completed_packets_event_push_noinline>
10057698:	4605      	mov	r5, r0
1005769a:	2800      	cmp	r0, #0
1005769c:	d102      	bne.n	100576a4 <hci_tx_acl_data_done+0x18>
1005769e:	4620      	mov	r0, r4
100576a0:	f7fb fd0c 	bl	100530bc <ACL_pkt_release>
100576a4:	4628      	mov	r0, r5
100576a6:	bdb0      	pop	{r4, r5, r7, pc}

100576a8 <hci_le_set_advertising_parameters>:
100576a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100576aa:	b089      	sub	sp, #36	@ 0x24
100576ac:	461d      	mov	r5, r3
100576ae:	4616      	mov	r6, r2
100576b0:	460f      	mov	r7, r1
100576b2:	9004      	str	r0, [sp, #16]
100576b4:	2002      	movs	r0, #2
100576b6:	2401      	movs	r4, #1
100576b8:	4621      	mov	r1, r4
100576ba:	f000 f8c3 	bl	10057844 <hci_get_set_legacy_ext_flag>
100576be:	2800      	cmp	r0, #0
100576c0:	d150      	bne.n	10057764 <hci_le_set_advertising_parameters+0xbc>
100576c2:	9703      	str	r7, [sp, #12]
100576c4:	2012      	movs	r0, #18
100576c6:	2e04      	cmp	r6, #4
100576c8:	d84c      	bhi.n	10057764 <hci_le_set_advertising_parameters+0xbc>
100576ca:	9002      	str	r0, [sp, #8]
100576cc:	f7fa fabf 	bl	10051c4e <conn_supp_csr_ucfg>
100576d0:	2e01      	cmp	r6, #1
100576d2:	d803      	bhi.n	100576dc <hci_le_set_advertising_parameters+0x34>
100576d4:	2800      	cmp	r0, #0
100576d6:	d101      	bne.n	100576dc <hci_le_set_advertising_parameters+0x34>
100576d8:	2011      	movs	r0, #17
100576da:	e043      	b.n	10057764 <hci_le_set_advertising_parameters+0xbc>
100576dc:	9811      	ldr	r0, [sp, #68]	@ 0x44
100576de:	9000      	str	r0, [sp, #0]
100576e0:	9810      	ldr	r0, [sp, #64]	@ 0x40
100576e2:	9001      	str	r0, [sp, #4]
100576e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
100576e6:	980e      	ldr	r0, [sp, #56]	@ 0x38
100576e8:	af05      	add	r7, sp, #20
100576ea:	7238      	strb	r0, [r7, #8]
100576ec:	71fd      	strb	r5, [r7, #7]
100576ee:	713e      	strb	r6, [r7, #4]
100576f0:	9803      	ldr	r0, [sp, #12]
100576f2:	8078      	strh	r0, [r7, #2]
100576f4:	9804      	ldr	r0, [sp, #16]
100576f6:	8038      	strh	r0, [r7, #0]
100576f8:	4638      	mov	r0, r7
100576fa:	3009      	adds	r0, #9
100576fc:	2206      	movs	r2, #6
100576fe:	f7ee fbbb 	bl	10045e78 <BLEPLAT_MemCpy>
10057702:	9900      	ldr	r1, [sp, #0]
10057704:	71b9      	strb	r1, [r7, #6]
10057706:	9801      	ldr	r0, [sp, #4]
10057708:	7178      	strb	r0, [r7, #5]
1005770a:	7938      	ldrb	r0, [r7, #4]
1005770c:	2804      	cmp	r0, #4
1005770e:	d001      	beq.n	10057714 <hci_le_set_advertising_parameters+0x6c>
10057710:	2801      	cmp	r0, #1
10057712:	d104      	bne.n	1005771e <hci_le_set_advertising_parameters+0x76>
10057714:	a905      	add	r1, sp, #20
10057716:	7a09      	ldrb	r1, [r1, #8]
10057718:	2902      	cmp	r1, #2
1005771a:	d302      	bcc.n	10057722 <hci_le_set_advertising_parameters+0x7a>
1005771c:	e021      	b.n	10057762 <hci_le_set_advertising_parameters+0xba>
1005771e:	2903      	cmp	r1, #3
10057720:	d81f      	bhi.n	10057762 <hci_le_set_advertising_parameters+0xba>
10057722:	2801      	cmp	r0, #1
10057724:	d10e      	bne.n	10057744 <hci_le_set_advertising_parameters+0x9c>
10057726:	f000 fa37 	bl	10057b98 <hci_le_check_own_address_type_max_value_ucfg_weak>
1005772a:	a905      	add	r1, sp, #20
1005772c:	79c9      	ldrb	r1, [r1, #7]
1005772e:	4281      	cmp	r1, r0
10057730:	d817      	bhi.n	10057762 <hci_le_set_advertising_parameters+0xba>
10057732:	a805      	add	r0, sp, #20
10057734:	7940      	ldrb	r0, [r0, #5]
10057736:	0740      	lsls	r0, r0, #29
10057738:	9802      	ldr	r0, [sp, #8]
1005773a:	d013      	beq.n	10057764 <hci_le_set_advertising_parameters+0xbc>
1005773c:	a805      	add	r0, sp, #20
1005773e:	f005 fd73 	bl	1005d228 <LL_LE_Set_Advertising_Parameters>
10057742:	e00f      	b.n	10057764 <hci_le_set_advertising_parameters+0xbc>
10057744:	a805      	add	r0, sp, #20
10057746:	8800      	ldrh	r0, [r0, #0]
10057748:	2820      	cmp	r0, #32
1005774a:	d30a      	bcc.n	10057762 <hci_le_set_advertising_parameters+0xba>
1005774c:	03a1      	lsls	r1, r4, #14
1005774e:	4288      	cmp	r0, r1
10057750:	d807      	bhi.n	10057762 <hci_le_set_advertising_parameters+0xba>
10057752:	aa05      	add	r2, sp, #20
10057754:	8852      	ldrh	r2, [r2, #2]
10057756:	2a20      	cmp	r2, #32
10057758:	d303      	bcc.n	10057762 <hci_le_set_advertising_parameters+0xba>
1005775a:	428a      	cmp	r2, r1
1005775c:	d801      	bhi.n	10057762 <hci_le_set_advertising_parameters+0xba>
1005775e:	4290      	cmp	r0, r2
10057760:	d9e1      	bls.n	10057726 <hci_le_set_advertising_parameters+0x7e>
10057762:	9802      	ldr	r0, [sp, #8]
10057764:	b009      	add	sp, #36	@ 0x24
10057766:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057768 <hci_le_set_advertising_enable>:
10057768:	b510      	push	{r4, lr}
1005776a:	4604      	mov	r4, r0
1005776c:	2002      	movs	r0, #2
1005776e:	2101      	movs	r1, #1
10057770:	f000 f868 	bl	10057844 <hci_get_set_legacy_ext_flag>
10057774:	2800      	cmp	r0, #0
10057776:	d000      	beq.n	1005777a <hci_le_set_advertising_enable+0x12>
10057778:	bd10      	pop	{r4, pc}
1005777a:	2c01      	cmp	r4, #1
1005777c:	d803      	bhi.n	10057786 <hci_le_set_advertising_enable+0x1e>
1005777e:	4620      	mov	r0, r4
10057780:	f005 fdd6 	bl	1005d330 <LL_LE_Set_Advertise_Enable>
10057784:	bd10      	pop	{r4, pc}
10057786:	2012      	movs	r0, #18
10057788:	bd10      	pop	{r4, pc}
	...

1005778c <HCI_Init>:
1005778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005778e:	4917      	ldr	r1, [pc, #92]	@ (100577ec <__arm_cp.0_0>)
10057790:	6808      	ldr	r0, [r1, #0]
10057792:	460d      	mov	r5, r1
10057794:	2124      	movs	r1, #36	@ 0x24
10057796:	2400      	movs	r4, #0
10057798:	5444      	strb	r4, [r0, r1]
1005779a:	3025      	adds	r0, #37	@ 0x25
1005779c:	2211      	movs	r2, #17
1005779e:	4f14      	ldr	r7, [pc, #80]	@ (100577f0 <__arm_cp.0_1>)
100577a0:	4621      	mov	r1, r4
100577a2:	47b8      	blx	r7
100577a4:	6828      	ldr	r0, [r5, #0]
100577a6:	3036      	adds	r0, #54	@ 0x36
100577a8:	26ff      	movs	r6, #255	@ 0xff
100577aa:	2205      	movs	r2, #5
100577ac:	4631      	mov	r1, r6
100577ae:	47b8      	blx	r7
100577b0:	6829      	ldr	r1, [r5, #0]
100577b2:	203b      	movs	r0, #59	@ 0x3b
100577b4:	231f      	movs	r3, #31
100577b6:	540b      	strb	r3, [r1, r0]
100577b8:	2201      	movs	r2, #1
100577ba:	0355      	lsls	r5, r2, #13
100577bc:	4608      	mov	r0, r1
100577be:	303b      	adds	r0, #59	@ 0x3b
100577c0:	5285      	strh	r5, [r0, r2]
100577c2:	72c3      	strb	r3, [r0, #11]
100577c4:	3147      	adds	r1, #71	@ 0x47
100577c6:	2207      	movs	r2, #7
100577c8:	4608      	mov	r0, r1
100577ca:	4621      	mov	r1, r4
100577cc:	47b8      	blx	r7
100577ce:	4d07      	ldr	r5, [pc, #28]	@ (100577ec <__arm_cp.0_0>)
100577d0:	6828      	ldr	r0, [r5, #0]
100577d2:	304e      	adds	r0, #78	@ 0x4e
100577d4:	2208      	movs	r2, #8
100577d6:	4631      	mov	r1, r6
100577d8:	47b8      	blx	r7
100577da:	4806      	ldr	r0, [pc, #24]	@ (100577f4 <__arm_cp.0_2>)
100577dc:	6800      	ldr	r0, [r0, #0]
100577de:	2135      	movs	r1, #53	@ 0x35
100577e0:	5444      	strb	r4, [r0, r1]
100577e2:	6828      	ldr	r0, [r5, #0]
100577e4:	4904      	ldr	r1, [pc, #16]	@ (100577f8 <__arm_cp.0_3>)
100577e6:	6201      	str	r1, [r0, #32]
100577e8:	65c4      	str	r4, [r0, #92]	@ 0x5c
100577ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100577ec <__arm_cp.0_0>:
100577ec:	20001174 	.word	0x20001174

100577f0 <__arm_cp.0_1>:
100577f0:	10045e99 	.word	0x10045e99

100577f4 <__arm_cp.0_2>:
100577f4:	20001120 	.word	0x20001120

100577f8 <__arm_cp.0_3>:
100577f8:	fffffdbe 	.word	0xfffffdbe

100577fc <hci_le_set_random_address>:
100577fc:	b580      	push	{r7, lr}
100577fe:	f005 ffa7 	bl	1005d750 <LL_Set_Advertising_Set_Random_Address>
10057802:	bd80      	pop	{r7, pc}

10057804 <hci_set_event_mask>:
10057804:	b510      	push	{r4, lr}
10057806:	2136      	movs	r1, #54	@ 0x36
10057808:	4a05      	ldr	r2, [pc, #20]	@ (10057820 <__arm_cp.12_0>)
1005780a:	293e      	cmp	r1, #62	@ 0x3e
1005780c:	d006      	beq.n	1005781c <hci_set_event_mask+0x18>
1005780e:	1843      	adds	r3, r0, r1
10057810:	3b36      	subs	r3, #54	@ 0x36
10057812:	781b      	ldrb	r3, [r3, #0]
10057814:	6814      	ldr	r4, [r2, #0]
10057816:	5463      	strb	r3, [r4, r1]
10057818:	1c49      	adds	r1, r1, #1
1005781a:	e7f6      	b.n	1005780a <hci_set_event_mask+0x6>
1005781c:	2000      	movs	r0, #0
1005781e:	bd10      	pop	{r4, pc}

10057820 <__arm_cp.12_0>:
10057820:	20001174 	.word	0x20001174

10057824 <hci_le_set_event_mask>:
10057824:	b510      	push	{r4, lr}
10057826:	2146      	movs	r1, #70	@ 0x46
10057828:	4a05      	ldr	r2, [pc, #20]	@ (10057840 <__arm_cp.14_0>)
1005782a:	294e      	cmp	r1, #78	@ 0x4e
1005782c:	d006      	beq.n	1005783c <hci_le_set_event_mask+0x18>
1005782e:	1843      	adds	r3, r0, r1
10057830:	3b46      	subs	r3, #70	@ 0x46
10057832:	781b      	ldrb	r3, [r3, #0]
10057834:	6814      	ldr	r4, [r2, #0]
10057836:	5463      	strb	r3, [r4, r1]
10057838:	1c49      	adds	r1, r1, #1
1005783a:	e7f6      	b.n	1005782a <hci_le_set_event_mask+0x6>
1005783c:	2000      	movs	r0, #0
1005783e:	bd10      	pop	{r4, pc}

10057840 <__arm_cp.14_0>:
10057840:	20001174 	.word	0x20001174

10057844 <hci_get_set_legacy_ext_flag>:
10057844:	4a05      	ldr	r2, [pc, #20]	@ (1005785c <__arm_cp.16_0>)
10057846:	6812      	ldr	r2, [r2, #0]
10057848:	2335      	movs	r3, #53	@ 0x35
1005784a:	5cd3      	ldrb	r3, [r2, r3]
1005784c:	4203      	tst	r3, r0
1005784e:	d001      	beq.n	10057854 <hci_get_set_legacy_ext_flag+0x10>
10057850:	200c      	movs	r0, #12
10057852:	4770      	bx	lr
10057854:	3235      	adds	r2, #53	@ 0x35
10057856:	7011      	strb	r1, [r2, #0]
10057858:	2000      	movs	r0, #0
1005785a:	4770      	bx	lr

1005785c <__arm_cp.16_0>:
1005785c:	20001120 	.word	0x20001120

10057860 <hci_check_legacy_ext_flag>:
10057860:	4903      	ldr	r1, [pc, #12]	@ (10057870 <__arm_cp.23_0>)
10057862:	6809      	ldr	r1, [r1, #0]
10057864:	2235      	movs	r2, #53	@ 0x35
10057866:	5c89      	ldrb	r1, [r1, r2]
10057868:	4008      	ands	r0, r1
1005786a:	1e41      	subs	r1, r0, #1
1005786c:	4188      	sbcs	r0, r1
1005786e:	4770      	bx	lr

10057870 <__arm_cp.23_0>:
10057870:	20001120 	.word	0x20001120

10057874 <LLC_offline_control_procedures_processing>:
10057874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057876:	2400      	movs	r4, #0
10057878:	4620      	mov	r0, r4
1005787a:	f000 fe7f 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005787e:	4605      	mov	r5, r0
10057880:	2201      	movs	r2, #1
10057882:	4b2f      	ldr	r3, [pc, #188]	@ (10057940 <__arm_cp.25_0>)
10057884:	4627      	mov	r7, r4
10057886:	9200      	str	r2, [sp, #0]
10057888:	6818      	ldr	r0, [r3, #0]
1005788a:	2134      	movs	r1, #52	@ 0x34
1005788c:	5c40      	ldrb	r0, [r0, r1]
1005788e:	4284      	cmp	r4, r0
10057890:	d24f      	bcs.n	10057932 <LLC_offline_control_procedures_processing+0xbe>
10057892:	202c      	movs	r0, #44	@ 0x2c
10057894:	5c28      	ldrb	r0, [r5, r0]
10057896:	21fe      	movs	r1, #254	@ 0xfe
10057898:	4001      	ands	r1, r0
1005789a:	2902      	cmp	r1, #2
1005789c:	d13d      	bne.n	1005791a <LLC_offline_control_procedures_processing+0xa6>
1005789e:	2019      	movs	r0, #25
100578a0:	0106      	lsls	r6, r0, #4
100578a2:	5ba8      	ldrh	r0, [r5, r6]
100578a4:	0680      	lsls	r0, r0, #26
100578a6:	d50c      	bpl.n	100578c2 <LLC_offline_control_procedures_processing+0x4e>
100578a8:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
100578aa:	2000      	movs	r0, #0
100578ac:	f004 fb04 	bl	1005beb8 <LL_Read_Remote_Used_Features>
100578b0:	283a      	cmp	r0, #58	@ 0x3a
100578b2:	9a00      	ldr	r2, [sp, #0]
100578b4:	4610      	mov	r0, r2
100578b6:	d02e      	beq.n	10057916 <LLC_offline_control_procedures_processing+0xa2>
100578b8:	19a8      	adds	r0, r5, r6
100578ba:	8801      	ldrh	r1, [r0, #0]
100578bc:	2220      	movs	r2, #32
100578be:	4391      	bics	r1, r2
100578c0:	8001      	strh	r1, [r0, #0]
100578c2:	4628      	mov	r0, r5
100578c4:	f003 faad 	bl	1005ae22 <llc_subrate_offline_processing_ucfg_weak>
100578c8:	2800      	cmp	r0, #0
100578ca:	9a00      	ldr	r2, [sp, #0]
100578cc:	4610      	mov	r0, r2
100578ce:	d122      	bne.n	10057916 <LLC_offline_control_procedures_processing+0xa2>
100578d0:	4628      	mov	r0, r5
100578d2:	f006 fcab 	bl	1005e22c <Data_Len_Update_Offline_Processing_ucfg_weak>
100578d6:	9a00      	ldr	r2, [sp, #0]
100578d8:	2800      	cmp	r0, #0
100578da:	4610      	mov	r0, r2
100578dc:	d11b      	bne.n	10057916 <LLC_offline_control_procedures_processing+0xa2>
100578de:	b2e6      	uxtb	r6, r4
100578e0:	4630      	mov	r0, r6
100578e2:	f003 fb6c 	bl	1005afbe <LLC_channel_map_update_offline_processing_ucfg_weak>
100578e6:	9a00      	ldr	r2, [sp, #0]
100578e8:	2800      	cmp	r0, #0
100578ea:	4610      	mov	r0, r2
100578ec:	d113      	bne.n	10057916 <LLC_offline_control_procedures_processing+0xa2>
100578ee:	4630      	mov	r0, r6
100578f0:	f003 fb69 	bl	1005afc6 <LLC_chc_reporting_offline_processing_ucfg_weak>
100578f4:	9a00      	ldr	r2, [sp, #0]
100578f6:	2800      	cmp	r0, #0
100578f8:	4610      	mov	r0, r2
100578fa:	d10c      	bne.n	10057916 <LLC_offline_control_procedures_processing+0xa2>
100578fc:	4628      	mov	r0, r5
100578fe:	f003 fdc8 	bl	1005b492 <LLC_cte_request_procedure_ucfg_weak>
10057902:	9a00      	ldr	r2, [sp, #0]
10057904:	2800      	cmp	r0, #0
10057906:	4610      	mov	r0, r2
10057908:	d105      	bne.n	10057916 <LLC_offline_control_procedures_processing+0xa2>
1005790a:	4630      	mov	r0, r6
1005790c:	f004 fcdb 	bl	1005c2c6 <LLC_pcl_offline_processing_ucfg_weak>
10057910:	9a00      	ldr	r2, [sp, #0]
10057912:	1e41      	subs	r1, r0, #1
10057914:	4188      	sbcs	r0, r1
10057916:	4b0a      	ldr	r3, [pc, #40]	@ (10057940 <__arm_cp.25_0>)
10057918:	e000      	b.n	1005791c <LLC_offline_control_procedures_processing+0xa8>
1005791a:	2000      	movs	r0, #0
1005791c:	1e41      	subs	r1, r0, #1
1005791e:	4188      	sbcs	r0, r1
10057920:	0639      	lsls	r1, r7, #24
10057922:	4617      	mov	r7, r2
10057924:	d100      	bne.n	10057928 <LLC_offline_control_procedures_processing+0xb4>
10057926:	4607      	mov	r7, r0
10057928:	2033      	movs	r0, #51	@ 0x33
1005792a:	00c0      	lsls	r0, r0, #3
1005792c:	182d      	adds	r5, r5, r0
1005792e:	1c64      	adds	r4, r4, #1
10057930:	e7aa      	b.n	10057888 <LLC_offline_control_procedures_processing+0x14>
10057932:	0638      	lsls	r0, r7, #24
10057934:	d003      	beq.n	1005793e <LLC_offline_control_procedures_processing+0xca>
10057936:	2012      	movs	r0, #18
10057938:	2101      	movs	r1, #1
1005793a:	f00a fbc1 	bl	100620c0 <tsk_wait_resource_idx>
1005793e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10057940 <__arm_cp.25_0>:
10057940:	20001120 	.word	0x20001120

10057944 <cte_csr_ucfg_weak>:
10057944:	2000      	movs	r0, #0
10057946:	4770      	bx	lr

10057948 <hci_le_encrypt>:
10057948:	b5f0      	push	{r4, r5, r6, r7, lr}
1005794a:	b08f      	sub	sp, #60	@ 0x3c
1005794c:	9202      	str	r2, [sp, #8]
1005794e:	4607      	mov	r7, r0
10057950:	a807      	add	r0, sp, #28
10057952:	9001      	str	r0, [sp, #4]
10057954:	2510      	movs	r5, #16
10057956:	4e0c      	ldr	r6, [pc, #48]	@ (10057988 <__arm_cp.0_0>)
10057958:	462a      	mov	r2, r5
1005795a:	47b0      	blx	r6
1005795c:	ac0b      	add	r4, sp, #44	@ 0x2c
1005795e:	4620      	mov	r0, r4
10057960:	4639      	mov	r1, r7
10057962:	462a      	mov	r2, r5
10057964:	47b0      	blx	r6
10057966:	af03      	add	r7, sp, #12
10057968:	2600      	movs	r6, #0
1005796a:	9801      	ldr	r0, [sp, #4]
1005796c:	4621      	mov	r1, r4
1005796e:	463a      	mov	r2, r7
10057970:	4633      	mov	r3, r6
10057972:	f00a fec6 	bl	10062702 <BLEPLAT_aes128_encrypt>
10057976:	9802      	ldr	r0, [sp, #8]
10057978:	4639      	mov	r1, r7
1005797a:	462a      	mov	r2, r5
1005797c:	4b02      	ldr	r3, [pc, #8]	@ (10057988 <__arm_cp.0_0>)
1005797e:	4798      	blx	r3
10057980:	4630      	mov	r0, r6
10057982:	b00f      	add	sp, #60	@ 0x3c
10057984:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057986:	46c0      	nop			@ (mov r8, r8)

10057988 <__arm_cp.0_0>:
10057988:	10045e79 	.word	0x10045e79

1005798c <hci_le_long_term_key_request_reply_api>:
1005798c:	b5b0      	push	{r4, r5, r7, lr}
1005798e:	460c      	mov	r4, r1
10057990:	4605      	mov	r5, r0
10057992:	f001 f85f 	bl	10058a54 <llc_conn_get_conn_idx>
10057996:	28ff      	cmp	r0, #255	@ 0xff
10057998:	d005      	beq.n	100579a6 <hci_le_long_term_key_request_reply_api+0x1a>
1005799a:	2000      	movs	r0, #0
1005799c:	4629      	mov	r1, r5
1005799e:	4622      	mov	r2, r4
100579a0:	f004 f931 	bl	1005bc06 <LL_Get_LTK>
100579a4:	bdb0      	pop	{r4, r5, r7, pc}
100579a6:	2002      	movs	r0, #2
100579a8:	bdb0      	pop	{r4, r5, r7, pc}

100579aa <hci_le_long_term_key_request_negative_reply_api>:
100579aa:	b510      	push	{r4, lr}
100579ac:	4604      	mov	r4, r0
100579ae:	f001 f851 	bl	10058a54 <llc_conn_get_conn_idx>
100579b2:	28ff      	cmp	r0, #255	@ 0xff
100579b4:	d005      	beq.n	100579c2 <hci_le_long_term_key_request_negative_reply_api+0x18>
100579b6:	2081      	movs	r0, #129	@ 0x81
100579b8:	2200      	movs	r2, #0
100579ba:	4621      	mov	r1, r4
100579bc:	f004 f923 	bl	1005bc06 <LL_Get_LTK>
100579c0:	bd10      	pop	{r4, pc}
100579c2:	2002      	movs	r0, #2
100579c4:	bd10      	pop	{r4, pc}
	...

100579c8 <hci_le_read_local_p256_public_key_cb>:
100579c8:	b570      	push	{r4, r5, r6, lr}
100579ca:	b090      	sub	sp, #64	@ 0x40
100579cc:	4604      	mov	r4, r0
100579ce:	2800      	cmp	r0, #0
100579d0:	d10c      	bne.n	100579ec <hci_le_read_local_p256_public_key_cb+0x24>
100579d2:	460d      	mov	r5, r1
100579d4:	4820      	ldr	r0, [pc, #128]	@ (10057a58 <__arm_cp.4_0>)
100579d6:	6800      	ldr	r0, [r0, #0]
100579d8:	3068      	adds	r0, #104	@ 0x68
100579da:	2220      	movs	r2, #32
100579dc:	f7ee fa4c 	bl	10045e78 <BLEPLAT_MemCpy>
100579e0:	3520      	adds	r5, #32
100579e2:	4668      	mov	r0, sp
100579e4:	2240      	movs	r2, #64	@ 0x40
100579e6:	4629      	mov	r1, r5
100579e8:	f7ee fa46 	bl	10045e78 <BLEPLAT_MemCpy>
100579ec:	481b      	ldr	r0, [pc, #108]	@ (10057a5c <__arm_cp.4_1>)
100579ee:	6800      	ldr	r0, [r0, #0]
100579f0:	212c      	movs	r1, #44	@ 0x2c
100579f2:	5c40      	ldrb	r0, [r0, r1]
100579f4:	07c0      	lsls	r0, r0, #31
100579f6:	0ec5      	lsrs	r5, r0, #27
100579f8:	d11f      	bne.n	10057a3a <hci_le_read_local_p256_public_key_cb+0x72>
100579fa:	220b      	movs	r2, #11
100579fc:	2012      	movs	r0, #18
100579fe:	4045      	eors	r5, r0
10057a00:	4817      	ldr	r0, [pc, #92]	@ (10057a60 <__arm_cp.4_2>)
10057a02:	6800      	ldr	r0, [r0, #0]
10057a04:	6980      	ldr	r0, [r0, #24]
10057a06:	2312      	movs	r3, #18
10057a08:	4629      	mov	r1, r5
10057a0a:	f7fb fd2d 	bl	10053468 <aci_event_fifo_push_header>
10057a0e:	2800      	cmp	r0, #0
10057a10:	d01e      	beq.n	10057a50 <hci_le_read_local_p256_public_key_cb+0x88>
10057a12:	4606      	mov	r6, r0
10057a14:	7204      	strb	r4, [r0, #8]
10057a16:	3009      	adds	r0, #9
10057a18:	4669      	mov	r1, sp
10057a1a:	2240      	movs	r2, #64	@ 0x40
10057a1c:	f7ee fa2c 	bl	10045e78 <BLEPLAT_MemCpy>
10057a20:	2008      	movs	r0, #8
10057a22:	71f0      	strb	r0, [r6, #7]
10057a24:	2042      	movs	r0, #66	@ 0x42
10057a26:	71b0      	strb	r0, [r6, #6]
10057a28:	203e      	movs	r0, #62	@ 0x3e
10057a2a:	7170      	strb	r0, [r6, #5]
10057a2c:	2004      	movs	r0, #4
10057a2e:	7130      	strb	r0, [r6, #4]
10057a30:	4628      	mov	r0, r5
10057a32:	4631      	mov	r1, r6
10057a34:	f7fb fdb5 	bl	100535a2 <aci_event_fifo_push>
10057a38:	e00a      	b.n	10057a50 <hci_le_read_local_p256_public_key_cb+0x88>
10057a3a:	4807      	ldr	r0, [pc, #28]	@ (10057a58 <__arm_cp.4_0>)
10057a3c:	6800      	ldr	r0, [r0, #0]
10057a3e:	213d      	movs	r1, #61	@ 0x3d
10057a40:	5c41      	ldrb	r1, [r0, r1]
10057a42:	0689      	lsls	r1, r1, #26
10057a44:	d504      	bpl.n	10057a50 <hci_le_read_local_p256_public_key_cb+0x88>
10057a46:	303d      	adds	r0, #61	@ 0x3d
10057a48:	2109      	movs	r1, #9
10057a4a:	5640      	ldrsb	r0, [r0, r1]
10057a4c:	2800      	cmp	r0, #0
10057a4e:	d401      	bmi.n	10057a54 <hci_le_read_local_p256_public_key_cb+0x8c>
10057a50:	b010      	add	sp, #64	@ 0x40
10057a52:	bd70      	pop	{r4, r5, r6, pc}
10057a54:	221a      	movs	r2, #26
10057a56:	e7d1      	b.n	100579fc <hci_le_read_local_p256_public_key_cb+0x34>

10057a58 <__arm_cp.4_0>:
10057a58:	20001174 	.word	0x20001174

10057a5c <__arm_cp.4_1>:
10057a5c:	20001120 	.word	0x20001120

10057a60 <__arm_cp.4_2>:
10057a60:	20001124 	.word	0x20001124

10057a64 <hci_le_read_local_p256_public_key_api>:
10057a64:	b510      	push	{r4, lr}
10057a66:	b088      	sub	sp, #32
10057a68:	4668      	mov	r0, sp
10057a6a:	2120      	movs	r1, #32
10057a6c:	f00f ffc1 	bl	100679f2 <__aeabi_memclr>
10057a70:	2400      	movs	r4, #0
10057a72:	4668      	mov	r0, sp
10057a74:	2c20      	cmp	r4, #32
10057a76:	d004      	beq.n	10057a82 <hci_le_read_local_p256_public_key_api+0x1e>
10057a78:	1900      	adds	r0, r0, r4
10057a7a:	f7ee fab6 	bl	10045fea <BLEPLAT_RngGetRandom32>
10057a7e:	1d24      	adds	r4, r4, #4
10057a80:	e7f7      	b.n	10057a72 <hci_le_read_local_p256_public_key_api+0xe>
10057a82:	4905      	ldr	r1, [pc, #20]	@ (10057a98 <__arm_cp.5_0>)
10057a84:	f7ee fa45 	bl	10045f12 <BLEPLAT_PkaStartP256Key>
10057a88:	1c80      	adds	r0, r0, #2
10057a8a:	d001      	beq.n	10057a90 <hci_le_read_local_p256_public_key_api+0x2c>
10057a8c:	2000      	movs	r0, #0
10057a8e:	e000      	b.n	10057a92 <hci_le_read_local_p256_public_key_api+0x2e>
10057a90:	203a      	movs	r0, #58	@ 0x3a
10057a92:	b008      	add	sp, #32
10057a94:	bd10      	pop	{r4, pc}
10057a96:	46c0      	nop			@ (mov r8, r8)

10057a98 <__arm_cp.5_0>:
10057a98:	100579c9 	.word	0x100579c9

10057a9c <hci_le_generate_dhkey_cb>:
10057a9c:	b570      	push	{r4, r5, r6, lr}
10057a9e:	b088      	sub	sp, #32
10057aa0:	4604      	mov	r4, r0
10057aa2:	2800      	cmp	r0, #0
10057aa4:	d005      	beq.n	10057ab2 <hci_le_generate_dhkey_cb+0x16>
10057aa6:	4668      	mov	r0, sp
10057aa8:	21ff      	movs	r1, #255	@ 0xff
10057aaa:	2220      	movs	r2, #32
10057aac:	f7ee f9f4 	bl	10045e98 <BLEPLAT_MemSet>
10057ab0:	e004      	b.n	10057abc <hci_le_generate_dhkey_cb+0x20>
10057ab2:	3120      	adds	r1, #32
10057ab4:	4668      	mov	r0, sp
10057ab6:	2220      	movs	r2, #32
10057ab8:	f7ee f9de 	bl	10045e78 <BLEPLAT_MemCpy>
10057abc:	4819      	ldr	r0, [pc, #100]	@ (10057b24 <__arm_cp.6_0>)
10057abe:	6800      	ldr	r0, [r0, #0]
10057ac0:	212c      	movs	r1, #44	@ 0x2c
10057ac2:	5c40      	ldrb	r0, [r0, r1]
10057ac4:	07c0      	lsls	r0, r0, #31
10057ac6:	0ec5      	lsrs	r5, r0, #27
10057ac8:	d101      	bne.n	10057ace <hci_le_generate_dhkey_cb+0x32>
10057aca:	220c      	movs	r2, #12
10057acc:	e00a      	b.n	10057ae4 <hci_le_generate_dhkey_cb+0x48>
10057ace:	4816      	ldr	r0, [pc, #88]	@ (10057b28 <__arm_cp.6_1>)
10057ad0:	6800      	ldr	r0, [r0, #0]
10057ad2:	213d      	movs	r1, #61	@ 0x3d
10057ad4:	5c41      	ldrb	r1, [r0, r1]
10057ad6:	0689      	lsls	r1, r1, #26
10057ad8:	d522      	bpl.n	10057b20 <hci_le_generate_dhkey_cb+0x84>
10057ada:	303d      	adds	r0, #61	@ 0x3d
10057adc:	7a80      	ldrb	r0, [r0, #10]
10057ade:	07c0      	lsls	r0, r0, #31
10057ae0:	d01e      	beq.n	10057b20 <hci_le_generate_dhkey_cb+0x84>
10057ae2:	221b      	movs	r2, #27
10057ae4:	2012      	movs	r0, #18
10057ae6:	4045      	eors	r5, r0
10057ae8:	4810      	ldr	r0, [pc, #64]	@ (10057b2c <__arm_cp.6_2>)
10057aea:	6800      	ldr	r0, [r0, #0]
10057aec:	6980      	ldr	r0, [r0, #24]
10057aee:	230a      	movs	r3, #10
10057af0:	4629      	mov	r1, r5
10057af2:	f7fb fcb9 	bl	10053468 <aci_event_fifo_push_header>
10057af6:	2800      	cmp	r0, #0
10057af8:	d012      	beq.n	10057b20 <hci_le_generate_dhkey_cb+0x84>
10057afa:	4606      	mov	r6, r0
10057afc:	7204      	strb	r4, [r0, #8]
10057afe:	3009      	adds	r0, #9
10057b00:	4669      	mov	r1, sp
10057b02:	2220      	movs	r2, #32
10057b04:	f7ee f9b8 	bl	10045e78 <BLEPLAT_MemCpy>
10057b08:	2009      	movs	r0, #9
10057b0a:	71f0      	strb	r0, [r6, #7]
10057b0c:	2022      	movs	r0, #34	@ 0x22
10057b0e:	71b0      	strb	r0, [r6, #6]
10057b10:	203e      	movs	r0, #62	@ 0x3e
10057b12:	7170      	strb	r0, [r6, #5]
10057b14:	2004      	movs	r0, #4
10057b16:	7130      	strb	r0, [r6, #4]
10057b18:	4628      	mov	r0, r5
10057b1a:	4631      	mov	r1, r6
10057b1c:	f7fb fd41 	bl	100535a2 <aci_event_fifo_push>
10057b20:	b008      	add	sp, #32
10057b22:	bd70      	pop	{r4, r5, r6, pc}

10057b24 <__arm_cp.6_0>:
10057b24:	20001120 	.word	0x20001120

10057b28 <__arm_cp.6_1>:
10057b28:	20001174 	.word	0x20001174

10057b2c <__arm_cp.6_2>:
10057b2c:	20001124 	.word	0x20001124

10057b30 <hci_le_generate_dhkey_api>:
10057b30:	b5f0      	push	{r4, r5, r6, r7, lr}
10057b32:	b091      	sub	sp, #68	@ 0x44
10057b34:	4605      	mov	r5, r0
10057b36:	4f0f      	ldr	r7, [pc, #60]	@ (10057b74 <__arm_cp.7_0>)
10057b38:	683a      	ldr	r2, [r7, #0]
10057b3a:	3268      	adds	r2, #104	@ 0x68
10057b3c:	2400      	movs	r4, #0
10057b3e:	2120      	movs	r1, #32
10057b40:	4620      	mov	r0, r4
10057b42:	f00a fc21 	bl	10062388 <is_Buffer_All_Set_To>
10057b46:	2800      	cmp	r0, #0
10057b48:	d001      	beq.n	10057b4e <hci_le_generate_dhkey_api+0x1e>
10057b4a:	241f      	movs	r4, #31
10057b4c:	e00e      	b.n	10057b6c <hci_le_generate_dhkey_api+0x3c>
10057b4e:	ae01      	add	r6, sp, #4
10057b50:	2240      	movs	r2, #64	@ 0x40
10057b52:	4630      	mov	r0, r6
10057b54:	4629      	mov	r1, r5
10057b56:	f7ee f98f 	bl	10045e78 <BLEPLAT_MemCpy>
10057b5a:	6838      	ldr	r0, [r7, #0]
10057b5c:	3068      	adds	r0, #104	@ 0x68
10057b5e:	4a06      	ldr	r2, [pc, #24]	@ (10057b78 <__arm_cp.7_1>)
10057b60:	4631      	mov	r1, r6
10057b62:	f7ee f9e6 	bl	10045f32 <BLEPLAT_PkaStartDHkey>
10057b66:	1cc0      	adds	r0, r0, #3
10057b68:	d100      	bne.n	10057b6c <hci_le_generate_dhkey_api+0x3c>
10057b6a:	2412      	movs	r4, #18
10057b6c:	4620      	mov	r0, r4
10057b6e:	b011      	add	sp, #68	@ 0x44
10057b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057b72:	46c0      	nop			@ (mov r8, r8)

10057b74 <__arm_cp.7_0>:
10057b74:	20001174 	.word	0x20001174

10057b78 <__arm_cp.7_1>:
10057b78:	10057a9d 	.word	0x10057a9d

10057b7c <hci_vs_force_local_p256_debug_key_api>:
10057b7c:	b580      	push	{r7, lr}
10057b7e:	4804      	ldr	r0, [pc, #16]	@ (10057b90 <__arm_cp.8_0>)
10057b80:	6800      	ldr	r0, [r0, #0]
10057b82:	3068      	adds	r0, #104	@ 0x68
10057b84:	4903      	ldr	r1, [pc, #12]	@ (10057b94 <__arm_cp.8_1>)
10057b86:	2220      	movs	r2, #32
10057b88:	f7ee f976 	bl	10045e78 <BLEPLAT_MemCpy>
10057b8c:	bd80      	pop	{r7, pc}
10057b8e:	46c0      	nop			@ (mov r8, r8)

10057b90 <__arm_cp.8_0>:
10057b90:	20001174 	.word	0x20001174

10057b94 <__arm_cp.8_1>:
10057b94:	1006d048 	.word	0x1006d048

10057b98 <hci_le_check_own_address_type_max_value_ucfg_weak>:
10057b98:	2001      	movs	r0, #1
10057b9a:	4770      	bx	lr

10057b9c <hci_le_clear_filter_accept_list>:
10057b9c:	b580      	push	{r7, lr}
10057b9e:	f003 f853 	bl	1005ac48 <llc_wl_clear_filter_accept_list>
10057ba2:	bd80      	pop	{r7, pc}

10057ba4 <hci_le_add_device_to_filter_accept_list>:
10057ba4:	b5e0      	push	{r5, r6, r7, lr}
10057ba6:	2802      	cmp	r0, #2
10057ba8:	d301      	bcc.n	10057bae <hci_le_add_device_to_filter_accept_list+0xa>
10057baa:	28ff      	cmp	r0, #255	@ 0xff
10057bac:	d10d      	bne.n	10057bca <hci_le_add_device_to_filter_accept_list+0x26>
10057bae:	2200      	movs	r2, #0
10057bb0:	9200      	str	r2, [sp, #0]
10057bb2:	466b      	mov	r3, sp
10057bb4:	7018      	strb	r0, [r3, #0]
10057bb6:	9201      	str	r2, [sp, #4]
10057bb8:	1c58      	adds	r0, r3, #1
10057bba:	2206      	movs	r2, #6
10057bbc:	f7ee f95c 	bl	10045e78 <BLEPLAT_MemCpy>
10057bc0:	9901      	ldr	r1, [sp, #4]
10057bc2:	9800      	ldr	r0, [sp, #0]
10057bc4:	f003 f85a 	bl	1005ac7c <llc_wl_add_device_to_filter_accept_list>
10057bc8:	bd8c      	pop	{r2, r3, r7, pc}
10057bca:	2012      	movs	r0, #18
10057bcc:	bd8c      	pop	{r2, r3, r7, pc}

10057bce <data_length_extension_csr_ucfg_weak>:
10057bce:	2000      	movs	r0, #0
10057bd0:	4770      	bx	lr

10057bd2 <pcl_csr_ucfg_weak>:
10057bd2:	2000      	movs	r0, #0
10057bd4:	4770      	bx	lr

10057bd6 <phy_upd_csr>:
10057bd6:	2001      	movs	r0, #1
10057bd8:	4770      	bx	lr

10057bda <scan_csr_ucfg_weak>:
10057bda:	2000      	movs	r0, #0
10057bdc:	4770      	bx	lr

10057bde <conn_supp_csr>:
10057bde:	2001      	movs	r0, #1
10057be0:	4770      	bx	lr

10057be2 <subrate_csr_ucfg_weak>:
10057be2:	2000      	movs	r0, #0
10057be4:	4770      	bx	lr
	...

10057be8 <L2C_build_connect_update_request>:
10057be8:	b5f0      	push	{r4, r5, r6, r7, lr}
10057bea:	b087      	sub	sp, #28
10057bec:	8901      	ldrh	r1, [r0, #8]
10057bee:	9104      	str	r1, [sp, #16]
10057bf0:	88c1      	ldrh	r1, [r0, #6]
10057bf2:	9105      	str	r1, [sp, #20]
10057bf4:	8884      	ldrh	r4, [r0, #4]
10057bf6:	8846      	ldrh	r6, [r0, #2]
10057bf8:	8807      	ldrh	r7, [r0, #0]
10057bfa:	2000      	movs	r0, #0
10057bfc:	9006      	str	r0, [sp, #24]
10057bfe:	a906      	add	r1, sp, #24
10057c00:	4638      	mov	r0, r7
10057c02:	f000 f89f 	bl	10057d44 <l2c_get_check_link_status_on_request_sending>
10057c06:	4605      	mov	r5, r0
10057c08:	2800      	cmp	r0, #0
10057c0a:	d15a      	bne.n	10057cc2 <L2C_build_connect_update_request+0xda>
10057c0c:	9603      	str	r6, [sp, #12]
10057c0e:	9402      	str	r4, [sp, #8]
10057c10:	9806      	ldr	r0, [sp, #24]
10057c12:	7880      	ldrb	r0, [r0, #2]
10057c14:	07c0      	lsls	r0, r0, #31
10057c16:	d151      	bne.n	10057cbc <L2C_build_connect_update_request+0xd4>
10057c18:	2400      	movs	r4, #0
10057c1a:	2210      	movs	r2, #16
10057c1c:	4620      	mov	r0, r4
10057c1e:	4639      	mov	r1, r7
10057c20:	f7fb fa2a 	bl	10053078 <ACL_pkt_get>
10057c24:	2800      	cmp	r0, #0
10057c26:	d04b      	beq.n	10057cc0 <L2C_build_connect_update_request+0xd8>
10057c28:	4607      	mov	r7, r0
10057c2a:	482a      	ldr	r0, [pc, #168]	@ (10057cd4 <__arm_cp.0_0>)
10057c2c:	9a03      	ldr	r2, [sp, #12]
10057c2e:	1f91      	subs	r1, r2, #6
10057c30:	b289      	uxth	r1, r1
10057c32:	2512      	movs	r5, #18
10057c34:	4281      	cmp	r1, r0
10057c36:	d23d      	bcs.n	10057cb4 <L2C_build_connect_update_request+0xcc>
10057c38:	9e02      	ldr	r6, [sp, #8]
10057c3a:	2e06      	cmp	r6, #6
10057c3c:	d33a      	bcc.n	10057cb4 <L2C_build_connect_update_request+0xcc>
10057c3e:	1d80      	adds	r0, r0, #6
10057c40:	4286      	cmp	r6, r0
10057c42:	d237      	bcs.n	10057cb4 <L2C_build_connect_update_request+0xcc>
10057c44:	42b2      	cmp	r2, r6
10057c46:	d835      	bhi.n	10057cb4 <L2C_build_connect_update_request+0xcc>
10057c48:	9a05      	ldr	r2, [sp, #20]
10057c4a:	0891      	lsrs	r1, r2, #2
10057c4c:	297c      	cmp	r1, #124	@ 0x7c
10057c4e:	d831      	bhi.n	10057cb4 <L2C_build_connect_update_request+0xcc>
10057c50:	1c51      	adds	r1, r2, #1
10057c52:	4371      	muls	r1, r6
10057c54:	9b04      	ldr	r3, [sp, #16]
10057c56:	009a      	lsls	r2, r3, #2
10057c58:	4291      	cmp	r1, r2
10057c5a:	d82b      	bhi.n	10057cb4 <L2C_build_connect_update_request+0xcc>
10057c5c:	2b0a      	cmp	r3, #10
10057c5e:	d329      	bcc.n	10057cb4 <L2C_build_connect_update_request+0xcc>
10057c60:	4283      	cmp	r3, r0
10057c62:	d227      	bcs.n	10057cb4 <L2C_build_connect_update_request+0xcc>
10057c64:	9401      	str	r4, [sp, #4]
10057c66:	6878      	ldr	r0, [r7, #4]
10057c68:	2112      	movs	r1, #18
10057c6a:	7201      	strb	r1, [r0, #8]
10057c6c:	6878      	ldr	r0, [r7, #4]
10057c6e:	9906      	ldr	r1, [sp, #24]
10057c70:	7909      	ldrb	r1, [r1, #4]
10057c72:	7241      	strb	r1, [r0, #9]
10057c74:	2106      	movs	r1, #6
10057c76:	2508      	movs	r5, #8
10057c78:	4c17      	ldr	r4, [pc, #92]	@ (10057cd8 <__arm_cp.0_1>)
10057c7a:	4638      	mov	r0, r7
10057c7c:	462a      	mov	r2, r5
10057c7e:	47a0      	blx	r4
10057c80:	4638      	mov	r0, r7
10057c82:	4629      	mov	r1, r5
10057c84:	9a03      	ldr	r2, [sp, #12]
10057c86:	47a0      	blx	r4
10057c88:	210a      	movs	r1, #10
10057c8a:	4638      	mov	r0, r7
10057c8c:	4632      	mov	r2, r6
10057c8e:	4625      	mov	r5, r4
10057c90:	47a0      	blx	r4
10057c92:	240c      	movs	r4, #12
10057c94:	4638      	mov	r0, r7
10057c96:	4621      	mov	r1, r4
10057c98:	9a05      	ldr	r2, [sp, #20]
10057c9a:	47a8      	blx	r5
10057c9c:	210e      	movs	r1, #14
10057c9e:	4638      	mov	r0, r7
10057ca0:	9a04      	ldr	r2, [sp, #16]
10057ca2:	47a8      	blx	r5
10057ca4:	807c      	strh	r4, [r7, #2]
10057ca6:	2005      	movs	r0, #5
10057ca8:	4639      	mov	r1, r7
10057caa:	f000 f9cf 	bl	1005804c <L2C_send_frame>
10057cae:	2800      	cmp	r0, #0
10057cb0:	d00a      	beq.n	10057cc8 <L2C_build_connect_update_request+0xe0>
10057cb2:	2581      	movs	r5, #129	@ 0x81
10057cb4:	4638      	mov	r0, r7
10057cb6:	f7fb fa01 	bl	100530bc <ACL_pkt_release>
10057cba:	e002      	b.n	10057cc2 <L2C_build_connect_update_request+0xda>
10057cbc:	250c      	movs	r5, #12
10057cbe:	e000      	b.n	10057cc2 <L2C_build_connect_update_request+0xda>
10057cc0:	2588      	movs	r5, #136	@ 0x88
10057cc2:	4628      	mov	r0, r5
10057cc4:	b007      	add	sp, #28
10057cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057cc8:	9906      	ldr	r1, [sp, #24]
10057cca:	2012      	movs	r0, #18
10057ccc:	f000 f84f 	bl	10057d6e <l2c_set_link_status_after_request_enqueued>
10057cd0:	9d01      	ldr	r5, [sp, #4]
10057cd2:	e7f6      	b.n	10057cc2 <L2C_build_connect_update_request+0xda>

10057cd4 <__arm_cp.0_0>:
10057cd4:	00000c7b 	.word	0x00000c7b

10057cd8 <__arm_cp.0_1>:
10057cd8:	10053127 	.word	0x10053127

10057cdc <l2c_get_link_control_block_ref>:
10057cdc:	b570      	push	{r4, r5, r6, lr}
10057cde:	490b      	ldr	r1, [pc, #44]	@ (10057d0c <__arm_cp.0_0>)
10057ce0:	7ac9      	ldrb	r1, [r1, #11]
10057ce2:	2214      	movs	r2, #20
10057ce4:	434a      	muls	r2, r1
10057ce6:	3214      	adds	r2, #20
10057ce8:	4909      	ldr	r1, [pc, #36]	@ (10057d10 <__arm_cp.0_1>)
10057cea:	680b      	ldr	r3, [r1, #0]
10057cec:	2100      	movs	r1, #0
10057cee:	460d      	mov	r5, r1
10057cf0:	460c      	mov	r4, r1
10057cf2:	3414      	adds	r4, #20
10057cf4:	42a2      	cmp	r2, r4
10057cf6:	d006      	beq.n	10057d06 <l2c_get_link_control_block_ref+0x2a>
10057cf8:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
10057cfa:	5b75      	ldrh	r5, [r6, r5]
10057cfc:	4285      	cmp	r5, r0
10057cfe:	4625      	mov	r5, r4
10057d00:	d1f7      	bne.n	10057cf2 <l2c_get_link_control_block_ref+0x16>
10057d02:	1931      	adds	r1, r6, r4
10057d04:	3914      	subs	r1, #20
10057d06:	4608      	mov	r0, r1
10057d08:	bd70      	pop	{r4, r5, r6, pc}
10057d0a:	46c0      	nop			@ (mov r8, r8)

10057d0c <__arm_cp.0_0>:
10057d0c:	20001188 	.word	0x20001188

10057d10 <__arm_cp.0_1>:
10057d10:	2000116c 	.word	0x2000116c

10057d14 <l2c_get_link_control_block_index>:
10057d14:	b5b0      	push	{r4, r5, r7, lr}
10057d16:	4909      	ldr	r1, [pc, #36]	@ (10057d3c <__arm_cp.1_0>)
10057d18:	7aca      	ldrb	r2, [r1, #11]
10057d1a:	4909      	ldr	r1, [pc, #36]	@ (10057d40 <__arm_cp.1_1>)
10057d1c:	680b      	ldr	r3, [r1, #0]
10057d1e:	2400      	movs	r4, #0
10057d20:	4621      	mov	r1, r4
10057d22:	428a      	cmp	r2, r1
10057d24:	d006      	beq.n	10057d34 <l2c_get_link_control_block_index+0x20>
10057d26:	6add      	ldr	r5, [r3, #44]	@ 0x2c
10057d28:	5b2d      	ldrh	r5, [r5, r4]
10057d2a:	4285      	cmp	r5, r0
10057d2c:	d003      	beq.n	10057d36 <l2c_get_link_control_block_index+0x22>
10057d2e:	3414      	adds	r4, #20
10057d30:	1c49      	adds	r1, r1, #1
10057d32:	e7f6      	b.n	10057d22 <l2c_get_link_control_block_index+0xe>
10057d34:	4611      	mov	r1, r2
10057d36:	b2c8      	uxtb	r0, r1
10057d38:	bdb0      	pop	{r4, r5, r7, pc}
10057d3a:	46c0      	nop			@ (mov r8, r8)

10057d3c <__arm_cp.1_0>:
10057d3c:	20001188 	.word	0x20001188

10057d40 <__arm_cp.1_1>:
10057d40:	2000116c 	.word	0x2000116c

10057d44 <l2c_get_check_link_status_on_request_sending>:
10057d44:	b5b0      	push	{r4, r5, r7, lr}
10057d46:	460c      	mov	r4, r1
10057d48:	4605      	mov	r5, r0
10057d4a:	f7ff ffc7 	bl	10057cdc <l2c_get_link_control_block_ref>
10057d4e:	4601      	mov	r1, r0
10057d50:	6020      	str	r0, [r4, #0]
10057d52:	2002      	movs	r0, #2
10057d54:	2d00      	cmp	r5, #0
10057d56:	d009      	beq.n	10057d6c <l2c_get_check_link_status_on_request_sending+0x28>
10057d58:	2900      	cmp	r1, #0
10057d5a:	d007      	beq.n	10057d6c <l2c_get_check_link_status_on_request_sending+0x28>
10057d5c:	7908      	ldrb	r0, [r1, #4]
10057d5e:	2800      	cmp	r0, #0
10057d60:	d003      	beq.n	10057d6a <l2c_get_check_link_status_on_request_sending+0x26>
10057d62:	7889      	ldrb	r1, [r1, #2]
10057d64:	2006      	movs	r0, #6
10057d66:	4008      	ands	r0, r1
10057d68:	d000      	beq.n	10057d6c <l2c_get_check_link_status_on_request_sending+0x28>
10057d6a:	200c      	movs	r0, #12
10057d6c:	bdb0      	pop	{r4, r5, r7, pc}

10057d6e <l2c_set_link_status_after_request_enqueued>:
10057d6e:	7188      	strb	r0, [r1, #6]
10057d70:	7908      	ldrb	r0, [r1, #4]
10057d72:	71c8      	strb	r0, [r1, #7]
10057d74:	7888      	ldrb	r0, [r1, #2]
10057d76:	2206      	movs	r2, #6
10057d78:	4302      	orrs	r2, r0
10057d7a:	708a      	strb	r2, [r1, #2]
10057d7c:	4770      	bx	lr

10057d7e <l2c_post_process_incoming_request_packet>:
10057d7e:	7190      	strb	r0, [r2, #6]
10057d80:	7151      	strb	r1, [r2, #5]
10057d82:	7890      	ldrb	r0, [r2, #2]
10057d84:	2104      	movs	r1, #4
10057d86:	4301      	orrs	r1, r0
10057d88:	7091      	strb	r1, [r2, #2]
10057d8a:	4770      	bx	lr

10057d8c <l2c_pre_process_incoming_response_packet>:
10057d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057d8e:	4604      	mov	r4, r0
10057d90:	2014      	movs	r0, #20
10057d92:	4360      	muls	r0, r4
10057d94:	4b14      	ldr	r3, [pc, #80]	@ (10057de8 <__arm_cp.7_0>)
10057d96:	681b      	ldr	r3, [r3, #0]
10057d98:	6add      	ldr	r5, [r3, #44]	@ 0x2c
10057d9a:	182d      	adds	r5, r5, r0
10057d9c:	78a8      	ldrb	r0, [r5, #2]
10057d9e:	0746      	lsls	r6, r0, #29
10057da0:	2081      	movs	r0, #129	@ 0x81
10057da2:	2e00      	cmp	r6, #0
10057da4:	d51f      	bpl.n	10057de6 <l2c_pre_process_incoming_response_packet+0x5a>
10057da6:	79ae      	ldrb	r6, [r5, #6]
10057da8:	1c76      	adds	r6, r6, #1
10057daa:	428e      	cmp	r6, r1
10057dac:	d001      	beq.n	10057db2 <l2c_pre_process_incoming_response_packet+0x26>
10057dae:	2901      	cmp	r1, #1
10057db0:	d119      	bne.n	10057de6 <l2c_pre_process_incoming_response_packet+0x5a>
10057db2:	79e9      	ldrb	r1, [r5, #7]
10057db4:	4291      	cmp	r1, r2
10057db6:	d116      	bne.n	10057de6 <l2c_pre_process_incoming_response_packet+0x5a>
10057db8:	1cae      	adds	r6, r5, #2
10057dba:	1daf      	adds	r7, r5, #6
10057dbc:	1de8      	adds	r0, r5, #7
10057dbe:	9000      	str	r0, [sp, #0]
10057dc0:	4618      	mov	r0, r3
10057dc2:	4621      	mov	r1, r4
10057dc4:	f00a f9dd 	bl	10062182 <CST_stop>
10057dc8:	2000      	movs	r0, #0
10057dca:	7038      	strb	r0, [r7, #0]
10057dcc:	9900      	ldr	r1, [sp, #0]
10057dce:	7008      	strb	r0, [r1, #0]
10057dd0:	7831      	ldrb	r1, [r6, #0]
10057dd2:	22fb      	movs	r2, #251	@ 0xfb
10057dd4:	400a      	ands	r2, r1
10057dd6:	7032      	strb	r2, [r6, #0]
10057dd8:	7929      	ldrb	r1, [r5, #4]
10057dda:	1c4a      	adds	r2, r1, #1
10057ddc:	b2d1      	uxtb	r1, r2
10057dde:	4291      	cmp	r1, r2
10057de0:	d000      	beq.n	10057de4 <l2c_pre_process_incoming_response_packet+0x58>
10057de2:	2101      	movs	r1, #1
10057de4:	7129      	strb	r1, [r5, #4]
10057de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10057de8 <__arm_cp.7_0>:
10057de8:	2000116c 	.word	0x2000116c

10057dec <l2c_release_unexpected_acl_packet>:
10057dec:	b580      	push	{r7, lr}
10057dee:	4608      	mov	r0, r1
10057df0:	f7fb f964 	bl	100530bc <ACL_pkt_release>
10057df4:	bd80      	pop	{r7, pc}

10057df6 <L2C_get_cid_from_basic_packet_header>:
10057df6:	b580      	push	{r7, lr}
10057df8:	2102      	movs	r1, #2
10057dfa:	f7fb f984 	bl	10053106 <ACL_pkt_read_16b>
10057dfe:	bd80      	pop	{r7, pc}

10057e00 <L2C_build_command_reject_pdu>:
10057e00:	b5f0      	push	{r4, r5, r6, r7, lr}
10057e02:	b085      	sub	sp, #20
10057e04:	461e      	mov	r6, r3
10057e06:	9204      	str	r2, [sp, #16]
10057e08:	460d      	mov	r5, r1
10057e0a:	4607      	mov	r7, r0
10057e0c:	f7ff ff66 	bl	10057cdc <l2c_get_link_control_block_ref>
10057e10:	2800      	cmp	r0, #0
10057e12:	d00f      	beq.n	10057e34 <L2C_build_command_reject_pdu+0x34>
10057e14:	4604      	mov	r4, r0
10057e16:	9603      	str	r6, [sp, #12]
10057e18:	7940      	ldrb	r0, [r0, #5]
10057e1a:	2612      	movs	r6, #18
10057e1c:	42a8      	cmp	r0, r5
10057e1e:	d10a      	bne.n	10057e36 <L2C_build_command_reject_pdu+0x36>
10057e20:	9904      	ldr	r1, [sp, #16]
10057e22:	2902      	cmp	r1, #2
10057e24:	d807      	bhi.n	10057e36 <L2C_build_command_reject_pdu+0x36>
10057e26:	78a0      	ldrb	r0, [r4, #2]
10057e28:	0780      	lsls	r0, r0, #30
10057e2a:	d407      	bmi.n	10057e3c <L2C_build_command_reject_pdu+0x3c>
10057e2c:	2901      	cmp	r1, #1
10057e2e:	d007      	beq.n	10057e40 <L2C_build_command_reject_pdu+0x40>
10057e30:	2004      	movs	r0, #4
10057e32:	e006      	b.n	10057e42 <L2C_build_command_reject_pdu+0x42>
10057e34:	2602      	movs	r6, #2
10057e36:	4630      	mov	r0, r6
10057e38:	b005      	add	sp, #20
10057e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057e3c:	260c      	movs	r6, #12
10057e3e:	e7fa      	b.n	10057e36 <L2C_build_command_reject_pdu+0x36>
10057e40:	2002      	movs	r0, #2
10057e42:	2900      	cmp	r1, #0
10057e44:	d100      	bne.n	10057e48 <L2C_build_command_reject_pdu+0x48>
10057e46:	4608      	mov	r0, r1
10057e48:	9002      	str	r0, [sp, #8]
10057e4a:	1d82      	adds	r2, r0, #6
10057e4c:	2600      	movs	r6, #0
10057e4e:	4630      	mov	r0, r6
10057e50:	4639      	mov	r1, r7
10057e52:	9201      	str	r2, [sp, #4]
10057e54:	f7fb f910 	bl	10053078 <ACL_pkt_get>
10057e58:	2800      	cmp	r0, #0
10057e5a:	d027      	beq.n	10057eac <L2C_build_command_reject_pdu+0xac>
10057e5c:	4607      	mov	r7, r0
10057e5e:	6840      	ldr	r0, [r0, #4]
10057e60:	2101      	movs	r1, #1
10057e62:	7201      	strb	r1, [r0, #8]
10057e64:	6878      	ldr	r0, [r7, #4]
10057e66:	7245      	strb	r5, [r0, #9]
10057e68:	9802      	ldr	r0, [sp, #8]
10057e6a:	1c80      	adds	r0, r0, #2
10057e6c:	b282      	uxth	r2, r0
10057e6e:	2106      	movs	r1, #6
10057e70:	4638      	mov	r0, r7
10057e72:	f7fb f958 	bl	10053126 <ACL_pkt_write_16b>
10057e76:	2108      	movs	r1, #8
10057e78:	4638      	mov	r0, r7
10057e7a:	9d04      	ldr	r5, [sp, #16]
10057e7c:	462a      	mov	r2, r5
10057e7e:	f7fb f952 	bl	10053126 <ACL_pkt_write_16b>
10057e82:	2d00      	cmp	r5, #0
10057e84:	d005      	beq.n	10057e92 <L2C_build_command_reject_pdu+0x92>
10057e86:	210a      	movs	r1, #10
10057e88:	4638      	mov	r0, r7
10057e8a:	9a02      	ldr	r2, [sp, #8]
10057e8c:	9b03      	ldr	r3, [sp, #12]
10057e8e:	f7fb f953 	bl	10053138 <ACL_pkt_write>
10057e92:	9801      	ldr	r0, [sp, #4]
10057e94:	8078      	strh	r0, [r7, #2]
10057e96:	2005      	movs	r0, #5
10057e98:	4639      	mov	r1, r7
10057e9a:	f000 f8d7 	bl	1005804c <L2C_send_frame>
10057e9e:	2800      	cmp	r0, #0
10057ea0:	d006      	beq.n	10057eb0 <L2C_build_command_reject_pdu+0xb0>
10057ea2:	4638      	mov	r0, r7
10057ea4:	f7fb f90a 	bl	100530bc <ACL_pkt_release>
10057ea8:	2681      	movs	r6, #129	@ 0x81
10057eaa:	e7c4      	b.n	10057e36 <L2C_build_command_reject_pdu+0x36>
10057eac:	2688      	movs	r6, #136	@ 0x88
10057eae:	e7c2      	b.n	10057e36 <L2C_build_command_reject_pdu+0x36>
10057eb0:	71a6      	strb	r6, [r4, #6]
10057eb2:	78a0      	ldrb	r0, [r4, #2]
10057eb4:	21fb      	movs	r1, #251	@ 0xfb
10057eb6:	4001      	ands	r1, r0
10057eb8:	70a1      	strb	r1, [r4, #2]
10057eba:	e7bc      	b.n	10057e36 <L2C_build_command_reject_pdu+0x36>

10057ebc <l2c_cos_channel_descriptor_reset>:
10057ebc:	b570      	push	{r4, r5, r6, lr}
10057ebe:	4604      	mov	r4, r0
10057ec0:	2022      	movs	r0, #34	@ 0x22
10057ec2:	4910      	ldr	r1, [pc, #64]	@ (10057f04 <__arm_cp.4_0>)
10057ec4:	5c08      	ldrb	r0, [r1, r0]
10057ec6:	42a0      	cmp	r0, r4
10057ec8:	d91b      	bls.n	10057f02 <l2c_cos_channel_descriptor_reset+0x46>
10057eca:	4d0f      	ldr	r5, [pc, #60]	@ (10057f08 <__arm_cp.4_1>)
10057ecc:	6829      	ldr	r1, [r5, #0]
10057ece:	2030      	movs	r0, #48	@ 0x30
10057ed0:	5c0a      	ldrb	r2, [r1, r0]
10057ed2:	1c52      	adds	r2, r2, #1
10057ed4:	540a      	strb	r2, [r1, r0]
10057ed6:	2234      	movs	r2, #52	@ 0x34
10057ed8:	4354      	muls	r4, r2
10057eda:	3130      	adds	r1, #48	@ 0x30
10057edc:	6848      	ldr	r0, [r1, #4]
10057ede:	1900      	adds	r0, r0, r4
10057ee0:	7883      	ldrb	r3, [r0, #2]
10057ee2:	071b      	lsls	r3, r3, #28
10057ee4:	d505      	bpl.n	10057ef2 <l2c_cos_channel_descriptor_reset+0x36>
10057ee6:	78c3      	ldrb	r3, [r0, #3]
10057ee8:	2b11      	cmp	r3, #17
10057eea:	d302      	bcc.n	10057ef2 <l2c_cos_channel_descriptor_reset+0x36>
10057eec:	784b      	ldrb	r3, [r1, #1]
10057eee:	1e5b      	subs	r3, r3, #1
10057ef0:	704b      	strb	r3, [r1, #1]
10057ef2:	8946      	ldrh	r6, [r0, #10]
10057ef4:	2100      	movs	r1, #0
10057ef6:	f7ed ffcf 	bl	10045e98 <BLEPLAT_MemSet>
10057efa:	6828      	ldr	r0, [r5, #0]
10057efc:	6b40      	ldr	r0, [r0, #52]	@ 0x34
10057efe:	1900      	adds	r0, r0, r4
10057f00:	8146      	strh	r6, [r0, #10]
10057f02:	bd70      	pop	{r4, r5, r6, pc}

10057f04 <__arm_cp.4_0>:
10057f04:	20001188 	.word	0x20001188

10057f08 <__arm_cp.4_1>:
10057f08:	2000116c 	.word	0x2000116c

10057f0c <L2C_cos_channel_descriptors_reset_pending>:
10057f0c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10057f0e:	460c      	mov	r4, r1
10057f10:	4605      	mov	r5, r0
10057f12:	2022      	movs	r0, #34	@ 0x22
10057f14:	4912      	ldr	r1, [pc, #72]	@ (10057f60 <__arm_cp.5_0>)
10057f16:	9002      	str	r0, [sp, #8]
10057f18:	5c08      	ldrb	r0, [r1, r0]
10057f1a:	2700      	movs	r7, #0
10057f1c:	2603      	movs	r6, #3
10057f1e:	4b11      	ldr	r3, [pc, #68]	@ (10057f64 <__arm_cp.5_1>)
10057f20:	9501      	str	r5, [sp, #4]
10057f22:	b2c1      	uxtb	r1, r0
10057f24:	428f      	cmp	r7, r1
10057f26:	d219      	bcs.n	10057f5c <L2C_cos_channel_descriptors_reset_pending+0x50>
10057f28:	6819      	ldr	r1, [r3, #0]
10057f2a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
10057f2c:	198a      	adds	r2, r1, r6
10057f2e:	1ed2      	subs	r2, r2, #3
10057f30:	8812      	ldrh	r2, [r2, #0]
10057f32:	42aa      	cmp	r2, r5
10057f34:	d10f      	bne.n	10057f56 <L2C_cos_channel_descriptors_reset_pending+0x4a>
10057f36:	2cff      	cmp	r4, #255	@ 0xff
10057f38:	d002      	beq.n	10057f40 <L2C_cos_channel_descriptors_reset_pending+0x34>
10057f3a:	5d89      	ldrb	r1, [r1, r6]
10057f3c:	42a1      	cmp	r1, r4
10057f3e:	d10a      	bne.n	10057f56 <L2C_cos_channel_descriptors_reset_pending+0x4a>
10057f40:	b2f8      	uxtb	r0, r7
10057f42:	4625      	mov	r5, r4
10057f44:	461c      	mov	r4, r3
10057f46:	f7ff ffb9 	bl	10057ebc <l2c_cos_channel_descriptor_reset>
10057f4a:	4623      	mov	r3, r4
10057f4c:	462c      	mov	r4, r5
10057f4e:	9d01      	ldr	r5, [sp, #4]
10057f50:	9802      	ldr	r0, [sp, #8]
10057f52:	4903      	ldr	r1, [pc, #12]	@ (10057f60 <__arm_cp.5_0>)
10057f54:	5c08      	ldrb	r0, [r1, r0]
10057f56:	3634      	adds	r6, #52	@ 0x34
10057f58:	1c7f      	adds	r7, r7, #1
10057f5a:	e7e2      	b.n	10057f22 <L2C_cos_channel_descriptors_reset_pending+0x16>
10057f5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10057f5e:	46c0      	nop			@ (mov r8, r8)

10057f60 <__arm_cp.5_0>:
10057f60:	20001188 	.word	0x20001188

10057f64 <__arm_cp.5_1>:
10057f64:	2000116c 	.word	0x2000116c

10057f68 <l2c_cos_csr_ucfg_weak>:
10057f68:	2000      	movs	r0, #0
10057f6a:	4770      	bx	lr

10057f6c <L2C_cos_cfc_init_ucfg_weak>:
10057f6c:	2000      	movs	r0, #0
10057f6e:	4770      	bx	lr

10057f70 <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
10057f70:	4770      	bx	lr

10057f72 <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>:
10057f72:	4770      	bx	lr

10057f74 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>:
10057f74:	2000      	movs	r0, #0
10057f76:	4770      	bx	lr

10057f78 <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
10057f78:	4770      	bx	lr

10057f7a <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
10057f7a:	4770      	bx	lr

10057f7c <l2cap_timers_callback_wrapper>:
10057f7c:	b580      	push	{r7, lr}
10057f7e:	6940      	ldr	r0, [r0, #20]
10057f80:	4901      	ldr	r1, [pc, #4]	@ (10057f88 <__arm_cp.0_0>)
10057f82:	f00a f9c2 	bl	1006230a <cst_sharedCallback>
10057f86:	bd80      	pop	{r7, pc}

10057f88 <__arm_cp.0_0>:
10057f88:	10057f8d 	.word	0x10057f8d

10057f8c <l2cap_timers_callback>:
10057f8c:	b580      	push	{r7, lr}
10057f8e:	4903      	ldr	r1, [pc, #12]	@ (10057f9c <__arm_cp.1_0>)
10057f90:	7ac9      	ldrb	r1, [r1, #11]
10057f92:	4281      	cmp	r1, r0
10057f94:	d301      	bcc.n	10057f9a <l2cap_timers_callback+0xe>
10057f96:	f000 fa77 	bl	10058488 <L2C_timeout_handler_signalling>
10057f9a:	bd80      	pop	{r7, pc}

10057f9c <__arm_cp.1_0>:
10057f9c:	20001188 	.word	0x20001188

10057fa0 <L2C_init>:
10057fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057fa2:	4605      	mov	r5, r0
10057fa4:	2001      	movs	r0, #1
10057fa6:	2168      	movs	r1, #104	@ 0x68
10057fa8:	f006 ffd0 	bl	1005ef4c <csmem_mem_0_assign>
10057fac:	4f23      	ldr	r7, [pc, #140]	@ (1005803c <__arm_cp.3_0>)
10057fae:	6038      	str	r0, [r7, #0]
10057fb0:	4e23      	ldr	r6, [pc, #140]	@ (10058040 <__arm_cp.3_1>)
10057fb2:	7af0      	ldrb	r0, [r6, #11]
10057fb4:	2414      	movs	r4, #20
10057fb6:	4621      	mov	r1, r4
10057fb8:	f006 ffc8 	bl	1005ef4c <csmem_mem_0_assign>
10057fbc:	4601      	mov	r1, r0
10057fbe:	6838      	ldr	r0, [r7, #0]
10057fc0:	62c1      	str	r1, [r0, #44]	@ 0x2c
10057fc2:	2d01      	cmp	r5, #1
10057fc4:	d110      	bne.n	10057fe8 <L2C_init+0x48>
10057fc6:	305c      	adds	r0, #92	@ 0x5c
10057fc8:	f00a fa5a 	bl	10062480 <ACL_list_init>
10057fcc:	2522      	movs	r5, #34	@ 0x22
10057fce:	5d70      	ldrb	r0, [r6, r5]
10057fd0:	2134      	movs	r1, #52	@ 0x34
10057fd2:	f006 ffbb 	bl	1005ef4c <csmem_mem_0_assign>
10057fd6:	6839      	ldr	r1, [r7, #0]
10057fd8:	6348      	str	r0, [r1, #52]	@ 0x34
10057fda:	5d70      	ldrb	r0, [r6, r5]
10057fdc:	0040      	lsls	r0, r0, #1
10057fde:	2110      	movs	r1, #16
10057fe0:	f006 ffb4 	bl	1005ef4c <csmem_mem_0_assign>
10057fe4:	6839      	ldr	r1, [r7, #0]
10057fe6:	6488      	str	r0, [r1, #72]	@ 0x48
10057fe8:	7af0      	ldrb	r0, [r6, #11]
10057fea:	1c41      	adds	r1, r0, #1
10057fec:	4d15      	ldr	r5, [pc, #84]	@ (10058044 <__arm_cp.3_2>)
10057fee:	2201      	movs	r2, #1
10057ff0:	4628      	mov	r0, r5
10057ff2:	f006 ff99 	bl	1005ef28 <csmem_mem_assign>
10057ff6:	6839      	ldr	r1, [r7, #0]
10057ff8:	6208      	str	r0, [r1, #32]
10057ffa:	7af1      	ldrb	r1, [r6, #11]
10057ffc:	2202      	movs	r2, #2
10057ffe:	4628      	mov	r0, r5
10058000:	f006 ff92 	bl	1005ef28 <csmem_mem_assign>
10058004:	683d      	ldr	r5, [r7, #0]
10058006:	6268      	str	r0, [r5, #36]	@ 0x24
10058008:	7af1      	ldrb	r1, [r6, #11]
1005800a:	4a0f      	ldr	r2, [pc, #60]	@ (10058048 <__arm_cp.3_3>)
1005800c:	2307      	movs	r3, #7
1005800e:	4628      	mov	r0, r5
10058010:	f00a f8a2 	bl	10062158 <CST_init>
10058014:	6838      	ldr	r0, [r7, #0]
10058016:	2117      	movs	r1, #23
10058018:	8501      	strh	r1, [r0, #40]	@ 0x28
1005801a:	8c31      	ldrh	r1, [r6, #32]
1005801c:	2917      	cmp	r1, #23
1005801e:	d201      	bcs.n	10058024 <L2C_init+0x84>
10058020:	2086      	movs	r0, #134	@ 0x86
10058022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10058024:	8541      	strh	r1, [r0, #42]	@ 0x2a
10058026:	7af1      	ldrb	r1, [r6, #11]
10058028:	434c      	muls	r4, r1
1005802a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005802c:	2100      	movs	r1, #0
1005802e:	4622      	mov	r2, r4
10058030:	f7ed ff32 	bl	10045e98 <BLEPLAT_MemSet>
10058034:	f7ff ff9a 	bl	10057f6c <L2C_cos_cfc_init_ucfg_weak>
10058038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005803a:	46c0      	nop			@ (mov r8, r8)

1005803c <__arm_cp.3_0>:
1005803c:	2000116c 	.word	0x2000116c

10058040 <__arm_cp.3_1>:
10058040:	20001188 	.word	0x20001188

10058044 <__arm_cp.3_2>:
10058044:	20001184 	.word	0x20001184

10058048 <__arm_cp.3_3>:
10058048:	10057f7d 	.word	0x10057f7d

1005804c <L2C_send_frame>:
1005804c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005804e:	460c      	mov	r4, r1
10058050:	1f01      	subs	r1, r0, #4
10058052:	4606      	mov	r6, r0
10058054:	2902      	cmp	r1, #2
10058056:	d821      	bhi.n	1005809c <L2C_send_frame+0x50>
10058058:	8862      	ldrh	r2, [r4, #2]
1005805a:	2500      	movs	r5, #0
1005805c:	4620      	mov	r0, r4
1005805e:	4629      	mov	r1, r5
10058060:	f7fb f861 	bl	10053126 <ACL_pkt_write_16b>
10058064:	2702      	movs	r7, #2
10058066:	4620      	mov	r0, r4
10058068:	4639      	mov	r1, r7
1005806a:	4632      	mov	r2, r6
1005806c:	f7fb f85b 	bl	10053126 <ACL_pkt_write_16b>
10058070:	8225      	strh	r5, [r4, #16]
10058072:	81e5      	strh	r5, [r4, #14]
10058074:	7325      	strb	r5, [r4, #12]
10058076:	6860      	ldr	r0, [r4, #4]
10058078:	6160      	str	r0, [r4, #20]
1005807a:	61a0      	str	r0, [r4, #24]
1005807c:	8860      	ldrh	r0, [r4, #2]
1005807e:	1d00      	adds	r0, r0, #4
10058080:	8060      	strh	r0, [r4, #2]
10058082:	7a20      	ldrb	r0, [r4, #8]
10058084:	4338      	orrs	r0, r7
10058086:	7220      	strb	r0, [r4, #8]
10058088:	4620      	mov	r0, r4
1005808a:	f7fa ff75 	bl	10052f78 <Acl_Transmit_Data>
1005808e:	2800      	cmp	r0, #0
10058090:	d014      	beq.n	100580bc <L2C_send_frame+0x70>
10058092:	8860      	ldrh	r0, [r4, #2]
10058094:	1f00      	subs	r0, r0, #4
10058096:	8060      	strh	r0, [r4, #2]
10058098:	2581      	movs	r5, #129	@ 0x81
1005809a:	e00f      	b.n	100580bc <L2C_send_frame+0x70>
1005809c:	25a0      	movs	r5, #160	@ 0xa0
1005809e:	283f      	cmp	r0, #63	@ 0x3f
100580a0:	d00c      	beq.n	100580bc <L2C_send_frame+0x70>
100580a2:	3820      	subs	r0, #32
100580a4:	285f      	cmp	r0, #95	@ 0x5f
100580a6:	d809      	bhi.n	100580bc <L2C_send_frame+0x70>
100580a8:	a801      	add	r0, sp, #4
100580aa:	8086      	strh	r6, [r0, #4]
100580ac:	2122      	movs	r1, #34	@ 0x22
100580ae:	4a04      	ldr	r2, [pc, #16]	@ (100580c0 <__arm_cp.4_0>)
100580b0:	5c51      	ldrb	r1, [r2, r1]
100580b2:	7181      	strb	r1, [r0, #6]
100580b4:	9401      	str	r4, [sp, #4]
100580b6:	f7ff ff5d 	bl	10057f74 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>
100580ba:	4605      	mov	r5, r0
100580bc:	4628      	mov	r0, r5
100580be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100580c0 <__arm_cp.4_0>:
100580c0:	20001188 	.word	0x20001188

100580c4 <L2C_receive_data>:
100580c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100580c6:	b0c3      	sub	sp, #268	@ 0x10c
100580c8:	4604      	mov	r4, r0
100580ca:	8800      	ldrh	r0, [r0, #0]
100580cc:	f7ff fe06 	bl	10057cdc <l2c_get_link_control_block_ref>
100580d0:	2800      	cmp	r0, #0
100580d2:	d07c      	beq.n	100581ce <L2C_receive_data+0x10a>
100580d4:	4605      	mov	r5, r0
100580d6:	7a20      	ldrb	r0, [r4, #8]
100580d8:	2703      	movs	r7, #3
100580da:	4007      	ands	r7, r0
100580dc:	6928      	ldr	r0, [r5, #16]
100580de:	462a      	mov	r2, r5
100580e0:	320c      	adds	r2, #12
100580e2:	2f02      	cmp	r7, #2
100580e4:	9203      	str	r2, [sp, #12]
100580e6:	d108      	bne.n	100580fa <L2C_receive_data+0x36>
100580e8:	2800      	cmp	r0, #0
100580ea:	d02f      	beq.n	1005814c <L2C_receive_data+0x88>
100580ec:	8811      	ldrh	r1, [r2, #0]
100580ee:	2684      	movs	r6, #132	@ 0x84
100580f0:	2904      	cmp	r1, #4
100580f2:	d354      	bcc.n	1005819e <L2C_receive_data+0xda>
100580f4:	2101      	movs	r1, #1
100580f6:	9102      	str	r1, [sp, #8]
100580f8:	e031      	b.n	1005815e <L2C_receive_data+0x9a>
100580fa:	2800      	cmp	r0, #0
100580fc:	d04a      	beq.n	10058194 <L2C_receive_data+0xd0>
100580fe:	8866      	ldrh	r6, [r4, #2]
10058100:	2e00      	cmp	r6, #0
10058102:	d026      	beq.n	10058152 <L2C_receive_data+0x8e>
10058104:	2100      	movs	r1, #0
10058106:	9101      	str	r1, [sp, #4]
10058108:	a804      	add	r0, sp, #16
1005810a:	9002      	str	r0, [sp, #8]
1005810c:	4620      	mov	r0, r4
1005810e:	4632      	mov	r2, r6
10058110:	9b02      	ldr	r3, [sp, #8]
10058112:	f7fa ffef 	bl	100530f4 <ACL_pkt_read>
10058116:	6928      	ldr	r0, [r5, #16]
10058118:	6840      	ldr	r0, [r0, #4]
1005811a:	9000      	str	r0, [sp, #0]
1005811c:	4620      	mov	r0, r4
1005811e:	f7fb f814 	bl	1005314a <ACL_pkt_extract_pdu>
10058122:	4601      	mov	r1, r0
10058124:	9800      	ldr	r0, [sp, #0]
10058126:	f007 f8a4 	bl	1005f272 <Mem_Buff_append>
1005812a:	89a9      	ldrh	r1, [r5, #12]
1005812c:	6928      	ldr	r0, [r5, #16]
1005812e:	4632      	mov	r2, r6
10058130:	9b02      	ldr	r3, [sp, #8]
10058132:	f7fb f801 	bl	10053138 <ACL_pkt_write>
10058136:	89a8      	ldrh	r0, [r5, #12]
10058138:	1980      	adds	r0, r0, r6
1005813a:	81a8      	strh	r0, [r5, #12]
1005813c:	b281      	uxth	r1, r0
1005813e:	6928      	ldr	r0, [r5, #16]
10058140:	f7fa ffc5 	bl	100530ce <ACL_pkt_resize>
10058144:	9a03      	ldr	r2, [sp, #12]
10058146:	9801      	ldr	r0, [sp, #4]
10058148:	8060      	strh	r0, [r4, #2]
1005814a:	e002      	b.n	10058152 <L2C_receive_data+0x8e>
1005814c:	612c      	str	r4, [r5, #16]
1005814e:	8860      	ldrh	r0, [r4, #2]
10058150:	81a8      	strh	r0, [r5, #12]
10058152:	8810      	ldrh	r0, [r2, #0]
10058154:	2804      	cmp	r0, #4
10058156:	d31b      	bcc.n	10058190 <L2C_receive_data+0xcc>
10058158:	6928      	ldr	r0, [r5, #16]
1005815a:	2600      	movs	r6, #0
1005815c:	9602      	str	r6, [sp, #8]
1005815e:	2100      	movs	r1, #0
10058160:	9101      	str	r1, [sp, #4]
10058162:	f7fa ffd0 	bl	10053106 <ACL_pkt_read_16b>
10058166:	1d00      	adds	r0, r0, #4
10058168:	b281      	uxth	r1, r0
1005816a:	89aa      	ldrh	r2, [r5, #12]
1005816c:	428a      	cmp	r2, r1
1005816e:	d816      	bhi.n	1005819e <L2C_receive_data+0xda>
10058170:	d112      	bne.n	10058198 <L2C_receive_data+0xd4>
10058172:	6929      	ldr	r1, [r5, #16]
10058174:	8048      	strh	r0, [r1, #2]
10058176:	2001      	movs	r0, #1
10058178:	f000 f832 	bl	100581e0 <L2C_mux_acl_packet>
1005817c:	2800      	cmp	r0, #0
1005817e:	d02d      	beq.n	100581dc <L2C_receive_data+0x118>
10058180:	6928      	ldr	r0, [r5, #16]
10058182:	2684      	movs	r6, #132	@ 0x84
10058184:	42a0      	cmp	r0, r4
10058186:	d126      	bne.n	100581d6 <L2C_receive_data+0x112>
10058188:	9801      	ldr	r0, [sp, #4]
1005818a:	81a8      	strh	r0, [r5, #12]
1005818c:	6128      	str	r0, [r5, #16]
1005818e:	e022      	b.n	100581d6 <L2C_receive_data+0x112>
10058190:	2600      	movs	r6, #0
10058192:	e018      	b.n	100581c6 <L2C_receive_data+0x102>
10058194:	2600      	movs	r6, #0
10058196:	e002      	b.n	1005819e <L2C_receive_data+0xda>
10058198:	9802      	ldr	r0, [sp, #8]
1005819a:	2800      	cmp	r0, #0
1005819c:	d013      	beq.n	100581c6 <L2C_receive_data+0x102>
1005819e:	78a8      	ldrb	r0, [r5, #2]
100581a0:	2110      	movs	r1, #16
100581a2:	4301      	orrs	r1, r0
100581a4:	70a9      	strb	r1, [r5, #2]
100581a6:	2042      	movs	r0, #66	@ 0x42
100581a8:	2101      	movs	r1, #1
100581aa:	2202      	movs	r2, #2
100581ac:	462b      	mov	r3, r5
100581ae:	f00b fb89 	bl	100638c4 <aci_hal_fw_error_event_push_noinline>
100581b2:	6928      	ldr	r0, [r5, #16]
100581b4:	2800      	cmp	r0, #0
100581b6:	d006      	beq.n	100581c6 <L2C_receive_data+0x102>
100581b8:	f7fa ff80 	bl	100530bc <ACL_pkt_release>
100581bc:	2000      	movs	r0, #0
100581be:	6128      	str	r0, [r5, #16]
100581c0:	9903      	ldr	r1, [sp, #12]
100581c2:	2000      	movs	r0, #0
100581c4:	8008      	strh	r0, [r1, #0]
100581c6:	2e00      	cmp	r6, #0
100581c8:	d105      	bne.n	100581d6 <L2C_receive_data+0x112>
100581ca:	2f01      	cmp	r7, #1
100581cc:	d103      	bne.n	100581d6 <L2C_receive_data+0x112>
100581ce:	4620      	mov	r0, r4
100581d0:	f7fa ff74 	bl	100530bc <ACL_pkt_release>
100581d4:	2600      	movs	r6, #0
100581d6:	4630      	mov	r0, r6
100581d8:	b043      	add	sp, #268	@ 0x10c
100581da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100581dc:	9801      	ldr	r0, [sp, #4]
100581de:	e7ee      	b.n	100581be <L2C_receive_data+0xfa>

100581e0 <L2C_mux_acl_packet>:
100581e0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100581e2:	460c      	mov	r4, r1
100581e4:	4605      	mov	r5, r0
100581e6:	8848      	ldrh	r0, [r1, #2]
100581e8:	1f00      	subs	r0, r0, #4
100581ea:	8048      	strh	r0, [r1, #2]
100581ec:	4608      	mov	r0, r1
100581ee:	f7ff fe02 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
100581f2:	1f01      	subs	r1, r0, #4
100581f4:	2902      	cmp	r1, #2
100581f6:	d80c      	bhi.n	10058212 <L2C_mux_acl_packet+0x32>
100581f8:	2806      	cmp	r0, #6
100581fa:	d01a      	beq.n	10058232 <L2C_mux_acl_packet+0x52>
100581fc:	2805      	cmp	r0, #5
100581fe:	d01d      	beq.n	1005823c <L2C_mux_acl_packet+0x5c>
10058200:	2804      	cmp	r0, #4
10058202:	d111      	bne.n	10058228 <L2C_mux_acl_packet+0x48>
10058204:	2004      	movs	r0, #4
10058206:	81a0      	strh	r0, [r4, #12]
10058208:	4628      	mov	r0, r5
1005820a:	4621      	mov	r1, r4
1005820c:	f7fc fdc8 	bl	10054da0 <GAT_att_cmn_rcv>
10058210:	e018      	b.n	10058244 <L2C_mux_acl_packet+0x64>
10058212:	283f      	cmp	r0, #63	@ 0x3f
10058214:	d008      	beq.n	10058228 <L2C_mux_acl_packet+0x48>
10058216:	3820      	subs	r0, #32
10058218:	285f      	cmp	r0, #95	@ 0x5f
1005821a:	d805      	bhi.n	10058228 <L2C_mux_acl_packet+0x48>
1005821c:	4668      	mov	r0, sp
1005821e:	7005      	strb	r5, [r0, #0]
10058220:	9401      	str	r4, [sp, #4]
10058222:	f00c fd15 	bl	10064c50 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>
10058226:	e00d      	b.n	10058244 <L2C_mux_acl_packet+0x64>
10058228:	4628      	mov	r0, r5
1005822a:	4621      	mov	r1, r4
1005822c:	f7ff fdde 	bl	10057dec <l2c_release_unexpected_acl_packet>
10058230:	e00e      	b.n	10058250 <L2C_mux_acl_packet+0x70>
10058232:	4628      	mov	r0, r5
10058234:	4621      	mov	r1, r4
10058236:	f009 fcd7 	bl	10061be8 <smp_sap_l2c_acl_data_hndl>
1005823a:	e003      	b.n	10058244 <L2C_mux_acl_packet+0x64>
1005823c:	4628      	mov	r0, r5
1005823e:	4621      	mov	r1, r4
10058240:	f000 f808 	bl	10058254 <L2C_acl_cframe_signaling_hndl>
10058244:	2800      	cmp	r0, #0
10058246:	d003      	beq.n	10058250 <L2C_mux_acl_packet+0x70>
10058248:	8861      	ldrh	r1, [r4, #2]
1005824a:	1d09      	adds	r1, r1, #4
1005824c:	8061      	strh	r1, [r4, #2]
1005824e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10058250:	2000      	movs	r0, #0
10058252:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10058254 <L2C_acl_cframe_signaling_hndl>:
10058254:	b5f0      	push	{r4, r5, r6, r7, lr}
10058256:	b085      	sub	sp, #20
10058258:	460c      	mov	r4, r1
1005825a:	4606      	mov	r6, r0
1005825c:	880f      	ldrh	r7, [r1, #0]
1005825e:	4638      	mov	r0, r7
10058260:	f7ff fd58 	bl	10057d14 <l2c_get_link_control_block_index>
10058264:	4605      	mov	r5, r0
10058266:	4880      	ldr	r0, [pc, #512]	@ (10058468 <__arm_cp.7_0>)
10058268:	7ac1      	ldrb	r1, [r0, #11]
1005826a:	428d      	cmp	r5, r1
1005826c:	d206      	bcs.n	1005827c <L2C_acl_cframe_signaling_hndl+0x28>
1005826e:	2014      	movs	r0, #20
10058270:	4368      	muls	r0, r5
10058272:	4a7e      	ldr	r2, [pc, #504]	@ (1005846c <__arm_cp.7_1>)
10058274:	6812      	ldr	r2, [r2, #0]
10058276:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
10058278:	1810      	adds	r0, r2, r0
1005827a:	9002      	str	r0, [sp, #8]
1005827c:	6862      	ldr	r2, [r4, #4]
1005827e:	7a10      	ldrb	r0, [r2, #8]
10058280:	2300      	movs	r3, #0
10058282:	2e01      	cmp	r6, #1
10058284:	d01c      	beq.n	100582c0 <L2C_acl_cframe_signaling_hndl+0x6c>
10058286:	2e00      	cmp	r6, #0
10058288:	d13c      	bne.n	10058304 <L2C_acl_cframe_signaling_hndl+0xb0>
1005828a:	461e      	mov	r6, r3
1005828c:	428d      	cmp	r5, r1
1005828e:	d212      	bcs.n	100582b6 <L2C_acl_cframe_signaling_hndl+0x62>
10058290:	2819      	cmp	r0, #25
10058292:	d80b      	bhi.n	100582ac <L2C_acl_cframe_signaling_hndl+0x58>
10058294:	2101      	movs	r1, #1
10058296:	4081      	lsls	r1, r0
10058298:	4879      	ldr	r0, [pc, #484]	@ (10058480 <__arm_cp.7_6>)
1005829a:	4201      	tst	r1, r0
1005829c:	d006      	beq.n	100582ac <L2C_acl_cframe_signaling_hndl+0x58>
1005829e:	4873      	ldr	r0, [pc, #460]	@ (1005846c <__arm_cp.7_1>)
100582a0:	6800      	ldr	r0, [r0, #0]
100582a2:	2201      	movs	r2, #1
100582a4:	4b77      	ldr	r3, [pc, #476]	@ (10058484 <__arm_cp.7_7>)
100582a6:	4629      	mov	r1, r5
100582a8:	f009 ffa1 	bl	100621ee <CST_start>
100582ac:	9a02      	ldr	r2, [sp, #8]
100582ae:	7890      	ldrb	r0, [r2, #2]
100582b0:	21fd      	movs	r1, #253	@ 0xfd
100582b2:	4001      	ands	r1, r0
100582b4:	7091      	strb	r1, [r2, #2]
100582b6:	4620      	mov	r0, r4
100582b8:	f7fa ff00 	bl	100530bc <ACL_pkt_release>
100582bc:	4630      	mov	r0, r6
100582be:	e0d0      	b.n	10058462 <L2C_acl_cframe_signaling_hndl+0x20e>
100582c0:	428d      	cmp	r5, r1
100582c2:	d300      	bcc.n	100582c6 <L2C_acl_cframe_signaling_hndl+0x72>
100582c4:	e0c8      	b.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
100582c6:	7a56      	ldrb	r6, [r2, #9]
100582c8:	2813      	cmp	r0, #19
100582ca:	d81d      	bhi.n	10058308 <L2C_acl_cframe_signaling_hndl+0xb4>
100582cc:	2101      	movs	r1, #1
100582ce:	9100      	str	r1, [sp, #0]
100582d0:	4081      	lsls	r1, r0
100582d2:	4a67      	ldr	r2, [pc, #412]	@ (10058470 <__arm_cp.7_2>)
100582d4:	4211      	tst	r1, r2
100582d6:	d017      	beq.n	10058308 <L2C_acl_cframe_signaling_hndl+0xb4>
100582d8:	2801      	cmp	r0, #1
100582da:	d021      	beq.n	10058320 <L2C_acl_cframe_signaling_hndl+0xcc>
100582dc:	2114      	movs	r1, #20
100582de:	4a63      	ldr	r2, [pc, #396]	@ (1005846c <__arm_cp.7_1>)
100582e0:	6812      	ldr	r2, [r2, #0]
100582e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
100582e4:	2813      	cmp	r0, #19
100582e6:	d03e      	beq.n	10058366 <L2C_acl_cframe_signaling_hndl+0x112>
100582e8:	2812      	cmp	r0, #18
100582ea:	d000      	beq.n	100582ee <L2C_acl_cframe_signaling_hndl+0x9a>
100582ec:	e0b4      	b.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
100582ee:	9301      	str	r3, [sp, #4]
100582f0:	4608      	mov	r0, r1
100582f2:	4368      	muls	r0, r5
100582f4:	1810      	adds	r0, r2, r0
100582f6:	7883      	ldrb	r3, [r0, #2]
100582f8:	07df      	lsls	r7, r3, #31
100582fa:	d166      	bne.n	100583ca <L2C_acl_cframe_signaling_hndl+0x176>
100582fc:	7146      	strb	r6, [r0, #5]
100582fe:	8820      	ldrh	r0, [r4, #0]
10058300:	2200      	movs	r2, #0
10058302:	e09d      	b.n	10058440 <L2C_acl_cframe_signaling_hndl+0x1ec>
10058304:	4618      	mov	r0, r3
10058306:	e0ac      	b.n	10058462 <L2C_acl_cframe_signaling_hndl+0x20e>
10058308:	9301      	str	r3, [sp, #4]
1005830a:	f00c fc9f 	bl	10064c4c <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>
1005830e:	2800      	cmp	r0, #0
10058310:	d100      	bne.n	10058314 <L2C_acl_cframe_signaling_hndl+0xc0>
10058312:	e091      	b.n	10058438 <L2C_acl_cframe_signaling_hndl+0x1e4>
10058314:	a803      	add	r0, sp, #12
10058316:	7105      	strb	r5, [r0, #4]
10058318:	9403      	str	r4, [sp, #12]
1005831a:	f00c fc95 	bl	10064c48 <L2C_cos_process_cfc_mode_command_ucfg_weak>
1005831e:	e093      	b.n	10058448 <L2C_acl_cframe_signaling_hndl+0x1f4>
10058320:	2701      	movs	r7, #1
10058322:	4628      	mov	r0, r5
10058324:	4639      	mov	r1, r7
10058326:	4632      	mov	r2, r6
10058328:	9301      	str	r3, [sp, #4]
1005832a:	f7ff fd2f 	bl	10057d8c <l2c_pre_process_incoming_response_packet>
1005832e:	9b01      	ldr	r3, [sp, #4]
10058330:	2800      	cmp	r0, #0
10058332:	d000      	beq.n	10058336 <L2C_acl_cframe_signaling_hndl+0xe2>
10058334:	e090      	b.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
10058336:	8826      	ldrh	r6, [r4, #0]
10058338:	484e      	ldr	r0, [pc, #312]	@ (10058474 <__arm_cp.7_3>)
1005833a:	6800      	ldr	r0, [r0, #0]
1005833c:	6980      	ldr	r0, [r0, #24]
1005833e:	2142      	movs	r1, #66	@ 0x42
10058340:	2252      	movs	r2, #82	@ 0x52
10058342:	2303      	movs	r3, #3
10058344:	f7fb f890 	bl	10053468 <aci_event_fifo_push_header>
10058348:	9b01      	ldr	r3, [sp, #4]
1005834a:	2800      	cmp	r0, #0
1005834c:	d100      	bne.n	10058350 <L2C_acl_cframe_signaling_hndl+0xfc>
1005834e:	e083      	b.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
10058350:	4605      	mov	r5, r0
10058352:	4631      	mov	r1, r6
10058354:	1d06      	adds	r6, r0, #4
10058356:	4630      	mov	r0, r6
10058358:	4622      	mov	r2, r4
1005835a:	f7fb fc15 	bl	10053b88 <aci_l2cap_command_reject_event_copy>
1005835e:	02f8      	lsls	r0, r7, #11
10058360:	300a      	adds	r0, #10
10058362:	2108      	movs	r1, #8
10058364:	e058      	b.n	10058418 <L2C_acl_cframe_signaling_hndl+0x1c4>
10058366:	4369      	muls	r1, r5
10058368:	1850      	adds	r0, r2, r1
1005836a:	7880      	ldrb	r0, [r0, #2]
1005836c:	07c0      	lsls	r0, r0, #31
1005836e:	d173      	bne.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
10058370:	2113      	movs	r1, #19
10058372:	4628      	mov	r0, r5
10058374:	4632      	mov	r2, r6
10058376:	9301      	str	r3, [sp, #4]
10058378:	f7ff fd08 	bl	10057d8c <l2c_pre_process_incoming_response_packet>
1005837c:	9b01      	ldr	r3, [sp, #4]
1005837e:	2800      	cmp	r0, #0
10058380:	d16a      	bne.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
10058382:	2108      	movs	r1, #8
10058384:	4620      	mov	r0, r4
10058386:	f7fa febe 	bl	10053106 <ACL_pkt_read_16b>
1005838a:	9b01      	ldr	r3, [sp, #4]
1005838c:	4606      	mov	r6, r0
1005838e:	483a      	ldr	r0, [pc, #232]	@ (10058478 <__arm_cp.7_4>)
10058390:	6800      	ldr	r0, [r0, #0]
10058392:	214f      	movs	r1, #79	@ 0x4f
10058394:	5c40      	ldrb	r0, [r0, r1]
10058396:	0780      	lsls	r0, r0, #30
10058398:	d55e      	bpl.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
1005839a:	8827      	ldrh	r7, [r4, #0]
1005839c:	4835      	ldr	r0, [pc, #212]	@ (10058474 <__arm_cp.7_3>)
1005839e:	6800      	ldr	r0, [r0, #0]
100583a0:	6980      	ldr	r0, [r0, #24]
100583a2:	2142      	movs	r1, #66	@ 0x42
100583a4:	224c      	movs	r2, #76	@ 0x4c
100583a6:	2303      	movs	r3, #3
100583a8:	f7fb f85e 	bl	10053468 <aci_event_fifo_push_header>
100583ac:	9b01      	ldr	r3, [sp, #4]
100583ae:	2800      	cmp	r0, #0
100583b0:	d052      	beq.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
100583b2:	4605      	mov	r5, r0
100583b4:	7306      	strb	r6, [r0, #12]
100583b6:	7287      	strb	r7, [r0, #10]
100583b8:	0a30      	lsrs	r0, r6, #8
100583ba:	7368      	strb	r0, [r5, #13]
100583bc:	0a38      	lsrs	r0, r7, #8
100583be:	72e8      	strb	r0, [r5, #11]
100583c0:	1d2e      	adds	r6, r5, #4
100583c2:	9800      	ldr	r0, [sp, #0]
100583c4:	02c0      	lsls	r0, r0, #11
100583c6:	2106      	movs	r1, #6
100583c8:	e026      	b.n	10058418 <L2C_acl_cframe_signaling_hndl+0x1c4>
100583ca:	0758      	lsls	r0, r3, #29
100583cc:	9b01      	ldr	r3, [sp, #4]
100583ce:	d443      	bmi.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
100583d0:	4369      	muls	r1, r5
100583d2:	1852      	adds	r2, r2, r1
100583d4:	2012      	movs	r0, #18
100583d6:	4631      	mov	r1, r6
100583d8:	f7ff fcd1 	bl	10057d7e <l2c_post_process_incoming_request_packet>
100583dc:	9b01      	ldr	r3, [sp, #4]
100583de:	4826      	ldr	r0, [pc, #152]	@ (10058478 <__arm_cp.7_4>)
100583e0:	6800      	ldr	r0, [r0, #0]
100583e2:	214f      	movs	r1, #79	@ 0x4f
100583e4:	5c40      	ldrb	r0, [r0, r1]
100583e6:	07c0      	lsls	r0, r0, #31
100583e8:	d036      	beq.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
100583ea:	8827      	ldrh	r7, [r4, #0]
100583ec:	4821      	ldr	r0, [pc, #132]	@ (10058474 <__arm_cp.7_3>)
100583ee:	6800      	ldr	r0, [r0, #0]
100583f0:	6980      	ldr	r0, [r0, #24]
100583f2:	2142      	movs	r1, #66	@ 0x42
100583f4:	224d      	movs	r2, #77	@ 0x4d
100583f6:	2305      	movs	r3, #5
100583f8:	f7fb f836 	bl	10053468 <aci_event_fifo_push_header>
100583fc:	9b01      	ldr	r3, [sp, #4]
100583fe:	2800      	cmp	r0, #0
10058400:	d02a      	beq.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
10058402:	4605      	mov	r5, r0
10058404:	1d06      	adds	r6, r0, #4
10058406:	4630      	mov	r0, r6
10058408:	4639      	mov	r1, r7
1005840a:	4622      	mov	r2, r4
1005840c:	f7fb fb74 	bl	10053af8 <aci_l2cap_connection_update_req_event_copy>
10058410:	9800      	ldr	r0, [sp, #0]
10058412:	02c0      	lsls	r0, r0, #11
10058414:	1c80      	adds	r0, r0, #2
10058416:	210f      	movs	r1, #15
10058418:	22ff      	movs	r2, #255	@ 0xff
1005841a:	7072      	strb	r2, [r6, #1]
1005841c:	2282      	movs	r2, #130	@ 0x82
1005841e:	7032      	strb	r2, [r6, #0]
10058420:	0a02      	lsrs	r2, r0, #8
10058422:	726a      	strb	r2, [r5, #9]
10058424:	7228      	strb	r0, [r5, #8]
10058426:	2000      	movs	r0, #0
10058428:	71e8      	strb	r0, [r5, #7]
1005842a:	71a9      	strb	r1, [r5, #6]
1005842c:	2042      	movs	r0, #66	@ 0x42
1005842e:	4629      	mov	r1, r5
10058430:	f7fb f8b7 	bl	100535a2 <aci_event_fifo_push>
10058434:	9b01      	ldr	r3, [sp, #4]
10058436:	e00f      	b.n	10058458 <L2C_acl_cframe_signaling_hndl+0x204>
10058438:	9802      	ldr	r0, [sp, #8]
1005843a:	7146      	strb	r6, [r0, #5]
1005843c:	2200      	movs	r2, #0
1005843e:	4638      	mov	r0, r7
10058440:	4631      	mov	r1, r6
10058442:	4613      	mov	r3, r2
10058444:	f7ff fcdc 	bl	10057e00 <L2C_build_command_reject_pdu>
10058448:	9b01      	ldr	r3, [sp, #4]
1005844a:	2812      	cmp	r0, #18
1005844c:	d809      	bhi.n	10058462 <L2C_acl_cframe_signaling_hndl+0x20e>
1005844e:	2101      	movs	r1, #1
10058450:	4081      	lsls	r1, r0
10058452:	4a0a      	ldr	r2, [pc, #40]	@ (1005847c <__arm_cp.7_5>)
10058454:	4211      	tst	r1, r2
10058456:	d004      	beq.n	10058462 <L2C_acl_cframe_signaling_hndl+0x20e>
10058458:	4620      	mov	r0, r4
1005845a:	461c      	mov	r4, r3
1005845c:	f7fa fe2e 	bl	100530bc <ACL_pkt_release>
10058460:	4620      	mov	r0, r4
10058462:	b005      	add	sp, #20
10058464:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058466:	46c0      	nop			@ (mov r8, r8)

10058468 <__arm_cp.7_0>:
10058468:	20001188 	.word	0x20001188

1005846c <__arm_cp.7_1>:
1005846c:	2000116c 	.word	0x2000116c

10058470 <__arm_cp.7_2>:
10058470:	000c0002 	.word	0x000c0002

10058474 <__arm_cp.7_3>:
10058474:	20001124 	.word	0x20001124

10058478 <__arm_cp.7_4>:
10058478:	20001174 	.word	0x20001174

1005847c <__arm_cp.7_5>:
1005847c:	00040005 	.word	0x00040005

10058480 <__arm_cp.7_6>:
10058480:	02940040 	.word	0x02940040

10058484 <__arm_cp.7_7>:
10058484:	00007530 	.word	0x00007530

10058488 <L2C_timeout_handler_signalling>:
10058488:	b570      	push	{r4, r5, r6, lr}
1005848a:	2414      	movs	r4, #20
1005848c:	4344      	muls	r4, r0
1005848e:	4d14      	ldr	r5, [pc, #80]	@ (100584e0 <__arm_cp.8_0>)
10058490:	4814      	ldr	r0, [pc, #80]	@ (100584e4 <__arm_cp.8_1>)
10058492:	6800      	ldr	r0, [r0, #0]
10058494:	214f      	movs	r1, #79	@ 0x4f
10058496:	5c40      	ldrb	r0, [r0, r1]
10058498:	0700      	lsls	r0, r0, #28
1005849a:	d513      	bpl.n	100584c4 <L2C_timeout_handler_signalling+0x3c>
1005849c:	6828      	ldr	r0, [r5, #0]
1005849e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
100584a0:	5b06      	ldrh	r6, [r0, r4]
100584a2:	4811      	ldr	r0, [pc, #68]	@ (100584e8 <__arm_cp.8_2>)
100584a4:	6800      	ldr	r0, [r0, #0]
100584a6:	6980      	ldr	r0, [r0, #24]
100584a8:	2206      	movs	r2, #6
100584aa:	2102      	movs	r1, #2
100584ac:	460b      	mov	r3, r1
100584ae:	f7fa ffdb 	bl	10053468 <aci_event_fifo_push_header>
100584b2:	2800      	cmp	r0, #0
100584b4:	d006      	beq.n	100584c4 <L2C_timeout_handler_signalling+0x3c>
100584b6:	4601      	mov	r1, r0
100584b8:	480c      	ldr	r0, [pc, #48]	@ (100584ec <__arm_cp.8_3>)
100584ba:	6048      	str	r0, [r1, #4]
100584bc:	810e      	strh	r6, [r1, #8]
100584be:	2002      	movs	r0, #2
100584c0:	f7fb f86f 	bl	100535a2 <aci_event_fifo_push>
100584c4:	6828      	ldr	r0, [r5, #0]
100584c6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
100584c8:	1901      	adds	r1, r0, r4
100584ca:	2200      	movs	r2, #0
100584cc:	718a      	strb	r2, [r1, #6]
100584ce:	788a      	ldrb	r2, [r1, #2]
100584d0:	23f9      	movs	r3, #249	@ 0xf9
100584d2:	4013      	ands	r3, r2
100584d4:	708b      	strb	r3, [r1, #2]
100584d6:	5b00      	ldrh	r0, [r0, r4]
100584d8:	21ff      	movs	r1, #255	@ 0xff
100584da:	f7ff fd17 	bl	10057f0c <L2C_cos_channel_descriptors_reset_pending>
100584de:	bd70      	pop	{r4, r5, r6, pc}

100584e0 <__arm_cp.8_0>:
100584e0:	2000116c 	.word	0x2000116c

100584e4 <__arm_cp.8_1>:
100584e4:	20001174 	.word	0x20001174

100584e8 <__arm_cp.8_2>:
100584e8:	20001124 	.word	0x20001124

100584ec <__arm_cp.8_3>:
100584ec:	1006388d 	.word	0x1006388d

100584f0 <l2c_sap_hci_le_connection_complete_evt_hndl>:
100584f0:	b5b0      	push	{r4, r5, r7, lr}
100584f2:	460c      	mov	r4, r1
100584f4:	4605      	mov	r5, r0
100584f6:	2000      	movs	r0, #0
100584f8:	f7ff fbf0 	bl	10057cdc <l2c_get_link_control_block_ref>
100584fc:	2800      	cmp	r0, #0
100584fe:	d005      	beq.n	1005850c <l2c_sap_hci_le_connection_complete_evt_hndl+0x1c>
10058500:	2101      	movs	r1, #1
10058502:	8081      	strh	r1, [r0, #4]
10058504:	8005      	strh	r5, [r0, #0]
10058506:	4261      	negs	r1, r4
10058508:	4161      	adcs	r1, r4
1005850a:	7081      	strb	r1, [r0, #2]
1005850c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10058510 <l2c_sap_hci_disconnection_complete_evt_hndl>:
10058510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058512:	4604      	mov	r4, r0
10058514:	f7ff fbfe 	bl	10057d14 <l2c_get_link_control_block_index>
10058518:	4605      	mov	r5, r0
1005851a:	4810      	ldr	r0, [pc, #64]	@ (1005855c <__arm_cp.1_0>)
1005851c:	7ac0      	ldrb	r0, [r0, #11]
1005851e:	4285      	cmp	r5, r0
10058520:	d21b      	bcs.n	1005855a <l2c_sap_hci_disconnection_complete_evt_hndl+0x4a>
10058522:	4e0f      	ldr	r6, [pc, #60]	@ (10058560 <__arm_cp.1_1>)
10058524:	6830      	ldr	r0, [r6, #0]
10058526:	4629      	mov	r1, r5
10058528:	f009 fe2b 	bl	10062182 <CST_stop>
1005852c:	2714      	movs	r7, #20
1005852e:	436f      	muls	r7, r5
10058530:	6830      	ldr	r0, [r6, #0]
10058532:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10058534:	2500      	movs	r5, #0
10058536:	53c5      	strh	r5, [r0, r7]
10058538:	19c0      	adds	r0, r0, r7
1005853a:	6900      	ldr	r0, [r0, #16]
1005853c:	2800      	cmp	r0, #0
1005853e:	d009      	beq.n	10058554 <l2c_sap_hci_disconnection_complete_evt_hndl+0x44>
10058540:	f7fa fdbc 	bl	100530bc <ACL_pkt_release>
10058544:	6830      	ldr	r0, [r6, #0]
10058546:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10058548:	19c0      	adds	r0, r0, r7
1005854a:	6105      	str	r5, [r0, #16]
1005854c:	6830      	ldr	r0, [r6, #0]
1005854e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10058550:	19c0      	adds	r0, r0, r7
10058552:	8185      	strh	r5, [r0, #12]
10058554:	4620      	mov	r0, r4
10058556:	f7ff fd0c 	bl	10057f72 <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>
1005855a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005855c <__arm_cp.1_0>:
1005855c:	20001188 	.word	0x20001188

10058560 <__arm_cp.1_1>:
10058560:	2000116c 	.word	0x2000116c

10058564 <llc_cig_cmn_start_cis_ucfg_weak>:
10058564:	4770      	bx	lr

10058566 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>:
10058566:	4770      	bx	lr

10058568 <llc_conn_get_cntxt_p>:
10058568:	4803      	ldr	r0, [pc, #12]	@ (10058578 <__arm_cp.0_0>)
1005856a:	6800      	ldr	r0, [r0, #0]
1005856c:	2194      	movs	r1, #148	@ 0x94
1005856e:	5840      	ldr	r0, [r0, r1]
10058570:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058572:	6800      	ldr	r0, [r0, #0]
10058574:	4770      	bx	lr
10058576:	46c0      	nop			@ (mov r8, r8)

10058578 <__arm_cp.0_0>:
10058578:	20001174 	.word	0x20001174

1005857c <llc_conn_get_cntxt_per_p>:
1005857c:	2133      	movs	r1, #51	@ 0x33
1005857e:	00c9      	lsls	r1, r1, #3
10058580:	4341      	muls	r1, r0
10058582:	4804      	ldr	r0, [pc, #16]	@ (10058594 <__arm_cp.1_0>)
10058584:	6800      	ldr	r0, [r0, #0]
10058586:	2294      	movs	r2, #148	@ 0x94
10058588:	5880      	ldr	r0, [r0, r2]
1005858a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005858c:	6840      	ldr	r0, [r0, #4]
1005858e:	1840      	adds	r0, r0, r1
10058590:	4770      	bx	lr
10058592:	46c0      	nop			@ (mov r8, r8)

10058594 <__arm_cp.1_0>:
10058594:	20001174 	.word	0x20001174

10058598 <llc_conn_get_cntxt_per_p_from_handle>:
10058598:	b510      	push	{r4, lr}
1005859a:	4601      	mov	r1, r0
1005859c:	2000      	movs	r0, #0
1005859e:	4a0d      	ldr	r2, [pc, #52]	@ (100585d4 <__arm_cp.2_0>)
100585a0:	4291      	cmp	r1, r2
100585a2:	d015      	beq.n	100585d0 <llc_conn_get_cntxt_per_p_from_handle+0x38>
100585a4:	4a0c      	ldr	r2, [pc, #48]	@ (100585d8 <__arm_cp.2_1>)
100585a6:	6812      	ldr	r2, [r2, #0]
100585a8:	2334      	movs	r3, #52	@ 0x34
100585aa:	5cd2      	ldrb	r2, [r2, r3]
100585ac:	1c52      	adds	r2, r2, #1
100585ae:	4b0b      	ldr	r3, [pc, #44]	@ (100585dc <__arm_cp.2_2>)
100585b0:	681b      	ldr	r3, [r3, #0]
100585b2:	2494      	movs	r4, #148	@ 0x94
100585b4:	591b      	ldr	r3, [r3, r4]
100585b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100585b8:	685b      	ldr	r3, [r3, #4]
100585ba:	1e52      	subs	r2, r2, #1
100585bc:	d008      	beq.n	100585d0 <llc_conn_get_cntxt_per_p_from_handle+0x38>
100585be:	2433      	movs	r4, #51	@ 0x33
100585c0:	00e4      	lsls	r4, r4, #3
100585c2:	191c      	adds	r4, r3, r4
100585c4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
100585c6:	428b      	cmp	r3, r1
100585c8:	4623      	mov	r3, r4
100585ca:	d1f6      	bne.n	100585ba <llc_conn_get_cntxt_per_p_from_handle+0x22>
100585cc:	4804      	ldr	r0, [pc, #16]	@ (100585e0 <__arm_cp.2_3>)
100585ce:	1820      	adds	r0, r4, r0
100585d0:	bd10      	pop	{r4, pc}
100585d2:	46c0      	nop			@ (mov r8, r8)

100585d4 <__arm_cp.2_0>:
100585d4:	0000ffff 	.word	0x0000ffff

100585d8 <__arm_cp.2_1>:
100585d8:	20001120 	.word	0x20001120

100585dc <__arm_cp.2_2>:
100585dc:	20001174 	.word	0x20001174

100585e0 <__arm_cp.2_3>:
100585e0:	fffffe68 	.word	0xfffffe68

100585e4 <llc_conn_get_phy_upd_cntxt_per_p>:
100585e4:	b510      	push	{r4, lr}
100585e6:	4604      	mov	r4, r0
100585e8:	f7f9 fb29 	bl	10051c3e <phy_upd_csr_ucfg>
100585ec:	2801      	cmp	r0, #1
100585ee:	d109      	bne.n	10058604 <llc_conn_get_phy_upd_cntxt_per_p+0x20>
100585f0:	200e      	movs	r0, #14
100585f2:	4360      	muls	r0, r4
100585f4:	4904      	ldr	r1, [pc, #16]	@ (10058608 <__arm_cp.8_0>)
100585f6:	6809      	ldr	r1, [r1, #0]
100585f8:	2294      	movs	r2, #148	@ 0x94
100585fa:	5889      	ldr	r1, [r1, r2]
100585fc:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100585fe:	6889      	ldr	r1, [r1, #8]
10058600:	1808      	adds	r0, r1, r0
10058602:	bd10      	pop	{r4, pc}
10058604:	2000      	movs	r0, #0
10058606:	bd10      	pop	{r4, pc}

10058608 <__arm_cp.8_0>:
10058608:	20001174 	.word	0x20001174

1005860c <llc_conn_init>:
1005860c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005860e:	4c3e      	ldr	r4, [pc, #248]	@ (10058708 <__arm_cp.9_0>)
10058610:	6820      	ldr	r0, [r4, #0]
10058612:	2594      	movs	r5, #148	@ 0x94
10058614:	5940      	ldr	r0, [r0, r5]
10058616:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058618:	6802      	ldr	r2, [r0, #0]
1005861a:	2032      	movs	r0, #50	@ 0x32
1005861c:	2600      	movs	r6, #0
1005861e:	5416      	strb	r6, [r2, r0]
10058620:	483a      	ldr	r0, [pc, #232]	@ (1005870c <__arm_cp.9_1>)
10058622:	6940      	ldr	r0, [r0, #20]
10058624:	0c01      	lsrs	r1, r0, #16
10058626:	2919      	cmp	r1, #25
10058628:	d301      	bcc.n	1005862e <llc_conn_init+0x22>
1005862a:	2019      	movs	r0, #25
1005862c:	0400      	lsls	r0, r0, #16
1005862e:	6010      	str	r0, [r2, #0]
10058630:	9202      	str	r2, [sp, #8]
10058632:	6050      	str	r0, [r2, #4]
10058634:	f000 faba 	bl	10058bac <llc_conn_list_reset>
10058638:	6820      	ldr	r0, [r4, #0]
1005863a:	5940      	ldr	r0, [r0, r5]
1005863c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005863e:	6807      	ldr	r7, [r0, #0]
10058640:	f7ff fac5 	bl	10057bce <data_length_extension_csr_ucfg_weak>
10058644:	2801      	cmp	r0, #1
10058646:	d001      	beq.n	1005864c <llc_conn_init+0x40>
10058648:	201b      	movs	r0, #27
1005864a:	e000      	b.n	1005864e <llc_conn_init+0x42>
1005864c:	20fb      	movs	r0, #251	@ 0xfb
1005864e:	8238      	strh	r0, [r7, #16]
10058650:	f7ff fabd 	bl	10057bce <data_length_extension_csr_ucfg_weak>
10058654:	4604      	mov	r4, r0
10058656:	2029      	movs	r0, #41	@ 0x29
10058658:	00c0      	lsls	r0, r0, #3
1005865a:	9000      	str	r0, [sp, #0]
1005865c:	20a9      	movs	r0, #169	@ 0xa9
1005865e:	0105      	lsls	r5, r0, #4
10058660:	f7f9 faed 	bl	10051c3e <phy_upd_csr_ucfg>
10058664:	2c01      	cmp	r4, #1
10058666:	9501      	str	r5, [sp, #4]
10058668:	d107      	bne.n	1005867a <llc_conn_init+0x6e>
1005866a:	2801      	cmp	r0, #1
1005866c:	4d28      	ldr	r5, [pc, #160]	@ (10058710 <__arm_cp.9_2>)
1005866e:	9c00      	ldr	r4, [sp, #0]
10058670:	d00c      	beq.n	1005868c <llc_conn_init+0x80>
10058672:	4d28      	ldr	r5, [pc, #160]	@ (10058714 <__arm_cp.9_3>)
10058674:	f7ff f966 	bl	10057944 <cte_csr_ucfg_weak>
10058678:	e005      	b.n	10058686 <llc_conn_init+0x7a>
1005867a:	2801      	cmp	r0, #1
1005867c:	9c00      	ldr	r4, [sp, #0]
1005867e:	d005      	beq.n	1005868c <llc_conn_init+0x80>
10058680:	f7ff f960 	bl	10057944 <cte_csr_ucfg_weak>
10058684:	4625      	mov	r5, r4
10058686:	2801      	cmp	r0, #1
10058688:	d100      	bne.n	1005868c <llc_conn_init+0x80>
1005868a:	3508      	adds	r5, #8
1005868c:	827d      	strh	r5, [r7, #18]
1005868e:	f7ff fa9e 	bl	10057bce <data_length_extension_csr_ucfg_weak>
10058692:	2801      	cmp	r0, #1
10058694:	d001      	beq.n	1005869a <llc_conn_init+0x8e>
10058696:	201b      	movs	r0, #27
10058698:	e000      	b.n	1005869c <llc_conn_init+0x90>
1005869a:	20fb      	movs	r0, #251	@ 0xfb
1005869c:	82b8      	strh	r0, [r7, #20]
1005869e:	f7ff fa96 	bl	10057bce <data_length_extension_csr_ucfg_weak>
100586a2:	4605      	mov	r5, r0
100586a4:	f7f9 facb 	bl	10051c3e <phy_upd_csr_ucfg>
100586a8:	2d01      	cmp	r5, #1
100586aa:	d107      	bne.n	100586bc <llc_conn_init+0xb0>
100586ac:	2801      	cmp	r0, #1
100586ae:	9d01      	ldr	r5, [sp, #4]
100586b0:	4917      	ldr	r1, [pc, #92]	@ (10058710 <__arm_cp.9_2>)
100586b2:	d00d      	beq.n	100586d0 <llc_conn_init+0xc4>
100586b4:	f7ff f946 	bl	10057944 <cte_csr_ucfg_weak>
100586b8:	4916      	ldr	r1, [pc, #88]	@ (10058714 <__arm_cp.9_3>)
100586ba:	e006      	b.n	100586ca <llc_conn_init+0xbe>
100586bc:	2801      	cmp	r0, #1
100586be:	9d01      	ldr	r5, [sp, #4]
100586c0:	4629      	mov	r1, r5
100586c2:	d005      	beq.n	100586d0 <llc_conn_init+0xc4>
100586c4:	f7ff f93e 	bl	10057944 <cte_csr_ucfg_weak>
100586c8:	4621      	mov	r1, r4
100586ca:	2801      	cmp	r0, #1
100586cc:	d100      	bne.n	100586d0 <llc_conn_init+0xc4>
100586ce:	3108      	adds	r1, #8
100586d0:	837c      	strh	r4, [r7, #26]
100586d2:	201b      	movs	r0, #27
100586d4:	8338      	strh	r0, [r7, #24]
100586d6:	81fd      	strh	r5, [r7, #14]
100586d8:	81bc      	strh	r4, [r7, #12]
100586da:	817c      	strh	r4, [r7, #10]
100586dc:	8138      	strh	r0, [r7, #8]
100586de:	82f9      	strh	r1, [r7, #22]
100586e0:	f001 fb28 	bl	10059d34 <llc_cpe_init>
100586e4:	f7f9 fc0d 	bl	10051f02 <LL_phy_update_init_ucfg>
100586e8:	9802      	ldr	r0, [sp, #8]
100586ea:	f002 fb7b 	bl	1005ade4 <llc_subrate_init_acceptable>
100586ee:	4c0a      	ldr	r4, [pc, #40]	@ (10058718 <__arm_cp.9_4>)
100586f0:	6820      	ldr	r0, [r4, #0]
100586f2:	2134      	movs	r1, #52	@ 0x34
100586f4:	5c41      	ldrb	r1, [r0, r1]
100586f6:	b2f0      	uxtb	r0, r6
100586f8:	4288      	cmp	r0, r1
100586fa:	d203      	bcs.n	10058704 <llc_conn_init+0xf8>
100586fc:	f000 f80e 	bl	1005871c <llc_conn_per_init>
10058700:	1c76      	adds	r6, r6, #1
10058702:	e7f5      	b.n	100586f0 <llc_conn_init+0xe4>
10058704:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058706:	46c0      	nop			@ (mov r8, r8)

10058708 <__arm_cp.9_0>:
10058708:	20001174 	.word	0x20001174

1005870c <__arm_cp.9_1>:
1005870c:	20001188 	.word	0x20001188

10058710 <__arm_cp.9_2>:
10058710:	00004290 	.word	0x00004290

10058714 <__arm_cp.9_3>:
10058714:	00000848 	.word	0x00000848

10058718 <__arm_cp.9_4>:
10058718:	20001120 	.word	0x20001120

1005871c <llc_conn_per_init>:
1005871c:	b510      	push	{r4, lr}
1005871e:	2133      	movs	r1, #51	@ 0x33
10058720:	00c9      	lsls	r1, r1, #3
10058722:	4341      	muls	r1, r0
10058724:	4a1c      	ldr	r2, [pc, #112]	@ (10058798 <__arm_cp.10_0>)
10058726:	6812      	ldr	r2, [r2, #0]
10058728:	2394      	movs	r3, #148	@ 0x94
1005872a:	58d2      	ldr	r2, [r2, r3]
1005872c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
1005872e:	6852      	ldr	r2, [r2, #4]
10058730:	1854      	adds	r4, r2, r1
10058732:	212e      	movs	r1, #46	@ 0x2e
10058734:	221f      	movs	r2, #31
10058736:	5462      	strb	r2, [r4, r1]
10058738:	2180      	movs	r1, #128	@ 0x80
1005873a:	2200      	movs	r2, #0
1005873c:	5062      	str	r2, [r4, r1]
1005873e:	2130      	movs	r1, #48	@ 0x30
10058740:	5460      	strb	r0, [r4, r1]
10058742:	218c      	movs	r1, #140	@ 0x8c
10058744:	5062      	str	r2, [r4, r1]
10058746:	21e3      	movs	r1, #227	@ 0xe3
10058748:	5462      	strb	r2, [r4, r1]
1005874a:	2141      	movs	r1, #65	@ 0x41
1005874c:	23ff      	movs	r3, #255	@ 0xff
1005874e:	5463      	strb	r3, [r4, r1]
10058750:	212f      	movs	r1, #47	@ 0x2f
10058752:	2307      	movs	r3, #7
10058754:	5463      	strb	r3, [r4, r1]
10058756:	85a2      	strh	r2, [r4, #44]	@ 0x2c
10058758:	2101      	movs	r1, #1
1005875a:	8521      	strh	r1, [r4, #40]	@ 0x28
1005875c:	490f      	ldr	r1, [pc, #60]	@ (1005879c <__arm_cp.10_1>)
1005875e:	8761      	strh	r1, [r4, #58]	@ 0x3a
10058760:	2119      	movs	r1, #25
10058762:	0409      	lsls	r1, r1, #16
10058764:	65a1      	str	r1, [r4, #88]	@ 0x58
10058766:	65e1      	str	r1, [r4, #92]	@ 0x5c
10058768:	6621      	str	r1, [r4, #96]	@ 0x60
1005876a:	4621      	mov	r1, r4
1005876c:	3190      	adds	r1, #144	@ 0x90
1005876e:	221b      	movs	r2, #27
10058770:	804a      	strh	r2, [r1, #2]
10058772:	2390      	movs	r3, #144	@ 0x90
10058774:	52e2      	strh	r2, [r4, r3]
10058776:	4a0a      	ldr	r2, [pc, #40]	@ (100587a0 <__arm_cp.10_2>)
10058778:	4b0a      	ldr	r3, [pc, #40]	@ (100587a4 <__arm_cp.10_3>)
1005877a:	604b      	str	r3, [r1, #4]
1005877c:	608a      	str	r2, [r1, #8]
1005877e:	2229      	movs	r2, #41	@ 0x29
10058780:	00d2      	lsls	r2, r2, #3
10058782:	818a      	strh	r2, [r1, #12]
10058784:	f001 fb1c 	bl	10059dc0 <llc_cpe_per_init>
10058788:	4620      	mov	r0, r4
1005878a:	f002 fb40 	bl	1005ae0e <llc_subrate_reset_params>
1005878e:	3478      	adds	r4, #120	@ 0x78
10058790:	4620      	mov	r0, r4
10058792:	f009 fe75 	bl	10062480 <ACL_list_init>
10058796:	bd10      	pop	{r4, pc}

10058798 <__arm_cp.10_0>:
10058798:	20001174 	.word	0x20001174

1005879c <__arm_cp.10_1>:
1005879c:	0000ffff 	.word	0x0000ffff

100587a0 <__arm_cp.10_2>:
100587a0:	001b0148 	.word	0x001b0148

100587a4 <__arm_cp.10_3>:
100587a4:	0148001b 	.word	0x0148001b

100587a8 <llc_conn_mem_allocate>:
100587a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100587aa:	b089      	sub	sp, #36	@ 0x24
100587ac:	2b01      	cmp	r3, #1
100587ae:	d000      	beq.n	100587b2 <llc_conn_mem_allocate+0xa>
100587b0:	e0a2      	b.n	100588f8 <llc_conn_mem_allocate+0x150>
100587b2:	ab00      	add	r3, sp, #0
100587b4:	c307      	stmia	r3!, {r0, r1, r2}
100587b6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
100587b8:	980e      	ldr	r0, [sp, #56]	@ 0x38
100587ba:	9003      	str	r0, [sp, #12]
100587bc:	2029      	movs	r0, #41	@ 0x29
100587be:	4c4f      	ldr	r4, [pc, #316]	@ (100588fc <__arm_cp.12_0>)
100587c0:	5c20      	ldrb	r0, [r4, r0]
100587c2:	1e42      	subs	r2, r0, #1
100587c4:	4190      	sbcs	r0, r2
100587c6:	4308      	orrs	r0, r1
100587c8:	7fe1      	ldrb	r1, [r4, #31]
100587ca:	9108      	str	r1, [sp, #32]
100587cc:	f005 fef8 	bl	1005e5c0 <LL_get_control_pdu_size>
100587d0:	9006      	str	r0, [sp, #24]
100587d2:	7ae6      	ldrb	r6, [r4, #11]
100587d4:	9604      	str	r6, [sp, #16]
100587d6:	2701      	movs	r7, #1
100587d8:	2118      	movs	r1, #24
100587da:	4c49      	ldr	r4, [pc, #292]	@ (10058900 <__arm_cp.12_1>)
100587dc:	4638      	mov	r0, r7
100587de:	47a0      	blx	r4
100587e0:	4623      	mov	r3, r4
100587e2:	4c48      	ldr	r4, [pc, #288]	@ (10058904 <__arm_cp.12_2>)
100587e4:	6821      	ldr	r1, [r4, #0]
100587e6:	2594      	movs	r5, #148	@ 0x94
100587e8:	5949      	ldr	r1, [r1, r5]
100587ea:	63c8      	str	r0, [r1, #60]	@ 0x3c
100587ec:	2138      	movs	r1, #56	@ 0x38
100587ee:	4638      	mov	r0, r7
100587f0:	4798      	blx	r3
100587f2:	6821      	ldr	r1, [r4, #0]
100587f4:	5949      	ldr	r1, [r1, r5]
100587f6:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100587f8:	6008      	str	r0, [r1, #0]
100587fa:	2033      	movs	r0, #51	@ 0x33
100587fc:	00c4      	lsls	r4, r0, #3
100587fe:	4630      	mov	r0, r6
10058800:	4621      	mov	r1, r4
10058802:	4a3f      	ldr	r2, [pc, #252]	@ (10058900 <__arm_cp.12_1>)
10058804:	4790      	blx	r2
10058806:	493f      	ldr	r1, [pc, #252]	@ (10058904 <__arm_cp.12_2>)
10058808:	6809      	ldr	r1, [r1, #0]
1005880a:	5949      	ldr	r1, [r1, r5]
1005880c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005880e:	6048      	str	r0, [r1, #4]
10058810:	9808      	ldr	r0, [sp, #32]
10058812:	4087      	lsls	r7, r0
10058814:	f001 fac4 	bl	10059da0 <llc_cpe_mem_allocate>
10058818:	b2f8      	uxtb	r0, r7
1005881a:	2108      	movs	r1, #8
1005881c:	4a38      	ldr	r2, [pc, #224]	@ (10058900 <__arm_cp.12_1>)
1005881e:	4790      	blx	r2
10058820:	4938      	ldr	r1, [pc, #224]	@ (10058904 <__arm_cp.12_2>)
10058822:	6809      	ldr	r1, [r1, #0]
10058824:	9508      	str	r5, [sp, #32]
10058826:	5949      	ldr	r1, [r1, r5]
10058828:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005882a:	6809      	ldr	r1, [r1, #0]
1005882c:	2224      	movs	r2, #36	@ 0x24
1005882e:	2600      	movs	r6, #0
10058830:	548e      	strb	r6, [r1, r2]
10058832:	6208      	str	r0, [r1, #32]
10058834:	3124      	adds	r1, #36	@ 0x24
10058836:	704f      	strb	r7, [r1, #1]
10058838:	9405      	str	r4, [sp, #20]
1005883a:	9804      	ldr	r0, [sp, #16]
1005883c:	4344      	muls	r4, r0
1005883e:	9407      	str	r4, [sp, #28]
10058840:	9d06      	ldr	r5, [sp, #24]
10058842:	9c08      	ldr	r4, [sp, #32]
10058844:	9807      	ldr	r0, [sp, #28]
10058846:	42b0      	cmp	r0, r6
10058848:	d01b      	beq.n	10058882 <llc_conn_mem_allocate+0xda>
1005884a:	2701      	movs	r7, #1
1005884c:	4638      	mov	r0, r7
1005884e:	4629      	mov	r1, r5
10058850:	f006 fb7c 	bl	1005ef4c <csmem_mem_0_assign>
10058854:	492b      	ldr	r1, [pc, #172]	@ (10058904 <__arm_cp.12_2>)
10058856:	6809      	ldr	r1, [r1, #0]
10058858:	5909      	ldr	r1, [r1, r4]
1005885a:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005885c:	6849      	ldr	r1, [r1, #4]
1005885e:	1989      	adds	r1, r1, r6
10058860:	2284      	movs	r2, #132	@ 0x84
10058862:	5088      	str	r0, [r1, r2]
10058864:	4638      	mov	r0, r7
10058866:	4629      	mov	r1, r5
10058868:	f006 fb70 	bl	1005ef4c <csmem_mem_0_assign>
1005886c:	4925      	ldr	r1, [pc, #148]	@ (10058904 <__arm_cp.12_2>)
1005886e:	6809      	ldr	r1, [r1, #0]
10058870:	5909      	ldr	r1, [r1, r4]
10058872:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10058874:	6849      	ldr	r1, [r1, #4]
10058876:	1989      	adds	r1, r1, r6
10058878:	2288      	movs	r2, #136	@ 0x88
1005887a:	5088      	str	r0, [r1, r2]
1005887c:	9805      	ldr	r0, [sp, #20]
1005887e:	1836      	adds	r6, r6, r0
10058880:	e7e0      	b.n	10058844 <llc_conn_mem_allocate+0x9c>
10058882:	9800      	ldr	r0, [sp, #0]
10058884:	2801      	cmp	r0, #1
10058886:	9c04      	ldr	r4, [sp, #16]
10058888:	d109      	bne.n	1005889e <llc_conn_mem_allocate+0xf6>
1005888a:	210e      	movs	r1, #14
1005888c:	4620      	mov	r0, r4
1005888e:	f006 fb5d 	bl	1005ef4c <csmem_mem_0_assign>
10058892:	491c      	ldr	r1, [pc, #112]	@ (10058904 <__arm_cp.12_2>)
10058894:	6809      	ldr	r1, [r1, #0]
10058896:	9a08      	ldr	r2, [sp, #32]
10058898:	5889      	ldr	r1, [r1, r2]
1005889a:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005889c:	6088      	str	r0, [r1, #8]
1005889e:	9801      	ldr	r0, [sp, #4]
100588a0:	2801      	cmp	r0, #1
100588a2:	d109      	bne.n	100588b8 <llc_conn_mem_allocate+0x110>
100588a4:	2108      	movs	r1, #8
100588a6:	4620      	mov	r0, r4
100588a8:	f006 fb50 	bl	1005ef4c <csmem_mem_0_assign>
100588ac:	4915      	ldr	r1, [pc, #84]	@ (10058904 <__arm_cp.12_2>)
100588ae:	6809      	ldr	r1, [r1, #0]
100588b0:	9a08      	ldr	r2, [sp, #32]
100588b2:	5889      	ldr	r1, [r1, r2]
100588b4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100588b6:	60c8      	str	r0, [r1, #12]
100588b8:	9802      	ldr	r0, [sp, #8]
100588ba:	2801      	cmp	r0, #1
100588bc:	d10f      	bne.n	100588de <llc_conn_mem_allocate+0x136>
100588be:	2120      	movs	r1, #32
100588c0:	4620      	mov	r0, r4
100588c2:	f006 fb43 	bl	1005ef4c <csmem_mem_0_assign>
100588c6:	4d0f      	ldr	r5, [pc, #60]	@ (10058904 <__arm_cp.12_2>)
100588c8:	6829      	ldr	r1, [r5, #0]
100588ca:	9a08      	ldr	r2, [sp, #32]
100588cc:	5889      	ldr	r1, [r1, r2]
100588ce:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100588d0:	6108      	str	r0, [r1, #16]
100588d2:	2001      	movs	r0, #1
100588d4:	2111      	movs	r1, #17
100588d6:	f006 fb39 	bl	1005ef4c <csmem_mem_0_assign>
100588da:	6829      	ldr	r1, [r5, #0]
100588dc:	6648      	str	r0, [r1, #100]	@ 0x64
100588de:	9803      	ldr	r0, [sp, #12]
100588e0:	2801      	cmp	r0, #1
100588e2:	d109      	bne.n	100588f8 <llc_conn_mem_allocate+0x150>
100588e4:	211c      	movs	r1, #28
100588e6:	4620      	mov	r0, r4
100588e8:	f006 fb30 	bl	1005ef4c <csmem_mem_0_assign>
100588ec:	4905      	ldr	r1, [pc, #20]	@ (10058904 <__arm_cp.12_2>)
100588ee:	6809      	ldr	r1, [r1, #0]
100588f0:	9a08      	ldr	r2, [sp, #32]
100588f2:	5889      	ldr	r1, [r1, r2]
100588f4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
100588f6:	6148      	str	r0, [r1, #20]
100588f8:	b009      	add	sp, #36	@ 0x24
100588fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

100588fc <__arm_cp.12_0>:
100588fc:	20001188 	.word	0x20001188

10058900 <__arm_cp.12_1>:
10058900:	1005ef4d 	.word	0x1005ef4d

10058904 <__arm_cp.12_2>:
10058904:	20001174 	.word	0x20001174

10058908 <llc_conn_clr_rx_acl_blocked>:
10058908:	2188      	movs	r1, #136	@ 0x88
1005890a:	5840      	ldr	r0, [r0, r1]
1005890c:	8801      	ldrh	r1, [r0, #0]
1005890e:	4a02      	ldr	r2, [pc, #8]	@ (10058918 <__arm_cp.1_0>)
10058910:	400a      	ands	r2, r1
10058912:	8002      	strh	r2, [r0, #0]
10058914:	4770      	bx	lr
10058916:	46c0      	nop			@ (mov r8, r8)

10058918 <__arm_cp.1_0>:
10058918:	0000feff 	.word	0x0000feff

1005891c <llc_conn_clr_rx_ctrl_pdu_full>:
1005891c:	2184      	movs	r1, #132	@ 0x84
1005891e:	5840      	ldr	r0, [r0, r1]
10058920:	8801      	ldrh	r1, [r0, #0]
10058922:	2201      	movs	r2, #1
10058924:	4391      	bics	r1, r2
10058926:	8001      	strh	r1, [r0, #0]
10058928:	4770      	bx	lr

1005892a <llc_conn_clr_tx_acl_blocked>:
1005892a:	2188      	movs	r1, #136	@ 0x88
1005892c:	5840      	ldr	r0, [r0, r1]
1005892e:	8801      	ldrh	r1, [r0, #0]
10058930:	2280      	movs	r2, #128	@ 0x80
10058932:	4391      	bics	r1, r2
10058934:	8001      	strh	r1, [r0, #0]
10058936:	4770      	bx	lr

10058938 <llc_conn_copy_tx_data_packet>:
10058938:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005893a:	460c      	mov	r4, r1
1005893c:	2180      	movs	r1, #128	@ 0x80
1005893e:	5c41      	ldrb	r1, [r0, r1]
10058940:	0649      	lsls	r1, r1, #25
10058942:	d40c      	bmi.n	1005895e <llc_conn_copy_tx_data_packet+0x26>
10058944:	3080      	adds	r0, #128	@ 0x80
10058946:	8a21      	ldrh	r1, [r4, #16]
10058948:	8862      	ldrh	r2, [r4, #2]
1005894a:	1a52      	subs	r2, r2, r1
1005894c:	b293      	uxth	r3, r2
1005894e:	8a45      	ldrh	r5, [r0, #18]
10058950:	42ab      	cmp	r3, r5
10058952:	d909      	bls.n	10058968 <llc_conn_copy_tx_data_packet+0x30>
10058954:	7a20      	ldrb	r0, [r4, #8]
10058956:	22f7      	movs	r2, #247	@ 0xf7
10058958:	4002      	ands	r2, r0
1005895a:	7222      	strb	r2, [r4, #8]
1005895c:	e001      	b.n	10058962 <llc_conn_copy_tx_data_packet+0x2a>
1005895e:	8a21      	ldrh	r1, [r4, #16]
10058960:	7b25      	ldrb	r5, [r4, #12]
10058962:	2010      	movs	r0, #16
10058964:	9001      	str	r0, [sp, #4]
10058966:	e005      	b.n	10058974 <llc_conn_copy_tx_data_packet+0x3c>
10058968:	69e0      	ldr	r0, [r4, #28]
1005896a:	1e43      	subs	r3, r0, #1
1005896c:	4198      	sbcs	r0, r3
1005896e:	0100      	lsls	r0, r0, #4
10058970:	9001      	str	r0, [sp, #4]
10058972:	4615      	mov	r5, r2
10058974:	2900      	cmp	r1, #0
10058976:	d102      	bne.n	1005897e <llc_conn_copy_tx_data_packet+0x46>
10058978:	7a20      	ldrb	r0, [r4, #8]
1005897a:	0780      	lsls	r0, r0, #30
1005897c:	d401      	bmi.n	10058982 <llc_conn_copy_tx_data_packet+0x4a>
1005897e:	2001      	movs	r0, #1
10058980:	e000      	b.n	10058984 <llc_conn_copy_tx_data_packet+0x4c>
10058982:	2002      	movs	r0, #2
10058984:	9002      	str	r0, [sp, #8]
10058986:	480e      	ldr	r0, [pc, #56]	@ (100589c0 <__arm_cp.4_0>)
10058988:	6800      	ldr	r0, [r0, #0]
1005898a:	278c      	movs	r7, #140	@ 0x8c
1005898c:	59c0      	ldr	r0, [r0, r7]
1005898e:	1d00      	adds	r0, r0, #4
10058990:	89e2      	ldrh	r2, [r4, #14]
10058992:	1851      	adds	r1, r2, r1
10058994:	261f      	movs	r6, #31
10058996:	400e      	ands	r6, r1
10058998:	19a9      	adds	r1, r5, r6
1005899a:	b28a      	uxth	r2, r1
1005899c:	69a1      	ldr	r1, [r4, #24]
1005899e:	f006 fc36 	bl	1005f20e <Mem_Buff_block_copy>
100589a2:	6160      	str	r0, [r4, #20]
100589a4:	7325      	strb	r5, [r4, #12]
100589a6:	4b06      	ldr	r3, [pc, #24]	@ (100589c0 <__arm_cp.4_0>)
100589a8:	6818      	ldr	r0, [r3, #0]
100589aa:	59c0      	ldr	r0, [r0, r7]
100589ac:	1830      	adds	r0, r6, r0
100589ae:	9901      	ldr	r1, [sp, #4]
100589b0:	9a02      	ldr	r2, [sp, #8]
100589b2:	4311      	orrs	r1, r2
100589b4:	7081      	strb	r1, [r0, #2]
100589b6:	6818      	ldr	r0, [r3, #0]
100589b8:	59c0      	ldr	r0, [r0, r7]
100589ba:	1830      	adds	r0, r6, r0
100589bc:	70c5      	strb	r5, [r0, #3]
100589be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100589c0 <__arm_cp.4_0>:
100589c0:	20001174 	.word	0x20001174

100589c4 <llc_conn_enhanced_get_latency>:
100589c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100589c6:	4605      	mov	r5, r0
100589c8:	202c      	movs	r0, #44	@ 0x2c
100589ca:	5c28      	ldrb	r0, [r5, r0]
100589cc:	2401      	movs	r4, #1
100589ce:	2803      	cmp	r0, #3
100589d0:	d13d      	bne.n	10058a4e <llc_conn_enhanced_get_latency+0x8a>
100589d2:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
100589d4:	2800      	cmp	r0, #0
100589d6:	d03a      	beq.n	10058a4e <llc_conn_enhanced_get_latency+0x8a>
100589d8:	4628      	mov	r0, r5
100589da:	f7ee fc2a 	bl	10047232 <BLEPLAT_CNTR_PacketGetDataPtr>
100589de:	4629      	mov	r1, r5
100589e0:	3128      	adds	r1, #40	@ 0x28
100589e2:	4288      	cmp	r0, r1
100589e4:	d133      	bne.n	10058a4e <llc_conn_enhanced_get_latency+0x8a>
100589e6:	462f      	mov	r7, r5
100589e8:	372c      	adds	r7, #44	@ 0x2c
100589ea:	2054      	movs	r0, #84	@ 0x54
100589ec:	5c38      	ldrb	r0, [r7, r0]
100589ee:	0600      	lsls	r0, r0, #24
100589f0:	0f80      	lsrs	r0, r0, #30
100589f2:	d12c      	bne.n	10058a4e <llc_conn_enhanced_get_latency+0x8a>
100589f4:	4628      	mov	r0, r5
100589f6:	30e3      	adds	r0, #227	@ 0xe3
100589f8:	7800      	ldrb	r0, [r0, #0]
100589fa:	0780      	lsls	r0, r0, #30
100589fc:	d427      	bmi.n	10058a4e <llc_conn_enhanced_get_latency+0x8a>
100589fe:	4628      	mov	r0, r5
10058a00:	30fa      	adds	r0, #250	@ 0xfa
10058a02:	8800      	ldrh	r0, [r0, #0]
10058a04:	2800      	cmp	r0, #0
10058a06:	d122      	bne.n	10058a4e <llc_conn_enhanced_get_latency+0x8a>
10058a08:	7938      	ldrb	r0, [r7, #4]
10058a0a:	2401      	movs	r4, #1
10058a0c:	4621      	mov	r1, r4
10058a0e:	f001 fc2b 	bl	1005a268 <llc_cpe_sm_get_active>
10058a12:	4606      	mov	r6, r0
10058a14:	7938      	ldrb	r0, [r7, #4]
10058a16:	2100      	movs	r1, #0
10058a18:	f001 fc26 	bl	1005a268 <llc_cpe_sm_get_active>
10058a1c:	4330      	orrs	r0, r6
10058a1e:	d102      	bne.n	10058a26 <llc_conn_enhanced_get_latency+0x62>
10058a20:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10058a22:	1c44      	adds	r4, r0, #1
10058a24:	e013      	b.n	10058a4e <llc_conn_enhanced_get_latency+0x8a>
10058a26:	20c9      	movs	r0, #201	@ 0xc9
10058a28:	0040      	lsls	r0, r0, #1
10058a2a:	1828      	adds	r0, r5, r0
10058a2c:	8801      	ldrh	r1, [r0, #0]
10058a2e:	07c9      	lsls	r1, r1, #31
10058a30:	d00d      	beq.n	10058a4e <llc_conn_enhanced_get_latency+0x8a>
10058a32:	8af9      	ldrh	r1, [r7, #22]
10058a34:	8840      	ldrh	r0, [r0, #2]
10058a36:	1a40      	subs	r0, r0, r1
10058a38:	b281      	uxth	r1, r0
10058a3a:	2902      	cmp	r1, #2
10058a3c:	d307      	bcc.n	10058a4e <llc_conn_enhanced_get_latency+0x8a>
10058a3e:	1e44      	subs	r4, r0, #1
10058a40:	b2a1      	uxth	r1, r4
10058a42:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
10058a44:	1c40      	adds	r0, r0, #1
10058a46:	b282      	uxth	r2, r0
10058a48:	4291      	cmp	r1, r2
10058a4a:	d300      	bcc.n	10058a4e <llc_conn_enhanced_get_latency+0x8a>
10058a4c:	4604      	mov	r4, r0
10058a4e:	b2a0      	uxth	r0, r4
10058a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10058a54 <llc_conn_get_conn_idx>:
10058a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058a56:	4604      	mov	r4, r0
10058a58:	25ff      	movs	r5, #255	@ 0xff
10058a5a:	480a      	ldr	r0, [pc, #40]	@ (10058a84 <__arm_cp.6_0>)
10058a5c:	4284      	cmp	r4, r0
10058a5e:	d00f      	beq.n	10058a80 <llc_conn_get_conn_idx+0x2c>
10058a60:	2600      	movs	r6, #0
10058a62:	4f09      	ldr	r7, [pc, #36]	@ (10058a88 <__arm_cp.6_1>)
10058a64:	6838      	ldr	r0, [r7, #0]
10058a66:	2134      	movs	r1, #52	@ 0x34
10058a68:	5c41      	ldrb	r1, [r0, r1]
10058a6a:	b2f0      	uxtb	r0, r6
10058a6c:	4288      	cmp	r0, r1
10058a6e:	d207      	bcs.n	10058a80 <llc_conn_get_conn_idx+0x2c>
10058a70:	f7ff fd84 	bl	1005857c <llc_conn_get_cntxt_per_p>
10058a74:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
10058a76:	42a0      	cmp	r0, r4
10058a78:	d001      	beq.n	10058a7e <llc_conn_get_conn_idx+0x2a>
10058a7a:	1c76      	adds	r6, r6, #1
10058a7c:	e7f2      	b.n	10058a64 <llc_conn_get_conn_idx+0x10>
10058a7e:	4635      	mov	r5, r6
10058a80:	b2e8      	uxtb	r0, r5
10058a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10058a84 <__arm_cp.6_0>:
10058a84:	0000ffff 	.word	0x0000ffff

10058a88 <__arm_cp.6_1>:
10058a88:	20001120 	.word	0x20001120

10058a8c <llc_conn_get_ctrl_pdu_data_p>:
10058a8c:	0089      	lsls	r1, r1, #2
10058a8e:	1840      	adds	r0, r0, r1
10058a90:	2184      	movs	r1, #132	@ 0x84
10058a92:	5840      	ldr	r0, [r0, r1]
10058a94:	1c80      	adds	r0, r0, #2
10058a96:	4770      	bx	lr

10058a98 <llc_conn_get_enc_on>:
10058a98:	2900      	cmp	r1, #0
10058a9a:	d001      	beq.n	10058aa0 <llc_conn_get_enc_on+0x8>
10058a9c:	2102      	movs	r1, #2
10058a9e:	e000      	b.n	10058aa2 <llc_conn_get_enc_on+0xa>
10058aa0:	2103      	movs	r1, #3
10058aa2:	2280      	movs	r2, #128	@ 0x80
10058aa4:	5882      	ldr	r2, [r0, r2]
10058aa6:	40ca      	lsrs	r2, r1
10058aa8:	2001      	movs	r0, #1
10058aaa:	4010      	ands	r0, r2
10058aac:	4770      	bx	lr

10058aae <llc_conn_get_rx_ctrl_pdu_full>:
10058aae:	2184      	movs	r1, #132	@ 0x84
10058ab0:	5840      	ldr	r0, [r0, r1]
10058ab2:	8801      	ldrh	r1, [r0, #0]
10058ab4:	2001      	movs	r0, #1
10058ab6:	4008      	ands	r0, r1
10058ab8:	4770      	bx	lr

10058aba <llc_conn_get_rx_acl_blocked>:
10058aba:	2188      	movs	r1, #136	@ 0x88
10058abc:	5840      	ldr	r0, [r0, r1]
10058abe:	8800      	ldrh	r0, [r0, #0]
10058ac0:	05c0      	lsls	r0, r0, #23
10058ac2:	0fc0      	lsrs	r0, r0, #31
10058ac4:	4770      	bx	lr

10058ac6 <llc_conn_get_tx_acl_blocked>:
10058ac6:	2188      	movs	r1, #136	@ 0x88
10058ac8:	5840      	ldr	r0, [r0, r1]
10058aca:	8800      	ldrh	r0, [r0, #0]
10058acc:	b2c0      	uxtb	r0, r0
10058ace:	09c0      	lsrs	r0, r0, #7
10058ad0:	4770      	bx	lr

10058ad2 <llc_conn_get_tx_ctrl_pdu_state>:
10058ad2:	2188      	movs	r1, #136	@ 0x88
10058ad4:	5840      	ldr	r0, [r0, r1]
10058ad6:	8801      	ldrh	r1, [r0, #0]
10058ad8:	2003      	movs	r0, #3
10058ada:	4008      	ands	r0, r1
10058adc:	4770      	bx	lr
	...

10058ae0 <llc_conn_guard_time_for_close_conn_event>:
10058ae0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058ae2:	4607      	mov	r7, r0
10058ae4:	2441      	movs	r4, #65	@ 0x41
10058ae6:	5d00      	ldrb	r0, [r0, r4]
10058ae8:	f7ee fe30 	bl	1004774c <BLEPLAT_CNTR_SmGetTxPhy>
10058aec:	4605      	mov	r5, r0
10058aee:	5d38      	ldrb	r0, [r7, r4]
10058af0:	f7ee fe1b 	bl	1004772a <BLEPLAT_CNTR_SmGetRxPhy>
10058af4:	2392      	movs	r3, #146	@ 0x92
10058af6:	1e6c      	subs	r4, r5, #1
10058af8:	b2e1      	uxtb	r1, r4
10058afa:	9702      	str	r7, [sp, #8]
10058afc:	3792      	adds	r7, #146	@ 0x92
10058afe:	2570      	movs	r5, #112	@ 0x70
10058b00:	2603      	movs	r6, #3
10058b02:	2905      	cmp	r1, #5
10058b04:	4632      	mov	r2, r6
10058b06:	9501      	str	r5, [sp, #4]
10058b08:	4629      	mov	r1, r5
10058b0a:	d805      	bhi.n	10058b18 <llc_conn_guard_time_for_close_conn_event+0x38>
10058b0c:	b261      	sxtb	r1, r4
10058b0e:	008a      	lsls	r2, r1, #2
10058b10:	4919      	ldr	r1, [pc, #100]	@ (10058b78 <__arm_cp.13_0>)
10058b12:	5889      	ldr	r1, [r1, r2]
10058b14:	4c19      	ldr	r4, [pc, #100]	@ (10058b7c <__arm_cp.13_1>)
10058b16:	58a2      	ldr	r2, [r4, r2]
10058b18:	9c02      	ldr	r4, [sp, #8]
10058b1a:	5ae3      	ldrh	r3, [r4, r3]
10058b1c:	887c      	ldrh	r4, [r7, #2]
10058b1e:	1e40      	subs	r0, r0, #1
10058b20:	b2c5      	uxtb	r5, r0
10058b22:	2d05      	cmp	r5, #5
10058b24:	d806      	bhi.n	10058b34 <llc_conn_guard_time_for_close_conn_event+0x54>
10058b26:	b240      	sxtb	r0, r0
10058b28:	0080      	lsls	r0, r0, #2
10058b2a:	4d13      	ldr	r5, [pc, #76]	@ (10058b78 <__arm_cp.13_0>)
10058b2c:	582d      	ldr	r5, [r5, r0]
10058b2e:	9501      	str	r5, [sp, #4]
10058b30:	4d12      	ldr	r5, [pc, #72]	@ (10058b7c <__arm_cp.13_1>)
10058b32:	582e      	ldr	r6, [r5, r0]
10058b34:	4093      	lsls	r3, r2
10058b36:	1858      	adds	r0, r3, r1
10058b38:	0200      	lsls	r0, r0, #8
10058b3a:	2147      	movs	r1, #71	@ 0x47
10058b3c:	00cd      	lsls	r5, r1, #3
10058b3e:	1940      	adds	r0, r0, r5
10058b40:	490f      	ldr	r1, [pc, #60]	@ (10058b80 <__arm_cp.13_2>)
10058b42:	f7e7 fb91 	bl	10040268 <__udivsi3>
10058b46:	9000      	str	r0, [sp, #0]
10058b48:	40b4      	lsls	r4, r6
10058b4a:	9801      	ldr	r0, [sp, #4]
10058b4c:	1820      	adds	r0, r4, r0
10058b4e:	0200      	lsls	r0, r0, #8
10058b50:	1940      	adds	r0, r0, r5
10058b52:	490b      	ldr	r1, [pc, #44]	@ (10058b80 <__arm_cp.13_2>)
10058b54:	f7e7 fb88 	bl	10040268 <__udivsi3>
10058b58:	4606      	mov	r6, r0
10058b5a:	88fc      	ldrh	r4, [r7, #6]
10058b5c:	f005 fd74 	bl	1005e648 <LL_sched_engine_return_actual_scheduler_margin>
10058b60:	9900      	ldr	r1, [sp, #0]
10058b62:	1808      	adds	r0, r1, r0
10058b64:	b2b1      	uxth	r1, r6
10058b66:	428c      	cmp	r4, r1
10058b68:	d800      	bhi.n	10058b6c <llc_conn_guard_time_for_close_conn_event+0x8c>
10058b6a:	4621      	mov	r1, r4
10058b6c:	1840      	adds	r0, r0, r1
10058b6e:	30cd      	adds	r0, #205	@ 0xcd
10058b70:	9902      	ldr	r1, [sp, #8]
10058b72:	66c8      	str	r0, [r1, #108]	@ 0x6c
10058b74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058b76:	46c0      	nop			@ (mov r8, r8)

10058b78 <__arm_cp.13_0>:
10058b78:	1006d080 	.word	0x1006d080

10058b7c <__arm_cp.13_1>:
10058b7c:	1006d068 	.word	0x1006d068

10058b80 <__arm_cp.13_2>:
10058b80:	00000271 	.word	0x00000271

10058b84 <llc_conn_list_add_address>:
10058b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058b86:	460a      	mov	r2, r1
10058b88:	4601      	mov	r1, r0
10058b8a:	4807      	ldr	r0, [pc, #28]	@ (10058ba8 <__arm_cp.14_0>)
10058b8c:	6800      	ldr	r0, [r0, #0]
10058b8e:	2394      	movs	r3, #148	@ 0x94
10058b90:	58c0      	ldr	r0, [r0, r3]
10058b92:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058b94:	6800      	ldr	r0, [r0, #0]
10058b96:	ab02      	add	r3, sp, #8
10058b98:	9301      	str	r3, [sp, #4]
10058b9a:	ab03      	add	r3, sp, #12
10058b9c:	9300      	str	r3, [sp, #0]
10058b9e:	3020      	adds	r0, #32
10058ba0:	2301      	movs	r3, #1
10058ba2:	f009 fd0f 	bl	100625c4 <addr8_list_add>
10058ba6:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

10058ba8 <__arm_cp.14_0>:
10058ba8:	20001174 	.word	0x20001174

10058bac <llc_conn_list_reset>:
10058bac:	b580      	push	{r7, lr}
10058bae:	4805      	ldr	r0, [pc, #20]	@ (10058bc4 <__arm_cp.15_0>)
10058bb0:	6800      	ldr	r0, [r0, #0]
10058bb2:	2194      	movs	r1, #148	@ 0x94
10058bb4:	5840      	ldr	r0, [r0, r1]
10058bb6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058bb8:	6800      	ldr	r0, [r0, #0]
10058bba:	3020      	adds	r0, #32
10058bbc:	f009 fd81 	bl	100626c2 <addr8_list_clear>
10058bc0:	bd80      	pop	{r7, pc}
10058bc2:	46c0      	nop			@ (mov r8, r8)

10058bc4 <__arm_cp.15_0>:
10058bc4:	20001174 	.word	0x20001174

10058bc8 <llc_conn_list_remove_address>:
10058bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10058bca:	460a      	mov	r2, r1
10058bcc:	4601      	mov	r1, r0
10058bce:	4807      	ldr	r0, [pc, #28]	@ (10058bec <__arm_cp.16_0>)
10058bd0:	6800      	ldr	r0, [r0, #0]
10058bd2:	2394      	movs	r3, #148	@ 0x94
10058bd4:	58c0      	ldr	r0, [r0, r3]
10058bd6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058bd8:	6800      	ldr	r0, [r0, #0]
10058bda:	ab02      	add	r3, sp, #8
10058bdc:	9301      	str	r3, [sp, #4]
10058bde:	ab03      	add	r3, sp, #12
10058be0:	9300      	str	r3, [sp, #0]
10058be2:	3020      	adds	r0, #32
10058be4:	2301      	movs	r3, #1
10058be6:	f009 fd30 	bl	1006264a <addr8_list_remove_by_addr>
10058bea:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

10058bec <__arm_cp.16_0>:
10058bec:	20001174 	.word	0x20001174

10058bf0 <llc_conn_list_search_address>:
10058bf0:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10058bf2:	460c      	mov	r4, r1
10058bf4:	4605      	mov	r5, r0
10058bf6:	f7ff fcb7 	bl	10058568 <llc_conn_get_cntxt_p>
10058bfa:	2132      	movs	r1, #50	@ 0x32
10058bfc:	5c40      	ldrb	r0, [r0, r1]
10058bfe:	2800      	cmp	r0, #0
10058c00:	d001      	beq.n	10058c06 <llc_conn_list_search_address+0x16>
10058c02:	2000      	movs	r0, #0
10058c04:	e011      	b.n	10058c2a <llc_conn_list_search_address+0x3a>
10058c06:	480a      	ldr	r0, [pc, #40]	@ (10058c30 <__arm_cp.17_0>)
10058c08:	6800      	ldr	r0, [r0, #0]
10058c0a:	2194      	movs	r1, #148	@ 0x94
10058c0c:	5840      	ldr	r0, [r0, r1]
10058c0e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10058c10:	6801      	ldr	r1, [r0, #0]
10058c12:	6a08      	ldr	r0, [r1, #32]
10058c14:	6a49      	ldr	r1, [r1, #36]	@ 0x24
10058c16:	aa03      	add	r2, sp, #12
10058c18:	2301      	movs	r3, #1
10058c1a:	9300      	str	r3, [sp, #0]
10058c1c:	9201      	str	r2, [sp, #4]
10058c1e:	22fe      	movs	r2, #254	@ 0xfe
10058c20:	4395      	bics	r5, r2
10058c22:	462a      	mov	r2, r5
10058c24:	4623      	mov	r3, r4
10058c26:	f009 fc69 	bl	100624fc <addr8_list_search>
10058c2a:	b004      	add	sp, #16
10058c2c:	bdb0      	pop	{r4, r5, r7, pc}
10058c2e:	46c0      	nop			@ (mov r8, r8)

10058c30 <__arm_cp.17_0>:
10058c30:	20001174 	.word	0x20001174

10058c34 <llc_conn_push_adv_set_terminated_event>:
10058c34:	b570      	push	{r4, r5, r6, lr}
10058c36:	460d      	mov	r5, r1
10058c38:	4604      	mov	r4, r0
10058c3a:	481a      	ldr	r0, [pc, #104]	@ (10058ca4 <__arm_cp.20_0>)
10058c3c:	6800      	ldr	r0, [r0, #0]
10058c3e:	212c      	movs	r1, #44	@ 0x2c
10058c40:	5c40      	ldrb	r0, [r0, r1]
10058c42:	07c0      	lsls	r0, r0, #31
10058c44:	0ec1      	lsrs	r1, r0, #27
10058c46:	d101      	bne.n	10058c4c <llc_conn_push_adv_set_terminated_event+0x18>
10058c48:	2211      	movs	r2, #17
10058c4a:	e00a      	b.n	10058c62 <llc_conn_push_adv_set_terminated_event+0x2e>
10058c4c:	4816      	ldr	r0, [pc, #88]	@ (10058ca8 <__arm_cp.20_1>)
10058c4e:	6800      	ldr	r0, [r0, #0]
10058c50:	223d      	movs	r2, #61	@ 0x3d
10058c52:	5c82      	ldrb	r2, [r0, r2]
10058c54:	0692      	lsls	r2, r2, #26
10058c56:	d524      	bpl.n	10058ca2 <llc_conn_push_adv_set_terminated_event+0x6e>
10058c58:	303d      	adds	r0, #61	@ 0x3d
10058c5a:	7ac0      	ldrb	r0, [r0, #11]
10058c5c:	0780      	lsls	r0, r0, #30
10058c5e:	d520      	bpl.n	10058ca2 <llc_conn_push_adv_set_terminated_event+0x6e>
10058c60:	221f      	movs	r2, #31
10058c62:	204e      	movs	r0, #78	@ 0x4e
10058c64:	43c0      	mvns	r0, r0
10058c66:	4041      	eors	r1, r0
10058c68:	4810      	ldr	r0, [pc, #64]	@ (10058cac <__arm_cp.20_2>)
10058c6a:	6800      	ldr	r0, [r0, #0]
10058c6c:	6940      	ldr	r0, [r0, #20]
10058c6e:	b2ce      	uxtb	r6, r1
10058c70:	2303      	movs	r3, #3
10058c72:	4631      	mov	r1, r6
10058c74:	f7fa fbf8 	bl	10053468 <aci_event_fifo_push_header>
10058c78:	2800      	cmp	r0, #0
10058c7a:	d012      	beq.n	10058ca2 <llc_conn_push_adv_set_terminated_event+0x6e>
10058c7c:	4601      	mov	r1, r0
10058c7e:	7284      	strb	r4, [r0, #10]
10058c80:	2000      	movs	r0, #0
10058c82:	7308      	strb	r0, [r1, #12]
10058c84:	724d      	strb	r5, [r1, #9]
10058c86:	7208      	strb	r0, [r1, #8]
10058c88:	2012      	movs	r0, #18
10058c8a:	71c8      	strb	r0, [r1, #7]
10058c8c:	2006      	movs	r0, #6
10058c8e:	7188      	strb	r0, [r1, #6]
10058c90:	203e      	movs	r0, #62	@ 0x3e
10058c92:	7148      	strb	r0, [r1, #5]
10058c94:	2004      	movs	r0, #4
10058c96:	7108      	strb	r0, [r1, #4]
10058c98:	0a20      	lsrs	r0, r4, #8
10058c9a:	72c8      	strb	r0, [r1, #11]
10058c9c:	4630      	mov	r0, r6
10058c9e:	f7fa fc80 	bl	100535a2 <aci_event_fifo_push>
10058ca2:	bd70      	pop	{r4, r5, r6, pc}

10058ca4 <__arm_cp.20_0>:
10058ca4:	20001120 	.word	0x20001120

10058ca8 <__arm_cp.20_1>:
10058ca8:	20001174 	.word	0x20001174

10058cac <__arm_cp.20_2>:
10058cac:	20001124 	.word	0x20001124

10058cb0 <llc_conn_push_connection_complete_event>:
10058cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10058cb2:	b08d      	sub	sp, #52	@ 0x34
10058cb4:	4604      	mov	r4, r0
10058cb6:	4895      	ldr	r0, [pc, #596]	@ (10058f0c <__arm_cp.21_0>)
10058cb8:	6800      	ldr	r0, [r0, #0]
10058cba:	212c      	movs	r1, #44	@ 0x2c
10058cbc:	5c40      	ldrb	r0, [r0, r1]
10058cbe:	07c0      	lsls	r0, r0, #31
10058cc0:	0ec5      	lsrs	r5, r0, #27
10058cc2:	206f      	movs	r0, #111	@ 0x6f
10058cc4:	43c6      	mvns	r6, r0
10058cc6:	406e      	eors	r6, r5
10058cc8:	f002 f822 	bl	1005ad10 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10058ccc:	4990      	ldr	r1, [pc, #576]	@ (10058f10 <__arm_cp.21_1>)
10058cce:	6809      	ldr	r1, [r1, #0]
10058cd0:	223d      	movs	r2, #61	@ 0x3d
10058cd2:	5c8b      	ldrb	r3, [r1, r2]
10058cd4:	2220      	movs	r2, #32
10058cd6:	4013      	ands	r3, r2
10058cd8:	313d      	adds	r1, #61	@ 0x3d
10058cda:	2800      	cmp	r0, #0
10058cdc:	d066      	beq.n	10058dac <llc_conn_push_connection_complete_event+0xfc>
10058cde:	2b00      	cmp	r3, #0
10058ce0:	d100      	bne.n	10058ce4 <llc_conn_push_connection_complete_event+0x34>
10058ce2:	e110      	b.n	10058f06 <llc_conn_push_connection_complete_event+0x256>
10058ce4:	7b88      	ldrb	r0, [r1, #14]
10058ce6:	07c0      	lsls	r0, r0, #31
10058ce8:	d063      	beq.n	10058db2 <llc_conn_push_connection_complete_event+0x102>
10058cea:	2d00      	cmp	r5, #0
10058cec:	d100      	bne.n	10058cf0 <llc_conn_push_connection_complete_event+0x40>
10058cee:	2212      	movs	r2, #18
10058cf0:	8aa0      	ldrh	r0, [r4, #20]
10058cf2:	900c      	str	r0, [sp, #48]	@ 0x30
10058cf4:	7da7      	ldrb	r7, [r4, #22]
10058cf6:	7de0      	ldrb	r0, [r4, #23]
10058cf8:	9008      	str	r0, [sp, #32]
10058cfa:	8a60      	ldrh	r0, [r4, #18]
10058cfc:	900b      	str	r0, [sp, #44]	@ 0x2c
10058cfe:	8a20      	ldrh	r0, [r4, #16]
10058d00:	9009      	str	r0, [sp, #36]	@ 0x24
10058d02:	89a0      	ldrh	r0, [r4, #12]
10058d04:	900a      	str	r0, [sp, #40]	@ 0x28
10058d06:	6820      	ldr	r0, [r4, #0]
10058d08:	9005      	str	r0, [sp, #20]
10058d0a:	6860      	ldr	r0, [r4, #4]
10058d0c:	9007      	str	r0, [sp, #28]
10058d0e:	68a0      	ldr	r0, [r4, #8]
10058d10:	9006      	str	r0, [sp, #24]
10058d12:	7e20      	ldrb	r0, [r4, #24]
10058d14:	9003      	str	r0, [sp, #12]
10058d16:	7e60      	ldrb	r0, [r4, #25]
10058d18:	9004      	str	r0, [sp, #16]
10058d1a:	89e5      	ldrh	r5, [r4, #14]
10058d1c:	7ea0      	ldrb	r0, [r4, #26]
10058d1e:	9002      	str	r0, [sp, #8]
10058d20:	487c      	ldr	r0, [pc, #496]	@ (10058f14 <__arm_cp.21_2>)
10058d22:	6800      	ldr	r0, [r0, #0]
10058d24:	6900      	ldr	r0, [r0, #16]
10058d26:	b2f1      	uxtb	r1, r6
10058d28:	230a      	movs	r3, #10
10058d2a:	f7fa fb9d 	bl	10053468 <aci_event_fifo_push_header>
10058d2e:	2800      	cmp	r0, #0
10058d30:	d100      	bne.n	10058d34 <llc_conn_push_connection_complete_event+0x84>
10058d32:	e0e8      	b.n	10058f06 <llc_conn_push_connection_complete_event+0x256>
10058d34:	4604      	mov	r4, r0
10058d36:	9701      	str	r7, [sp, #4]
10058d38:	4607      	mov	r7, r0
10058d3a:	371f      	adds	r7, #31
10058d3c:	7245      	strb	r5, [r0, #9]
10058d3e:	9803      	ldr	r0, [sp, #12]
10058d40:	7320      	strb	r0, [r4, #12]
10058d42:	9804      	ldr	r0, [sp, #16]
10058d44:	72e0      	strb	r0, [r4, #11]
10058d46:	9802      	ldr	r0, [sp, #8]
10058d48:	7220      	strb	r0, [r4, #8]
10058d4a:	0a28      	lsrs	r0, r5, #8
10058d4c:	72a0      	strb	r0, [r4, #10]
10058d4e:	4620      	mov	r0, r4
10058d50:	300d      	adds	r0, #13
10058d52:	2506      	movs	r5, #6
10058d54:	9905      	ldr	r1, [sp, #20]
10058d56:	462a      	mov	r2, r5
10058d58:	4b6f      	ldr	r3, [pc, #444]	@ (10058f18 <__arm_cp.21_3>)
10058d5a:	4798      	blx	r3
10058d5c:	4620      	mov	r0, r4
10058d5e:	3013      	adds	r0, #19
10058d60:	9906      	ldr	r1, [sp, #24]
10058d62:	462a      	mov	r2, r5
10058d64:	4b6c      	ldr	r3, [pc, #432]	@ (10058f18 <__arm_cp.21_3>)
10058d66:	4798      	blx	r3
10058d68:	4b6b      	ldr	r3, [pc, #428]	@ (10058f18 <__arm_cp.21_3>)
10058d6a:	4620      	mov	r0, r4
10058d6c:	3019      	adds	r0, #25
10058d6e:	9907      	ldr	r1, [sp, #28]
10058d70:	462a      	mov	r2, r5
10058d72:	4798      	blx	r3
10058d74:	2021      	movs	r0, #33	@ 0x21
10058d76:	9909      	ldr	r1, [sp, #36]	@ 0x24
10058d78:	5421      	strb	r1, [r4, r0]
10058d7a:	2025      	movs	r0, #37	@ 0x25
10058d7c:	9a08      	ldr	r2, [sp, #32]
10058d7e:	5422      	strb	r2, [r4, r0]
10058d80:	4620      	mov	r0, r4
10058d82:	3021      	adds	r0, #33	@ 0x21
10058d84:	0a09      	lsrs	r1, r1, #8
10058d86:	7041      	strb	r1, [r0, #1]
10058d88:	990a      	ldr	r1, [sp, #40]	@ 0x28
10058d8a:	0a08      	lsrs	r0, r1, #8
10058d8c:	7078      	strb	r0, [r7, #1]
10058d8e:	7039      	strb	r1, [r7, #0]
10058d90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10058d92:	0a08      	lsrs	r0, r1, #8
10058d94:	7178      	strb	r0, [r7, #5]
10058d96:	7139      	strb	r1, [r7, #4]
10058d98:	990c      	ldr	r1, [sp, #48]	@ 0x30
10058d9a:	0a08      	lsrs	r0, r1, #8
10058d9c:	7278      	strb	r0, [r7, #9]
10058d9e:	7239      	strb	r1, [r7, #8]
10058da0:	9801      	ldr	r0, [sp, #4]
10058da2:	71f8      	strb	r0, [r7, #7]
10058da4:	1d20      	adds	r0, r4, #4
10058da6:	2129      	movs	r1, #41	@ 0x29
10058da8:	2222      	movs	r2, #34	@ 0x22
10058daa:	e0a2      	b.n	10058ef2 <llc_conn_push_connection_complete_event+0x242>
10058dac:	2b00      	cmp	r3, #0
10058dae:	d100      	bne.n	10058db2 <llc_conn_push_connection_complete_event+0x102>
10058db0:	e0a9      	b.n	10058f06 <llc_conn_push_connection_complete_event+0x256>
10058db2:	7a88      	ldrb	r0, [r1, #10]
10058db4:	0780      	lsls	r0, r0, #30
10058db6:	d445      	bmi.n	10058e44 <llc_conn_push_connection_complete_event+0x194>
10058db8:	7a48      	ldrb	r0, [r1, #9]
10058dba:	07c0      	lsls	r0, r0, #31
10058dbc:	d100      	bne.n	10058dc0 <llc_conn_push_connection_complete_event+0x110>
10058dbe:	e0a2      	b.n	10058f06 <llc_conn_push_connection_complete_event+0x256>
10058dc0:	2008      	movs	r0, #8
10058dc2:	4305      	orrs	r5, r0
10058dc4:	7de0      	ldrb	r0, [r4, #23]
10058dc6:	900c      	str	r0, [sp, #48]	@ 0x30
10058dc8:	8a60      	ldrh	r0, [r4, #18]
10058dca:	900b      	str	r0, [sp, #44]	@ 0x2c
10058dcc:	8a20      	ldrh	r0, [r4, #16]
10058dce:	9009      	str	r0, [sp, #36]	@ 0x24
10058dd0:	89a0      	ldrh	r0, [r4, #12]
10058dd2:	900a      	str	r0, [sp, #40]	@ 0x28
10058dd4:	6820      	ldr	r0, [r4, #0]
10058dd6:	9008      	str	r0, [sp, #32]
10058dd8:	7e20      	ldrb	r0, [r4, #24]
10058dda:	9006      	str	r0, [sp, #24]
10058ddc:	7e60      	ldrb	r0, [r4, #25]
10058dde:	9007      	str	r0, [sp, #28]
10058de0:	89e7      	ldrh	r7, [r4, #14]
10058de2:	7ea0      	ldrb	r0, [r4, #26]
10058de4:	9005      	str	r0, [sp, #20]
10058de6:	484b      	ldr	r0, [pc, #300]	@ (10058f14 <__arm_cp.21_2>)
10058de8:	6800      	ldr	r0, [r0, #0]
10058dea:	6900      	ldr	r0, [r0, #16]
10058dec:	b2f1      	uxtb	r1, r6
10058dee:	2306      	movs	r3, #6
10058df0:	462a      	mov	r2, r5
10058df2:	f7fa fb39 	bl	10053468 <aci_event_fifo_push_header>
10058df6:	2800      	cmp	r0, #0
10058df8:	d100      	bne.n	10058dfc <llc_conn_push_connection_complete_event+0x14c>
10058dfa:	e084      	b.n	10058f06 <llc_conn_push_connection_complete_event+0x256>
10058dfc:	4604      	mov	r4, r0
10058dfe:	4605      	mov	r5, r0
10058e00:	3513      	adds	r5, #19
10058e02:	7247      	strb	r7, [r0, #9]
10058e04:	9806      	ldr	r0, [sp, #24]
10058e06:	7320      	strb	r0, [r4, #12]
10058e08:	9807      	ldr	r0, [sp, #28]
10058e0a:	72e0      	strb	r0, [r4, #11]
10058e0c:	9805      	ldr	r0, [sp, #20]
10058e0e:	7220      	strb	r0, [r4, #8]
10058e10:	0a38      	lsrs	r0, r7, #8
10058e12:	72a0      	strb	r0, [r4, #10]
10058e14:	4620      	mov	r0, r4
10058e16:	300d      	adds	r0, #13
10058e18:	2206      	movs	r2, #6
10058e1a:	9908      	ldr	r1, [sp, #32]
10058e1c:	f7ed f82c 	bl	10045e78 <BLEPLAT_MemCpy>
10058e20:	9909      	ldr	r1, [sp, #36]	@ 0x24
10058e22:	0a08      	lsrs	r0, r1, #8
10058e24:	75a0      	strb	r0, [r4, #22]
10058e26:	7561      	strb	r1, [r4, #21]
10058e28:	990a      	ldr	r1, [sp, #40]	@ 0x28
10058e2a:	0a08      	lsrs	r0, r1, #8
10058e2c:	7068      	strb	r0, [r5, #1]
10058e2e:	7029      	strb	r1, [r5, #0]
10058e30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10058e32:	0a08      	lsrs	r0, r1, #8
10058e34:	7168      	strb	r0, [r5, #5]
10058e36:	7129      	strb	r1, [r5, #4]
10058e38:	980c      	ldr	r0, [sp, #48]	@ 0x30
10058e3a:	7660      	strb	r0, [r4, #25]
10058e3c:	1d20      	adds	r0, r4, #4
10058e3e:	2101      	movs	r1, #1
10058e40:	2213      	movs	r2, #19
10058e42:	e056      	b.n	10058ef2 <llc_conn_push_connection_complete_event+0x242>
10058e44:	2d00      	cmp	r5, #0
10058e46:	d001      	beq.n	10058e4c <llc_conn_push_connection_complete_event+0x19c>
10058e48:	221c      	movs	r2, #28
10058e4a:	e000      	b.n	10058e4e <llc_conn_push_connection_complete_event+0x19e>
10058e4c:	220d      	movs	r2, #13
10058e4e:	7de0      	ldrb	r0, [r4, #23]
10058e50:	900a      	str	r0, [sp, #40]	@ 0x28
10058e52:	8a67      	ldrh	r7, [r4, #18]
10058e54:	8a20      	ldrh	r0, [r4, #16]
10058e56:	900b      	str	r0, [sp, #44]	@ 0x2c
10058e58:	89a0      	ldrh	r0, [r4, #12]
10058e5a:	900c      	str	r0, [sp, #48]	@ 0x30
10058e5c:	6820      	ldr	r0, [r4, #0]
10058e5e:	9007      	str	r0, [sp, #28]
10058e60:	6860      	ldr	r0, [r4, #4]
10058e62:	9009      	str	r0, [sp, #36]	@ 0x24
10058e64:	68a0      	ldr	r0, [r4, #8]
10058e66:	9008      	str	r0, [sp, #32]
10058e68:	7e20      	ldrb	r0, [r4, #24]
10058e6a:	9005      	str	r0, [sp, #20]
10058e6c:	7e60      	ldrb	r0, [r4, #25]
10058e6e:	9006      	str	r0, [sp, #24]
10058e70:	89e5      	ldrh	r5, [r4, #14]
10058e72:	7ea0      	ldrb	r0, [r4, #26]
10058e74:	9004      	str	r0, [sp, #16]
10058e76:	4827      	ldr	r0, [pc, #156]	@ (10058f14 <__arm_cp.21_2>)
10058e78:	6800      	ldr	r0, [r0, #0]
10058e7a:	6900      	ldr	r0, [r0, #16]
10058e7c:	b2f1      	uxtb	r1, r6
10058e7e:	2309      	movs	r3, #9
10058e80:	f7fa faf2 	bl	10053468 <aci_event_fifo_push_header>
10058e84:	2800      	cmp	r0, #0
10058e86:	d03e      	beq.n	10058f06 <llc_conn_push_connection_complete_event+0x256>
10058e88:	4604      	mov	r4, r0
10058e8a:	9703      	str	r7, [sp, #12]
10058e8c:	4607      	mov	r7, r0
10058e8e:	371f      	adds	r7, #31
10058e90:	7245      	strb	r5, [r0, #9]
10058e92:	9805      	ldr	r0, [sp, #20]
10058e94:	7320      	strb	r0, [r4, #12]
10058e96:	9806      	ldr	r0, [sp, #24]
10058e98:	72e0      	strb	r0, [r4, #11]
10058e9a:	9804      	ldr	r0, [sp, #16]
10058e9c:	7220      	strb	r0, [r4, #8]
10058e9e:	0a28      	lsrs	r0, r5, #8
10058ea0:	72a0      	strb	r0, [r4, #10]
10058ea2:	4620      	mov	r0, r4
10058ea4:	300d      	adds	r0, #13
10058ea6:	2506      	movs	r5, #6
10058ea8:	9907      	ldr	r1, [sp, #28]
10058eaa:	462a      	mov	r2, r5
10058eac:	4b1a      	ldr	r3, [pc, #104]	@ (10058f18 <__arm_cp.21_3>)
10058eae:	4798      	blx	r3
10058eb0:	4620      	mov	r0, r4
10058eb2:	3013      	adds	r0, #19
10058eb4:	9908      	ldr	r1, [sp, #32]
10058eb6:	462a      	mov	r2, r5
10058eb8:	4b17      	ldr	r3, [pc, #92]	@ (10058f18 <__arm_cp.21_3>)
10058eba:	4798      	blx	r3
10058ebc:	4b16      	ldr	r3, [pc, #88]	@ (10058f18 <__arm_cp.21_3>)
10058ebe:	4620      	mov	r0, r4
10058ec0:	3019      	adds	r0, #25
10058ec2:	9909      	ldr	r1, [sp, #36]	@ 0x24
10058ec4:	462a      	mov	r2, r5
10058ec6:	4798      	blx	r3
10058ec8:	2021      	movs	r0, #33	@ 0x21
10058eca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10058ecc:	5422      	strb	r2, [r4, r0]
10058ece:	2025      	movs	r0, #37	@ 0x25
10058ed0:	990a      	ldr	r1, [sp, #40]	@ 0x28
10058ed2:	5421      	strb	r1, [r4, r0]
10058ed4:	1d20      	adds	r0, r4, #4
10058ed6:	4621      	mov	r1, r4
10058ed8:	3121      	adds	r1, #33	@ 0x21
10058eda:	0a12      	lsrs	r2, r2, #8
10058edc:	704a      	strb	r2, [r1, #1]
10058ede:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10058ee0:	0a11      	lsrs	r1, r2, #8
10058ee2:	7079      	strb	r1, [r7, #1]
10058ee4:	703a      	strb	r2, [r7, #0]
10058ee6:	9a03      	ldr	r2, [sp, #12]
10058ee8:	0a11      	lsrs	r1, r2, #8
10058eea:	7179      	strb	r1, [r7, #5]
10058eec:	713a      	strb	r2, [r7, #4]
10058eee:	210a      	movs	r1, #10
10058ef0:	221f      	movs	r2, #31
10058ef2:	2304      	movs	r3, #4
10058ef4:	7123      	strb	r3, [r4, #4]
10058ef6:	233e      	movs	r3, #62	@ 0x3e
10058ef8:	7043      	strb	r3, [r0, #1]
10058efa:	71e1      	strb	r1, [r4, #7]
10058efc:	71a2      	strb	r2, [r4, #6]
10058efe:	b2f0      	uxtb	r0, r6
10058f00:	4621      	mov	r1, r4
10058f02:	f7fa fb4e 	bl	100535a2 <aci_event_fifo_push>
10058f06:	b00d      	add	sp, #52	@ 0x34
10058f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058f0a:	46c0      	nop			@ (mov r8, r8)

10058f0c <__arm_cp.21_0>:
10058f0c:	20001120 	.word	0x20001120

10058f10 <__arm_cp.21_1>:
10058f10:	20001174 	.word	0x20001174

10058f14 <__arm_cp.21_2>:
10058f14:	20001124 	.word	0x20001124

10058f18 <__arm_cp.21_3>:
10058f18:	10045e79 	.word	0x10045e79

10058f1c <llc_conn_push_csa_event>:
10058f1c:	b5b0      	push	{r4, r5, r7, lr}
10058f1e:	460d      	mov	r5, r1
10058f20:	4604      	mov	r4, r0
10058f22:	4812      	ldr	r0, [pc, #72]	@ (10058f6c <__arm_cp.22_0>)
10058f24:	6800      	ldr	r0, [r0, #0]
10058f26:	213d      	movs	r1, #61	@ 0x3d
10058f28:	5c41      	ldrb	r1, [r0, r1]
10058f2a:	0689      	lsls	r1, r1, #26
10058f2c:	d51c      	bpl.n	10058f68 <llc_conn_push_csa_event+0x4c>
10058f2e:	303d      	adds	r0, #61	@ 0x3d
10058f30:	7ac0      	ldrb	r0, [r0, #11]
10058f32:	0700      	lsls	r0, r0, #28
10058f34:	d518      	bpl.n	10058f68 <llc_conn_push_csa_event+0x4c>
10058f36:	480e      	ldr	r0, [pc, #56]	@ (10058f70 <__arm_cp.22_1>)
10058f38:	6800      	ldr	r0, [r0, #0]
10058f3a:	6940      	ldr	r0, [r0, #20]
10058f3c:	21a1      	movs	r1, #161	@ 0xa1
10058f3e:	222c      	movs	r2, #44	@ 0x2c
10058f40:	2302      	movs	r3, #2
10058f42:	f7fa fa91 	bl	10053468 <aci_event_fifo_push_header>
10058f46:	2800      	cmp	r0, #0
10058f48:	d00e      	beq.n	10058f68 <llc_conn_push_csa_event+0x4c>
10058f4a:	4601      	mov	r1, r0
10058f4c:	7204      	strb	r4, [r0, #8]
10058f4e:	7285      	strb	r5, [r0, #10]
10058f50:	2014      	movs	r0, #20
10058f52:	71c8      	strb	r0, [r1, #7]
10058f54:	2004      	movs	r0, #4
10058f56:	7188      	strb	r0, [r1, #6]
10058f58:	223e      	movs	r2, #62	@ 0x3e
10058f5a:	714a      	strb	r2, [r1, #5]
10058f5c:	7108      	strb	r0, [r1, #4]
10058f5e:	0a20      	lsrs	r0, r4, #8
10058f60:	7248      	strb	r0, [r1, #9]
10058f62:	20a1      	movs	r0, #161	@ 0xa1
10058f64:	f7fa fb1d 	bl	100535a2 <aci_event_fifo_push>
10058f68:	bdb0      	pop	{r4, r5, r7, pc}
10058f6a:	46c0      	nop			@ (mov r8, r8)

10058f6c <__arm_cp.22_0>:
10058f6c:	20001174 	.word	0x20001174

10058f70 <__arm_cp.22_1>:
10058f70:	20001124 	.word	0x20001124

10058f74 <llc_conn_set_chmap_params>:
10058f74:	b510      	push	{r4, lr}
10058f76:	23a8      	movs	r3, #168	@ 0xa8
10058f78:	50c1      	str	r1, [r0, r3]
10058f7a:	21c9      	movs	r1, #201	@ 0xc9
10058f7c:	0049      	lsls	r1, r1, #1
10058f7e:	5a43      	ldrh	r3, [r0, r1]
10058f80:	2420      	movs	r4, #32
10058f82:	431c      	orrs	r4, r3
10058f84:	5244      	strh	r4, [r0, r1]
10058f86:	1840      	adds	r0, r0, r1
10058f88:	8042      	strh	r2, [r0, #2]
10058f8a:	bd10      	pop	{r4, pc}

10058f8c <llc_conn_set_conn_update_params>:
10058f8c:	b510      	push	{r4, lr}
10058f8e:	23a4      	movs	r3, #164	@ 0xa4
10058f90:	50c1      	str	r1, [r0, r3]
10058f92:	21c9      	movs	r1, #201	@ 0xc9
10058f94:	0049      	lsls	r1, r1, #1
10058f96:	5a43      	ldrh	r3, [r0, r1]
10058f98:	2408      	movs	r4, #8
10058f9a:	431c      	orrs	r4, r3
10058f9c:	5244      	strh	r4, [r0, r1]
10058f9e:	1840      	adds	r0, r0, r1
10058fa0:	8042      	strh	r2, [r0, #2]
10058fa2:	bd10      	pop	{r4, pc}

10058fa4 <llc_conn_set_rx_acl_blocked>:
10058fa4:	2188      	movs	r1, #136	@ 0x88
10058fa6:	5840      	ldr	r0, [r0, r1]
10058fa8:	8801      	ldrh	r1, [r0, #0]
10058faa:	2201      	movs	r2, #1
10058fac:	0212      	lsls	r2, r2, #8
10058fae:	430a      	orrs	r2, r1
10058fb0:	8002      	strh	r2, [r0, #0]
10058fb2:	4770      	bx	lr

10058fb4 <llc_conn_set_start_enc>:
10058fb4:	2288      	movs	r2, #136	@ 0x88
10058fb6:	5880      	ldr	r0, [r0, r2]
10058fb8:	2900      	cmp	r1, #0
10058fba:	d007      	beq.n	10058fcc <llc_conn_set_start_enc+0x18>
10058fbc:	2901      	cmp	r1, #1
10058fbe:	d003      	beq.n	10058fc8 <llc_conn_set_start_enc+0x14>
10058fc0:	8801      	ldrh	r1, [r0, #0]
10058fc2:	2210      	movs	r2, #16
10058fc4:	430a      	orrs	r2, r1
10058fc6:	8002      	strh	r2, [r0, #0]
10058fc8:	2108      	movs	r1, #8
10058fca:	e000      	b.n	10058fce <llc_conn_set_start_enc+0x1a>
10058fcc:	2110      	movs	r1, #16
10058fce:	8802      	ldrh	r2, [r0, #0]
10058fd0:	430a      	orrs	r2, r1
10058fd2:	8002      	strh	r2, [r0, #0]
10058fd4:	4770      	bx	lr

10058fd6 <llc_conn_set_stop_enc>:
10058fd6:	2288      	movs	r2, #136	@ 0x88
10058fd8:	5880      	ldr	r0, [r0, r2]
10058fda:	2900      	cmp	r1, #0
10058fdc:	d007      	beq.n	10058fee <llc_conn_set_stop_enc+0x18>
10058fde:	2901      	cmp	r1, #1
10058fe0:	d003      	beq.n	10058fea <llc_conn_set_stop_enc+0x14>
10058fe2:	8801      	ldrh	r1, [r0, #0]
10058fe4:	2240      	movs	r2, #64	@ 0x40
10058fe6:	430a      	orrs	r2, r1
10058fe8:	8002      	strh	r2, [r0, #0]
10058fea:	2120      	movs	r1, #32
10058fec:	e000      	b.n	10058ff0 <llc_conn_set_stop_enc+0x1a>
10058fee:	2140      	movs	r1, #64	@ 0x40
10058ff0:	8802      	ldrh	r2, [r0, #0]
10058ff2:	430a      	orrs	r2, r1
10058ff4:	8002      	strh	r2, [r0, #0]
10058ff6:	4770      	bx	lr

10058ff8 <llc_conn_set_tx_acl_blocked>:
10058ff8:	2188      	movs	r1, #136	@ 0x88
10058ffa:	5840      	ldr	r0, [r0, r1]
10058ffc:	8801      	ldrh	r1, [r0, #0]
10058ffe:	2280      	movs	r2, #128	@ 0x80
10059000:	430a      	orrs	r2, r1
10059002:	8002      	strh	r2, [r0, #0]
10059004:	4770      	bx	lr

10059006 <llc_conn_set_tx_ctrl_pdu_has_instant>:
10059006:	2188      	movs	r1, #136	@ 0x88
10059008:	5840      	ldr	r0, [r0, r1]
1005900a:	8801      	ldrh	r1, [r0, #0]
1005900c:	2204      	movs	r2, #4
1005900e:	430a      	orrs	r2, r1
10059010:	8002      	strh	r2, [r0, #0]
10059012:	4770      	bx	lr

10059014 <llc_conn_set_tx_ctrl_pdu_state>:
10059014:	b580      	push	{r7, lr}
10059016:	2288      	movs	r2, #136	@ 0x88
10059018:	5880      	ldr	r0, [r0, r2]
1005901a:	8802      	ldrh	r2, [r0, #0]
1005901c:	2303      	movs	r3, #3
1005901e:	439a      	bics	r2, r3
10059020:	8002      	strh	r2, [r0, #0]
10059022:	4019      	ands	r1, r3
10059024:	8802      	ldrh	r2, [r0, #0]
10059026:	430a      	orrs	r2, r1
10059028:	8002      	strh	r2, [r0, #0]
1005902a:	2015      	movs	r0, #21
1005902c:	f009 f836 	bl	1006209c <tsk_notify_idx>
10059030:	f7ea ff35 	bl	10043e9e <BLE_STACK_ProcessRequest>
10059034:	bd80      	pop	{r7, pc}

10059036 <llc_conn_calc_skip_ucfg_weak>:
10059036:	4610      	mov	r0, r2
10059038:	4770      	bx	lr
	...

1005903c <llc_conn_check_connect_request_params>:
1005903c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005903e:	b087      	sub	sp, #28
10059040:	4604      	mov	r4, r0
10059042:	7e00      	ldrb	r0, [r0, #24]
10059044:	7e61      	ldrb	r1, [r4, #25]
10059046:	0209      	lsls	r1, r1, #8
10059048:	180e      	adds	r6, r1, r0
1005904a:	1e72      	subs	r2, r6, #1
1005904c:	2a08      	cmp	r2, #8
1005904e:	d300      	bcc.n	10059052 <llc_conn_check_connect_request_params+0x16>
10059050:	2208      	movs	r2, #8
10059052:	7ea0      	ldrb	r0, [r4, #26]
10059054:	9004      	str	r0, [sp, #16]
10059056:	7ee0      	ldrb	r0, [r4, #27]
10059058:	9003      	str	r0, [sp, #12]
1005905a:	7d60      	ldrb	r0, [r4, #21]
1005905c:	2101      	movs	r1, #1
1005905e:	4f27      	ldr	r7, [pc, #156]	@ (100590fc <__arm_cp.1_0>)
10059060:	9101      	str	r1, [sp, #4]
10059062:	47b8      	blx	r7
10059064:	4605      	mov	r5, r0
10059066:	7da0      	ldrb	r0, [r4, #22]
10059068:	7de1      	ldrb	r1, [r4, #23]
1005906a:	0209      	lsls	r1, r1, #8
1005906c:	1808      	adds	r0, r1, r0
1005906e:	2100      	movs	r1, #0
10059070:	9106      	str	r1, [sp, #24]
10059072:	4632      	mov	r2, r6
10059074:	47b8      	blx	r7
10059076:	4633      	mov	r3, r6
10059078:	9602      	str	r6, [sp, #8]
1005907a:	4606      	mov	r6, r0
1005907c:	432e      	orrs	r6, r5
1005907e:	2019      	movs	r0, #25
10059080:	01c2      	lsls	r2, r0, #7
10059082:	2106      	movs	r1, #6
10059084:	4618      	mov	r0, r3
10059086:	9205      	str	r2, [sp, #20]
10059088:	47b8      	blx	r7
1005908a:	463b      	mov	r3, r7
1005908c:	4605      	mov	r5, r0
1005908e:	4335      	orrs	r5, r6
10059090:	9803      	ldr	r0, [sp, #12]
10059092:	0200      	lsls	r0, r0, #8
10059094:	9904      	ldr	r1, [sp, #16]
10059096:	1847      	adds	r7, r0, r1
10059098:	22ff      	movs	r2, #255	@ 0xff
1005909a:	32f4      	adds	r2, #244	@ 0xf4
1005909c:	4638      	mov	r0, r7
1005909e:	9906      	ldr	r1, [sp, #24]
100590a0:	4798      	blx	r3
100590a2:	4606      	mov	r6, r0
100590a4:	432e      	orrs	r6, r5
100590a6:	1c78      	adds	r0, r7, #1
100590a8:	9902      	ldr	r1, [sp, #8]
100590aa:	4348      	muls	r0, r1
100590ac:	0880      	lsrs	r0, r0, #2
100590ae:	b281      	uxth	r1, r0
100590b0:	290a      	cmp	r1, #10
100590b2:	d800      	bhi.n	100590b6 <llc_conn_check_connect_request_params+0x7a>
100590b4:	210a      	movs	r1, #10
100590b6:	7f20      	ldrb	r0, [r4, #28]
100590b8:	7f62      	ldrb	r2, [r4, #29]
100590ba:	0212      	lsls	r2, r2, #8
100590bc:	1810      	adds	r0, r2, r0
100590be:	9a05      	ldr	r2, [sp, #20]
100590c0:	4d0e      	ldr	r5, [pc, #56]	@ (100590fc <__arm_cp.1_0>)
100590c2:	47a8      	blx	r5
100590c4:	4306      	orrs	r6, r0
100590c6:	2023      	movs	r0, #35	@ 0x23
100590c8:	5c21      	ldrb	r1, [r4, r0]
100590ca:	201f      	movs	r0, #31
100590cc:	4008      	ands	r0, r1
100590ce:	2105      	movs	r1, #5
100590d0:	2210      	movs	r2, #16
100590d2:	47a8      	blx	r5
100590d4:	4330      	orrs	r0, r6
100590d6:	d001      	beq.n	100590dc <llc_conn_check_connect_request_params+0xa0>
100590d8:	9806      	ldr	r0, [sp, #24]
100590da:	e00c      	b.n	100590f6 <llc_conn_check_connect_request_params+0xba>
100590dc:	4620      	mov	r0, r4
100590de:	3022      	adds	r0, #34	@ 0x22
100590e0:	7800      	ldrb	r0, [r0, #0]
100590e2:	06c0      	lsls	r0, r0, #27
100590e4:	d106      	bne.n	100590f4 <llc_conn_check_connect_request_params+0xb8>
100590e6:	201e      	movs	r0, #30
100590e8:	2822      	cmp	r0, #34	@ 0x22
100590ea:	d0f5      	beq.n	100590d8 <llc_conn_check_connect_request_params+0x9c>
100590ec:	5c21      	ldrb	r1, [r4, r0]
100590ee:	1c40      	adds	r0, r0, #1
100590f0:	2900      	cmp	r1, #0
100590f2:	d0f9      	beq.n	100590e8 <llc_conn_check_connect_request_params+0xac>
100590f4:	9801      	ldr	r0, [sp, #4]
100590f6:	b007      	add	sp, #28
100590f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100590fa:	46c0      	nop			@ (mov r8, r8)

100590fc <__arm_cp.1_0>:
100590fc:	1005e21d 	.word	0x1005e21d

10059100 <llc_conn_check_instant_and_set_params>:
10059100:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10059102:	4604      	mov	r4, r0
10059104:	20c9      	movs	r0, #201	@ 0xc9
10059106:	0042      	lsls	r2, r0, #1
10059108:	5aa0      	ldrh	r0, [r4, r2]
1005910a:	07c3      	lsls	r3, r0, #31
1005910c:	4625      	mov	r5, r4
1005910e:	352c      	adds	r5, #44	@ 0x2c
10059110:	2b00      	cmp	r3, #0
10059112:	d07f      	beq.n	10059214 <llc_conn_check_instant_and_set_params+0x114>
10059114:	18a6      	adds	r6, r4, r2
10059116:	8872      	ldrh	r2, [r6, #2]
10059118:	1a51      	subs	r1, r2, r1
1005911a:	040b      	lsls	r3, r1, #16
1005911c:	d004      	beq.n	10059128 <llc_conn_check_instant_and_set_params+0x28>
1005911e:	b208      	sxth	r0, r1
10059120:	2800      	cmp	r0, #0
10059122:	d577      	bpl.n	10059214 <llc_conn_check_instant_and_set_params+0x114>
10059124:	2028      	movs	r0, #40	@ 0x28
10059126:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10059128:	0541      	lsls	r1, r0, #21
1005912a:	d40f      	bmi.n	1005914c <llc_conn_check_instant_and_set_params+0x4c>
1005912c:	0701      	lsls	r1, r0, #28
1005912e:	d416      	bmi.n	1005915e <llc_conn_check_instant_and_set_params+0x5e>
10059130:	0680      	lsls	r0, r0, #26
10059132:	d438      	bmi.n	100591a6 <llc_conn_check_instant_and_set_params+0xa6>
10059134:	7928      	ldrb	r0, [r5, #4]
10059136:	f7f8 fecd 	bl	10051ed4 <LL_phy_upd_pending_ucfg>
1005913a:	2800      	cmp	r0, #0
1005913c:	d05f      	beq.n	100591fe <llc_conn_check_instant_and_set_params+0xfe>
1005913e:	7928      	ldrb	r0, [r5, #4]
10059140:	2101      	movs	r1, #1
10059142:	2200      	movs	r2, #0
10059144:	4613      	mov	r3, r2
10059146:	f003 f8bd 	bl	1005c2c4 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
1005914a:	e058      	b.n	100591fe <llc_conn_check_instant_and_set_params+0xfe>
1005914c:	7928      	ldrb	r0, [r5, #4]
1005914e:	4611      	mov	r1, r2
10059150:	f7ff fa08 	bl	10058564 <llc_cig_cmn_start_cis_ucfg_weak>
10059154:	8830      	ldrh	r0, [r6, #0]
10059156:	4932      	ldr	r1, [pc, #200]	@ (10059220 <__arm_cp.2_0>)
10059158:	4001      	ands	r1, r0
1005915a:	8031      	strh	r1, [r6, #0]
1005915c:	e04f      	b.n	100591fe <llc_conn_check_instant_and_set_params+0xfe>
1005915e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10059160:	6faf      	ldr	r7, [r5, #120]	@ 0x78
10059162:	6879      	ldr	r1, [r7, #4]
10059164:	1840      	adds	r0, r0, r1
10059166:	6460      	str	r0, [r4, #68]	@ 0x44
10059168:	68b9      	ldr	r1, [r7, #8]
1005916a:	683a      	ldr	r2, [r7, #0]
1005916c:	7828      	ldrb	r0, [r5, #0]
1005916e:	2802      	cmp	r0, #2
10059170:	9102      	str	r1, [sp, #8]
10059172:	9201      	str	r2, [sp, #4]
10059174:	d128      	bne.n	100591c8 <llc_conn_check_instant_and_set_params+0xc8>
10059176:	7d68      	ldrb	r0, [r5, #21]
10059178:	f7ee fae8 	bl	1004774c <BLEPLAT_CNTR_SmGetTxPhy>
1005917c:	2804      	cmp	r0, #4
1005917e:	d001      	beq.n	10059184 <llc_conn_check_instant_and_set_params+0x84>
10059180:	2806      	cmp	r0, #6
10059182:	d100      	bne.n	10059186 <llc_conn_check_instant_and_set_params+0x86>
10059184:	2002      	movs	r0, #2
10059186:	9b02      	ldr	r3, [sp, #8]
10059188:	6979      	ldr	r1, [r7, #20]
1005918a:	4299      	cmp	r1, r3
1005918c:	460a      	mov	r2, r1
1005918e:	d300      	bcc.n	10059192 <llc_conn_check_instant_and_set_params+0x92>
10059190:	461a      	mov	r2, r3
10059192:	6522      	str	r2, [r4, #80]	@ 0x50
10059194:	0080      	lsls	r0, r0, #2
10059196:	1820      	adds	r0, r4, r0
10059198:	6581      	str	r1, [r0, #88]	@ 0x58
1005919a:	9801      	ldr	r0, [sp, #4]
1005919c:	0840      	lsrs	r0, r0, #1
1005919e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
100591a0:	1808      	adds	r0, r1, r0
100591a2:	6460      	str	r0, [r4, #68]	@ 0x44
100591a4:	e01a      	b.n	100591dc <llc_conn_check_instant_and_set_params+0xdc>
100591a6:	4627      	mov	r7, r4
100591a8:	37e2      	adds	r7, #226	@ 0xe2
100591aa:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
100591ac:	7d68      	ldrb	r0, [r5, #21]
100591ae:	f7ee fb33 	bl	10047818 <BLEPLAT_CNTR_SmSetChannelMap>
100591b2:	7838      	ldrb	r0, [r7, #0]
100591b4:	2801      	cmp	r0, #1
100591b6:	d104      	bne.n	100591c2 <llc_conn_check_instant_and_set_params+0xc2>
100591b8:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
100591ba:	34bc      	adds	r4, #188	@ 0xbc
100591bc:	4620      	mov	r0, r4
100591be:	f001 fc71 	bl	1005aaa4 <llc_mngm_csa2_update_remapping_table>
100591c2:	8830      	ldrh	r0, [r6, #0]
100591c4:	2120      	movs	r1, #32
100591c6:	e018      	b.n	100591fa <llc_conn_check_instant_and_set_params+0xfa>
100591c8:	f7ff f9ce 	bl	10058568 <llc_conn_get_cntxt_p>
100591cc:	9b02      	ldr	r3, [sp, #8]
100591ce:	9901      	ldr	r1, [sp, #4]
100591d0:	6361      	str	r1, [r4, #52]	@ 0x34
100591d2:	6840      	ldr	r0, [r0, #4]
100591d4:	4298      	cmp	r0, r3
100591d6:	d300      	bcc.n	100591da <llc_conn_check_instant_and_set_params+0xda>
100591d8:	4618      	mov	r0, r3
100591da:	6520      	str	r0, [r4, #80]	@ 0x50
100591dc:	68f8      	ldr	r0, [r7, #12]
100591de:	8720      	strh	r0, [r4, #56]	@ 0x38
100591e0:	6938      	ldr	r0, [r7, #16]
100591e2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
100591e4:	180a      	adds	r2, r1, r0
100591e6:	6662      	str	r2, [r4, #100]	@ 0x64
100591e8:	66a0      	str	r0, [r4, #104]	@ 0x68
100591ea:	4299      	cmp	r1, r3
100591ec:	d003      	beq.n	100591f6 <llc_conn_check_instant_and_set_params+0xf6>
100591ee:	64e3      	str	r3, [r4, #76]	@ 0x4c
100591f0:	4620      	mov	r0, r4
100591f2:	f001 fe0c 	bl	1005ae0e <llc_subrate_reset_params>
100591f6:	8830      	ldrh	r0, [r6, #0]
100591f8:	2108      	movs	r1, #8
100591fa:	4388      	bics	r0, r1
100591fc:	8030      	strh	r0, [r6, #0]
100591fe:	8830      	ldrh	r0, [r6, #0]
10059200:	2102      	movs	r1, #2
10059202:	4301      	orrs	r1, r0
10059204:	2001      	movs	r0, #1
10059206:	4381      	bics	r1, r0
10059208:	8031      	strh	r1, [r6, #0]
1005920a:	2015      	movs	r0, #21
1005920c:	f008 ff46 	bl	1006209c <tsk_notify_idx>
10059210:	f7ea fe45 	bl	10043e9e <BLE_STACK_ProcessRequest>
10059214:	7928      	ldrb	r0, [r5, #4]
10059216:	f7f8 fe8c 	bl	10051f32 <LL_phy_upd_evt_pending_check_isr_ucfg>
1005921a:	2000      	movs	r0, #0
1005921c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005921e:	46c0      	nop			@ (mov r8, r8)

10059220 <__arm_cp.2_0>:
10059220:	0000fbff 	.word	0x0000fbff

10059224 <llc_conn_check_supervision_timer>:
10059224:	6e42      	ldr	r2, [r0, #100]	@ 0x64
10059226:	1a51      	subs	r1, r2, r1
10059228:	6641      	str	r1, [r0, #100]	@ 0x64
1005922a:	1e49      	subs	r1, r1, #1
1005922c:	d401      	bmi.n	10059232 <llc_conn_check_supervision_timer+0xe>
1005922e:	2000      	movs	r0, #0
10059230:	4770      	bx	lr
10059232:	2180      	movs	r1, #128	@ 0x80
10059234:	5c40      	ldrb	r0, [r0, r1]
10059236:	0680      	lsls	r0, r0, #26
10059238:	d501      	bpl.n	1005923e <llc_conn_check_supervision_timer+0x1a>
1005923a:	2008      	movs	r0, #8
1005923c:	4770      	bx	lr
1005923e:	203e      	movs	r0, #62	@ 0x3e
10059240:	4770      	bx	lr

10059242 <llc_conn_release_conn_idx>:
10059242:	b580      	push	{r7, lr}
10059244:	f7ff f99a 	bl	1005857c <llc_conn_get_cntxt_per_p>
10059248:	212c      	movs	r1, #44	@ 0x2c
1005924a:	2200      	movs	r2, #0
1005924c:	5442      	strb	r2, [r0, r1]
1005924e:	bd80      	pop	{r7, pc}

10059250 <llc_conn_disconnect_link>:
10059250:	b510      	push	{r4, lr}
10059252:	460c      	mov	r4, r1
10059254:	4601      	mov	r1, r0
10059256:	0a02      	lsrs	r2, r0, #8
10059258:	2012      	movs	r0, #18
1005925a:	2a0e      	cmp	r2, #14
1005925c:	d811      	bhi.n	10059282 <llc_conn_disconnect_link+0x32>
1005925e:	2c1a      	cmp	r4, #26
10059260:	d80f      	bhi.n	10059282 <llc_conn_disconnect_link+0x32>
10059262:	2201      	movs	r2, #1
10059264:	40a2      	lsls	r2, r4
10059266:	4b08      	ldr	r3, [pc, #32]	@ (10059288 <__arm_cp.8_0>)
10059268:	421a      	tst	r2, r3
1005926a:	d00a      	beq.n	10059282 <llc_conn_disconnect_link+0x32>
1005926c:	4608      	mov	r0, r1
1005926e:	f7ff f993 	bl	10058598 <llc_conn_get_cntxt_per_p_from_handle>
10059272:	2800      	cmp	r0, #0
10059274:	d006      	beq.n	10059284 <llc_conn_disconnect_link+0x34>
10059276:	2111      	movs	r1, #17
10059278:	0109      	lsls	r1, r1, #4
1005927a:	1840      	adds	r0, r0, r1
1005927c:	4621      	mov	r1, r4
1005927e:	f000 ffa5 	bl	1005a1cc <llc_cpe_disconnect_link>
10059282:	bd10      	pop	{r4, pc}
10059284:	2002      	movs	r0, #2
10059286:	bd10      	pop	{r4, pc}

10059288 <__arm_cp.8_0>:
10059288:	04080020 	.word	0x04080020

1005928c <llc_conn_disconnect_link_from_cpf>:
1005928c:	b510      	push	{r4, lr}
1005928e:	4604      	mov	r4, r0
10059290:	202d      	movs	r0, #45	@ 0x2d
10059292:	5421      	strb	r1, [r4, r0]
10059294:	342d      	adds	r4, #45	@ 0x2d
10059296:	7d20      	ldrb	r0, [r4, #20]
10059298:	f005 fc68 	bl	1005eb6c <LL_sched_delete_taskslot>
1005929c:	7d20      	ldrb	r0, [r4, #20]
1005929e:	f005 fcb7 	bl	1005ec10 <LL_sched_check_and_wait_sched>
100592a2:	bd10      	pop	{r4, pc}

100592a4 <llc_conn_go_to_connect>:
100592a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100592a6:	b0ab      	sub	sp, #172	@ 0xac
100592a8:	4607      	mov	r7, r0
100592aa:	7ac0      	ldrb	r0, [r0, #11]
100592ac:	f7ff f966 	bl	1005857c <llc_conn_get_cntxt_per_p>
100592b0:	4606      	mov	r6, r0
100592b2:	f7ff f959 	bl	10058568 <llc_conn_get_cntxt_p>
100592b6:	901e      	str	r0, [sp, #120]	@ 0x78
100592b8:	683d      	ldr	r5, [r7, #0]
100592ba:	2022      	movs	r0, #34	@ 0x22
100592bc:	5c29      	ldrb	r1, [r5, r0]
100592be:	221f      	movs	r2, #31
100592c0:	9216      	str	r2, [sp, #88]	@ 0x58
100592c2:	4011      	ands	r1, r2
100592c4:	5429      	strb	r1, [r5, r0]
100592c6:	7d68      	ldrb	r0, [r5, #21]
100592c8:	9010      	str	r0, [sp, #64]	@ 0x40
100592ca:	7ba8      	ldrb	r0, [r5, #14]
100592cc:	901f      	str	r0, [sp, #124]	@ 0x7c
100592ce:	7be8      	ldrb	r0, [r5, #15]
100592d0:	9018      	str	r0, [sp, #96]	@ 0x60
100592d2:	7c28      	ldrb	r0, [r5, #16]
100592d4:	901a      	str	r0, [sp, #104]	@ 0x68
100592d6:	7c68      	ldrb	r0, [r5, #17]
100592d8:	901c      	str	r0, [sp, #112]	@ 0x70
100592da:	7ca8      	ldrb	r0, [r5, #18]
100592dc:	9017      	str	r0, [sp, #92]	@ 0x5c
100592de:	7ce8      	ldrb	r0, [r5, #19]
100592e0:	9012      	str	r0, [sp, #72]	@ 0x48
100592e2:	7d28      	ldrb	r0, [r5, #20]
100592e4:	9015      	str	r0, [sp, #84]	@ 0x54
100592e6:	7da8      	ldrb	r0, [r5, #22]
100592e8:	900a      	str	r0, [sp, #40]	@ 0x28
100592ea:	7de8      	ldrb	r0, [r5, #23]
100592ec:	900e      	str	r0, [sp, #56]	@ 0x38
100592ee:	7e28      	ldrb	r0, [r5, #24]
100592f0:	9014      	str	r0, [sp, #80]	@ 0x50
100592f2:	7e68      	ldrb	r0, [r5, #25]
100592f4:	900f      	str	r0, [sp, #60]	@ 0x3c
100592f6:	7ea8      	ldrb	r0, [r5, #26]
100592f8:	9011      	str	r0, [sp, #68]	@ 0x44
100592fa:	7ee8      	ldrb	r0, [r5, #27]
100592fc:	900c      	str	r0, [sp, #48]	@ 0x30
100592fe:	7f28      	ldrb	r0, [r5, #28]
10059300:	9013      	str	r0, [sp, #76]	@ 0x4c
10059302:	7f68      	ldrb	r0, [r5, #29]
10059304:	900b      	str	r0, [sp, #44]	@ 0x2c
10059306:	7828      	ldrb	r0, [r5, #0]
10059308:	901b      	str	r0, [sp, #108]	@ 0x6c
1005930a:	4628      	mov	r0, r5
1005930c:	3022      	adds	r0, #34	@ 0x22
1005930e:	7844      	ldrb	r4, [r0, #1]
10059310:	7bb8      	ldrb	r0, [r7, #14]
10059312:	f7ee fa1b 	bl	1004774c <BLEPLAT_CNTR_SmGetTxPhy>
10059316:	9020      	str	r0, [sp, #128]	@ 0x80
10059318:	f004 fe9c 	bl	1005e054 <llc_get_channel_sel_algo2_enabled>
1005931c:	900d      	str	r0, [sp, #52]	@ 0x34
1005931e:	2042      	movs	r0, #66	@ 0x42
10059320:	2200      	movs	r2, #0
10059322:	5232      	strh	r2, [r6, r0]
10059324:	202d      	movs	r0, #45	@ 0x2d
10059326:	5432      	strb	r2, [r6, r0]
10059328:	20f0      	movs	r0, #240	@ 0xf0
1005932a:	5032      	str	r2, [r6, r0]
1005932c:	20ec      	movs	r0, #236	@ 0xec
1005932e:	5432      	strb	r2, [r6, r0]
10059330:	20e4      	movs	r0, #228	@ 0xe4
10059332:	217f      	movs	r1, #127	@ 0x7f
10059334:	5431      	strb	r1, [r6, r0]
10059336:	202f      	movs	r0, #47	@ 0x2f
10059338:	2107      	movs	r1, #7
1005933a:	5431      	strb	r1, [r6, r0]
1005933c:	9409      	str	r4, [sp, #36]	@ 0x24
1005933e:	9816      	ldr	r0, [sp, #88]	@ 0x58
10059340:	4004      	ands	r4, r0
10059342:	2031      	movs	r0, #49	@ 0x31
10059344:	9419      	str	r4, [sp, #100]	@ 0x64
10059346:	5434      	strb	r4, [r6, r0]
10059348:	9721      	str	r7, [sp, #132]	@ 0x84
1005934a:	7bb8      	ldrb	r0, [r7, #14]
1005934c:	2141      	movs	r1, #65	@ 0x41
1005934e:	5470      	strb	r0, [r6, r1]
10059350:	7af8      	ldrb	r0, [r7, #11]
10059352:	2130      	movs	r1, #48	@ 0x30
10059354:	5470      	strb	r0, [r6, r1]
10059356:	2088      	movs	r0, #136	@ 0x88
10059358:	5830      	ldr	r0, [r6, r0]
1005935a:	6002      	str	r2, [r0, #0]
1005935c:	2084      	movs	r0, #132	@ 0x84
1005935e:	5830      	ldr	r0, [r6, r0]
10059360:	6002      	str	r2, [r0, #0]
10059362:	2080      	movs	r0, #128	@ 0x80
10059364:	9008      	str	r0, [sp, #32]
10059366:	5032      	str	r2, [r6, r0]
10059368:	4637      	mov	r7, r6
1005936a:	37f0      	adds	r7, #240	@ 0xf0
1005936c:	921d      	str	r2, [sp, #116]	@ 0x74
1005936e:	607a      	str	r2, [r7, #4]
10059370:	2401      	movs	r4, #1
10059372:	8534      	strh	r4, [r6, #40]	@ 0x28
10059374:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10059376:	0200      	lsls	r0, r0, #8
10059378:	9914      	ldr	r1, [sp, #80]	@ 0x50
1005937a:	1840      	adds	r0, r0, r1
1005937c:	9014      	str	r0, [sp, #80]	@ 0x50
1005937e:	b280      	uxth	r0, r0
10059380:	2103      	movs	r1, #3
10059382:	910f      	str	r1, [sp, #60]	@ 0x3c
10059384:	0289      	lsls	r1, r1, #10
10059386:	4341      	muls	r1, r0
10059388:	0240      	lsls	r0, r0, #9
1005938a:	64f0      	str	r0, [r6, #76]	@ 0x4c
1005938c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005938e:	0200      	lsls	r0, r0, #8
10059390:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10059392:	1880      	adds	r0, r0, r2
10059394:	9013      	str	r0, [sp, #76]	@ 0x4c
10059396:	b280      	uxth	r0, r0
10059398:	0300      	lsls	r0, r0, #12
1005939a:	6671      	str	r1, [r6, #100]	@ 0x64
1005939c:	66b0      	str	r0, [r6, #104]	@ 0x68
1005939e:	9812      	ldr	r0, [sp, #72]	@ 0x48
100593a0:	0200      	lsls	r0, r0, #8
100593a2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
100593a4:	1840      	adds	r0, r0, r1
100593a6:	9915      	ldr	r1, [sp, #84]	@ 0x54
100593a8:	0409      	lsls	r1, r1, #16
100593aa:	1840      	adds	r0, r0, r1
100593ac:	9015      	str	r0, [sp, #84]	@ 0x54
100593ae:	6570      	str	r0, [r6, #84]	@ 0x54
100593b0:	980c      	ldr	r0, [sp, #48]	@ 0x30
100593b2:	0200      	lsls	r0, r0, #8
100593b4:	9911      	ldr	r1, [sp, #68]	@ 0x44
100593b6:	1840      	adds	r0, r0, r1
100593b8:	9011      	str	r0, [sp, #68]	@ 0x44
100593ba:	8730      	strh	r0, [r6, #56]	@ 0x38
100593bc:	f005 f90e 	bl	1005e5dc <llc_get_next_free_conn_handle>
100593c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
100593c2:	21ed      	movs	r1, #237	@ 0xed
100593c4:	940c      	str	r4, [sp, #48]	@ 0x30
100593c6:	5474      	strb	r4, [r6, r1]
100593c8:	8770      	strh	r0, [r6, #58]	@ 0x3a
100593ca:	2019      	movs	r0, #25
100593cc:	0100      	lsls	r0, r0, #4
100593ce:	1830      	adds	r0, r6, r0
100593d0:	9017      	str	r0, [sp, #92]	@ 0x5c
100593d2:	9818      	ldr	r0, [sp, #96]	@ 0x60
100593d4:	0200      	lsls	r0, r0, #8
100593d6:	991f      	ldr	r1, [sp, #124]	@ 0x7c
100593d8:	1840      	adds	r0, r0, r1
100593da:	991a      	ldr	r1, [sp, #104]	@ 0x68
100593dc:	0409      	lsls	r1, r1, #16
100593de:	1840      	adds	r0, r0, r1
100593e0:	991c      	ldr	r1, [sp, #112]	@ 0x70
100593e2:	0609      	lsls	r1, r1, #24
100593e4:	1840      	adds	r0, r0, r1
100593e6:	9018      	str	r0, [sp, #96]	@ 0x60
100593e8:	4630      	mov	r0, r6
100593ea:	302c      	adds	r0, #44	@ 0x2c
100593ec:	901f      	str	r0, [sp, #124]	@ 0x7c
100593ee:	4632      	mov	r2, r6
100593f0:	32e2      	adds	r2, #226	@ 0xe2
100593f2:	351e      	adds	r5, #30
100593f4:	951a      	str	r5, [sp, #104]	@ 0x68
100593f6:	980d      	ldr	r0, [sp, #52]	@ 0x34
100593f8:	2801      	cmp	r0, #1
100593fa:	9212      	str	r2, [sp, #72]	@ 0x48
100593fc:	d106      	bne.n	1005940c <llc_conn_go_to_connect+0x168>
100593fe:	7c18      	ldrb	r0, [r3, #16]
10059400:	2801      	cmp	r0, #1
10059402:	d103      	bne.n	1005940c <llc_conn_go_to_connect+0x168>
10059404:	2020      	movs	r0, #32
10059406:	991b      	ldr	r1, [sp, #108]	@ 0x6c
10059408:	4008      	ands	r0, r1
1005940a:	d104      	bne.n	10059416 <llc_conn_go_to_connect+0x172>
1005940c:	7b18      	ldrb	r0, [r3, #12]
1005940e:	21fe      	movs	r1, #254	@ 0xfe
10059410:	4001      	ands	r1, r0
10059412:	2902      	cmp	r1, #2
10059414:	d11b      	bne.n	1005944e <llc_conn_go_to_connect+0x1aa>
10059416:	2001      	movs	r0, #1
10059418:	7010      	strb	r0, [r2, #0]
1005941a:	7b98      	ldrb	r0, [r3, #14]
1005941c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
1005941e:	4621      	mov	r1, r4
10059420:	f7ee f9fa 	bl	10047818 <BLEPLAT_CNTR_SmSetChannelMap>
10059424:	4635      	mov	r5, r6
10059426:	35bc      	adds	r5, #188	@ 0xbc
10059428:	4628      	mov	r0, r5
1005942a:	4621      	mov	r1, r4
1005942c:	f001 fb3a 	bl	1005aaa4 <llc_mngm_csa2_update_remapping_table>
10059430:	981f      	ldr	r0, [sp, #124]	@ 0x7c
10059432:	7d40      	ldrb	r0, [r0, #21]
10059434:	2200      	movs	r2, #0
10059436:	9200      	str	r2, [sp, #0]
10059438:	9918      	ldr	r1, [sp, #96]	@ 0x60
1005943a:	9101      	str	r1, [sp, #4]
1005943c:	9202      	str	r2, [sp, #8]
1005943e:	4629      	mov	r1, r5
10059440:	9219      	str	r2, [sp, #100]	@ 0x64
10059442:	4613      	mov	r3, r2
10059444:	f001 fb49 	bl	1005aada <llc_mngm_csa2_select_channel_for_task>
10059448:	9b21      	ldr	r3, [sp, #132]	@ 0x84
1005944a:	901d      	str	r0, [sp, #116]	@ 0x74
1005944c:	e001      	b.n	10059452 <llc_conn_go_to_connect+0x1ae>
1005944e:	981d      	ldr	r0, [sp, #116]	@ 0x74
10059450:	7010      	strb	r0, [r2, #0]
10059452:	4634      	mov	r4, r6
10059454:	3490      	adds	r4, #144	@ 0x90
10059456:	209f      	movs	r0, #159	@ 0x9f
10059458:	77b8      	strb	r0, [r7, #30]
1005945a:	48f9      	ldr	r0, [pc, #996]	@ (10059840 <__arm_cp.10_0>)
1005945c:	83b8      	strh	r0, [r7, #28]
1005945e:	48f9      	ldr	r0, [pc, #996]	@ (10059844 <__arm_cp.10_1>)
10059460:	8378      	strh	r0, [r7, #26]
10059462:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
10059464:	8810      	ldrh	r0, [r2, #0]
10059466:	2120      	movs	r1, #32
10059468:	4388      	bics	r0, r1
1005946a:	8010      	strh	r0, [r2, #0]
1005946c:	7ad8      	ldrb	r0, [r3, #11]
1005946e:	f7f8 fd50 	bl	10051f12 <LL_phy_update_init_per_st_data_ucfg>
10059472:	2029      	movs	r0, #41	@ 0x29
10059474:	00c5      	lsls	r5, r0, #3
10059476:	20a9      	movs	r0, #169	@ 0xa9
10059478:	0107      	lsls	r7, r0, #4
1005947a:	f7fe fba8 	bl	10057bce <data_length_extension_csr_ucfg_weak>
1005947e:	2801      	cmp	r0, #1
10059480:	9920      	ldr	r1, [sp, #128]	@ 0x80
10059482:	d116      	bne.n	100594b2 <llc_conn_go_to_connect+0x20e>
10059484:	981e      	ldr	r0, [sp, #120]	@ 0x78
10059486:	8900      	ldrh	r0, [r0, #8]
10059488:	281b      	cmp	r0, #27
1005948a:	d10d      	bne.n	100594a8 <llc_conn_go_to_connect+0x204>
1005948c:	2904      	cmp	r1, #4
1005948e:	d107      	bne.n	100594a0 <llc_conn_go_to_connect+0x1fc>
10059490:	981e      	ldr	r0, [sp, #120]	@ 0x78
10059492:	89c0      	ldrh	r0, [r0, #14]
10059494:	42b8      	cmp	r0, r7
10059496:	d107      	bne.n	100594a8 <llc_conn_go_to_connect+0x204>
10059498:	201b      	movs	r0, #27
1005949a:	80a0      	strh	r0, [r4, #4]
1005949c:	8020      	strh	r0, [r4, #0]
1005949e:	e00e      	b.n	100594be <llc_conn_go_to_connect+0x21a>
100594a0:	981e      	ldr	r0, [sp, #120]	@ 0x78
100594a2:	8980      	ldrh	r0, [r0, #12]
100594a4:	42a8      	cmp	r0, r5
100594a6:	d004      	beq.n	100594b2 <llc_conn_go_to_connect+0x20e>
100594a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
100594aa:	8818      	ldrh	r0, [r3, #0]
100594ac:	9a08      	ldr	r2, [sp, #32]
100594ae:	4310      	orrs	r0, r2
100594b0:	8018      	strh	r0, [r3, #0]
100594b2:	201b      	movs	r0, #27
100594b4:	80a0      	strh	r0, [r4, #4]
100594b6:	8020      	strh	r0, [r4, #0]
100594b8:	2904      	cmp	r1, #4
100594ba:	d000      	beq.n	100594be <llc_conn_go_to_connect+0x21a>
100594bc:	462f      	mov	r7, r5
100594be:	980e      	ldr	r0, [sp, #56]	@ 0x38
100594c0:	0205      	lsls	r5, r0, #8
100594c2:	8127      	strh	r7, [r4, #8]
100594c4:	80e7      	strh	r7, [r4, #6]
100594c6:	81a7      	strh	r7, [r4, #12]
100594c8:	201b      	movs	r0, #27
100594ca:	8160      	strh	r0, [r4, #10]
100594cc:	8060      	strh	r0, [r4, #2]
100594ce:	8267      	strh	r7, [r4, #18]
100594d0:	8227      	strh	r7, [r4, #16]
100594d2:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
100594d4:	8af8      	ldrh	r0, [r7, #22]
100594d6:	941c      	str	r4, [sp, #112]	@ 0x70
100594d8:	81e0      	strh	r0, [r4, #14]
100594da:	9c21      	ldr	r4, [sp, #132]	@ 0x84
100594dc:	7ae0      	ldrb	r0, [r4, #11]
100594de:	f001 ffd7 	bl	1005b490 <llc_conn_init_cte_ctxt_ucfg_weak>
100594e2:	7ae0      	ldrb	r0, [r4, #11]
100594e4:	f002 fedc 	bl	1005c2a0 <llc_conn_init_pcl_ctxt_ucfg_weak>
100594e8:	7ae0      	ldrb	r0, [r4, #11]
100594ea:	f001 fd6a 	bl	1005afc2 <LLC_conn_init_chc_ctxt_ucfg_weak>
100594ee:	4638      	mov	r0, r7
100594f0:	4631      	mov	r1, r6
100594f2:	f001 fc81 	bl	1005adf8 <llc_subrate_init_acceptable_per>
100594f6:	7ae0      	ldrb	r0, [r4, #11]
100594f8:	f002 fed6 	bl	1005c2a8 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>
100594fc:	7ae0      	ldrb	r0, [r4, #11]
100594fe:	f001 fc09 	bl	1005ad14 <llc_past_init_ucfg_weak>
10059502:	4630      	mov	r0, r6
10059504:	f002 fd42 	bl	1005bf8c <LLC_init_le_ping_params>
10059508:	2011      	movs	r0, #17
1005950a:	0100      	lsls	r0, r0, #4
1005950c:	1830      	adds	r0, r6, r0
1005950e:	f000 fe6d 	bl	1005a1ec <llc_cpe_init_all_sm>
10059512:	9820      	ldr	r0, [sp, #128]	@ 0x80
10059514:	f7ee fb2d 	bl	10047b72 <BLEPLAT_CNTR_DemodDelaySt>
10059518:	7b21      	ldrb	r1, [r4, #12]
1005951a:	4acb      	ldr	r2, [pc, #812]	@ (10059848 <__arm_cp.10_2>)
1005951c:	6812      	ldr	r2, [r2, #0]
1005951e:	6817      	ldr	r7, [r2, #0]
10059520:	2903      	cmp	r1, #3
10059522:	d004      	beq.n	1005952e <llc_conn_go_to_connect+0x28a>
10059524:	2902      	cmp	r1, #2
10059526:	d10b      	bne.n	10059540 <llc_conn_go_to_connect+0x29c>
10059528:	1a38      	subs	r0, r7, r0
1005952a:	383e      	subs	r0, #62	@ 0x3e
1005952c:	e012      	b.n	10059554 <llc_conn_go_to_connect+0x2b0>
1005952e:	210e      	movs	r1, #14
10059530:	9c20      	ldr	r4, [sp, #128]	@ 0x80
10059532:	4620      	mov	r0, r4
10059534:	f004 fe50 	bl	1005e1d8 <LL_link_calc_packetlength>
10059538:	1a38      	subs	r0, r7, r0
1005953a:	383e      	subs	r0, #62	@ 0x3e
1005953c:	9f21      	ldr	r7, [sp, #132]	@ 0x84
1005953e:	e00b      	b.n	10059558 <llc_conn_go_to_connect+0x2b4>
10059540:	9921      	ldr	r1, [sp, #132]	@ 0x84
10059542:	7b49      	ldrb	r1, [r1, #13]
10059544:	1a38      	subs	r0, r7, r0
10059546:	2900      	cmp	r1, #0
10059548:	d001      	beq.n	1005954e <llc_conn_go_to_connect+0x2aa>
1005954a:	3090      	adds	r0, #144	@ 0x90
1005954c:	e002      	b.n	10059554 <llc_conn_go_to_connect+0x2b0>
1005954e:	2181      	movs	r1, #129	@ 0x81
10059550:	0049      	lsls	r1, r1, #1
10059552:	1840      	adds	r0, r0, r1
10059554:	9f21      	ldr	r7, [sp, #132]	@ 0x84
10059556:	9c20      	ldr	r4, [sp, #128]	@ 0x80
10059558:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
1005955a:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005955c:	065a      	lsls	r2, r3, #25
1005955e:	1869      	adds	r1, r5, r1
10059560:	2c04      	cmp	r4, #4
10059562:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10059564:	d007      	beq.n	10059576 <llc_conn_go_to_connect+0x2d2>
10059566:	7b3d      	ldrb	r5, [r7, #12]
10059568:	23fe      	movs	r3, #254	@ 0xfe
1005956a:	402b      	ands	r3, r5
1005956c:	2b02      	cmp	r3, #2
1005956e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10059570:	d100      	bne.n	10059574 <llc_conn_go_to_connect+0x2d0>
10059572:	461d      	mov	r5, r3
10059574:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
10059576:	09db      	lsrs	r3, r3, #7
10059578:	930d      	str	r3, [sp, #52]	@ 0x34
1005957a:	0fd2      	lsrs	r2, r2, #31
1005957c:	920e      	str	r2, [sp, #56]	@ 0x38
1005957e:	1869      	adds	r1, r5, r1
10059580:	024d      	lsls	r5, r1, #9
10059582:	1829      	adds	r1, r5, r0
10059584:	683b      	ldr	r3, [r7, #0]
10059586:	7b78      	ldrb	r0, [r7, #13]
10059588:	2800      	cmp	r0, #0
1005958a:	d02b      	beq.n	100595e4 <llc_conn_go_to_connect+0x340>
1005958c:	910c      	str	r1, [sp, #48]	@ 0x30
1005958e:	931b      	str	r3, [sp, #108]	@ 0x6c
10059590:	9809      	ldr	r0, [sp, #36]	@ 0x24
10059592:	0944      	lsrs	r4, r0, #5
10059594:	f004 fe3c 	bl	1005e210 <LL_link_get_own_sca_ppm>
10059598:	4607      	mov	r7, r0
1005959a:	9417      	str	r4, [sp, #92]	@ 0x5c
1005959c:	4620      	mov	r0, r4
1005959e:	f001 fc49 	bl	1005ae34 <llc_convert_sca_to_ppm>
100595a2:	2103      	movs	r1, #3
100595a4:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
100595a6:	7011      	strb	r1, [r2, #0]
100595a8:	9910      	ldr	r1, [sp, #64]	@ 0x40
100595aa:	0249      	lsls	r1, r1, #9
100595ac:	6371      	str	r1, [r6, #52]	@ 0x34
100595ae:	19c0      	adds	r0, r0, r7
100595b0:	8570      	strh	r0, [r6, #42]	@ 0x2a
100595b2:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
100595b4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
100595b6:	6852      	ldr	r2, [r2, #4]
100595b8:	4291      	cmp	r1, r2
100595ba:	d300      	bcc.n	100595be <llc_conn_go_to_connect+0x31a>
100595bc:	4611      	mov	r1, r2
100595be:	6531      	str	r1, [r6, #80]	@ 0x50
100595c0:	b280      	uxth	r0, r0
100595c2:	4629      	mov	r1, r5
100595c4:	f004 fdfe 	bl	1005e1c4 <LL_link_calculate_window_widening_from_ppm>
100595c8:	300d      	adds	r0, #13
100595ca:	0041      	lsls	r1, r0, #1
100595cc:	6b72      	ldr	r2, [r6, #52]	@ 0x34
100595ce:	188a      	adds	r2, r1, r2
100595d0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
100595d2:	1c9b      	adds	r3, r3, #2
100595d4:	2102      	movs	r1, #2
100595d6:	910f      	str	r1, [sp, #60]	@ 0x3c
100595d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
100595da:	911e      	str	r1, [sp, #120]	@ 0x78
100595dc:	9f21      	ldr	r7, [sp, #132]	@ 0x84
100595de:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
100595e0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100595e2:	e01a      	b.n	1005961a <llc_conn_go_to_connect+0x376>
100595e4:	460d      	mov	r5, r1
100595e6:	2102      	movs	r1, #2
100595e8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
100595ea:	7001      	strb	r1, [r0, #0]
100595ec:	2000      	movs	r0, #0
100595ee:	8570      	strh	r0, [r6, #42]	@ 0x2a
100595f0:	2c04      	cmp	r4, #4
100595f2:	d000      	beq.n	100595f6 <llc_conn_go_to_connect+0x352>
100595f4:	4621      	mov	r1, r4
100595f6:	0089      	lsls	r1, r1, #2
100595f8:	1871      	adds	r1, r6, r1
100595fa:	6d89      	ldr	r1, [r1, #88]	@ 0x58
100595fc:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
100595fe:	428a      	cmp	r2, r1
10059600:	d300      	bcc.n	10059604 <llc_conn_go_to_connect+0x360>
10059602:	460a      	mov	r2, r1
10059604:	6532      	str	r2, [r6, #80]	@ 0x50
10059606:	9910      	ldr	r1, [sp, #64]	@ 0x40
10059608:	0209      	lsls	r1, r1, #8
1005960a:	186d      	adds	r5, r5, r1
1005960c:	3308      	adds	r3, #8
1005960e:	2185      	movs	r1, #133	@ 0x85
10059610:	910f      	str	r1, [sp, #60]	@ 0x3c
10059612:	990d      	ldr	r1, [sp, #52]	@ 0x34
10059614:	911e      	str	r1, [sp, #120]	@ 0x78
10059616:	9017      	str	r0, [sp, #92]	@ 0x5c
10059618:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1005961a:	6475      	str	r5, [r6, #68]	@ 0x44
1005961c:	64b0      	str	r0, [r6, #72]	@ 0x48
1005961e:	a822      	add	r0, sp, #136	@ 0x88
10059620:	2100      	movs	r1, #0
10059622:	8081      	strh	r1, [r0, #4]
10059624:	911b      	str	r1, [sp, #108]	@ 0x6c
10059626:	9122      	str	r1, [sp, #136]	@ 0x88
10059628:	4887      	ldr	r0, [pc, #540]	@ (10059848 <__arm_cp.10_2>)
1005962a:	6800      	ldr	r0, [r0, #0]
1005962c:	213d      	movs	r1, #61	@ 0x3d
1005962e:	5c41      	ldrb	r1, [r0, r1]
10059630:	0689      	lsls	r1, r1, #26
10059632:	9210      	str	r2, [sp, #64]	@ 0x40
10059634:	d506      	bpl.n	10059644 <llc_conn_go_to_connect+0x3a0>
10059636:	303d      	adds	r0, #61	@ 0x3d
10059638:	7b81      	ldrb	r1, [r0, #14]
1005963a:	07c9      	lsls	r1, r1, #31
1005963c:	d104      	bne.n	10059648 <llc_conn_go_to_connect+0x3a4>
1005963e:	7a80      	ldrb	r0, [r0, #10]
10059640:	0780      	lsls	r0, r0, #30
10059642:	d401      	bmi.n	10059648 <llc_conn_go_to_connect+0x3a4>
10059644:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
10059646:	e038      	b.n	100596ba <llc_conn_go_to_connect+0x416>
10059648:	6878      	ldr	r0, [r7, #4]
1005964a:	6801      	ldr	r1, [r0, #0]
1005964c:	461d      	mov	r5, r3
1005964e:	23fe      	movs	r3, #254	@ 0xfe
10059650:	400b      	ands	r3, r1
10059652:	aa22      	add	r2, sp, #136	@ 0x88
10059654:	2b02      	cmp	r3, #2
10059656:	d000      	beq.n	1005965a <llc_conn_go_to_connect+0x3b6>
10059658:	4615      	mov	r5, r2
1005965a:	b2c9      	uxtb	r1, r1
1005965c:	911e      	str	r1, [sp, #120]	@ 0x78
1005965e:	7b79      	ldrb	r1, [r7, #13]
10059660:	2900      	cmp	r1, #0
10059662:	d00c      	beq.n	1005967e <llc_conn_go_to_connect+0x3da>
10059664:	a922      	add	r1, sp, #136	@ 0x88
10059666:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10059668:	2a00      	cmp	r2, #0
1005966a:	d016      	beq.n	1005969a <llc_conn_go_to_connect+0x3f6>
1005966c:	6839      	ldr	r1, [r7, #0]
1005966e:	7b4a      	ldrb	r2, [r1, #13]
10059670:	23c0      	movs	r3, #192	@ 0xc0
10059672:	4013      	ands	r3, r2
10059674:	aa22      	add	r2, sp, #136	@ 0x88
10059676:	2b40      	cmp	r3, #64	@ 0x40
10059678:	d00e      	beq.n	10059698 <llc_conn_go_to_connect+0x3f4>
1005967a:	4611      	mov	r1, r2
1005967c:	e00d      	b.n	1005969a <llc_conn_go_to_connect+0x3f6>
1005967e:	a922      	add	r1, sp, #136	@ 0x88
10059680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10059682:	2a00      	cmp	r2, #0
10059684:	d009      	beq.n	1005969a <llc_conn_go_to_connect+0x3f6>
10059686:	683a      	ldr	r2, [r7, #0]
10059688:	79d1      	ldrb	r1, [r2, #7]
1005968a:	23c0      	movs	r3, #192	@ 0xc0
1005968c:	400b      	ands	r3, r1
1005968e:	a922      	add	r1, sp, #136	@ 0x88
10059690:	2b40      	cmp	r3, #64	@ 0x40
10059692:	d102      	bne.n	1005969a <llc_conn_go_to_connect+0x3f6>
10059694:	1c91      	adds	r1, r2, #2
10059696:	e000      	b.n	1005969a <llc_conn_go_to_connect+0x3f6>
10059698:	3108      	adds	r1, #8
1005969a:	7aba      	ldrb	r2, [r7, #10]
1005969c:	ab24      	add	r3, sp, #144	@ 0x90
1005969e:	759a      	strb	r2, [r3, #22]
100596a0:	893a      	ldrh	r2, [r7, #8]
100596a2:	829a      	strh	r2, [r3, #20]
100596a4:	9525      	str	r5, [sp, #148]	@ 0x94
100596a6:	9126      	str	r1, [sp, #152]	@ 0x98
100596a8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
100596aa:	2afe      	cmp	r2, #254	@ 0xfe
100596ac:	d003      	beq.n	100596b6 <llc_conn_go_to_connect+0x412>
100596ae:	2103      	movs	r1, #3
100596b0:	400a      	ands	r2, r1
100596b2:	4617      	mov	r7, r2
100596b4:	e000      	b.n	100596b8 <llc_conn_go_to_connect+0x414>
100596b6:	2701      	movs	r7, #1
100596b8:	1c43      	adds	r3, r0, #1
100596ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
100596bc:	6265      	str	r5, [r4, #36]	@ 0x24
100596be:	2001      	movs	r0, #1
100596c0:	4038      	ands	r0, r7
100596c2:	2124      	movs	r1, #36	@ 0x24
100596c4:	5460      	strb	r0, [r4, r1]
100596c6:	62a5      	str	r5, [r4, #40]	@ 0x28
100596c8:	4620      	mov	r0, r4
100596ca:	3024      	adds	r0, #36	@ 0x24
100596cc:	1c40      	adds	r0, r0, #1
100596ce:	2206      	movs	r2, #6
100596d0:	4619      	mov	r1, r3
100596d2:	461c      	mov	r4, r3
100596d4:	f7ec fbd0 	bl	10045e78 <BLEPLAT_MemCpy>
100596d8:	a824      	add	r0, sp, #144	@ 0x90
100596da:	7685      	strb	r5, [r0, #26]
100596dc:	7607      	strb	r7, [r0, #24]
100596de:	9917      	ldr	r1, [sp, #92]	@ 0x5c
100596e0:	75c1      	strb	r1, [r0, #23]
100596e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
100596e4:	8241      	strh	r1, [r0, #18]
100596e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
100596e8:	8201      	strh	r1, [r0, #16]
100596ea:	9914      	ldr	r1, [sp, #80]	@ 0x50
100596ec:	8181      	strh	r1, [r0, #12]
100596ee:	8f71      	ldrh	r1, [r6, #58]	@ 0x3a
100596f0:	81c1      	strh	r1, [r0, #14]
100596f2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
100596f4:	7b79      	ldrb	r1, [r7, #13]
100596f6:	7641      	strb	r1, [r0, #25]
100596f8:	9424      	str	r4, [sp, #144]	@ 0x90
100596fa:	f7ff fad9 	bl	10058cb0 <llc_conn_push_connection_complete_event>
100596fe:	7bf8      	ldrb	r0, [r7, #15]
10059700:	2800      	cmp	r0, #0
10059702:	d003      	beq.n	1005970c <llc_conn_go_to_connect+0x468>
10059704:	7ab9      	ldrb	r1, [r7, #10]
10059706:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
10059708:	f7ff fa94 	bl	10058c34 <llc_conn_push_adv_set_terminated_event>
1005970c:	9812      	ldr	r0, [sp, #72]	@ 0x48
1005970e:	7801      	ldrb	r1, [r0, #0]
10059710:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
10059712:	f7ff fc03 	bl	10058f1c <llc_conn_push_csa_event>
10059716:	991c      	ldr	r1, [sp, #112]	@ 0x70
10059718:	6a48      	ldr	r0, [r1, #36]	@ 0x24
1005971a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
1005971c:	f7ff fa32 	bl	10058b84 <llc_conn_list_add_address>
10059720:	7b7c      	ldrb	r4, [r7, #13]
10059722:	7bbf      	ldrb	r7, [r7, #14]
10059724:	4638      	mov	r0, r7
10059726:	f7ee f822 	bl	1004776e <BLEPLAT_CNTR_SmGetTxPwr>
1005972a:	901e      	str	r0, [sp, #120]	@ 0x78
1005972c:	4638      	mov	r0, r7
1005972e:	f7ee f843 	bl	100477b8 <BLEPLAT_CNTR_SmInitTo0>
10059732:	4638      	mov	r0, r7
10059734:	9d20      	ldr	r5, [sp, #128]	@ 0x80
10059736:	4629      	mov	r1, r5
10059738:	f7ee f9bb 	bl	10047ab2 <BLEPLAT_CNTR_SmSetTxPhy>
1005973c:	4638      	mov	r0, r7
1005973e:	4629      	mov	r1, r5
10059740:	f7ee f94b 	bl	100479da <BLEPLAT_CNTR_SmSetRxPhy>
10059744:	4638      	mov	r0, r7
10059746:	991a      	ldr	r1, [sp, #104]	@ 0x68
10059748:	f7ee f866 	bl	10047818 <BLEPLAT_CNTR_SmSetChannelMap>
1005974c:	4638      	mov	r0, r7
1005974e:	9918      	ldr	r1, [sp, #96]	@ 0x60
10059750:	f7ee f850 	bl	100477f4 <BLEPLAT_CNTR_SmSetAccessAddr>
10059754:	4638      	mov	r0, r7
10059756:	991d      	ldr	r1, [sp, #116]	@ 0x74
10059758:	f7ee f9e7 	bl	10047b2a <BLEPLAT_CNTR_SmSetUnmappedChan>
1005975c:	4638      	mov	r0, r7
1005975e:	9919      	ldr	r1, [sp, #100]	@ 0x64
10059760:	f7ee f8b2 	bl	100478c8 <BLEPLAT_CNTR_SmSetHopIncr>
10059764:	4638      	mov	r0, r7
10059766:	9915      	ldr	r1, [sp, #84]	@ 0x54
10059768:	f7ee f887 	bl	1004787a <BLEPLAT_CNTR_SmSetCrcInit>
1005976c:	4638      	mov	r0, r7
1005976e:	4631      	mov	r1, r6
10059770:	f7ee f98d 	bl	10047a8e <BLEPLAT_CNTR_SmSetTxPacketPtr>
10059774:	4635      	mov	r5, r6
10059776:	3514      	adds	r5, #20
10059778:	4638      	mov	r0, r7
1005977a:	4629      	mov	r1, r5
1005977c:	f7ee f91b 	bl	100479b6 <BLEPLAT_CNTR_SmSetRxPacketPtr>
10059780:	4638      	mov	r0, r7
10059782:	991e      	ldr	r1, [sp, #120]	@ 0x78
10059784:	f7ee f9aa 	bl	10047adc <BLEPLAT_CNTR_SmSetTxPwr>
10059788:	f7fe f8dc 	bl	10057944 <cte_csr_ucfg_weak>
1005978c:	2800      	cmp	r0, #0
1005978e:	d102      	bne.n	10059796 <llc_conn_go_to_connect+0x4f2>
10059790:	4638      	mov	r0, r7
10059792:	f7ed fea5 	bl	100474e0 <BLEPLAT_CNTR_SmCteOff>
10059796:	4638      	mov	r0, r7
10059798:	2c00      	cmp	r4, #0
1005979a:	d002      	beq.n	100597a2 <llc_conn_go_to_connect+0x4fe>
1005979c:	f7ee f8fc 	bl	10047998 <BLEPLAT_CNTR_SmSetRxMode>
100597a0:	e001      	b.n	100597a6 <llc_conn_go_to_connect+0x502>
100597a2:	f7ee f965 	bl	10047a70 <BLEPLAT_CNTR_SmSetTxMode>
100597a6:	4634      	mov	r4, r6
100597a8:	3428      	adds	r4, #40	@ 0x28
100597aa:	f7fe fa10 	bl	10057bce <data_length_extension_csr_ucfg_weak>
100597ae:	21ff      	movs	r1, #255	@ 0xff
100597b0:	2801      	cmp	r0, #1
100597b2:	d00d      	beq.n	100597d0 <llc_conn_go_to_connect+0x52c>
100597b4:	9120      	str	r1, [sp, #128]	@ 0x80
100597b6:	f001 faa9 	bl	1005ad0c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100597ba:	9920      	ldr	r1, [sp, #128]	@ 0x80
100597bc:	2801      	cmp	r0, #1
100597be:	d007      	beq.n	100597d0 <llc_conn_go_to_connect+0x52c>
100597c0:	f001 fa9a 	bl	1005acf8 <cis_csr_ucfg_weak>
100597c4:	2801      	cmp	r0, #1
100597c6:	d001      	beq.n	100597cc <llc_conn_go_to_connect+0x528>
100597c8:	9916      	ldr	r1, [sp, #88]	@ 0x58
100597ca:	e001      	b.n	100597d0 <llc_conn_go_to_connect+0x52c>
100597cc:	981b      	ldr	r0, [sp, #108]	@ 0x6c
100597ce:	43c1      	mvns	r1, r0
100597d0:	b2c9      	uxtb	r1, r1
100597d2:	4638      	mov	r0, r7
100597d4:	f7ee f863 	bl	1004789e <BLEPLAT_CNTR_SmSetDataLength>
100597d8:	4630      	mov	r0, r6
100597da:	4621      	mov	r1, r4
100597dc:	463a      	mov	r2, r7
100597de:	f000 fa35 	bl	10059c4c <llc_conn_set_blue_packets>
100597e2:	2100      	movs	r1, #0
100597e4:	4628      	mov	r0, r5
100597e6:	463a      	mov	r2, r7
100597e8:	f000 fa30 	bl	10059c4c <llc_conn_set_blue_packets>
100597ec:	4630      	mov	r0, r6
100597ee:	f7ed fe56 	bl	1004749e <BLEPLAT_CNTR_PacketSetTxReady>
100597f2:	4628      	mov	r0, r5
100597f4:	f7ed fe11 	bl	1004741a <BLEPLAT_CNTR_PacketSetRxReady>
100597f8:	9821      	ldr	r0, [sp, #132]	@ 0x84
100597fa:	7b81      	ldrb	r1, [r0, #14]
100597fc:	9120      	str	r1, [sp, #128]	@ 0x80
100597fe:	7c40      	ldrb	r0, [r0, #17]
10059800:	4634      	mov	r4, r6
10059802:	3444      	adds	r4, #68	@ 0x44
10059804:	cc1c      	ldmia	r4, {r2, r3, r4}
10059806:	991f      	ldr	r1, [sp, #124]	@ 0x7c
10059808:	788d      	ldrb	r5, [r1, #2]
1005980a:	78cf      	ldrb	r7, [r1, #3]
1005980c:	490f      	ldr	r1, [pc, #60]	@ (1005984c <__arm_cp.10_3>)
1005980e:	9107      	str	r1, [sp, #28]
10059810:	490f      	ldr	r1, [pc, #60]	@ (10059850 <__arm_cp.10_4>)
10059812:	9106      	str	r1, [sp, #24]
10059814:	490f      	ldr	r1, [pc, #60]	@ (10059854 <__arm_cp.10_5>)
10059816:	9105      	str	r1, [sp, #20]
10059818:	490f      	ldr	r1, [pc, #60]	@ (10059858 <__arm_cp.10_6>)
1005981a:	9104      	str	r1, [sp, #16]
1005981c:	9703      	str	r7, [sp, #12]
1005981e:	9502      	str	r5, [sp, #8]
10059820:	1ad1      	subs	r1, r2, r3
10059822:	9101      	str	r1, [sp, #4]
10059824:	9400      	str	r4, [sp, #0]
10059826:	2800      	cmp	r0, #0
10059828:	d001      	beq.n	1005982e <llc_conn_go_to_connect+0x58a>
1005982a:	4c0d      	ldr	r4, [pc, #52]	@ (10059860 <__arm_cp.10_8>)
1005982c:	e000      	b.n	10059830 <llc_conn_go_to_connect+0x58c>
1005982e:	4c0b      	ldr	r4, [pc, #44]	@ (1005985c <__arm_cp.10_7>)
10059830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10059832:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10059834:	9820      	ldr	r0, [sp, #128]	@ 0x80
10059836:	4631      	mov	r1, r6
10059838:	47a0      	blx	r4
1005983a:	b02b      	add	sp, #172	@ 0xac
1005983c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005983e:	46c0      	nop			@ (mov r8, r8)

10059840 <__arm_cp.10_0>:
10059840:	000004ff 	.word	0x000004ff

10059844 <__arm_cp.10_1>:
10059844:	0000f7fb 	.word	0x0000f7fb

10059848 <__arm_cp.10_2>:
10059848:	20001174 	.word	0x20001174

1005984c <__arm_cp.10_3>:
1005984c:	10064c67 	.word	0x10064c67

10059850 <__arm_cp.10_4>:
10059850:	10064df5 	.word	0x10064df5

10059854 <__arm_cp.10_5>:
10059854:	10064c9d 	.word	0x10064c9d

10059858 <__arm_cp.10_6>:
10059858:	10064d27 	.word	0x10064d27

1005985c <__arm_cp.10_7>:
1005985c:	1005eb35 	.word	0x1005eb35

10059860 <__arm_cp.10_8>:
10059860:	1005e6d1 	.word	0x1005e6d1

10059864 <llc_conn_peripheral_roll_back_params>:
10059864:	b5f0      	push	{r4, r5, r6, r7, lr}
10059866:	b089      	sub	sp, #36	@ 0x24
10059868:	4604      	mov	r4, r0
1005986a:	26fe      	movs	r6, #254	@ 0xfe
1005986c:	5b85      	ldrh	r5, [r0, r6]
1005986e:	6cc7      	ldr	r7, [r0, #76]	@ 0x4c
10059870:	f7ec fbee 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
10059874:	21e3      	movs	r1, #227	@ 0xe3
10059876:	5c62      	ldrb	r2, [r4, r1]
10059878:	4032      	ands	r2, r6
1005987a:	5462      	strb	r2, [r4, r1]
1005987c:	2135      	movs	r1, #53	@ 0x35
1005987e:	0109      	lsls	r1, r1, #4
10059880:	1846      	adds	r6, r0, r1
10059882:	437d      	muls	r5, r7
10059884:	0068      	lsls	r0, r5, #1
10059886:	1830      	adds	r0, r6, r0
10059888:	f3ef 8110 	mrs	r1, PRIMASK
1005988c:	b672      	cpsid	i
1005988e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
10059890:	43c9      	mvns	r1, r1
10059892:	1840      	adds	r0, r0, r1
10059894:	d400      	bmi.n	10059898 <llc_conn_peripheral_roll_back_params+0x34>
10059896:	e087      	b.n	100599a8 <llc_conn_peripheral_roll_back_params+0x144>
10059898:	9707      	str	r7, [sp, #28]
1005989a:	4620      	mov	r0, r4
1005989c:	30e2      	adds	r0, #226	@ 0xe2
1005989e:	9008      	str	r0, [sp, #32]
100598a0:	4630      	mov	r0, r6
100598a2:	f004 ff51 	bl	1005e748 <LL_sched_is_scheduler_call_pending>
100598a6:	2800      	cmp	r0, #0
100598a8:	d004      	beq.n	100598b4 <llc_conn_peripheral_roll_back_params+0x50>
100598aa:	4941      	ldr	r1, [pc, #260]	@ (100599b0 <__arm_cp.13_0>)
100598ac:	6809      	ldr	r1, [r1, #0]
100598ae:	7bc9      	ldrb	r1, [r1, #15]
100598b0:	2903      	cmp	r1, #3
100598b2:	d16f      	bne.n	10059994 <llc_conn_peripheral_roll_back_params+0x130>
100598b4:	9006      	str	r0, [sp, #24]
100598b6:	4620      	mov	r0, r4
100598b8:	3031      	adds	r0, #49	@ 0x31
100598ba:	9005      	str	r0, [sp, #20]
100598bc:	4620      	mov	r0, r4
100598be:	3042      	adds	r0, #66	@ 0x42
100598c0:	9004      	str	r0, [sp, #16]
100598c2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
100598c4:	1b80      	subs	r0, r0, r6
100598c6:	2600      	movs	r6, #0
100598c8:	2108      	movs	r1, #8
100598ca:	b24a      	sxtb	r2, r1
100598cc:	2a00      	cmp	r2, #0
100598ce:	d40c      	bmi.n	100598ea <llc_conn_peripheral_roll_back_params+0x86>
100598d0:	b2cb      	uxtb	r3, r1
100598d2:	462a      	mov	r2, r5
100598d4:	409a      	lsls	r2, r3
100598d6:	4290      	cmp	r0, r2
100598d8:	d302      	bcc.n	100598e0 <llc_conn_peripheral_roll_back_params+0x7c>
100598da:	2701      	movs	r7, #1
100598dc:	409f      	lsls	r7, r3
100598de:	19f6      	adds	r6, r6, r7
100598e0:	1a82      	subs	r2, r0, r2
100598e2:	d300      	bcc.n	100598e6 <llc_conn_peripheral_roll_back_params+0x82>
100598e4:	4610      	mov	r0, r2
100598e6:	1e49      	subs	r1, r1, #1
100598e8:	e7ef      	b.n	100598ca <llc_conn_peripheral_roll_back_params+0x66>
100598ea:	9908      	ldr	r1, [sp, #32]
100598ec:	8b88      	ldrh	r0, [r1, #28]
100598ee:	4346      	muls	r6, r0
100598f0:	9a04      	ldr	r2, [sp, #16]
100598f2:	8810      	ldrh	r0, [r2, #0]
100598f4:	1b80      	subs	r0, r0, r6
100598f6:	8010      	strh	r0, [r2, #0]
100598f8:	b2b5      	uxth	r5, r6
100598fa:	9f05      	ldr	r7, [sp, #20]
100598fc:	7c38      	ldrb	r0, [r7, #16]
100598fe:	7809      	ldrb	r1, [r1, #0]
10059900:	2901      	cmp	r1, #1
10059902:	d10f      	bne.n	10059924 <llc_conn_peripheral_roll_back_params+0xc0>
10059904:	4616      	mov	r6, r2
10059906:	f7ed fe3c 	bl	10047582 <BLEPLAT_CNTR_SmGetAccessAddr>
1005990a:	8836      	ldrh	r6, [r6, #0]
1005990c:	7c3a      	ldrb	r2, [r7, #16]
1005990e:	2300      	movs	r3, #0
10059910:	9300      	str	r3, [sp, #0]
10059912:	9001      	str	r0, [sp, #4]
10059914:	9302      	str	r3, [sp, #8]
10059916:	4621      	mov	r1, r4
10059918:	31bc      	adds	r1, #188	@ 0xbc
1005991a:	4610      	mov	r0, r2
1005991c:	4632      	mov	r2, r6
1005991e:	f001 f8dc 	bl	1005aada <llc_mngm_csa2_select_channel_for_task>
10059922:	e010      	b.n	10059946 <llc_conn_peripheral_roll_back_params+0xe2>
10059924:	f7ed fea4 	bl	10047670 <BLEPLAT_CNTR_SmGetHopIncr>
10059928:	2125      	movs	r1, #37	@ 0x25
1005992a:	1a08      	subs	r0, r1, r0
1005992c:	9008      	str	r0, [sp, #32]
1005992e:	4346      	muls	r6, r0
10059930:	7838      	ldrb	r0, [r7, #0]
10059932:	1830      	adds	r0, r6, r0
10059934:	b280      	uxth	r0, r0
10059936:	f001 f8a5 	bl	1005aa84 <llc_mngm_mod_37>
1005993a:	7038      	strb	r0, [r7, #0]
1005993c:	9908      	ldr	r1, [sp, #32]
1005993e:	1808      	adds	r0, r1, r0
10059940:	b280      	uxth	r0, r0
10059942:	f001 f89f 	bl	1005aa84 <llc_mngm_mod_37>
10059946:	4601      	mov	r1, r0
10059948:	7c38      	ldrb	r0, [r7, #16]
1005994a:	f7ee f8ee 	bl	10047b2a <BLEPLAT_CNTR_SmSetUnmappedChan>
1005994e:	9807      	ldr	r0, [sp, #28]
10059950:	4345      	muls	r5, r0
10059952:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10059954:	1b40      	subs	r0, r0, r5
10059956:	6460      	str	r0, [r4, #68]	@ 0x44
10059958:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
1005995a:	4629      	mov	r1, r5
1005995c:	f004 fc32 	bl	1005e1c4 <LL_link_calculate_window_widening_from_ppm>
10059960:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
10059962:	4282      	cmp	r2, r0
10059964:	d904      	bls.n	10059970 <llc_conn_peripheral_roll_back_params+0x10c>
10059966:	1a12      	subs	r2, r2, r0
10059968:	2a0d      	cmp	r2, #13
1005996a:	d800      	bhi.n	1005996e <llc_conn_peripheral_roll_back_params+0x10a>
1005996c:	220d      	movs	r2, #13
1005996e:	64a2      	str	r2, [r4, #72]	@ 0x48
10059970:	6e60      	ldr	r0, [r4, #100]	@ 0x64
10059972:	1940      	adds	r0, r0, r5
10059974:	6660      	str	r0, [r4, #100]	@ 0x64
10059976:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
10059978:	0051      	lsls	r1, r2, #1
1005997a:	1809      	adds	r1, r1, r0
1005997c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005997e:	1a82      	subs	r2, r0, r2
10059980:	7c38      	ldrb	r0, [r7, #16]
10059982:	f004 fe89 	bl	1005e698 <LL_sched_set_taskslot_length_anchor>
10059986:	9806      	ldr	r0, [sp, #24]
10059988:	2800      	cmp	r0, #0
1005998a:	d10d      	bne.n	100599a8 <llc_conn_peripheral_roll_back_params+0x144>
1005998c:	7c38      	ldrb	r0, [r7, #16]
1005998e:	f004 fefd 	bl	1005e78c <LL_sched_engine>
10059992:	e009      	b.n	100599a8 <llc_conn_peripheral_roll_back_params+0x144>
10059994:	9a08      	ldr	r2, [sp, #32]
10059996:	7850      	ldrb	r0, [r2, #1]
10059998:	2101      	movs	r1, #1
1005999a:	4301      	orrs	r1, r0
1005999c:	7051      	strb	r1, [r2, #1]
1005999e:	2014      	movs	r0, #20
100599a0:	f008 fb7c 	bl	1006209c <tsk_notify_idx>
100599a4:	f7ea fa7b 	bl	10043e9e <BLE_STACK_ProcessRequest>
100599a8:	b662      	cpsie	i
100599aa:	b009      	add	sp, #36	@ 0x24
100599ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100599ae:	46c0      	nop			@ (mov r8, r8)

100599b0 <__arm_cp.13_0>:
100599b0:	20001178 	.word	0x20001178

100599b4 <llc_conn_reserve_conn_idx>:
100599b4:	b510      	push	{r4, lr}
100599b6:	2400      	movs	r4, #0
100599b8:	4620      	mov	r0, r4
100599ba:	f7fe fddf 	bl	1005857c <llc_conn_get_cntxt_per_p>
100599be:	490a      	ldr	r1, [pc, #40]	@ (100599e8 <__arm_cp.14_0>)
100599c0:	6809      	ldr	r1, [r1, #0]
100599c2:	2234      	movs	r2, #52	@ 0x34
100599c4:	5c89      	ldrb	r1, [r1, r2]
100599c6:	302c      	adds	r0, #44	@ 0x2c
100599c8:	42a1      	cmp	r1, r4
100599ca:	d007      	beq.n	100599dc <llc_conn_reserve_conn_idx+0x28>
100599cc:	7802      	ldrb	r2, [r0, #0]
100599ce:	2a00      	cmp	r2, #0
100599d0:	d006      	beq.n	100599e0 <llc_conn_reserve_conn_idx+0x2c>
100599d2:	2233      	movs	r2, #51	@ 0x33
100599d4:	00d2      	lsls	r2, r2, #3
100599d6:	1880      	adds	r0, r0, r2
100599d8:	1c64      	adds	r4, r4, #1
100599da:	e7f5      	b.n	100599c8 <llc_conn_reserve_conn_idx+0x14>
100599dc:	24ff      	movs	r4, #255	@ 0xff
100599de:	e001      	b.n	100599e4 <llc_conn_reserve_conn_idx+0x30>
100599e0:	2101      	movs	r1, #1
100599e2:	7001      	strb	r1, [r0, #0]
100599e4:	b2e0      	uxtb	r0, r4
100599e6:	bd10      	pop	{r4, pc}

100599e8 <__arm_cp.14_0>:
100599e8:	20001120 	.word	0x20001120

100599ec <llc_conn_send_acl_data>:
100599ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100599ee:	4605      	mov	r5, r0
100599f0:	8800      	ldrh	r0, [r0, #0]
100599f2:	f7fe fdd1 	bl	10058598 <llc_conn_get_cntxt_per_p_from_handle>
100599f6:	2800      	cmp	r0, #0
100599f8:	d011      	beq.n	10059a1e <llc_conn_send_acl_data+0x32>
100599fa:	4604      	mov	r4, r0
100599fc:	4606      	mov	r6, r0
100599fe:	362c      	adds	r6, #44	@ 0x2c
10059a00:	f3ef 8010 	mrs	r0, PRIMASK
10059a04:	b672      	cpsid	i
10059a06:	4620      	mov	r0, r4
10059a08:	3078      	adds	r0, #120	@ 0x78
10059a0a:	4629      	mov	r1, r5
10059a0c:	f008 fd3c 	bl	10062488 <ACL_list_insert_tail>
10059a10:	7830      	ldrb	r0, [r6, #0]
10059a12:	2803      	cmp	r0, #3
10059a14:	d105      	bne.n	10059a22 <llc_conn_send_acl_data+0x36>
10059a16:	4620      	mov	r0, r4
10059a18:	f7ff ff24 	bl	10059864 <llc_conn_peripheral_roll_back_params>
10059a1c:	e01a      	b.n	10059a54 <llc_conn_send_acl_data+0x68>
10059a1e:	2002      	movs	r0, #2
10059a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059a22:	7d70      	ldrb	r0, [r6, #21]
10059a24:	4d27      	ldr	r5, [pc, #156]	@ (10059ac4 <__arm_cp.15_0>)
10059a26:	6829      	ldr	r1, [r5, #0]
10059a28:	7b49      	ldrb	r1, [r1, #13]
10059a2a:	4288      	cmp	r0, r1
10059a2c:	d112      	bne.n	10059a54 <llc_conn_send_acl_data+0x68>
10059a2e:	f7ec fb0f 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
10059a32:	6829      	ldr	r1, [r5, #0]
10059a34:	6809      	ldr	r1, [r1, #0]
10059a36:	43c9      	mvns	r1, r1
10059a38:	1840      	adds	r0, r0, r1
10059a3a:	2101      	movs	r1, #1
10059a3c:	0289      	lsls	r1, r1, #10
10059a3e:	1840      	adds	r0, r0, r1
10059a40:	d508      	bpl.n	10059a54 <llc_conn_send_acl_data+0x68>
10059a42:	6d70      	ldr	r0, [r6, #84]	@ 0x54
10059a44:	2140      	movs	r1, #64	@ 0x40
10059a46:	4001      	ands	r1, r0
10059a48:	d104      	bne.n	10059a54 <llc_conn_send_acl_data+0x68>
10059a4a:	4620      	mov	r0, r4
10059a4c:	f7ff f83b 	bl	10058ac6 <llc_conn_get_tx_acl_blocked>
10059a50:	2800      	cmp	r0, #0
10059a52:	d002      	beq.n	10059a5a <llc_conn_send_acl_data+0x6e>
10059a54:	b662      	cpsie	i
10059a56:	2084      	movs	r0, #132	@ 0x84
10059a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059a5a:	4620      	mov	r0, r4
10059a5c:	f7ed fbe9 	bl	10047232 <BLEPLAT_CNTR_PacketGetDataPtr>
10059a60:	4605      	mov	r5, r0
10059a62:	4620      	mov	r0, r4
10059a64:	3028      	adds	r0, #40	@ 0x28
10059a66:	4285      	cmp	r5, r0
10059a68:	d00a      	beq.n	10059a80 <llc_conn_send_acl_data+0x94>
10059a6a:	2101      	movs	r1, #1
10059a6c:	4620      	mov	r0, r4
10059a6e:	f7ff f80d 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
10059a72:	4285      	cmp	r5, r0
10059a74:	d0ee      	beq.n	10059a54 <llc_conn_send_acl_data+0x68>
10059a76:	7828      	ldrb	r0, [r5, #0]
10059a78:	2110      	movs	r1, #16
10059a7a:	4301      	orrs	r1, r0
10059a7c:	7029      	strb	r1, [r5, #0]
10059a7e:	e7e9      	b.n	10059a54 <llc_conn_send_acl_data+0x68>
10059a80:	4811      	ldr	r0, [pc, #68]	@ (10059ac8 <__arm_cp.15_1>)
10059a82:	6800      	ldr	r0, [r0, #0]
10059a84:	218c      	movs	r1, #140	@ 0x8c
10059a86:	5840      	ldr	r0, [r0, r1]
10059a88:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
10059a8a:	8a31      	ldrh	r1, [r6, #16]
10059a8c:	89f2      	ldrh	r2, [r6, #14]
10059a8e:	1851      	adds	r1, r2, r1
10059a90:	221f      	movs	r2, #31
10059a92:	400a      	ands	r2, r1
10059a94:	1817      	adds	r7, r2, r0
10059a96:	1cbd      	adds	r5, r7, #2
10059a98:	4620      	mov	r0, r4
10059a9a:	4629      	mov	r1, r5
10059a9c:	f7ed fc0b 	bl	100472b6 <BLEPLAT_CNTR_PacketSetDataPtr>
10059aa0:	4620      	mov	r0, r4
10059aa2:	4631      	mov	r1, r6
10059aa4:	f7fe ff48 	bl	10058938 <llc_conn_copy_tx_data_packet>
10059aa8:	6766      	str	r6, [r4, #116]	@ 0x74
10059aaa:	78f8      	ldrb	r0, [r7, #3]
10059aac:	2800      	cmp	r0, #0
10059aae:	d0d1      	beq.n	10059a54 <llc_conn_send_acl_data+0x68>
10059ab0:	2101      	movs	r1, #1
10059ab2:	4620      	mov	r0, r4
10059ab4:	f7fe fff0 	bl	10058a98 <llc_conn_get_enc_on>
10059ab8:	2801      	cmp	r0, #1
10059aba:	d1cb      	bne.n	10059a54 <llc_conn_send_acl_data+0x68>
10059abc:	7868      	ldrb	r0, [r5, #1]
10059abe:	1d00      	adds	r0, r0, #4
10059ac0:	7068      	strb	r0, [r5, #1]
10059ac2:	e7c7      	b.n	10059a54 <llc_conn_send_acl_data+0x68>

10059ac4 <__arm_cp.15_0>:
10059ac4:	20001178 	.word	0x20001178

10059ac8 <__arm_cp.15_1>:
10059ac8:	20001174 	.word	0x20001174

10059acc <llc_conn_set_taskslot_params>:
10059acc:	b5f0      	push	{r4, r5, r6, r7, lr}
10059ace:	b085      	sub	sp, #20
10059ad0:	460f      	mov	r7, r1
10059ad2:	4604      	mov	r4, r0
10059ad4:	2041      	movs	r0, #65	@ 0x41
10059ad6:	5c20      	ldrb	r0, [r4, r0]
10059ad8:	21e2      	movs	r1, #226	@ 0xe2
10059ada:	5c61      	ldrb	r1, [r4, r1]
10059adc:	4625      	mov	r5, r4
10059ade:	352c      	adds	r5, #44	@ 0x2c
10059ae0:	2901      	cmp	r1, #1
10059ae2:	d10d      	bne.n	10059b00 <llc_conn_set_taskslot_params+0x34>
10059ae4:	f7ed fd4d 	bl	10047582 <BLEPLAT_CNTR_SmGetAccessAddr>
10059ae8:	8aea      	ldrh	r2, [r5, #22]
10059aea:	7d6e      	ldrb	r6, [r5, #21]
10059aec:	2300      	movs	r3, #0
10059aee:	9300      	str	r3, [sp, #0]
10059af0:	9001      	str	r0, [sp, #4]
10059af2:	9302      	str	r3, [sp, #8]
10059af4:	4621      	mov	r1, r4
10059af6:	31bc      	adds	r1, #188	@ 0xbc
10059af8:	4630      	mov	r0, r6
10059afa:	f000 ffee 	bl	1005aada <llc_mngm_csa2_select_channel_for_task>
10059afe:	e010      	b.n	10059b22 <llc_conn_set_taskslot_params+0x56>
10059b00:	4616      	mov	r6, r2
10059b02:	f7ed fdb5 	bl	10047670 <BLEPLAT_CNTR_SmGetHopIncr>
10059b06:	9704      	str	r7, [sp, #16]
10059b08:	4607      	mov	r7, r0
10059b0a:	4346      	muls	r6, r0
10059b0c:	7968      	ldrb	r0, [r5, #5]
10059b0e:	1836      	adds	r6, r6, r0
10059b10:	b2b0      	uxth	r0, r6
10059b12:	f000 ffb7 	bl	1005aa84 <llc_mngm_mod_37>
10059b16:	7168      	strb	r0, [r5, #5]
10059b18:	1bf0      	subs	r0, r6, r7
10059b1a:	9f04      	ldr	r7, [sp, #16]
10059b1c:	b280      	uxth	r0, r0
10059b1e:	f000 ffb1 	bl	1005aa84 <llc_mngm_mod_37>
10059b22:	4601      	mov	r1, r0
10059b24:	7d68      	ldrb	r0, [r5, #21]
10059b26:	f7ee f800 	bl	10047b2a <BLEPLAT_CNTR_SmSetUnmappedChan>
10059b2a:	7828      	ldrb	r0, [r5, #0]
10059b2c:	2802      	cmp	r0, #2
10059b2e:	d10c      	bne.n	10059b4a <llc_conn_set_taskslot_params+0x7e>
10059b30:	4620      	mov	r0, r4
10059b32:	f7ed fc65 	bl	10047400 <BLEPLAT_CNTR_PacketSetPllTrig>
10059b36:	4620      	mov	r0, r4
10059b38:	f7ed fbcc 	bl	100472d4 <BLEPLAT_CNTR_PacketSetIncChan>
10059b3c:	7d68      	ldrb	r0, [r5, #21]
10059b3e:	f7ed ff97 	bl	10047a70 <BLEPLAT_CNTR_SmSetTxMode>
10059b42:	6c62      	ldr	r2, [r4, #68]	@ 0x44
10059b44:	6d21      	ldr	r1, [r4, #80]	@ 0x50
10059b46:	7d68      	ldrb	r0, [r5, #21]
10059b48:	e02d      	b.n	10059ba6 <llc_conn_set_taskslot_params+0xda>
10059b4a:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
10059b4c:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
10059b4e:	4639      	mov	r1, r7
10059b50:	f004 fb38 	bl	1005e1c4 <LL_link_calculate_window_widening_from_ppm>
10059b54:	1980      	adds	r0, r0, r6
10059b56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
10059b58:	2900      	cmp	r1, #0
10059b5a:	d100      	bne.n	10059b5e <llc_conn_set_taskslot_params+0x92>
10059b5c:	300d      	adds	r0, #13
10059b5e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
10059b60:	0849      	lsrs	r1, r1, #1
10059b62:	393e      	subs	r1, #62	@ 0x3e
10059b64:	4288      	cmp	r0, r1
10059b66:	d901      	bls.n	10059b6c <llc_conn_set_taskslot_params+0xa0>
10059b68:	2008      	movs	r0, #8
10059b6a:	e022      	b.n	10059bb2 <llc_conn_set_taskslot_params+0xe6>
10059b6c:	64a0      	str	r0, [r4, #72]	@ 0x48
10059b6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10059b70:	0040      	lsls	r0, r0, #1
10059b72:	2900      	cmp	r1, #0
10059b74:	d001      	beq.n	10059b7a <llc_conn_set_taskslot_params+0xae>
10059b76:	180f      	adds	r7, r1, r0
10059b78:	e005      	b.n	10059b86 <llc_conn_set_taskslot_params+0xba>
10059b7a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
10059b7c:	1808      	adds	r0, r1, r0
10059b7e:	6d27      	ldr	r7, [r4, #80]	@ 0x50
10059b80:	42b8      	cmp	r0, r7
10059b82:	d800      	bhi.n	10059b86 <llc_conn_set_taskslot_params+0xba>
10059b84:	4607      	mov	r7, r0
10059b86:	4626      	mov	r6, r4
10059b88:	3614      	adds	r6, #20
10059b8a:	4630      	mov	r0, r6
10059b8c:	f7ed fc38 	bl	10047400 <BLEPLAT_CNTR_PacketSetPllTrig>
10059b90:	4630      	mov	r0, r6
10059b92:	f7ed fb9f 	bl	100472d4 <BLEPLAT_CNTR_PacketSetIncChan>
10059b96:	7d68      	ldrb	r0, [r5, #21]
10059b98:	f7ed fefe 	bl	10047998 <BLEPLAT_CNTR_SmSetRxMode>
10059b9c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10059b9e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
10059ba0:	1a42      	subs	r2, r0, r1
10059ba2:	7d68      	ldrb	r0, [r5, #21]
10059ba4:	4639      	mov	r1, r7
10059ba6:	f004 fd77 	bl	1005e698 <LL_sched_set_taskslot_length_anchor>
10059baa:	8e60      	ldrh	r0, [r4, #50]	@ 0x32
10059bac:	1c40      	adds	r0, r0, #1
10059bae:	8660      	strh	r0, [r4, #50]	@ 0x32
10059bb0:	2000      	movs	r0, #0
10059bb2:	b005      	add	sp, #20
10059bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10059bb8 <llc_conn_update_receive_window>:
10059bb8:	b570      	push	{r4, r5, r6, lr}
10059bba:	4604      	mov	r4, r0
10059bbc:	4606      	mov	r6, r0
10059bbe:	362c      	adds	r6, #44	@ 0x2c
10059bc0:	4605      	mov	r5, r0
10059bc2:	35ac      	adds	r5, #172	@ 0xac
10059bc4:	f7f8 f83b 	bl	10051c3e <phy_upd_csr_ucfg>
10059bc8:	2801      	cmp	r0, #1
10059bca:	d10b      	bne.n	10059be4 <llc_conn_update_receive_window+0x2c>
10059bcc:	7930      	ldrb	r0, [r6, #4]
10059bce:	210e      	movs	r1, #14
10059bd0:	4341      	muls	r1, r0
10059bd2:	480e      	ldr	r0, [pc, #56]	@ (10059c0c <__arm_cp.17_0>)
10059bd4:	6800      	ldr	r0, [r0, #0]
10059bd6:	2294      	movs	r2, #148	@ 0x94
10059bd8:	5880      	ldr	r0, [r0, r2]
10059bda:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10059bdc:	6880      	ldr	r0, [r0, #8]
10059bde:	1840      	adds	r0, r0, r1
10059be0:	79c0      	ldrb	r0, [r0, #7]
10059be2:	e000      	b.n	10059be6 <llc_conn_update_receive_window+0x2e>
10059be4:	2001      	movs	r0, #1
10059be6:	f7ed ffc4 	bl	10047b72 <BLEPLAT_CNTR_DemodDelaySt>
10059bea:	4909      	ldr	r1, [pc, #36]	@ (10059c10 <__arm_cp.17_1>)
10059bec:	4348      	muls	r0, r1
10059bee:	0a00      	lsrs	r0, r0, #8
10059bf0:	3010      	adds	r0, #16
10059bf2:	6028      	str	r0, [r5, #0]
10059bf4:	7832      	ldrb	r2, [r6, #0]
10059bf6:	2a03      	cmp	r2, #3
10059bf8:	d107      	bne.n	10059c0a <llc_conn_update_receive_window+0x52>
10059bfa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
10059bfc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
10059bfe:	005b      	lsls	r3, r3, #1
10059c00:	189a      	adds	r2, r3, r2
10059c02:	4351      	muls	r1, r2
10059c04:	0a09      	lsrs	r1, r1, #8
10059c06:	1808      	adds	r0, r1, r0
10059c08:	6028      	str	r0, [r5, #0]
10059c0a:	bd70      	pop	{r4, r5, r6, pc}

10059c0c <__arm_cp.17_0>:
10059c0c:	20001174 	.word	0x20001174

10059c10 <__arm_cp.17_1>:
10059c10:	00000271 	.word	0x00000271

10059c14 <llc_conn_peripheral_roll_back_params_tsk>:
10059c14:	b570      	push	{r4, r5, r6, lr}
10059c16:	2400      	movs	r4, #0
10059c18:	4620      	mov	r0, r4
10059c1a:	f7fe fcaf 	bl	1005857c <llc_conn_get_cntxt_per_p>
10059c1e:	4605      	mov	r5, r0
10059c20:	4e09      	ldr	r6, [pc, #36]	@ (10059c48 <__arm_cp.19_0>)
10059c22:	6830      	ldr	r0, [r6, #0]
10059c24:	2134      	movs	r1, #52	@ 0x34
10059c26:	5c41      	ldrb	r1, [r0, r1]
10059c28:	428c      	cmp	r4, r1
10059c2a:	d20c      	bcs.n	10059c46 <llc_conn_peripheral_roll_back_params_tsk+0x32>
10059c2c:	21e3      	movs	r1, #227	@ 0xe3
10059c2e:	5c69      	ldrb	r1, [r5, r1]
10059c30:	07c9      	lsls	r1, r1, #31
10059c32:	d003      	beq.n	10059c3c <llc_conn_peripheral_roll_back_params_tsk+0x28>
10059c34:	4628      	mov	r0, r5
10059c36:	f7ff fe15 	bl	10059864 <llc_conn_peripheral_roll_back_params>
10059c3a:	6830      	ldr	r0, [r6, #0]
10059c3c:	2133      	movs	r1, #51	@ 0x33
10059c3e:	00c9      	lsls	r1, r1, #3
10059c40:	186d      	adds	r5, r5, r1
10059c42:	1c64      	adds	r4, r4, #1
10059c44:	e7ee      	b.n	10059c24 <llc_conn_peripheral_roll_back_params_tsk+0x10>
10059c46:	bd70      	pop	{r4, r5, r6, pc}

10059c48 <__arm_cp.19_0>:
10059c48:	20001120 	.word	0x20001120

10059c4c <llc_conn_set_blue_packets>:
10059c4c:	b570      	push	{r4, r5, r6, lr}
10059c4e:	4616      	mov	r6, r2
10059c50:	460d      	mov	r5, r1
10059c52:	4604      	mov	r4, r0
10059c54:	f7ed fafa 	bl	1004724c <BLEPLAT_CNTR_PacketInitTo0>
10059c58:	4620      	mov	r0, r4
10059c5a:	f7ed fb12 	bl	10047282 <BLEPLAT_CNTR_PacketSetCrcinitSel>
10059c5e:	4620      	mov	r0, r4
10059c60:	f7ed fb50 	bl	10047304 <BLEPLAT_CNTR_PacketSetIntDone>
10059c64:	4620      	mov	r0, r4
10059c66:	4621      	mov	r1, r4
10059c68:	f7ed fb8a 	bl	10047380 <BLEPLAT_CNTR_PacketSetNextPtr>
10059c6c:	4620      	mov	r0, r4
10059c6e:	f7ed fbbb 	bl	100473e8 <BLEPLAT_CNTR_PacketSetNsEn>
10059c72:	4620      	mov	r0, r4
10059c74:	4631      	mov	r1, r6
10059c76:	f7ed fb9f 	bl	100473b8 <BLEPLAT_CNTR_PacketSetNextSlot>
10059c7a:	4620      	mov	r0, r4
10059c7c:	f7ed fbe9 	bl	10047452 <BLEPLAT_CNTR_PacketSetTimer2Active>
10059c80:	4620      	mov	r0, r4
10059c82:	f7ed fbbd 	bl	10047400 <BLEPLAT_CNTR_PacketSetPllTrig>
10059c86:	4620      	mov	r0, r4
10059c88:	f7ed fb24 	bl	100472d4 <BLEPLAT_CNTR_PacketSetIncChan>
10059c8c:	4620      	mov	r0, r4
10059c8e:	f7ed fb6a 	bl	10047366 <BLEPLAT_CNTR_PacketSetKeepsemareq>
10059c92:	2d00      	cmp	r5, #0
10059c94:	d00d      	beq.n	10059cb2 <llc_conn_set_blue_packets+0x66>
10059c96:	2094      	movs	r0, #148	@ 0x94
10059c98:	2100      	movs	r1, #0
10059c9a:	460a      	mov	r2, r1
10059c9c:	f7ed f964 	bl	10046f68 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
10059ca0:	4601      	mov	r1, r0
10059ca2:	4620      	mov	r0, r4
10059ca4:	f7ed fbc6 	bl	10047434 <BLEPLAT_CNTR_PacketSetTimeout>
10059ca8:	4620      	mov	r0, r4
10059caa:	4629      	mov	r1, r5
10059cac:	f7ed fb03 	bl	100472b6 <BLEPLAT_CNTR_PacketSetDataPtr>
10059cb0:	bd70      	pop	{r4, r5, r6, pc}
10059cb2:	4812      	ldr	r0, [pc, #72]	@ (10059cfc <__arm_cp.20_0>)
10059cb4:	6800      	ldr	r0, [r0, #0]
10059cb6:	2190      	movs	r1, #144	@ 0x90
10059cb8:	5845      	ldr	r5, [r0, r1]
10059cba:	2096      	movs	r0, #150	@ 0x96
10059cbc:	2101      	movs	r1, #1
10059cbe:	2200      	movs	r2, #0
10059cc0:	f7ed f952 	bl	10046f68 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
10059cc4:	4601      	mov	r1, r0
10059cc6:	4620      	mov	r0, r4
10059cc8:	f7ed fbb4 	bl	10047434 <BLEPLAT_CNTR_PacketSetTimeout>
10059ccc:	4620      	mov	r0, r4
10059cce:	f7ed fb25 	bl	1004731c <BLEPLAT_CNTR_PacketSetIntRcvOk>
10059cd2:	4620      	mov	r0, r4
10059cd4:	f7ed fb3a 	bl	1004734c <BLEPLAT_CNTR_PacketSetIntTxOk>
10059cd8:	4620      	mov	r0, r4
10059cda:	f7ed fb2b 	bl	10047334 <BLEPLAT_CNTR_PacketSetIntTimeout>
10059cde:	4620      	mov	r0, r4
10059ce0:	f7ed fb04 	bl	100472ec <BLEPLAT_CNTR_PacketSetIntCrcErr>
10059ce4:	1ca9      	adds	r1, r5, #2
10059ce6:	4620      	mov	r0, r4
10059ce8:	f7ed fae5 	bl	100472b6 <BLEPLAT_CNTR_PacketSetDataPtr>
10059cec:	4620      	mov	r0, r4
10059cee:	f7ed fb6e 	bl	100473ce <BLEPLAT_CNTR_PacketSetNextTxMode>
10059cf2:	4620      	mov	r0, r4
10059cf4:	f7ed fbc6 	bl	10047484 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
10059cf8:	bd70      	pop	{r4, r5, r6, pc}
10059cfa:	46c0      	nop			@ (mov r8, r8)

10059cfc <__arm_cp.20_0>:
10059cfc:	20001174 	.word	0x20001174

10059d00 <llc_cpe_get_cntxt_p>:
10059d00:	4803      	ldr	r0, [pc, #12]	@ (10059d10 <__arm_cp.0_0>)
10059d02:	6800      	ldr	r0, [r0, #0]
10059d04:	2194      	movs	r1, #148	@ 0x94
10059d06:	5840      	ldr	r0, [r0, r1]
10059d08:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10059d0a:	6800      	ldr	r0, [r0, #0]
10059d0c:	3034      	adds	r0, #52	@ 0x34
10059d0e:	4770      	bx	lr

10059d10 <__arm_cp.0_0>:
10059d10:	20001174 	.word	0x20001174

10059d14 <llc_cpe_get_cntxt_per_p>:
10059d14:	2133      	movs	r1, #51	@ 0x33
10059d16:	00c9      	lsls	r1, r1, #3
10059d18:	4341      	muls	r1, r0
10059d1a:	4805      	ldr	r0, [pc, #20]	@ (10059d30 <__arm_cp.1_0>)
10059d1c:	6800      	ldr	r0, [r0, #0]
10059d1e:	2294      	movs	r2, #148	@ 0x94
10059d20:	5880      	ldr	r0, [r0, r2]
10059d22:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10059d24:	6840      	ldr	r0, [r0, #4]
10059d26:	1840      	adds	r0, r0, r1
10059d28:	2111      	movs	r1, #17
10059d2a:	0109      	lsls	r1, r1, #4
10059d2c:	1840      	adds	r0, r0, r1
10059d2e:	4770      	bx	lr

10059d30 <__arm_cp.1_0>:
10059d30:	20001174 	.word	0x20001174

10059d34 <llc_cpe_init>:
10059d34:	b510      	push	{r4, lr}
10059d36:	2001      	movs	r0, #1
10059d38:	4912      	ldr	r1, [pc, #72]	@ (10059d84 <__arm_cp.2_0>)
10059d3a:	4c13      	ldr	r4, [pc, #76]	@ (10059d88 <__arm_cp.2_1>)
10059d3c:	47a0      	blx	r4
10059d3e:	2003      	movs	r0, #3
10059d40:	4912      	ldr	r1, [pc, #72]	@ (10059d8c <__arm_cp.2_2>)
10059d42:	47a0      	blx	r4
10059d44:	2005      	movs	r0, #5
10059d46:	4912      	ldr	r1, [pc, #72]	@ (10059d90 <__arm_cp.2_3>)
10059d48:	47a0      	blx	r4
10059d4a:	2008      	movs	r0, #8
10059d4c:	4911      	ldr	r1, [pc, #68]	@ (10059d94 <__arm_cp.2_4>)
10059d4e:	47a0      	blx	r4
10059d50:	2000      	movs	r0, #0
10059d52:	4911      	ldr	r1, [pc, #68]	@ (10059d98 <__arm_cp.2_5>)
10059d54:	47a0      	blx	r4
10059d56:	2002      	movs	r0, #2
10059d58:	4910      	ldr	r1, [pc, #64]	@ (10059d9c <__arm_cp.2_6>)
10059d5a:	47a0      	blx	r4
10059d5c:	f002 f8e7 	bl	1005bf2e <llc_len_upd_register_cpf_ucfg_weak>
10059d60:	f7f8 f8c8 	bl	10051ef4 <llc_phy_upd_register_cpf_ucfg>
10059d64:	f000 ffd7 	bl	1005ad16 <llc_past_register_cpf_ucfg_weak>
10059d68:	f001 fb8c 	bl	1005b484 <llc_cte_register_cpf_ucfg_weak>
10059d6c:	f002 faad 	bl	1005c2ca <llc_pcl_register_cpf_ucfg_weak>
10059d70:	f001 f92d 	bl	1005afce <llc_chan_class_register_cpf_ucfg_weak>
10059d74:	f001 f937 	bl	1005afe6 <llc_cis_register_cpf_ucfg_weak>
10059d78:	f001 f855 	bl	1005ae26 <llc_subrate_register_cpf_ucfg_weak>
10059d7c:	f001 f82b 	bl	1005add6 <llc_sca_upd_register_cpf_ucfg_weak>
10059d80:	bd10      	pop	{r4, pc}
10059d82:	46c0      	nop			@ (mov r8, r8)

10059d84 <__arm_cp.2_0>:
10059d84:	1005b49d 	.word	0x1005b49d

10059d88 <__arm_cp.2_1>:
10059d88:	1005a211 	.word	0x1005a211

10059d8c <__arm_cp.2_2>:
10059d8c:	1005bc5d 	.word	0x1005bc5d

10059d90 <__arm_cp.2_3>:
10059d90:	1005ccf9 	.word	0x1005ccf9

10059d94 <__arm_cp.2_4>:
10059d94:	1005c229 	.word	0x1005c229

10059d98 <__arm_cp.2_5>:
10059d98:	1005affd 	.word	0x1005affd

10059d9c <__arm_cp.2_6>:
10059d9c:	1005aeb1 	.word	0x1005aeb1

10059da0 <llc_cpe_mem_allocate>:
10059da0:	b580      	push	{r7, lr}
10059da2:	2012      	movs	r0, #18
10059da4:	2104      	movs	r1, #4
10059da6:	f005 f8d1 	bl	1005ef4c <csmem_mem_0_assign>
10059daa:	4904      	ldr	r1, [pc, #16]	@ (10059dbc <__arm_cp.3_0>)
10059dac:	6809      	ldr	r1, [r1, #0]
10059dae:	2294      	movs	r2, #148	@ 0x94
10059db0:	5889      	ldr	r1, [r1, r2]
10059db2:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
10059db4:	6809      	ldr	r1, [r1, #0]
10059db6:	6348      	str	r0, [r1, #52]	@ 0x34
10059db8:	bd80      	pop	{r7, pc}
10059dba:	46c0      	nop			@ (mov r8, r8)

10059dbc <__arm_cp.3_0>:
10059dbc:	20001174 	.word	0x20001174

10059dc0 <llc_cpe_per_init>:
10059dc0:	2133      	movs	r1, #51	@ 0x33
10059dc2:	00c9      	lsls	r1, r1, #3
10059dc4:	4341      	muls	r1, r0
10059dc6:	4810      	ldr	r0, [pc, #64]	@ (10059e08 <__arm_cp.4_0>)
10059dc8:	6800      	ldr	r0, [r0, #0]
10059dca:	2294      	movs	r2, #148	@ 0x94
10059dcc:	5880      	ldr	r0, [r0, r2]
10059dce:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10059dd0:	6840      	ldr	r0, [r0, #4]
10059dd2:	1840      	adds	r0, r0, r1
10059dd4:	2111      	movs	r1, #17
10059dd6:	0109      	lsls	r1, r1, #4
10059dd8:	1841      	adds	r1, r0, r1
10059dda:	2202      	movs	r2, #2
10059ddc:	2a00      	cmp	r2, #0
10059dde:	d009      	beq.n	10059df4 <llc_cpe_per_init+0x34>
10059de0:	2300      	movs	r3, #0
10059de2:	80cb      	strh	r3, [r1, #6]
10059de4:	23ff      	movs	r3, #255	@ 0xff
10059de6:	714b      	strb	r3, [r1, #5]
10059de8:	237d      	movs	r3, #125	@ 0x7d
10059dea:	045b      	lsls	r3, r3, #17
10059dec:	600b      	str	r3, [r1, #0]
10059dee:	3140      	adds	r1, #64	@ 0x40
10059df0:	1e52      	subs	r2, r2, #1
10059df2:	e7f3      	b.n	10059ddc <llc_cpe_per_init+0x1c>
10059df4:	21cb      	movs	r1, #203	@ 0xcb
10059df6:	0049      	lsls	r1, r1, #1
10059df8:	22ff      	movs	r2, #255	@ 0xff
10059dfa:	5442      	strb	r2, [r0, r1]
10059dfc:	2119      	movs	r1, #25
10059dfe:	0109      	lsls	r1, r1, #4
10059e00:	2200      	movs	r2, #0
10059e02:	5042      	str	r2, [r0, r1]
10059e04:	4770      	bx	lr
10059e06:	46c0      	nop			@ (mov r8, r8)

10059e08 <__arm_cp.4_0>:
10059e08:	20001174 	.word	0x20001174

10059e0c <llc_cpe_calculate_instant>:
10059e0c:	1c49      	adds	r1, r1, #1
10059e0e:	4351      	muls	r1, r2
10059e10:	2206      	movs	r2, #6
10059e12:	434a      	muls	r2, r1
10059e14:	1810      	adds	r0, r2, r0
10059e16:	b280      	uxth	r0, r0
10059e18:	4770      	bx	lr

10059e1a <llc_cpe_clr_phy_upd_pending>:
10059e1a:	2182      	movs	r1, #130	@ 0x82
10059e1c:	5a42      	ldrh	r2, [r0, r1]
10059e1e:	2380      	movs	r3, #128	@ 0x80
10059e20:	439a      	bics	r2, r3
10059e22:	5242      	strh	r2, [r0, r1]
10059e24:	4770      	bx	lr

10059e26 <llc_cpe_get_phy_upd_pending>:
10059e26:	2182      	movs	r1, #130	@ 0x82
10059e28:	5c40      	ldrb	r0, [r0, r1]
10059e2a:	09c0      	lsrs	r0, r0, #7
10059e2c:	4770      	bx	lr
	...

10059e30 <llc_cpe_get_cpf_id_from_opcode>:
10059e30:	282a      	cmp	r0, #42	@ 0x2a
10059e32:	d804      	bhi.n	10059e3e <llc_cpe_get_cpf_id_from_opcode+0xe>
10059e34:	2103      	movs	r1, #3
10059e36:	4341      	muls	r1, r0
10059e38:	4802      	ldr	r0, [pc, #8]	@ (10059e44 <__arm_cp.9_0>)
10059e3a:	5c40      	ldrb	r0, [r0, r1]
10059e3c:	4770      	bx	lr
10059e3e:	2014      	movs	r0, #20
10059e40:	4770      	bx	lr
10059e42:	46c0      	nop			@ (mov r8, r8)

10059e44 <__arm_cp.9_0>:
10059e44:	1006d098 	.word	0x1006d098

10059e48 <llc_cpe_get_cpf_id_from_sm>:
10059e48:	b510      	push	{r4, lr}
10059e4a:	460c      	mov	r4, r1
10059e4c:	f7ff ff62 	bl	10059d14 <llc_cpe_get_cntxt_per_p>
10059e50:	01a1      	lsls	r1, r4, #6
10059e52:	1840      	adds	r0, r0, r1
10059e54:	7900      	ldrb	r0, [r0, #4]
10059e56:	bd10      	pop	{r4, pc}

10059e58 <llc_cpe_get_instant_supported_by_first_opcode>:
10059e58:	b510      	push	{r4, lr}
10059e5a:	2300      	movs	r3, #0
10059e5c:	a106      	add	r1, pc, #24	@ (adr r1, 10059e78 <llc_cpe_get_instant_supported_by_first_opcode+0x20>)
10059e5e:	461a      	mov	r2, r3
10059e60:	2b04      	cmp	r3, #4
10059e62:	d003      	beq.n	10059e6c <llc_cpe_get_instant_supported_by_first_opcode+0x14>
10059e64:	5c8c      	ldrb	r4, [r1, r2]
10059e66:	1c53      	adds	r3, r2, #1
10059e68:	4284      	cmp	r4, r0
10059e6a:	d1f8      	bne.n	10059e5e <llc_cpe_get_instant_supported_by_first_opcode+0x6>
10059e6c:	2a04      	cmp	r2, #4
10059e6e:	d301      	bcc.n	10059e74 <llc_cpe_get_instant_supported_by_first_opcode+0x1c>
10059e70:	2000      	movs	r0, #0
10059e72:	bd10      	pop	{r4, pc}
10059e74:	2001      	movs	r0, #1
10059e76:	bd10      	pop	{r4, pc}
10059e78:	1f160001 	.word	0x1f160001

10059e7c <llc_cpe_get_other_sm>:
10059e7c:	4241      	negs	r1, r0
10059e7e:	4148      	adcs	r0, r1
10059e80:	4770      	bx	lr
	...

10059e84 <llc_cpe_get_unknown_reject_from_opcode>:
10059e84:	282a      	cmp	r0, #42	@ 0x2a
10059e86:	d805      	bhi.n	10059e94 <llc_cpe_get_unknown_reject_from_opcode+0x10>
10059e88:	2103      	movs	r1, #3
10059e8a:	4341      	muls	r1, r0
10059e8c:	4802      	ldr	r0, [pc, #8]	@ (10059e98 <__arm_cp.13_0>)
10059e8e:	1840      	adds	r0, r0, r1
10059e90:	7880      	ldrb	r0, [r0, #2]
10059e92:	4770      	bx	lr
10059e94:	2014      	movs	r0, #20
10059e96:	4770      	bx	lr

10059e98 <__arm_cp.13_0>:
10059e98:	1006d098 	.word	0x1006d098

10059e9c <llc_cpe_push_disconnection_complete_event>:
10059e9c:	b570      	push	{r4, r5, r6, lr}
10059e9e:	460d      	mov	r5, r1
10059ea0:	4604      	mov	r4, r0
10059ea2:	4816      	ldr	r0, [pc, #88]	@ (10059efc <__arm_cp.14_0>)
10059ea4:	6800      	ldr	r0, [r0, #0]
10059ea6:	212c      	movs	r1, #44	@ 0x2c
10059ea8:	5c40      	ldrb	r0, [r0, r1]
10059eaa:	07c0      	lsls	r0, r0, #31
10059eac:	0ec1      	lsrs	r1, r0, #27
10059eae:	d101      	bne.n	10059eb4 <llc_cpe_push_disconnection_complete_event+0x18>
10059eb0:	2205      	movs	r2, #5
10059eb2:	e006      	b.n	10059ec2 <llc_cpe_push_disconnection_complete_event+0x26>
10059eb4:	4812      	ldr	r0, [pc, #72]	@ (10059f00 <__arm_cp.14_1>)
10059eb6:	6800      	ldr	r0, [r0, #0]
10059eb8:	2236      	movs	r2, #54	@ 0x36
10059eba:	5c80      	ldrb	r0, [r0, r2]
10059ebc:	06c0      	lsls	r0, r0, #27
10059ebe:	d51c      	bpl.n	10059efa <llc_cpe_push_disconnection_complete_event+0x5e>
10059ec0:	2215      	movs	r2, #21
10059ec2:	206f      	movs	r0, #111	@ 0x6f
10059ec4:	43c0      	mvns	r0, r0
10059ec6:	4041      	eors	r1, r0
10059ec8:	480e      	ldr	r0, [pc, #56]	@ (10059f04 <__arm_cp.14_2>)
10059eca:	6800      	ldr	r0, [r0, #0]
10059ecc:	6900      	ldr	r0, [r0, #16]
10059ece:	b2ce      	uxtb	r6, r1
10059ed0:	2302      	movs	r3, #2
10059ed2:	4631      	mov	r1, r6
10059ed4:	f7f9 fac8 	bl	10053468 <aci_event_fifo_push_header>
10059ed8:	2800      	cmp	r0, #0
10059eda:	d00e      	beq.n	10059efa <llc_cpe_push_disconnection_complete_event+0x5e>
10059edc:	4601      	mov	r1, r0
10059ede:	7204      	strb	r4, [r0, #8]
10059ee0:	7285      	strb	r5, [r0, #10]
10059ee2:	2000      	movs	r0, #0
10059ee4:	71c8      	strb	r0, [r1, #7]
10059ee6:	2004      	movs	r0, #4
10059ee8:	7188      	strb	r0, [r1, #6]
10059eea:	2205      	movs	r2, #5
10059eec:	714a      	strb	r2, [r1, #5]
10059eee:	7108      	strb	r0, [r1, #4]
10059ef0:	0a20      	lsrs	r0, r4, #8
10059ef2:	7248      	strb	r0, [r1, #9]
10059ef4:	4630      	mov	r0, r6
10059ef6:	f7f9 fb54 	bl	100535a2 <aci_event_fifo_push>
10059efa:	bd70      	pop	{r4, r5, r6, pc}

10059efc <__arm_cp.14_0>:
10059efc:	20001120 	.word	0x20001120

10059f00 <__arm_cp.14_1>:
10059f00:	20001174 	.word	0x20001174

10059f04 <__arm_cp.14_2>:
10059f04:	20001124 	.word	0x20001124

10059f08 <llc_cpe_set_phy_upd_pending>:
10059f08:	2182      	movs	r1, #130	@ 0x82
10059f0a:	5a42      	ldrh	r2, [r0, r1]
10059f0c:	2380      	movs	r3, #128	@ 0x80
10059f0e:	4313      	orrs	r3, r2
10059f10:	5243      	strh	r3, [r0, r1]
10059f12:	4770      	bx	lr

10059f14 <llc_cpe_sm_get_blocked>:
10059f14:	424b      	negs	r3, r1
10059f16:	414b      	adcs	r3, r1
10059f18:	0199      	lsls	r1, r3, #6
10059f1a:	1840      	adds	r0, r0, r1
10059f1c:	7981      	ldrb	r1, [r0, #6]
10059f1e:	07cb      	lsls	r3, r1, #31
10059f20:	2000      	movs	r0, #0
10059f22:	2b00      	cmp	r3, #0
10059f24:	d00b      	beq.n	10059f3e <llc_cpe_sm_get_blocked+0x2a>
10059f26:	2a02      	cmp	r2, #2
10059f28:	d005      	beq.n	10059f36 <llc_cpe_sm_get_blocked+0x22>
10059f2a:	2a01      	cmp	r2, #1
10059f2c:	d005      	beq.n	10059f3a <llc_cpe_sm_get_blocked+0x26>
10059f2e:	2a00      	cmp	r2, #0
10059f30:	d105      	bne.n	10059f3e <llc_cpe_sm_get_blocked+0x2a>
10059f32:	0788      	lsls	r0, r1, #30
10059f34:	e002      	b.n	10059f3c <llc_cpe_sm_get_blocked+0x28>
10059f36:	0708      	lsls	r0, r1, #28
10059f38:	e000      	b.n	10059f3c <llc_cpe_sm_get_blocked+0x28>
10059f3a:	0748      	lsls	r0, r1, #29
10059f3c:	0fc0      	lsrs	r0, r0, #31
10059f3e:	4770      	bx	lr

10059f40 <llc_cpe_sm_set_blocked>:
10059f40:	b5b0      	push	{r4, r5, r7, lr}
10059f42:	4614      	mov	r4, r2
10059f44:	460d      	mov	r5, r1
10059f46:	f7ff fee5 	bl	10059d14 <llc_cpe_get_cntxt_per_p>
10059f4a:	2c02      	cmp	r4, #2
10059f4c:	d808      	bhi.n	10059f60 <llc_cpe_sm_set_blocked+0x20>
10059f4e:	01a9      	lsls	r1, r5, #6
10059f50:	1840      	adds	r0, r0, r1
10059f52:	1d80      	adds	r0, r0, #6
10059f54:	00e1      	lsls	r1, r4, #3
10059f56:	4a03      	ldr	r2, [pc, #12]	@ (10059f64 <__arm_cp.20_0>)
10059f58:	40ca      	lsrs	r2, r1
10059f5a:	7801      	ldrb	r1, [r0, #0]
10059f5c:	4311      	orrs	r1, r2
10059f5e:	7001      	strb	r1, [r0, #0]
10059f60:	bdb0      	pop	{r4, r5, r7, pc}
10059f62:	46c0      	nop			@ (mov r8, r8)

10059f64 <__arm_cp.20_0>:
10059f64:	00080402 	.word	0x00080402

10059f68 <llc_cpe_valid_first_pdu>:
10059f68:	b5b0      	push	{r4, r5, r7, lr}
10059f6a:	4603      	mov	r3, r0
10059f6c:	2000      	movs	r0, #0
10059f6e:	2b2a      	cmp	r3, #42	@ 0x2a
10059f70:	d867      	bhi.n	1005a042 <llc_cpe_valid_first_pdu+0xda>
10059f72:	2403      	movs	r4, #3
10059f74:	435c      	muls	r4, r3
10059f76:	4d36      	ldr	r5, [pc, #216]	@ (1005a050 <__arm_cp.21_0>)
10059f78:	192c      	adds	r4, r5, r4
10059f7a:	7864      	ldrb	r4, [r4, #1]
10059f7c:	428c      	cmp	r4, r1
10059f7e:	d160      	bne.n	1005a042 <llc_cpe_valid_first_pdu+0xda>
10059f80:	1ed1      	subs	r1, r2, #3
10059f82:	4248      	negs	r0, r1
10059f84:	4148      	adcs	r0, r1
10059f86:	2b2a      	cmp	r3, #42	@ 0x2a
10059f88:	d85a      	bhi.n	1005a040 <llc_cpe_valid_first_pdu+0xd8>
10059f8a:	009a      	lsls	r2, r3, #2
10059f8c:	a301      	add	r3, pc, #4	@ (adr r3, 10059f94 <llc_cpe_valid_first_pdu+0x2c>)
10059f8e:	589a      	ldr	r2, [r3, r2]
10059f90:	4697      	mov	pc, r2
10059f92:	46c0      	nop			@ (mov r8, r8)
10059f94:	1005a043 	.word	0x1005a043
10059f98:	1005a043 	.word	0x1005a043
10059f9c:	1005a041 	.word	0x1005a041
10059fa0:	1005a043 	.word	0x1005a043
10059fa4:	1005a041 	.word	0x1005a041
10059fa8:	1005a041 	.word	0x1005a041
10059fac:	1005a041 	.word	0x1005a041
10059fb0:	1005a041 	.word	0x1005a041
10059fb4:	1005a043 	.word	0x1005a043
10059fb8:	1005a041 	.word	0x1005a041
10059fbc:	1005a043 	.word	0x1005a043
10059fc0:	1005a041 	.word	0x1005a041
10059fc4:	1005a045 	.word	0x1005a045
10059fc8:	1005a041 	.word	0x1005a041
10059fcc:	1005a049 	.word	0x1005a049
10059fd0:	1005a041 	.word	0x1005a041
10059fd4:	1005a041 	.word	0x1005a041
10059fd8:	1005a041 	.word	0x1005a041
10059fdc:	1005a045 	.word	0x1005a045
10059fe0:	1005a041 	.word	0x1005a041
10059fe4:	1005a045 	.word	0x1005a045
10059fe8:	1005a041 	.word	0x1005a041
10059fec:	1005a045 	.word	0x1005a045
10059ff0:	1005a041 	.word	0x1005a041
10059ff4:	1005a041 	.word	0x1005a041
10059ff8:	1005a041 	.word	0x1005a041
10059ffc:	1005a045 	.word	0x1005a045
1005a000:	1005a041 	.word	0x1005a041
1005a004:	1005a045 	.word	0x1005a045
1005a008:	1005a045 	.word	0x1005a045
1005a00c:	1005a041 	.word	0x1005a041
1005a010:	1005a043 	.word	0x1005a043
1005a014:	1005a041 	.word	0x1005a041
1005a018:	1005a041 	.word	0x1005a041
1005a01c:	1005a045 	.word	0x1005a045
1005a020:	1005a045 	.word	0x1005a045
1005a024:	1005a041 	.word	0x1005a041
1005a028:	1005a045 	.word	0x1005a045
1005a02c:	1005a045 	.word	0x1005a045
1005a030:	1005a045 	.word	0x1005a045
1005a034:	1005a045 	.word	0x1005a045
1005a038:	1005a045 	.word	0x1005a045
1005a03c:	1005a045 	.word	0x1005a045
1005a040:	2000      	movs	r0, #0
1005a042:	bdb0      	pop	{r4, r5, r7, pc}
1005a044:	2001      	movs	r0, #1
1005a046:	bdb0      	pop	{r4, r5, r7, pc}
1005a048:	1e48      	subs	r0, r1, #1
1005a04a:	4181      	sbcs	r1, r0
1005a04c:	4608      	mov	r0, r1
1005a04e:	bdb0      	pop	{r4, r5, r7, pc}

1005a050 <__arm_cp.21_0>:
1005a050:	1006d098 	.word	0x1006d098

1005a054 <llc_cpe_valid_pdu>:
1005a054:	b5b0      	push	{r4, r5, r7, lr}
1005a056:	4603      	mov	r3, r0
1005a058:	2000      	movs	r0, #0
1005a05a:	2b2a      	cmp	r3, #42	@ 0x2a
1005a05c:	d900      	bls.n	1005a060 <llc_cpe_valid_pdu+0xc>
1005a05e:	e0b2      	b.n	1005a1c6 <llc_cpe_valid_pdu+0x172>
1005a060:	2403      	movs	r4, #3
1005a062:	435c      	muls	r4, r3
1005a064:	4d58      	ldr	r5, [pc, #352]	@ (1005a1c8 <__arm_cp.22_0>)
1005a066:	192c      	adds	r4, r5, r4
1005a068:	7864      	ldrb	r4, [r4, #1]
1005a06a:	428c      	cmp	r4, r1
1005a06c:	d000      	beq.n	1005a070 <llc_cpe_valid_pdu+0x1c>
1005a06e:	e0aa      	b.n	1005a1c6 <llc_cpe_valid_pdu+0x172>
1005a070:	1ed4      	subs	r4, r2, #3
1005a072:	4260      	negs	r0, r4
1005a074:	4160      	adcs	r0, r4
1005a076:	2b2a      	cmp	r3, #42	@ 0x2a
1005a078:	d900      	bls.n	1005a07c <llc_cpe_valid_pdu+0x28>
1005a07a:	e0a3      	b.n	1005a1c4 <llc_cpe_valid_pdu+0x170>
1005a07c:	0099      	lsls	r1, r3, #2
1005a07e:	a201      	add	r2, pc, #4	@ (adr r2, 1005a084 <llc_cpe_valid_pdu+0x30>)
1005a080:	5851      	ldr	r1, [r2, r1]
1005a082:	468f      	mov	pc, r1
1005a084:	1005a1c7 	.word	0x1005a1c7
1005a088:	1005a1c7 	.word	0x1005a1c7
1005a08c:	1005a131 	.word	0x1005a131
1005a090:	1005a1c7 	.word	0x1005a1c7
1005a094:	1005a135 	.word	0x1005a135
1005a098:	1005a135 	.word	0x1005a135
1005a09c:	1005a131 	.word	0x1005a131
1005a0a0:	1005a131 	.word	0x1005a131
1005a0a4:	1005a1c7 	.word	0x1005a1c7
1005a0a8:	1005a131 	.word	0x1005a131
1005a0ac:	1005a1c7 	.word	0x1005a1c7
1005a0b0:	1005a131 	.word	0x1005a131
1005a0b4:	1005a131 	.word	0x1005a131
1005a0b8:	1005a131 	.word	0x1005a131
1005a0bc:	1005a135 	.word	0x1005a135
1005a0c0:	1005a1c5 	.word	0x1005a1c5
1005a0c4:	1005a1c5 	.word	0x1005a1c5
1005a0c8:	1005a131 	.word	0x1005a131
1005a0cc:	1005a131 	.word	0x1005a131
1005a0d0:	1005a131 	.word	0x1005a131
1005a0d4:	1005a143 	.word	0x1005a143
1005a0d8:	1005a143 	.word	0x1005a143
1005a0dc:	1005a155 	.word	0x1005a155
1005a0e0:	1005a15b 	.word	0x1005a15b
1005a0e4:	1005a165 	.word	0x1005a165
1005a0e8:	1005a1c5 	.word	0x1005a1c5
1005a0ec:	1005a149 	.word	0x1005a149
1005a0f0:	1005a149 	.word	0x1005a149
1005a0f4:	1005a16b 	.word	0x1005a16b
1005a0f8:	1005a131 	.word	0x1005a131
1005a0fc:	1005a131 	.word	0x1005a131
1005a100:	1005a14f 	.word	0x1005a14f
1005a104:	1005a171 	.word	0x1005a171
1005a108:	1005a14f 	.word	0x1005a14f
1005a10c:	1005a17b 	.word	0x1005a17b
1005a110:	1005a13d 	.word	0x1005a13d
1005a114:	1005a13d 	.word	0x1005a13d
1005a118:	1005a13d 	.word	0x1005a13d
1005a11c:	1005a181 	.word	0x1005a181
1005a120:	1005a18b 	.word	0x1005a18b
1005a124:	1005a191 	.word	0x1005a191
1005a128:	1005a1a3 	.word	0x1005a1a3
1005a12c:	1005a1b3 	.word	0x1005a1b3
1005a130:	2001      	movs	r0, #1
1005a132:	bdb0      	pop	{r4, r5, r7, pc}
1005a134:	1e60      	subs	r0, r4, #1
1005a136:	4184      	sbcs	r4, r0
1005a138:	4620      	mov	r0, r4
1005a13a:	bdb0      	pop	{r4, r5, r7, pc}
1005a13c:	f7fd fd49 	bl	10057bd2 <pcl_csr_ucfg_weak>
1005a140:	e03d      	b.n	1005a1be <llc_cpe_valid_pdu+0x16a>
1005a142:	f7fd fd44 	bl	10057bce <data_length_extension_csr_ucfg_weak>
1005a146:	e03a      	b.n	1005a1be <llc_cpe_valid_pdu+0x16a>
1005a148:	f7fd fbfc 	bl	10057944 <cte_csr_ucfg_weak>
1005a14c:	e037      	b.n	1005a1be <llc_cpe_valid_pdu+0x16a>
1005a14e:	f000 fdd3 	bl	1005acf8 <cis_csr_ucfg_weak>
1005a152:	e01f      	b.n	1005a194 <llc_cpe_valid_pdu+0x140>
1005a154:	f7f7 fd73 	bl	10051c3e <phy_upd_csr_ucfg>
1005a158:	e031      	b.n	1005a1be <llc_cpe_valid_pdu+0x16a>
1005a15a:	1e60      	subs	r0, r4, #1
1005a15c:	4184      	sbcs	r4, r0
1005a15e:	f7f7 fd6e 	bl	10051c3e <phy_upd_csr_ucfg>
1005a162:	e022      	b.n	1005a1aa <llc_cpe_valid_pdu+0x156>
1005a164:	f7f7 fd6b 	bl	10051c3e <phy_upd_csr_ucfg>
1005a168:	e014      	b.n	1005a194 <llc_cpe_valid_pdu+0x140>
1005a16a:	f000 fdcf 	bl	1005ad0c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005a16e:	e022      	b.n	1005a1b6 <llc_cpe_valid_pdu+0x162>
1005a170:	1e60      	subs	r0, r4, #1
1005a172:	4184      	sbcs	r4, r0
1005a174:	f000 fdc0 	bl	1005acf8 <cis_csr_ucfg_weak>
1005a178:	e017      	b.n	1005a1aa <llc_cpe_valid_pdu+0x156>
1005a17a:	f000 fdbd 	bl	1005acf8 <cis_csr_ucfg_weak>
1005a17e:	e01e      	b.n	1005a1be <llc_cpe_valid_pdu+0x16a>
1005a180:	1e60      	subs	r0, r4, #1
1005a182:	4184      	sbcs	r4, r0
1005a184:	f7fd fd2d 	bl	10057be2 <subrate_csr_ucfg_weak>
1005a188:	e00f      	b.n	1005a1aa <llc_cpe_valid_pdu+0x156>
1005a18a:	f7fd fd2a 	bl	10057be2 <subrate_csr_ucfg_weak>
1005a18e:	e001      	b.n	1005a194 <llc_cpe_valid_pdu+0x140>
1005a190:	f000 ff1b 	bl	1005afca <chc_csr_ucfg_weak>
1005a194:	4601      	mov	r1, r0
1005a196:	1e40      	subs	r0, r0, #1
1005a198:	4181      	sbcs	r1, r0
1005a19a:	4260      	negs	r0, r4
1005a19c:	4160      	adcs	r0, r4
1005a19e:	4008      	ands	r0, r1
1005a1a0:	bdb0      	pop	{r4, r5, r7, pc}
1005a1a2:	1e60      	subs	r0, r4, #1
1005a1a4:	4184      	sbcs	r4, r0
1005a1a6:	f000 ff10 	bl	1005afca <chc_csr_ucfg_weak>
1005a1aa:	1e41      	subs	r1, r0, #1
1005a1ac:	4188      	sbcs	r0, r1
1005a1ae:	4020      	ands	r0, r4
1005a1b0:	bdb0      	pop	{r4, r5, r7, pc}
1005a1b2:	f000 fdad 	bl	1005ad10 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005a1b6:	2800      	cmp	r0, #0
1005a1b8:	d004      	beq.n	1005a1c4 <llc_cpe_valid_pdu+0x170>
1005a1ba:	f7fd fd0e 	bl	10057bda <scan_csr_ucfg_weak>
1005a1be:	1e41      	subs	r1, r0, #1
1005a1c0:	4188      	sbcs	r0, r1
1005a1c2:	bdb0      	pop	{r4, r5, r7, pc}
1005a1c4:	2000      	movs	r0, #0
1005a1c6:	bdb0      	pop	{r4, r5, r7, pc}

1005a1c8 <__arm_cp.22_0>:
1005a1c8:	1006d098 	.word	0x1006d098

1005a1cc <llc_cpe_disconnect_link>:
1005a1cc:	b580      	push	{r7, lr}
1005a1ce:	2280      	movs	r2, #128	@ 0x80
1005a1d0:	5a82      	ldrh	r2, [r0, r2]
1005a1d2:	0792      	lsls	r2, r2, #30
1005a1d4:	d408      	bmi.n	1005a1e8 <llc_cpe_disconnect_link+0x1c>
1005a1d6:	3080      	adds	r0, #128	@ 0x80
1005a1d8:	7181      	strb	r1, [r0, #6]
1005a1da:	2015      	movs	r0, #21
1005a1dc:	f007 ff5e 	bl	1006209c <tsk_notify_idx>
1005a1e0:	f7e9 fe5d 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005a1e4:	2000      	movs	r0, #0
1005a1e6:	bd80      	pop	{r7, pc}
1005a1e8:	203a      	movs	r0, #58	@ 0x3a
1005a1ea:	bd80      	pop	{r7, pc}

1005a1ec <llc_cpe_init_all_sm>:
1005a1ec:	2100      	movs	r1, #0
1005a1ee:	2980      	cmp	r1, #128	@ 0x80
1005a1f0:	d008      	beq.n	1005a204 <llc_cpe_init_all_sm+0x18>
1005a1f2:	227d      	movs	r2, #125	@ 0x7d
1005a1f4:	0452      	lsls	r2, r2, #17
1005a1f6:	5042      	str	r2, [r0, r1]
1005a1f8:	1842      	adds	r2, r0, r1
1005a1fa:	2301      	movs	r3, #1
1005a1fc:	021b      	lsls	r3, r3, #8
1005a1fe:	80d3      	strh	r3, [r2, #6]
1005a200:	3140      	adds	r1, #64	@ 0x40
1005a202:	e7f4      	b.n	1005a1ee <llc_cpe_init_all_sm+0x2>
1005a204:	2180      	movs	r1, #128	@ 0x80
1005a206:	5a42      	ldrh	r2, [r0, r1]
1005a208:	2301      	movs	r3, #1
1005a20a:	4313      	orrs	r3, r2
1005a20c:	5243      	strh	r3, [r0, r1]
1005a20e:	4770      	bx	lr

1005a210 <llc_cpe_register_cpf>:
1005a210:	b5b0      	push	{r4, r5, r7, lr}
1005a212:	460c      	mov	r4, r1
1005a214:	0085      	lsls	r5, r0, #2
1005a216:	f7ff fd73 	bl	10059d00 <llc_cpe_get_cntxt_p>
1005a21a:	6800      	ldr	r0, [r0, #0]
1005a21c:	5144      	str	r4, [r0, r5]
1005a21e:	bdb0      	pop	{r4, r5, r7, pc}

1005a220 <llc_cpe_sm_disable>:
1005a220:	b5b0      	push	{r4, r5, r7, lr}
1005a222:	4614      	mov	r4, r2
1005a224:	460d      	mov	r5, r1
1005a226:	f7ff fd75 	bl	10059d14 <llc_cpe_get_cntxt_per_p>
1005a22a:	01aa      	lsls	r2, r5, #6
1005a22c:	1881      	adds	r1, r0, r2
1005a22e:	790b      	ldrb	r3, [r1, #4]
1005a230:	42a3      	cmp	r3, r4
1005a232:	d104      	bne.n	1005a23e <llc_cpe_sm_disable+0x1e>
1005a234:	237d      	movs	r3, #125	@ 0x7d
1005a236:	045b      	lsls	r3, r3, #17
1005a238:	5083      	str	r3, [r0, r2]
1005a23a:	2000      	movs	r0, #0
1005a23c:	7188      	strb	r0, [r1, #6]
1005a23e:	bdb0      	pop	{r4, r5, r7, pc}

1005a240 <llc_cpe_sm_enable>:
1005a240:	b570      	push	{r4, r5, r6, lr}
1005a242:	461c      	mov	r4, r3
1005a244:	4615      	mov	r5, r2
1005a246:	460e      	mov	r6, r1
1005a248:	f7ff fd64 	bl	10059d14 <llc_cpe_get_cntxt_per_p>
1005a24c:	01b1      	lsls	r1, r6, #6
1005a24e:	1840      	adds	r0, r0, r1
1005a250:	7105      	strb	r5, [r0, #4]
1005a252:	2c00      	cmp	r4, #0
1005a254:	d001      	beq.n	1005a25a <llc_cpe_sm_enable+0x1a>
1005a256:	2121      	movs	r1, #33	@ 0x21
1005a258:	e000      	b.n	1005a25c <llc_cpe_sm_enable+0x1c>
1005a25a:	2101      	movs	r1, #1
1005a25c:	7982      	ldrb	r2, [r0, #6]
1005a25e:	23de      	movs	r3, #222	@ 0xde
1005a260:	4013      	ands	r3, r2
1005a262:	18c9      	adds	r1, r1, r3
1005a264:	7181      	strb	r1, [r0, #6]
1005a266:	bd70      	pop	{r4, r5, r6, pc}

1005a268 <llc_cpe_sm_get_active>:
1005a268:	b510      	push	{r4, lr}
1005a26a:	460c      	mov	r4, r1
1005a26c:	f7ff fd52 	bl	10059d14 <llc_cpe_get_cntxt_per_p>
1005a270:	01a1      	lsls	r1, r4, #6
1005a272:	1840      	adds	r0, r0, r1
1005a274:	7981      	ldrb	r1, [r0, #6]
1005a276:	2001      	movs	r0, #1
1005a278:	4008      	ands	r0, r1
1005a27a:	bd10      	pop	{r4, pc}

1005a27c <llc_cpe_sm_get_cpf_cntxt_p>:
1005a27c:	b510      	push	{r4, lr}
1005a27e:	460c      	mov	r4, r1
1005a280:	f7ff fd48 	bl	10059d14 <llc_cpe_get_cntxt_per_p>
1005a284:	01a1      	lsls	r1, r4, #6
1005a286:	1840      	adds	r0, r0, r1
1005a288:	3008      	adds	r0, #8
1005a28a:	bd10      	pop	{r4, pc}

1005a28c <llc_cpe_sm_rx_pdu_with_instant>:
1005a28c:	b510      	push	{r4, lr}
1005a28e:	460c      	mov	r4, r1
1005a290:	f7ff fd40 	bl	10059d14 <llc_cpe_get_cntxt_per_p>
1005a294:	2182      	movs	r1, #130	@ 0x82
1005a296:	5a42      	ldrh	r2, [r0, r1]
1005a298:	2301      	movs	r3, #1
1005a29a:	4313      	orrs	r3, r2
1005a29c:	5243      	strh	r3, [r0, r1]
1005a29e:	01a1      	lsls	r1, r4, #6
1005a2a0:	1840      	adds	r0, r0, r1
1005a2a2:	7981      	ldrb	r1, [r0, #6]
1005a2a4:	2240      	movs	r2, #64	@ 0x40
1005a2a6:	430a      	orrs	r2, r1
1005a2a8:	7182      	strb	r2, [r0, #6]
1005a2aa:	bd10      	pop	{r4, pc}

1005a2ac <llc_cpe_sm_tx_pdu>:
1005a2ac:	b510      	push	{r4, lr}
1005a2ae:	460c      	mov	r4, r1
1005a2b0:	f7ff fd30 	bl	10059d14 <llc_cpe_get_cntxt_per_p>
1005a2b4:	01a1      	lsls	r1, r4, #6
1005a2b6:	1840      	adds	r0, r0, r1
1005a2b8:	7981      	ldrb	r1, [r0, #6]
1005a2ba:	2210      	movs	r2, #16
1005a2bc:	430a      	orrs	r2, r1
1005a2be:	7182      	strb	r2, [r0, #6]
1005a2c0:	2015      	movs	r0, #21
1005a2c2:	f007 feeb 	bl	1006209c <tsk_notify_idx>
1005a2c6:	f7e9 fdea 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005a2ca:	bd10      	pop	{r4, pc}

1005a2cc <llc_cpe_sm_tx_pdu_with_instant>:
1005a2cc:	b510      	push	{r4, lr}
1005a2ce:	460c      	mov	r4, r1
1005a2d0:	f7fe f954 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005a2d4:	01a1      	lsls	r1, r4, #6
1005a2d6:	1841      	adds	r1, r0, r1
1005a2d8:	228b      	movs	r2, #139	@ 0x8b
1005a2da:	0052      	lsls	r2, r2, #1
1005a2dc:	5c8b      	ldrb	r3, [r1, r2]
1005a2de:	2440      	movs	r4, #64	@ 0x40
1005a2e0:	431c      	orrs	r4, r3
1005a2e2:	548c      	strb	r4, [r1, r2]
1005a2e4:	f7fe fe8f 	bl	10059006 <llc_conn_set_tx_ctrl_pdu_has_instant>
1005a2e8:	bd10      	pop	{r4, pc}

1005a2ea <llc_cpe_tx_unknown_rsp>:
1005a2ea:	b510      	push	{r4, lr}
1005a2ec:	f7fe f946 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005a2f0:	4604      	mov	r4, r0
1005a2f2:	2100      	movs	r1, #0
1005a2f4:	f7fe fbca 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
1005a2f8:	7880      	ldrb	r0, [r0, #2]
1005a2fa:	21ff      	movs	r1, #255	@ 0xff
1005a2fc:	3198      	adds	r1, #152	@ 0x98
1005a2fe:	5460      	strb	r0, [r4, r1]
1005a300:	2019      	movs	r0, #25
1005a302:	0100      	lsls	r0, r0, #4
1005a304:	5a21      	ldrh	r1, [r4, r0]
1005a306:	2210      	movs	r2, #16
1005a308:	430a      	orrs	r2, r1
1005a30a:	5222      	strh	r2, [r4, r0]
1005a30c:	bd10      	pop	{r4, pc}

1005a30e <llc_cpe_update_rsp_timer>:
1005a30e:	b570      	push	{r4, r5, r6, lr}
1005a310:	4602      	mov	r2, r0
1005a312:	207d      	movs	r0, #125	@ 0x7d
1005a314:	0443      	lsls	r3, r0, #17
1005a316:	2000      	movs	r0, #0
1005a318:	4604      	mov	r4, r0
1005a31a:	2c80      	cmp	r4, #128	@ 0x80
1005a31c:	d012      	beq.n	1005a344 <llc_cpe_update_rsp_timer+0x36>
1005a31e:	1915      	adds	r5, r2, r4
1005a320:	79ae      	ldrb	r6, [r5, #6]
1005a322:	07f6      	lsls	r6, r6, #31
1005a324:	d00b      	beq.n	1005a33e <llc_cpe_update_rsp_timer+0x30>
1005a326:	792d      	ldrb	r5, [r5, #4]
1005a328:	26fd      	movs	r6, #253	@ 0xfd
1005a32a:	4235      	tst	r5, r6
1005a32c:	d007      	beq.n	1005a33e <llc_cpe_update_rsp_timer+0x30>
1005a32e:	5915      	ldr	r5, [r2, r4]
1005a330:	1e6e      	subs	r6, r5, #1
1005a332:	d406      	bmi.n	1005a342 <llc_cpe_update_rsp_timer+0x34>
1005a334:	429d      	cmp	r5, r3
1005a336:	461e      	mov	r6, r3
1005a338:	d800      	bhi.n	1005a33c <llc_cpe_update_rsp_timer+0x2e>
1005a33a:	1a6e      	subs	r6, r5, r1
1005a33c:	5116      	str	r6, [r2, r4]
1005a33e:	3440      	adds	r4, #64	@ 0x40
1005a340:	e7eb      	b.n	1005a31a <llc_cpe_update_rsp_timer+0xc>
1005a342:	2022      	movs	r0, #34	@ 0x22
1005a344:	bd70      	pop	{r4, r5, r6, pc}
	...

1005a348 <llc_cpe_tsk>:
1005a348:	b570      	push	{r4, r5, r6, lr}
1005a34a:	2400      	movs	r4, #0
1005a34c:	4620      	mov	r0, r4
1005a34e:	f7fe f915 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005a352:	4605      	mov	r5, r0
1005a354:	4e09      	ldr	r6, [pc, #36]	@ (1005a37c <__arm_cp.13_0>)
1005a356:	6830      	ldr	r0, [r6, #0]
1005a358:	2134      	movs	r1, #52	@ 0x34
1005a35a:	5c40      	ldrb	r0, [r0, r1]
1005a35c:	4284      	cmp	r4, r0
1005a35e:	d20c      	bcs.n	1005a37a <llc_cpe_tsk+0x32>
1005a360:	4628      	mov	r0, r5
1005a362:	f000 f80d 	bl	1005a380 <llc_cpe>
1005a366:	2800      	cmp	r0, #0
1005a368:	d002      	beq.n	1005a370 <llc_cpe_tsk+0x28>
1005a36a:	4628      	mov	r0, r5
1005a36c:	f000 f808 	bl	1005a380 <llc_cpe>
1005a370:	2033      	movs	r0, #51	@ 0x33
1005a372:	00c0      	lsls	r0, r0, #3
1005a374:	182d      	adds	r5, r5, r0
1005a376:	1c64      	adds	r4, r4, #1
1005a378:	e7ed      	b.n	1005a356 <llc_cpe_tsk+0xe>
1005a37a:	bd70      	pop	{r4, r5, r6, pc}

1005a37c <__arm_cp.13_0>:
1005a37c:	20001120 	.word	0x20001120

1005a380 <llc_cpe>:
1005a380:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a382:	b08d      	sub	sp, #52	@ 0x34
1005a384:	4607      	mov	r7, r0
1005a386:	20ed      	movs	r0, #237	@ 0xed
1005a388:	5c38      	ldrb	r0, [r7, r0]
1005a38a:	4639      	mov	r1, r7
1005a38c:	312c      	adds	r1, #44	@ 0x2c
1005a38e:	2800      	cmp	r0, #0
1005a390:	9107      	str	r1, [sp, #28]
1005a392:	d061      	beq.n	1005a458 <llc_cpe+0xd8>
1005a394:	24ff      	movs	r4, #255	@ 0xff
1005a396:	9403      	str	r4, [sp, #12]
1005a398:	3456      	adds	r4, #86	@ 0x56
1005a39a:	2019      	movs	r0, #25
1005a39c:	0100      	lsls	r0, r0, #4
1005a39e:	183d      	adds	r5, r7, r0
1005a3a0:	4638      	mov	r0, r7
1005a3a2:	f7fe fb96 	bl	10058ad2 <llc_conn_get_tx_ctrl_pdu_state>
1005a3a6:	2803      	cmp	r0, #3
1005a3a8:	d10a      	bne.n	1005a3c0 <llc_cpe+0x40>
1005a3aa:	8828      	ldrh	r0, [r5, #0]
1005a3ac:	0701      	lsls	r1, r0, #28
1005a3ae:	d507      	bpl.n	1005a3c0 <llc_cpe+0x40>
1005a3b0:	2100      	movs	r1, #0
1005a3b2:	71e9      	strb	r1, [r5, #7]
1005a3b4:	2208      	movs	r2, #8
1005a3b6:	4390      	bics	r0, r2
1005a3b8:	8028      	strh	r0, [r5, #0]
1005a3ba:	4638      	mov	r0, r7
1005a3bc:	f7fe fe2a 	bl	10059014 <llc_conn_set_tx_ctrl_pdu_state>
1005a3c0:	950b      	str	r5, [sp, #44]	@ 0x2c
1005a3c2:	1938      	adds	r0, r7, r4
1005a3c4:	9004      	str	r0, [sp, #16]
1005a3c6:	4638      	mov	r0, r7
1005a3c8:	f000 fa1e 	bl	1005a808 <llc_cpe_check_rx_pdu_can_be_processed>
1005a3cc:	2800      	cmp	r0, #0
1005a3ce:	970a      	str	r7, [sp, #40]	@ 0x28
1005a3d0:	d074      	beq.n	1005a4bc <llc_cpe+0x13c>
1005a3d2:	2011      	movs	r0, #17
1005a3d4:	0100      	lsls	r0, r0, #4
1005a3d6:	183d      	adds	r5, r7, r0
1005a3d8:	9807      	ldr	r0, [sp, #28]
1005a3da:	7904      	ldrb	r4, [r0, #4]
1005a3dc:	2101      	movs	r1, #1
1005a3de:	2600      	movs	r6, #0
1005a3e0:	4628      	mov	r0, r5
1005a3e2:	4632      	mov	r2, r6
1005a3e4:	f7ff fd96 	bl	10059f14 <llc_cpe_sm_get_blocked>
1005a3e8:	4607      	mov	r7, r0
1005a3ea:	4628      	mov	r0, r5
1005a3ec:	4631      	mov	r1, r6
1005a3ee:	4632      	mov	r2, r6
1005a3f0:	f7ff fd90 	bl	10059f14 <llc_cpe_sm_get_blocked>
1005a3f4:	4338      	orrs	r0, r7
1005a3f6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1005a3f8:	d160      	bne.n	1005a4bc <llc_cpe+0x13c>
1005a3fa:	940c      	str	r4, [sp, #48]	@ 0x30
1005a3fc:	2100      	movs	r1, #0
1005a3fe:	4638      	mov	r0, r7
1005a400:	f7fe fb44 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
1005a404:	4606      	mov	r6, r0
1005a406:	7841      	ldrb	r1, [r0, #1]
1005a408:	7884      	ldrb	r4, [r0, #2]
1005a40a:	9807      	ldr	r0, [sp, #28]
1005a40c:	7802      	ldrb	r2, [r0, #0]
1005a40e:	4620      	mov	r0, r4
1005a410:	9109      	str	r1, [sp, #36]	@ 0x24
1005a412:	f7ff fe1f 	bl	1005a054 <llc_cpe_valid_pdu>
1005a416:	2800      	cmp	r0, #0
1005a418:	d04a      	beq.n	1005a4b0 <llc_cpe+0x130>
1005a41a:	9804      	ldr	r0, [sp, #16]
1005a41c:	7880      	ldrb	r0, [r0, #2]
1005a41e:	2804      	cmp	r0, #4
1005a420:	d10a      	bne.n	1005a438 <llc_cpe+0xb8>
1005a422:	9804      	ldr	r0, [sp, #16]
1005a424:	7800      	ldrb	r0, [r0, #0]
1005a426:	42a0      	cmp	r0, r4
1005a428:	d048      	beq.n	1005a4bc <llc_cpe+0x13c>
1005a42a:	2201      	movs	r2, #1
1005a42c:	4630      	mov	r0, r6
1005a42e:	4629      	mov	r1, r5
1005a430:	f000 f9f9 	bl	1005a826 <llc_cpe_check_unsupported_or_rejected_pdu>
1005a434:	2800      	cmp	r0, #0
1005a436:	d141      	bne.n	1005a4bc <llc_cpe+0x13c>
1005a438:	9803      	ldr	r0, [sp, #12]
1005a43a:	3016      	adds	r0, #22
1005a43c:	1838      	adds	r0, r7, r0
1005a43e:	7881      	ldrb	r1, [r0, #2]
1005a440:	2904      	cmp	r1, #4
1005a442:	d100      	bne.n	1005a446 <llc_cpe+0xc6>
1005a444:	e1d3      	b.n	1005a7ee <llc_cpe+0x46e>
1005a446:	2901      	cmp	r1, #1
1005a448:	d135      	bne.n	1005a4b6 <llc_cpe+0x136>
1005a44a:	9807      	ldr	r0, [sp, #28]
1005a44c:	7802      	ldrb	r2, [r0, #0]
1005a44e:	4620      	mov	r0, r4
1005a450:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a452:	f7ff fd89 	bl	10059f68 <llc_cpe_valid_first_pdu>
1005a456:	e1d3      	b.n	1005a800 <llc_cpe+0x480>
1005a458:	7848      	ldrb	r0, [r1, #1]
1005a45a:	2400      	movs	r4, #0
1005a45c:	2800      	cmp	r0, #0
1005a45e:	d100      	bne.n	1005a462 <llc_cpe+0xe2>
1005a460:	e1c2      	b.n	1005a7e8 <llc_cpe+0x468>
1005a462:	463e      	mov	r6, r7
1005a464:	36b4      	adds	r6, #180	@ 0xb4
1005a466:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
1005a468:	463d      	mov	r5, r7
1005a46a:	3578      	adds	r5, #120	@ 0x78
1005a46c:	7d49      	ldrb	r1, [r1, #21]
1005a46e:	910c      	str	r1, [sp, #48]	@ 0x30
1005a470:	2800      	cmp	r0, #0
1005a472:	d001      	beq.n	1005a478 <llc_cpe+0xf8>
1005a474:	f7f8 fd60 	bl	10052f38 <Acl_Tx_Cmpl_Pkt_Handler>
1005a478:	4628      	mov	r0, r5
1005a47a:	f008 f801 	bl	10062480 <ACL_list_init>
1005a47e:	ce03      	ldmia	r6!, {r0, r1}
1005a480:	f7fe fba2 	bl	10058bc8 <llc_conn_list_remove_address>
1005a484:	9d07      	ldr	r5, [sp, #28]
1005a486:	7869      	ldrb	r1, [r5, #1]
1005a488:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
1005a48a:	f7ff fd07 	bl	10059e9c <llc_cpe_push_disconnection_complete_event>
1005a48e:	4638      	mov	r0, r7
1005a490:	f001 feb2 	bl	1005c1f8 <LLC_authenticated_payload_timeout_reset>
1005a494:	7928      	ldrb	r0, [r5, #4]
1005a496:	f7fe f941 	bl	1005871c <llc_conn_per_init>
1005a49a:	7928      	ldrb	r0, [r5, #4]
1005a49c:	f000 fc76 	bl	1005ad8c <llc_pscan_wr_check_pawr_active_ucfg_weak>
1005a4a0:	2800      	cmp	r0, #0
1005a4a2:	d100      	bne.n	1005a4a6 <llc_cpe+0x126>
1005a4a4:	e1a0      	b.n	1005a7e8 <llc_cpe+0x468>
1005a4a6:	2001      	movs	r0, #1
1005a4a8:	7028      	strb	r0, [r5, #0]
1005a4aa:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a4ac:	7568      	strb	r0, [r5, #21]
1005a4ae:	e19b      	b.n	1005a7e8 <llc_cpe+0x468>
1005a4b0:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a4b2:	f7ff ff1a 	bl	1005a2ea <llc_cpe_tx_unknown_rsp>
1005a4b6:	4638      	mov	r0, r7
1005a4b8:	f7fe fa30 	bl	1005891c <llc_conn_clr_rx_ctrl_pdu_full>
1005a4bc:	2045      	movs	r0, #69	@ 0x45
1005a4be:	0080      	lsls	r0, r0, #2
1005a4c0:	183c      	adds	r4, r7, r0
1005a4c2:	2011      	movs	r0, #17
1005a4c4:	0100      	lsls	r0, r0, #4
1005a4c6:	1838      	adds	r0, r7, r0
1005a4c8:	9006      	str	r0, [sp, #24]
1005a4ca:	2000      	movs	r0, #0
1005a4cc:	9008      	str	r0, [sp, #32]
1005a4ce:	43c5      	mvns	r5, r0
1005a4d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1005a4d2:	2d01      	cmp	r5, #1
1005a4d4:	d100      	bne.n	1005a4d8 <llc_cpe+0x158>
1005a4d6:	e186      	b.n	1005a7e6 <llc_cpe+0x466>
1005a4d8:	1c68      	adds	r0, r5, #1
1005a4da:	900c      	str	r0, [sp, #48]	@ 0x30
1005a4dc:	8830      	ldrh	r0, [r6, #0]
1005a4de:	2103      	movs	r1, #3
1005a4e0:	9109      	str	r1, [sp, #36]	@ 0x24
1005a4e2:	4008      	ands	r0, r1
1005a4e4:	2801      	cmp	r0, #1
1005a4e6:	d108      	bne.n	1005a4fa <llc_cpe+0x17a>
1005a4e8:	79b0      	ldrb	r0, [r6, #6]
1005a4ea:	28ff      	cmp	r0, #255	@ 0xff
1005a4ec:	d005      	beq.n	1005a4fa <llc_cpe+0x17a>
1005a4ee:	4638      	mov	r0, r7
1005a4f0:	f7fe faef 	bl	10058ad2 <llc_conn_get_tx_ctrl_pdu_state>
1005a4f4:	2800      	cmp	r0, #0
1005a4f6:	d100      	bne.n	1005a4fa <llc_cpe+0x17a>
1005a4f8:	e0ac      	b.n	1005a654 <llc_cpe+0x2d4>
1005a4fa:	78e0      	ldrb	r0, [r4, #3]
1005a4fc:	1e40      	subs	r0, r0, #1
1005a4fe:	2804      	cmp	r0, #4
1005a500:	d900      	bls.n	1005a504 <llc_cpe+0x184>
1005a502:	e13a      	b.n	1005a77a <llc_cpe+0x3fa>
1005a504:	4478      	add	r0, pc
1005a506:	7900      	ldrb	r0, [r0, #4]
1005a508:	0040      	lsls	r0, r0, #1
1005a50a:	4487      	add	pc, r0
1005a50c:	7d612b02 	.word	0x7d612b02
1005a510:	0092      	.short	0x0092
1005a512:	2d00      	cmp	r5, #0
1005a514:	d100      	bne.n	1005a518 <llc_cpe+0x198>
1005a516:	e0bc      	b.n	1005a692 <llc_cpe+0x312>
1005a518:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a51a:	f000 f975 	bl	1005a808 <llc_cpe_check_rx_pdu_can_be_processed>
1005a51e:	2800      	cmp	r0, #0
1005a520:	d100      	bne.n	1005a524 <llc_cpe+0x1a4>
1005a522:	e12a      	b.n	1005a77a <llc_cpe+0x3fa>
1005a524:	9804      	ldr	r0, [sp, #16]
1005a526:	7880      	ldrb	r0, [r0, #2]
1005a528:	2804      	cmp	r0, #4
1005a52a:	d104      	bne.n	1005a536 <llc_cpe+0x1b6>
1005a52c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a52e:	8800      	ldrh	r0, [r0, #0]
1005a530:	0740      	lsls	r0, r0, #29
1005a532:	d400      	bmi.n	1005a536 <llc_cpe+0x1b6>
1005a534:	e121      	b.n	1005a77a <llc_cpe+0x3fa>
1005a536:	2100      	movs	r1, #0
1005a538:	2201      	movs	r2, #1
1005a53a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a53c:	f000 f990 	bl	1005a860 <llc_cpe_sm_process_rx_pdu>
1005a540:	2800      	cmp	r0, #0
1005a542:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
1005a544:	d100      	bne.n	1005a548 <llc_cpe+0x1c8>
1005a546:	e111      	b.n	1005a76c <llc_cpe+0x3ec>
1005a548:	9807      	ldr	r0, [sp, #28]
1005a54a:	7900      	ldrb	r0, [r0, #4]
1005a54c:	2100      	movs	r1, #0
1005a54e:	f7ff fe8b 	bl	1005a268 <llc_cpe_sm_get_active>
1005a552:	2800      	cmp	r0, #0
1005a554:	d100      	bne.n	1005a558 <llc_cpe+0x1d8>
1005a556:	e109      	b.n	1005a76c <llc_cpe+0x3ec>
1005a558:	78a0      	ldrb	r0, [r4, #2]
1005a55a:	0640      	lsls	r0, r0, #25
1005a55c:	d400      	bmi.n	1005a560 <llc_cpe+0x1e0>
1005a55e:	e103      	b.n	1005a768 <llc_cpe+0x3e8>
1005a560:	2005      	movs	r0, #5
1005a562:	e102      	b.n	1005a76a <llc_cpe+0x3ea>
1005a564:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a566:	f7fe fab4 	bl	10058ad2 <llc_conn_get_tx_ctrl_pdu_state>
1005a56a:	9005      	str	r0, [sp, #20]
1005a56c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a56e:	b2c6      	uxtb	r6, r0
1005a570:	2201      	movs	r2, #1
1005a572:	9f06      	ldr	r7, [sp, #24]
1005a574:	4638      	mov	r0, r7
1005a576:	4631      	mov	r1, r6
1005a578:	f7ff fccc 	bl	10059f14 <llc_cpe_sm_get_blocked>
1005a57c:	4605      	mov	r5, r0
1005a57e:	2200      	movs	r2, #0
1005a580:	4638      	mov	r0, r7
1005a582:	4631      	mov	r1, r6
1005a584:	4613      	mov	r3, r2
1005a586:	f000 fa57 	bl	1005aa38 <llc_cpe_check_instant_blocked>
1005a58a:	78a1      	ldrb	r1, [r4, #2]
1005a58c:	06c9      	lsls	r1, r1, #27
1005a58e:	d400      	bmi.n	1005a592 <llc_cpe+0x212>
1005a590:	e0f3      	b.n	1005a77a <llc_cpe+0x3fa>
1005a592:	9905      	ldr	r1, [sp, #20]
1005a594:	2900      	cmp	r1, #0
1005a596:	d000      	beq.n	1005a59a <llc_cpe+0x21a>
1005a598:	e0ef      	b.n	1005a77a <llc_cpe+0x3fa>
1005a59a:	2d00      	cmp	r5, #0
1005a59c:	d000      	beq.n	1005a5a0 <llc_cpe+0x220>
1005a59e:	e0ec      	b.n	1005a77a <llc_cpe+0x3fa>
1005a5a0:	2800      	cmp	r0, #0
1005a5a2:	d000      	beq.n	1005a5a6 <llc_cpe+0x226>
1005a5a4:	e0e9      	b.n	1005a77a <llc_cpe+0x3fa>
1005a5a6:	7820      	ldrb	r0, [r4, #0]
1005a5a8:	f000 fa5e 	bl	1005aa68 <llc_cpe_get_cpf>
1005a5ac:	4607      	mov	r7, r0
1005a5ae:	2501      	movs	r5, #1
1005a5b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a5b2:	4629      	mov	r1, r5
1005a5b4:	f7fe fa6a 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
1005a5b8:	4603      	mov	r3, r0
1005a5ba:	9807      	ldr	r0, [sp, #28]
1005a5bc:	7900      	ldrb	r0, [r0, #4]
1005a5be:	2206      	movs	r2, #6
1005a5c0:	4631      	mov	r1, r6
1005a5c2:	461e      	mov	r6, r3
1005a5c4:	47b8      	blx	r7
1005a5c6:	78a0      	ldrb	r0, [r4, #2]
1005a5c8:	07c1      	lsls	r1, r0, #31
1005a5ca:	d16a      	bne.n	1005a6a2 <llc_cpe+0x322>
1005a5cc:	70e5      	strb	r5, [r4, #3]
1005a5ce:	e0d4      	b.n	1005a77a <llc_cpe+0x3fa>
1005a5d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a5d2:	f7fe fa7e 	bl	10058ad2 <llc_conn_get_tx_ctrl_pdu_state>
1005a5d6:	2803      	cmp	r0, #3
1005a5d8:	d000      	beq.n	1005a5dc <llc_cpe+0x25c>
1005a5da:	e0ce      	b.n	1005a77a <llc_cpe+0x3fa>
1005a5dc:	7820      	ldrb	r0, [r4, #0]
1005a5de:	f000 fa43 	bl	1005aa68 <llc_cpe_get_cpf>
1005a5e2:	4606      	mov	r6, r0
1005a5e4:	9807      	ldr	r0, [sp, #28]
1005a5e6:	7900      	ldrb	r0, [r0, #4]
1005a5e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005a5ea:	b2c9      	uxtb	r1, r1
1005a5ec:	2500      	movs	r5, #0
1005a5ee:	462a      	mov	r2, r5
1005a5f0:	462b      	mov	r3, r5
1005a5f2:	47b0      	blx	r6
1005a5f4:	7060      	strb	r0, [r4, #1]
1005a5f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a5f8:	4629      	mov	r1, r5
1005a5fa:	f7fe fd0b 	bl	10059014 <llc_conn_set_tx_ctrl_pdu_state>
1005a5fe:	78a0      	ldrb	r0, [r4, #2]
1005a600:	07c1      	lsls	r1, r0, #31
1005a602:	d168      	bne.n	1005a6d6 <llc_cpe+0x356>
1005a604:	2001      	movs	r0, #1
1005a606:	e0b7      	b.n	1005a778 <llc_cpe+0x3f8>
1005a608:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a60a:	f000 f8fd 	bl	1005a808 <llc_cpe_check_rx_pdu_can_be_processed>
1005a60e:	2800      	cmp	r0, #0
1005a610:	d100      	bne.n	1005a614 <llc_cpe+0x294>
1005a612:	e0b2      	b.n	1005a77a <llc_cpe+0x3fa>
1005a614:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a616:	b2c5      	uxtb	r5, r0
1005a618:	2203      	movs	r2, #3
1005a61a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005a61c:	4630      	mov	r0, r6
1005a61e:	4629      	mov	r1, r5
1005a620:	f000 f91e 	bl	1005a860 <llc_cpe_sm_process_rx_pdu>
1005a624:	2800      	cmp	r0, #0
1005a626:	d05d      	beq.n	1005a6e4 <llc_cpe+0x364>
1005a628:	78a0      	ldrb	r0, [r4, #2]
1005a62a:	07c1      	lsls	r1, r0, #31
1005a62c:	d176      	bne.n	1005a71c <llc_cpe+0x39c>
1005a62e:	2001      	movs	r0, #1
1005a630:	e093      	b.n	1005a75a <llc_cpe+0x3da>
1005a632:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a634:	8840      	ldrh	r0, [r0, #2]
1005a636:	0780      	lsls	r0, r0, #30
1005a638:	d400      	bmi.n	1005a63c <llc_cpe+0x2bc>
1005a63a:	e09e      	b.n	1005a77a <llc_cpe+0x3fa>
1005a63c:	7820      	ldrb	r0, [r4, #0]
1005a63e:	f000 fa13 	bl	1005aa68 <llc_cpe_get_cpf>
1005a642:	2800      	cmp	r0, #0
1005a644:	d07b      	beq.n	1005a73e <llc_cpe+0x3be>
1005a646:	4606      	mov	r6, r0
1005a648:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a64a:	8840      	ldrh	r0, [r0, #2]
1005a64c:	0740      	lsls	r0, r0, #29
1005a64e:	d56d      	bpl.n	1005a72c <llc_cpe+0x3ac>
1005a650:	2208      	movs	r2, #8
1005a652:	e06c      	b.n	1005a72e <llc_cpe+0x3ae>
1005a654:	2601      	movs	r6, #1
1005a656:	4638      	mov	r0, r7
1005a658:	4631      	mov	r1, r6
1005a65a:	f7fe fa17 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
1005a65e:	2102      	movs	r1, #2
1005a660:	7081      	strb	r1, [r0, #2]
1005a662:	7041      	strb	r1, [r0, #1]
1005a664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1005a666:	7002      	strb	r2, [r0, #0]
1005a668:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005a66a:	7992      	ldrb	r2, [r2, #6]
1005a66c:	70c2      	strb	r2, [r0, #3]
1005a66e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a670:	8800      	ldrh	r0, [r0, #0]
1005a672:	4308      	orrs	r0, r1
1005a674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005a676:	8008      	strh	r0, [r1, #0]
1005a678:	4638      	mov	r0, r7
1005a67a:	4631      	mov	r1, r6
1005a67c:	f7fe fcca 	bl	10059014 <llc_conn_set_tx_ctrl_pdu_state>
1005a680:	9807      	ldr	r0, [sp, #28]
1005a682:	7900      	ldrb	r0, [r0, #4]
1005a684:	2204      	movs	r2, #4
1005a686:	2300      	movs	r3, #0
1005a688:	4631      	mov	r1, r6
1005a68a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1005a68c:	f7ff fdd8 	bl	1005a240 <llc_cpe_sm_enable>
1005a690:	e0a6      	b.n	1005a7e0 <llc_cpe+0x460>
1005a692:	9804      	ldr	r0, [sp, #16]
1005a694:	7840      	ldrb	r0, [r0, #1]
1005a696:	07c0      	lsls	r0, r0, #31
1005a698:	d06f      	beq.n	1005a77a <llc_cpe+0x3fa>
1005a69a:	2002      	movs	r0, #2
1005a69c:	9904      	ldr	r1, [sp, #16]
1005a69e:	7088      	strb	r0, [r1, #2]
1005a6a0:	e06b      	b.n	1005a77a <llc_cpe+0x3fa>
1005a6a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a6a4:	70e1      	strb	r1, [r4, #3]
1005a6a6:	9903      	ldr	r1, [sp, #12]
1005a6a8:	7061      	strb	r1, [r4, #1]
1005a6aa:	21ef      	movs	r1, #239	@ 0xef
1005a6ac:	4008      	ands	r0, r1
1005a6ae:	70a0      	strb	r0, [r4, #2]
1005a6b0:	2501      	movs	r5, #1
1005a6b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005a6b4:	4629      	mov	r1, r5
1005a6b6:	f7fe fcad 	bl	10059014 <llc_conn_set_tx_ctrl_pdu_state>
1005a6ba:	7870      	ldrb	r0, [r6, #1]
1005a6bc:	2108      	movs	r1, #8
1005a6be:	1c80      	adds	r0, r0, #2
1005a6c0:	b2c0      	uxtb	r0, r0
1005a6c2:	9100      	str	r1, [sp, #0]
1005a6c4:	9001      	str	r0, [sp, #4]
1005a6c6:	9602      	str	r6, [sp, #8]
1005a6c8:	2000      	movs	r0, #0
1005a6ca:	4629      	mov	r1, r5
1005a6cc:	462a      	mov	r2, r5
1005a6ce:	462b      	mov	r3, r5
1005a6d0:	f7f8 fec6 	bl	10053460 <log_notify_stu_ucfg_weak>
1005a6d4:	e051      	b.n	1005a77a <llc_cpe+0x3fa>
1005a6d6:	0640      	lsls	r0, r0, #25
1005a6d8:	d43c      	bmi.n	1005a754 <llc_cpe+0x3d4>
1005a6da:	7860      	ldrb	r0, [r4, #1]
1005a6dc:	28ff      	cmp	r0, #255	@ 0xff
1005a6de:	d04a      	beq.n	1005a776 <llc_cpe+0x3f6>
1005a6e0:	2004      	movs	r0, #4
1005a6e2:	e049      	b.n	1005a778 <llc_cpe+0x3f8>
1005a6e4:	4628      	mov	r0, r5
1005a6e6:	f7ff fbc9 	bl	10059e7c <llc_cpe_get_other_sm>
1005a6ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005a6ec:	8809      	ldrh	r1, [r1, #0]
1005a6ee:	074a      	lsls	r2, r1, #29
1005a6f0:	d42b      	bmi.n	1005a74a <llc_cpe+0x3ca>
1005a6f2:	0182      	lsls	r2, r0, #6
1005a6f4:	18b2      	adds	r2, r6, r2
1005a6f6:	9b03      	ldr	r3, [sp, #12]
1005a6f8:	3318      	adds	r3, #24
1005a6fa:	5cd2      	ldrb	r2, [r2, r3]
1005a6fc:	2a04      	cmp	r2, #4
1005a6fe:	d003      	beq.n	1005a708 <llc_cpe+0x388>
1005a700:	2800      	cmp	r0, #0
1005a702:	d122      	bne.n	1005a74a <llc_cpe+0x3ca>
1005a704:	2a01      	cmp	r2, #1
1005a706:	d120      	bne.n	1005a74a <llc_cpe+0x3ca>
1005a708:	2004      	movs	r0, #4
1005a70a:	4301      	orrs	r1, r0
1005a70c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a70e:	8001      	strh	r1, [r0, #0]
1005a710:	2015      	movs	r0, #21
1005a712:	f007 fcc3 	bl	1006209c <tsk_notify_idx>
1005a716:	f7e9 fbc2 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005a71a:	e02e      	b.n	1005a77a <llc_cpe+0x3fa>
1005a71c:	0640      	lsls	r0, r0, #25
1005a71e:	d41b      	bmi.n	1005a758 <llc_cpe+0x3d8>
1005a720:	7860      	ldrb	r0, [r4, #1]
1005a722:	28ff      	cmp	r0, #255	@ 0xff
1005a724:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005a726:	d11a      	bne.n	1005a75e <llc_cpe+0x3de>
1005a728:	2002      	movs	r0, #2
1005a72a:	e017      	b.n	1005a75c <llc_cpe+0x3dc>
1005a72c:	2207      	movs	r2, #7
1005a72e:	9807      	ldr	r0, [sp, #28]
1005a730:	7900      	ldrb	r0, [r0, #4]
1005a732:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005a734:	b2c9      	uxtb	r1, r1
1005a736:	2300      	movs	r3, #0
1005a738:	47b0      	blx	r6
1005a73a:	2001      	movs	r0, #1
1005a73c:	70e0      	strb	r0, [r4, #3]
1005a73e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005a740:	8850      	ldrh	r0, [r2, #2]
1005a742:	2106      	movs	r1, #6
1005a744:	4388      	bics	r0, r1
1005a746:	8050      	strh	r0, [r2, #2]
1005a748:	e017      	b.n	1005a77a <llc_cpe+0x3fa>
1005a74a:	2004      	movs	r0, #4
1005a74c:	4381      	bics	r1, r0
1005a74e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a750:	8001      	strh	r1, [r0, #0]
1005a752:	e012      	b.n	1005a77a <llc_cpe+0x3fa>
1005a754:	2005      	movs	r0, #5
1005a756:	e00f      	b.n	1005a778 <llc_cpe+0x3f8>
1005a758:	2005      	movs	r0, #5
1005a75a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005a75c:	70e0      	strb	r0, [r4, #3]
1005a75e:	8810      	ldrh	r0, [r2, #0]
1005a760:	2104      	movs	r1, #4
1005a762:	4388      	bics	r0, r1
1005a764:	8010      	strh	r0, [r2, #0]
1005a766:	e008      	b.n	1005a77a <llc_cpe+0x3fa>
1005a768:	2002      	movs	r0, #2
1005a76a:	70e0      	strb	r0, [r4, #3]
1005a76c:	8828      	ldrh	r0, [r5, #0]
1005a76e:	2104      	movs	r1, #4
1005a770:	4388      	bics	r0, r1
1005a772:	8028      	strh	r0, [r5, #0]
1005a774:	e001      	b.n	1005a77a <llc_cpe+0x3fa>
1005a776:	2002      	movs	r0, #2
1005a778:	70e0      	strb	r0, [r4, #3]
1005a77a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1005a77c:	8830      	ldrh	r0, [r6, #0]
1005a77e:	06c0      	lsls	r0, r0, #27
1005a780:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1005a782:	d526      	bpl.n	1005a7d2 <llc_cpe+0x452>
1005a784:	4638      	mov	r0, r7
1005a786:	f7fe f9a4 	bl	10058ad2 <llc_conn_get_tx_ctrl_pdu_state>
1005a78a:	2800      	cmp	r0, #0
1005a78c:	d121      	bne.n	1005a7d2 <llc_cpe+0x452>
1005a78e:	2100      	movs	r1, #0
1005a790:	2201      	movs	r2, #1
1005a792:	9806      	ldr	r0, [sp, #24]
1005a794:	f7ff fbbe 	bl	10059f14 <llc_cpe_sm_get_blocked>
1005a798:	2800      	cmp	r0, #0
1005a79a:	d11a      	bne.n	1005a7d2 <llc_cpe+0x452>
1005a79c:	2601      	movs	r6, #1
1005a79e:	4638      	mov	r0, r7
1005a7a0:	4631      	mov	r1, r6
1005a7a2:	f7fe f973 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
1005a7a6:	2107      	movs	r1, #7
1005a7a8:	7081      	strb	r1, [r0, #2]
1005a7aa:	2102      	movs	r1, #2
1005a7ac:	7041      	strb	r1, [r0, #1]
1005a7ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a7b0:	7001      	strb	r1, [r0, #0]
1005a7b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005a7b4:	79c9      	ldrb	r1, [r1, #7]
1005a7b6:	70c1      	strb	r1, [r0, #3]
1005a7b8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a7ba:	8800      	ldrh	r0, [r0, #0]
1005a7bc:	2108      	movs	r1, #8
1005a7be:	4301      	orrs	r1, r0
1005a7c0:	2010      	movs	r0, #16
1005a7c2:	4381      	bics	r1, r0
1005a7c4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005a7c6:	8001      	strh	r1, [r0, #0]
1005a7c8:	4638      	mov	r0, r7
1005a7ca:	4631      	mov	r1, r6
1005a7cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1005a7ce:	f7fe fc21 	bl	10059014 <llc_conn_set_tx_ctrl_pdu_state>
1005a7d2:	78e0      	ldrb	r0, [r4, #3]
1005a7d4:	21fe      	movs	r1, #254	@ 0xfe
1005a7d6:	4001      	ands	r1, r0
1005a7d8:	2902      	cmp	r1, #2
1005a7da:	d101      	bne.n	1005a7e0 <llc_cpe+0x460>
1005a7dc:	2001      	movs	r0, #1
1005a7de:	9008      	str	r0, [sp, #32]
1005a7e0:	3440      	adds	r4, #64	@ 0x40
1005a7e2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005a7e4:	e675      	b.n	1005a4d2 <llc_cpe+0x152>
1005a7e6:	9c08      	ldr	r4, [sp, #32]
1005a7e8:	b2e0      	uxtb	r0, r4
1005a7ea:	b00d      	add	sp, #52	@ 0x34
1005a7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a7ee:	7800      	ldrb	r0, [r0, #0]
1005a7f0:	42a0      	cmp	r0, r4
1005a7f2:	d100      	bne.n	1005a7f6 <llc_cpe+0x476>
1005a7f4:	e662      	b.n	1005a4bc <llc_cpe+0x13c>
1005a7f6:	2200      	movs	r2, #0
1005a7f8:	4630      	mov	r0, r6
1005a7fa:	4629      	mov	r1, r5
1005a7fc:	f000 f813 	bl	1005a826 <llc_cpe_check_unsupported_or_rejected_pdu>
1005a800:	2800      	cmp	r0, #0
1005a802:	d000      	beq.n	1005a806 <llc_cpe+0x486>
1005a804:	e65a      	b.n	1005a4bc <llc_cpe+0x13c>
1005a806:	e656      	b.n	1005a4b6 <llc_cpe+0x136>

1005a808 <llc_cpe_check_rx_pdu_can_be_processed>:
1005a808:	b510      	push	{r4, lr}
1005a80a:	4604      	mov	r4, r0
1005a80c:	f7fe f94f 	bl	10058aae <llc_conn_get_rx_ctrl_pdu_full>
1005a810:	2800      	cmp	r0, #0
1005a812:	d004      	beq.n	1005a81e <llc_cpe_check_rx_pdu_can_be_processed+0x16>
1005a814:	4620      	mov	r0, r4
1005a816:	f7fe f95c 	bl	10058ad2 <llc_conn_get_tx_ctrl_pdu_state>
1005a81a:	2803      	cmp	r0, #3
1005a81c:	d101      	bne.n	1005a822 <llc_cpe_check_rx_pdu_can_be_processed+0x1a>
1005a81e:	2000      	movs	r0, #0
1005a820:	bd10      	pop	{r4, pc}
1005a822:	2001      	movs	r0, #1
1005a824:	bd10      	pop	{r4, pc}

1005a826 <llc_cpe_check_unsupported_or_rejected_pdu>:
1005a826:	b570      	push	{r4, r5, r6, lr}
1005a828:	0192      	lsls	r2, r2, #6
1005a82a:	1889      	adds	r1, r1, r2
1005a82c:	790e      	ldrb	r6, [r1, #4]
1005a82e:	8840      	ldrh	r0, [r0, #2]
1005a830:	b2c1      	uxtb	r1, r0
1005a832:	2401      	movs	r4, #1
1005a834:	290d      	cmp	r1, #13
1005a836:	d101      	bne.n	1005a83c <llc_cpe_check_unsupported_or_rejected_pdu+0x16>
1005a838:	2e01      	cmp	r6, #1
1005a83a:	d00f      	beq.n	1005a85c <llc_cpe_check_unsupported_or_rejected_pdu+0x36>
1005a83c:	2911      	cmp	r1, #17
1005a83e:	d001      	beq.n	1005a844 <llc_cpe_check_unsupported_or_rejected_pdu+0x1e>
1005a840:	2907      	cmp	r1, #7
1005a842:	d10a      	bne.n	1005a85a <llc_cpe_check_unsupported_or_rejected_pdu+0x34>
1005a844:	0a05      	lsrs	r5, r0, #8
1005a846:	4628      	mov	r0, r5
1005a848:	f7ff faf2 	bl	10059e30 <llc_cpe_get_cpf_id_from_opcode>
1005a84c:	4286      	cmp	r6, r0
1005a84e:	d104      	bne.n	1005a85a <llc_cpe_check_unsupported_or_rejected_pdu+0x34>
1005a850:	4628      	mov	r0, r5
1005a852:	f7ff fb17 	bl	10059e84 <llc_cpe_get_unknown_reject_from_opcode>
1005a856:	2800      	cmp	r0, #0
1005a858:	d100      	bne.n	1005a85c <llc_cpe_check_unsupported_or_rejected_pdu+0x36>
1005a85a:	2400      	movs	r4, #0
1005a85c:	4620      	mov	r0, r4
1005a85e:	bd70      	pop	{r4, r5, r6, pc}

1005a860 <llc_cpe_sm_process_rx_pdu>:
1005a860:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a862:	b08d      	sub	sp, #52	@ 0x34
1005a864:	9205      	str	r2, [sp, #20]
1005a866:	460e      	mov	r6, r1
1005a868:	4604      	mov	r4, r0
1005a86a:	2030      	movs	r0, #48	@ 0x30
1005a86c:	5c20      	ldrb	r0, [r4, r0]
1005a86e:	900c      	str	r0, [sp, #48]	@ 0x30
1005a870:	2100      	movs	r1, #0
1005a872:	910a      	str	r1, [sp, #40]	@ 0x28
1005a874:	4620      	mov	r0, r4
1005a876:	f7fe f909 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
1005a87a:	7841      	ldrb	r1, [r0, #1]
1005a87c:	9104      	str	r1, [sp, #16]
1005a87e:	2111      	movs	r1, #17
1005a880:	0109      	lsls	r1, r1, #4
1005a882:	9407      	str	r4, [sp, #28]
1005a884:	1864      	adds	r4, r4, r1
1005a886:	9009      	str	r0, [sp, #36]	@ 0x24
1005a888:	8847      	ldrh	r7, [r0, #2]
1005a88a:	b2fa      	uxtb	r2, r7
1005a88c:	2501      	movs	r5, #1
1005a88e:	4620      	mov	r0, r4
1005a890:	4631      	mov	r1, r6
1005a892:	9208      	str	r2, [sp, #32]
1005a894:	462b      	mov	r3, r5
1005a896:	f000 f8cf 	bl	1005aa38 <llc_cpe_check_instant_blocked>
1005a89a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005a89c:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a89e:	1ff8      	subs	r0, r7, #7
1005a8a0:	b2c0      	uxtb	r0, r0
1005a8a2:	280b      	cmp	r0, #11
1005a8a4:	d300      	bcc.n	1005a8a8 <llc_cpe_sm_process_rx_pdu+0x48>
1005a8a6:	4615      	mov	r5, r2
1005a8a8:	4f62      	ldr	r7, [pc, #392]	@ (1005aa34 <__arm_cp.17_0>)
1005a8aa:	40c7      	lsrs	r7, r0
1005a8ac:	402f      	ands	r7, r5
1005a8ae:	4620      	mov	r0, r4
1005a8b0:	4631      	mov	r1, r6
1005a8b2:	f7ff fb2f 	bl	10059f14 <llc_cpe_sm_get_blocked>
1005a8b6:	4605      	mov	r5, r0
1005a8b8:	01b0      	lsls	r0, r6, #6
1005a8ba:	1820      	adds	r0, r4, r0
1005a8bc:	9006      	str	r0, [sp, #24]
1005a8be:	7940      	ldrb	r0, [r0, #5]
1005a8c0:	9003      	str	r0, [sp, #12]
1005a8c2:	960a      	str	r6, [sp, #40]	@ 0x28
1005a8c4:	4630      	mov	r0, r6
1005a8c6:	f7ff fad9 	bl	10059e7c <llc_cpe_get_other_sm>
1005a8ca:	4606      	mov	r6, r0
1005a8cc:	0180      	lsls	r0, r0, #6
1005a8ce:	1821      	adds	r1, r4, r0
1005a8d0:	7948      	ldrb	r0, [r1, #5]
1005a8d2:	79c9      	ldrb	r1, [r1, #7]
1005a8d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005a8d6:	2a00      	cmp	r2, #0
1005a8d8:	d007      	beq.n	1005a8ea <llc_cpe_sm_process_rx_pdu+0x8a>
1005a8da:	2904      	cmp	r1, #4
1005a8dc:	d111      	bne.n	1005a902 <llc_cpe_sm_process_rx_pdu+0xa2>
1005a8de:	9908      	ldr	r1, [sp, #32]
1005a8e0:	4288      	cmp	r0, r1
1005a8e2:	d10e      	bne.n	1005a902 <llc_cpe_sm_process_rx_pdu+0xa2>
1005a8e4:	2d00      	cmp	r5, #0
1005a8e6:	d104      	bne.n	1005a8f2 <llc_cpe_sm_process_rx_pdu+0x92>
1005a8e8:	e014      	b.n	1005a914 <llc_cpe_sm_process_rx_pdu+0xb4>
1005a8ea:	2d00      	cmp	r5, #0
1005a8ec:	d012      	beq.n	1005a914 <llc_cpe_sm_process_rx_pdu+0xb4>
1005a8ee:	2904      	cmp	r1, #4
1005a8f0:	d13b      	bne.n	1005a96a <llc_cpe_sm_process_rx_pdu+0x10a>
1005a8f2:	2f00      	cmp	r7, #0
1005a8f4:	d033      	beq.n	1005a95e <llc_cpe_sm_process_rx_pdu+0xfe>
1005a8f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005a8f8:	4621      	mov	r1, r4
1005a8fa:	4632      	mov	r2, r6
1005a8fc:	f7ff ff93 	bl	1005a826 <llc_cpe_check_unsupported_or_rejected_pdu>
1005a900:	e031      	b.n	1005a966 <llc_cpe_sm_process_rx_pdu+0x106>
1005a902:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a904:	4631      	mov	r1, r6
1005a906:	f7ff fa9f 	bl	10059e48 <llc_cpe_get_cpf_id_from_sm>
1005a90a:	4605      	mov	r5, r0
1005a90c:	2001      	movs	r0, #1
1005a90e:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a910:	2404      	movs	r4, #4
1005a912:	e032      	b.n	1005a97a <llc_cpe_sm_process_rx_pdu+0x11a>
1005a914:	2500      	movs	r5, #0
1005a916:	9805      	ldr	r0, [sp, #20]
1005a918:	2803      	cmp	r0, #3
1005a91a:	d054      	beq.n	1005a9c6 <llc_cpe_sm_process_rx_pdu+0x166>
1005a91c:	2801      	cmp	r0, #1
1005a91e:	d14d      	bne.n	1005a9bc <llc_cpe_sm_process_rx_pdu+0x15c>
1005a920:	9f07      	ldr	r7, [sp, #28]
1005a922:	4638      	mov	r0, r7
1005a924:	302c      	adds	r0, #44	@ 0x2c
1005a926:	7802      	ldrb	r2, [r0, #0]
1005a928:	9808      	ldr	r0, [sp, #32]
1005a92a:	9904      	ldr	r1, [sp, #16]
1005a92c:	f7ff fb1c 	bl	10059f68 <llc_cpe_valid_first_pdu>
1005a930:	2800      	cmp	r0, #0
1005a932:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005a934:	d042      	beq.n	1005a9bc <llc_cpe_sm_process_rx_pdu+0x15c>
1005a936:	2401      	movs	r4, #1
1005a938:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a93a:	4621      	mov	r1, r4
1005a93c:	f7ff fc94 	bl	1005a268 <llc_cpe_sm_get_active>
1005a940:	2800      	cmp	r0, #0
1005a942:	940b      	str	r4, [sp, #44]	@ 0x2c
1005a944:	d071      	beq.n	1005aa2a <llc_cpe_sm_process_rx_pdu+0x1ca>
1005a946:	20ab      	movs	r0, #171	@ 0xab
1005a948:	0040      	lsls	r0, r0, #1
1005a94a:	1838      	adds	r0, r7, r0
1005a94c:	7805      	ldrb	r5, [r0, #0]
1005a94e:	9808      	ldr	r0, [sp, #32]
1005a950:	f7ff fa82 	bl	10059e58 <llc_cpe_get_instant_supported_by_first_opcode>
1005a954:	2101      	movs	r1, #1
1005a956:	2800      	cmp	r0, #0
1005a958:	d163      	bne.n	1005aa22 <llc_cpe_sm_process_rx_pdu+0x1c2>
1005a95a:	460c      	mov	r4, r1
1005a95c:	e062      	b.n	1005aa24 <llc_cpe_sm_process_rx_pdu+0x1c4>
1005a95e:	9908      	ldr	r1, [sp, #32]
1005a960:	1a40      	subs	r0, r0, r1
1005a962:	1e41      	subs	r1, r0, #1
1005a964:	4188      	sbcs	r0, r1
1005a966:	2800      	cmp	r0, #0
1005a968:	d02b      	beq.n	1005a9c2 <llc_cpe_sm_process_rx_pdu+0x162>
1005a96a:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a96c:	4631      	mov	r1, r6
1005a96e:	f7ff fa6b 	bl	10059e48 <llc_cpe_get_cpf_id_from_sm>
1005a972:	4605      	mov	r5, r0
1005a974:	2001      	movs	r0, #1
1005a976:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a978:	2405      	movs	r4, #5
1005a97a:	9f07      	ldr	r7, [sp, #28]
1005a97c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005a97e:	7870      	ldrb	r0, [r6, #1]
1005a980:	2110      	movs	r1, #16
1005a982:	1c80      	adds	r0, r0, #2
1005a984:	b2c0      	uxtb	r0, r0
1005a986:	9100      	str	r1, [sp, #0]
1005a988:	9001      	str	r0, [sp, #4]
1005a98a:	9602      	str	r6, [sp, #8]
1005a98c:	2101      	movs	r1, #1
1005a98e:	2000      	movs	r0, #0
1005a990:	460a      	mov	r2, r1
1005a992:	4603      	mov	r3, r0
1005a994:	f7f8 fd64 	bl	10053460 <log_notify_stu_ucfg_weak>
1005a998:	4628      	mov	r0, r5
1005a99a:	f000 f865 	bl	1005aa68 <llc_cpe_get_cpf>
1005a99e:	2800      	cmp	r0, #0
1005a9a0:	d008      	beq.n	1005a9b4 <llc_cpe_sm_process_rx_pdu+0x154>
1005a9a2:	4605      	mov	r5, r0
1005a9a4:	4633      	mov	r3, r6
1005a9a6:	9806      	ldr	r0, [sp, #24]
1005a9a8:	1d46      	adds	r6, r0, #5
1005a9aa:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a9ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a9ae:	4622      	mov	r2, r4
1005a9b0:	47a8      	blx	r5
1005a9b2:	7030      	strb	r0, [r6, #0]
1005a9b4:	4638      	mov	r0, r7
1005a9b6:	f7fd ffb1 	bl	1005891c <llc_conn_clr_rx_ctrl_pdu_full>
1005a9ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
1005a9bc:	4628      	mov	r0, r5
1005a9be:	b00d      	add	sp, #52	@ 0x34
1005a9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a9c2:	2500      	movs	r5, #0
1005a9c4:	e7fa      	b.n	1005a9bc <llc_cpe_sm_process_rx_pdu+0x15c>
1005a9c6:	950b      	str	r5, [sp, #44]	@ 0x2c
1005a9c8:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a9ca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1005a9cc:	4629      	mov	r1, r5
1005a9ce:	f7ff fa3b 	bl	10059e48 <llc_cpe_get_cpf_id_from_sm>
1005a9d2:	9005      	str	r0, [sp, #20]
1005a9d4:	2f00      	cmp	r7, #0
1005a9d6:	d00c      	beq.n	1005a9f2 <llc_cpe_sm_process_rx_pdu+0x192>
1005a9d8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005a9da:	4630      	mov	r0, r6
1005a9dc:	4621      	mov	r1, r4
1005a9de:	462a      	mov	r2, r5
1005a9e0:	f7ff ff21 	bl	1005a826 <llc_cpe_check_unsupported_or_rejected_pdu>
1005a9e4:	2800      	cmp	r0, #0
1005a9e6:	9f07      	ldr	r7, [sp, #28]
1005a9e8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
1005a9ea:	d0e7      	beq.n	1005a9bc <llc_cpe_sm_process_rx_pdu+0x15c>
1005a9ec:	2403      	movs	r4, #3
1005a9ee:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a9f0:	e008      	b.n	1005aa04 <llc_cpe_sm_process_rx_pdu+0x1a4>
1005a9f2:	9808      	ldr	r0, [sp, #32]
1005a9f4:	9903      	ldr	r1, [sp, #12]
1005a9f6:	4281      	cmp	r1, r0
1005a9f8:	9f07      	ldr	r7, [sp, #28]
1005a9fa:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005a9fc:	d104      	bne.n	1005aa08 <llc_cpe_sm_process_rx_pdu+0x1a8>
1005a9fe:	2001      	movs	r0, #1
1005aa00:	900b      	str	r0, [sp, #44]	@ 0x2c
1005aa02:	2403      	movs	r4, #3
1005aa04:	9d05      	ldr	r5, [sp, #20]
1005aa06:	e7ba      	b.n	1005a97e <llc_cpe_sm_process_rx_pdu+0x11e>
1005aa08:	9805      	ldr	r0, [sp, #20]
1005aa0a:	2801      	cmp	r0, #1
1005aa0c:	d1d5      	bne.n	1005a9ba <llc_cpe_sm_process_rx_pdu+0x15a>
1005aa0e:	4638      	mov	r0, r7
1005aa10:	f7fe f853 	bl	10058aba <llc_conn_get_rx_acl_blocked>
1005aa14:	2800      	cmp	r0, #0
1005aa16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
1005aa18:	d0d0      	beq.n	1005a9bc <llc_cpe_sm_process_rx_pdu+0x15c>
1005aa1a:	2501      	movs	r5, #1
1005aa1c:	2405      	movs	r4, #5
1005aa1e:	950b      	str	r5, [sp, #44]	@ 0x2c
1005aa20:	e7ad      	b.n	1005a97e <llc_cpe_sm_process_rx_pdu+0x11e>
1005aa22:	2402      	movs	r4, #2
1005aa24:	06a8      	lsls	r0, r5, #26
1005aa26:	d400      	bmi.n	1005aa2a <llc_cpe_sm_process_rx_pdu+0x1ca>
1005aa28:	460c      	mov	r4, r1
1005aa2a:	9808      	ldr	r0, [sp, #32]
1005aa2c:	f7ff fa00 	bl	10059e30 <llc_cpe_get_cpf_id_from_opcode>
1005aa30:	4605      	mov	r5, r0
1005aa32:	e7a4      	b.n	1005a97e <llc_cpe_sm_process_rx_pdu+0x11e>

1005aa34 <__arm_cp.17_0>:
1005aa34:	00000441 	.word	0x00000441

1005aa38 <llc_cpe_check_instant_blocked>:
1005aa38:	b5b0      	push	{r4, r5, r7, lr}
1005aa3a:	460c      	mov	r4, r1
1005aa3c:	4605      	mov	r5, r0
1005aa3e:	2b00      	cmp	r3, #0
1005aa40:	d003      	beq.n	1005aa4a <llc_cpe_check_instant_blocked+0x12>
1005aa42:	4610      	mov	r0, r2
1005aa44:	f7ff fa08 	bl	10059e58 <llc_cpe_get_instant_supported_by_first_opcode>
1005aa48:	e004      	b.n	1005aa54 <llc_cpe_check_instant_blocked+0x1c>
1005aa4a:	01a0      	lsls	r0, r4, #6
1005aa4c:	1828      	adds	r0, r5, r0
1005aa4e:	7980      	ldrb	r0, [r0, #6]
1005aa50:	0680      	lsls	r0, r0, #26
1005aa52:	0fc0      	lsrs	r0, r0, #31
1005aa54:	2800      	cmp	r0, #0
1005aa56:	d005      	beq.n	1005aa64 <llc_cpe_check_instant_blocked+0x2c>
1005aa58:	2202      	movs	r2, #2
1005aa5a:	4628      	mov	r0, r5
1005aa5c:	4621      	mov	r1, r4
1005aa5e:	f7ff fa59 	bl	10059f14 <llc_cpe_sm_get_blocked>
1005aa62:	bdb0      	pop	{r4, r5, r7, pc}
1005aa64:	2000      	movs	r0, #0
1005aa66:	bdb0      	pop	{r4, r5, r7, pc}

1005aa68 <llc_cpe_get_cpf>:
1005aa68:	b510      	push	{r4, lr}
1005aa6a:	4601      	mov	r1, r0
1005aa6c:	3912      	subs	r1, #18
1005aa6e:	2903      	cmp	r1, #3
1005aa70:	d201      	bcs.n	1005aa76 <llc_cpe_get_cpf+0xe>
1005aa72:	2000      	movs	r0, #0
1005aa74:	bd10      	pop	{r4, pc}
1005aa76:	0084      	lsls	r4, r0, #2
1005aa78:	f7ff f942 	bl	10059d00 <llc_cpe_get_cntxt_p>
1005aa7c:	6800      	ldr	r0, [r0, #0]
1005aa7e:	5900      	ldr	r0, [r0, r4]
1005aa80:	bd10      	pop	{r4, pc}
	...

1005aa84 <llc_mngm_mod_37>:
1005aa84:	4906      	ldr	r1, [pc, #24]	@ (1005aaa0 <__arm_cp.0_0>)
1005aa86:	4341      	muls	r1, r0
1005aa88:	0c09      	lsrs	r1, r1, #16
1005aa8a:	2224      	movs	r2, #36	@ 0x24
1005aa8c:	43d2      	mvns	r2, r2
1005aa8e:	434a      	muls	r2, r1
1005aa90:	1810      	adds	r0, r2, r0
1005aa92:	b281      	uxth	r1, r0
1005aa94:	2924      	cmp	r1, #36	@ 0x24
1005aa96:	d900      	bls.n	1005aa9a <llc_mngm_mod_37+0x16>
1005aa98:	3825      	subs	r0, #37	@ 0x25
1005aa9a:	b2c0      	uxtb	r0, r0
1005aa9c:	4770      	bx	lr
1005aa9e:	46c0      	nop			@ (mov r8, r8)

1005aaa0 <__arm_cp.0_0>:
1005aaa0:	000006eb 	.word	0x000006eb

1005aaa4 <llc_mngm_csa2_update_remapping_table>:
1005aaa4:	b570      	push	{r4, r5, r6, lr}
1005aaa6:	460d      	mov	r5, r1
1005aaa8:	4604      	mov	r4, r0
1005aaaa:	1c40      	adds	r0, r0, #1
1005aaac:	2600      	movs	r6, #0
1005aaae:	2225      	movs	r2, #37	@ 0x25
1005aab0:	4631      	mov	r1, r6
1005aab2:	f7eb f9f1 	bl	10045e98 <BLEPLAT_MemSet>
1005aab6:	4630      	mov	r0, r6
1005aab8:	2e25      	cmp	r6, #37	@ 0x25
1005aaba:	d20c      	bcs.n	1005aad6 <llc_mngm_csa2_update_remapping_table+0x32>
1005aabc:	2107      	movs	r1, #7
1005aabe:	4031      	ands	r1, r6
1005aac0:	08f2      	lsrs	r2, r6, #3
1005aac2:	5caa      	ldrb	r2, [r5, r2]
1005aac4:	40ca      	lsrs	r2, r1
1005aac6:	07d1      	lsls	r1, r2, #31
1005aac8:	d003      	beq.n	1005aad2 <llc_mngm_csa2_update_remapping_table+0x2e>
1005aaca:	b2c1      	uxtb	r1, r0
1005aacc:	1861      	adds	r1, r4, r1
1005aace:	704e      	strb	r6, [r1, #1]
1005aad0:	1c40      	adds	r0, r0, #1
1005aad2:	1c76      	adds	r6, r6, #1
1005aad4:	e7f0      	b.n	1005aab8 <llc_mngm_csa2_update_remapping_table+0x14>
1005aad6:	7020      	strb	r0, [r4, #0]
1005aad8:	bd70      	pop	{r4, r5, r6, pc}

1005aada <llc_mngm_csa2_select_channel_for_task>:
1005aada:	b5f0      	push	{r4, r5, r6, r7, lr}
1005aadc:	b08b      	sub	sp, #44	@ 0x2c
1005aade:	9305      	str	r3, [sp, #20]
1005aae0:	4617      	mov	r7, r2
1005aae2:	460d      	mov	r5, r1
1005aae4:	a909      	add	r1, sp, #36	@ 0x24
1005aae6:	f7ec fd5c 	bl	100475a2 <BLEPLAT_CNTR_SmGetChannelMap>
1005aaea:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005aaec:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005aaee:	9006      	str	r0, [sp, #24]
1005aaf0:	2800      	cmp	r0, #0
1005aaf2:	d018      	beq.n	1005ab26 <llc_mngm_csa2_select_channel_for_task+0x4c>
1005aaf4:	9504      	str	r5, [sp, #16]
1005aaf6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005aaf8:	2500      	movs	r5, #0
1005aafa:	9806      	ldr	r0, [sp, #24]
1005aafc:	42a8      	cmp	r0, r5
1005aafe:	d010      	beq.n	1005ab22 <llc_mngm_csa2_select_channel_for_task+0x48>
1005ab00:	9804      	ldr	r0, [sp, #16]
1005ab02:	9003      	str	r0, [sp, #12]
1005ab04:	a809      	add	r0, sp, #36	@ 0x24
1005ab06:	9002      	str	r0, [sp, #8]
1005ab08:	a808      	add	r0, sp, #32
1005ab0a:	9001      	str	r0, [sp, #4]
1005ab0c:	a807      	add	r0, sp, #28
1005ab0e:	9000      	str	r0, [sp, #0]
1005ab10:	b2eb      	uxtb	r3, r5
1005ab12:	4620      	mov	r0, r4
1005ab14:	4639      	mov	r1, r7
1005ab16:	9a05      	ldr	r2, [sp, #20]
1005ab18:	f000 f812 	bl	1005ab40 <llc_mngm_csa2_select_channel>
1005ab1c:	5570      	strb	r0, [r6, r5]
1005ab1e:	1c6d      	adds	r5, r5, #1
1005ab20:	e7eb      	b.n	1005aafa <llc_mngm_csa2_select_channel_for_task+0x20>
1005ab22:	7830      	ldrb	r0, [r6, #0]
1005ab24:	e00a      	b.n	1005ab3c <llc_mngm_csa2_select_channel_for_task+0x62>
1005ab26:	9503      	str	r5, [sp, #12]
1005ab28:	a809      	add	r0, sp, #36	@ 0x24
1005ab2a:	9002      	str	r0, [sp, #8]
1005ab2c:	2200      	movs	r2, #0
1005ab2e:	9201      	str	r2, [sp, #4]
1005ab30:	9200      	str	r2, [sp, #0]
1005ab32:	4620      	mov	r0, r4
1005ab34:	4639      	mov	r1, r7
1005ab36:	4613      	mov	r3, r2
1005ab38:	f000 f802 	bl	1005ab40 <llc_mngm_csa2_select_channel>
1005ab3c:	b00b      	add	sp, #44	@ 0x2c
1005ab3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ab40 <llc_mngm_csa2_select_channel>:
1005ab40:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ab42:	b089      	sub	sp, #36	@ 0x24
1005ab44:	4615      	mov	r5, r2
1005ab46:	aa08      	add	r2, sp, #32
1005ab48:	2600      	movs	r6, #0
1005ab4a:	7016      	strb	r6, [r2, #0]
1005ab4c:	2d00      	cmp	r5, #0
1005ab4e:	9306      	str	r3, [sp, #24]
1005ab50:	461a      	mov	r2, r3
1005ab52:	d100      	bne.n	1005ab56 <llc_mngm_csa2_select_channel+0x16>
1005ab54:	462a      	mov	r2, r5
1005ab56:	0c07      	lsrs	r7, r0, #16
1005ab58:	4047      	eors	r7, r0
1005ab5a:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005ab5c:	9007      	str	r0, [sp, #28]
1005ab5e:	2d00      	cmp	r5, #0
1005ab60:	d104      	bne.n	1005ab6c <llc_mngm_csa2_select_channel+0x2c>
1005ab62:	2300      	movs	r3, #0
1005ab64:	9806      	ldr	r0, [sp, #24]
1005ab66:	2801      	cmp	r0, #1
1005ab68:	461c      	mov	r4, r3
1005ab6a:	d838      	bhi.n	1005abde <llc_mngm_csa2_select_channel+0x9e>
1005ab6c:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005ab6e:	9005      	str	r0, [sp, #20]
1005ab70:	4079      	eors	r1, r7
1005ab72:	4051      	eors	r1, r2
1005ab74:	460c      	mov	r4, r1
1005ab76:	2e02      	cmp	r6, #2
1005ab78:	d807      	bhi.n	1005ab8a <llc_mngm_csa2_select_channel+0x4a>
1005ab7a:	b2a0      	uxth	r0, r4
1005ab7c:	f000 f842 	bl	1005ac04 <llc_mngm_csa2_permutation>
1005ab80:	2111      	movs	r1, #17
1005ab82:	4341      	muls	r1, r0
1005ab84:	19cc      	adds	r4, r1, r7
1005ab86:	1c76      	adds	r6, r6, #1
1005ab88:	e7f5      	b.n	1005ab76 <llc_mngm_csa2_select_channel+0x36>
1005ab8a:	4620      	mov	r0, r4
1005ab8c:	4078      	eors	r0, r7
1005ab8e:	b286      	uxth	r6, r0
1005ab90:	4630      	mov	r0, r6
1005ab92:	f7ff ff77 	bl	1005aa84 <llc_mngm_mod_37>
1005ab96:	2824      	cmp	r0, #36	@ 0x24
1005ab98:	d815      	bhi.n	1005abc6 <llc_mngm_csa2_select_channel+0x86>
1005ab9a:	08c1      	lsrs	r1, r0, #3
1005ab9c:	9a05      	ldr	r2, [sp, #20]
1005ab9e:	5c52      	ldrb	r2, [r2, r1]
1005aba0:	00c9      	lsls	r1, r1, #3
1005aba2:	1a41      	subs	r1, r0, r1
1005aba4:	b2c9      	uxtb	r1, r1
1005aba6:	40ca      	lsrs	r2, r1
1005aba8:	07d1      	lsls	r1, r2, #31
1005abaa:	d00c      	beq.n	1005abc6 <llc_mngm_csa2_select_channel+0x86>
1005abac:	a908      	add	r1, sp, #32
1005abae:	7008      	strb	r0, [r1, #0]
1005abb0:	9a07      	ldr	r2, [sp, #28]
1005abb2:	1c51      	adds	r1, r2, #1
1005abb4:	7812      	ldrb	r2, [r2, #0]
1005abb6:	2300      	movs	r3, #0
1005abb8:	429a      	cmp	r2, r3
1005abba:	d00d      	beq.n	1005abd8 <llc_mngm_csa2_select_channel+0x98>
1005abbc:	5cce      	ldrb	r6, [r1, r3]
1005abbe:	4286      	cmp	r6, r0
1005abc0:	d00b      	beq.n	1005abda <llc_mngm_csa2_select_channel+0x9a>
1005abc2:	1c5b      	adds	r3, r3, #1
1005abc4:	e7f8      	b.n	1005abb8 <llc_mngm_csa2_select_channel+0x78>
1005abc6:	9907      	ldr	r1, [sp, #28]
1005abc8:	7808      	ldrb	r0, [r1, #0]
1005abca:	4346      	muls	r6, r0
1005abcc:	0c33      	lsrs	r3, r6, #16
1005abce:	18c8      	adds	r0, r1, r3
1005abd0:	7840      	ldrb	r0, [r0, #1]
1005abd2:	a908      	add	r1, sp, #32
1005abd4:	7008      	strb	r0, [r1, #0]
1005abd6:	e000      	b.n	1005abda <llc_mngm_csa2_select_channel+0x9a>
1005abd8:	2325      	movs	r3, #37	@ 0x25
1005abda:	2d00      	cmp	r5, #0
1005abdc:	d10e      	bne.n	1005abfc <llc_mngm_csa2_select_channel+0xbc>
1005abde:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005abe0:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005abe2:	ad08      	add	r5, sp, #32
1005abe4:	b2ba      	uxth	r2, r7
1005abe6:	9000      	str	r0, [sp, #0]
1005abe8:	9201      	str	r2, [sp, #4]
1005abea:	9807      	ldr	r0, [sp, #28]
1005abec:	9002      	str	r0, [sp, #8]
1005abee:	9503      	str	r5, [sp, #12]
1005abf0:	b2a2      	uxth	r2, r4
1005abf2:	b2db      	uxtb	r3, r3
1005abf4:	9806      	ldr	r0, [sp, #24]
1005abf6:	f000 f803 	bl	1005ac00 <llc_mngm_csa2_select_subevent_channel_ucfg_weak>
1005abfa:	7828      	ldrb	r0, [r5, #0]
1005abfc:	b009      	add	sp, #36	@ 0x24
1005abfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ac00 <llc_mngm_csa2_select_subevent_channel_ucfg_weak>:
1005ac00:	4770      	bx	lr
	...

1005ac04 <llc_mngm_csa2_permutation>:
1005ac04:	0041      	lsls	r1, r0, #1
1005ac06:	4a0a      	ldr	r2, [pc, #40]	@ (1005ac30 <__arm_cp.7_0>)
1005ac08:	400a      	ands	r2, r1
1005ac0a:	0840      	lsrs	r0, r0, #1
1005ac0c:	4909      	ldr	r1, [pc, #36]	@ (1005ac34 <__arm_cp.7_1>)
1005ac0e:	4001      	ands	r1, r0
1005ac10:	1888      	adds	r0, r1, r2
1005ac12:	0081      	lsls	r1, r0, #2
1005ac14:	4a08      	ldr	r2, [pc, #32]	@ (1005ac38 <__arm_cp.7_2>)
1005ac16:	400a      	ands	r2, r1
1005ac18:	0880      	lsrs	r0, r0, #2
1005ac1a:	4908      	ldr	r1, [pc, #32]	@ (1005ac3c <__arm_cp.7_3>)
1005ac1c:	4001      	ands	r1, r0
1005ac1e:	1888      	adds	r0, r1, r2
1005ac20:	0101      	lsls	r1, r0, #4
1005ac22:	4a07      	ldr	r2, [pc, #28]	@ (1005ac40 <__arm_cp.7_4>)
1005ac24:	400a      	ands	r2, r1
1005ac26:	0900      	lsrs	r0, r0, #4
1005ac28:	4906      	ldr	r1, [pc, #24]	@ (1005ac44 <__arm_cp.7_5>)
1005ac2a:	4001      	ands	r1, r0
1005ac2c:	1888      	adds	r0, r1, r2
1005ac2e:	4770      	bx	lr

1005ac30 <__arm_cp.7_0>:
1005ac30:	0001aaaa 	.word	0x0001aaaa

1005ac34 <__arm_cp.7_1>:
1005ac34:	00005555 	.word	0x00005555

1005ac38 <__arm_cp.7_2>:
1005ac38:	0007cccc 	.word	0x0007cccc

1005ac3c <__arm_cp.7_3>:
1005ac3c:	00003333 	.word	0x00003333

1005ac40 <__arm_cp.7_4>:
1005ac40:	0000f0f0 	.word	0x0000f0f0

1005ac44 <__arm_cp.7_5>:
1005ac44:	00000f0f 	.word	0x00000f0f

1005ac48 <llc_wl_clear_filter_accept_list>:
1005ac48:	b5b0      	push	{r4, r5, r7, lr}
1005ac4a:	2401      	movs	r4, #1
1005ac4c:	4620      	mov	r0, r4
1005ac4e:	f002 fa67 	bl	1005d120 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005ac52:	4605      	mov	r5, r0
1005ac54:	4620      	mov	r0, r4
1005ac56:	f000 f8a5 	bl	1005ada4 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005ac5a:	4328      	orrs	r0, r5
1005ac5c:	d10a      	bne.n	1005ac74 <llc_wl_clear_filter_accept_list+0x2c>
1005ac5e:	4806      	ldr	r0, [pc, #24]	@ (1005ac78 <__arm_cp.1_0>)
1005ac60:	6800      	ldr	r0, [r0, #0]
1005ac62:	2194      	movs	r1, #148	@ 0x94
1005ac64:	5840      	ldr	r0, [r0, r1]
1005ac66:	300c      	adds	r0, #12
1005ac68:	f007 fd2b 	bl	100626c2 <addr8_list_clear>
1005ac6c:	f000 f860 	bl	1005ad30 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>
1005ac70:	2000      	movs	r0, #0
1005ac72:	bdb0      	pop	{r4, r5, r7, pc}
1005ac74:	200c      	movs	r0, #12
1005ac76:	bdb0      	pop	{r4, r5, r7, pc}

1005ac78 <__arm_cp.1_0>:
1005ac78:	20001174 	.word	0x20001174

1005ac7c <llc_wl_add_device_to_filter_accept_list>:
1005ac7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ac7e:	b087      	sub	sp, #28
1005ac80:	460c      	mov	r4, r1
1005ac82:	4605      	mov	r5, r0
1005ac84:	9106      	str	r1, [sp, #24]
1005ac86:	9005      	str	r0, [sp, #20]
1005ac88:	2601      	movs	r6, #1
1005ac8a:	4630      	mov	r0, r6
1005ac8c:	f002 fa48 	bl	1005d120 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005ac90:	4607      	mov	r7, r0
1005ac92:	4630      	mov	r0, r6
1005ac94:	f000 f886 	bl	1005ada4 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005ac98:	4338      	orrs	r0, r7
1005ac9a:	d11d      	bne.n	1005acd8 <llc_wl_add_device_to_filter_accept_list+0x5c>
1005ac9c:	b2e8      	uxtb	r0, r5
1005ac9e:	28ff      	cmp	r0, #255	@ 0xff
1005aca0:	d105      	bne.n	1005acae <llc_wl_add_device_to_filter_accept_list+0x32>
1005aca2:	9005      	str	r0, [sp, #20]
1005aca4:	21ff      	movs	r1, #255	@ 0xff
1005aca6:	0609      	lsls	r1, r1, #24
1005aca8:	400c      	ands	r4, r1
1005acaa:	9406      	str	r4, [sp, #24]
1005acac:	4605      	mov	r5, r0
1005acae:	4810      	ldr	r0, [pc, #64]	@ (1005acf0 <__arm_cp.2_0>)
1005acb0:	6800      	ldr	r0, [r0, #0]
1005acb2:	2194      	movs	r1, #148	@ 0x94
1005acb4:	5840      	ldr	r0, [r0, r1]
1005acb6:	a903      	add	r1, sp, #12
1005acb8:	9101      	str	r1, [sp, #4]
1005acba:	a904      	add	r1, sp, #16
1005acbc:	9100      	str	r1, [sp, #0]
1005acbe:	300c      	adds	r0, #12
1005acc0:	2301      	movs	r3, #1
1005acc2:	4629      	mov	r1, r5
1005acc4:	4622      	mov	r2, r4
1005acc6:	f007 fc7d 	bl	100625c4 <addr8_list_add>
1005acca:	2800      	cmp	r0, #0
1005accc:	d006      	beq.n	1005acdc <llc_wl_add_device_to_filter_accept_list+0x60>
1005acce:	a805      	add	r0, sp, #20
1005acd0:	2101      	movs	r1, #1
1005acd2:	f000 f82c 	bl	1005ad2e <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>
1005acd6:	e005      	b.n	1005ace4 <llc_wl_add_device_to_filter_accept_list+0x68>
1005acd8:	200c      	movs	r0, #12
1005acda:	e006      	b.n	1005acea <llc_wl_add_device_to_filter_accept_list+0x6e>
1005acdc:	a803      	add	r0, sp, #12
1005acde:	7800      	ldrb	r0, [r0, #0]
1005ace0:	2800      	cmp	r0, #0
1005ace2:	d001      	beq.n	1005ace8 <llc_wl_add_device_to_filter_accept_list+0x6c>
1005ace4:	2000      	movs	r0, #0
1005ace6:	e000      	b.n	1005acea <llc_wl_add_device_to_filter_accept_list+0x6e>
1005ace8:	2007      	movs	r0, #7
1005acea:	b007      	add	sp, #28
1005acec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005acee:	46c0      	nop			@ (mov r8, r8)

1005acf0 <__arm_cp.2_0>:
1005acf0:	20001174 	.word	0x20001174

1005acf4 <bis_csr_ucfg_weak>:
1005acf4:	2000      	movs	r0, #0
1005acf6:	4770      	bx	lr

1005acf8 <cis_csr_ucfg_weak>:
1005acf8:	2000      	movs	r0, #0
1005acfa:	4770      	bx	lr

1005acfc <llc_isoal_mem_alloc_ucfg_weak>:
1005acfc:	4770      	bx	lr

1005acfe <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
1005acfe:	2000      	movs	r0, #0
1005ad00:	4770      	bx	lr

1005ad02 <iso_terminate_event_int_cb_ucfg_weak>:
1005ad02:	2000      	movs	r0, #0
1005ad04:	4770      	bx	lr

1005ad06 <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
1005ad06:	2000      	movs	r0, #0
1005ad08:	4770      	bx	lr

1005ad0a <llc_iso_cmn_mem_alloc_ucfg_weak>:
1005ad0a:	4770      	bx	lr

1005ad0c <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
1005ad0c:	2000      	movs	r0, #0
1005ad0e:	4770      	bx	lr

1005ad10 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
1005ad10:	2000      	movs	r0, #0
1005ad12:	4770      	bx	lr

1005ad14 <llc_past_init_ucfg_weak>:
1005ad14:	4770      	bx	lr

1005ad16 <llc_past_register_cpf_ucfg_weak>:
1005ad16:	b580      	push	{r7, lr}
1005ad18:	2009      	movs	r0, #9
1005ad1a:	2100      	movs	r1, #0
1005ad1c:	f7ff fa78 	bl	1005a210 <llc_cpe_register_cpf>
1005ad20:	bd80      	pop	{r7, pc}

1005ad22 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
1005ad22:	4770      	bx	lr

1005ad24 <llc_priv_init_ucfg_weak>:
1005ad24:	4770      	bx	lr

1005ad26 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
1005ad26:	4770      	bx	lr

1005ad28 <llc_priv_offline_rpa_resolution_ucfg_weak>:
1005ad28:	4770      	bx	lr

1005ad2a <llc_priv_controller_privacy_csr_ucfg_weak>:
1005ad2a:	2000      	movs	r0, #0
1005ad2c:	4770      	bx	lr

1005ad2e <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>:
1005ad2e:	4770      	bx	lr

1005ad30 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>:
1005ad30:	4770      	bx	lr

1005ad32 <llc_priv_start_privacy_timer_ucfg_weak>:
1005ad32:	4770      	bx	lr

1005ad34 <llc_priv_stop_privacy_timer_ucfg_weak>:
1005ad34:	4770      	bx	lr

1005ad36 <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
1005ad36:	4770      	bx	lr

1005ad38 <llc_pscan_get_cntxt_per_p>:
1005ad38:	218c      	movs	r1, #140	@ 0x8c
1005ad3a:	4341      	muls	r1, r0
1005ad3c:	4804      	ldr	r0, [pc, #16]	@ (1005ad50 <__arm_cp.1_0>)
1005ad3e:	6800      	ldr	r0, [r0, #0]
1005ad40:	2294      	movs	r2, #148	@ 0x94
1005ad42:	5880      	ldr	r0, [r0, r2]
1005ad44:	6840      	ldr	r0, [r0, #4]
1005ad46:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1005ad48:	6800      	ldr	r0, [r0, #0]
1005ad4a:	6800      	ldr	r0, [r0, #0]
1005ad4c:	1840      	adds	r0, r0, r1
1005ad4e:	4770      	bx	lr

1005ad50 <__arm_cp.1_0>:
1005ad50:	20001174 	.word	0x20001174

1005ad54 <llc_pscan_init_ucfg_weak>:
1005ad54:	4770      	bx	lr

1005ad56 <llc_pscan_mem_allocate_ucfg_weak>:
1005ad56:	4770      	bx	lr

1005ad58 <llc_pscan_wr_init_ucfg_weak>:
1005ad58:	4770      	bx	lr
	...

1005ad5c <llc_pscan_wr_mem_allocate_ucfg_weak>:
1005ad5c:	b510      	push	{r4, lr}
1005ad5e:	2801      	cmp	r0, #1
1005ad60:	d110      	bne.n	1005ad84 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005ad62:	2901      	cmp	r1, #1
1005ad64:	d10e      	bne.n	1005ad84 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005ad66:	2a01      	cmp	r2, #1
1005ad68:	d10c      	bne.n	1005ad84 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005ad6a:	2400      	movs	r4, #0
1005ad6c:	4620      	mov	r0, r4
1005ad6e:	f7ff ffe3 	bl	1005ad38 <llc_pscan_get_cntxt_per_p>
1005ad72:	3014      	adds	r0, #20
1005ad74:	4904      	ldr	r1, [pc, #16]	@ (1005ad88 <__arm_cp.5_0>)
1005ad76:	7f89      	ldrb	r1, [r1, #30]
1005ad78:	2900      	cmp	r1, #0
1005ad7a:	d003      	beq.n	1005ad84 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005ad7c:	6004      	str	r4, [r0, #0]
1005ad7e:	308c      	adds	r0, #140	@ 0x8c
1005ad80:	1e49      	subs	r1, r1, #1
1005ad82:	e7f9      	b.n	1005ad78 <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
1005ad84:	bd10      	pop	{r4, pc}
1005ad86:	46c0      	nop			@ (mov r8, r8)

1005ad88 <__arm_cp.5_0>:
1005ad88:	20001188 	.word	0x20001188

1005ad8c <llc_pscan_wr_check_pawr_active_ucfg_weak>:
1005ad8c:	2000      	movs	r0, #0
1005ad8e:	4770      	bx	lr

1005ad90 <llc_scan_get_cntxt_p>:
1005ad90:	4802      	ldr	r0, [pc, #8]	@ (1005ad9c <__arm_cp.0_0>)
1005ad92:	6800      	ldr	r0, [r0, #0]
1005ad94:	2194      	movs	r1, #148	@ 0x94
1005ad96:	5840      	ldr	r0, [r0, r1]
1005ad98:	6840      	ldr	r0, [r0, #4]
1005ad9a:	4770      	bx	lr

1005ad9c <__arm_cp.0_0>:
1005ad9c:	20001174 	.word	0x20001174

1005ada0 <llc_scan_init_ucfg_weak>:
1005ada0:	4770      	bx	lr

1005ada2 <llc_scan_mem_allocate_ucfg_weak>:
1005ada2:	4770      	bx	lr

1005ada4 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>:
1005ada4:	b5b0      	push	{r4, r5, r7, lr}
1005ada6:	4605      	mov	r5, r0
1005ada8:	2400      	movs	r4, #0
1005adaa:	f7fc ff16 	bl	10057bda <scan_csr_ucfg_weak>
1005adae:	2801      	cmp	r0, #1
1005adb0:	d10d      	bne.n	1005adce <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005adb2:	f7ff ffed 	bl	1005ad90 <llc_scan_get_cntxt_p>
1005adb6:	21eb      	movs	r1, #235	@ 0xeb
1005adb8:	5c41      	ldrb	r1, [r0, r1]
1005adba:	07c9      	lsls	r1, r1, #31
1005adbc:	d007      	beq.n	1005adce <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005adbe:	2d00      	cmp	r5, #0
1005adc0:	d004      	beq.n	1005adcc <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x28>
1005adc2:	30ea      	adds	r0, #234	@ 0xea
1005adc4:	7800      	ldrb	r0, [r0, #0]
1005adc6:	2401      	movs	r4, #1
1005adc8:	4004      	ands	r4, r0
1005adca:	e000      	b.n	1005adce <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005adcc:	2401      	movs	r4, #1
1005adce:	4620      	mov	r0, r4
1005add0:	bdb0      	pop	{r4, r5, r7, pc}

1005add2 <llc_scan_stop_ucfg_weak>:
1005add2:	2000      	movs	r0, #0
1005add4:	4770      	bx	lr

1005add6 <llc_sca_upd_register_cpf_ucfg_weak>:
1005add6:	b580      	push	{r7, lr}
1005add8:	2011      	movs	r0, #17
1005adda:	2100      	movs	r1, #0
1005addc:	f7ff fa18 	bl	1005a210 <llc_cpe_register_cpf>
1005ade0:	bd80      	pop	{r7, pc}
	...

1005ade4 <llc_subrate_init_acceptable>:
1005ade4:	2100      	movs	r1, #0
1005ade6:	4a03      	ldr	r2, [pc, #12]	@ (1005adf4 <__arm_cp.4_0>)
1005ade8:	6281      	str	r1, [r0, #40]	@ 0x28
1005adea:	62c2      	str	r2, [r0, #44]	@ 0x2c
1005adec:	2119      	movs	r1, #25
1005adee:	01c9      	lsls	r1, r1, #7
1005adf0:	8601      	strh	r1, [r0, #48]	@ 0x30
1005adf2:	4770      	bx	lr

1005adf4 <__arm_cp.4_0>:
1005adf4:	00010001 	.word	0x00010001

1005adf8 <llc_subrate_init_acceptable_per>:
1005adf8:	b580      	push	{r7, lr}
1005adfa:	4603      	mov	r3, r0
1005adfc:	2001      	movs	r0, #1
1005adfe:	0200      	lsls	r0, r0, #8
1005ae00:	1808      	adds	r0, r1, r0
1005ae02:	3328      	adds	r3, #40	@ 0x28
1005ae04:	220a      	movs	r2, #10
1005ae06:	4619      	mov	r1, r3
1005ae08:	f7eb f836 	bl	10045e78 <BLEPLAT_MemCpy>
1005ae0c:	bd80      	pop	{r7, pc}

1005ae0e <llc_subrate_reset_params>:
1005ae0e:	21f8      	movs	r1, #248	@ 0xf8
1005ae10:	2200      	movs	r2, #0
1005ae12:	5042      	str	r2, [r0, r1]
1005ae14:	30f8      	adds	r0, #248	@ 0xf8
1005ae16:	2101      	movs	r1, #1
1005ae18:	0409      	lsls	r1, r1, #16
1005ae1a:	6041      	str	r1, [r0, #4]
1005ae1c:	4770      	bx	lr

1005ae1e <llc_subrate_new_sr_base_event_ucfg_weak>:
1005ae1e:	4770      	bx	lr

1005ae20 <llc_subrate_update_cont_counter_ucfg_weak>:
1005ae20:	4770      	bx	lr

1005ae22 <llc_subrate_offline_processing_ucfg_weak>:
1005ae22:	2000      	movs	r0, #0
1005ae24:	4770      	bx	lr

1005ae26 <llc_subrate_register_cpf_ucfg_weak>:
1005ae26:	b580      	push	{r7, lr}
1005ae28:	2010      	movs	r0, #16
1005ae2a:	2100      	movs	r1, #0
1005ae2c:	f7ff f9f0 	bl	1005a210 <llc_cpe_register_cpf>
1005ae30:	bd80      	pop	{r7, pc}
	...

1005ae34 <llc_convert_sca_to_ppm>:
1005ae34:	0740      	lsls	r0, r0, #29
1005ae36:	0f00      	lsrs	r0, r0, #28
1005ae38:	4901      	ldr	r1, [pc, #4]	@ (1005ae40 <__arm_cp.1_0>)
1005ae3a:	5a08      	ldrh	r0, [r1, r0]
1005ae3c:	4770      	bx	lr
1005ae3e:	46c0      	nop			@ (mov r8, r8)

1005ae40 <__arm_cp.1_0>:
1005ae40:	1006d11a 	.word	0x1006d11a

1005ae44 <llc_convert_hci_phy_enum_to_hw_phy>:
1005ae44:	1e80      	subs	r0, r0, #2
1005ae46:	b2c0      	uxtb	r0, r0
1005ae48:	2803      	cmp	r0, #3
1005ae4a:	d301      	bcc.n	1005ae50 <llc_convert_hci_phy_enum_to_hw_phy+0xc>
1005ae4c:	2000      	movs	r0, #0
1005ae4e:	e002      	b.n	1005ae56 <llc_convert_hci_phy_enum_to_hw_phy+0x12>
1005ae50:	00c1      	lsls	r1, r0, #3
1005ae52:	4802      	ldr	r0, [pc, #8]	@ (1005ae5c <__arm_cp.4_0>)
1005ae54:	40c8      	lsrs	r0, r1
1005ae56:	b2c0      	uxtb	r0, r0
1005ae58:	4770      	bx	lr
1005ae5a:	46c0      	nop			@ (mov r8, r8)

1005ae5c <__arm_cp.4_0>:
1005ae5c:	00060401 	.word	0x00060401

1005ae60 <LL_channel_map_update_param_check>:
1005ae60:	b5b0      	push	{r4, r5, r7, lr}
1005ae62:	4601      	mov	r1, r0
1005ae64:	7900      	ldrb	r0, [r0, #4]
1005ae66:	281f      	cmp	r0, #31
1005ae68:	d811      	bhi.n	1005ae8e <LL_channel_map_update_param_check+0x2e>
1005ae6a:	2000      	movs	r0, #0
1005ae6c:	4602      	mov	r2, r0
1005ae6e:	4603      	mov	r3, r0
1005ae70:	2a25      	cmp	r2, #37	@ 0x25
1005ae72:	d00f      	beq.n	1005ae94 <LL_channel_map_update_param_check+0x34>
1005ae74:	2407      	movs	r4, #7
1005ae76:	4014      	ands	r4, r2
1005ae78:	08d5      	lsrs	r5, r2, #3
1005ae7a:	5d4d      	ldrb	r5, [r1, r5]
1005ae7c:	40e5      	lsrs	r5, r4
1005ae7e:	07ec      	lsls	r4, r5, #31
1005ae80:	d003      	beq.n	1005ae8a <LL_channel_map_update_param_check+0x2a>
1005ae82:	1c5b      	adds	r3, r3, #1
1005ae84:	b2dc      	uxtb	r4, r3
1005ae86:	2c02      	cmp	r4, #2
1005ae88:	d003      	beq.n	1005ae92 <LL_channel_map_update_param_check+0x32>
1005ae8a:	1c52      	adds	r2, r2, #1
1005ae8c:	e7f0      	b.n	1005ae70 <LL_channel_map_update_param_check+0x10>
1005ae8e:	2000      	movs	r0, #0
1005ae90:	bdb0      	pop	{r4, r5, r7, pc}
1005ae92:	2001      	movs	r0, #1
1005ae94:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005ae98 <LLC_channel_map_copy_to_cpf_context_ucfg_weak>:
1005ae98:	b580      	push	{r7, lr}
1005ae9a:	4904      	ldr	r1, [pc, #16]	@ (1005aeac <__arm_cp.1_0>)
1005ae9c:	6809      	ldr	r1, [r1, #0]
1005ae9e:	2294      	movs	r2, #148	@ 0x94
1005aea0:	5889      	ldr	r1, [r1, r2]
1005aea2:	3148      	adds	r1, #72	@ 0x48
1005aea4:	2205      	movs	r2, #5
1005aea6:	f7ea ffe7 	bl	10045e78 <BLEPLAT_MemCpy>
1005aeaa:	bd80      	pop	{r7, pc}

1005aeac <__arm_cp.1_0>:
1005aeac:	20001174 	.word	0x20001174

1005aeb0 <LL_channel_map_update>:
1005aeb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005aeb2:	b085      	sub	sp, #20
1005aeb4:	461f      	mov	r7, r3
1005aeb6:	4614      	mov	r4, r2
1005aeb8:	4605      	mov	r5, r0
1005aeba:	9103      	str	r1, [sp, #12]
1005aebc:	f7ff f9de 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005aec0:	9002      	str	r0, [sp, #8]
1005aec2:	4628      	mov	r0, r5
1005aec4:	f7fd fb5a 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005aec8:	1e61      	subs	r1, r4, #1
1005aeca:	2906      	cmp	r1, #6
1005aecc:	d874      	bhi.n	1005afb8 <LL_channel_map_update+0x108>
1005aece:	4606      	mov	r6, r0
1005aed0:	302c      	adds	r0, #44	@ 0x2c
1005aed2:	46c0      	nop			@ (mov r8, r8)
1005aed4:	4479      	add	r1, pc
1005aed6:	7909      	ldrb	r1, [r1, #4]
1005aed8:	0049      	lsls	r1, r1, #1
1005aeda:	448f      	add	pc, r1
1005aedc:	2f6d0303 	.word	0x2f6d0303
1005aee0:	005f346d 	.word	0x005f346d
1005aee4:	7800      	ldrb	r0, [r0, #0]
1005aee6:	2803      	cmp	r0, #3
1005aee8:	d166      	bne.n	1005afb8 <LL_channel_map_update+0x108>
1005aeea:	1cfc      	adds	r4, r7, #3
1005aeec:	4620      	mov	r0, r4
1005aeee:	f7ff ffb7 	bl	1005ae60 <LL_channel_map_update_param_check>
1005aef2:	2801      	cmp	r0, #1
1005aef4:	d158      	bne.n	1005afa8 <LL_channel_map_update+0xf8>
1005aef6:	7a38      	ldrb	r0, [r7, #8]
1005aef8:	9001      	str	r0, [sp, #4]
1005aefa:	7a7f      	ldrb	r7, [r7, #9]
1005aefc:	2205      	movs	r2, #5
1005aefe:	4620      	mov	r0, r4
1005af00:	9c02      	ldr	r4, [sp, #8]
1005af02:	4621      	mov	r1, r4
1005af04:	f007 fa52 	bl	100623ac <char_copy>
1005af08:	0238      	lsls	r0, r7, #8
1005af0a:	9901      	ldr	r1, [sp, #4]
1005af0c:	1840      	adds	r0, r0, r1
1005af0e:	b282      	uxth	r2, r0
1005af10:	4630      	mov	r0, r6
1005af12:	4621      	mov	r1, r4
1005af14:	f7fe f82e 	bl	10058f74 <llc_conn_set_chmap_params>
1005af18:	2400      	movs	r4, #0
1005af1a:	2602      	movs	r6, #2
1005af1c:	4628      	mov	r0, r5
1005af1e:	4621      	mov	r1, r4
1005af20:	4632      	mov	r2, r6
1005af22:	f7ff f80d 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005af26:	2301      	movs	r3, #1
1005af28:	4628      	mov	r0, r5
1005af2a:	4621      	mov	r1, r4
1005af2c:	4632      	mov	r2, r6
1005af2e:	f7ff f987 	bl	1005a240 <llc_cpe_sm_enable>
1005af32:	4628      	mov	r0, r5
1005af34:	9903      	ldr	r1, [sp, #12]
1005af36:	f7ff f9a9 	bl	1005a28c <llc_cpe_sm_rx_pdu_with_instant>
1005af3a:	e03d      	b.n	1005afb8 <LL_channel_map_update+0x108>
1005af3c:	78b8      	ldrb	r0, [r7, #2]
1005af3e:	2801      	cmp	r0, #1
1005af40:	d036      	beq.n	1005afb0 <LL_channel_map_update+0x100>
1005af42:	212a      	movs	r1, #42	@ 0x2a
1005af44:	e035      	b.n	1005afb2 <LL_channel_map_update+0x102>
1005af46:	4631      	mov	r1, r6
1005af48:	31fe      	adds	r1, #254	@ 0xfe
1005af4a:	880a      	ldrh	r2, [r1, #0]
1005af4c:	8f31      	ldrh	r1, [r6, #56]	@ 0x38
1005af4e:	8ac0      	ldrh	r0, [r0, #22]
1005af50:	f7fe ff5c 	bl	10059e0c <llc_cpe_calculate_instant>
1005af54:	a904      	add	r1, sp, #16
1005af56:	9101      	str	r1, [sp, #4]
1005af58:	8008      	strh	r0, [r1, #0]
1005af5a:	9c02      	ldr	r4, [sp, #8]
1005af5c:	4620      	mov	r0, r4
1005af5e:	4629      	mov	r1, r5
1005af60:	f7ff ff9a 	bl	1005ae98 <LLC_channel_map_copy_to_cpf_context_ucfg_weak>
1005af64:	2001      	movs	r0, #1
1005af66:	70b8      	strb	r0, [r7, #2]
1005af68:	2008      	movs	r0, #8
1005af6a:	7078      	strb	r0, [r7, #1]
1005af6c:	2003      	movs	r0, #3
1005af6e:	7038      	strb	r0, [r7, #0]
1005af70:	1cf9      	adds	r1, r7, #3
1005af72:	2205      	movs	r2, #5
1005af74:	4620      	mov	r0, r4
1005af76:	f007 fa19 	bl	100623ac <char_copy>
1005af7a:	3708      	adds	r7, #8
1005af7c:	2202      	movs	r2, #2
1005af7e:	9c01      	ldr	r4, [sp, #4]
1005af80:	4620      	mov	r0, r4
1005af82:	4639      	mov	r1, r7
1005af84:	f007 fa12 	bl	100623ac <char_copy>
1005af88:	8822      	ldrh	r2, [r4, #0]
1005af8a:	4630      	mov	r0, r6
1005af8c:	9902      	ldr	r1, [sp, #8]
1005af8e:	f7fd fff1 	bl	10058f74 <llc_conn_set_chmap_params>
1005af92:	4628      	mov	r0, r5
1005af94:	9903      	ldr	r1, [sp, #12]
1005af96:	f7ff f999 	bl	1005a2cc <llc_cpe_sm_tx_pdu_with_instant>
1005af9a:	e00d      	b.n	1005afb8 <LL_channel_map_update+0x108>
1005af9c:	2202      	movs	r2, #2
1005af9e:	4628      	mov	r0, r5
1005afa0:	9903      	ldr	r1, [sp, #12]
1005afa2:	f7ff f93d 	bl	1005a220 <llc_cpe_sm_disable>
1005afa6:	e007      	b.n	1005afb8 <LL_channel_map_update+0x108>
1005afa8:	4628      	mov	r0, r5
1005afaa:	f7ff f99e 	bl	1005a2ea <llc_cpe_tx_unknown_rsp>
1005afae:	e003      	b.n	1005afb8 <LL_channel_map_update+0x108>
1005afb0:	2123      	movs	r1, #35	@ 0x23
1005afb2:	4630      	mov	r0, r6
1005afb4:	f7fe f96a 	bl	1005928c <llc_conn_disconnect_link_from_cpf>
1005afb8:	20ff      	movs	r0, #255	@ 0xff
1005afba:	b005      	add	sp, #20
1005afbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005afbe <LLC_channel_map_update_offline_processing_ucfg_weak>:
1005afbe:	2000      	movs	r0, #0
1005afc0:	4770      	bx	lr

1005afc2 <LLC_conn_init_chc_ctxt_ucfg_weak>:
1005afc2:	4770      	bx	lr

1005afc4 <LLC_chc_ll_cntxt_init_ucfg_weak>:
1005afc4:	4770      	bx	lr

1005afc6 <LLC_chc_reporting_offline_processing_ucfg_weak>:
1005afc6:	2000      	movs	r0, #0
1005afc8:	4770      	bx	lr

1005afca <chc_csr_ucfg_weak>:
1005afca:	2000      	movs	r0, #0
1005afcc:	4770      	bx	lr

1005afce <llc_chan_class_register_cpf_ucfg_weak>:
1005afce:	b510      	push	{r4, lr}
1005afd0:	200c      	movs	r0, #12
1005afd2:	2400      	movs	r4, #0
1005afd4:	4621      	mov	r1, r4
1005afd6:	f7ff f91b 	bl	1005a210 <llc_cpe_register_cpf>
1005afda:	200d      	movs	r0, #13
1005afdc:	4621      	mov	r1, r4
1005afde:	f7ff f917 	bl	1005a210 <llc_cpe_register_cpf>
1005afe2:	bd10      	pop	{r4, pc}

1005afe4 <LL_cpf_cis_processing_ucfg_weak>:
1005afe4:	4770      	bx	lr

1005afe6 <llc_cis_register_cpf_ucfg_weak>:
1005afe6:	b510      	push	{r4, lr}
1005afe8:	200e      	movs	r0, #14
1005afea:	2400      	movs	r4, #0
1005afec:	4621      	mov	r1, r4
1005afee:	f7ff f90f 	bl	1005a210 <llc_cpe_register_cpf>
1005aff2:	200f      	movs	r0, #15
1005aff4:	4621      	mov	r1, r4
1005aff6:	f7ff f90b 	bl	1005a210 <llc_cpe_register_cpf>
1005affa:	bd10      	pop	{r4, pc}

1005affc <LL_cpf_conn_upd>:
1005affc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005affe:	b091      	sub	sp, #68	@ 0x44
1005b000:	930c      	str	r3, [sp, #48]	@ 0x30
1005b002:	4614      	mov	r4, r2
1005b004:	4605      	mov	r5, r0
1005b006:	910b      	str	r1, [sp, #44]	@ 0x2c
1005b008:	f7ff f938 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005b00c:	900a      	str	r0, [sp, #40]	@ 0x28
1005b00e:	462f      	mov	r7, r5
1005b010:	4628      	mov	r0, r5
1005b012:	f7fd fab3 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005b016:	1e61      	subs	r1, r4, #1
1005b018:	2907      	cmp	r1, #7
1005b01a:	d900      	bls.n	1005b01e <LL_cpf_conn_upd+0x22>
1005b01c:	e0d6      	b.n	1005b1cc <LL_cpf_conn_upd+0x1d0>
1005b01e:	4605      	mov	r5, r0
1005b020:	352c      	adds	r5, #44	@ 0x2c
1005b022:	4606      	mov	r6, r0
1005b024:	36fe      	adds	r6, #254	@ 0xfe
1005b026:	46c0      	nop			@ (mov r8, r8)
1005b028:	4479      	add	r1, pc
1005b02a:	7909      	ldrb	r1, [r1, #4]
1005b02c:	0049      	lsls	r1, r1, #1
1005b02e:	448f      	add	pc, r1
1005b030:	1fcd0303 	.word	0x1fcd0303
1005b034:	c87b2ccd 	.word	0xc87b2ccd
1005b038:	7829      	ldrb	r1, [r5, #0]
1005b03a:	2903      	cmp	r1, #3
1005b03c:	d000      	beq.n	1005b040 <LL_cpf_conn_upd+0x44>
1005b03e:	e0c5      	b.n	1005b1cc <LL_cpf_conn_upd+0x1d0>
1005b040:	9009      	str	r0, [sp, #36]	@ 0x24
1005b042:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1005b044:	8963      	ldrh	r3, [r4, #10]
1005b046:	8922      	ldrh	r2, [r4, #8]
1005b048:	88e1      	ldrh	r1, [r4, #6]
1005b04a:	8830      	ldrh	r0, [r6, #0]
1005b04c:	460e      	mov	r6, r1
1005b04e:	2100      	movs	r1, #0
1005b050:	9100      	str	r1, [sp, #0]
1005b052:	9101      	str	r1, [sp, #4]
1005b054:	9002      	str	r0, [sp, #8]
1005b056:	4630      	mov	r0, r6
1005b058:	4631      	mov	r1, r6
1005b05a:	9208      	str	r2, [sp, #32]
1005b05c:	461d      	mov	r5, r3
1005b05e:	f000 f90d 	bl	1005b27c <llc_conn_upd_params_check>
1005b062:	2800      	cmp	r0, #0
1005b064:	d100      	bne.n	1005b068 <LL_cpf_conn_upd+0x6c>
1005b066:	e0b4      	b.n	1005b1d2 <LL_cpf_conn_upd+0x1d6>
1005b068:	4638      	mov	r0, r7
1005b06a:	f7ff f93e 	bl	1005a2ea <llc_cpe_tx_unknown_rsp>
1005b06e:	e0ad      	b.n	1005b1cc <LL_cpf_conn_upd+0x1d0>
1005b070:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005b072:	788b      	ldrb	r3, [r1, #2]
1005b074:	2123      	movs	r1, #35	@ 0x23
1005b076:	2b0f      	cmp	r3, #15
1005b078:	460a      	mov	r2, r1
1005b07a:	d000      	beq.n	1005b07e <LL_cpf_conn_upd+0x82>
1005b07c:	222a      	movs	r2, #42	@ 0x2a
1005b07e:	2b00      	cmp	r3, #0
1005b080:	d000      	beq.n	1005b084 <LL_cpf_conn_upd+0x88>
1005b082:	4611      	mov	r1, r2
1005b084:	f7fe f902 	bl	1005928c <llc_conn_disconnect_link_from_cpf>
1005b088:	e0a0      	b.n	1005b1cc <LL_cpf_conn_upd+0x1d0>
1005b08a:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005b08c:	1c89      	adds	r1, r1, #2
1005b08e:	9107      	str	r1, [sp, #28]
1005b090:	4604      	mov	r4, r0
1005b092:	f7fd fa69 	bl	10058568 <llc_conn_get_cntxt_p>
1005b096:	9008      	str	r0, [sp, #32]
1005b098:	8832      	ldrh	r2, [r6, #0]
1005b09a:	9409      	str	r4, [sp, #36]	@ 0x24
1005b09c:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
1005b09e:	8ae8      	ldrh	r0, [r5, #22]
1005b0a0:	f7fe feb4 	bl	10059e0c <llc_cpe_calculate_instant>
1005b0a4:	4605      	mov	r5, r0
1005b0a6:	2028      	movs	r0, #40	@ 0x28
1005b0a8:	2101      	movs	r1, #1
1005b0aa:	9106      	str	r1, [sp, #24]
1005b0ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005b0ae:	5421      	strb	r1, [r4, r0]
1005b0b0:	8b20      	ldrh	r0, [r4, #24]
1005b0b2:	8b61      	ldrh	r1, [r4, #26]
1005b0b4:	1808      	adds	r0, r1, r0
1005b0b6:	0840      	lsrs	r0, r0, #1
1005b0b8:	9010      	str	r0, [sp, #64]	@ 0x40
1005b0ba:	8ba0      	ldrh	r0, [r4, #28]
1005b0bc:	9004      	str	r0, [sp, #16]
1005b0be:	8be6      	ldrh	r6, [r4, #30]
1005b0c0:	a80d      	add	r0, sp, #52	@ 0x34
1005b0c2:	7107      	strb	r7, [r0, #4]
1005b0c4:	a910      	add	r1, sp, #64	@ 0x40
1005b0c6:	910f      	str	r1, [sp, #60]	@ 0x3c
1005b0c8:	940d      	str	r4, [sp, #52]	@ 0x34
1005b0ca:	f7f6 fedc 	bl	10051e86 <LL_conn_upd_max_tx_time_coded_ucfg>
1005b0ce:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005b0d0:	8320      	strh	r0, [r4, #24]
1005b0d2:	9505      	str	r5, [sp, #20]
1005b0d4:	0429      	lsls	r1, r5, #16
1005b0d6:	1989      	adds	r1, r1, r6
1005b0d8:	4a66      	ldr	r2, [pc, #408]	@ (1005b274 <__arm_cp.0_2>)
1005b0da:	9d04      	ldr	r5, [sp, #16]
1005b0dc:	042b      	lsls	r3, r5, #16
1005b0de:	4303      	orrs	r3, r0
1005b0e0:	9807      	ldr	r0, [sp, #28]
1005b0e2:	c00c      	stmia	r0!, {r2, r3}
1005b0e4:	6001      	str	r1, [r0, #0]
1005b0e6:	4864      	ldr	r0, [pc, #400]	@ (1005b278 <__arm_cp.0_3>)
1005b0e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005b0ea:	8008      	strh	r0, [r1, #0]
1005b0ec:	2003      	movs	r0, #3
1005b0ee:	0240      	lsls	r0, r0, #9
1005b0f0:	0332      	lsls	r2, r6, #12
1005b0f2:	4621      	mov	r1, r4
1005b0f4:	60e5      	str	r5, [r4, #12]
1005b0f6:	6122      	str	r2, [r4, #16]
1005b0f8:	9a06      	ldr	r2, [sp, #24]
1005b0fa:	0252      	lsls	r2, r2, #9
1005b0fc:	c405      	stmia	r4!, {r0, r2}
1005b0fe:	9808      	ldr	r0, [sp, #32]
1005b100:	6800      	ldr	r0, [r0, #0]
1005b102:	8b62      	ldrh	r2, [r4, #26]
1005b104:	0212      	lsls	r2, r2, #8
1005b106:	3c08      	subs	r4, #8
1005b108:	4290      	cmp	r0, r2
1005b10a:	d300      	bcc.n	1005b10e <LL_cpf_conn_upd+0x112>
1005b10c:	4610      	mov	r0, r2
1005b10e:	6148      	str	r0, [r1, #20]
1005b110:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005b112:	0240      	lsls	r0, r0, #9
1005b114:	6088      	str	r0, [r1, #8]
1005b116:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b118:	9a05      	ldr	r2, [sp, #20]
1005b11a:	f7fd ff37 	bl	10058f8c <llc_conn_set_conn_update_params>
1005b11e:	4638      	mov	r0, r7
1005b120:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005b122:	f7ff f8d3 	bl	1005a2cc <llc_cpe_sm_tx_pdu_with_instant>
1005b126:	e051      	b.n	1005b1cc <LL_cpf_conn_upd+0x1d0>
1005b128:	2128      	movs	r1, #40	@ 0x28
1005b12a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005b12c:	5c71      	ldrb	r1, [r6, r1]
1005b12e:	2901      	cmp	r1, #1
1005b130:	463d      	mov	r5, r7
1005b132:	d143      	bne.n	1005b1bc <LL_cpf_conn_upd+0x1c0>
1005b134:	4604      	mov	r4, r0
1005b136:	a80d      	add	r0, sp, #52	@ 0x34
1005b138:	7105      	strb	r5, [r0, #4]
1005b13a:	960d      	str	r6, [sp, #52]	@ 0x34
1005b13c:	f7f6 feaf 	bl	10051e9e <LL_conn_upd_data_length_change_event_ucfg>
1005b140:	484a      	ldr	r0, [pc, #296]	@ (1005b26c <__arm_cp.0_0>)
1005b142:	6800      	ldr	r0, [r0, #0]
1005b144:	213d      	movs	r1, #61	@ 0x3d
1005b146:	5c41      	ldrb	r1, [r0, r1]
1005b148:	0689      	lsls	r1, r1, #26
1005b14a:	d532      	bpl.n	1005b1b2 <LL_cpf_conn_upd+0x1b6>
1005b14c:	303d      	adds	r0, #61	@ 0x3d
1005b14e:	7a40      	ldrb	r0, [r0, #9]
1005b150:	0740      	lsls	r0, r0, #29
1005b152:	d52e      	bpl.n	1005b1b2 <LL_cpf_conn_upd+0x1b6>
1005b154:	8bf0      	ldrh	r0, [r6, #30]
1005b156:	900c      	str	r0, [sp, #48]	@ 0x30
1005b158:	8bb0      	ldrh	r0, [r6, #28]
1005b15a:	9009      	str	r0, [sp, #36]	@ 0x24
1005b15c:	8b37      	ldrh	r7, [r6, #24]
1005b15e:	8f66      	ldrh	r6, [r4, #58]	@ 0x3a
1005b160:	4843      	ldr	r0, [pc, #268]	@ (1005b270 <__arm_cp.0_1>)
1005b162:	6800      	ldr	r0, [r0, #0]
1005b164:	6900      	ldr	r0, [r0, #16]
1005b166:	2180      	movs	r1, #128	@ 0x80
1005b168:	2224      	movs	r2, #36	@ 0x24
1005b16a:	2404      	movs	r4, #4
1005b16c:	4623      	mov	r3, r4
1005b16e:	f7f8 f97b 	bl	10053468 <aci_event_fifo_push_header>
1005b172:	2800      	cmp	r0, #0
1005b174:	d01d      	beq.n	1005b1b2 <LL_cpf_conn_upd+0x1b6>
1005b176:	4601      	mov	r1, r0
1005b178:	300b      	adds	r0, #11
1005b17a:	724e      	strb	r6, [r1, #9]
1005b17c:	7007      	strb	r7, [r0, #0]
1005b17e:	970a      	str	r7, [sp, #40]	@ 0x28
1005b180:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005b182:	734f      	strb	r7, [r1, #13]
1005b184:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1005b186:	7103      	strb	r3, [r0, #4]
1005b188:	2200      	movs	r2, #0
1005b18a:	720a      	strb	r2, [r1, #8]
1005b18c:	2203      	movs	r2, #3
1005b18e:	71ca      	strb	r2, [r1, #7]
1005b190:	220a      	movs	r2, #10
1005b192:	718a      	strb	r2, [r1, #6]
1005b194:	223e      	movs	r2, #62	@ 0x3e
1005b196:	714a      	strb	r2, [r1, #5]
1005b198:	710c      	strb	r4, [r1, #4]
1005b19a:	0a32      	lsrs	r2, r6, #8
1005b19c:	728a      	strb	r2, [r1, #10]
1005b19e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005b1a0:	0a12      	lsrs	r2, r2, #8
1005b1a2:	7042      	strb	r2, [r0, #1]
1005b1a4:	0a3a      	lsrs	r2, r7, #8
1005b1a6:	738a      	strb	r2, [r1, #14]
1005b1a8:	0a1a      	lsrs	r2, r3, #8
1005b1aa:	7142      	strb	r2, [r0, #5]
1005b1ac:	2080      	movs	r0, #128	@ 0x80
1005b1ae:	f7f8 f9f8 	bl	100535a2 <aci_event_fifo_push>
1005b1b2:	2100      	movs	r1, #0
1005b1b4:	4628      	mov	r0, r5
1005b1b6:	460a      	mov	r2, r1
1005b1b8:	f000 febf 	bl	1005bf3a <LLC_update_le_ping_params>
1005b1bc:	2200      	movs	r2, #0
1005b1be:	4628      	mov	r0, r5
1005b1c0:	e001      	b.n	1005b1c6 <LL_cpf_conn_upd+0x1ca>
1005b1c2:	2200      	movs	r2, #0
1005b1c4:	4638      	mov	r0, r7
1005b1c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005b1c8:	f7ff f82a 	bl	1005a220 <llc_cpe_sm_disable>
1005b1cc:	20ff      	movs	r0, #255	@ 0xff
1005b1ce:	b011      	add	sp, #68	@ 0x44
1005b1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005b1d2:	78e0      	ldrb	r0, [r4, #3]
1005b1d4:	2800      	cmp	r0, #0
1005b1d6:	d100      	bne.n	1005b1da <LL_cpf_conn_upd+0x1de>
1005b1d8:	e746      	b.n	1005b068 <LL_cpf_conn_upd+0x6c>
1005b1da:	1e71      	subs	r1, r6, #1
1005b1dc:	2908      	cmp	r1, #8
1005b1de:	d300      	bcc.n	1005b1e2 <LL_cpf_conn_upd+0x1e6>
1005b1e0:	2108      	movs	r1, #8
1005b1e2:	4281      	cmp	r1, r0
1005b1e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005b1e6:	d200      	bcs.n	1005b1ea <LL_cpf_conn_upd+0x1ee>
1005b1e8:	e73e      	b.n	1005b068 <LL_cpf_conn_upd+0x6c>
1005b1ea:	888a      	ldrh	r2, [r1, #4]
1005b1ec:	42b2      	cmp	r2, r6
1005b1ee:	d900      	bls.n	1005b1f2 <LL_cpf_conn_upd+0x1f6>
1005b1f0:	e73a      	b.n	1005b068 <LL_cpf_conn_upd+0x6c>
1005b1f2:	4633      	mov	r3, r6
1005b1f4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005b1f6:	4629      	mov	r1, r5
1005b1f8:	83f5      	strh	r5, [r6, #30]
1005b1fa:	9d08      	ldr	r5, [sp, #32]
1005b1fc:	83b5      	strh	r5, [r6, #28]
1005b1fe:	8333      	strh	r3, [r6, #24]
1005b200:	8373      	strh	r3, [r6, #26]
1005b202:	0309      	lsls	r1, r1, #12
1005b204:	461c      	mov	r4, r3
1005b206:	025b      	lsls	r3, r3, #9
1005b208:	0252      	lsls	r2, r2, #9
1005b20a:	0240      	lsls	r0, r0, #9
1005b20c:	c62d      	stmia	r6!, {r0, r2, r3, r5}
1005b20e:	6031      	str	r1, [r6, #0]
1005b210:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005b212:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
1005b214:	2001      	movs	r0, #1
1005b216:	429a      	cmp	r2, r3
1005b218:	d106      	bne.n	1005b228 <LL_cpf_conn_upd+0x22c>
1005b21a:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
1005b21c:	4291      	cmp	r1, r2
1005b21e:	d103      	bne.n	1005b228 <LL_cpf_conn_upd+0x22c>
1005b220:	8f30      	ldrh	r0, [r6, #56]	@ 0x38
1005b222:	1a28      	subs	r0, r5, r0
1005b224:	1e41      	subs	r1, r0, #1
1005b226:	4188      	sbcs	r0, r1
1005b228:	2128      	movs	r1, #40	@ 0x28
1005b22a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1005b22c:	5468      	strb	r0, [r5, r1]
1005b22e:	9410      	str	r4, [sp, #64]	@ 0x40
1005b230:	a80d      	add	r0, sp, #52	@ 0x34
1005b232:	7107      	strb	r7, [r0, #4]
1005b234:	a910      	add	r1, sp, #64	@ 0x40
1005b236:	910f      	str	r1, [sp, #60]	@ 0x3c
1005b238:	950d      	str	r5, [sp, #52]	@ 0x34
1005b23a:	f7f6 fe24 	bl	10051e86 <LL_conn_upd_max_tx_time_coded_ucfg>
1005b23e:	2202      	movs	r2, #2
1005b240:	4638      	mov	r0, r7
1005b242:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
1005b244:	4621      	mov	r1, r4
1005b246:	f7fe fe7b 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005b24a:	2200      	movs	r2, #0
1005b24c:	2301      	movs	r3, #1
1005b24e:	4638      	mov	r0, r7
1005b250:	4621      	mov	r1, r4
1005b252:	f7fe fff5 	bl	1005a240 <llc_cpe_sm_enable>
1005b256:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005b258:	8982      	ldrh	r2, [r0, #12]
1005b25a:	4630      	mov	r0, r6
1005b25c:	4629      	mov	r1, r5
1005b25e:	f7fd fe95 	bl	10058f8c <llc_conn_set_conn_update_params>
1005b262:	4638      	mov	r0, r7
1005b264:	4621      	mov	r1, r4
1005b266:	f7ff f811 	bl	1005a28c <llc_cpe_sm_rx_pdu_with_instant>
1005b26a:	e7af      	b.n	1005b1cc <LL_cpf_conn_upd+0x1d0>

1005b26c <__arm_cp.0_0>:
1005b26c:	20001174 	.word	0x20001174

1005b270 <__arm_cp.0_1>:
1005b270:	20001124 	.word	0x20001124

1005b274 <__arm_cp.0_2>:
1005b274:	00010300 	.word	0x00010300

1005b278 <__arm_cp.0_3>:
1005b278:	00000c03 	.word	0x00000c03

1005b27c <llc_conn_upd_params_check>:
1005b27c:	b570      	push	{r4, r5, r6, lr}
1005b27e:	4604      	mov	r4, r0
1005b280:	2012      	movs	r0, #18
1005b282:	2c06      	cmp	r4, #6
1005b284:	d31c      	bcc.n	1005b2c0 <llc_conn_upd_params_check+0x44>
1005b286:	2519      	movs	r5, #25
1005b288:	01ed      	lsls	r5, r5, #7
1005b28a:	42ac      	cmp	r4, r5
1005b28c:	d818      	bhi.n	1005b2c0 <llc_conn_upd_params_check+0x44>
1005b28e:	2906      	cmp	r1, #6
1005b290:	d316      	bcc.n	1005b2c0 <llc_conn_upd_params_check+0x44>
1005b292:	42a9      	cmp	r1, r5
1005b294:	d814      	bhi.n	1005b2c0 <llc_conn_upd_params_check+0x44>
1005b296:	42a1      	cmp	r1, r4
1005b298:	d312      	bcc.n	1005b2c0 <llc_conn_upd_params_check+0x44>
1005b29a:	0894      	lsrs	r4, r2, #2
1005b29c:	2c7c      	cmp	r4, #124	@ 0x7c
1005b29e:	d80f      	bhi.n	1005b2c0 <llc_conn_upd_params_check+0x44>
1005b2a0:	9c05      	ldr	r4, [sp, #20]
1005b2a2:	9e04      	ldr	r6, [sp, #16]
1005b2a4:	42b4      	cmp	r4, r6
1005b2a6:	d30b      	bcc.n	1005b2c0 <llc_conn_upd_params_check+0x44>
1005b2a8:	2b0a      	cmp	r3, #10
1005b2aa:	d309      	bcc.n	1005b2c0 <llc_conn_upd_params_check+0x44>
1005b2ac:	42ab      	cmp	r3, r5
1005b2ae:	d807      	bhi.n	1005b2c0 <llc_conn_upd_params_check+0x44>
1005b2b0:	9806      	ldr	r0, [sp, #24]
1005b2b2:	1c52      	adds	r2, r2, #1
1005b2b4:	434a      	muls	r2, r1
1005b2b6:	4342      	muls	r2, r0
1005b2b8:	0890      	lsrs	r0, r2, #2
1005b2ba:	4283      	cmp	r3, r0
1005b2bc:	d801      	bhi.n	1005b2c2 <llc_conn_upd_params_check+0x46>
1005b2be:	2012      	movs	r0, #18
1005b2c0:	bd70      	pop	{r4, r5, r6, pc}
1005b2c2:	2000      	movs	r0, #0
1005b2c4:	bd70      	pop	{r4, r5, r6, pc}
	...

1005b2c8 <LL_conn_upd_max_tx_time_coded>:
1005b2c8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005b2ca:	4606      	mov	r6, r0
1005b2cc:	6887      	ldr	r7, [r0, #8]
1005b2ce:	7904      	ldrb	r4, [r0, #4]
1005b2d0:	4620      	mov	r0, r4
1005b2d2:	f7fd f953 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005b2d6:	4605      	mov	r5, r0
1005b2d8:	4620      	mov	r0, r4
1005b2da:	f7fd f983 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005b2de:	2800      	cmp	r0, #0
1005b2e0:	d044      	beq.n	1005b36c <LL_conn_upd_max_tx_time_coded+0xa4>
1005b2e2:	7980      	ldrb	r0, [r0, #6]
1005b2e4:	2804      	cmp	r0, #4
1005b2e6:	d141      	bne.n	1005b36c <LL_conn_upd_max_tx_time_coded+0xa4>
1005b2e8:	0278      	lsls	r0, r7, #9
1005b2ea:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
1005b2ec:	4281      	cmp	r1, r0
1005b2ee:	d03d      	beq.n	1005b36c <LL_conn_upd_max_tx_time_coded+0xa4>
1005b2f0:	4628      	mov	r0, r5
1005b2f2:	302c      	adds	r0, #44	@ 0x2c
1005b2f4:	9502      	str	r5, [sp, #8]
1005b2f6:	3592      	adds	r5, #146	@ 0x92
1005b2f8:	6839      	ldr	r1, [r7, #0]
1005b2fa:	223d      	movs	r2, #61	@ 0x3d
1005b2fc:	0112      	lsls	r2, r2, #4
1005b2fe:	886b      	ldrh	r3, [r5, #2]
1005b300:	019b      	lsls	r3, r3, #6
1005b302:	189a      	adds	r2, r3, r2
1005b304:	88eb      	ldrh	r3, [r5, #6]
1005b306:	429a      	cmp	r2, r3
1005b308:	d800      	bhi.n	1005b30c <LL_conn_upd_max_tx_time_coded+0x44>
1005b30a:	4613      	mov	r3, r2
1005b30c:	4a18      	ldr	r2, [pc, #96]	@ (1005b370 <__arm_cp.3_0>)
1005b30e:	434a      	muls	r2, r1
1005b310:	4611      	mov	r1, r2
1005b312:	6836      	ldr	r6, [r6, #0]
1005b314:	7800      	ldrb	r0, [r0, #0]
1005b316:	2802      	cmp	r0, #2
1005b318:	d10b      	bne.n	1005b332 <LL_conn_upd_max_tx_time_coded+0x6a>
1005b31a:	4816      	ldr	r0, [pc, #88]	@ (1005b374 <__arm_cp.3_1>)
1005b31c:	1818      	adds	r0, r3, r0
1005b31e:	4281      	cmp	r1, r0
1005b320:	d207      	bcs.n	1005b332 <LL_conn_upd_max_tx_time_coded+0x6a>
1005b322:	9101      	str	r1, [sp, #4]
1005b324:	4912      	ldr	r1, [pc, #72]	@ (1005b370 <__arm_cp.3_0>)
1005b326:	9300      	str	r3, [sp, #0]
1005b328:	f7e4 ff9e 	bl	10040268 <__udivsi3>
1005b32c:	9b00      	ldr	r3, [sp, #0]
1005b32e:	9901      	ldr	r1, [sp, #4]
1005b330:	6038      	str	r0, [r7, #0]
1005b332:	8828      	ldrh	r0, [r5, #0]
1005b334:	84f0      	strh	r0, [r6, #38]	@ 0x26
1005b336:	204b      	movs	r0, #75	@ 0x4b
1005b338:	0080      	lsls	r0, r0, #2
1005b33a:	1818      	adds	r0, r3, r0
1005b33c:	1a09      	subs	r1, r1, r0
1005b33e:	d200      	bcs.n	1005b342 <LL_conn_upd_max_tx_time_coded+0x7a>
1005b340:	2100      	movs	r1, #0
1005b342:	8968      	ldrh	r0, [r5, #10]
1005b344:	8a2a      	ldrh	r2, [r5, #16]
1005b346:	4290      	cmp	r0, r2
1005b348:	d300      	bcc.n	1005b34c <LL_conn_upd_max_tx_time_coded+0x84>
1005b34a:	4610      	mov	r0, r2
1005b34c:	4281      	cmp	r1, r0
1005b34e:	9b02      	ldr	r3, [sp, #8]
1005b350:	d800      	bhi.n	1005b354 <LL_conn_upd_max_tx_time_coded+0x8c>
1005b352:	4608      	mov	r0, r1
1005b354:	b282      	uxth	r2, r0
1005b356:	21a9      	movs	r1, #169	@ 0xa9
1005b358:	0109      	lsls	r1, r1, #4
1005b35a:	428a      	cmp	r2, r1
1005b35c:	d800      	bhi.n	1005b360 <LL_conn_upd_max_tx_time_coded+0x98>
1005b35e:	4608      	mov	r0, r1
1005b360:	84b0      	strh	r0, [r6, #36]	@ 0x24
1005b362:	2101      	movs	r1, #1
1005b364:	4620      	mov	r0, r4
1005b366:	4632      	mov	r2, r6
1005b368:	f000 f806 	bl	1005b378 <LL_adjust_max_tx_data_frag_coded>
1005b36c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005b36e:	46c0      	nop			@ (mov r8, r8)

1005b370 <__arm_cp.3_0>:
1005b370:	000004e2 	.word	0x000004e2

1005b374 <__arm_cp.3_1>:
1005b374:	00000bbc 	.word	0x00000bbc

1005b378 <LL_adjust_max_tx_data_frag_coded>:
1005b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b37a:	461c      	mov	r4, r3
1005b37c:	4615      	mov	r5, r2
1005b37e:	460e      	mov	r6, r1
1005b380:	461f      	mov	r7, r3
1005b382:	3790      	adds	r7, #144	@ 0x90
1005b384:	f7fd f92e 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005b388:	2800      	cmp	r0, #0
1005b38a:	d002      	beq.n	1005b392 <LL_adjust_max_tx_data_frag_coded+0x1a>
1005b38c:	8800      	ldrh	r0, [r0, #0]
1005b38e:	2802      	cmp	r0, #2
1005b390:	d001      	beq.n	1005b396 <LL_adjust_max_tx_data_frag_coded+0x1e>
1005b392:	2001      	movs	r0, #1
1005b394:	e000      	b.n	1005b398 <LL_adjust_max_tx_data_frag_coded+0x20>
1005b396:	2003      	movs	r0, #3
1005b398:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
1005b39a:	4a0b      	ldr	r2, [pc, #44]	@ (1005b3c8 <__arm_cp.4_0>)
1005b39c:	1889      	adds	r1, r1, r2
1005b39e:	40c1      	lsrs	r1, r0
1005b3a0:	480a      	ldr	r0, [pc, #40]	@ (1005b3cc <__arm_cp.4_1>)
1005b3a2:	1808      	adds	r0, r1, r0
1005b3a4:	08c0      	lsrs	r0, r0, #3
1005b3a6:	b281      	uxth	r1, r0
1005b3a8:	8838      	ldrh	r0, [r7, #0]
1005b3aa:	4288      	cmp	r0, r1
1005b3ac:	d300      	bcc.n	1005b3b0 <LL_adjust_max_tx_data_frag_coded+0x38>
1005b3ae:	4608      	mov	r0, r1
1005b3b0:	2e00      	cmp	r6, #0
1005b3b2:	d002      	beq.n	1005b3ba <LL_adjust_max_tx_data_frag_coded+0x42>
1005b3b4:	8ce9      	ldrh	r1, [r5, #38]	@ 0x26
1005b3b6:	4281      	cmp	r1, r0
1005b3b8:	d300      	bcc.n	1005b3bc <LL_adjust_max_tx_data_frag_coded+0x44>
1005b3ba:	4601      	mov	r1, r0
1005b3bc:	8079      	strh	r1, [r7, #2]
1005b3be:	4620      	mov	r0, r4
1005b3c0:	f7fd fb8e 	bl	10058ae0 <llc_conn_guard_time_for_close_conn_event>
1005b3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005b3c6:	46c0      	nop			@ (mov r8, r8)

1005b3c8 <__arm_cp.4_0>:
1005b3c8:	fffffe88 	.word	0xfffffe88

1005b3cc <__arm_cp.4_1>:
1005b3cc:	0007ffb5 	.word	0x0007ffb5

1005b3d0 <LL_conn_upd_data_length_change_event>:
1005b3d0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005b3d2:	6805      	ldr	r5, [r0, #0]
1005b3d4:	7906      	ldrb	r6, [r0, #4]
1005b3d6:	4630      	mov	r0, r6
1005b3d8:	f7fd f8d0 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005b3dc:	4607      	mov	r7, r0
1005b3de:	4630      	mov	r0, r6
1005b3e0:	f7fd f900 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005b3e4:	2800      	cmp	r0, #0
1005b3e6:	d047      	beq.n	1005b478 <LL_conn_upd_data_length_change_event+0xa8>
1005b3e8:	7980      	ldrb	r0, [r0, #6]
1005b3ea:	2804      	cmp	r0, #4
1005b3ec:	d144      	bne.n	1005b478 <LL_conn_upd_data_length_change_event+0xa8>
1005b3ee:	463c      	mov	r4, r7
1005b3f0:	3490      	adds	r4, #144	@ 0x90
1005b3f2:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
1005b3f4:	88e1      	ldrh	r1, [r4, #6]
1005b3f6:	4281      	cmp	r1, r0
1005b3f8:	d03e      	beq.n	1005b478 <LL_conn_upd_data_length_change_event+0xa8>
1005b3fa:	80e0      	strh	r0, [r4, #6]
1005b3fc:	2100      	movs	r1, #0
1005b3fe:	4630      	mov	r0, r6
1005b400:	462a      	mov	r2, r5
1005b402:	463b      	mov	r3, r7
1005b404:	f7ff ffb8 	bl	1005b378 <LL_adjust_max_tx_data_frag_coded>
1005b408:	481c      	ldr	r0, [pc, #112]	@ (1005b47c <__arm_cp.6_0>)
1005b40a:	6800      	ldr	r0, [r0, #0]
1005b40c:	213d      	movs	r1, #61	@ 0x3d
1005b40e:	5c41      	ldrb	r1, [r0, r1]
1005b410:	0689      	lsls	r1, r1, #26
1005b412:	d531      	bpl.n	1005b478 <LL_conn_upd_data_length_change_event+0xa8>
1005b414:	303d      	adds	r0, #61	@ 0x3d
1005b416:	7a40      	ldrb	r0, [r0, #9]
1005b418:	0640      	lsls	r0, r0, #25
1005b41a:	d52d      	bpl.n	1005b478 <LL_conn_upd_data_length_change_event+0xa8>
1005b41c:	8926      	ldrh	r6, [r4, #8]
1005b41e:	88a5      	ldrh	r5, [r4, #4]
1005b420:	88e0      	ldrh	r0, [r4, #6]
1005b422:	9001      	str	r0, [sp, #4]
1005b424:	8820      	ldrh	r0, [r4, #0]
1005b426:	9002      	str	r0, [sp, #8]
1005b428:	8f7f      	ldrh	r7, [r7, #58]	@ 0x3a
1005b42a:	4815      	ldr	r0, [pc, #84]	@ (1005b480 <__arm_cp.6_1>)
1005b42c:	6800      	ldr	r0, [r0, #0]
1005b42e:	6900      	ldr	r0, [r0, #16]
1005b430:	2180      	movs	r1, #128	@ 0x80
1005b432:	2226      	movs	r2, #38	@ 0x26
1005b434:	2404      	movs	r4, #4
1005b436:	4623      	mov	r3, r4
1005b438:	f7f8 f816 	bl	10053468 <aci_event_fifo_push_header>
1005b43c:	2800      	cmp	r0, #0
1005b43e:	d01b      	beq.n	1005b478 <LL_conn_upd_data_length_change_event+0xa8>
1005b440:	4601      	mov	r1, r0
1005b442:	7406      	strb	r6, [r0, #16]
1005b444:	7385      	strb	r5, [r0, #14]
1005b446:	9b01      	ldr	r3, [sp, #4]
1005b448:	7303      	strb	r3, [r0, #12]
1005b44a:	9a02      	ldr	r2, [sp, #8]
1005b44c:	7282      	strb	r2, [r0, #10]
1005b44e:	7207      	strb	r7, [r0, #8]
1005b450:	2007      	movs	r0, #7
1005b452:	71c8      	strb	r0, [r1, #7]
1005b454:	200b      	movs	r0, #11
1005b456:	7188      	strb	r0, [r1, #6]
1005b458:	203e      	movs	r0, #62	@ 0x3e
1005b45a:	7148      	strb	r0, [r1, #5]
1005b45c:	710c      	strb	r4, [r1, #4]
1005b45e:	0a30      	lsrs	r0, r6, #8
1005b460:	7448      	strb	r0, [r1, #17]
1005b462:	0a28      	lsrs	r0, r5, #8
1005b464:	73c8      	strb	r0, [r1, #15]
1005b466:	0a18      	lsrs	r0, r3, #8
1005b468:	7348      	strb	r0, [r1, #13]
1005b46a:	0a10      	lsrs	r0, r2, #8
1005b46c:	72c8      	strb	r0, [r1, #11]
1005b46e:	0a38      	lsrs	r0, r7, #8
1005b470:	7248      	strb	r0, [r1, #9]
1005b472:	2080      	movs	r0, #128	@ 0x80
1005b474:	f7f8 f895 	bl	100535a2 <aci_event_fifo_push>
1005b478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005b47a:	46c0      	nop			@ (mov r8, r8)

1005b47c <__arm_cp.6_0>:
1005b47c:	20001174 	.word	0x20001174

1005b480 <__arm_cp.6_1>:
1005b480:	20001124 	.word	0x20001124

1005b484 <llc_cte_register_cpf_ucfg_weak>:
1005b484:	b580      	push	{r7, lr}
1005b486:	200a      	movs	r0, #10
1005b488:	2100      	movs	r1, #0
1005b48a:	f7fe fec1 	bl	1005a210 <llc_cpe_register_cpf>
1005b48e:	bd80      	pop	{r7, pc}

1005b490 <llc_conn_init_cte_ctxt_ucfg_weak>:
1005b490:	4770      	bx	lr

1005b492 <LLC_cte_request_procedure_ucfg_weak>:
1005b492:	2000      	movs	r0, #0
1005b494:	4770      	bx	lr

1005b496 <LLC_connection_cte_response_pause_resume_ucfg_weak>:
1005b496:	4770      	bx	lr

1005b498 <LLC_connection_cte_response_disable_ucfg_weak>:
1005b498:	4770      	bx	lr

1005b49a <llc_cte_process_rx_cte_ucfg_weak>:
1005b49a:	4770      	bx	lr

1005b49c <LL_encryption>:
1005b49c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b49e:	b08d      	sub	sp, #52	@ 0x34
1005b4a0:	9309      	str	r3, [sp, #36]	@ 0x24
1005b4a2:	4616      	mov	r6, r2
1005b4a4:	460f      	mov	r7, r1
1005b4a6:	4604      	mov	r4, r0
1005b4a8:	f7fe fee8 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005b4ac:	4605      	mov	r5, r0
1005b4ae:	9408      	str	r4, [sp, #32]
1005b4b0:	4620      	mov	r0, r4
1005b4b2:	f7fd f863 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005b4b6:	4603      	mov	r3, r0
1005b4b8:	2e05      	cmp	r6, #5
1005b4ba:	d107      	bne.n	1005b4cc <LL_encryption+0x30>
1005b4bc:	213d      	movs	r1, #61	@ 0x3d
1005b4be:	4618      	mov	r0, r3
1005b4c0:	f7fd fee4 	bl	1005928c <llc_conn_disconnect_link_from_cpf>
1005b4c4:	26ff      	movs	r6, #255	@ 0xff
1005b4c6:	4630      	mov	r0, r6
1005b4c8:	b00d      	add	sp, #52	@ 0x34
1005b4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005b4cc:	4604      	mov	r4, r0
1005b4ce:	9507      	str	r5, [sp, #28]
1005b4d0:	462a      	mov	r2, r5
1005b4d2:	3228      	adds	r2, #40	@ 0x28
1005b4d4:	4605      	mov	r5, r0
1005b4d6:	352c      	adds	r5, #44	@ 0x2c
1005b4d8:	7828      	ldrb	r0, [r5, #0]
1005b4da:	2802      	cmp	r0, #2
1005b4dc:	d12a      	bne.n	1005b534 <LL_encryption+0x98>
1005b4de:	7810      	ldrb	r0, [r2, #0]
1005b4e0:	1e40      	subs	r0, r0, #1
1005b4e2:	26ff      	movs	r6, #255	@ 0xff
1005b4e4:	280b      	cmp	r0, #11
1005b4e6:	d8ee      	bhi.n	1005b4c6 <LL_encryption+0x2a>
1005b4e8:	0040      	lsls	r0, r0, #1
1005b4ea:	46c0      	nop			@ (mov r8, r8)
1005b4ec:	4478      	add	r0, pc
1005b4ee:	8880      	ldrh	r0, [r0, #4]
1005b4f0:	0040      	lsls	r0, r0, #1
1005b4f2:	4487      	add	pc, r0
1005b4f4:	00a2000b 	.word	0x00a2000b
1005b4f8:	00c000a5 	.word	0x00c000a5
1005b4fc:	00ce00ca 	.word	0x00ce00ca
1005b500:	012c0128 	.word	0x012c0128
1005b504:	01640154 	.word	0x01640154
1005b508:	01760173 	.word	0x01760173
1005b50c:	200a      	movs	r0, #10
1005b50e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b510:	7088      	strb	r0, [r1, #2]
1005b512:	26ff      	movs	r6, #255	@ 0xff
1005b514:	4630      	mov	r0, r6
1005b516:	3004      	adds	r0, #4
1005b518:	8008      	strh	r0, [r1, #0]
1005b51a:	2101      	movs	r1, #1
1005b51c:	9808      	ldr	r0, [sp, #32]
1005b51e:	4615      	mov	r5, r2
1005b520:	460a      	mov	r2, r1
1005b522:	461c      	mov	r4, r3
1005b524:	f7fe fd0c 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005b528:	4620      	mov	r0, r4
1005b52a:	f7fd fd65 	bl	10058ff8 <llc_conn_set_tx_acl_blocked>
1005b52e:	2002      	movs	r0, #2
1005b530:	7028      	strb	r0, [r5, #0]
1005b532:	e7c8      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b534:	2e01      	cmp	r6, #1
1005b536:	d12e      	bne.n	1005b596 <LL_encryption+0xfa>
1005b538:	2000      	movs	r0, #0
1005b53a:	7050      	strb	r0, [r2, #1]
1005b53c:	9206      	str	r2, [sp, #24]
1005b53e:	2500      	movs	r5, #0
1005b540:	461f      	mov	r7, r3
1005b542:	4618      	mov	r0, r3
1005b544:	4629      	mov	r1, r5
1005b546:	f7fd faa7 	bl	10058a98 <llc_conn_get_enc_on>
1005b54a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b54c:	7889      	ldrb	r1, [r1, #2]
1005b54e:	2903      	cmp	r1, #3
1005b550:	d155      	bne.n	1005b5fe <LL_encryption+0x162>
1005b552:	2800      	cmp	r0, #0
1005b554:	463b      	mov	r3, r7
1005b556:	9e07      	ldr	r6, [sp, #28]
1005b558:	d1b0      	bne.n	1005b4bc <LL_encryption+0x20>
1005b55a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005b55c:	1ce0      	adds	r0, r4, #3
1005b55e:	4631      	mov	r1, r6
1005b560:	3130      	adds	r1, #48	@ 0x30
1005b562:	2208      	movs	r2, #8
1005b564:	9204      	str	r2, [sp, #16]
1005b566:	4b18      	ldr	r3, [pc, #96]	@ (1005b5c8 <LL_encryption+0x12c>)
1005b568:	4798      	blx	r3
1005b56a:	4620      	mov	r0, r4
1005b56c:	300b      	adds	r0, #11
1005b56e:	4631      	mov	r1, r6
1005b570:	312e      	adds	r1, #46	@ 0x2e
1005b572:	2202      	movs	r2, #2
1005b574:	4b14      	ldr	r3, [pc, #80]	@ (1005b5c8 <LL_encryption+0x12c>)
1005b576:	4798      	blx	r3
1005b578:	4620      	mov	r0, r4
1005b57a:	300d      	adds	r0, #13
1005b57c:	4631      	mov	r1, r6
1005b57e:	9a04      	ldr	r2, [sp, #16]
1005b580:	4b11      	ldr	r3, [pc, #68]	@ (1005b5c8 <LL_encryption+0x12c>)
1005b582:	4798      	blx	r3
1005b584:	3415      	adds	r4, #21
1005b586:	3620      	adds	r6, #32
1005b588:	2204      	movs	r2, #4
1005b58a:	4620      	mov	r0, r4
1005b58c:	4631      	mov	r1, r6
1005b58e:	4b0e      	ldr	r3, [pc, #56]	@ (1005b5c8 <LL_encryption+0x12c>)
1005b590:	4798      	blx	r3
1005b592:	2005      	movs	r0, #5
1005b594:	e039      	b.n	1005b60a <LL_encryption+0x16e>
1005b596:	7850      	ldrb	r0, [r2, #1]
1005b598:	26ff      	movs	r6, #255	@ 0xff
1005b59a:	280d      	cmp	r0, #13
1005b59c:	d893      	bhi.n	1005b4c6 <LL_encryption+0x2a>
1005b59e:	34ec      	adds	r4, #236	@ 0xec
1005b5a0:	0040      	lsls	r0, r0, #1
1005b5a2:	46c0      	nop			@ (mov r8, r8)
1005b5a4:	4478      	add	r0, pc
1005b5a6:	8880      	ldrh	r0, [r0, #4]
1005b5a8:	0040      	lsls	r0, r0, #1
1005b5aa:	4487      	add	pc, r0
1005b5ac:	0010000f 	.word	0x0010000f
1005b5b0:	0165015d 	.word	0x0165015d
1005b5b4:	0192016e 	.word	0x0192016e
1005b5b8:	021c01d2 	.word	0x021c01d2
1005b5bc:	023c01e5 	.word	0x023c01e5
1005b5c0:	01f901e9 	.word	0x01f901e9
1005b5c4:	02300210 	.word	0x02300210
1005b5c8:	100623ad 	.word	0x100623ad
1005b5cc:	e7b6      	b.n	1005b53c <LL_encryption+0xa0>
1005b5ce:	200b      	movs	r0, #11
1005b5d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b5d2:	7088      	strb	r0, [r1, #2]
1005b5d4:	2002      	movs	r0, #2
1005b5d6:	7050      	strb	r0, [r2, #1]
1005b5d8:	26ff      	movs	r6, #255	@ 0xff
1005b5da:	4630      	mov	r0, r6
1005b5dc:	3004      	adds	r0, #4
1005b5de:	8008      	strh	r0, [r1, #0]
1005b5e0:	2400      	movs	r4, #0
1005b5e2:	2201      	movs	r2, #1
1005b5e4:	9808      	ldr	r0, [sp, #32]
1005b5e6:	4621      	mov	r1, r4
1005b5e8:	461d      	mov	r5, r3
1005b5ea:	f7fe fca9 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005b5ee:	4628      	mov	r0, r5
1005b5f0:	f7fd fd02 	bl	10058ff8 <llc_conn_set_tx_acl_blocked>
1005b5f4:	4628      	mov	r0, r5
1005b5f6:	4621      	mov	r1, r4
1005b5f8:	f7fd fced 	bl	10058fd6 <llc_conn_set_stop_enc>
1005b5fc:	e763      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b5fe:	2801      	cmp	r0, #1
1005b600:	463b      	mov	r3, r7
1005b602:	d000      	beq.n	1005b606 <LL_encryption+0x16a>
1005b604:	e75a      	b.n	1005b4bc <LL_encryption+0x20>
1005b606:	2501      	movs	r5, #1
1005b608:	4628      	mov	r0, r5
1005b60a:	9e08      	ldr	r6, [sp, #32]
1005b60c:	9c06      	ldr	r4, [sp, #24]
1005b60e:	7060      	strb	r0, [r4, #1]
1005b610:	7125      	strb	r5, [r4, #4]
1005b612:	2400      	movs	r4, #0
1005b614:	4630      	mov	r0, r6
1005b616:	4621      	mov	r1, r4
1005b618:	4622      	mov	r2, r4
1005b61a:	f7fe fc91 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005b61e:	4638      	mov	r0, r7
1005b620:	f7fd fcc0 	bl	10058fa4 <llc_conn_set_rx_acl_blocked>
1005b624:	4630      	mov	r0, r6
1005b626:	4621      	mov	r1, r4
1005b628:	f7fe fe40 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005b62c:	2201      	movs	r2, #1
1005b62e:	4630      	mov	r0, r6
1005b630:	4621      	mov	r1, r4
1005b632:	4623      	mov	r3, r4
1005b634:	f7fe fe04 	bl	1005a240 <llc_cpe_sm_enable>
1005b638:	e744      	b.n	1005b4c4 <LL_encryption+0x28>
1005b63a:	2003      	movs	r0, #3
1005b63c:	7010      	strb	r0, [r2, #0]
1005b63e:	e119      	b.n	1005b874 <LL_encryption+0x3d8>
1005b640:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b642:	7880      	ldrb	r0, [r0, #2]
1005b644:	280b      	cmp	r0, #11
1005b646:	d000      	beq.n	1005b64a <LL_encryption+0x1ae>
1005b648:	e738      	b.n	1005b4bc <LL_encryption+0x20>
1005b64a:	2004      	movs	r0, #4
1005b64c:	7010      	strb	r0, [r2, #0]
1005b64e:	2102      	movs	r1, #2
1005b650:	4618      	mov	r0, r3
1005b652:	461d      	mov	r5, r3
1005b654:	f7fd fcbf 	bl	10058fd6 <llc_conn_set_stop_enc>
1005b658:	2401      	movs	r4, #1
1005b65a:	9f08      	ldr	r7, [sp, #32]
1005b65c:	4638      	mov	r0, r7
1005b65e:	4621      	mov	r1, r4
1005b660:	f7fe fe24 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005b664:	2200      	movs	r2, #0
1005b666:	4638      	mov	r0, r7
1005b668:	4621      	mov	r1, r4
1005b66a:	f7fe fc69 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005b66e:	4628      	mov	r0, r5
1005b670:	f7fd fc98 	bl	10058fa4 <llc_conn_set_rx_acl_blocked>
1005b674:	e727      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b676:	200b      	movs	r0, #11
1005b678:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b67a:	7088      	strb	r0, [r1, #2]
1005b67c:	2005      	movs	r0, #5
1005b67e:	7010      	strb	r0, [r2, #0]
1005b680:	26ff      	movs	r6, #255	@ 0xff
1005b682:	4630      	mov	r0, r6
1005b684:	3004      	adds	r0, #4
1005b686:	8008      	strh	r0, [r1, #0]
1005b688:	e71d      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b68a:	2006      	movs	r0, #6
1005b68c:	7010      	strb	r0, [r2, #0]
1005b68e:	2101      	movs	r1, #1
1005b690:	e1d1      	b.n	1005ba36 <LL_encryption+0x59a>
1005b692:	9604      	str	r6, [sp, #16]
1005b694:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005b696:	1cbe      	adds	r6, r7, #2
1005b698:	2500      	movs	r5, #0
1005b69a:	49f9      	ldr	r1, [pc, #996]	@ (1005ba80 <LL_encryption+0x5e4>)
1005b69c:	4628      	mov	r0, r5
1005b69e:	9305      	str	r3, [sp, #20]
1005b6a0:	9206      	str	r2, [sp, #24]
1005b6a2:	4788      	blx	r1
1005b6a4:	4604      	mov	r4, r0
1005b6a6:	900b      	str	r0, [sp, #44]	@ 0x2c
1005b6a8:	4628      	mov	r0, r5
1005b6aa:	49f5      	ldr	r1, [pc, #980]	@ (1005ba80 <LL_encryption+0x5e4>)
1005b6ac:	4788      	blx	r1
1005b6ae:	900c      	str	r0, [sp, #48]	@ 0x30
1005b6b0:	4628      	mov	r0, r5
1005b6b2:	49f3      	ldr	r1, [pc, #972]	@ (1005ba80 <LL_encryption+0x5e4>)
1005b6b4:	4788      	blx	r1
1005b6b6:	9003      	str	r0, [sp, #12]
1005b6b8:	49f2      	ldr	r1, [pc, #968]	@ (1005ba84 <__arm_cp.0_10>)
1005b6ba:	8039      	strh	r1, [r7, #0]
1005b6bc:	900a      	str	r0, [sp, #40]	@ 0x28
1005b6be:	9d06      	ldr	r5, [sp, #24]
1005b6c0:	7a28      	ldrb	r0, [r5, #8]
1005b6c2:	0200      	lsls	r0, r0, #8
1005b6c4:	7a69      	ldrb	r1, [r5, #9]
1005b6c6:	0409      	lsls	r1, r1, #16
1005b6c8:	1840      	adds	r0, r0, r1
1005b6ca:	7aa9      	ldrb	r1, [r5, #10]
1005b6cc:	0609      	lsls	r1, r1, #24
1005b6ce:	1840      	adds	r0, r0, r1
1005b6d0:	1cc0      	adds	r0, r0, #3
1005b6d2:	6030      	str	r0, [r6, #0]
1005b6d4:	9f07      	ldr	r7, [sp, #28]
1005b6d6:	4638      	mov	r0, r7
1005b6d8:	3033      	adds	r0, #51	@ 0x33
1005b6da:	f000 fa11 	bl	1005bb00 <le4ByteToInt32>
1005b6de:	6070      	str	r0, [r6, #4]
1005b6e0:	0620      	lsls	r0, r4, #24
1005b6e2:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
1005b6e4:	0209      	lsls	r1, r1, #8
1005b6e6:	1808      	adds	r0, r1, r0
1005b6e8:	7be9      	ldrb	r1, [r5, #15]
1005b6ea:	1840      	adds	r0, r0, r1
1005b6ec:	60b0      	str	r0, [r6, #8]
1005b6ee:	ac0b      	add	r4, sp, #44	@ 0x2c
1005b6f0:	1c60      	adds	r0, r4, #1
1005b6f2:	f000 fa05 	bl	1005bb00 <le4ByteToInt32>
1005b6f6:	60f0      	str	r0, [r6, #12]
1005b6f8:	9803      	ldr	r0, [sp, #12]
1005b6fa:	0600      	lsls	r0, r0, #24
1005b6fc:	7961      	ldrb	r1, [r4, #5]
1005b6fe:	1840      	adds	r0, r0, r1
1005b700:	79a1      	ldrb	r1, [r4, #6]
1005b702:	0209      	lsls	r1, r1, #8
1005b704:	1840      	adds	r0, r0, r1
1005b706:	79e1      	ldrb	r1, [r4, #7]
1005b708:	0409      	lsls	r1, r1, #16
1005b70a:	1840      	adds	r0, r0, r1
1005b70c:	6130      	str	r0, [r6, #16]
1005b70e:	ad0a      	add	r5, sp, #40	@ 0x28
1005b710:	7868      	ldrb	r0, [r5, #1]
1005b712:	78a9      	ldrb	r1, [r5, #2]
1005b714:	0209      	lsls	r1, r1, #8
1005b716:	1808      	adds	r0, r1, r0
1005b718:	78e9      	ldrb	r1, [r5, #3]
1005b71a:	0409      	lsls	r1, r1, #16
1005b71c:	1840      	adds	r0, r0, r1
1005b71e:	6170      	str	r0, [r6, #20]
1005b720:	9e04      	ldr	r6, [sp, #16]
1005b722:	2208      	movs	r2, #8
1005b724:	4620      	mov	r0, r4
1005b726:	4639      	mov	r1, r7
1005b728:	f006 fe40 	bl	100623ac <char_copy>
1005b72c:	3720      	adds	r7, #32
1005b72e:	2204      	movs	r2, #4
1005b730:	4628      	mov	r0, r5
1005b732:	4639      	mov	r1, r7
1005b734:	f006 fe3a 	bl	100623ac <char_copy>
1005b738:	2007      	movs	r0, #7
1005b73a:	9906      	ldr	r1, [sp, #24]
1005b73c:	7008      	strb	r0, [r1, #0]
1005b73e:	2101      	movs	r1, #1
1005b740:	9808      	ldr	r0, [sp, #32]
1005b742:	460a      	mov	r2, r1
1005b744:	e0ff      	b.n	1005b946 <LL_encryption+0x4aa>
1005b746:	2008      	movs	r0, #8
1005b748:	7010      	strb	r0, [r2, #0]
1005b74a:	2604      	movs	r6, #4
1005b74c:	e6bb      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b74e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b750:	7880      	ldrb	r0, [r0, #2]
1005b752:	2811      	cmp	r0, #17
1005b754:	d061      	beq.n	1005b81a <LL_encryption+0x37e>
1005b756:	2807      	cmp	r0, #7
1005b758:	d05f      	beq.n	1005b81a <LL_encryption+0x37e>
1005b75a:	280d      	cmp	r0, #13
1005b75c:	d05d      	beq.n	1005b81a <LL_encryption+0x37e>
1005b75e:	2804      	cmp	r0, #4
1005b760:	9e07      	ldr	r6, [sp, #28]
1005b762:	d000      	beq.n	1005b766 <LL_encryption+0x2ca>
1005b764:	e6aa      	b.n	1005b4bc <LL_encryption+0x20>
1005b766:	2009      	movs	r0, #9
1005b768:	7010      	strb	r0, [r2, #0]
1005b76a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005b76c:	1cf8      	adds	r0, r7, #3
1005b76e:	4631      	mov	r1, r6
1005b770:	3108      	adds	r1, #8
1005b772:	2208      	movs	r2, #8
1005b774:	461c      	mov	r4, r3
1005b776:	f006 fe19 	bl	100623ac <char_copy>
1005b77a:	370b      	adds	r7, #11
1005b77c:	4631      	mov	r1, r6
1005b77e:	3124      	adds	r1, #36	@ 0x24
1005b780:	2204      	movs	r2, #4
1005b782:	4638      	mov	r0, r7
1005b784:	f006 fe12 	bl	100623ac <char_copy>
1005b788:	662e      	str	r6, [r5, #96]	@ 0x60
1005b78a:	2101      	movs	r1, #1
1005b78c:	2200      	movs	r2, #0
1005b78e:	9808      	ldr	r0, [sp, #32]
1005b790:	f7fe fbd6 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005b794:	4620      	mov	r0, r4
1005b796:	f7fd fc05 	bl	10058fa4 <llc_conn_set_rx_acl_blocked>
1005b79a:	2605      	movs	r6, #5
1005b79c:	e693      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b79e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b7a0:	7880      	ldrb	r0, [r0, #2]
1005b7a2:	2811      	cmp	r0, #17
1005b7a4:	d046      	beq.n	1005b834 <LL_encryption+0x398>
1005b7a6:	280d      	cmp	r0, #13
1005b7a8:	d044      	beq.n	1005b834 <LL_encryption+0x398>
1005b7aa:	2805      	cmp	r0, #5
1005b7ac:	d000      	beq.n	1005b7b0 <LL_encryption+0x314>
1005b7ae:	e685      	b.n	1005b4bc <LL_encryption+0x20>
1005b7b0:	4614      	mov	r4, r2
1005b7b2:	2101      	movs	r1, #1
1005b7b4:	9808      	ldr	r0, [sp, #32]
1005b7b6:	f7fe fd79 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005b7ba:	200a      	movs	r0, #10
1005b7bc:	e00c      	b.n	1005b7d8 <LL_encryption+0x33c>
1005b7be:	2006      	movs	r0, #6
1005b7c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b7c2:	7088      	strb	r0, [r1, #2]
1005b7c4:	26ff      	movs	r6, #255	@ 0xff
1005b7c6:	4630      	mov	r0, r6
1005b7c8:	3004      	adds	r0, #4
1005b7ca:	8008      	strh	r0, [r1, #0]
1005b7cc:	2102      	movs	r1, #2
1005b7ce:	4618      	mov	r0, r3
1005b7d0:	4614      	mov	r4, r2
1005b7d2:	f7fd fbef 	bl	10058fb4 <llc_conn_set_start_enc>
1005b7d6:	200b      	movs	r0, #11
1005b7d8:	7020      	strb	r0, [r4, #0]
1005b7da:	e674      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b7dc:	200c      	movs	r0, #12
1005b7de:	7010      	strb	r0, [r2, #0]
1005b7e0:	e0cc      	b.n	1005b97c <LL_encryption+0x4e0>
1005b7e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b7e4:	7880      	ldrb	r0, [r0, #2]
1005b7e6:	2806      	cmp	r0, #6
1005b7e8:	d000      	beq.n	1005b7ec <LL_encryption+0x350>
1005b7ea:	e667      	b.n	1005b4bc <LL_encryption+0x20>
1005b7ec:	2000      	movs	r0, #0
1005b7ee:	4615      	mov	r5, r2
1005b7f0:	7010      	strb	r0, [r2, #0]
1005b7f2:	48be      	ldr	r0, [pc, #760]	@ (1005baec <__arm_cp.0_0>)
1005b7f4:	6800      	ldr	r0, [r0, #0]
1005b7f6:	212c      	movs	r1, #44	@ 0x2c
1005b7f8:	5c40      	ldrb	r0, [r0, r1]
1005b7fa:	07c0      	lsls	r0, r0, #31
1005b7fc:	0ec1      	lsrs	r1, r0, #27
1005b7fe:	206f      	movs	r0, #111	@ 0x6f
1005b800:	43c0      	mvns	r0, r0
1005b802:	4048      	eors	r0, r1
1005b804:	461c      	mov	r4, r3
1005b806:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005b808:	7929      	ldrb	r1, [r5, #4]
1005b80a:	b2c0      	uxtb	r0, r0
1005b80c:	2901      	cmp	r1, #1
1005b80e:	d000      	beq.n	1005b812 <LL_encryption+0x376>
1005b810:	e115      	b.n	1005ba3e <LL_encryption+0x5a2>
1005b812:	4611      	mov	r1, r2
1005b814:	f000 f9b2 	bl	1005bb7c <hci_encryption_key_refresh_complete_event_push>
1005b818:	e01c      	b.n	1005b854 <LL_encryption+0x3b8>
1005b81a:	48b4      	ldr	r0, [pc, #720]	@ (1005baec <__arm_cp.0_0>)
1005b81c:	6800      	ldr	r0, [r0, #0]
1005b81e:	212c      	movs	r1, #44	@ 0x2c
1005b820:	5c40      	ldrb	r0, [r0, r1]
1005b822:	0100      	lsls	r0, r0, #4
1005b824:	43c0      	mvns	r0, r0
1005b826:	2180      	movs	r1, #128	@ 0x80
1005b828:	4301      	orrs	r1, r0
1005b82a:	2090      	movs	r0, #144	@ 0x90
1005b82c:	4008      	ands	r0, r1
1005b82e:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005b830:	211a      	movs	r1, #26
1005b832:	e00b      	b.n	1005b84c <LL_encryption+0x3b0>
1005b834:	48ad      	ldr	r0, [pc, #692]	@ (1005baec <__arm_cp.0_0>)
1005b836:	6800      	ldr	r0, [r0, #0]
1005b838:	212c      	movs	r1, #44	@ 0x2c
1005b83a:	5c40      	ldrb	r0, [r0, r1]
1005b83c:	0100      	lsls	r0, r0, #4
1005b83e:	43c0      	mvns	r0, r0
1005b840:	2180      	movs	r1, #128	@ 0x80
1005b842:	4301      	orrs	r1, r0
1005b844:	2090      	movs	r0, #144	@ 0x90
1005b846:	4008      	ands	r0, r1
1005b848:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005b84a:	2106      	movs	r1, #6
1005b84c:	461c      	mov	r4, r3
1005b84e:	2300      	movs	r3, #0
1005b850:	f000 f962 	bl	1005bb18 <hci_encryption_change_event_push>
1005b854:	4620      	mov	r0, r4
1005b856:	f7fd f868 	bl	1005892a <llc_conn_clr_tx_acl_blocked>
1005b85a:	4620      	mov	r0, r4
1005b85c:	f7fd f854 	bl	10058908 <llc_conn_clr_rx_acl_blocked>
1005b860:	2101      	movs	r1, #1
1005b862:	9808      	ldr	r0, [sp, #32]
1005b864:	460a      	mov	r2, r1
1005b866:	e0fd      	b.n	1005ba64 <LL_encryption+0x5c8>
1005b868:	2003      	movs	r0, #3
1005b86a:	7050      	strb	r0, [r2, #1]
1005b86c:	2101      	movs	r1, #1
1005b86e:	4618      	mov	r0, r3
1005b870:	f7fd fbb1 	bl	10058fd6 <llc_conn_set_stop_enc>
1005b874:	260b      	movs	r6, #11
1005b876:	e626      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b878:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b87a:	7880      	ldrb	r0, [r0, #2]
1005b87c:	280b      	cmp	r0, #11
1005b87e:	d000      	beq.n	1005b882 <LL_encryption+0x3e6>
1005b880:	e61c      	b.n	1005b4bc <LL_encryption+0x20>
1005b882:	2004      	movs	r0, #4
1005b884:	7050      	strb	r0, [r2, #1]
1005b886:	2603      	movs	r6, #3
1005b888:	e61d      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b88a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b88c:	7880      	ldrb	r0, [r0, #2]
1005b88e:	2803      	cmp	r0, #3
1005b890:	9f07      	ldr	r7, [sp, #28]
1005b892:	d000      	beq.n	1005b896 <LL_encryption+0x3fa>
1005b894:	e612      	b.n	1005b4bc <LL_encryption+0x20>
1005b896:	2005      	movs	r0, #5
1005b898:	7050      	strb	r0, [r2, #1]
1005b89a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005b89c:	1ce0      	adds	r0, r4, #3
1005b89e:	4639      	mov	r1, r7
1005b8a0:	3130      	adds	r1, #48	@ 0x30
1005b8a2:	2508      	movs	r5, #8
1005b8a4:	462a      	mov	r2, r5
1005b8a6:	4b95      	ldr	r3, [pc, #596]	@ (1005bafc <__arm_cp.0_4>)
1005b8a8:	4798      	blx	r3
1005b8aa:	4620      	mov	r0, r4
1005b8ac:	300b      	adds	r0, #11
1005b8ae:	4639      	mov	r1, r7
1005b8b0:	312e      	adds	r1, #46	@ 0x2e
1005b8b2:	2202      	movs	r2, #2
1005b8b4:	4b91      	ldr	r3, [pc, #580]	@ (1005bafc <__arm_cp.0_4>)
1005b8b6:	4798      	blx	r3
1005b8b8:	4620      	mov	r0, r4
1005b8ba:	300d      	adds	r0, #13
1005b8bc:	4639      	mov	r1, r7
1005b8be:	462a      	mov	r2, r5
1005b8c0:	4d8e      	ldr	r5, [pc, #568]	@ (1005bafc <__arm_cp.0_4>)
1005b8c2:	47a8      	blx	r5
1005b8c4:	3415      	adds	r4, #21
1005b8c6:	3720      	adds	r7, #32
1005b8c8:	2204      	movs	r2, #4
1005b8ca:	4620      	mov	r0, r4
1005b8cc:	4639      	mov	r1, r7
1005b8ce:	47a8      	blx	r5
1005b8d0:	e0b0      	b.n	1005ba34 <LL_encryption+0x598>
1005b8d2:	2500      	movs	r5, #0
1005b8d4:	9503      	str	r5, [sp, #12]
1005b8d6:	4c88      	ldr	r4, [pc, #544]	@ (1005baf8 <__arm_cp.0_3>)
1005b8d8:	4628      	mov	r0, r5
1005b8da:	9305      	str	r3, [sp, #20]
1005b8dc:	9206      	str	r2, [sp, #24]
1005b8de:	47a0      	blx	r4
1005b8e0:	900b      	str	r0, [sp, #44]	@ 0x2c
1005b8e2:	4628      	mov	r0, r5
1005b8e4:	47a0      	blx	r4
1005b8e6:	900c      	str	r0, [sp, #48]	@ 0x30
1005b8e8:	4628      	mov	r0, r5
1005b8ea:	47a0      	blx	r4
1005b8ec:	2104      	movs	r1, #4
1005b8ee:	9102      	str	r1, [sp, #8]
1005b8f0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005b8f2:	70a1      	strb	r1, [r4, #2]
1005b8f4:	210d      	movs	r1, #13
1005b8f6:	7061      	strb	r1, [r4, #1]
1005b8f8:	2103      	movs	r1, #3
1005b8fa:	7021      	strb	r1, [r4, #0]
1005b8fc:	900a      	str	r0, [sp, #40]	@ 0x28
1005b8fe:	1ce1      	adds	r1, r4, #3
1005b900:	a80b      	add	r0, sp, #44	@ 0x2c
1005b902:	9001      	str	r0, [sp, #4]
1005b904:	9604      	str	r6, [sp, #16]
1005b906:	2608      	movs	r6, #8
1005b908:	4b7c      	ldr	r3, [pc, #496]	@ (1005bafc <__arm_cp.0_4>)
1005b90a:	4632      	mov	r2, r6
1005b90c:	4798      	blx	r3
1005b90e:	340b      	adds	r4, #11
1005b910:	af0a      	add	r7, sp, #40	@ 0x28
1005b912:	4638      	mov	r0, r7
1005b914:	4621      	mov	r1, r4
1005b916:	9d02      	ldr	r5, [sp, #8]
1005b918:	462a      	mov	r2, r5
1005b91a:	4b78      	ldr	r3, [pc, #480]	@ (1005bafc <__arm_cp.0_4>)
1005b91c:	4798      	blx	r3
1005b91e:	9c07      	ldr	r4, [sp, #28]
1005b920:	4621      	mov	r1, r4
1005b922:	3108      	adds	r1, #8
1005b924:	9801      	ldr	r0, [sp, #4]
1005b926:	4632      	mov	r2, r6
1005b928:	9e04      	ldr	r6, [sp, #16]
1005b92a:	4b74      	ldr	r3, [pc, #464]	@ (1005bafc <__arm_cp.0_4>)
1005b92c:	4798      	blx	r3
1005b92e:	4b73      	ldr	r3, [pc, #460]	@ (1005bafc <__arm_cp.0_4>)
1005b930:	3424      	adds	r4, #36	@ 0x24
1005b932:	4638      	mov	r0, r7
1005b934:	4621      	mov	r1, r4
1005b936:	462a      	mov	r2, r5
1005b938:	4798      	blx	r3
1005b93a:	2006      	movs	r0, #6
1005b93c:	9906      	ldr	r1, [sp, #24]
1005b93e:	7048      	strb	r0, [r1, #1]
1005b940:	2201      	movs	r2, #1
1005b942:	9808      	ldr	r0, [sp, #32]
1005b944:	9903      	ldr	r1, [sp, #12]
1005b946:	f7fe fafb 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005b94a:	9805      	ldr	r0, [sp, #20]
1005b94c:	f7fd fb54 	bl	10058ff8 <llc_conn_set_tx_acl_blocked>
1005b950:	e5b9      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b952:	4867      	ldr	r0, [pc, #412]	@ (1005baf0 <__arm_cp.0_1>)
1005b954:	6800      	ldr	r0, [r0, #0]
1005b956:	213d      	movs	r1, #61	@ 0x3d
1005b958:	5c41      	ldrb	r1, [r0, r1]
1005b95a:	0689      	lsls	r1, r1, #26
1005b95c:	d504      	bpl.n	1005b968 <LL_encryption+0x4cc>
1005b95e:	303d      	adds	r0, #61	@ 0x3d
1005b960:	7a40      	ldrb	r0, [r0, #9]
1005b962:	06c0      	lsls	r0, r0, #27
1005b964:	d500      	bpl.n	1005b968 <LL_encryption+0x4cc>
1005b966:	e080      	b.n	1005ba6a <LL_encryption+0x5ce>
1005b968:	2100      	movs	r1, #0
1005b96a:	9808      	ldr	r0, [sp, #32]
1005b96c:	4614      	mov	r4, r2
1005b96e:	f7fe fc9d 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005b972:	4620      	mov	r0, r4
1005b974:	270d      	movs	r7, #13
1005b976:	e0b7      	b.n	1005bae8 <__arm_cp.0_10+0x64>
1005b978:	2009      	movs	r0, #9
1005b97a:	7050      	strb	r0, [r2, #1]
1005b97c:	2606      	movs	r6, #6
1005b97e:	e5a2      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b980:	2006      	movs	r0, #6
1005b982:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b984:	7088      	strb	r0, [r1, #2]
1005b986:	200b      	movs	r0, #11
1005b988:	7050      	strb	r0, [r2, #1]
1005b98a:	26ff      	movs	r6, #255	@ 0xff
1005b98c:	4630      	mov	r0, r6
1005b98e:	3004      	adds	r0, #4
1005b990:	8008      	strh	r0, [r1, #0]
1005b992:	2501      	movs	r5, #1
1005b994:	4618      	mov	r0, r3
1005b996:	4629      	mov	r1, r5
1005b998:	f7fd fb0c 	bl	10058fb4 <llc_conn_set_start_enc>
1005b99c:	7025      	strb	r5, [r4, #0]
1005b99e:	e592      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b9a0:	2000      	movs	r0, #0
1005b9a2:	9009      	str	r0, [sp, #36]	@ 0x24
1005b9a4:	7050      	strb	r0, [r2, #1]
1005b9a6:	4851      	ldr	r0, [pc, #324]	@ (1005baec <__arm_cp.0_0>)
1005b9a8:	6800      	ldr	r0, [r0, #0]
1005b9aa:	212c      	movs	r1, #44	@ 0x2c
1005b9ac:	5c40      	ldrb	r0, [r0, r1]
1005b9ae:	07c0      	lsls	r0, r0, #31
1005b9b0:	0ec1      	lsrs	r1, r0, #27
1005b9b2:	206f      	movs	r0, #111	@ 0x6f
1005b9b4:	43c0      	mvns	r0, r0
1005b9b6:	4048      	eors	r0, r1
1005b9b8:	4611      	mov	r1, r2
1005b9ba:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005b9bc:	7909      	ldrb	r1, [r1, #4]
1005b9be:	2901      	cmp	r1, #1
1005b9c0:	9305      	str	r3, [sp, #20]
1005b9c2:	b2c0      	uxtb	r0, r0
1005b9c4:	d13e      	bne.n	1005ba44 <LL_encryption+0x5a8>
1005b9c6:	4611      	mov	r1, r2
1005b9c8:	f000 f8d8 	bl	1005bb7c <hci_encryption_key_refresh_complete_event_push>
1005b9cc:	e03e      	b.n	1005ba4c <LL_encryption+0x5b0>
1005b9ce:	4618      	mov	r0, r3
1005b9d0:	4615      	mov	r5, r2
1005b9d2:	f7fc ffaa 	bl	1005892a <llc_conn_clr_tx_acl_blocked>
1005b9d6:	2400      	movs	r4, #0
1005b9d8:	2201      	movs	r2, #1
1005b9da:	9808      	ldr	r0, [sp, #32]
1005b9dc:	4621      	mov	r1, r4
1005b9de:	f7fe fc1f 	bl	1005a220 <llc_cpe_sm_disable>
1005b9e2:	706c      	strb	r4, [r5, #1]
1005b9e4:	e56f      	b.n	1005b4c6 <LL_encryption+0x2a>
1005b9e6:	78d0      	ldrb	r0, [r2, #3]
1005b9e8:	2801      	cmp	r0, #1
1005b9ea:	d110      	bne.n	1005ba0e <LL_encryption+0x572>
1005b9ec:	2005      	movs	r0, #5
1005b9ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005b9f0:	7088      	strb	r0, [r1, #2]
1005b9f2:	9807      	ldr	r0, [sp, #28]
1005b9f4:	6628      	str	r0, [r5, #96]	@ 0x60
1005b9f6:	26ff      	movs	r6, #255	@ 0xff
1005b9f8:	4630      	mov	r0, r6
1005b9fa:	3004      	adds	r0, #4
1005b9fc:	8008      	strh	r0, [r1, #0]
1005b9fe:	2100      	movs	r1, #0
1005ba00:	4618      	mov	r0, r3
1005ba02:	4614      	mov	r4, r2
1005ba04:	f7fd fad6 	bl	10058fb4 <llc_conn_set_start_enc>
1005ba08:	2008      	movs	r0, #8
1005ba0a:	7060      	strb	r0, [r4, #1]
1005ba0c:	e55b      	b.n	1005b4c6 <LL_encryption+0x2a>
1005ba0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005ba10:	4619      	mov	r1, r3
1005ba12:	461c      	mov	r4, r3
1005ba14:	4615      	mov	r5, r2
1005ba16:	f000 f8e3 	bl	1005bbe0 <llc_enc_prepare_reject>
1005ba1a:	200c      	movs	r0, #12
1005ba1c:	7068      	strb	r0, [r5, #1]
1005ba1e:	4620      	mov	r0, r4
1005ba20:	f7fc ff72 	bl	10058908 <llc_conn_clr_rx_acl_blocked>
1005ba24:	e54f      	b.n	1005b4c6 <LL_encryption+0x2a>
1005ba26:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005ba28:	7880      	ldrb	r0, [r0, #2]
1005ba2a:	2806      	cmp	r0, #6
1005ba2c:	d000      	beq.n	1005ba30 <LL_encryption+0x594>
1005ba2e:	e545      	b.n	1005b4bc <LL_encryption+0x20>
1005ba30:	200a      	movs	r0, #10
1005ba32:	7050      	strb	r0, [r2, #1]
1005ba34:	2100      	movs	r1, #0
1005ba36:	9808      	ldr	r0, [sp, #32]
1005ba38:	f7fe fc38 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005ba3c:	e543      	b.n	1005b4c6 <LL_encryption+0x2a>
1005ba3e:	2100      	movs	r1, #0
1005ba40:	2301      	movs	r3, #1
1005ba42:	e705      	b.n	1005b850 <LL_encryption+0x3b4>
1005ba44:	2100      	movs	r1, #0
1005ba46:	2301      	movs	r3, #1
1005ba48:	f000 f866 	bl	1005bb18 <hci_encryption_change_event_push>
1005ba4c:	9805      	ldr	r0, [sp, #20]
1005ba4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005ba50:	7021      	strb	r1, [r4, #0]
1005ba52:	4604      	mov	r4, r0
1005ba54:	f7fc ff69 	bl	1005892a <llc_conn_clr_tx_acl_blocked>
1005ba58:	4620      	mov	r0, r4
1005ba5a:	f7fc ff55 	bl	10058908 <llc_conn_clr_rx_acl_blocked>
1005ba5e:	2201      	movs	r2, #1
1005ba60:	9808      	ldr	r0, [sp, #32]
1005ba62:	4639      	mov	r1, r7
1005ba64:	f7fe fbdc 	bl	1005a220 <llc_cpe_sm_disable>
1005ba68:	e52d      	b.n	1005b4c6 <LL_encryption+0x2a>
1005ba6a:	4820      	ldr	r0, [pc, #128]	@ (1005baec <__arm_cp.0_0>)
1005ba6c:	6800      	ldr	r0, [r0, #0]
1005ba6e:	212c      	movs	r1, #44	@ 0x2c
1005ba70:	5c40      	ldrb	r0, [r0, r1]
1005ba72:	07c0      	lsls	r0, r0, #31
1005ba74:	0ec0      	lsrs	r0, r0, #27
1005ba76:	9604      	str	r6, [sp, #16]
1005ba78:	9206      	str	r2, [sp, #24]
1005ba7a:	d005      	beq.n	1005ba88 <__arm_cp.0_10+0x4>
1005ba7c:	2219      	movs	r2, #25
1005ba7e:	e004      	b.n	1005ba8a <__arm_cp.0_10+0x6>
1005ba80:	10062719 	.word	0x10062719

1005ba84 <__arm_cp.0_10>:
1005ba84:	00001703 	.word	0x00001703
1005ba88:	220a      	movs	r2, #10
1005ba8a:	9f07      	ldr	r7, [sp, #28]
1005ba8c:	216f      	movs	r1, #111	@ 0x6f
1005ba8e:	43c9      	mvns	r1, r1
1005ba90:	4048      	eors	r0, r1
1005ba92:	b2c1      	uxtb	r1, r0
1005ba94:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
1005ba96:	9008      	str	r0, [sp, #32]
1005ba98:	8f5c      	ldrh	r4, [r3, #58]	@ 0x3a
1005ba9a:	4816      	ldr	r0, [pc, #88]	@ (1005baf4 <__arm_cp.0_2>)
1005ba9c:	6800      	ldr	r0, [r0, #0]
1005ba9e:	6900      	ldr	r0, [r0, #16]
1005baa0:	2504      	movs	r5, #4
1005baa2:	9109      	str	r1, [sp, #36]	@ 0x24
1005baa4:	462b      	mov	r3, r5
1005baa6:	f7f7 fcdf 	bl	10053468 <aci_event_fifo_push_header>
1005baaa:	4639      	mov	r1, r7
1005baac:	2707      	movs	r7, #7
1005baae:	2800      	cmp	r0, #0
1005bab0:	d018      	beq.n	1005bae4 <__arm_cp.0_10+0x60>
1005bab2:	4606      	mov	r6, r0
1005bab4:	7204      	strb	r4, [r0, #8]
1005bab6:	0a20      	lsrs	r0, r4, #8
1005bab8:	7270      	strb	r0, [r6, #9]
1005baba:	4630      	mov	r0, r6
1005babc:	300a      	adds	r0, #10
1005babe:	3130      	adds	r1, #48	@ 0x30
1005bac0:	2208      	movs	r2, #8
1005bac2:	f7ea f9d9 	bl	10045e78 <BLEPLAT_MemCpy>
1005bac6:	9908      	ldr	r1, [sp, #32]
1005bac8:	0a08      	lsrs	r0, r1, #8
1005baca:	74f0      	strb	r0, [r6, #19]
1005bacc:	74b1      	strb	r1, [r6, #18]
1005bace:	2005      	movs	r0, #5
1005bad0:	71f0      	strb	r0, [r6, #7]
1005bad2:	200d      	movs	r0, #13
1005bad4:	71b0      	strb	r0, [r6, #6]
1005bad6:	203e      	movs	r0, #62	@ 0x3e
1005bad8:	7170      	strb	r0, [r6, #5]
1005bada:	7135      	strb	r5, [r6, #4]
1005badc:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005bade:	4631      	mov	r1, r6
1005bae0:	f7f7 fd5f 	bl	100535a2 <aci_event_fifo_push>
1005bae4:	9e04      	ldr	r6, [sp, #16]
1005bae6:	9806      	ldr	r0, [sp, #24]
1005bae8:	7047      	strb	r7, [r0, #1]
1005baea:	e4ec      	b.n	1005b4c6 <LL_encryption+0x2a>

1005baec <__arm_cp.0_0>:
1005baec:	20001120 	.word	0x20001120

1005baf0 <__arm_cp.0_1>:
1005baf0:	20001174 	.word	0x20001174

1005baf4 <__arm_cp.0_2>:
1005baf4:	20001124 	.word	0x20001124

1005baf8 <__arm_cp.0_3>:
1005baf8:	10062719 	.word	0x10062719

1005bafc <__arm_cp.0_4>:
1005bafc:	100623ad 	.word	0x100623ad

1005bb00 <le4ByteToInt32>:
1005bb00:	7801      	ldrb	r1, [r0, #0]
1005bb02:	7842      	ldrb	r2, [r0, #1]
1005bb04:	0212      	lsls	r2, r2, #8
1005bb06:	1851      	adds	r1, r2, r1
1005bb08:	7882      	ldrb	r2, [r0, #2]
1005bb0a:	0412      	lsls	r2, r2, #16
1005bb0c:	1889      	adds	r1, r1, r2
1005bb0e:	78c0      	ldrb	r0, [r0, #3]
1005bb10:	0600      	lsls	r0, r0, #24
1005bb12:	1808      	adds	r0, r1, r0
1005bb14:	4770      	bx	lr
	...

1005bb18 <hci_encryption_change_event_push>:
1005bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005bb1a:	461e      	mov	r6, r3
1005bb1c:	4615      	mov	r5, r2
1005bb1e:	460f      	mov	r7, r1
1005bb20:	4604      	mov	r4, r0
1005bb22:	06c0      	lsls	r0, r0, #27
1005bb24:	d406      	bmi.n	1005bb34 <hci_encryption_change_event_push+0x1c>
1005bb26:	4813      	ldr	r0, [pc, #76]	@ (1005bb74 <__arm_cp.2_0>)
1005bb28:	6800      	ldr	r0, [r0, #0]
1005bb2a:	2136      	movs	r1, #54	@ 0x36
1005bb2c:	5640      	ldrsb	r0, [r0, r1]
1005bb2e:	2800      	cmp	r0, #0
1005bb30:	d404      	bmi.n	1005bb3c <hci_encryption_change_event_push+0x24>
1005bb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005bb34:	20bf      	movs	r0, #191	@ 0xbf
1005bb36:	4004      	ands	r4, r0
1005bb38:	2206      	movs	r2, #6
1005bb3a:	e000      	b.n	1005bb3e <hci_encryption_change_event_push+0x26>
1005bb3c:	2216      	movs	r2, #22
1005bb3e:	480e      	ldr	r0, [pc, #56]	@ (1005bb78 <__arm_cp.2_1>)
1005bb40:	6800      	ldr	r0, [r0, #0]
1005bb42:	0761      	lsls	r1, r4, #29
1005bb44:	0ec9      	lsrs	r1, r1, #27
1005bb46:	1840      	adds	r0, r0, r1
1005bb48:	6900      	ldr	r0, [r0, #16]
1005bb4a:	2302      	movs	r3, #2
1005bb4c:	4621      	mov	r1, r4
1005bb4e:	f7f7 fc8b 	bl	10053468 <aci_event_fifo_push_header>
1005bb52:	2800      	cmp	r0, #0
1005bb54:	d0ed      	beq.n	1005bb32 <hci_encryption_change_event_push+0x1a>
1005bb56:	4601      	mov	r1, r0
1005bb58:	7205      	strb	r5, [r0, #8]
1005bb5a:	7286      	strb	r6, [r0, #10]
1005bb5c:	71c7      	strb	r7, [r0, #7]
1005bb5e:	2004      	movs	r0, #4
1005bb60:	7188      	strb	r0, [r1, #6]
1005bb62:	2208      	movs	r2, #8
1005bb64:	714a      	strb	r2, [r1, #5]
1005bb66:	7108      	strb	r0, [r1, #4]
1005bb68:	0a28      	lsrs	r0, r5, #8
1005bb6a:	7248      	strb	r0, [r1, #9]
1005bb6c:	4620      	mov	r0, r4
1005bb6e:	f7f7 fd18 	bl	100535a2 <aci_event_fifo_push>
1005bb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005bb74 <__arm_cp.2_0>:
1005bb74:	20001174 	.word	0x20001174

1005bb78 <__arm_cp.2_1>:
1005bb78:	20001124 	.word	0x20001124

1005bb7c <hci_encryption_key_refresh_complete_event_push>:
1005bb7c:	b5b0      	push	{r4, r5, r7, lr}
1005bb7e:	460d      	mov	r5, r1
1005bb80:	4604      	mov	r4, r0
1005bb82:	06c0      	lsls	r0, r0, #27
1005bb84:	d406      	bmi.n	1005bb94 <hci_encryption_key_refresh_complete_event_push+0x18>
1005bb86:	4814      	ldr	r0, [pc, #80]	@ (1005bbd8 <__arm_cp.3_0>)
1005bb88:	6800      	ldr	r0, [r0, #0]
1005bb8a:	213b      	movs	r1, #59	@ 0x3b
1005bb8c:	5640      	ldrsb	r0, [r0, r1]
1005bb8e:	2800      	cmp	r0, #0
1005bb90:	d404      	bmi.n	1005bb9c <hci_encryption_key_refresh_complete_event_push+0x20>
1005bb92:	bdb0      	pop	{r4, r5, r7, pc}
1005bb94:	20bf      	movs	r0, #191	@ 0xbf
1005bb96:	4004      	ands	r4, r0
1005bb98:	2207      	movs	r2, #7
1005bb9a:	e000      	b.n	1005bb9e <hci_encryption_key_refresh_complete_event_push+0x22>
1005bb9c:	2217      	movs	r2, #23
1005bb9e:	480f      	ldr	r0, [pc, #60]	@ (1005bbdc <__arm_cp.3_1>)
1005bba0:	6800      	ldr	r0, [r0, #0]
1005bba2:	0761      	lsls	r1, r4, #29
1005bba4:	0ec9      	lsrs	r1, r1, #27
1005bba6:	1840      	adds	r0, r0, r1
1005bba8:	6900      	ldr	r0, [r0, #16]
1005bbaa:	2302      	movs	r3, #2
1005bbac:	4621      	mov	r1, r4
1005bbae:	f7f7 fc5b 	bl	10053468 <aci_event_fifo_push_header>
1005bbb2:	2800      	cmp	r0, #0
1005bbb4:	d0ed      	beq.n	1005bb92 <hci_encryption_key_refresh_complete_event_push+0x16>
1005bbb6:	4601      	mov	r1, r0
1005bbb8:	7205      	strb	r5, [r0, #8]
1005bbba:	2000      	movs	r0, #0
1005bbbc:	71c8      	strb	r0, [r1, #7]
1005bbbe:	2003      	movs	r0, #3
1005bbc0:	7188      	strb	r0, [r1, #6]
1005bbc2:	2030      	movs	r0, #48	@ 0x30
1005bbc4:	7148      	strb	r0, [r1, #5]
1005bbc6:	2004      	movs	r0, #4
1005bbc8:	7108      	strb	r0, [r1, #4]
1005bbca:	0a28      	lsrs	r0, r5, #8
1005bbcc:	7248      	strb	r0, [r1, #9]
1005bbce:	4620      	mov	r0, r4
1005bbd0:	f7f7 fce7 	bl	100535a2 <aci_event_fifo_push>
1005bbd4:	bdb0      	pop	{r4, r5, r7, pc}
1005bbd6:	46c0      	nop			@ (mov r8, r8)

1005bbd8 <__arm_cp.3_0>:
1005bbd8:	20001174 	.word	0x20001174

1005bbdc <__arm_cp.3_1>:
1005bbdc:	20001124 	.word	0x20001124

1005bbe0 <llc_enc_prepare_reject>:
1005bbe0:	2203      	movs	r2, #3
1005bbe2:	7002      	strb	r2, [r0, #0]
1005bbe4:	2385      	movs	r3, #133	@ 0x85
1005bbe6:	005b      	lsls	r3, r3, #1
1005bbe8:	5cc9      	ldrb	r1, [r1, r3]
1005bbea:	0749      	lsls	r1, r1, #29
1005bbec:	d403      	bmi.n	1005bbf6 <llc_enc_prepare_reject+0x16>
1005bbee:	2306      	movs	r3, #6
1005bbf0:	210d      	movs	r1, #13
1005bbf2:	2202      	movs	r2, #2
1005bbf4:	e003      	b.n	1005bbfe <llc_enc_prepare_reject+0x1e>
1005bbf6:	2106      	movs	r1, #6
1005bbf8:	7101      	strb	r1, [r0, #4]
1005bbfa:	2111      	movs	r1, #17
1005bbfc:	4613      	mov	r3, r2
1005bbfe:	70c3      	strb	r3, [r0, #3]
1005bc00:	7081      	strb	r1, [r0, #2]
1005bc02:	7042      	strb	r2, [r0, #1]
1005bc04:	4770      	bx	lr

1005bc06 <LL_Get_LTK>:
1005bc06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005bc08:	4614      	mov	r4, r2
1005bc0a:	4606      	mov	r6, r0
1005bc0c:	4608      	mov	r0, r1
1005bc0e:	f7fc fcc3 	bl	10058598 <llc_conn_get_cntxt_per_p_from_handle>
1005bc12:	2130      	movs	r1, #48	@ 0x30
1005bc14:	5641      	ldrsb	r1, [r0, r1]
1005bc16:	2900      	cmp	r1, #0
1005bc18:	d405      	bmi.n	1005bc26 <LL_Get_LTK+0x20>
1005bc1a:	302c      	adds	r0, #44	@ 0x2c
1005bc1c:	7800      	ldrb	r0, [r0, #0]
1005bc1e:	2802      	cmp	r0, #2
1005bc20:	d103      	bne.n	1005bc2a <LL_Get_LTK+0x24>
1005bc22:	2512      	movs	r5, #18
1005bc24:	e018      	b.n	1005bc58 <LL_Get_LTK+0x52>
1005bc26:	2502      	movs	r5, #2
1005bc28:	e016      	b.n	1005bc58 <LL_Get_LTK+0x52>
1005bc2a:	b2cf      	uxtb	r7, r1
1005bc2c:	2500      	movs	r5, #0
1005bc2e:	4638      	mov	r0, r7
1005bc30:	4629      	mov	r1, r5
1005bc32:	f7fe fb3b 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005bc36:	4638      	mov	r0, r7
1005bc38:	4629      	mov	r1, r5
1005bc3a:	f7fe fb1f 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005bc3e:	4601      	mov	r1, r0
1005bc40:	302b      	adds	r0, #43	@ 0x2b
1005bc42:	2e00      	cmp	r6, #0
1005bc44:	d001      	beq.n	1005bc4a <LL_Get_LTK+0x44>
1005bc46:	7005      	strb	r5, [r0, #0]
1005bc48:	e006      	b.n	1005bc58 <LL_Get_LTK+0x52>
1005bc4a:	2201      	movs	r2, #1
1005bc4c:	7002      	strb	r2, [r0, #0]
1005bc4e:	3110      	adds	r1, #16
1005bc50:	2210      	movs	r2, #16
1005bc52:	4620      	mov	r0, r4
1005bc54:	f006 fbaa 	bl	100623ac <char_copy>
1005bc58:	4628      	mov	r0, r5
1005bc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005bc5c <LL_feature_exchange>:
1005bc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bc5e:	b085      	sub	sp, #20
1005bc60:	461c      	mov	r4, r3
1005bc62:	4615      	mov	r5, r2
1005bc64:	460f      	mov	r7, r1
1005bc66:	4606      	mov	r6, r0
1005bc68:	f7fe fb08 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005bc6c:	9003      	str	r0, [sp, #12]
1005bc6e:	9602      	str	r6, [sp, #8]
1005bc70:	4630      	mov	r0, r6
1005bc72:	f7fc fc83 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005bc76:	4606      	mov	r6, r0
1005bc78:	20ff      	movs	r0, #255	@ 0xff
1005bc7a:	2d06      	cmp	r5, #6
1005bc7c:	d900      	bls.n	1005bc80 <LL_feature_exchange+0x24>
1005bc7e:	e09e      	b.n	1005bdbe <LL_feature_exchange+0x162>
1005bc80:	9704      	str	r7, [sp, #16]
1005bc82:	2185      	movs	r1, #133	@ 0x85
1005bc84:	0049      	lsls	r1, r1, #1
1005bc86:	1873      	adds	r3, r6, r1
1005bc88:	4637      	mov	r7, r6
1005bc8a:	372c      	adds	r7, #44	@ 0x2c
1005bc8c:	447d      	add	r5, pc
1005bc8e:	792d      	ldrb	r5, [r5, #4]
1005bc90:	006d      	lsls	r5, r5, #1
1005bc92:	44af      	add	pc, r5
1005bc94:	2a940803 	.word	0x2a940803
1005bc98:	004f9494 	.word	0x004f9494
1005bc9c:	9904      	ldr	r1, [sp, #16]
1005bc9e:	2901      	cmp	r1, #1
1005bca0:	d165      	bne.n	1005bd6e <LL_feature_exchange+0x112>
1005bca2:	2009      	movs	r0, #9
1005bca4:	e08b      	b.n	1005bdbe <LL_feature_exchange+0x162>
1005bca6:	78a1      	ldrb	r1, [r4, #2]
1005bca8:	290e      	cmp	r1, #14
1005bcaa:	d002      	beq.n	1005bcb2 <LL_feature_exchange+0x56>
1005bcac:	2908      	cmp	r1, #8
1005bcae:	d000      	beq.n	1005bcb2 <LL_feature_exchange+0x56>
1005bcb0:	e085      	b.n	1005bdbe <LL_feature_exchange+0x162>
1005bcb2:	1ce4      	adds	r4, r4, #3
1005bcb4:	9903      	ldr	r1, [sp, #12]
1005bcb6:	3108      	adds	r1, #8
1005bcb8:	4605      	mov	r5, r0
1005bcba:	2208      	movs	r2, #8
1005bcbc:	4620      	mov	r0, r4
1005bcbe:	461e      	mov	r6, r3
1005bcc0:	f006 fb74 	bl	100623ac <char_copy>
1005bcc4:	2205      	movs	r2, #5
1005bcc6:	4630      	mov	r0, r6
1005bcc8:	4621      	mov	r1, r4
1005bcca:	f7ea f8d5 	bl	10045e78 <BLEPLAT_MemCpy>
1005bcce:	9e02      	ldr	r6, [sp, #8]
1005bcd0:	4630      	mov	r0, r6
1005bcd2:	9c04      	ldr	r4, [sp, #16]
1005bcd4:	4621      	mov	r1, r4
1005bcd6:	f7fe fae9 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005bcda:	2203      	movs	r2, #3
1005bcdc:	2300      	movs	r3, #0
1005bcde:	4630      	mov	r0, r6
1005bce0:	4621      	mov	r1, r4
1005bce2:	f7fe faad 	bl	1005a240 <llc_cpe_sm_enable>
1005bce6:	4628      	mov	r0, r5
1005bce8:	e069      	b.n	1005bdbe <LL_feature_exchange+0x162>
1005bcea:	78a1      	ldrb	r1, [r4, #2]
1005bcec:	2907      	cmp	r1, #7
1005bcee:	d04a      	beq.n	1005bd86 <LL_feature_exchange+0x12a>
1005bcf0:	2909      	cmp	r1, #9
1005bcf2:	d164      	bne.n	1005bdbe <LL_feature_exchange+0x162>
1005bcf4:	4607      	mov	r7, r0
1005bcf6:	2019      	movs	r0, #25
1005bcf8:	0100      	lsls	r0, r0, #4
1005bcfa:	1835      	adds	r5, r6, r0
1005bcfc:	1ce4      	adds	r4, r4, #3
1005bcfe:	2205      	movs	r2, #5
1005bd00:	4618      	mov	r0, r3
1005bd02:	4621      	mov	r1, r4
1005bd04:	f7ea f8b8 	bl	10045e78 <BLEPLAT_MemCpy>
1005bd08:	9803      	ldr	r0, [sp, #12]
1005bd0a:	7c40      	ldrb	r0, [r0, #17]
1005bd0c:	2800      	cmp	r0, #0
1005bd0e:	d005      	beq.n	1005bd1c <LL_feature_exchange+0xc0>
1005bd10:	8f72      	ldrh	r2, [r6, #58]	@ 0x3a
1005bd12:	2080      	movs	r0, #128	@ 0x80
1005bd14:	2100      	movs	r1, #0
1005bd16:	4623      	mov	r3, r4
1005bd18:	f007 fd76 	bl	10063808 <hci_le_read_remote_features_complete_event_push_noinline>
1005bd1c:	2001      	movs	r0, #1
1005bd1e:	0240      	lsls	r0, r0, #9
1005bd20:	8829      	ldrh	r1, [r5, #0]
1005bd22:	4301      	orrs	r1, r0
1005bd24:	8029      	strh	r1, [r5, #0]
1005bd26:	2203      	movs	r2, #3
1005bd28:	9802      	ldr	r0, [sp, #8]
1005bd2a:	9904      	ldr	r1, [sp, #16]
1005bd2c:	f7fe fa78 	bl	1005a220 <llc_cpe_sm_disable>
1005bd30:	4638      	mov	r0, r7
1005bd32:	e044      	b.n	1005bdbe <LL_feature_exchange+0x162>
1005bd34:	9002      	str	r0, [sp, #8]
1005bd36:	2009      	movs	r0, #9
1005bd38:	9001      	str	r0, [sp, #4]
1005bd3a:	7060      	strb	r0, [r4, #1]
1005bd3c:	2003      	movs	r0, #3
1005bd3e:	7020      	strb	r0, [r4, #0]
1005bd40:	1ce6      	adds	r6, r4, #3
1005bd42:	4630      	mov	r0, r6
1005bd44:	f000 f83e 	bl	1005bdc4 <LL_Get_Supported_Features>
1005bd48:	79a0      	ldrb	r0, [r4, #6]
1005bd4a:	21f7      	movs	r1, #247	@ 0xf7
1005bd4c:	4001      	ands	r1, r0
1005bd4e:	71a1      	strb	r1, [r4, #6]
1005bd50:	2508      	movs	r5, #8
1005bd52:	4630      	mov	r0, r6
1005bd54:	9e03      	ldr	r6, [sp, #12]
1005bd56:	4631      	mov	r1, r6
1005bd58:	462a      	mov	r2, r5
1005bd5a:	f006 fb27 	bl	100623ac <char_copy>
1005bd5e:	9804      	ldr	r0, [sp, #16]
1005bd60:	2801      	cmp	r0, #1
1005bd62:	d108      	bne.n	1005bd76 <LL_feature_exchange+0x11a>
1005bd64:	7838      	ldrb	r0, [r7, #0]
1005bd66:	2802      	cmp	r0, #2
1005bd68:	d126      	bne.n	1005bdb8 <LL_feature_exchange+0x15c>
1005bd6a:	70a5      	strb	r5, [r4, #2]
1005bd6c:	e026      	b.n	1005bdbc <LL_feature_exchange+0x160>
1005bd6e:	4604      	mov	r4, r0
1005bd70:	2203      	movs	r2, #3
1005bd72:	9802      	ldr	r0, [sp, #8]
1005bd74:	e01c      	b.n	1005bdb0 <LL_feature_exchange+0x154>
1005bd76:	9801      	ldr	r0, [sp, #4]
1005bd78:	70a0      	strb	r0, [r4, #2]
1005bd7a:	78e0      	ldrb	r0, [r4, #3]
1005bd7c:	7a31      	ldrb	r1, [r6, #8]
1005bd7e:	4001      	ands	r1, r0
1005bd80:	70e1      	strb	r1, [r4, #3]
1005bd82:	7431      	strb	r1, [r6, #16]
1005bd84:	e01a      	b.n	1005bdbc <LL_feature_exchange+0x160>
1005bd86:	7839      	ldrb	r1, [r7, #0]
1005bd88:	2903      	cmp	r1, #3
1005bd8a:	d118      	bne.n	1005bdbe <LL_feature_exchange+0x162>
1005bd8c:	4604      	mov	r4, r0
1005bd8e:	7818      	ldrb	r0, [r3, #0]
1005bd90:	21f7      	movs	r1, #247	@ 0xf7
1005bd92:	4001      	ands	r1, r0
1005bd94:	7019      	strb	r1, [r3, #0]
1005bd96:	9b03      	ldr	r3, [sp, #12]
1005bd98:	7c58      	ldrb	r0, [r3, #17]
1005bd9a:	2800      	cmp	r0, #0
1005bd9c:	d005      	beq.n	1005bdaa <LL_feature_exchange+0x14e>
1005bd9e:	8f72      	ldrh	r2, [r6, #58]	@ 0x3a
1005bda0:	3308      	adds	r3, #8
1005bda2:	2080      	movs	r0, #128	@ 0x80
1005bda4:	211a      	movs	r1, #26
1005bda6:	f007 fd2f 	bl	10063808 <hci_le_read_remote_features_complete_event_push_noinline>
1005bdaa:	2203      	movs	r2, #3
1005bdac:	9802      	ldr	r0, [sp, #8]
1005bdae:	9904      	ldr	r1, [sp, #16]
1005bdb0:	f7fe fa36 	bl	1005a220 <llc_cpe_sm_disable>
1005bdb4:	4620      	mov	r0, r4
1005bdb6:	e002      	b.n	1005bdbe <LL_feature_exchange+0x162>
1005bdb8:	200e      	movs	r0, #14
1005bdba:	70a0      	strb	r0, [r4, #2]
1005bdbc:	9802      	ldr	r0, [sp, #8]
1005bdbe:	b005      	add	sp, #20
1005bdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1005bdc4 <LL_Get_Supported_Features>:
1005bdc4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005bdc6:	9000      	str	r0, [sp, #0]
1005bdc8:	f7fb ff01 	bl	10057bce <data_length_extension_csr_ucfg_weak>
1005bdcc:	4605      	mov	r5, r0
1005bdce:	f7fe ffac 	bl	1005ad2a <llc_priv_controller_privacy_csr_ucfg_weak>
1005bdd2:	b2c0      	uxtb	r0, r0
1005bdd4:	21c0      	movs	r1, #192	@ 0xc0
1005bdd6:	4341      	muls	r1, r0
1005bdd8:	0628      	lsls	r0, r5, #24
1005bdda:	0cc5      	lsrs	r5, r0, #19
1005bddc:	430d      	orrs	r5, r1
1005bdde:	2009      	movs	r0, #9
1005bde0:	0206      	lsls	r6, r0, #8
1005bde2:	f7f5 ff2c 	bl	10051c3e <phy_upd_csr_ucfg>
1005bde6:	b2c7      	uxtb	r7, r0
1005bde8:	4377      	muls	r7, r6
1005bdea:	432f      	orrs	r7, r5
1005bdec:	f002 f93b 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005bdf0:	0305      	lsls	r5, r0, #12
1005bdf2:	433d      	orrs	r5, r7
1005bdf4:	4e2c      	ldr	r6, [pc, #176]	@ (1005bea8 <__arm_cp.1_0>)
1005bdf6:	47b0      	blx	r6
1005bdf8:	b2c0      	uxtb	r0, r0
1005bdfa:	4f2c      	ldr	r7, [pc, #176]	@ (1005beac <__arm_cp.1_1>)
1005bdfc:	4347      	muls	r7, r0
1005bdfe:	432f      	orrs	r7, r5
1005be00:	200d      	movs	r0, #13
1005be02:	0685      	lsls	r5, r0, #26
1005be04:	f7fe ff78 	bl	1005acf8 <cis_csr_ucfg_weak>
1005be08:	b2c4      	uxtb	r4, r0
1005be0a:	436c      	muls	r4, r5
1005be0c:	433c      	orrs	r4, r7
1005be0e:	2073      	movs	r0, #115	@ 0x73
1005be10:	0445      	lsls	r5, r0, #17
1005be12:	f7fb fd97 	bl	10057944 <cte_csr_ucfg_weak>
1005be16:	b2c7      	uxtb	r7, r0
1005be18:	436f      	muls	r7, r5
1005be1a:	4327      	orrs	r7, r4
1005be1c:	f7fb fd92 	bl	10057944 <cte_csr_ucfg_weak>
1005be20:	4605      	mov	r5, r0
1005be22:	47b0      	blx	r6
1005be24:	4028      	ands	r0, r5
1005be26:	b2c0      	uxtb	r0, r0
1005be28:	2503      	movs	r5, #3
1005be2a:	04ec      	lsls	r4, r5, #19
1005be2c:	4344      	muls	r4, r0
1005be2e:	433c      	orrs	r4, r7
1005be30:	f7fe ff60 	bl	1005acf4 <bis_csr_ucfg_weak>
1005be34:	0780      	lsls	r0, r0, #30
1005be36:	4247      	negs	r7, r0
1005be38:	4327      	orrs	r7, r4
1005be3a:	f002 f90b 	bl	1005e054 <llc_get_channel_sel_algo2_enabled>
1005be3e:	0380      	lsls	r0, r0, #14
1005be40:	4338      	orrs	r0, r7
1005be42:	491b      	ldr	r1, [pc, #108]	@ (1005beb0 <__arm_cp.1_2>)
1005be44:	4301      	orrs	r1, r0
1005be46:	9101      	str	r1, [sp, #4]
1005be48:	f7fb fec3 	bl	10057bd2 <pcl_csr_ucfg_weak>
1005be4c:	b2c0      	uxtb	r0, r0
1005be4e:	240e      	movs	r4, #14
1005be50:	4344      	muls	r4, r0
1005be52:	f7ff f8ba 	bl	1005afca <chc_csr_ucfg_weak>
1005be56:	0600      	lsls	r0, r0, #24
1005be58:	0c47      	lsrs	r7, r0, #17
1005be5a:	4327      	orrs	r7, r4
1005be5c:	47b0      	blx	r6
1005be5e:	21f9      	movs	r1, #249	@ 0xf9
1005be60:	0109      	lsls	r1, r1, #4
1005be62:	0104      	lsls	r4, r0, #4
1005be64:	400c      	ands	r4, r1
1005be66:	433c      	orrs	r4, r7
1005be68:	022e      	lsls	r6, r5, #8
1005be6a:	f002 f8fc 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005be6e:	4605      	mov	r5, r0
1005be70:	4375      	muls	r5, r6
1005be72:	4325      	orrs	r5, r4
1005be74:	2001      	movs	r0, #1
1005be76:	02c4      	lsls	r4, r0, #11
1005be78:	f7fb feaf 	bl	10057bda <scan_csr_ucfg_weak>
1005be7c:	0600      	lsls	r0, r0, #24
1005be7e:	0b00      	lsrs	r0, r0, #12
1005be80:	1904      	adds	r4, r0, r4
1005be82:	f7fe ff45 	bl	1005ad10 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005be86:	b2c0      	uxtb	r0, r0
1005be88:	4360      	muls	r0, r4
1005be8a:	4328      	orrs	r0, r5
1005be8c:	2161      	movs	r1, #97	@ 0x61
1005be8e:	4301      	orrs	r1, r0
1005be90:	4808      	ldr	r0, [pc, #32]	@ (1005beb4 <__arm_cp.1_3>)
1005be92:	6800      	ldr	r0, [r0, #0]
1005be94:	6a00      	ldr	r0, [r0, #32]
1005be96:	4008      	ands	r0, r1
1005be98:	9002      	str	r0, [sp, #8]
1005be9a:	a901      	add	r1, sp, #4
1005be9c:	2208      	movs	r2, #8
1005be9e:	9800      	ldr	r0, [sp, #0]
1005bea0:	f7e9 ffea 	bl	10045e78 <BLEPLAT_MemCpy>
1005bea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005bea6:	46c0      	nop			@ (mov r8, r8)

1005bea8 <__arm_cp.1_0>:
1005bea8:	1005ad0d 	.word	0x1005ad0d

1005beac <__arm_cp.1_1>:
1005beac:	03002000 	.word	0x03002000

1005beb0 <__arm_cp.1_2>:
1005beb0:	0800001d 	.word	0x0800001d

1005beb4 <__arm_cp.1_3>:
1005beb4:	20001174 	.word	0x20001174

1005beb8 <LL_Read_Remote_Used_Features>:
1005beb8:	b570      	push	{r4, r5, r6, lr}
1005beba:	4604      	mov	r4, r0
1005bebc:	4608      	mov	r0, r1
1005bebe:	f7fc fb6b 	bl	10058598 <llc_conn_get_cntxt_per_p_from_handle>
1005bec2:	2800      	cmp	r0, #0
1005bec4:	d01c      	beq.n	1005bf00 <LL_Read_Remote_Used_Features+0x48>
1005bec6:	4606      	mov	r6, r0
1005bec8:	362c      	adds	r6, #44	@ 0x2c
1005beca:	7831      	ldrb	r1, [r6, #0]
1005becc:	2903      	cmp	r1, #3
1005bece:	d107      	bne.n	1005bee0 <LL_Read_Remote_Used_Features+0x28>
1005bed0:	2185      	movs	r1, #133	@ 0x85
1005bed2:	0049      	lsls	r1, r1, #1
1005bed4:	1840      	adds	r0, r0, r1
1005bed6:	7800      	ldrb	r0, [r0, #0]
1005bed8:	0700      	lsls	r0, r0, #28
1005beda:	d401      	bmi.n	1005bee0 <LL_Read_Remote_Used_Features+0x28>
1005bedc:	241a      	movs	r4, #26
1005bede:	e024      	b.n	1005bf2a <LL_Read_Remote_Used_Features+0x72>
1005bee0:	7930      	ldrb	r0, [r6, #4]
1005bee2:	2101      	movs	r1, #1
1005bee4:	f7fe f9c0 	bl	1005a268 <llc_cpe_sm_get_active>
1005bee8:	2800      	cmp	r0, #0
1005beea:	d00d      	beq.n	1005bf08 <LL_Read_Remote_Used_Features+0x50>
1005beec:	2c00      	cmp	r4, #0
1005beee:	d109      	bne.n	1005bf04 <LL_Read_Remote_Used_Features+0x4c>
1005bef0:	7930      	ldrb	r0, [r6, #4]
1005bef2:	2101      	movs	r1, #1
1005bef4:	f7fd ffa8 	bl	10059e48 <llc_cpe_get_cpf_id_from_sm>
1005bef8:	2803      	cmp	r0, #3
1005befa:	d103      	bne.n	1005bf04 <LL_Read_Remote_Used_Features+0x4c>
1005befc:	2400      	movs	r4, #0
1005befe:	e014      	b.n	1005bf2a <LL_Read_Remote_Used_Features+0x72>
1005bf00:	2402      	movs	r4, #2
1005bf02:	e012      	b.n	1005bf2a <LL_Read_Remote_Used_Features+0x72>
1005bf04:	243a      	movs	r4, #58	@ 0x3a
1005bf06:	e010      	b.n	1005bf2a <LL_Read_Remote_Used_Features+0x72>
1005bf08:	7930      	ldrb	r0, [r6, #4]
1005bf0a:	2501      	movs	r5, #1
1005bf0c:	4629      	mov	r1, r5
1005bf0e:	f7fe f9b5 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005bf12:	7444      	strb	r4, [r0, #17]
1005bf14:	7930      	ldrb	r0, [r6, #4]
1005bf16:	4629      	mov	r1, r5
1005bf18:	f7fe f9c8 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005bf1c:	7930      	ldrb	r0, [r6, #4]
1005bf1e:	2203      	movs	r2, #3
1005bf20:	2400      	movs	r4, #0
1005bf22:	4629      	mov	r1, r5
1005bf24:	4623      	mov	r3, r4
1005bf26:	f7fe f98b 	bl	1005a240 <llc_cpe_sm_enable>
1005bf2a:	4620      	mov	r0, r4
1005bf2c:	bd70      	pop	{r4, r5, r6, pc}

1005bf2e <llc_len_upd_register_cpf_ucfg_weak>:
1005bf2e:	b580      	push	{r7, lr}
1005bf30:	2006      	movs	r0, #6
1005bf32:	2100      	movs	r1, #0
1005bf34:	f7fe f96c 	bl	1005a210 <llc_cpe_register_cpf>
1005bf38:	bd80      	pop	{r7, pc}

1005bf3a <LLC_update_le_ping_params>:
1005bf3a:	b5b0      	push	{r4, r5, r7, lr}
1005bf3c:	4615      	mov	r5, r2
1005bf3e:	460c      	mov	r4, r1
1005bf40:	f7fc fb1c 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005bf44:	21e6      	movs	r1, #230	@ 0xe6
1005bf46:	5a43      	ldrh	r3, [r0, r1]
1005bf48:	2d00      	cmp	r5, #0
1005bf4a:	461a      	mov	r2, r3
1005bf4c:	d000      	beq.n	1005bf50 <LLC_update_le_ping_params+0x16>
1005bf4e:	4622      	mov	r2, r4
1005bf50:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
1005bf52:	4601      	mov	r1, r0
1005bf54:	31e6      	adds	r1, #230	@ 0xe6
1005bf56:	8b0d      	ldrh	r5, [r1, #24]
1005bf58:	4365      	muls	r5, r4
1005bf5a:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005bf5c:	300a      	adds	r0, #10
1005bf5e:	4368      	muls	r0, r5
1005bf60:	0b00      	lsrs	r0, r0, #12
1005bf62:	b284      	uxth	r4, r0
1005bf64:	1d64      	adds	r4, r4, #5
1005bf66:	4294      	cmp	r4, r2
1005bf68:	d300      	bcc.n	1005bf6c <LLC_update_le_ping_params+0x32>
1005bf6a:	4622      	mov	r2, r4
1005bf6c:	b294      	uxth	r4, r2
1005bf6e:	42a3      	cmp	r3, r4
1005bf70:	d00b      	beq.n	1005bf8a <LLC_update_le_ping_params+0x50>
1005bf72:	8048      	strh	r0, [r1, #2]
1005bf74:	800a      	strh	r2, [r1, #0]
1005bf76:	7908      	ldrb	r0, [r1, #4]
1005bf78:	2801      	cmp	r0, #1
1005bf7a:	d006      	beq.n	1005bf8a <LLC_update_le_ping_params+0x50>
1005bf7c:	2002      	movs	r0, #2
1005bf7e:	7108      	strb	r0, [r1, #4]
1005bf80:	2013      	movs	r0, #19
1005bf82:	f006 f88b 	bl	1006209c <tsk_notify_idx>
1005bf86:	f7e7 ff8a 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005bf8a:	bdb0      	pop	{r4, r5, r7, pc}

1005bf8c <LLC_init_le_ping_params>:
1005bf8c:	b510      	push	{r4, lr}
1005bf8e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
1005bf90:	4601      	mov	r1, r0
1005bf92:	31e6      	adds	r1, #230	@ 0xe6
1005bf94:	8b0b      	ldrh	r3, [r1, #24]
1005bf96:	4353      	muls	r3, r2
1005bf98:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
1005bf9a:	320a      	adds	r2, #10
1005bf9c:	435a      	muls	r2, r3
1005bf9e:	0b12      	lsrs	r2, r2, #12
1005bfa0:	b293      	uxth	r3, r2
1005bfa2:	4c08      	ldr	r4, [pc, #32]	@ (1005bfc4 <__arm_cp.3_0>)
1005bfa4:	42a3      	cmp	r3, r4
1005bfa6:	d800      	bhi.n	1005bfaa <LLC_init_le_ping_params+0x1e>
1005bfa8:	4623      	mov	r3, r4
1005bfaa:	1d5b      	adds	r3, r3, #5
1005bfac:	24e6      	movs	r4, #230	@ 0xe6
1005bfae:	5303      	strh	r3, [r0, r4]
1005bfb0:	2001      	movs	r0, #1
1005bfb2:	7108      	strb	r0, [r1, #4]
1005bfb4:	804a      	strh	r2, [r1, #2]
1005bfb6:	2013      	movs	r0, #19
1005bfb8:	f006 f870 	bl	1006209c <tsk_notify_idx>
1005bfbc:	f7e7 ff6f 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005bfc0:	bd10      	pop	{r4, pc}
1005bfc2:	46c0      	nop			@ (mov r8, r8)

1005bfc4 <__arm_cp.3_0>:
1005bfc4:	00000bb3 	.word	0x00000bb3

1005bfc8 <LLC_authenticated_payload_timeout_processing>:
1005bfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bfca:	b089      	sub	sp, #36	@ 0x24
1005bfcc:	2400      	movs	r4, #0
1005bfce:	4620      	mov	r0, r4
1005bfd0:	f7fc fad4 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005bfd4:	9000      	str	r0, [sp, #0]
1005bfd6:	2001      	movs	r0, #1
1005bfd8:	9008      	str	r0, [sp, #32]
1005bfda:	4841      	ldr	r0, [pc, #260]	@ (1005c0e0 <__arm_cp.5_0>)
1005bfdc:	6800      	ldr	r0, [r0, #0]
1005bfde:	2134      	movs	r1, #52	@ 0x34
1005bfe0:	5c40      	ldrb	r0, [r0, r1]
1005bfe2:	4284      	cmp	r4, r0
1005bfe4:	d27a      	bcs.n	1005c0dc <LLC_authenticated_payload_timeout_processing+0x114>
1005bfe6:	2033      	movs	r0, #51	@ 0x33
1005bfe8:	00c0      	lsls	r0, r0, #3
1005bfea:	9405      	str	r4, [sp, #20]
1005bfec:	4360      	muls	r0, r4
1005bfee:	9900      	ldr	r1, [sp, #0]
1005bff0:	180d      	adds	r5, r1, r0
1005bff2:	202c      	movs	r0, #44	@ 0x2c
1005bff4:	5c28      	ldrb	r0, [r5, r0]
1005bff6:	21fe      	movs	r1, #254	@ 0xfe
1005bff8:	4001      	ands	r1, r0
1005bffa:	2902      	cmp	r1, #2
1005bffc:	d16b      	bne.n	1005c0d6 <LLC_authenticated_payload_timeout_processing+0x10e>
1005bffe:	2101      	movs	r1, #1
1005c000:	9c00      	ldr	r4, [sp, #0]
1005c002:	4620      	mov	r0, r4
1005c004:	9107      	str	r1, [sp, #28]
1005c006:	f7fc fd47 	bl	10058a98 <llc_conn_get_enc_on>
1005c00a:	4606      	mov	r6, r0
1005c00c:	2100      	movs	r1, #0
1005c00e:	4620      	mov	r0, r4
1005c010:	9101      	str	r1, [sp, #4]
1005c012:	f7fc fd41 	bl	10058a98 <llc_conn_get_enc_on>
1005c016:	1e41      	subs	r1, r0, #1
1005c018:	4188      	sbcs	r0, r1
1005c01a:	2e00      	cmp	r6, #0
1005c01c:	9908      	ldr	r1, [sp, #32]
1005c01e:	9104      	str	r1, [sp, #16]
1005c020:	d100      	bne.n	1005c024 <LLC_authenticated_payload_timeout_processing+0x5c>
1005c022:	9004      	str	r0, [sp, #16]
1005c024:	462b      	mov	r3, r5
1005c026:	4628      	mov	r0, r5
1005c028:	30e8      	adds	r0, #232	@ 0xe8
1005c02a:	9003      	str	r0, [sp, #12]
1005c02c:	4628      	mov	r0, r5
1005c02e:	30e6      	adds	r0, #230	@ 0xe6
1005c030:	9002      	str	r0, [sp, #8]
1005c032:	33ea      	adds	r3, #234	@ 0xea
1005c034:	9f08      	ldr	r7, [sp, #32]
1005c036:	9306      	str	r3, [sp, #24]
1005c038:	781c      	ldrb	r4, [r3, #0]
1005c03a:	26f0      	movs	r6, #240	@ 0xf0
1005c03c:	4026      	ands	r6, r4
1005c03e:	250f      	movs	r5, #15
1005c040:	4025      	ands	r5, r4
1005c042:	2d03      	cmp	r5, #3
1005c044:	d01f      	beq.n	1005c086 <LLC_authenticated_payload_timeout_processing+0xbe>
1005c046:	2d02      	cmp	r5, #2
1005c048:	d00b      	beq.n	1005c062 <LLC_authenticated_payload_timeout_processing+0x9a>
1005c04a:	2d01      	cmp	r5, #1
1005c04c:	d12b      	bne.n	1005c0a6 <LLC_authenticated_payload_timeout_processing+0xde>
1005c04e:	9804      	ldr	r0, [sp, #16]
1005c050:	2800      	cmp	r0, #0
1005c052:	d02c      	beq.n	1005c0ae <LLC_authenticated_payload_timeout_processing+0xe6>
1005c054:	2013      	movs	r0, #19
1005c056:	2101      	movs	r1, #1
1005c058:	f006 f832 	bl	100620c0 <tsk_wait_resource_idx>
1005c05c:	9b06      	ldr	r3, [sp, #24]
1005c05e:	2502      	movs	r5, #2
1005c060:	e025      	b.n	1005c0ae <LLC_authenticated_payload_timeout_processing+0xe6>
1005c062:	9803      	ldr	r0, [sp, #12]
1005c064:	8800      	ldrh	r0, [r0, #0]
1005c066:	9902      	ldr	r1, [sp, #8]
1005c068:	8809      	ldrh	r1, [r1, #0]
1005c06a:	1a08      	subs	r0, r1, r0
1005c06c:	230a      	movs	r3, #10
1005c06e:	4343      	muls	r3, r0
1005c070:	481c      	ldr	r0, [pc, #112]	@ (1005c0e4 <__arm_cp.5_1>)
1005c072:	6800      	ldr	r0, [r0, #0]
1005c074:	9905      	ldr	r1, [sp, #20]
1005c076:	b2c9      	uxtb	r1, r1
1005c078:	30a8      	adds	r0, #168	@ 0xa8
1005c07a:	2201      	movs	r2, #1
1005c07c:	f006 f8b7 	bl	100621ee <CST_start>
1005c080:	9b06      	ldr	r3, [sp, #24]
1005c082:	2503      	movs	r5, #3
1005c084:	e013      	b.n	1005c0ae <LLC_authenticated_payload_timeout_processing+0xe6>
1005c086:	06a0      	lsls	r0, r4, #26
1005c088:	d511      	bpl.n	1005c0ae <LLC_authenticated_payload_timeout_processing+0xe6>
1005c08a:	9804      	ldr	r0, [sp, #16]
1005c08c:	2800      	cmp	r0, #0
1005c08e:	d00c      	beq.n	1005c0aa <LLC_authenticated_payload_timeout_processing+0xe2>
1005c090:	9805      	ldr	r0, [sp, #20]
1005c092:	b2c0      	uxtb	r0, r0
1005c094:	f000 f828 	bl	1005c0e8 <LLC_authenticated_payload_timeout_start_le_ping>
1005c098:	2800      	cmp	r0, #0
1005c09a:	d001      	beq.n	1005c0a0 <LLC_authenticated_payload_timeout_processing+0xd8>
1005c09c:	26d0      	movs	r6, #208	@ 0xd0
1005c09e:	4026      	ands	r6, r4
1005c0a0:	9808      	ldr	r0, [sp, #32]
1005c0a2:	9b06      	ldr	r3, [sp, #24]
1005c0a4:	e004      	b.n	1005c0b0 <LLC_authenticated_payload_timeout_processing+0xe8>
1005c0a6:	9801      	ldr	r0, [sp, #4]
1005c0a8:	e002      	b.n	1005c0b0 <LLC_authenticated_payload_timeout_processing+0xe8>
1005c0aa:	26d0      	movs	r6, #208	@ 0xd0
1005c0ac:	4026      	ands	r6, r4
1005c0ae:	9808      	ldr	r0, [sp, #32]
1005c0b0:	f3ef 8110 	mrs	r1, PRIMASK
1005c0b4:	b672      	cpsid	i
1005c0b6:	7819      	ldrb	r1, [r3, #0]
1005c0b8:	428c      	cmp	r4, r1
1005c0ba:	d103      	bne.n	1005c0c4 <LLC_authenticated_payload_timeout_processing+0xfc>
1005c0bc:	432e      	orrs	r6, r5
1005c0be:	701e      	strb	r6, [r3, #0]
1005c0c0:	2100      	movs	r1, #0
1005c0c2:	e002      	b.n	1005c0ca <LLC_authenticated_payload_timeout_processing+0x102>
1005c0c4:	9907      	ldr	r1, [sp, #28]
1005c0c6:	400f      	ands	r7, r1
1005c0c8:	4639      	mov	r1, r7
1005c0ca:	1e4a      	subs	r2, r1, #1
1005c0cc:	4191      	sbcs	r1, r2
1005c0ce:	b662      	cpsie	i
1005c0d0:	2700      	movs	r7, #0
1005c0d2:	4208      	tst	r0, r1
1005c0d4:	d1b0      	bne.n	1005c038 <LLC_authenticated_payload_timeout_processing+0x70>
1005c0d6:	9c05      	ldr	r4, [sp, #20]
1005c0d8:	1c64      	adds	r4, r4, #1
1005c0da:	e77e      	b.n	1005bfda <LLC_authenticated_payload_timeout_processing+0x12>
1005c0dc:	b009      	add	sp, #36	@ 0x24
1005c0de:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005c0e0 <__arm_cp.5_0>:
1005c0e0:	20001120 	.word	0x20001120

1005c0e4 <__arm_cp.5_1>:
1005c0e4:	20001174 	.word	0x20001174

1005c0e8 <LLC_authenticated_payload_timeout_start_le_ping>:
1005c0e8:	b570      	push	{r4, r5, r6, lr}
1005c0ea:	4605      	mov	r5, r0
1005c0ec:	2101      	movs	r1, #1
1005c0ee:	f7fe f8bb 	bl	1005a268 <llc_cpe_sm_get_active>
1005c0f2:	4604      	mov	r4, r0
1005c0f4:	2801      	cmp	r0, #1
1005c0f6:	d104      	bne.n	1005c102 <LLC_authenticated_payload_timeout_start_le_ping+0x1a>
1005c0f8:	2013      	movs	r0, #19
1005c0fa:	2101      	movs	r1, #1
1005c0fc:	f005 ffe0 	bl	100620c0 <tsk_wait_resource_idx>
1005c100:	e00a      	b.n	1005c118 <LLC_authenticated_payload_timeout_start_le_ping+0x30>
1005c102:	2601      	movs	r6, #1
1005c104:	4628      	mov	r0, r5
1005c106:	4631      	mov	r1, r6
1005c108:	f7fe f8d0 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005c10c:	2208      	movs	r2, #8
1005c10e:	2300      	movs	r3, #0
1005c110:	4628      	mov	r0, r5
1005c112:	4631      	mov	r1, r6
1005c114:	f7fe f894 	bl	1005a240 <llc_cpe_sm_enable>
1005c118:	4260      	negs	r0, r4
1005c11a:	4160      	adcs	r0, r4
1005c11c:	bd70      	pop	{r4, r5, r6, pc}
	...

1005c120 <LLC_authenticated_payload_timeout_cb>:
1005c120:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005c122:	4604      	mov	r4, r0
1005c124:	f7fc fa2a 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005c128:	4605      	mov	r5, r0
1005c12a:	202c      	movs	r0, #44	@ 0x2c
1005c12c:	5c28      	ldrb	r0, [r5, r0]
1005c12e:	21fe      	movs	r1, #254	@ 0xfe
1005c130:	4001      	ands	r1, r0
1005c132:	2902      	cmp	r1, #2
1005c134:	d15a      	bne.n	1005c1ec <LLC_authenticated_payload_timeout_cb+0xcc>
1005c136:	9402      	str	r4, [sp, #8]
1005c138:	462f      	mov	r7, r5
1005c13a:	37e6      	adds	r7, #230	@ 0xe6
1005c13c:	793a      	ldrb	r2, [r7, #4]
1005c13e:	06d0      	lsls	r0, r2, #27
1005c140:	d419      	bmi.n	1005c176 <LLC_authenticated_payload_timeout_cb+0x56>
1005c142:	24f0      	movs	r4, #240	@ 0xf0
1005c144:	9201      	str	r2, [sp, #4]
1005c146:	4014      	ands	r4, r2
1005c148:	2101      	movs	r1, #1
1005c14a:	4628      	mov	r0, r5
1005c14c:	f7fc fca4 	bl	10058a98 <llc_conn_get_enc_on>
1005c150:	4606      	mov	r6, r0
1005c152:	2100      	movs	r1, #0
1005c154:	4628      	mov	r0, r5
1005c156:	f7fc fc9f 	bl	10058a98 <llc_conn_get_enc_on>
1005c15a:	4330      	orrs	r0, r6
1005c15c:	d006      	beq.n	1005c16c <LLC_authenticated_payload_timeout_cb+0x4c>
1005c15e:	9802      	ldr	r0, [sp, #8]
1005c160:	f7ff ffc2 	bl	1005c0e8 <LLC_authenticated_payload_timeout_start_le_ping>
1005c164:	2801      	cmp	r0, #1
1005c166:	d001      	beq.n	1005c16c <LLC_authenticated_payload_timeout_cb+0x4c>
1005c168:	2020      	movs	r0, #32
1005c16a:	4304      	orrs	r4, r0
1005c16c:	9a01      	ldr	r2, [sp, #4]
1005c16e:	2610      	movs	r6, #16
1005c170:	4326      	orrs	r6, r4
1005c172:	8878      	ldrh	r0, [r7, #2]
1005c174:	e027      	b.n	1005c1c6 <LLC_authenticated_payload_timeout_cb+0xa6>
1005c176:	26c0      	movs	r6, #192	@ 0xc0
1005c178:	481d      	ldr	r0, [pc, #116]	@ (1005c1f0 <__arm_cp.7_0>)
1005c17a:	6800      	ldr	r0, [r0, #0]
1005c17c:	2140      	movs	r1, #64	@ 0x40
1005c17e:	5640      	ldrsb	r0, [r0, r1]
1005c180:	2800      	cmp	r0, #0
1005c182:	d51c      	bpl.n	1005c1be <LLC_authenticated_payload_timeout_cb+0x9e>
1005c184:	8f68      	ldrh	r0, [r5, #58]	@ 0x3a
1005c186:	9001      	str	r0, [sp, #4]
1005c188:	481a      	ldr	r0, [pc, #104]	@ (1005c1f4 <__arm_cp.7_1>)
1005c18a:	6800      	ldr	r0, [r0, #0]
1005c18c:	6980      	ldr	r0, [r0, #24]
1005c18e:	2142      	movs	r1, #66	@ 0x42
1005c190:	4614      	mov	r4, r2
1005c192:	2223      	movs	r2, #35	@ 0x23
1005c194:	2502      	movs	r5, #2
1005c196:	462b      	mov	r3, r5
1005c198:	f7f7 f966 	bl	10053468 <aci_event_fifo_push_header>
1005c19c:	4622      	mov	r2, r4
1005c19e:	2800      	cmp	r0, #0
1005c1a0:	d00d      	beq.n	1005c1be <LLC_authenticated_payload_timeout_cb+0x9e>
1005c1a2:	4601      	mov	r1, r0
1005c1a4:	9a01      	ldr	r2, [sp, #4]
1005c1a6:	71c2      	strb	r2, [r0, #7]
1005c1a8:	7185      	strb	r5, [r0, #6]
1005c1aa:	2057      	movs	r0, #87	@ 0x57
1005c1ac:	7148      	strb	r0, [r1, #5]
1005c1ae:	2004      	movs	r0, #4
1005c1b0:	7108      	strb	r0, [r1, #4]
1005c1b2:	0a10      	lsrs	r0, r2, #8
1005c1b4:	7208      	strb	r0, [r1, #8]
1005c1b6:	2042      	movs	r0, #66	@ 0x42
1005c1b8:	f7f7 f9f3 	bl	100535a2 <aci_event_fifo_push>
1005c1bc:	4622      	mov	r2, r4
1005c1be:	4016      	ands	r6, r2
1005c1c0:	8878      	ldrh	r0, [r7, #2]
1005c1c2:	8839      	ldrh	r1, [r7, #0]
1005c1c4:	1a08      	subs	r0, r1, r0
1005c1c6:	230a      	movs	r3, #10
1005c1c8:	4343      	muls	r3, r0
1005c1ca:	f3ef 8010 	mrs	r0, PRIMASK
1005c1ce:	b672      	cpsid	i
1005c1d0:	7938      	ldrb	r0, [r7, #4]
1005c1d2:	4282      	cmp	r2, r0
1005c1d4:	9902      	ldr	r1, [sp, #8]
1005c1d6:	d102      	bne.n	1005c1de <LLC_authenticated_payload_timeout_cb+0xbe>
1005c1d8:	2003      	movs	r0, #3
1005c1da:	4306      	orrs	r6, r0
1005c1dc:	713e      	strb	r6, [r7, #4]
1005c1de:	b662      	cpsie	i
1005c1e0:	4803      	ldr	r0, [pc, #12]	@ (1005c1f0 <__arm_cp.7_0>)
1005c1e2:	6800      	ldr	r0, [r0, #0]
1005c1e4:	30a8      	adds	r0, #168	@ 0xa8
1005c1e6:	2201      	movs	r2, #1
1005c1e8:	f006 f801 	bl	100621ee <CST_start>
1005c1ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c1ee:	46c0      	nop			@ (mov r8, r8)

1005c1f0 <__arm_cp.7_0>:
1005c1f0:	20001174 	.word	0x20001174

1005c1f4 <__arm_cp.7_1>:
1005c1f4:	20001124 	.word	0x20001124

1005c1f8 <LLC_authenticated_payload_timeout_reset>:
1005c1f8:	b510      	push	{r4, lr}
1005c1fa:	4604      	mov	r4, r0
1005c1fc:	20ea      	movs	r0, #234	@ 0xea
1005c1fe:	5c20      	ldrb	r0, [r4, r0]
1005c200:	2801      	cmp	r0, #1
1005c202:	d00d      	beq.n	1005c220 <LLC_authenticated_payload_timeout_reset+0x28>
1005c204:	4620      	mov	r0, r4
1005c206:	3030      	adds	r0, #48	@ 0x30
1005c208:	7801      	ldrb	r1, [r0, #0]
1005c20a:	4806      	ldr	r0, [pc, #24]	@ (1005c224 <__arm_cp.8_0>)
1005c20c:	6800      	ldr	r0, [r0, #0]
1005c20e:	30a8      	adds	r0, #168	@ 0xa8
1005c210:	f005 ffb7 	bl	10062182 <CST_stop>
1005c214:	20e6      	movs	r0, #230	@ 0xe6
1005c216:	2100      	movs	r1, #0
1005c218:	5221      	strh	r1, [r4, r0]
1005c21a:	34e6      	adds	r4, #230	@ 0xe6
1005c21c:	8061      	strh	r1, [r4, #2]
1005c21e:	7121      	strb	r1, [r4, #4]
1005c220:	bd10      	pop	{r4, pc}
1005c222:	46c0      	nop			@ (mov r8, r8)

1005c224 <__arm_cp.8_0>:
1005c224:	20001174 	.word	0x20001174

1005c228 <LLC_le_ping>:
1005c228:	b570      	push	{r4, r5, r6, lr}
1005c22a:	24ff      	movs	r4, #255	@ 0xff
1005c22c:	2a06      	cmp	r2, #6
1005c22e:	d835      	bhi.n	1005c29c <LLC_le_ping+0x74>
1005c230:	4605      	mov	r5, r0
1005c232:	0090      	lsls	r0, r2, #2
1005c234:	a201      	add	r2, pc, #4	@ (adr r2, 1005c23c <LLC_le_ping+0x14>)
1005c236:	5810      	ldr	r0, [r2, r0]
1005c238:	4687      	mov	pc, r0
1005c23a:	46c0      	nop			@ (mov r8, r8)
1005c23c:	1005c259 	.word	0x1005c259
1005c240:	1005c261 	.word	0x1005c261
1005c244:	1005c29d 	.word	0x1005c29d
1005c248:	1005c279 	.word	0x1005c279
1005c24c:	1005c29d 	.word	0x1005c29d
1005c250:	1005c29d 	.word	0x1005c29d
1005c254:	1005c27d 	.word	0x1005c27d
1005c258:	2901      	cmp	r1, #1
1005c25a:	d117      	bne.n	1005c28c <LLC_le_ping+0x64>
1005c25c:	2413      	movs	r4, #19
1005c25e:	e01d      	b.n	1005c29c <LLC_le_ping+0x74>
1005c260:	2600      	movs	r6, #0
1005c262:	4628      	mov	r0, r5
1005c264:	4631      	mov	r1, r6
1005c266:	f7fe f821 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005c26a:	2208      	movs	r2, #8
1005c26c:	4628      	mov	r0, r5
1005c26e:	4631      	mov	r1, r6
1005c270:	4633      	mov	r3, r6
1005c272:	f7fd ffe5 	bl	1005a240 <llc_cpe_sm_enable>
1005c276:	e011      	b.n	1005c29c <LLC_le_ping+0x74>
1005c278:	2101      	movs	r1, #1
1005c27a:	e008      	b.n	1005c28e <LLC_le_ping+0x66>
1005c27c:	2001      	movs	r0, #1
1005c27e:	7058      	strb	r0, [r3, #1]
1005c280:	2003      	movs	r0, #3
1005c282:	7018      	strb	r0, [r3, #0]
1005c284:	2901      	cmp	r1, #1
1005c286:	d007      	beq.n	1005c298 <LLC_le_ping+0x70>
1005c288:	2013      	movs	r0, #19
1005c28a:	e006      	b.n	1005c29a <LLC_le_ping+0x72>
1005c28c:	2100      	movs	r1, #0
1005c28e:	2208      	movs	r2, #8
1005c290:	4628      	mov	r0, r5
1005c292:	f7fd ffc5 	bl	1005a220 <llc_cpe_sm_disable>
1005c296:	e001      	b.n	1005c29c <LLC_le_ping+0x74>
1005c298:	2012      	movs	r0, #18
1005c29a:	7098      	strb	r0, [r3, #2]
1005c29c:	4620      	mov	r0, r4
1005c29e:	bd70      	pop	{r4, r5, r6, pc}

1005c2a0 <llc_conn_init_pcl_ctxt_ucfg_weak>:
1005c2a0:	4770      	bx	lr

1005c2a2 <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1005c2a2:	4770      	bx	lr

1005c2a4 <LLC_pcl_incr_rx_packets_ucfg_weak>:
1005c2a4:	4770      	bx	lr

1005c2a6 <LLC_pcl_update_avg_rssi_ucfg_weak>:
1005c2a6:	4770      	bx	lr

1005c2a8 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>:
1005c2a8:	b580      	push	{r7, lr}
1005c2aa:	f7fc f967 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005c2ae:	2141      	movs	r1, #65	@ 0x41
1005c2b0:	5c40      	ldrb	r0, [r0, r1]
1005c2b2:	4903      	ldr	r1, [pc, #12]	@ (1005c2c0 <__arm_cp.22_0>)
1005c2b4:	6809      	ldr	r1, [r1, #0]
1005c2b6:	7a49      	ldrb	r1, [r1, #9]
1005c2b8:	f7eb fc10 	bl	10047adc <BLEPLAT_CNTR_SmSetTxPwr>
1005c2bc:	bd80      	pop	{r7, pc}
1005c2be:	46c0      	nop			@ (mov r8, r8)

1005c2c0 <__arm_cp.22_0>:
1005c2c0:	20001174 	.word	0x20001174

1005c2c4 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1005c2c4:	4770      	bx	lr

1005c2c6 <LLC_pcl_offline_processing_ucfg_weak>:
1005c2c6:	2000      	movs	r0, #0
1005c2c8:	4770      	bx	lr

1005c2ca <llc_pcl_register_cpf_ucfg_weak>:
1005c2ca:	b580      	push	{r7, lr}
1005c2cc:	200b      	movs	r0, #11
1005c2ce:	2100      	movs	r1, #0
1005c2d0:	f7fd ff9e 	bl	1005a210 <llc_cpe_register_cpf>
1005c2d4:	bd80      	pop	{r7, pc}
	...

1005c2d8 <LL_phy_update_init>:
1005c2d8:	b580      	push	{r7, lr}
1005c2da:	f7fc f945 	bl	10058568 <llc_conn_get_cntxt_p>
1005c2de:	4902      	ldr	r1, [pc, #8]	@ (1005c2e8 <__arm_cp.3_0>)
1005c2e0:	61c1      	str	r1, [r0, #28]
1005c2e2:	2000      	movs	r0, #0
1005c2e4:	bd80      	pop	{r7, pc}
1005c2e6:	46c0      	nop			@ (mov r8, r8)

1005c2e8 <__arm_cp.3_0>:
1005c2e8:	07070002 	.word	0x07070002

1005c2ec <LL_phy_update_init_per_st_data>:
1005c2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c2ee:	4605      	mov	r5, r0
1005c2f0:	f7fc f978 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005c2f4:	2800      	cmp	r0, #0
1005c2f6:	d027      	beq.n	1005c348 <LL_phy_update_init_per_st_data+0x5c>
1005c2f8:	4604      	mov	r4, r0
1005c2fa:	f7fc f935 	bl	10058568 <llc_conn_get_cntxt_p>
1005c2fe:	4606      	mov	r6, r0
1005c300:	4628      	mov	r0, r5
1005c302:	f7fc f93b 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005c306:	4605      	mov	r5, r0
1005c308:	2100      	movs	r1, #0
1005c30a:	220e      	movs	r2, #14
1005c30c:	4620      	mov	r0, r4
1005c30e:	f7e9 fdc3 	bl	10045e98 <BLEPLAT_MemSet>
1005c312:	8bf0      	ldrh	r0, [r6, #30]
1005c314:	8060      	strh	r0, [r4, #2]
1005c316:	8bb0      	ldrh	r0, [r6, #28]
1005c318:	8020      	strh	r0, [r4, #0]
1005c31a:	2741      	movs	r7, #65	@ 0x41
1005c31c:	9500      	str	r5, [sp, #0]
1005c31e:	5de8      	ldrb	r0, [r5, r7]
1005c320:	f7eb fa14 	bl	1004774c <BLEPLAT_CNTR_SmGetTxPhy>
1005c324:	2501      	movs	r5, #1
1005c326:	2804      	cmp	r0, #4
1005c328:	d101      	bne.n	1005c32e <LL_phy_update_init_per_st_data+0x42>
1005c32a:	4606      	mov	r6, r0
1005c32c:	e001      	b.n	1005c332 <LL_phy_update_init_per_st_data+0x46>
1005c32e:	462e      	mov	r6, r5
1005c330:	4086      	lsls	r6, r0
1005c332:	9800      	ldr	r0, [sp, #0]
1005c334:	5dc0      	ldrb	r0, [r0, r7]
1005c336:	f7eb f9f8 	bl	1004772a <BLEPLAT_CNTR_SmGetRxPhy>
1005c33a:	71a6      	strb	r6, [r4, #6]
1005c33c:	2804      	cmp	r0, #4
1005c33e:	d101      	bne.n	1005c344 <LL_phy_update_init_per_st_data+0x58>
1005c340:	4605      	mov	r5, r0
1005c342:	e000      	b.n	1005c346 <LL_phy_update_init_per_st_data+0x5a>
1005c344:	4085      	lsls	r5, r0
1005c346:	71e5      	strb	r5, [r4, #7]
1005c348:	2000      	movs	r0, #0
1005c34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c34c <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>:
1005c34c:	6800      	ldr	r0, [r0, #0]
1005c34e:	21a9      	movs	r1, #169	@ 0xa9
1005c350:	0109      	lsls	r1, r1, #4
1005c352:	8181      	strh	r1, [r0, #12]
1005c354:	2229      	movs	r2, #41	@ 0x29
1005c356:	00d2      	lsls	r2, r2, #3
1005c358:	80c2      	strh	r2, [r0, #6]
1005c35a:	8141      	strh	r1, [r0, #10]
1005c35c:	8101      	strh	r1, [r0, #8]
1005c35e:	8082      	strh	r2, [r0, #4]
1005c360:	4770      	bx	lr

1005c362 <LL_phy_upd_pending>:
1005c362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c364:	4605      	mov	r5, r0
1005c366:	f7fc f909 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005c36a:	4604      	mov	r4, r0
1005c36c:	4628      	mov	r0, r5
1005c36e:	f7fc f939 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005c372:	4607      	mov	r7, r0
1005c374:	2011      	movs	r0, #17
1005c376:	0100      	lsls	r0, r0, #4
1005c378:	1825      	adds	r5, r4, r0
1005c37a:	4628      	mov	r0, r5
1005c37c:	f7fd fd53 	bl	10059e26 <llc_cpe_get_phy_upd_pending>
1005c380:	4606      	mov	r6, r0
1005c382:	2800      	cmp	r0, #0
1005c384:	d02c      	beq.n	1005c3e0 <LL_phy_upd_pending+0x7e>
1005c386:	342c      	adds	r4, #44	@ 0x2c
1005c388:	7820      	ldrb	r0, [r4, #0]
1005c38a:	2802      	cmp	r0, #2
1005c38c:	9500      	str	r5, [sp, #0]
1005c38e:	d106      	bne.n	1005c39e <LL_phy_upd_pending+0x3c>
1005c390:	7a38      	ldrb	r0, [r7, #8]
1005c392:	2800      	cmp	r0, #0
1005c394:	d100      	bne.n	1005c398 <LL_phy_upd_pending+0x36>
1005c396:	79b8      	ldrb	r0, [r7, #6]
1005c398:	71b8      	strb	r0, [r7, #6]
1005c39a:	7a7d      	ldrb	r5, [r7, #9]
1005c39c:	e005      	b.n	1005c3aa <LL_phy_upd_pending+0x48>
1005c39e:	7a78      	ldrb	r0, [r7, #9]
1005c3a0:	2800      	cmp	r0, #0
1005c3a2:	d100      	bne.n	1005c3a6 <LL_phy_upd_pending+0x44>
1005c3a4:	79b8      	ldrb	r0, [r7, #6]
1005c3a6:	71b8      	strb	r0, [r7, #6]
1005c3a8:	7a3d      	ldrb	r5, [r7, #8]
1005c3aa:	2d00      	cmp	r5, #0
1005c3ac:	d100      	bne.n	1005c3b0 <LL_phy_upd_pending+0x4e>
1005c3ae:	79fd      	ldrb	r5, [r7, #7]
1005c3b0:	71fd      	strb	r5, [r7, #7]
1005c3b2:	2804      	cmp	r0, #4
1005c3b4:	d104      	bne.n	1005c3c0 <LL_phy_upd_pending+0x5e>
1005c3b6:	8838      	ldrh	r0, [r7, #0]
1005c3b8:	2801      	cmp	r0, #1
1005c3ba:	d003      	beq.n	1005c3c4 <LL_phy_upd_pending+0x62>
1005c3bc:	2104      	movs	r1, #4
1005c3be:	e002      	b.n	1005c3c6 <LL_phy_upd_pending+0x64>
1005c3c0:	0841      	lsrs	r1, r0, #1
1005c3c2:	e000      	b.n	1005c3c6 <LL_phy_upd_pending+0x64>
1005c3c4:	2106      	movs	r1, #6
1005c3c6:	7d60      	ldrb	r0, [r4, #21]
1005c3c8:	f7eb fb73 	bl	10047ab2 <BLEPLAT_CNTR_SmSetTxPhy>
1005c3cc:	2d04      	cmp	r5, #4
1005c3ce:	d000      	beq.n	1005c3d2 <LL_phy_upd_pending+0x70>
1005c3d0:	086d      	lsrs	r5, r5, #1
1005c3d2:	7d60      	ldrb	r0, [r4, #21]
1005c3d4:	4629      	mov	r1, r5
1005c3d6:	f7eb fb00 	bl	100479da <BLEPLAT_CNTR_SmSetRxPhy>
1005c3da:	9800      	ldr	r0, [sp, #0]
1005c3dc:	f7fd fd1d 	bl	10059e1a <llc_cpe_clr_phy_upd_pending>
1005c3e0:	4630      	mov	r0, r6
1005c3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c3e4 <llc_phy_upd_register_cpf>:
1005c3e4:	b580      	push	{r7, lr}
1005c3e6:	2007      	movs	r0, #7
1005c3e8:	4901      	ldr	r1, [pc, #4]	@ (1005c3f0 <__arm_cp.10_0>)
1005c3ea:	f7fd ff11 	bl	1005a210 <llc_cpe_register_cpf>
1005c3ee:	bd80      	pop	{r7, pc}

1005c3f0 <__arm_cp.10_0>:
1005c3f0:	1005c3f5 	.word	0x1005c3f5

1005c3f4 <LL_phy_update>:
1005c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c3f6:	b087      	sub	sp, #28
1005c3f8:	461e      	mov	r6, r3
1005c3fa:	4617      	mov	r7, r2
1005c3fc:	460d      	mov	r5, r1
1005c3fe:	4604      	mov	r4, r0
1005c400:	f7fd ff3c 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005c404:	9003      	str	r0, [sp, #12]
1005c406:	9404      	str	r4, [sp, #16]
1005c408:	4620      	mov	r0, r4
1005c40a:	f7fc f8b7 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005c40e:	22ff      	movs	r2, #255	@ 0xff
1005c410:	2f07      	cmp	r7, #7
1005c412:	d900      	bls.n	1005c416 <LL_phy_update+0x22>
1005c414:	e19d      	b.n	1005c752 <LL_phy_update+0x35e>
1005c416:	4603      	mov	r3, r0
1005c418:	9502      	str	r5, [sp, #8]
1005c41a:	2055      	movs	r0, #85	@ 0x55
1005c41c:	0080      	lsls	r0, r0, #2
1005c41e:	181d      	adds	r5, r3, r0
1005c420:	461c      	mov	r4, r3
1005c422:	342c      	adds	r4, #44	@ 0x2c
1005c424:	007f      	lsls	r7, r7, #1
1005c426:	46c0      	nop			@ (mov r8, r8)
1005c428:	447f      	add	r7, pc
1005c42a:	88bf      	ldrh	r7, [r7, #4]
1005c42c:	007f      	lsls	r7, r7, #1
1005c42e:	44bf      	add	pc, r7
1005c430:	001c0007 	.word	0x001c0007
1005c434:	00500044 	.word	0x00500044
1005c438:	0190006a 	.word	0x0190006a
1005c43c:	00710026 	.word	0x00710026
1005c440:	7820      	ldrb	r0, [r4, #0]
1005c442:	9902      	ldr	r1, [sp, #8]
1005c444:	2901      	cmp	r1, #1
1005c446:	d000      	beq.n	1005c44a <LL_phy_update+0x56>
1005c448:	e0bc      	b.n	1005c5c4 <LL_phy_update+0x1d0>
1005c44a:	2802      	cmp	r0, #2
1005c44c:	d000      	beq.n	1005c450 <LL_phy_update+0x5c>
1005c44e:	e10b      	b.n	1005c668 <LL_phy_update+0x274>
1005c450:	9e03      	ldr	r6, [sp, #12]
1005c452:	7c30      	ldrb	r0, [r6, #16]
1005c454:	2803      	cmp	r0, #3
1005c456:	d100      	bne.n	1005c45a <LL_phy_update+0x66>
1005c458:	e166      	b.n	1005c728 <LL_phy_update+0x334>
1005c45a:	2801      	cmp	r0, #1
1005c45c:	d000      	beq.n	1005c460 <LL_phy_update+0x6c>
1005c45e:	e178      	b.n	1005c752 <LL_phy_update+0x35e>
1005c460:	2002      	movs	r0, #2
1005c462:	9903      	ldr	r1, [sp, #12]
1005c464:	7408      	strb	r0, [r1, #16]
1005c466:	2217      	movs	r2, #23
1005c468:	e173      	b.n	1005c752 <LL_phy_update+0x35e>
1005c46a:	78f0      	ldrb	r0, [r6, #3]
1005c46c:	a905      	add	r1, sp, #20
1005c46e:	7088      	strb	r0, [r1, #2]
1005c470:	7930      	ldrb	r0, [r6, #4]
1005c472:	70c8      	strb	r0, [r1, #3]
1005c474:	9804      	ldr	r0, [sp, #16]
1005c476:	4614      	mov	r4, r2
1005c478:	f000 fae1 	bl	1005ca3e <LL_process_phy_req_rcpt>
1005c47c:	e168      	b.n	1005c750 <LL_phy_update+0x35c>
1005c47e:	2065      	movs	r0, #101	@ 0x65
1005c480:	0080      	lsls	r0, r0, #2
1005c482:	181d      	adds	r5, r3, r0
1005c484:	7820      	ldrb	r0, [r4, #0]
1005c486:	9902      	ldr	r1, [sp, #8]
1005c488:	2901      	cmp	r1, #1
1005c48a:	d174      	bne.n	1005c576 <LL_phy_update+0x182>
1005c48c:	2802      	cmp	r0, #2
1005c48e:	9903      	ldr	r1, [sp, #12]
1005c490:	d000      	beq.n	1005c494 <LL_phy_update+0xa0>
1005c492:	e0d3      	b.n	1005c63c <LL_phy_update+0x248>
1005c494:	7c08      	ldrb	r0, [r1, #16]
1005c496:	2802      	cmp	r0, #2
1005c498:	d100      	bne.n	1005c49c <LL_phy_update+0xa8>
1005c49a:	e15d      	b.n	1005c758 <LL_phy_update+0x364>
1005c49c:	2800      	cmp	r0, #0
1005c49e:	d000      	beq.n	1005c4a2 <LL_phy_update+0xae>
1005c4a0:	e157      	b.n	1005c752 <LL_phy_update+0x35e>
1005c4a2:	2016      	movs	r0, #22
1005c4a4:	70b0      	strb	r0, [r6, #2]
1005c4a6:	2003      	movs	r0, #3
1005c4a8:	7070      	strb	r0, [r6, #1]
1005c4aa:	7030      	strb	r0, [r6, #0]
1005c4ac:	7cc8      	ldrb	r0, [r1, #19]
1005c4ae:	70f0      	strb	r0, [r6, #3]
1005c4b0:	7d08      	ldrb	r0, [r1, #20]
1005c4b2:	7130      	strb	r0, [r6, #4]
1005c4b4:	2001      	movs	r0, #1
1005c4b6:	7408      	strb	r0, [r1, #16]
1005c4b8:	e14b      	b.n	1005c752 <LL_phy_update+0x35e>
1005c4ba:	78f1      	ldrb	r1, [r6, #3]
1005c4bc:	a805      	add	r0, sp, #20
1005c4be:	7081      	strb	r1, [r0, #2]
1005c4c0:	7931      	ldrb	r1, [r6, #4]
1005c4c2:	70c1      	strb	r1, [r0, #3]
1005c4c4:	782d      	ldrb	r5, [r5, #0]
1005c4c6:	4616      	mov	r6, r2
1005c4c8:	2d07      	cmp	r5, #7
1005c4ca:	d100      	bne.n	1005c4ce <LL_phy_update+0xda>
1005c4cc:	e094      	b.n	1005c5f8 <LL_phy_update+0x204>
1005c4ce:	2102      	movs	r1, #2
1005c4d0:	e093      	b.n	1005c5fa <LL_phy_update+0x206>
1005c4d2:	78b0      	ldrb	r0, [r6, #2]
1005c4d4:	2807      	cmp	r0, #7
1005c4d6:	d100      	bne.n	1005c4da <LL_phy_update+0xe6>
1005c4d8:	e0d7      	b.n	1005c68a <LL_phy_update+0x296>
1005c4da:	2811      	cmp	r0, #17
1005c4dc:	9f04      	ldr	r7, [sp, #16]
1005c4de:	d100      	bne.n	1005c4e2 <LL_phy_update+0xee>
1005c4e0:	e0f0      	b.n	1005c6c4 <LL_phy_update+0x2d0>
1005c4e2:	2818      	cmp	r0, #24
1005c4e4:	d100      	bne.n	1005c4e8 <LL_phy_update+0xf4>
1005c4e6:	e103      	b.n	1005c6f0 <LL_phy_update+0x2fc>
1005c4e8:	2817      	cmp	r0, #23
1005c4ea:	d000      	beq.n	1005c4ee <LL_phy_update+0xfa>
1005c4ec:	e131      	b.n	1005c752 <LL_phy_update+0x35e>
1005c4ee:	a905      	add	r1, sp, #20
1005c4f0:	2000      	movs	r0, #0
1005c4f2:	7108      	strb	r0, [r1, #4]
1005c4f4:	78f0      	ldrb	r0, [r6, #3]
1005c4f6:	7088      	strb	r0, [r1, #2]
1005c4f8:	7930      	ldrb	r0, [r6, #4]
1005c4fa:	70c8      	strb	r0, [r1, #3]
1005c4fc:	4638      	mov	r0, r7
1005c4fe:	4614      	mov	r4, r2
1005c500:	f000 f9df 	bl	1005c8c2 <LL_compute_phy_upd_ind>
1005c504:	e124      	b.n	1005c750 <LL_phy_update+0x35c>
1005c506:	78b0      	ldrb	r0, [r6, #2]
1005c508:	4614      	mov	r4, r2
1005c50a:	2816      	cmp	r0, #22
1005c50c:	d100      	bne.n	1005c510 <LL_phy_update+0x11c>
1005c50e:	e089      	b.n	1005c624 <LL_phy_update+0x230>
1005c510:	212a      	movs	r1, #42	@ 0x2a
1005c512:	e088      	b.n	1005c626 <LL_phy_update+0x232>
1005c514:	9201      	str	r2, [sp, #4]
1005c516:	3396      	adds	r3, #150	@ 0x96
1005c518:	9300      	str	r3, [sp, #0]
1005c51a:	9e04      	ldr	r6, [sp, #16]
1005c51c:	4630      	mov	r0, r6
1005c51e:	9f03      	ldr	r7, [sp, #12]
1005c520:	4639      	mov	r1, r7
1005c522:	f000 f9b1 	bl	1005c888 <LL_reset_max_tx_data_frag>
1005c526:	7d61      	ldrb	r1, [r4, #21]
1005c528:	4630      	mov	r0, r6
1005c52a:	f7fe ffb5 	bl	1005b498 <LLC_connection_cte_response_disable_ucfg_weak>
1005c52e:	9b00      	ldr	r3, [sp, #0]
1005c530:	8879      	ldrh	r1, [r7, #2]
1005c532:	8838      	ldrh	r0, [r7, #0]
1005c534:	881a      	ldrh	r2, [r3, #0]
1005c536:	4290      	cmp	r0, r2
1005c538:	d102      	bne.n	1005c540 <LL_phy_update+0x14c>
1005c53a:	885a      	ldrh	r2, [r3, #2]
1005c53c:	4291      	cmp	r1, r2
1005c53e:	d00a      	beq.n	1005c556 <LL_phy_update+0x162>
1005c540:	8059      	strh	r1, [r3, #2]
1005c542:	8018      	strh	r0, [r3, #0]
1005c544:	f3ef 8010 	mrs	r0, PRIMASK
1005c548:	b672      	cpsid	i
1005c54a:	2001      	movs	r0, #1
1005c54c:	0240      	lsls	r0, r0, #9
1005c54e:	8fe9      	ldrh	r1, [r5, #62]	@ 0x3e
1005c550:	4301      	orrs	r1, r0
1005c552:	87e9      	strh	r1, [r5, #62]	@ 0x3e
1005c554:	b662      	cpsie	i
1005c556:	f3ef 8010 	mrs	r0, PRIMASK
1005c55a:	b672      	cpsid	i
1005c55c:	2001      	movs	r0, #1
1005c55e:	0200      	lsls	r0, r0, #8
1005c560:	8fe9      	ldrh	r1, [r5, #62]	@ 0x3e
1005c562:	4301      	orrs	r1, r0
1005c564:	87e9      	strh	r1, [r5, #62]	@ 0x3e
1005c566:	b662      	cpsie	i
1005c568:	2207      	movs	r2, #7
1005c56a:	9804      	ldr	r0, [sp, #16]
1005c56c:	9902      	ldr	r1, [sp, #8]
1005c56e:	f7fd fe57 	bl	1005a220 <llc_cpe_sm_disable>
1005c572:	9a01      	ldr	r2, [sp, #4]
1005c574:	e0ed      	b.n	1005c752 <LL_phy_update+0x35e>
1005c576:	2802      	cmp	r0, #2
1005c578:	9903      	ldr	r1, [sp, #12]
1005c57a:	d168      	bne.n	1005c64e <LL_phy_update+0x25a>
1005c57c:	7c08      	ldrb	r0, [r1, #16]
1005c57e:	2805      	cmp	r0, #5
1005c580:	9f04      	ldr	r7, [sp, #16]
1005c582:	d100      	bne.n	1005c586 <LL_phy_update+0x192>
1005c584:	e108      	b.n	1005c798 <LL_phy_update+0x3a4>
1005c586:	2800      	cmp	r0, #0
1005c588:	d000      	beq.n	1005c58c <LL_phy_update+0x198>
1005c58a:	e0e2      	b.n	1005c752 <LL_phy_update+0x35e>
1005c58c:	9300      	str	r3, [sp, #0]
1005c58e:	9201      	str	r2, [sp, #4]
1005c590:	4638      	mov	r0, r7
1005c592:	f7fc f827 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005c596:	2118      	movs	r1, #24
1005c598:	70b1      	strb	r1, [r6, #2]
1005c59a:	2105      	movs	r1, #5
1005c59c:	7071      	strb	r1, [r6, #1]
1005c59e:	2403      	movs	r4, #3
1005c5a0:	7034      	strb	r4, [r6, #0]
1005c5a2:	7a01      	ldrb	r1, [r0, #8]
1005c5a4:	70f1      	strb	r1, [r6, #3]
1005c5a6:	7a40      	ldrb	r0, [r0, #9]
1005c5a8:	7130      	strb	r0, [r6, #4]
1005c5aa:	1d71      	adds	r1, r6, #5
1005c5ac:	2202      	movs	r2, #2
1005c5ae:	4628      	mov	r0, r5
1005c5b0:	f005 fefc 	bl	100623ac <char_copy>
1005c5b4:	9803      	ldr	r0, [sp, #12]
1005c5b6:	7404      	strb	r4, [r0, #16]
1005c5b8:	8828      	ldrh	r0, [r5, #0]
1005c5ba:	2800      	cmp	r0, #0
1005c5bc:	d0d9      	beq.n	1005c572 <LL_phy_update+0x17e>
1005c5be:	4638      	mov	r0, r7
1005c5c0:	9902      	ldr	r1, [sp, #8]
1005c5c2:	e0e6      	b.n	1005c792 <LL_phy_update+0x39e>
1005c5c4:	2802      	cmp	r0, #2
1005c5c6:	d14b      	bne.n	1005c660 <LL_phy_update+0x26c>
1005c5c8:	9e03      	ldr	r6, [sp, #12]
1005c5ca:	7c30      	ldrb	r0, [r6, #16]
1005c5cc:	4614      	mov	r4, r2
1005c5ce:	2803      	cmp	r0, #3
1005c5d0:	d000      	beq.n	1005c5d4 <LL_phy_update+0x1e0>
1005c5d2:	e0a6      	b.n	1005c722 <LL_phy_update+0x32e>
1005c5d4:	7c70      	ldrb	r0, [r6, #17]
1005c5d6:	a905      	add	r1, sp, #20
1005c5d8:	7108      	strb	r0, [r1, #4]
1005c5da:	9d04      	ldr	r5, [sp, #16]
1005c5dc:	4628      	mov	r0, r5
1005c5de:	4632      	mov	r2, r6
1005c5e0:	f000 f8fa 	bl	1005c7d8 <LL_process_phy_upd_ind>
1005c5e4:	2800      	cmp	r0, #0
1005c5e6:	d100      	bne.n	1005c5ea <LL_phy_update+0x1f6>
1005c5e8:	e0b2      	b.n	1005c750 <LL_phy_update+0x35c>
1005c5ea:	4628      	mov	r0, r5
1005c5ec:	4631      	mov	r1, r6
1005c5ee:	f000 f94b 	bl	1005c888 <LL_reset_max_tx_data_frag>
1005c5f2:	2207      	movs	r2, #7
1005c5f4:	4628      	mov	r0, r5
1005c5f6:	e079      	b.n	1005c6ec <LL_phy_update+0x2f8>
1005c5f8:	2101      	movs	r1, #1
1005c5fa:	9f04      	ldr	r7, [sp, #16]
1005c5fc:	7181      	strb	r1, [r0, #6]
1005c5fe:	2100      	movs	r1, #0
1005c600:	4638      	mov	r0, r7
1005c602:	f7fd fe3b 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005c606:	4604      	mov	r4, r0
1005c608:	4638      	mov	r0, r7
1005c60a:	f7fb ffb7 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005c60e:	212c      	movs	r1, #44	@ 0x2c
1005c610:	5c40      	ldrb	r0, [r0, r1]
1005c612:	2802      	cmp	r0, #2
1005c614:	d10b      	bne.n	1005c62e <LL_phy_update+0x23a>
1005c616:	20ff      	movs	r0, #255	@ 0xff
1005c618:	3006      	adds	r0, #6
1005c61a:	8220      	strh	r0, [r4, #16]
1005c61c:	2d07      	cmp	r5, #7
1005c61e:	d025      	beq.n	1005c66c <LL_phy_update+0x278>
1005c620:	202a      	movs	r0, #42	@ 0x2a
1005c622:	e024      	b.n	1005c66e <LL_phy_update+0x27a>
1005c624:	2123      	movs	r1, #35	@ 0x23
1005c626:	4618      	mov	r0, r3
1005c628:	f7fc fe30 	bl	1005928c <llc_conn_disconnect_link_from_cpf>
1005c62c:	e090      	b.n	1005c750 <LL_phy_update+0x35c>
1005c62e:	2d07      	cmp	r5, #7
1005c630:	d129      	bne.n	1005c686 <LL_phy_update+0x292>
1005c632:	a905      	add	r1, sp, #20
1005c634:	4638      	mov	r0, r7
1005c636:	f000 fa02 	bl	1005ca3e <LL_process_phy_req_rcpt>
1005c63a:	e024      	b.n	1005c686 <LL_phy_update+0x292>
1005c63c:	2016      	movs	r0, #22
1005c63e:	70b0      	strb	r0, [r6, #2]
1005c640:	2003      	movs	r0, #3
1005c642:	7070      	strb	r0, [r6, #1]
1005c644:	7030      	strb	r0, [r6, #0]
1005c646:	7cc8      	ldrb	r0, [r1, #19]
1005c648:	70f0      	strb	r0, [r6, #3]
1005c64a:	7d08      	ldrb	r0, [r1, #20]
1005c64c:	e0ac      	b.n	1005c7a8 <LL_phy_update+0x3b4>
1005c64e:	2017      	movs	r0, #23
1005c650:	70b0      	strb	r0, [r6, #2]
1005c652:	2003      	movs	r0, #3
1005c654:	7070      	strb	r0, [r6, #1]
1005c656:	7030      	strb	r0, [r6, #0]
1005c658:	7d48      	ldrb	r0, [r1, #21]
1005c65a:	70f0      	strb	r0, [r6, #3]
1005c65c:	7d88      	ldrb	r0, [r1, #22]
1005c65e:	e0a3      	b.n	1005c7a8 <LL_phy_update+0x3b4>
1005c660:	2202      	movs	r2, #2
1005c662:	9804      	ldr	r0, [sp, #16]
1005c664:	f7fd fc6c 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005c668:	2218      	movs	r2, #24
1005c66a:	e072      	b.n	1005c752 <LL_phy_update+0x35e>
1005c66c:	2023      	movs	r0, #35	@ 0x23
1005c66e:	74a0      	strb	r0, [r4, #18]
1005c670:	2400      	movs	r4, #0
1005c672:	4638      	mov	r0, r7
1005c674:	4621      	mov	r1, r4
1005c676:	f7fd fe19 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005c67a:	2207      	movs	r2, #7
1005c67c:	2301      	movs	r3, #1
1005c67e:	4638      	mov	r0, r7
1005c680:	4621      	mov	r1, r4
1005c682:	f7fd fddd 	bl	1005a240 <llc_cpe_sm_enable>
1005c686:	4632      	mov	r2, r6
1005c688:	e063      	b.n	1005c752 <LL_phy_update+0x35e>
1005c68a:	4615      	mov	r5, r2
1005c68c:	a905      	add	r1, sp, #20
1005c68e:	2007      	movs	r0, #7
1005c690:	7088      	strb	r0, [r1, #2]
1005c692:	2000      	movs	r0, #0
1005c694:	7048      	strb	r0, [r1, #1]
1005c696:	78f0      	ldrb	r0, [r6, #3]
1005c698:	7008      	strb	r0, [r1, #0]
1005c69a:	9f03      	ldr	r7, [sp, #12]
1005c69c:	7c78      	ldrb	r0, [r7, #17]
1005c69e:	70c8      	strb	r0, [r1, #3]
1005c6a0:	9e04      	ldr	r6, [sp, #16]
1005c6a2:	4630      	mov	r0, r6
1005c6a4:	f000 f9a3 	bl	1005c9ee <LL_process_unknown_rsp_reject_ind_rcpt>
1005c6a8:	7820      	ldrb	r0, [r4, #0]
1005c6aa:	2803      	cmp	r0, #3
1005c6ac:	d103      	bne.n	1005c6b6 <LL_phy_update+0x2c2>
1005c6ae:	4630      	mov	r0, r6
1005c6b0:	4639      	mov	r1, r7
1005c6b2:	f000 f8e9 	bl	1005c888 <LL_reset_max_tx_data_frag>
1005c6b6:	2207      	movs	r2, #7
1005c6b8:	4630      	mov	r0, r6
1005c6ba:	9902      	ldr	r1, [sp, #8]
1005c6bc:	f7fd fdb0 	bl	1005a220 <llc_cpe_sm_disable>
1005c6c0:	462a      	mov	r2, r5
1005c6c2:	e046      	b.n	1005c752 <LL_phy_update+0x35e>
1005c6c4:	a905      	add	r1, sp, #20
1005c6c6:	2011      	movs	r0, #17
1005c6c8:	7088      	strb	r0, [r1, #2]
1005c6ca:	78f0      	ldrb	r0, [r6, #3]
1005c6cc:	7008      	strb	r0, [r1, #0]
1005c6ce:	7930      	ldrb	r0, [r6, #4]
1005c6d0:	7048      	strb	r0, [r1, #1]
1005c6d2:	9d03      	ldr	r5, [sp, #12]
1005c6d4:	7c68      	ldrb	r0, [r5, #17]
1005c6d6:	70c8      	strb	r0, [r1, #3]
1005c6d8:	4638      	mov	r0, r7
1005c6da:	4614      	mov	r4, r2
1005c6dc:	f000 f987 	bl	1005c9ee <LL_process_unknown_rsp_reject_ind_rcpt>
1005c6e0:	4638      	mov	r0, r7
1005c6e2:	4629      	mov	r1, r5
1005c6e4:	f000 f8d0 	bl	1005c888 <LL_reset_max_tx_data_frag>
1005c6e8:	2207      	movs	r2, #7
1005c6ea:	4638      	mov	r0, r7
1005c6ec:	9902      	ldr	r1, [sp, #8]
1005c6ee:	e02d      	b.n	1005c74c <LL_phy_update+0x358>
1005c6f0:	9300      	str	r3, [sp, #0]
1005c6f2:	9201      	str	r2, [sp, #4]
1005c6f4:	1cf0      	adds	r0, r6, #3
1005c6f6:	ac05      	add	r4, sp, #20
1005c6f8:	2205      	movs	r2, #5
1005c6fa:	4621      	mov	r1, r4
1005c6fc:	f005 fe56 	bl	100623ac <char_copy>
1005c700:	9d03      	ldr	r5, [sp, #12]
1005c702:	7c68      	ldrb	r0, [r5, #17]
1005c704:	7120      	strb	r0, [r4, #4]
1005c706:	4638      	mov	r0, r7
1005c708:	4621      	mov	r1, r4
1005c70a:	462a      	mov	r2, r5
1005c70c:	f000 f864 	bl	1005c7d8 <LL_process_phy_upd_ind>
1005c710:	2800      	cmp	r0, #0
1005c712:	d04b      	beq.n	1005c7ac <LL_phy_update+0x3b8>
1005c714:	4638      	mov	r0, r7
1005c716:	4629      	mov	r1, r5
1005c718:	f000 f8b6 	bl	1005c888 <LL_reset_max_tx_data_frag>
1005c71c:	2207      	movs	r2, #7
1005c71e:	4638      	mov	r0, r7
1005c720:	e724      	b.n	1005c56c <LL_phy_update+0x178>
1005c722:	2207      	movs	r2, #7
1005c724:	9804      	ldr	r0, [sp, #16]
1005c726:	e011      	b.n	1005c74c <LL_phy_update+0x358>
1005c728:	4614      	mov	r4, r2
1005c72a:	7c70      	ldrb	r0, [r6, #17]
1005c72c:	a905      	add	r1, sp, #20
1005c72e:	7108      	strb	r0, [r1, #4]
1005c730:	9d04      	ldr	r5, [sp, #16]
1005c732:	4628      	mov	r0, r5
1005c734:	4632      	mov	r2, r6
1005c736:	f000 f84f 	bl	1005c7d8 <LL_process_phy_upd_ind>
1005c73a:	2800      	cmp	r0, #0
1005c73c:	d049      	beq.n	1005c7d2 <LL_phy_update+0x3de>
1005c73e:	4628      	mov	r0, r5
1005c740:	4631      	mov	r1, r6
1005c742:	f000 f8a1 	bl	1005c888 <LL_reset_max_tx_data_frag>
1005c746:	2101      	movs	r1, #1
1005c748:	2207      	movs	r2, #7
1005c74a:	4628      	mov	r0, r5
1005c74c:	f7fd fd68 	bl	1005a220 <llc_cpe_sm_disable>
1005c750:	4622      	mov	r2, r4
1005c752:	4610      	mov	r0, r2
1005c754:	b007      	add	sp, #28
1005c756:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005c758:	9300      	str	r3, [sp, #0]
1005c75a:	9201      	str	r2, [sp, #4]
1005c75c:	9f04      	ldr	r7, [sp, #16]
1005c75e:	4638      	mov	r0, r7
1005c760:	f7fb ff40 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005c764:	2118      	movs	r1, #24
1005c766:	70b1      	strb	r1, [r6, #2]
1005c768:	2105      	movs	r1, #5
1005c76a:	7071      	strb	r1, [r6, #1]
1005c76c:	2403      	movs	r4, #3
1005c76e:	7034      	strb	r4, [r6, #0]
1005c770:	7a01      	ldrb	r1, [r0, #8]
1005c772:	70f1      	strb	r1, [r6, #3]
1005c774:	7a40      	ldrb	r0, [r0, #9]
1005c776:	7130      	strb	r0, [r6, #4]
1005c778:	1d71      	adds	r1, r6, #5
1005c77a:	2202      	movs	r2, #2
1005c77c:	4628      	mov	r0, r5
1005c77e:	f005 fe15 	bl	100623ac <char_copy>
1005c782:	9803      	ldr	r0, [sp, #12]
1005c784:	7404      	strb	r4, [r0, #16]
1005c786:	8828      	ldrh	r0, [r5, #0]
1005c788:	2800      	cmp	r0, #0
1005c78a:	d100      	bne.n	1005c78e <LL_phy_update+0x39a>
1005c78c:	e6f1      	b.n	1005c572 <LL_phy_update+0x17e>
1005c78e:	2101      	movs	r1, #1
1005c790:	4638      	mov	r0, r7
1005c792:	f7fd fd9b 	bl	1005a2cc <llc_cpe_sm_tx_pdu_with_instant>
1005c796:	e015      	b.n	1005c7c4 <LL_phy_update+0x3d0>
1005c798:	2016      	movs	r0, #22
1005c79a:	70f0      	strb	r0, [r6, #3]
1005c79c:	2011      	movs	r0, #17
1005c79e:	70b0      	strb	r0, [r6, #2]
1005c7a0:	2003      	movs	r0, #3
1005c7a2:	7070      	strb	r0, [r6, #1]
1005c7a4:	7030      	strb	r0, [r6, #0]
1005c7a6:	7c88      	ldrb	r0, [r1, #18]
1005c7a8:	7130      	strb	r0, [r6, #4]
1005c7aa:	e7d2      	b.n	1005c752 <LL_phy_update+0x35e>
1005c7ac:	9c02      	ldr	r4, [sp, #8]
1005c7ae:	2c01      	cmp	r4, #1
1005c7b0:	d104      	bne.n	1005c7bc <LL_phy_update+0x3c8>
1005c7b2:	2101      	movs	r1, #1
1005c7b4:	2202      	movs	r2, #2
1005c7b6:	4638      	mov	r0, r7
1005c7b8:	f7fd fbc2 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005c7bc:	4638      	mov	r0, r7
1005c7be:	4621      	mov	r1, r4
1005c7c0:	f7fd fd64 	bl	1005a28c <llc_cpe_sm_rx_pdu_with_instant>
1005c7c4:	2011      	movs	r0, #17
1005c7c6:	0100      	lsls	r0, r0, #4
1005c7c8:	9900      	ldr	r1, [sp, #0]
1005c7ca:	1808      	adds	r0, r1, r0
1005c7cc:	f7fd fb9c 	bl	10059f08 <llc_cpe_set_phy_upd_pending>
1005c7d0:	e6cf      	b.n	1005c572 <LL_phy_update+0x17e>
1005c7d2:	2004      	movs	r0, #4
1005c7d4:	7430      	strb	r0, [r6, #16]
1005c7d6:	e7bb      	b.n	1005c750 <LL_phy_update+0x35c>

1005c7d8 <LL_process_phy_upd_ind>:
1005c7d8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005c7da:	9201      	str	r2, [sp, #4]
1005c7dc:	460c      	mov	r4, r1
1005c7de:	4606      	mov	r6, r0
1005c7e0:	f7fb fecc 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005c7e4:	4607      	mov	r7, r0
1005c7e6:	4630      	mov	r0, r6
1005c7e8:	f7fb fefc 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005c7ec:	4605      	mov	r5, r0
1005c7ee:	202c      	movs	r0, #44	@ 0x2c
1005c7f0:	9702      	str	r7, [sp, #8]
1005c7f2:	5c39      	ldrb	r1, [r7, r0]
1005c7f4:	2903      	cmp	r1, #3
1005c7f6:	d113      	bne.n	1005c820 <LL_process_phy_upd_ind+0x48>
1005c7f8:	7827      	ldrb	r7, [r4, #0]
1005c7fa:	2001      	movs	r0, #1
1005c7fc:	2f04      	cmp	r7, #4
1005c7fe:	d830      	bhi.n	1005c862 <LL_process_phy_upd_ind+0x8a>
1005c800:	2f03      	cmp	r7, #3
1005c802:	d02e      	beq.n	1005c862 <LL_process_phy_upd_ind+0x8a>
1005c804:	7862      	ldrb	r2, [r4, #1]
1005c806:	2a04      	cmp	r2, #4
1005c808:	d82b      	bhi.n	1005c862 <LL_process_phy_upd_ind+0x8a>
1005c80a:	2a03      	cmp	r2, #3
1005c80c:	d029      	beq.n	1005c862 <LL_process_phy_upd_ind+0x8a>
1005c80e:	2365      	movs	r3, #101	@ 0x65
1005c810:	009b      	lsls	r3, r3, #2
1005c812:	9802      	ldr	r0, [sp, #8]
1005c814:	18c3      	adds	r3, r0, r3
1005c816:	726a      	strb	r2, [r5, #9]
1005c818:	722f      	strb	r7, [r5, #8]
1005c81a:	8862      	ldrh	r2, [r4, #2]
1005c81c:	801a      	strh	r2, [r3, #0]
1005c81e:	e000      	b.n	1005c822 <LL_process_phy_upd_ind+0x4a>
1005c820:	7a2f      	ldrb	r7, [r5, #8]
1005c822:	2f00      	cmp	r7, #0
1005c824:	d102      	bne.n	1005c82c <LL_process_phy_upd_ind+0x54>
1005c826:	7a6a      	ldrb	r2, [r5, #9]
1005c828:	2a00      	cmp	r2, #0
1005c82a:	d016      	beq.n	1005c85a <LL_process_phy_upd_ind+0x82>
1005c82c:	2000      	movs	r0, #0
1005c82e:	2903      	cmp	r1, #3
1005c830:	d117      	bne.n	1005c862 <LL_process_phy_upd_ind+0x8a>
1005c832:	7a69      	ldrb	r1, [r5, #9]
1005c834:	2900      	cmp	r1, #0
1005c836:	d014      	beq.n	1005c862 <LL_process_phy_upd_ind+0x8a>
1005c838:	79ea      	ldrb	r2, [r5, #7]
1005c83a:	9b01      	ldr	r3, [sp, #4]
1005c83c:	9300      	str	r3, [sp, #0]
1005c83e:	403a      	ands	r2, r7
1005c840:	0752      	lsls	r2, r2, #29
1005c842:	0fd2      	lsrs	r2, r2, #31
1005c844:	4604      	mov	r4, r0
1005c846:	2301      	movs	r3, #1
1005c848:	4630      	mov	r0, r6
1005c84a:	f000 fa0d 	bl	1005cc68 <LL_adjust_max_tx_data_frag>
1005c84e:	7a69      	ldrb	r1, [r5, #9]
1005c850:	4630      	mov	r0, r6
1005c852:	f7fe fe20 	bl	1005b496 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005c856:	4620      	mov	r0, r4
1005c858:	e003      	b.n	1005c862 <LL_process_phy_upd_ind+0x8a>
1005c85a:	7921      	ldrb	r1, [r4, #4]
1005c85c:	2001      	movs	r0, #1
1005c85e:	2900      	cmp	r1, #0
1005c860:	d000      	beq.n	1005c864 <LL_process_phy_upd_ind+0x8c>
1005c862:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005c864:	4604      	mov	r4, r0
1005c866:	79e9      	ldrb	r1, [r5, #7]
1005c868:	2003      	movs	r0, #3
1005c86a:	074a      	lsls	r2, r1, #29
1005c86c:	d500      	bpl.n	1005c870 <LL_process_phy_upd_ind+0x98>
1005c86e:	4601      	mov	r1, r0
1005c870:	9a02      	ldr	r2, [sp, #8]
1005c872:	8f52      	ldrh	r2, [r2, #58]	@ 0x3a
1005c874:	79ab      	ldrb	r3, [r5, #6]
1005c876:	9100      	str	r1, [sp, #0]
1005c878:	0759      	lsls	r1, r3, #29
1005c87a:	d500      	bpl.n	1005c87e <LL_process_phy_upd_ind+0xa6>
1005c87c:	4603      	mov	r3, r0
1005c87e:	2080      	movs	r0, #128	@ 0x80
1005c880:	2100      	movs	r1, #0
1005c882:	f000 f9bb 	bl	1005cbfc <hci_le_phy_update_complete_event_push>
1005c886:	e7e6      	b.n	1005c856 <LL_process_phy_upd_ind+0x7e>

1005c888 <LL_reset_max_tx_data_frag>:
1005c888:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005c88a:	460d      	mov	r5, r1
1005c88c:	4604      	mov	r4, r0
1005c88e:	f7fb fea9 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005c892:	2800      	cmp	r0, #0
1005c894:	d007      	beq.n	1005c8a6 <LL_reset_max_tx_data_frag+0x1e>
1005c896:	7981      	ldrb	r1, [r0, #6]
1005c898:	79c0      	ldrb	r0, [r0, #7]
1005c89a:	2804      	cmp	r0, #4
1005c89c:	d107      	bne.n	1005c8ae <LL_reset_max_tx_data_frag+0x26>
1005c89e:	4628      	mov	r0, r5
1005c8a0:	300c      	adds	r0, #12
1005c8a2:	2201      	movs	r2, #1
1005c8a4:	e005      	b.n	1005c8b2 <LL_reset_max_tx_data_frag+0x2a>
1005c8a6:	1da8      	adds	r0, r5, #6
1005c8a8:	2200      	movs	r2, #0
1005c8aa:	2101      	movs	r1, #1
1005c8ac:	e001      	b.n	1005c8b2 <LL_reset_max_tx_data_frag+0x2a>
1005c8ae:	1da8      	adds	r0, r5, #6
1005c8b0:	2200      	movs	r2, #0
1005c8b2:	8800      	ldrh	r0, [r0, #0]
1005c8b4:	8068      	strh	r0, [r5, #2]
1005c8b6:	9500      	str	r5, [sp, #0]
1005c8b8:	2300      	movs	r3, #0
1005c8ba:	4620      	mov	r0, r4
1005c8bc:	f000 f9d4 	bl	1005cc68 <LL_adjust_max_tx_data_frag>
1005c8c0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005c8c2 <LL_compute_phy_upd_ind>:
1005c8c2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005c8c4:	460d      	mov	r5, r1
1005c8c6:	4604      	mov	r4, r0
1005c8c8:	f7fb fe8c 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005c8cc:	4606      	mov	r6, r0
1005c8ce:	7928      	ldrb	r0, [r5, #4]
1005c8d0:	2801      	cmp	r0, #1
1005c8d2:	9002      	str	r0, [sp, #8]
1005c8d4:	d114      	bne.n	1005c900 <LL_compute_phy_upd_ind+0x3e>
1005c8d6:	2500      	movs	r5, #0
1005c8d8:	4620      	mov	r0, r4
1005c8da:	4629      	mov	r1, r5
1005c8dc:	f7fd fcce 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005c8e0:	4607      	mov	r7, r0
1005c8e2:	7d02      	ldrb	r2, [r0, #20]
1005c8e4:	7cc3      	ldrb	r3, [r0, #19]
1005c8e6:	4293      	cmp	r3, r2
1005c8e8:	9501      	str	r5, [sp, #4]
1005c8ea:	d105      	bne.n	1005c8f8 <LL_compute_phy_upd_ind+0x36>
1005c8ec:	2b03      	cmp	r3, #3
1005c8ee:	d302      	bcc.n	1005c8f6 <LL_compute_phy_upd_ind+0x34>
1005c8f0:	2b04      	cmp	r3, #4
1005c8f2:	9d01      	ldr	r5, [sp, #4]
1005c8f4:	d100      	bne.n	1005c8f8 <LL_compute_phy_upd_ind+0x36>
1005c8f6:	2501      	movs	r5, #1
1005c8f8:	78f0      	ldrb	r0, [r6, #3]
1005c8fa:	4018      	ands	r0, r3
1005c8fc:	78b3      	ldrb	r3, [r6, #2]
1005c8fe:	e014      	b.n	1005c92a <LL_compute_phy_upd_ind+0x68>
1005c900:	2101      	movs	r1, #1
1005c902:	4620      	mov	r0, r4
1005c904:	9101      	str	r1, [sp, #4]
1005c906:	f7fd fcb9 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005c90a:	4607      	mov	r7, r0
1005c90c:	78ab      	ldrb	r3, [r5, #2]
1005c90e:	7543      	strb	r3, [r0, #21]
1005c910:	78ea      	ldrb	r2, [r5, #3]
1005c912:	7582      	strb	r2, [r0, #22]
1005c914:	2500      	movs	r5, #0
1005c916:	4293      	cmp	r3, r2
1005c918:	d104      	bne.n	1005c924 <LL_compute_phy_upd_ind+0x62>
1005c91a:	2b03      	cmp	r3, #3
1005c91c:	d301      	bcc.n	1005c922 <LL_compute_phy_upd_ind+0x60>
1005c91e:	2b04      	cmp	r3, #4
1005c920:	d100      	bne.n	1005c924 <LL_compute_phy_upd_ind+0x62>
1005c922:	2501      	movs	r5, #1
1005c924:	7d38      	ldrb	r0, [r7, #20]
1005c926:	4018      	ands	r0, r3
1005c928:	7cfb      	ldrb	r3, [r7, #19]
1005c92a:	4013      	ands	r3, r2
1005c92c:	2d00      	cmp	r5, #0
1005c92e:	d002      	beq.n	1005c936 <LL_compute_phy_upd_ind+0x74>
1005c930:	4283      	cmp	r3, r0
1005c932:	4603      	mov	r3, r0
1005c934:	d107      	bne.n	1005c946 <LL_compute_phy_upd_ind+0x84>
1005c936:	2100      	movs	r1, #0
1005c938:	2b00      	cmp	r3, #0
1005c93a:	460a      	mov	r2, r1
1005c93c:	d00a      	beq.n	1005c954 <LL_compute_phy_upd_ind+0x92>
1005c93e:	07da      	lsls	r2, r3, #31
1005c940:	d004      	beq.n	1005c94c <LL_compute_phy_upd_ind+0x8a>
1005c942:	2201      	movs	r2, #1
1005c944:	e003      	b.n	1005c94e <LL_compute_phy_upd_ind+0x8c>
1005c946:	2200      	movs	r2, #0
1005c948:	4611      	mov	r1, r2
1005c94a:	e00d      	b.n	1005c968 <LL_compute_phy_upd_ind+0xa6>
1005c94c:	2204      	movs	r2, #4
1005c94e:	079b      	lsls	r3, r3, #30
1005c950:	d500      	bpl.n	1005c954 <LL_compute_phy_upd_ind+0x92>
1005c952:	2202      	movs	r2, #2
1005c954:	2800      	cmp	r0, #0
1005c956:	d007      	beq.n	1005c968 <LL_compute_phy_upd_ind+0xa6>
1005c958:	07c1      	lsls	r1, r0, #31
1005c95a:	d001      	beq.n	1005c960 <LL_compute_phy_upd_ind+0x9e>
1005c95c:	2101      	movs	r1, #1
1005c95e:	e000      	b.n	1005c962 <LL_compute_phy_upd_ind+0xa0>
1005c960:	2104      	movs	r1, #4
1005c962:	0780      	lsls	r0, r0, #30
1005c964:	d500      	bpl.n	1005c968 <LL_compute_phy_upd_ind+0xa6>
1005c966:	2102      	movs	r1, #2
1005c968:	79b3      	ldrb	r3, [r6, #6]
1005c96a:	2000      	movs	r0, #0
1005c96c:	429a      	cmp	r2, r3
1005c96e:	4603      	mov	r3, r0
1005c970:	d000      	beq.n	1005c974 <LL_compute_phy_upd_ind+0xb2>
1005c972:	4613      	mov	r3, r2
1005c974:	7233      	strb	r3, [r6, #8]
1005c976:	79f2      	ldrb	r2, [r6, #7]
1005c978:	4291      	cmp	r1, r2
1005c97a:	d000      	beq.n	1005c97e <LL_compute_phy_upd_ind+0xbc>
1005c97c:	4608      	mov	r0, r1
1005c97e:	7270      	strb	r0, [r6, #9]
1005c980:	4620      	mov	r0, r4
1005c982:	f7fb fdfb 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005c986:	2165      	movs	r1, #101	@ 0x65
1005c988:	0089      	lsls	r1, r1, #2
1005c98a:	1845      	adds	r5, r0, r1
1005c98c:	7a71      	ldrb	r1, [r6, #9]
1005c98e:	2900      	cmp	r1, #0
1005c990:	d102      	bne.n	1005c998 <LL_compute_phy_upd_ind+0xd6>
1005c992:	7a31      	ldrb	r1, [r6, #8]
1005c994:	2900      	cmp	r1, #0
1005c996:	d01a      	beq.n	1005c9ce <LL_compute_phy_upd_ind+0x10c>
1005c998:	4603      	mov	r3, r0
1005c99a:	3342      	adds	r3, #66	@ 0x42
1005c99c:	4601      	mov	r1, r0
1005c99e:	31fe      	adds	r1, #254	@ 0xfe
1005c9a0:	880a      	ldrh	r2, [r1, #0]
1005c9a2:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
1005c9a4:	8818      	ldrh	r0, [r3, #0]
1005c9a6:	f7fd fa31 	bl	10059e0c <llc_cpe_calculate_instant>
1005c9aa:	8028      	strh	r0, [r5, #0]
1005c9ac:	7a31      	ldrb	r1, [r6, #8]
1005c9ae:	2900      	cmp	r1, #0
1005c9b0:	d00f      	beq.n	1005c9d2 <LL_compute_phy_upd_ind+0x110>
1005c9b2:	79f0      	ldrb	r0, [r6, #7]
1005c9b4:	9700      	str	r7, [sp, #0]
1005c9b6:	4008      	ands	r0, r1
1005c9b8:	0740      	lsls	r0, r0, #29
1005c9ba:	0fc2      	lsrs	r2, r0, #31
1005c9bc:	2301      	movs	r3, #1
1005c9be:	4620      	mov	r0, r4
1005c9c0:	f000 f952 	bl	1005cc68 <LL_adjust_max_tx_data_frag>
1005c9c4:	7a31      	ldrb	r1, [r6, #8]
1005c9c6:	4620      	mov	r0, r4
1005c9c8:	f7fe fd65 	bl	1005b496 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005c9cc:	e001      	b.n	1005c9d2 <LL_compute_phy_upd_ind+0x110>
1005c9ce:	2000      	movs	r0, #0
1005c9d0:	8028      	strh	r0, [r5, #0]
1005c9d2:	9802      	ldr	r0, [sp, #8]
1005c9d4:	2801      	cmp	r0, #1
1005c9d6:	d009      	beq.n	1005c9ec <LL_compute_phy_upd_ind+0x12a>
1005c9d8:	4620      	mov	r0, r4
1005c9da:	9d01      	ldr	r5, [sp, #4]
1005c9dc:	4629      	mov	r1, r5
1005c9de:	f7fd fc65 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005c9e2:	2202      	movs	r2, #2
1005c9e4:	4620      	mov	r0, r4
1005c9e6:	4629      	mov	r1, r5
1005c9e8:	f7fd faaa 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005c9ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005c9ee <LL_process_unknown_rsp_reject_ind_rcpt>:
1005c9ee:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005c9f0:	460d      	mov	r5, r1
1005c9f2:	4606      	mov	r6, r0
1005c9f4:	f7fb fdf6 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005c9f8:	4604      	mov	r4, r0
1005c9fa:	4630      	mov	r0, r6
1005c9fc:	f7fb fdbe 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005ca00:	78a9      	ldrb	r1, [r5, #2]
1005ca02:	2907      	cmp	r1, #7
1005ca04:	d107      	bne.n	1005ca16 <LL_process_unknown_rsp_reject_ind_rcpt+0x28>
1005ca06:	21ff      	movs	r1, #255	@ 0xff
1005ca08:	310c      	adds	r1, #12
1005ca0a:	5c42      	ldrb	r2, [r0, r1]
1005ca0c:	23f6      	movs	r3, #246	@ 0xf6
1005ca0e:	4013      	ands	r3, r2
1005ca10:	5443      	strb	r3, [r0, r1]
1005ca12:	211a      	movs	r1, #26
1005ca14:	e000      	b.n	1005ca18 <LL_process_unknown_rsp_reject_ind_rcpt+0x2a>
1005ca16:	7869      	ldrb	r1, [r5, #1]
1005ca18:	78ea      	ldrb	r2, [r5, #3]
1005ca1a:	2a00      	cmp	r2, #0
1005ca1c:	d000      	beq.n	1005ca20 <LL_process_unknown_rsp_reject_ind_rcpt+0x32>
1005ca1e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005ca20:	79e6      	ldrb	r6, [r4, #7]
1005ca22:	2503      	movs	r5, #3
1005ca24:	0772      	lsls	r2, r6, #29
1005ca26:	d500      	bpl.n	1005ca2a <LL_process_unknown_rsp_reject_ind_rcpt+0x3c>
1005ca28:	462e      	mov	r6, r5
1005ca2a:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
1005ca2c:	79a3      	ldrb	r3, [r4, #6]
1005ca2e:	9600      	str	r6, [sp, #0]
1005ca30:	0758      	lsls	r0, r3, #29
1005ca32:	d500      	bpl.n	1005ca36 <LL_process_unknown_rsp_reject_ind_rcpt+0x48>
1005ca34:	462b      	mov	r3, r5
1005ca36:	2080      	movs	r0, #128	@ 0x80
1005ca38:	f000 f8e0 	bl	1005cbfc <hci_le_phy_update_complete_event_push>
1005ca3c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005ca3e <LL_process_phy_req_rcpt>:
1005ca3e:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ca40:	b085      	sub	sp, #20
1005ca42:	460f      	mov	r7, r1
1005ca44:	4604      	mov	r4, r0
1005ca46:	f7fb fd99 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005ca4a:	4605      	mov	r5, r0
1005ca4c:	2100      	movs	r1, #0
1005ca4e:	4620      	mov	r0, r4
1005ca50:	9102      	str	r1, [sp, #8]
1005ca52:	f7fd fc13 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005ca56:	4606      	mov	r6, r0
1005ca58:	2001      	movs	r0, #1
1005ca5a:	9001      	str	r0, [sp, #4]
1005ca5c:	7470      	strb	r0, [r6, #17]
1005ca5e:	78b8      	ldrb	r0, [r7, #2]
1005ca60:	74f0      	strb	r0, [r6, #19]
1005ca62:	78f8      	ldrb	r0, [r7, #3]
1005ca64:	7530      	strb	r0, [r6, #20]
1005ca66:	2092      	movs	r0, #146	@ 0x92
1005ca68:	5a28      	ldrh	r0, [r5, r0]
1005ca6a:	81f0      	strh	r0, [r6, #14]
1005ca6c:	a803      	add	r0, sp, #12
1005ca6e:	7104      	strb	r4, [r0, #4]
1005ca70:	9603      	str	r6, [sp, #12]
1005ca72:	f7ff fc6b 	bl	1005c34c <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>
1005ca76:	202c      	movs	r0, #44	@ 0x2c
1005ca78:	5c28      	ldrb	r0, [r5, r0]
1005ca7a:	352c      	adds	r5, #44	@ 0x2c
1005ca7c:	2802      	cmp	r0, #2
1005ca7e:	d108      	bne.n	1005ca92 <LL_process_phy_req_rcpt+0x54>
1005ca80:	7c70      	ldrb	r0, [r6, #17]
1005ca82:	7138      	strb	r0, [r7, #4]
1005ca84:	4620      	mov	r0, r4
1005ca86:	4639      	mov	r1, r7
1005ca88:	f7ff ff1b 	bl	1005c8c2 <LL_compute_phy_upd_ind>
1005ca8c:	9802      	ldr	r0, [sp, #8]
1005ca8e:	7430      	strb	r0, [r6, #16]
1005ca90:	e025      	b.n	1005cade <LL_process_phy_req_rcpt+0xa0>
1005ca92:	4620      	mov	r0, r4
1005ca94:	f7fb fda6 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005ca98:	7881      	ldrb	r1, [r0, #2]
1005ca9a:	7571      	strb	r1, [r6, #21]
1005ca9c:	78c7      	ldrb	r7, [r0, #3]
1005ca9e:	75b7      	strb	r7, [r6, #22]
1005caa0:	7d33      	ldrb	r3, [r6, #20]
1005caa2:	400b      	ands	r3, r1
1005caa4:	b2db      	uxtb	r3, r3
1005caa6:	2b00      	cmp	r3, #0
1005caa8:	d019      	beq.n	1005cade <LL_process_phy_req_rcpt+0xa0>
1005caaa:	7981      	ldrb	r1, [r0, #6]
1005caac:	428b      	cmp	r3, r1
1005caae:	d016      	beq.n	1005cade <LL_process_phy_req_rcpt+0xa0>
1005cab0:	07d9      	lsls	r1, r3, #31
1005cab2:	d002      	beq.n	1005caba <LL_process_phy_req_rcpt+0x7c>
1005cab4:	9a01      	ldr	r2, [sp, #4]
1005cab6:	4611      	mov	r1, r2
1005cab8:	e001      	b.n	1005cabe <LL_process_phy_req_rcpt+0x80>
1005caba:	2102      	movs	r1, #2
1005cabc:	9a01      	ldr	r2, [sp, #4]
1005cabe:	075b      	lsls	r3, r3, #29
1005cac0:	d500      	bpl.n	1005cac4 <LL_process_phy_req_rcpt+0x86>
1005cac2:	2104      	movs	r1, #4
1005cac4:	7cf3      	ldrb	r3, [r6, #19]
1005cac6:	401f      	ands	r7, r3
1005cac8:	077b      	lsls	r3, r7, #29
1005caca:	d403      	bmi.n	1005cad4 <LL_process_phy_req_rcpt+0x96>
1005cacc:	79c0      	ldrb	r0, [r0, #7]
1005cace:	1f00      	subs	r0, r0, #4
1005cad0:	4242      	negs	r2, r0
1005cad2:	4142      	adcs	r2, r0
1005cad4:	9600      	str	r6, [sp, #0]
1005cad6:	2301      	movs	r3, #1
1005cad8:	4620      	mov	r0, r4
1005cada:	f000 f8c5 	bl	1005cc68 <LL_adjust_max_tx_data_frag>
1005cade:	2600      	movs	r6, #0
1005cae0:	4620      	mov	r0, r4
1005cae2:	4631      	mov	r1, r6
1005cae4:	f7fd fbe2 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005cae8:	2207      	movs	r2, #7
1005caea:	2301      	movs	r3, #1
1005caec:	4620      	mov	r0, r4
1005caee:	4631      	mov	r1, r6
1005caf0:	f7fd fba6 	bl	1005a240 <llc_cpe_sm_enable>
1005caf4:	7828      	ldrb	r0, [r5, #0]
1005caf6:	2802      	cmp	r0, #2
1005caf8:	d104      	bne.n	1005cb04 <LL_process_phy_req_rcpt+0xc6>
1005cafa:	2100      	movs	r1, #0
1005cafc:	2202      	movs	r2, #2
1005cafe:	4620      	mov	r0, r4
1005cb00:	f7fd fa1e 	bl	10059f40 <llc_cpe_sm_set_blocked>
1005cb04:	b005      	add	sp, #20
1005cb06:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005cb08 <LL_phy_upd_evt_pending_check_isr>:
1005cb08:	b5f0      	push	{r4, r5, r6, r7, lr}
1005cb0a:	b087      	sub	sp, #28
1005cb0c:	4604      	mov	r4, r0
1005cb0e:	f7fb fd35 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005cb12:	4605      	mov	r5, r0
1005cb14:	20c9      	movs	r0, #201	@ 0xc9
1005cb16:	0047      	lsls	r7, r0, #1
1005cb18:	19ee      	adds	r6, r5, r7
1005cb1a:	4620      	mov	r0, r4
1005cb1c:	f7fb fd62 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005cb20:	4604      	mov	r4, r0
1005cb22:	5bef      	ldrh	r7, [r5, r7]
1005cb24:	05b8      	lsls	r0, r7, #22
1005cb26:	462b      	mov	r3, r5
1005cb28:	d548      	bpl.n	1005cbbc <LL_phy_upd_evt_pending_check_isr+0xb4>
1005cb2a:	4830      	ldr	r0, [pc, #192]	@ (1005cbec <__arm_cp.17_0>)
1005cb2c:	6800      	ldr	r0, [r0, #0]
1005cb2e:	213d      	movs	r1, #61	@ 0x3d
1005cb30:	5c41      	ldrb	r1, [r0, r1]
1005cb32:	0689      	lsls	r1, r1, #26
1005cb34:	d53e      	bpl.n	1005cbb4 <LL_phy_upd_evt_pending_check_isr+0xac>
1005cb36:	303d      	adds	r0, #61	@ 0x3d
1005cb38:	7a40      	ldrb	r0, [r0, #9]
1005cb3a:	0640      	lsls	r0, r0, #25
1005cb3c:	d53a      	bpl.n	1005cbb4 <LL_phy_upd_evt_pending_check_isr+0xac>
1005cb3e:	3590      	adds	r5, #144	@ 0x90
1005cb40:	8928      	ldrh	r0, [r5, #8]
1005cb42:	9001      	str	r0, [sp, #4]
1005cb44:	88a8      	ldrh	r0, [r5, #4]
1005cb46:	9002      	str	r0, [sp, #8]
1005cb48:	88e8      	ldrh	r0, [r5, #6]
1005cb4a:	9003      	str	r0, [sp, #12]
1005cb4c:	8828      	ldrh	r0, [r5, #0]
1005cb4e:	9004      	str	r0, [sp, #16]
1005cb50:	8f58      	ldrh	r0, [r3, #58]	@ 0x3a
1005cb52:	9005      	str	r0, [sp, #20]
1005cb54:	4826      	ldr	r0, [pc, #152]	@ (1005cbf0 <__arm_cp.17_1>)
1005cb56:	6800      	ldr	r0, [r0, #0]
1005cb58:	6900      	ldr	r0, [r0, #16]
1005cb5a:	2180      	movs	r1, #128	@ 0x80
1005cb5c:	2226      	movs	r2, #38	@ 0x26
1005cb5e:	2504      	movs	r5, #4
1005cb60:	9306      	str	r3, [sp, #24]
1005cb62:	462b      	mov	r3, r5
1005cb64:	f7f6 fc80 	bl	10053468 <aci_event_fifo_push_header>
1005cb68:	9b06      	ldr	r3, [sp, #24]
1005cb6a:	2800      	cmp	r0, #0
1005cb6c:	d022      	beq.n	1005cbb4 <LL_phy_upd_evt_pending_check_isr+0xac>
1005cb6e:	4601      	mov	r1, r0
1005cb70:	9a01      	ldr	r2, [sp, #4]
1005cb72:	7402      	strb	r2, [r0, #16]
1005cb74:	9b02      	ldr	r3, [sp, #8]
1005cb76:	7383      	strb	r3, [r0, #14]
1005cb78:	9803      	ldr	r0, [sp, #12]
1005cb7a:	7308      	strb	r0, [r1, #12]
1005cb7c:	9804      	ldr	r0, [sp, #16]
1005cb7e:	7288      	strb	r0, [r1, #10]
1005cb80:	9805      	ldr	r0, [sp, #20]
1005cb82:	7208      	strb	r0, [r1, #8]
1005cb84:	2007      	movs	r0, #7
1005cb86:	71c8      	strb	r0, [r1, #7]
1005cb88:	200b      	movs	r0, #11
1005cb8a:	7188      	strb	r0, [r1, #6]
1005cb8c:	203e      	movs	r0, #62	@ 0x3e
1005cb8e:	7148      	strb	r0, [r1, #5]
1005cb90:	710d      	strb	r5, [r1, #4]
1005cb92:	0a10      	lsrs	r0, r2, #8
1005cb94:	7448      	strb	r0, [r1, #17]
1005cb96:	0a18      	lsrs	r0, r3, #8
1005cb98:	73c8      	strb	r0, [r1, #15]
1005cb9a:	9803      	ldr	r0, [sp, #12]
1005cb9c:	0a00      	lsrs	r0, r0, #8
1005cb9e:	7348      	strb	r0, [r1, #13]
1005cba0:	9804      	ldr	r0, [sp, #16]
1005cba2:	0a00      	lsrs	r0, r0, #8
1005cba4:	72c8      	strb	r0, [r1, #11]
1005cba6:	9805      	ldr	r0, [sp, #20]
1005cba8:	0a00      	lsrs	r0, r0, #8
1005cbaa:	7248      	strb	r0, [r1, #9]
1005cbac:	2080      	movs	r0, #128	@ 0x80
1005cbae:	f7f6 fcf8 	bl	100535a2 <aci_event_fifo_push>
1005cbb2:	9b06      	ldr	r3, [sp, #24]
1005cbb4:	8830      	ldrh	r0, [r6, #0]
1005cbb6:	490f      	ldr	r1, [pc, #60]	@ (1005cbf4 <__arm_cp.17_2>)
1005cbb8:	4001      	ands	r1, r0
1005cbba:	8031      	strh	r1, [r6, #0]
1005cbbc:	05f8      	lsls	r0, r7, #23
1005cbbe:	d512      	bpl.n	1005cbe6 <LL_phy_upd_evt_pending_check_isr+0xde>
1005cbc0:	79e1      	ldrb	r1, [r4, #7]
1005cbc2:	2003      	movs	r0, #3
1005cbc4:	074a      	lsls	r2, r1, #29
1005cbc6:	d500      	bpl.n	1005cbca <LL_phy_upd_evt_pending_check_isr+0xc2>
1005cbc8:	4601      	mov	r1, r0
1005cbca:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005cbcc:	79a3      	ldrb	r3, [r4, #6]
1005cbce:	9100      	str	r1, [sp, #0]
1005cbd0:	0759      	lsls	r1, r3, #29
1005cbd2:	d500      	bpl.n	1005cbd6 <LL_phy_upd_evt_pending_check_isr+0xce>
1005cbd4:	4603      	mov	r3, r0
1005cbd6:	2080      	movs	r0, #128	@ 0x80
1005cbd8:	2100      	movs	r1, #0
1005cbda:	f000 f80f 	bl	1005cbfc <hci_le_phy_update_complete_event_push>
1005cbde:	8830      	ldrh	r0, [r6, #0]
1005cbe0:	4905      	ldr	r1, [pc, #20]	@ (1005cbf8 <__arm_cp.17_3>)
1005cbe2:	4001      	ands	r1, r0
1005cbe4:	8031      	strh	r1, [r6, #0]
1005cbe6:	b007      	add	sp, #28
1005cbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005cbea:	46c0      	nop			@ (mov r8, r8)

1005cbec <__arm_cp.17_0>:
1005cbec:	20001174 	.word	0x20001174

1005cbf0 <__arm_cp.17_1>:
1005cbf0:	20001124 	.word	0x20001124

1005cbf4 <__arm_cp.17_2>:
1005cbf4:	0000fdff 	.word	0x0000fdff

1005cbf8 <__arm_cp.17_3>:
1005cbf8:	0000feff 	.word	0x0000feff

1005cbfc <hci_le_phy_update_complete_event_push>:
1005cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005cbfe:	4604      	mov	r4, r0
1005cc00:	06c0      	lsls	r0, r0, #27
1005cc02:	d42c      	bmi.n	1005cc5e <hci_le_phy_update_complete_event_push+0x62>
1005cc04:	460f      	mov	r7, r1
1005cc06:	4816      	ldr	r0, [pc, #88]	@ (1005cc60 <__arm_cp.18_0>)
1005cc08:	6800      	ldr	r0, [r0, #0]
1005cc0a:	213d      	movs	r1, #61	@ 0x3d
1005cc0c:	5c41      	ldrb	r1, [r0, r1]
1005cc0e:	0689      	lsls	r1, r1, #26
1005cc10:	d525      	bpl.n	1005cc5e <hci_le_phy_update_complete_event_push+0x62>
1005cc12:	303d      	adds	r0, #61	@ 0x3d
1005cc14:	7a80      	ldrb	r0, [r0, #10]
1005cc16:	0700      	lsls	r0, r0, #28
1005cc18:	d521      	bpl.n	1005cc5e <hci_le_phy_update_complete_event_push+0x62>
1005cc1a:	461e      	mov	r6, r3
1005cc1c:	4615      	mov	r5, r2
1005cc1e:	4811      	ldr	r0, [pc, #68]	@ (1005cc64 <__arm_cp.18_1>)
1005cc20:	6800      	ldr	r0, [r0, #0]
1005cc22:	0761      	lsls	r1, r4, #29
1005cc24:	0ec9      	lsrs	r1, r1, #27
1005cc26:	1840      	adds	r0, r0, r1
1005cc28:	6900      	ldr	r0, [r0, #16]
1005cc2a:	2227      	movs	r2, #39	@ 0x27
1005cc2c:	2303      	movs	r3, #3
1005cc2e:	4621      	mov	r1, r4
1005cc30:	f7f6 fc1a 	bl	10053468 <aci_event_fifo_push_header>
1005cc34:	2800      	cmp	r0, #0
1005cc36:	d012      	beq.n	1005cc5e <hci_le_phy_update_complete_event_push+0x62>
1005cc38:	4601      	mov	r1, r0
1005cc3a:	9806      	ldr	r0, [sp, #24]
1005cc3c:	724d      	strb	r5, [r1, #9]
1005cc3e:	7308      	strb	r0, [r1, #12]
1005cc40:	72ce      	strb	r6, [r1, #11]
1005cc42:	720f      	strb	r7, [r1, #8]
1005cc44:	200c      	movs	r0, #12
1005cc46:	71c8      	strb	r0, [r1, #7]
1005cc48:	2006      	movs	r0, #6
1005cc4a:	7188      	strb	r0, [r1, #6]
1005cc4c:	203e      	movs	r0, #62	@ 0x3e
1005cc4e:	7148      	strb	r0, [r1, #5]
1005cc50:	2004      	movs	r0, #4
1005cc52:	7108      	strb	r0, [r1, #4]
1005cc54:	0a28      	lsrs	r0, r5, #8
1005cc56:	7288      	strb	r0, [r1, #10]
1005cc58:	4620      	mov	r0, r4
1005cc5a:	f7f6 fca2 	bl	100535a2 <aci_event_fifo_push>
1005cc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005cc60 <__arm_cp.18_0>:
1005cc60:	20001174 	.word	0x20001174

1005cc64 <__arm_cp.18_1>:
1005cc64:	20001124 	.word	0x20001124

1005cc68 <LL_adjust_max_tx_data_frag>:
1005cc68:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005cc6a:	9302      	str	r3, [sp, #8]
1005cc6c:	9201      	str	r2, [sp, #4]
1005cc6e:	460e      	mov	r6, r1
1005cc70:	4605      	mov	r5, r0
1005cc72:	f7fb fc83 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005cc76:	4604      	mov	r4, r0
1005cc78:	4607      	mov	r7, r0
1005cc7a:	3490      	adds	r4, #144	@ 0x90
1005cc7c:	4628      	mov	r0, r5
1005cc7e:	f7fb fcb1 	bl	100585e4 <llc_conn_get_phy_upd_cntxt_per_p>
1005cc82:	9908      	ldr	r1, [sp, #32]
1005cc84:	2e04      	cmp	r6, #4
1005cc86:	d106      	bne.n	1005cc96 <LL_adjust_max_tx_data_frag+0x2e>
1005cc88:	2800      	cmp	r0, #0
1005cc8a:	d004      	beq.n	1005cc96 <LL_adjust_max_tx_data_frag+0x2e>
1005cc8c:	9a01      	ldr	r2, [sp, #4]
1005cc8e:	2a00      	cmp	r2, #0
1005cc90:	d00c      	beq.n	1005ccac <LL_adjust_max_tx_data_frag+0x44>
1005cc92:	220a      	movs	r2, #10
1005cc94:	e00b      	b.n	1005ccae <LL_adjust_max_tx_data_frag+0x46>
1005cc96:	8888      	ldrh	r0, [r1, #4]
1005cc98:	8008      	strh	r0, [r1, #0]
1005cc9a:	2e01      	cmp	r6, #1
1005cc9c:	d102      	bne.n	1005cca4 <LL_adjust_max_tx_data_frag+0x3c>
1005cc9e:	08c0      	lsrs	r0, r0, #3
1005cca0:	380e      	subs	r0, #14
1005cca2:	e001      	b.n	1005cca8 <LL_adjust_max_tx_data_frag+0x40>
1005cca4:	0880      	lsrs	r0, r0, #2
1005cca6:	380f      	subs	r0, #15
1005cca8:	9e02      	ldr	r6, [sp, #8]
1005ccaa:	e00f      	b.n	1005cccc <LL_adjust_max_tx_data_frag+0x64>
1005ccac:	2208      	movs	r2, #8
1005ccae:	9e02      	ldr	r6, [sp, #8]
1005ccb0:	5a8a      	ldrh	r2, [r1, r2]
1005ccb2:	800a      	strh	r2, [r1, #0]
1005ccb4:	8800      	ldrh	r0, [r0, #0]
1005ccb6:	2802      	cmp	r0, #2
1005ccb8:	d001      	beq.n	1005ccbe <LL_adjust_max_tx_data_frag+0x56>
1005ccba:	2001      	movs	r0, #1
1005ccbc:	e000      	b.n	1005ccc0 <LL_adjust_max_tx_data_frag+0x58>
1005ccbe:	2003      	movs	r0, #3
1005ccc0:	4b0b      	ldr	r3, [pc, #44]	@ (1005ccf0 <__arm_cp.22_0>)
1005ccc2:	18d2      	adds	r2, r2, r3
1005ccc4:	40c2      	lsrs	r2, r0
1005ccc6:	480b      	ldr	r0, [pc, #44]	@ (1005ccf4 <__arm_cp.22_1>)
1005ccc8:	1810      	adds	r0, r2, r0
1005ccca:	08c0      	lsrs	r0, r0, #3
1005cccc:	b283      	uxth	r3, r0
1005ccce:	8822      	ldrh	r2, [r4, #0]
1005ccd0:	429a      	cmp	r2, r3
1005ccd2:	d300      	bcc.n	1005ccd6 <LL_adjust_max_tx_data_frag+0x6e>
1005ccd4:	4602      	mov	r2, r0
1005ccd6:	2e00      	cmp	r6, #0
1005ccd8:	d003      	beq.n	1005cce2 <LL_adjust_max_tx_data_frag+0x7a>
1005ccda:	b293      	uxth	r3, r2
1005ccdc:	89c8      	ldrh	r0, [r1, #14]
1005ccde:	4298      	cmp	r0, r3
1005cce0:	d300      	bcc.n	1005cce4 <LL_adjust_max_tx_data_frag+0x7c>
1005cce2:	4610      	mov	r0, r2
1005cce4:	8060      	strh	r0, [r4, #2]
1005cce6:	4638      	mov	r0, r7
1005cce8:	f7fb fefa 	bl	10058ae0 <llc_conn_guard_time_for_close_conn_event>
1005ccec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ccee:	46c0      	nop			@ (mov r8, r8)

1005ccf0 <__arm_cp.22_0>:
1005ccf0:	fffffe88 	.word	0xfffffe88

1005ccf4 <__arm_cp.22_1>:
1005ccf4:	0007ffb5 	.word	0x0007ffb5

1005ccf8 <LL_version_exchange>:
1005ccf8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ccfa:	b087      	sub	sp, #28
1005ccfc:	461e      	mov	r6, r3
1005ccfe:	4614      	mov	r4, r2
1005cd00:	460f      	mov	r7, r1
1005cd02:	4605      	mov	r5, r0
1005cd04:	f7fd faba 	bl	1005a27c <llc_cpe_sm_get_cpf_cntxt_p>
1005cd08:	9004      	str	r0, [sp, #16]
1005cd0a:	4628      	mov	r0, r5
1005cd0c:	f7fb fc36 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005cd10:	22ff      	movs	r2, #255	@ 0xff
1005cd12:	2c06      	cmp	r4, #6
1005cd14:	d900      	bls.n	1005cd18 <LL_version_exchange+0x20>
1005cd16:	e0a2      	b.n	1005ce5e <LL_version_exchange+0x166>
1005cd18:	4603      	mov	r3, r0
1005cd1a:	46c0      	nop			@ (mov r8, r8)
1005cd1c:	447c      	add	r4, pc
1005cd1e:	7924      	ldrb	r4, [r4, #4]
1005cd20:	0064      	lsls	r4, r4, #1
1005cd22:	44a7      	add	pc, r4
1005cd24:	449c1903 	.word	0x449c1903
1005cd28:	005f9c9c 	.word	0x005f9c9c
1005cd2c:	2f01      	cmp	r7, #1
1005cd2e:	d16a      	bne.n	1005ce06 <LL_version_exchange+0x10e>
1005cd30:	2019      	movs	r0, #25
1005cd32:	0100      	lsls	r0, r0, #4
1005cd34:	181c      	adds	r4, r3, r0
1005cd36:	5a18      	ldrh	r0, [r3, r0]
1005cd38:	04c1      	lsls	r1, r0, #19
1005cd3a:	9904      	ldr	r1, [sp, #16]
1005cd3c:	d56f      	bpl.n	1005ce1e <LL_version_exchange+0x126>
1005cd3e:	4628      	mov	r0, r5
1005cd40:	f000 f8a4 	bl	1005ce8c <LL_conn_version_exchange_set_cached>
1005cd44:	2101      	movs	r1, #1
1005cd46:	2205      	movs	r2, #5
1005cd48:	4628      	mov	r0, r5
1005cd4a:	f7fd fa69 	bl	1005a220 <llc_cpe_sm_disable>
1005cd4e:	8821      	ldrh	r1, [r4, #0]
1005cd50:	484c      	ldr	r0, [pc, #304]	@ (1005ce84 <__arm_cp.0_0>)
1005cd52:	4008      	ands	r0, r1
1005cd54:	22ff      	movs	r2, #255	@ 0xff
1005cd56:	e063      	b.n	1005ce20 <LL_version_exchange+0x128>
1005cd58:	9302      	str	r3, [sp, #8]
1005cd5a:	9203      	str	r2, [sp, #12]
1005cd5c:	4628      	mov	r0, r5
1005cd5e:	f000 f8cf 	bl	1005cf00 <LL_conn_get_version_exchange_cached>
1005cd62:	2800      	cmp	r0, #0
1005cd64:	d17a      	bne.n	1005ce5c <LL_version_exchange+0x164>
1005cd66:	1cf0      	adds	r0, r6, #3
1005cd68:	2205      	movs	r2, #5
1005cd6a:	9201      	str	r2, [sp, #4]
1005cd6c:	9c04      	ldr	r4, [sp, #16]
1005cd6e:	4621      	mov	r1, r4
1005cd70:	f005 fb1c 	bl	100623ac <char_copy>
1005cd74:	9e02      	ldr	r6, [sp, #8]
1005cd76:	4631      	mov	r1, r6
1005cd78:	313c      	adds	r1, #60	@ 0x3c
1005cd7a:	4620      	mov	r0, r4
1005cd7c:	9a01      	ldr	r2, [sp, #4]
1005cd7e:	f005 fb15 	bl	100623ac <char_copy>
1005cd82:	2019      	movs	r0, #25
1005cd84:	0101      	lsls	r1, r0, #4
1005cd86:	1870      	adds	r0, r6, r1
1005cd88:	5a71      	ldrh	r1, [r6, r1]
1005cd8a:	050a      	lsls	r2, r1, #20
1005cd8c:	d56a      	bpl.n	1005ce64 <LL_version_exchange+0x16c>
1005cd8e:	2201      	movs	r2, #1
1005cd90:	0312      	lsls	r2, r2, #12
1005cd92:	4311      	orrs	r1, r2
1005cd94:	8001      	strh	r1, [r0, #0]
1005cd96:	2205      	movs	r2, #5
1005cd98:	4628      	mov	r0, r5
1005cd9a:	4639      	mov	r1, r7
1005cd9c:	f7fd fa40 	bl	1005a220 <llc_cpe_sm_disable>
1005cda0:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005cda2:	4621      	mov	r1, r4
1005cda4:	f000 f884 	bl	1005ceb0 <hci_read_remote_version_information_complete_event_push>
1005cda8:	4628      	mov	r0, r5
1005cdaa:	4621      	mov	r1, r4
1005cdac:	e017      	b.n	1005cdde <LL_version_exchange+0xe6>
1005cdae:	78b0      	ldrb	r0, [r6, #2]
1005cdb0:	280c      	cmp	r0, #12
1005cdb2:	d154      	bne.n	1005ce5e <LL_version_exchange+0x166>
1005cdb4:	1cf0      	adds	r0, r6, #3
1005cdb6:	2405      	movs	r4, #5
1005cdb8:	9e04      	ldr	r6, [sp, #16]
1005cdba:	4631      	mov	r1, r6
1005cdbc:	9203      	str	r2, [sp, #12]
1005cdbe:	4622      	mov	r2, r4
1005cdc0:	9302      	str	r3, [sp, #8]
1005cdc2:	f005 faf3 	bl	100623ac <char_copy>
1005cdc6:	4628      	mov	r0, r5
1005cdc8:	4639      	mov	r1, r7
1005cdca:	4622      	mov	r2, r4
1005cdcc:	f7fd fa28 	bl	1005a220 <llc_cpe_sm_disable>
1005cdd0:	9802      	ldr	r0, [sp, #8]
1005cdd2:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005cdd4:	4631      	mov	r1, r6
1005cdd6:	f000 f86b 	bl	1005ceb0 <hci_read_remote_version_information_complete_event_push>
1005cdda:	4628      	mov	r0, r5
1005cddc:	4631      	mov	r1, r6
1005cdde:	f000 f855 	bl	1005ce8c <LL_conn_version_exchange_set_cached>
1005cde2:	e03b      	b.n	1005ce5c <LL_version_exchange+0x164>
1005cde4:	9203      	str	r2, [sp, #12]
1005cde6:	a806      	add	r0, sp, #24
1005cde8:	2130      	movs	r1, #48	@ 0x30
1005cdea:	8001      	strh	r1, [r0, #0]
1005cdec:	2f01      	cmp	r7, #1
1005cdee:	d120      	bne.n	1005ce32 <LL_version_exchange+0x13a>
1005cdf0:	2019      	movs	r0, #25
1005cdf2:	0101      	lsls	r1, r0, #4
1005cdf4:	5a58      	ldrh	r0, [r3, r1]
1005cdf6:	0482      	lsls	r2, r0, #18
1005cdf8:	d516      	bpl.n	1005ce28 <LL_version_exchange+0x130>
1005cdfa:	2101      	movs	r1, #1
1005cdfc:	2205      	movs	r2, #5
1005cdfe:	4628      	mov	r0, r5
1005ce00:	f7fd fa0e 	bl	1005a220 <llc_cpe_sm_disable>
1005ce04:	e015      	b.n	1005ce32 <LL_version_exchange+0x13a>
1005ce06:	4614      	mov	r4, r2
1005ce08:	2205      	movs	r2, #5
1005ce0a:	4628      	mov	r0, r5
1005ce0c:	4639      	mov	r1, r7
1005ce0e:	f7fd fa07 	bl	1005a220 <llc_cpe_sm_disable>
1005ce12:	4628      	mov	r0, r5
1005ce14:	9904      	ldr	r1, [sp, #16]
1005ce16:	f000 f839 	bl	1005ce8c <LL_conn_version_exchange_set_cached>
1005ce1a:	4622      	mov	r2, r4
1005ce1c:	e01f      	b.n	1005ce5e <LL_version_exchange+0x166>
1005ce1e:	220c      	movs	r2, #12
1005ce20:	4919      	ldr	r1, [pc, #100]	@ (1005ce88 <__arm_cp.0_1>)
1005ce22:	4001      	ands	r1, r0
1005ce24:	8021      	strh	r1, [r4, #0]
1005ce26:	e01a      	b.n	1005ce5e <LL_version_exchange+0x166>
1005ce28:	1859      	adds	r1, r3, r1
1005ce2a:	2201      	movs	r2, #1
1005ce2c:	02d2      	lsls	r2, r2, #11
1005ce2e:	4310      	orrs	r0, r2
1005ce30:	8008      	strh	r0, [r1, #0]
1005ce32:	200d      	movs	r0, #13
1005ce34:	70f0      	strb	r0, [r6, #3]
1005ce36:	200c      	movs	r0, #12
1005ce38:	70b0      	strb	r0, [r6, #2]
1005ce3a:	2006      	movs	r0, #6
1005ce3c:	7070      	strb	r0, [r6, #1]
1005ce3e:	2003      	movs	r0, #3
1005ce40:	7030      	strb	r0, [r6, #0]
1005ce42:	1d31      	adds	r1, r6, #4
1005ce44:	a806      	add	r0, sp, #24
1005ce46:	2402      	movs	r4, #2
1005ce48:	4622      	mov	r2, r4
1005ce4a:	f005 faaf 	bl	100623ac <char_copy>
1005ce4e:	a805      	add	r0, sp, #20
1005ce50:	2104      	movs	r1, #4
1005ce52:	8001      	strh	r1, [r0, #0]
1005ce54:	1db1      	adds	r1, r6, #6
1005ce56:	4622      	mov	r2, r4
1005ce58:	f005 faa8 	bl	100623ac <char_copy>
1005ce5c:	9a03      	ldr	r2, [sp, #12]
1005ce5e:	4610      	mov	r0, r2
1005ce60:	b007      	add	sp, #28
1005ce62:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ce64:	2201      	movs	r2, #1
1005ce66:	0352      	lsls	r2, r2, #13
1005ce68:	4311      	orrs	r1, r2
1005ce6a:	8001      	strh	r1, [r0, #0]
1005ce6c:	4628      	mov	r0, r5
1005ce6e:	4639      	mov	r1, r7
1005ce70:	f7fd fa1c 	bl	1005a2ac <llc_cpe_sm_tx_pdu>
1005ce74:	2205      	movs	r2, #5
1005ce76:	2300      	movs	r3, #0
1005ce78:	4628      	mov	r0, r5
1005ce7a:	4639      	mov	r1, r7
1005ce7c:	f7fd f9e0 	bl	1005a240 <llc_cpe_sm_enable>
1005ce80:	e7ec      	b.n	1005ce5c <LL_version_exchange+0x164>
1005ce82:	46c0      	nop			@ (mov r8, r8)

1005ce84 <__arm_cp.0_0>:
1005ce84:	0000efff 	.word	0x0000efff

1005ce88 <__arm_cp.0_1>:
1005ce88:	0000f7ff 	.word	0x0000f7ff

1005ce8c <LL_conn_version_exchange_set_cached>:
1005ce8c:	b510      	push	{r4, lr}
1005ce8e:	460c      	mov	r4, r1
1005ce90:	f7fb fb74 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005ce94:	4601      	mov	r1, r0
1005ce96:	2019      	movs	r0, #25
1005ce98:	0100      	lsls	r0, r0, #4
1005ce9a:	5a0a      	ldrh	r2, [r1, r0]
1005ce9c:	2301      	movs	r3, #1
1005ce9e:	021b      	lsls	r3, r3, #8
1005cea0:	4313      	orrs	r3, r2
1005cea2:	520b      	strh	r3, [r1, r0]
1005cea4:	313c      	adds	r1, #60	@ 0x3c
1005cea6:	2205      	movs	r2, #5
1005cea8:	4620      	mov	r0, r4
1005ceaa:	f005 fa7f 	bl	100623ac <char_copy>
1005ceae:	bd10      	pop	{r4, pc}

1005ceb0 <hci_read_remote_version_information_complete_event_push>:
1005ceb0:	b570      	push	{r4, r5, r6, lr}
1005ceb2:	460c      	mov	r4, r1
1005ceb4:	4605      	mov	r5, r0
1005ceb6:	4810      	ldr	r0, [pc, #64]	@ (1005cef8 <__arm_cp.2_0>)
1005ceb8:	6800      	ldr	r0, [r0, #0]
1005ceba:	2137      	movs	r1, #55	@ 0x37
1005cebc:	5c40      	ldrb	r0, [r0, r1]
1005cebe:	0700      	lsls	r0, r0, #28
1005cec0:	d519      	bpl.n	1005cef6 <hci_read_remote_version_information_complete_event_push+0x46>
1005cec2:	480e      	ldr	r0, [pc, #56]	@ (1005cefc <__arm_cp.2_1>)
1005cec4:	6800      	ldr	r0, [r0, #0]
1005cec6:	6980      	ldr	r0, [r0, #24]
1005cec8:	2102      	movs	r1, #2
1005ceca:	2221      	movs	r2, #33	@ 0x21
1005cecc:	2303      	movs	r3, #3
1005cece:	f7f6 facb 	bl	10053468 <aci_event_fifo_push_header>
1005ced2:	2800      	cmp	r0, #0
1005ced4:	d00f      	beq.n	1005cef6 <hci_read_remote_version_information_complete_event_push+0x46>
1005ced6:	4606      	mov	r6, r0
1005ced8:	1d00      	adds	r0, r0, #4
1005ceda:	4629      	mov	r1, r5
1005cedc:	4622      	mov	r2, r4
1005cede:	f7f6 fde5 	bl	10053aac <hci_read_remote_version_information_complete_event_copy>
1005cee2:	2008      	movs	r0, #8
1005cee4:	71b0      	strb	r0, [r6, #6]
1005cee6:	200c      	movs	r0, #12
1005cee8:	7170      	strb	r0, [r6, #5]
1005ceea:	2004      	movs	r0, #4
1005ceec:	7130      	strb	r0, [r6, #4]
1005ceee:	2002      	movs	r0, #2
1005cef0:	4631      	mov	r1, r6
1005cef2:	f7f6 fb56 	bl	100535a2 <aci_event_fifo_push>
1005cef6:	bd70      	pop	{r4, r5, r6, pc}

1005cef8 <__arm_cp.2_0>:
1005cef8:	20001174 	.word	0x20001174

1005cefc <__arm_cp.2_1>:
1005cefc:	20001124 	.word	0x20001124

1005cf00 <LL_conn_get_version_exchange_cached>:
1005cf00:	b580      	push	{r7, lr}
1005cf02:	f7fb fb3b 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005cf06:	21ff      	movs	r1, #255	@ 0xff
1005cf08:	3192      	adds	r1, #146	@ 0x92
1005cf0a:	5c41      	ldrb	r1, [r0, r1]
1005cf0c:	2001      	movs	r0, #1
1005cf0e:	4008      	ands	r0, r1
1005cf10:	bd80      	pop	{r7, pc}
	...

1005cf14 <llc_cte_get_ctxt>:
1005cf14:	4802      	ldr	r0, [pc, #8]	@ (1005cf20 <__arm_cp.2_0>)
1005cf16:	6800      	ldr	r0, [r0, #0]
1005cf18:	2194      	movs	r1, #148	@ 0x94
1005cf1a:	5840      	ldr	r0, [r0, r1]
1005cf1c:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1005cf1e:	4770      	bx	lr

1005cf20 <__arm_cp.2_0>:
1005cf20:	20001174 	.word	0x20001174

1005cf24 <llc_cte_init_ucfg_weak>:
1005cf24:	4770      	bx	lr

1005cf26 <llc_cte_mem_allocate_ucfg_weak>:
1005cf26:	4770      	bx	lr

1005cf28 <llc_cte_timer_error_ucfg_weak>:
1005cf28:	4770      	bx	lr

1005cf2a <llc_cte_timer_stop_ucfg_weak>:
1005cf2a:	2000      	movs	r0, #0
1005cf2c:	4770      	bx	lr
	...

1005cf30 <LL_dtm_init>:
1005cf30:	b5b0      	push	{r4, r5, r7, lr}
1005cf32:	480e      	ldr	r0, [pc, #56]	@ (1005cf6c <__arm_cp.0_0>)
1005cf34:	6800      	ldr	r0, [r0, #0]
1005cf36:	21a4      	movs	r1, #164	@ 0xa4
1005cf38:	5844      	ldr	r4, [r0, r1]
1005cf3a:	20ff      	movs	r0, #255	@ 0xff
1005cf3c:	77a0      	strb	r0, [r4, #30]
1005cf3e:	2500      	movs	r5, #0
1005cf40:	77e5      	strb	r5, [r4, #31]
1005cf42:	f7fa fcff 	bl	10057944 <cte_csr_ucfg_weak>
1005cf46:	2801      	cmp	r0, #1
1005cf48:	d10f      	bne.n	1005cf6a <LL_dtm_init+0x3a>
1005cf4a:	f7ff ffe3 	bl	1005cf14 <llc_cte_get_ctxt>
1005cf4e:	2224      	movs	r2, #36	@ 0x24
1005cf50:	4907      	ldr	r1, [pc, #28]	@ (1005cf70 <__arm_cp.0_1>)
1005cf52:	5c8a      	ldrb	r2, [r1, r2]
1005cf54:	2a00      	cmp	r2, #0
1005cf56:	462a      	mov	r2, r5
1005cf58:	d000      	beq.n	1005cf5c <LL_dtm_init+0x2c>
1005cf5a:	6802      	ldr	r2, [r0, #0]
1005cf5c:	62a2      	str	r2, [r4, #40]	@ 0x28
1005cf5e:	2223      	movs	r2, #35	@ 0x23
1005cf60:	5c89      	ldrb	r1, [r1, r2]
1005cf62:	2900      	cmp	r1, #0
1005cf64:	d000      	beq.n	1005cf68 <LL_dtm_init+0x38>
1005cf66:	6845      	ldr	r5, [r0, #4]
1005cf68:	62e5      	str	r5, [r4, #44]	@ 0x2c
1005cf6a:	bdb0      	pop	{r4, r5, r7, pc}

1005cf6c <__arm_cp.0_0>:
1005cf6c:	20001174 	.word	0x20001174

1005cf70 <__arm_cp.0_1>:
1005cf70:	20001188 	.word	0x20001188

1005cf74 <LL_eadv_switchbackupdata_data_struc>:
1005cf74:	b510      	push	{r4, lr}
1005cf76:	7c01      	ldrb	r1, [r0, #16]
1005cf78:	2902      	cmp	r1, #2
1005cf7a:	d109      	bne.n	1005cf90 <LL_eadv_switchbackupdata_data_struc+0x1c>
1005cf7c:	2401      	movs	r4, #1
1005cf7e:	7404      	strb	r4, [r0, #16]
1005cf80:	6801      	ldr	r1, [r0, #0]
1005cf82:	6882      	ldr	r2, [r0, #8]
1005cf84:	68c3      	ldr	r3, [r0, #12]
1005cf86:	c00c      	stmia	r0!, {r2, r3}
1005cf88:	20a1      	movs	r0, #161	@ 0xa1
1005cf8a:	f006 fcd5 	bl	10063938 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005cf8e:	e000      	b.n	1005cf92 <LL_eadv_switchbackupdata_data_struc+0x1e>
1005cf90:	2400      	movs	r4, #0
1005cf92:	4620      	mov	r0, r4
1005cf94:	bd10      	pop	{r4, pc}

1005cf96 <LL_eadv_Blue_Tx>:
1005cf96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005cf98:	461e      	mov	r6, r3
1005cf9a:	4617      	mov	r7, r2
1005cf9c:	460d      	mov	r5, r1
1005cf9e:	4604      	mov	r4, r0
1005cfa0:	f7ea f954 	bl	1004724c <BLEPLAT_CNTR_PacketInitTo0>
1005cfa4:	4620      	mov	r0, r4
1005cfa6:	f7ea f95f 	bl	10047268 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005cfaa:	4620      	mov	r0, r4
1005cfac:	f7ea f9db 	bl	10047366 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005cfb0:	4620      	mov	r0, r4
1005cfb2:	4621      	mov	r1, r4
1005cfb4:	f7ea f9e4 	bl	10047380 <BLEPLAT_CNTR_PacketSetNextPtr>
1005cfb8:	4620      	mov	r0, r4
1005cfba:	4639      	mov	r1, r7
1005cfbc:	f7ea f97b 	bl	100472b6 <BLEPLAT_CNTR_PacketSetDataPtr>
1005cfc0:	4620      	mov	r0, r4
1005cfc2:	4631      	mov	r1, r6
1005cfc4:	f7ea fa36 	bl	10047434 <BLEPLAT_CNTR_PacketSetTimeout>
1005cfc8:	9f06      	ldr	r7, [sp, #24]
1005cfca:	2e00      	cmp	r6, #0
1005cfcc:	d002      	beq.n	1005cfd4 <LL_eadv_Blue_Tx+0x3e>
1005cfce:	4620      	mov	r0, r4
1005cfd0:	f7ea fa3f 	bl	10047452 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005cfd4:	4620      	mov	r0, r4
1005cfd6:	f7ea f913 	bl	10047200 <BLEPLAT_CNTR_PacketClrIncChan>
1005cfda:	4620      	mov	r0, r4
1005cfdc:	f7ea f992 	bl	10047304 <BLEPLAT_CNTR_PacketSetIntDone>
1005cfe0:	4620      	mov	r0, r4
1005cfe2:	f7ea fa5c 	bl	1004749e <BLEPLAT_CNTR_PacketSetTxReady>
1005cfe6:	4620      	mov	r0, r4
1005cfe8:	2f81      	cmp	r7, #129	@ 0x81
1005cfea:	d109      	bne.n	1005d000 <LL_eadv_Blue_Tx+0x6a>
1005cfec:	4629      	mov	r1, r5
1005cfee:	f7ea f9e3 	bl	100473b8 <BLEPLAT_CNTR_PacketSetNextSlot>
1005cff2:	4620      	mov	r0, r4
1005cff4:	f7ea fa04 	bl	10047400 <BLEPLAT_CNTR_PacketSetPllTrig>
1005cff8:	4620      	mov	r0, r4
1005cffa:	f7ea fa36 	bl	1004746a <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1005cffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d000:	f7ea fa40 	bl	10047484 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005d004:	4620      	mov	r0, r4
1005d006:	f7ea f9ca 	bl	1004739e <BLEPLAT_CNTR_PacketSetNextRxMode>
1005d00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d00c <LL_eadv_Blue_Rx>:
1005d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d00e:	461e      	mov	r6, r3
1005d010:	4617      	mov	r7, r2
1005d012:	460d      	mov	r5, r1
1005d014:	4604      	mov	r4, r0
1005d016:	f7ea f919 	bl	1004724c <BLEPLAT_CNTR_PacketInitTo0>
1005d01a:	4620      	mov	r0, r4
1005d01c:	f7ea f924 	bl	10047268 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005d020:	4620      	mov	r0, r4
1005d022:	f7ea f9a0 	bl	10047366 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005d026:	4620      	mov	r0, r4
1005d028:	4621      	mov	r1, r4
1005d02a:	f7ea f9a9 	bl	10047380 <BLEPLAT_CNTR_PacketSetNextPtr>
1005d02e:	4620      	mov	r0, r4
1005d030:	4639      	mov	r1, r7
1005d032:	f7ea f940 	bl	100472b6 <BLEPLAT_CNTR_PacketSetDataPtr>
1005d036:	4620      	mov	r0, r4
1005d038:	4631      	mov	r1, r6
1005d03a:	f7ea f9fb 	bl	10047434 <BLEPLAT_CNTR_PacketSetTimeout>
1005d03e:	9f07      	ldr	r7, [sp, #28]
1005d040:	2e00      	cmp	r6, #0
1005d042:	d002      	beq.n	1005d04a <LL_eadv_Blue_Rx+0x3e>
1005d044:	4620      	mov	r0, r4
1005d046:	f7ea fa04 	bl	10047452 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005d04a:	4620      	mov	r0, r4
1005d04c:	f7ea f9bf 	bl	100473ce <BLEPLAT_CNTR_PacketSetNextTxMode>
1005d050:	4620      	mov	r0, r4
1005d052:	f7ea f8d5 	bl	10047200 <BLEPLAT_CNTR_PacketClrIncChan>
1005d056:	4620      	mov	r0, r4
1005d058:	f7ea f954 	bl	10047304 <BLEPLAT_CNTR_PacketSetIntDone>
1005d05c:	4620      	mov	r0, r4
1005d05e:	f7ea fa11 	bl	10047484 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005d062:	4620      	mov	r0, r4
1005d064:	f7ea f95a 	bl	1004731c <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005d068:	4620      	mov	r0, r4
1005d06a:	f7ea f9d6 	bl	1004741a <BLEPLAT_CNTR_PacketSetRxReady>
1005d06e:	2f81      	cmp	r7, #129	@ 0x81
1005d070:	d107      	bne.n	1005d082 <LL_eadv_Blue_Rx+0x76>
1005d072:	4620      	mov	r0, r4
1005d074:	4629      	mov	r1, r5
1005d076:	f7ea f99f 	bl	100473b8 <BLEPLAT_CNTR_PacketSetNextSlot>
1005d07a:	4620      	mov	r0, r4
1005d07c:	f7ea f8cc 	bl	10047218 <BLEPLAT_CNTR_PacketClrPllTrig>
1005d080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d082:	4620      	mov	r0, r4
1005d084:	f7ea f9bc 	bl	10047400 <BLEPLAT_CNTR_PacketSetPllTrig>
1005d088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005d08c <LL_eadv_BLUE_SM>:
1005d08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d08e:	461d      	mov	r5, r3
1005d090:	4616      	mov	r6, r2
1005d092:	460f      	mov	r7, r1
1005d094:	4604      	mov	r4, r0
1005d096:	f7ea fb8f 	bl	100477b8 <BLEPLAT_CNTR_SmInitTo0>
1005d09a:	4911      	ldr	r1, [pc, #68]	@ (1005d0e0 <__arm_cp.10_0>)
1005d09c:	4620      	mov	r0, r4
1005d09e:	f7ea fba9 	bl	100477f4 <BLEPLAT_CNTR_SmSetAccessAddr>
1005d0a2:	4910      	ldr	r1, [pc, #64]	@ (1005d0e4 <__arm_cp.10_1>)
1005d0a4:	4620      	mov	r0, r4
1005d0a6:	f7ea fbe8 	bl	1004787a <BLEPLAT_CNTR_SmSetCrcInit>
1005d0aa:	4620      	mov	r0, r4
1005d0ac:	4639      	mov	r1, r7
1005d0ae:	f7ea fd15 	bl	10047adc <BLEPLAT_CNTR_SmSetTxPwr>
1005d0b2:	4620      	mov	r0, r4
1005d0b4:	4631      	mov	r1, r6
1005d0b6:	f7ea fcea 	bl	10047a8e <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005d0ba:	4620      	mov	r0, r4
1005d0bc:	4629      	mov	r1, r5
1005d0be:	f7ea fc7a 	bl	100479b6 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005d0c2:	9806      	ldr	r0, [sp, #24]
1005d0c4:	2881      	cmp	r0, #129	@ 0x81
1005d0c6:	d103      	bne.n	1005d0d0 <LL_eadv_BLUE_SM+0x44>
1005d0c8:	4620      	mov	r0, r4
1005d0ca:	f7ea fcd1 	bl	10047a70 <BLEPLAT_CNTR_SmSetTxMode>
1005d0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d0d0:	4620      	mov	r0, r4
1005d0d2:	f7ea fc61 	bl	10047998 <BLEPLAT_CNTR_SmSetRxMode>
1005d0d6:	2101      	movs	r1, #1
1005d0d8:	4620      	mov	r0, r4
1005d0da:	f7ea fbf5 	bl	100478c8 <BLEPLAT_CNTR_SmSetHopIncr>
1005d0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d0e0 <__arm_cp.10_0>:
1005d0e0:	8e89bed6 	.word	0x8e89bed6

1005d0e4 <__arm_cp.10_1>:
1005d0e4:	00555555 	.word	0x00555555

1005d0e8 <llc_get_advertising_set_index>:
1005d0e8:	b570      	push	{r4, r5, r6, lr}
1005d0ea:	4604      	mov	r4, r0
1005d0ec:	f001 fa6e 	bl	1005e5cc <llc_get_linkms_cntxt_p>
1005d0f0:	214d      	movs	r1, #77	@ 0x4d
1005d0f2:	5c41      	ldrb	r1, [r0, r1]
1005d0f4:	4d09      	ldr	r5, [pc, #36]	@ (1005d11c <__arm_cp.12_0>)
1005d0f6:	2200      	movs	r2, #0
1005d0f8:	23be      	movs	r3, #190	@ 0xbe
1005d0fa:	4291      	cmp	r1, r2
1005d0fc:	d00b      	beq.n	1005d116 <llc_get_advertising_set_index+0x2e>
1005d0fe:	6806      	ldr	r6, [r0, #0]
1005d100:	5af6      	ldrh	r6, [r6, r3]
1005d102:	42a6      	cmp	r6, r4
1005d104:	4616      	mov	r6, r2
1005d106:	d000      	beq.n	1005d10a <llc_get_advertising_set_index+0x22>
1005d108:	462e      	mov	r6, r5
1005d10a:	2501      	movs	r5, #1
1005d10c:	022d      	lsls	r5, r5, #8
1005d10e:	195b      	adds	r3, r3, r5
1005d110:	1c52      	adds	r2, r2, #1
1005d112:	4635      	mov	r5, r6
1005d114:	e7f1      	b.n	1005d0fa <llc_get_advertising_set_index+0x12>
1005d116:	b2a8      	uxth	r0, r5
1005d118:	bd70      	pop	{r4, r5, r6, pc}
1005d11a:	46c0      	nop			@ (mov r8, r8)

1005d11c <__arm_cp.12_0>:
1005d11c:	0000ffff 	.word	0x0000ffff

1005d120 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>:
1005d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d122:	4604      	mov	r4, r0
1005d124:	f001 fa52 	bl	1005e5cc <llc_get_linkms_cntxt_p>
1005d128:	4601      	mov	r1, r0
1005d12a:	204d      	movs	r0, #77	@ 0x4d
1005d12c:	5c08      	ldrb	r0, [r1, r0]
1005d12e:	0202      	lsls	r2, r0, #8
1005d130:	2000      	movs	r0, #0
1005d132:	4b0d      	ldr	r3, [pc, #52]	@ (1005d168 <__arm_cp.17_0>)
1005d134:	4605      	mov	r5, r0
1005d136:	42aa      	cmp	r2, r5
1005d138:	d013      	beq.n	1005d162 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x42>
1005d13a:	680e      	ldr	r6, [r1, #0]
1005d13c:	1976      	adds	r6, r6, r5
1005d13e:	27be      	movs	r7, #190	@ 0xbe
1005d140:	5bf7      	ldrh	r7, [r6, r7]
1005d142:	429f      	cmp	r7, r3
1005d144:	d003      	beq.n	1005d14e <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x2e>
1005d146:	27ce      	movs	r7, #206	@ 0xce
1005d148:	5df7      	ldrb	r7, [r6, r7]
1005d14a:	2f01      	cmp	r7, #1
1005d14c:	d003      	beq.n	1005d156 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x36>
1005d14e:	2601      	movs	r6, #1
1005d150:	0236      	lsls	r6, r6, #8
1005d152:	19ad      	adds	r5, r5, r6
1005d154:	e7ef      	b.n	1005d136 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x16>
1005d156:	2c00      	cmp	r4, #0
1005d158:	d004      	beq.n	1005d164 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x44>
1005d15a:	20c3      	movs	r0, #195	@ 0xc3
1005d15c:	5c30      	ldrb	r0, [r6, r0]
1005d15e:	1e41      	subs	r1, r0, #1
1005d160:	4188      	sbcs	r0, r1
1005d162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d164:	2001      	movs	r0, #1
1005d166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d168 <__arm_cp.17_0>:
1005d168:	0000ffff 	.word	0x0000ffff

1005d16c <llc_eadv_generate_new_rpa_for_one_adv_set>:
1005d16c:	b5b0      	push	{r4, r5, r7, lr}
1005d16e:	4604      	mov	r4, r0
1005d170:	20d6      	movs	r0, #214	@ 0xd6
1005d172:	5c20      	ldrb	r0, [r4, r0]
1005d174:	0780      	lsls	r0, r0, #30
1005d176:	d401      	bmi.n	1005d17c <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1005d178:	2000      	movs	r0, #0
1005d17a:	bdb0      	pop	{r4, r5, r7, pc}
1005d17c:	4625      	mov	r5, r4
1005d17e:	3584      	adds	r5, #132	@ 0x84
1005d180:	4628      	mov	r0, r5
1005d182:	f7fd fdd8 	bl	1005ad36 <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1005d186:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005d188:	4628      	mov	r0, r5
1005d18a:	f7fd fdcc 	bl	1005ad26 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1005d18e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1005d190:	3008      	adds	r0, #8
1005d192:	2100      	movs	r1, #0
1005d194:	f7fd fdc5 	bl	1005ad22 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1005d198:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005d19a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005d19c:	6761      	str	r1, [r4, #116]	@ 0x74
1005d19e:	67a0      	str	r0, [r4, #120]	@ 0x78
1005d1a0:	2001      	movs	r0, #1
1005d1a2:	bdb0      	pop	{r4, r5, r7, pc}

1005d1a4 <EADV_init>:
1005d1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d1a6:	b085      	sub	sp, #20
1005d1a8:	9204      	str	r2, [sp, #16]
1005d1aa:	460e      	mov	r6, r1
1005d1ac:	4605      	mov	r5, r0
1005d1ae:	244d      	movs	r4, #77	@ 0x4d
1005d1b0:	f001 fa0c 	bl	1005e5cc <llc_get_linkms_cntxt_p>
1005d1b4:	5505      	strb	r5, [r0, r4]
1005d1b6:	6006      	str	r6, [r0, #0]
1005d1b8:	9003      	str	r0, [sp, #12]
1005d1ba:	304d      	adds	r0, #77	@ 0x4d
1005d1bc:	2101      	movs	r1, #1
1005d1be:	9002      	str	r0, [sp, #8]
1005d1c0:	7041      	strb	r1, [r0, #1]
1005d1c2:	9101      	str	r1, [sp, #4]
1005d1c4:	04cb      	lsls	r3, r1, #19
1005d1c6:	2600      	movs	r6, #0
1005d1c8:	277c      	movs	r7, #124	@ 0x7c
1005d1ca:	9a04      	ldr	r2, [sp, #16]
1005d1cc:	b2e8      	uxtb	r0, r5
1005d1ce:	4286      	cmp	r6, r0
1005d1d0:	d226      	bcs.n	1005d220 <EADV_init+0x7c>
1005d1d2:	9803      	ldr	r0, [sp, #12]
1005d1d4:	6800      	ldr	r0, [r0, #0]
1005d1d6:	51c3      	str	r3, [r0, r7]
1005d1d8:	19c5      	adds	r5, r0, r7
1005d1da:	2054      	movs	r0, #84	@ 0x54
1005d1dc:	4911      	ldr	r1, [pc, #68]	@ (1005d224 <__arm_cp.19_0>)
1005d1de:	5229      	strh	r1, [r5, r0]
1005d1e0:	2452      	movs	r4, #82	@ 0x52
1005d1e2:	2000      	movs	r0, #0
1005d1e4:	5328      	strh	r0, [r5, r4]
1005d1e6:	2442      	movs	r4, #66	@ 0x42
1005d1e8:	5329      	strh	r1, [r5, r4]
1005d1ea:	245e      	movs	r4, #94	@ 0x5e
1005d1ec:	5528      	strb	r0, [r5, r4]
1005d1ee:	245c      	movs	r4, #92	@ 0x5c
1005d1f0:	21ff      	movs	r1, #255	@ 0xff
1005d1f2:	5529      	strb	r1, [r5, r4]
1005d1f4:	215a      	movs	r1, #90	@ 0x5a
1005d1f6:	5468      	strb	r0, [r5, r1]
1005d1f8:	2146      	movs	r1, #70	@ 0x46
1005d1fa:	2407      	movs	r4, #7
1005d1fc:	526c      	strh	r4, [r5, r1]
1005d1fe:	6128      	str	r0, [r5, #16]
1005d200:	6168      	str	r0, [r5, #20]
1005d202:	606b      	str	r3, [r5, #4]
1005d204:	9904      	ldr	r1, [sp, #16]
1005d206:	2900      	cmp	r1, #0
1005d208:	d002      	beq.n	1005d210 <EADV_init+0x6c>
1005d20a:	6550      	str	r0, [r2, #84]	@ 0x54
1005d20c:	3d2c      	subs	r5, #44	@ 0x2c
1005d20e:	602a      	str	r2, [r5, #0]
1005d210:	9801      	ldr	r0, [sp, #4]
1005d212:	0200      	lsls	r0, r0, #8
1005d214:	183f      	adds	r7, r7, r0
1005d216:	325c      	adds	r2, #92	@ 0x5c
1005d218:	9802      	ldr	r0, [sp, #8]
1005d21a:	7805      	ldrb	r5, [r0, #0]
1005d21c:	1c76      	adds	r6, r6, #1
1005d21e:	e7d5      	b.n	1005d1cc <EADV_init+0x28>
1005d220:	b005      	add	sp, #20
1005d222:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d224 <__arm_cp.19_0>:
1005d224:	0000ffff 	.word	0x0000ffff

1005d228 <LL_LE_Set_Advertising_Parameters>:
1005d228:	b570      	push	{r4, r5, r6, lr}
1005d22a:	4604      	mov	r4, r0
1005d22c:	f001 f9ce 	bl	1005e5cc <llc_get_linkms_cntxt_p>
1005d230:	4605      	mov	r5, r0
1005d232:	4e30      	ldr	r6, [pc, #192]	@ (1005d2f4 <__arm_cp.20_0>)
1005d234:	4630      	mov	r0, r6
1005d236:	f7ff ff57 	bl	1005d0e8 <llc_get_advertising_set_index>
1005d23a:	492f      	ldr	r1, [pc, #188]	@ (1005d2f8 <__arm_cp.20_1>)
1005d23c:	4288      	cmp	r0, r1
1005d23e:	d112      	bne.n	1005d266 <LL_LE_Set_Advertising_Parameters+0x3e>
1005d240:	f000 f860 	bl	1005d304 <LL_Context_ReturnFree>
1005d244:	28ff      	cmp	r0, #255	@ 0xff
1005d246:	d034      	beq.n	1005d2b2 <LL_LE_Set_Advertising_Parameters+0x8a>
1005d248:	0200      	lsls	r0, r0, #8
1005d24a:	6829      	ldr	r1, [r5, #0]
1005d24c:	1808      	adds	r0, r1, r0
1005d24e:	21be      	movs	r1, #190	@ 0xbe
1005d250:	5246      	strh	r6, [r0, r1]
1005d252:	214c      	movs	r1, #76	@ 0x4c
1005d254:	2200      	movs	r2, #0
1005d256:	5442      	strb	r2, [r0, r1]
1005d258:	2138      	movs	r1, #56	@ 0x38
1005d25a:	5442      	strb	r2, [r0, r1]
1005d25c:	63c2      	str	r2, [r0, #60]	@ 0x3c
1005d25e:	6402      	str	r2, [r0, #64]	@ 0x40
1005d260:	6282      	str	r2, [r0, #40]	@ 0x28
1005d262:	62c2      	str	r2, [r0, #44]	@ 0x2c
1005d264:	e008      	b.n	1005d278 <LL_LE_Set_Advertising_Parameters+0x50>
1005d266:	0200      	lsls	r0, r0, #8
1005d268:	6829      	ldr	r1, [r5, #0]
1005d26a:	1808      	adds	r0, r1, r0
1005d26c:	21ce      	movs	r1, #206	@ 0xce
1005d26e:	5c41      	ldrb	r1, [r0, r1]
1005d270:	2901      	cmp	r1, #1
1005d272:	d101      	bne.n	1005d278 <LL_LE_Set_Advertising_Parameters+0x50>
1005d274:	250c      	movs	r5, #12
1005d276:	e03a      	b.n	1005d2ee <LL_LE_Set_Advertising_Parameters+0xc6>
1005d278:	7961      	ldrb	r1, [r4, #5]
1005d27a:	22c2      	movs	r2, #194	@ 0xc2
1005d27c:	5481      	strb	r1, [r0, r2]
1005d27e:	4606      	mov	r6, r0
1005d280:	36c2      	adds	r6, #194	@ 0xc2
1005d282:	2500      	movs	r5, #0
1005d284:	72f5      	strb	r5, [r6, #11]
1005d286:	2101      	movs	r1, #1
1005d288:	70f1      	strb	r1, [r6, #3]
1005d28a:	79a1      	ldrb	r1, [r4, #6]
1005d28c:	7071      	strb	r1, [r6, #1]
1005d28e:	8821      	ldrh	r1, [r4, #0]
1005d290:	0209      	lsls	r1, r1, #8
1005d292:	67c1      	str	r1, [r0, #124]	@ 0x7c
1005d294:	4601      	mov	r1, r0
1005d296:	3184      	adds	r1, #132	@ 0x84
1005d298:	7922      	ldrb	r2, [r4, #4]
1005d29a:	2a04      	cmp	r2, #4
1005d29c:	d815      	bhi.n	1005d2ca <LL_LE_Set_Advertising_Parameters+0xa2>
1005d29e:	46c0      	nop			@ (mov r8, r8)
1005d2a0:	447a      	add	r2, pc
1005d2a2:	7912      	ldrb	r2, [r2, #4]
1005d2a4:	0052      	lsls	r2, r2, #1
1005d2a6:	4497      	add	pc, r2
1005d2a8:	0c0a0602 	.word	0x0c0a0602
1005d2ac:	000e      	.short	0x000e
1005d2ae:	20f3      	movs	r0, #243	@ 0xf3
1005d2b0:	e00a      	b.n	1005d2c8 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d2b2:	2507      	movs	r5, #7
1005d2b4:	e01b      	b.n	1005d2ee <LL_LE_Set_Advertising_Parameters+0xc6>
1005d2b6:	4a11      	ldr	r2, [pc, #68]	@ (1005d2fc <__arm_cp.20_2>)
1005d2b8:	67c2      	str	r2, [r0, #124]	@ 0x7c
1005d2ba:	20fd      	movs	r0, #253	@ 0xfd
1005d2bc:	e004      	b.n	1005d2c8 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d2be:	20f2      	movs	r0, #242	@ 0xf2
1005d2c0:	e002      	b.n	1005d2c8 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d2c2:	20f0      	movs	r0, #240	@ 0xf0
1005d2c4:	e000      	b.n	1005d2c8 <LL_LE_Set_Advertising_Parameters+0xa0>
1005d2c6:	20f5      	movs	r0, #245	@ 0xf5
1005d2c8:	8688      	strh	r0, [r1, #52]	@ 0x34
1005d2ca:	7a20      	ldrb	r0, [r4, #8]
1005d2cc:	79e2      	ldrb	r2, [r4, #7]
1005d2ce:	600d      	str	r5, [r1, #0]
1005d2d0:	604d      	str	r5, [r1, #4]
1005d2d2:	7532      	strb	r2, [r6, #20]
1005d2d4:	7570      	strb	r0, [r6, #21]
1005d2d6:	7a20      	ldrb	r0, [r4, #8]
1005d2d8:	7008      	strb	r0, [r1, #0]
1005d2da:	1c48      	adds	r0, r1, #1
1005d2dc:	3409      	adds	r4, #9
1005d2de:	2206      	movs	r2, #6
1005d2e0:	4621      	mov	r1, r4
1005d2e2:	f7e8 fdc9 	bl	10045e78 <BLEPLAT_MemCpy>
1005d2e6:	4806      	ldr	r0, [pc, #24]	@ (1005d300 <__arm_cp.20_3>)
1005d2e8:	6800      	ldr	r0, [r0, #0]
1005d2ea:	7a40      	ldrb	r0, [r0, #9]
1005d2ec:	70b0      	strb	r0, [r6, #2]
1005d2ee:	4628      	mov	r0, r5
1005d2f0:	bd70      	pop	{r4, r5, r6, pc}
1005d2f2:	46c0      	nop			@ (mov r8, r8)

1005d2f4 <__arm_cp.20_0>:
1005d2f4:	0000fffc 	.word	0x0000fffc

1005d2f8 <__arm_cp.20_1>:
1005d2f8:	0000ffff 	.word	0x0000ffff

1005d2fc <__arm_cp.20_2>:
1005d2fc:	000005dc 	.word	0x000005dc

1005d300 <__arm_cp.20_3>:
1005d300:	20001174 	.word	0x20001174

1005d304 <LL_Context_ReturnFree>:
1005d304:	b510      	push	{r4, lr}
1005d306:	f001 f961 	bl	1005e5cc <llc_get_linkms_cntxt_p>
1005d30a:	214d      	movs	r1, #77	@ 0x4d
1005d30c:	5c42      	ldrb	r2, [r0, r1]
1005d30e:	2100      	movs	r1, #0
1005d310:	23be      	movs	r3, #190	@ 0xbe
1005d312:	428a      	cmp	r2, r1
1005d314:	d008      	beq.n	1005d328 <LL_Context_ReturnFree+0x24>
1005d316:	6804      	ldr	r4, [r0, #0]
1005d318:	5ae4      	ldrh	r4, [r4, r3]
1005d31a:	0b24      	lsrs	r4, r4, #12
1005d31c:	d105      	bne.n	1005d32a <LL_Context_ReturnFree+0x26>
1005d31e:	2401      	movs	r4, #1
1005d320:	0224      	lsls	r4, r4, #8
1005d322:	191b      	adds	r3, r3, r4
1005d324:	1c49      	adds	r1, r1, #1
1005d326:	e7f4      	b.n	1005d312 <LL_Context_ReturnFree+0xe>
1005d328:	21ff      	movs	r1, #255	@ 0xff
1005d32a:	b2c8      	uxtb	r0, r1
1005d32c:	bd10      	pop	{r4, pc}
	...

1005d330 <LL_LE_Set_Advertise_Enable>:
1005d330:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005d332:	4604      	mov	r4, r0
1005d334:	f000 f816 	bl	1005d364 <LL_LE_Set_Advertising_Parameters_Default>
1005d338:	2300      	movs	r3, #0
1005d33a:	9300      	str	r3, [sp, #0]
1005d33c:	2101      	movs	r1, #1
1005d33e:	4d07      	ldr	r5, [pc, #28]	@ (1005d35c <__arm_cp.22_0>)
1005d340:	4620      	mov	r0, r4
1005d342:	462a      	mov	r2, r5
1005d344:	f000 f82c 	bl	1005d3a0 <LL_Set_Extented_Advertising_Enable>
1005d348:	4604      	mov	r4, r0
1005d34a:	4805      	ldr	r0, [pc, #20]	@ (1005d360 <__arm_cp.22_1>)
1005d34c:	6801      	ldr	r1, [r0, #0]
1005d34e:	3156      	adds	r1, #86	@ 0x56
1005d350:	4628      	mov	r0, r5
1005d352:	f000 f98f 	bl	1005d674 <LL_Set_Extented_Advertising_Set_Random_Address>
1005d356:	4620      	mov	r0, r4
1005d358:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005d35a:	46c0      	nop			@ (mov r8, r8)

1005d35c <__arm_cp.22_0>:
1005d35c:	0000fffc 	.word	0x0000fffc

1005d360 <__arm_cp.22_1>:
1005d360:	20001174 	.word	0x20001174

1005d364 <LL_LE_Set_Advertising_Parameters_Default>:
1005d364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005d366:	480c      	ldr	r0, [pc, #48]	@ (1005d398 <__arm_cp.23_0>)
1005d368:	f7ff febe 	bl	1005d0e8 <llc_get_advertising_set_index>
1005d36c:	490b      	ldr	r1, [pc, #44]	@ (1005d39c <__arm_cp.23_1>)
1005d36e:	4288      	cmp	r0, r1
1005d370:	d110      	bne.n	1005d394 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1005d372:	466c      	mov	r4, sp
1005d374:	2100      	movs	r1, #0
1005d376:	7221      	strb	r1, [r4, #8]
1005d378:	2001      	movs	r0, #1
1005d37a:	02c0      	lsls	r0, r0, #11
1005d37c:	8020      	strh	r0, [r4, #0]
1005d37e:	2007      	movs	r0, #7
1005d380:	0200      	lsls	r0, r0, #8
1005d382:	9001      	str	r0, [sp, #4]
1005d384:	4620      	mov	r0, r4
1005d386:	3009      	adds	r0, #9
1005d388:	2206      	movs	r2, #6
1005d38a:	f7e8 fd85 	bl	10045e98 <BLEPLAT_MemSet>
1005d38e:	4620      	mov	r0, r4
1005d390:	f7ff ff4a 	bl	1005d228 <LL_LE_Set_Advertising_Parameters>
1005d394:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1005d396:	46c0      	nop			@ (mov r8, r8)

1005d398 <__arm_cp.23_0>:
1005d398:	0000fffc 	.word	0x0000fffc

1005d39c <__arm_cp.23_1>:
1005d39c:	0000ffff 	.word	0x0000ffff

1005d3a0 <LL_Set_Extented_Advertising_Enable>:
1005d3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d3a2:	b08f      	sub	sp, #60	@ 0x3c
1005d3a4:	930e      	str	r3, [sp, #56]	@ 0x38
1005d3a6:	4617      	mov	r7, r2
1005d3a8:	460d      	mov	r5, r1
1005d3aa:	4606      	mov	r6, r0
1005d3ac:	4305      	orrs	r5, r0
1005d3ae:	f001 f90d 	bl	1005e5cc <llc_get_linkms_cntxt_p>
1005d3b2:	4604      	mov	r4, r0
1005d3b4:	2d00      	cmp	r5, #0
1005d3b6:	d007      	beq.n	1005d3c8 <LL_Set_Extented_Advertising_Enable+0x28>
1005d3b8:	4638      	mov	r0, r7
1005d3ba:	f7ff fe95 	bl	1005d0e8 <llc_get_advertising_set_index>
1005d3be:	49a7      	ldr	r1, [pc, #668]	@ (1005d65c <__arm_cp.24_1>)
1005d3c0:	4288      	cmp	r0, r1
1005d3c2:	d118      	bne.n	1005d3f6 <LL_Set_Extented_Advertising_Enable+0x56>
1005d3c4:	2042      	movs	r0, #66	@ 0x42
1005d3c6:	e04a      	b.n	1005d45e <LL_Set_Extented_Advertising_Enable+0xbe>
1005d3c8:	4625      	mov	r5, r4
1005d3ca:	354d      	adds	r5, #77	@ 0x4d
1005d3cc:	2600      	movs	r6, #0
1005d3ce:	4637      	mov	r7, r6
1005d3d0:	960e      	str	r6, [sp, #56]	@ 0x38
1005d3d2:	7828      	ldrb	r0, [r5, #0]
1005d3d4:	4286      	cmp	r6, r0
1005d3d6:	d20c      	bcs.n	1005d3f2 <LL_Set_Extented_Advertising_Enable+0x52>
1005d3d8:	6820      	ldr	r0, [r4, #0]
1005d3da:	19c0      	adds	r0, r0, r7
1005d3dc:	21ce      	movs	r1, #206	@ 0xce
1005d3de:	5c41      	ldrb	r1, [r0, r1]
1005d3e0:	2901      	cmp	r1, #1
1005d3e2:	d101      	bne.n	1005d3e8 <LL_Set_Extented_Advertising_Enable+0x48>
1005d3e4:	f000 f992 	bl	1005d70c <EADV_stop>
1005d3e8:	2001      	movs	r0, #1
1005d3ea:	0200      	lsls	r0, r0, #8
1005d3ec:	183f      	adds	r7, r7, r0
1005d3ee:	1c76      	adds	r6, r6, #1
1005d3f0:	e7ef      	b.n	1005d3d2 <LL_Set_Extented_Advertising_Enable+0x32>
1005d3f2:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005d3f4:	e033      	b.n	1005d45e <LL_Set_Extented_Advertising_Enable+0xbe>
1005d3f6:	0201      	lsls	r1, r0, #8
1005d3f8:	6822      	ldr	r2, [r4, #0]
1005d3fa:	1854      	adds	r4, r2, r1
1005d3fc:	21ce      	movs	r1, #206	@ 0xce
1005d3fe:	5c61      	ldrb	r1, [r4, r1]
1005d400:	2e01      	cmp	r6, #1
1005d402:	d124      	bne.n	1005d44e <LL_Set_Extented_Advertising_Enable+0xae>
1005d404:	0200      	lsls	r0, r0, #8
1005d406:	1815      	adds	r5, r2, r0
1005d408:	20d6      	movs	r0, #214	@ 0xd6
1005d40a:	5c28      	ldrb	r0, [r5, r0]
1005d40c:	2701      	movs	r7, #1
1005d40e:	4038      	ands	r0, r7
1005d410:	2900      	cmp	r1, #0
1005d412:	d026      	beq.n	1005d462 <LL_Set_Extented_Advertising_Enable+0xc2>
1005d414:	2800      	cmp	r0, #0
1005d416:	d00a      	beq.n	1005d42e <LL_Set_Extented_Advertising_Enable+0x8e>
1005d418:	208c      	movs	r0, #140	@ 0x8c
1005d41a:	5828      	ldr	r0, [r5, r0]
1005d41c:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005d41e:	462a      	mov	r2, r5
1005d420:	328c      	adds	r2, #140	@ 0x8c
1005d422:	6852      	ldr	r2, [r2, #4]
1005d424:	c105      	stmia	r1!, {r0, r2}
1005d426:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005d428:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005d42a:	6769      	str	r1, [r5, #116]	@ 0x74
1005d42c:	67a8      	str	r0, [r5, #120]	@ 0x78
1005d42e:	2094      	movs	r0, #148	@ 0x94
1005d430:	5828      	ldr	r0, [r5, r0]
1005d432:	2600      	movs	r6, #0
1005d434:	2800      	cmp	r0, #0
1005d436:	d008      	beq.n	1005d44a <LL_Set_Extented_Advertising_Enable+0xaa>
1005d438:	3594      	adds	r5, #148	@ 0x94
1005d43a:	207d      	movs	r0, #125	@ 0x7d
1005d43c:	0144      	lsls	r4, r0, #5
1005d43e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005d440:	4344      	muls	r4, r0
1005d442:	f7e8 fe05 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
1005d446:	1820      	adds	r0, r4, r0
1005d448:	6028      	str	r0, [r5, #0]
1005d44a:	4630      	mov	r0, r6
1005d44c:	e007      	b.n	1005d45e <LL_Set_Extented_Advertising_Enable+0xbe>
1005d44e:	2000      	movs	r0, #0
1005d450:	2901      	cmp	r1, #1
1005d452:	d104      	bne.n	1005d45e <LL_Set_Extented_Advertising_Enable+0xbe>
1005d454:	4605      	mov	r5, r0
1005d456:	4620      	mov	r0, r4
1005d458:	f000 f958 	bl	1005d70c <EADV_stop>
1005d45c:	4628      	mov	r0, r5
1005d45e:	b00f      	add	sp, #60	@ 0x3c
1005d460:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005d462:	2800      	cmp	r0, #0
1005d464:	d007      	beq.n	1005d476 <LL_Set_Extented_Advertising_Enable+0xd6>
1005d466:	208c      	movs	r0, #140	@ 0x8c
1005d468:	5828      	ldr	r0, [r5, r0]
1005d46a:	2800      	cmp	r0, #0
1005d46c:	d103      	bne.n	1005d476 <LL_Set_Extented_Advertising_Enable+0xd6>
1005d46e:	2090      	movs	r0, #144	@ 0x90
1005d470:	5828      	ldr	r0, [r5, r0]
1005d472:	2800      	cmp	r0, #0
1005d474:	d006      	beq.n	1005d484 <LL_Set_Extented_Advertising_Enable+0xe4>
1005d476:	20b8      	movs	r0, #184	@ 0xb8
1005d478:	5a28      	ldrh	r0, [r5, r0]
1005d47a:	07c1      	lsls	r1, r0, #31
1005d47c:	d004      	beq.n	1005d488 <LL_Set_Extented_Advertising_Enable+0xe8>
1005d47e:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1005d480:	29f5      	cmp	r1, #245	@ 0xf5
1005d482:	d901      	bls.n	1005d488 <LL_Set_Extented_Advertising_Enable+0xe8>
1005d484:	2012      	movs	r0, #18
1005d486:	e7ea      	b.n	1005d45e <LL_Set_Extented_Advertising_Enable+0xbe>
1005d488:	2312      	movs	r3, #18
1005d48a:	4601      	mov	r1, r0
1005d48c:	461a      	mov	r2, r3
1005d48e:	4019      	ands	r1, r3
1005d490:	2902      	cmp	r1, #2
1005d492:	d103      	bne.n	1005d49c <LL_Set_Extented_Advertising_Enable+0xfc>
1005d494:	2142      	movs	r1, #66	@ 0x42
1005d496:	5a69      	ldrh	r1, [r5, r1]
1005d498:	2900      	cmp	r1, #0
1005d49a:	d040      	beq.n	1005d51e <LL_Set_Extented_Advertising_Enable+0x17e>
1005d49c:	0700      	lsls	r0, r0, #28
1005d49e:	d50f      	bpl.n	1005d4c0 <LL_Set_Extented_Advertising_Enable+0x120>
1005d4a0:	486d      	ldr	r0, [pc, #436]	@ (1005d658 <__arm_cp.24_0>)
1005d4a2:	21be      	movs	r1, #190	@ 0xbe
1005d4a4:	5a69      	ldrh	r1, [r5, r1]
1005d4a6:	4281      	cmp	r1, r0
1005d4a8:	d001      	beq.n	1005d4ae <LL_Set_Extented_Advertising_Enable+0x10e>
1005d4aa:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005d4ac:	e000      	b.n	1005d4b0 <LL_Set_Extented_Advertising_Enable+0x110>
1005d4ae:	2080      	movs	r0, #128	@ 0x80
1005d4b0:	2880      	cmp	r0, #128	@ 0x80
1005d4b2:	d901      	bls.n	1005d4b8 <LL_Set_Extented_Advertising_Enable+0x118>
1005d4b4:	4610      	mov	r0, r2
1005d4b6:	e7d2      	b.n	1005d45e <LL_Set_Extented_Advertising_Enable+0xbe>
1005d4b8:	900e      	str	r0, [sp, #56]	@ 0x38
1005d4ba:	2800      	cmp	r0, #0
1005d4bc:	4610      	mov	r0, r2
1005d4be:	d0ce      	beq.n	1005d45e <LL_Set_Extented_Advertising_Enable+0xbe>
1005d4c0:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005d4c2:	21ba      	movs	r1, #186	@ 0xba
1005d4c4:	5268      	strh	r0, [r5, r1]
1005d4c6:	267d      	movs	r6, #125	@ 0x7d
1005d4c8:	0171      	lsls	r1, r6, #5
1005d4ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005d4cc:	4351      	muls	r1, r2
1005d4ce:	2294      	movs	r2, #148	@ 0x94
1005d4d0:	50a9      	str	r1, [r5, r2]
1005d4d2:	2800      	cmp	r0, #0
1005d4d4:	d001      	beq.n	1005d4da <LL_Set_Extented_Advertising_Enable+0x13a>
1005d4d6:	21cf      	movs	r1, #207	@ 0xcf
1005d4d8:	546f      	strb	r7, [r5, r1]
1005d4da:	21bc      	movs	r1, #188	@ 0xbc
1005d4dc:	5268      	strh	r0, [r5, r1]
1005d4de:	4620      	mov	r0, r4
1005d4e0:	f7f4 fd46 	bl	10051f70 <EADV_start_request_radio_tasks_ucfg>
1005d4e4:	2800      	cmp	r0, #0
1005d4e6:	d1ba      	bne.n	1005d45e <LL_Set_Extented_Advertising_Enable+0xbe>
1005d4e8:	4629      	mov	r1, r5
1005d4ea:	31d6      	adds	r1, #214	@ 0xd6
1005d4ec:	4628      	mov	r0, r5
1005d4ee:	3064      	adds	r0, #100	@ 0x64
1005d4f0:	462a      	mov	r2, r5
1005d4f2:	3254      	adds	r2, #84	@ 0x54
1005d4f4:	676a      	str	r2, [r5, #116]	@ 0x74
1005d4f6:	67a8      	str	r0, [r5, #120]	@ 0x78
1005d4f8:	462b      	mov	r3, r5
1005d4fa:	3378      	adds	r3, #120	@ 0x78
1005d4fc:	7809      	ldrb	r1, [r1, #0]
1005d4fe:	07c9      	lsls	r1, r1, #31
1005d500:	930d      	str	r3, [sp, #52]	@ 0x34
1005d502:	d10e      	bne.n	1005d522 <LL_Set_Extented_Advertising_Enable+0x182>
1005d504:	2100      	movs	r1, #0
1005d506:	6001      	str	r1, [r0, #0]
1005d508:	66a9      	str	r1, [r5, #104]	@ 0x68
1005d50a:	4855      	ldr	r0, [pc, #340]	@ (1005d660 <__arm_cp.24_2>)
1005d50c:	6801      	ldr	r1, [r0, #0]
1005d50e:	4620      	mov	r0, r4
1005d510:	3065      	adds	r0, #101	@ 0x65
1005d512:	2206      	movs	r2, #6
1005d514:	f7e8 fcb0 	bl	10045e78 <BLEPLAT_MemCpy>
1005d518:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005d51a:	6800      	ldr	r0, [r0, #0]
1005d51c:	e008      	b.n	1005d530 <LL_Set_Extented_Advertising_Enable+0x190>
1005d51e:	200c      	movs	r0, #12
1005d520:	e79d      	b.n	1005d45e <LL_Set_Extented_Advertising_Enable+0xbe>
1005d522:	218c      	movs	r1, #140	@ 0x8c
1005d524:	5869      	ldr	r1, [r5, r1]
1005d526:	462a      	mov	r2, r5
1005d528:	328c      	adds	r2, #140	@ 0x8c
1005d52a:	6852      	ldr	r2, [r2, #4]
1005d52c:	c006      	stmia	r0!, {r1, r2}
1005d52e:	3808      	subs	r0, #8
1005d530:	4629      	mov	r1, r5
1005d532:	3194      	adds	r1, #148	@ 0x94
1005d534:	910e      	str	r1, [sp, #56]	@ 0x38
1005d536:	2184      	movs	r1, #132	@ 0x84
1005d538:	5869      	ldr	r1, [r5, r1]
1005d53a:	462a      	mov	r2, r5
1005d53c:	3284      	adds	r2, #132	@ 0x84
1005d53e:	6852      	ldr	r2, [r2, #4]
1005d540:	6081      	str	r1, [r0, #8]
1005d542:	60c2      	str	r2, [r0, #12]
1005d544:	4620      	mov	r0, r4
1005d546:	f7ff fe11 	bl	1005d16c <llc_eadv_generate_new_rpa_for_one_adv_set>
1005d54a:	2800      	cmp	r0, #0
1005d54c:	960c      	str	r6, [sp, #48]	@ 0x30
1005d54e:	d002      	beq.n	1005d556 <LL_Set_Extented_Advertising_Enable+0x1b6>
1005d550:	f7fd fbef 	bl	1005ad32 <llc_priv_start_privacy_timer_ucfg_weak>
1005d554:	e006      	b.n	1005d564 <LL_Set_Extented_Advertising_Enable+0x1c4>
1005d556:	4628      	mov	r0, r5
1005d558:	3074      	adds	r0, #116	@ 0x74
1005d55a:	6801      	ldr	r1, [r0, #0]
1005d55c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1005d55e:	681a      	ldr	r2, [r3, #0]
1005d560:	6002      	str	r2, [r0, #0]
1005d562:	6019      	str	r1, [r3, #0]
1005d564:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005d566:	4626      	mov	r6, r4
1005d568:	36ce      	adds	r6, #206	@ 0xce
1005d56a:	4628      	mov	r0, r5
1005d56c:	30b8      	adds	r0, #184	@ 0xb8
1005d56e:	900d      	str	r0, [sp, #52]	@ 0x34
1005d570:	6808      	ldr	r0, [r1, #0]
1005d572:	2800      	cmp	r0, #0
1005d574:	d005      	beq.n	1005d582 <LL_Set_Extented_Advertising_Enable+0x1e2>
1005d576:	f7e8 fd6b 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
1005d57a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005d57c:	6811      	ldr	r1, [r2, #0]
1005d57e:	1808      	adds	r0, r1, r0
1005d580:	6010      	str	r0, [r2, #0]
1005d582:	7037      	strb	r7, [r6, #0]
1005d584:	20c4      	movs	r0, #196	@ 0xc4
1005d586:	5c29      	ldrb	r1, [r5, r0]
1005d588:	27d0      	movs	r7, #208	@ 0xd0
1005d58a:	5de8      	ldrb	r0, [r5, r7]
1005d58c:	2281      	movs	r2, #129	@ 0x81
1005d58e:	920e      	str	r2, [sp, #56]	@ 0x38
1005d590:	9200      	str	r2, [sp, #0]
1005d592:	462e      	mov	r6, r5
1005d594:	3614      	adds	r6, #20
1005d596:	4622      	mov	r2, r4
1005d598:	4633      	mov	r3, r6
1005d59a:	f7ff fd77 	bl	1005d08c <LL_eadv_BLUE_SM>
1005d59e:	5de8      	ldrb	r0, [r5, r7]
1005d5a0:	2125      	movs	r1, #37	@ 0x25
1005d5a2:	f7ea f97c 	bl	1004789e <BLEPLAT_CNTR_SmSetDataLength>
1005d5a6:	462f      	mov	r7, r5
1005d5a8:	37d0      	adds	r7, #208	@ 0xd0
1005d5aa:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005d5ac:	8800      	ldrh	r0, [r0, #0]
1005d5ae:	06c0      	lsls	r0, r0, #27
1005d5b0:	d403      	bmi.n	1005d5ba <LL_Set_Extented_Advertising_Enable+0x21a>
1005d5b2:	4620      	mov	r0, r4
1005d5b4:	f000 fd56 	bl	1005e064 <LL_eadv_start_extended_ucfg_weak>
1005d5b8:	e042      	b.n	1005d640 <LL_Set_Extented_Advertising_Enable+0x2a0>
1005d5ba:	f7e8 fd49 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
1005d5be:	219c      	movs	r1, #156	@ 0x9c
1005d5c0:	910b      	str	r1, [sp, #44]	@ 0x2c
1005d5c2:	5068      	str	r0, [r5, r1]
1005d5c4:	f000 ffec 	bl	1005e5a0 <LL_get_tx_common_buffer_p>
1005d5c8:	9009      	str	r0, [sp, #36]	@ 0x24
1005d5ca:	f000 fff1 	bl	1005e5b0 <LL_get_rx_common_buffer_p>
1005d5ce:	900a      	str	r0, [sp, #40]	@ 0x28
1005d5d0:	7838      	ldrb	r0, [r7, #0]
1005d5d2:	9008      	str	r0, [sp, #32]
1005d5d4:	2094      	movs	r0, #148	@ 0x94
1005d5d6:	2100      	movs	r1, #0
1005d5d8:	910d      	str	r1, [sp, #52]	@ 0x34
1005d5da:	460a      	mov	r2, r1
1005d5dc:	f7e9 fcc4 	bl	10046f68 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005d5e0:	4603      	mov	r3, r0
1005d5e2:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005d5e4:	9000      	str	r0, [sp, #0]
1005d5e6:	4620      	mov	r0, r4
1005d5e8:	9908      	ldr	r1, [sp, #32]
1005d5ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1005d5ec:	f7ff fcd3 	bl	1005cf96 <LL_eadv_Blue_Tx>
1005d5f0:	7838      	ldrb	r0, [r7, #0]
1005d5f2:	9009      	str	r0, [sp, #36]	@ 0x24
1005d5f4:	2096      	movs	r0, #150	@ 0x96
1005d5f6:	2101      	movs	r1, #1
1005d5f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005d5fa:	f7e9 fcb5 	bl	10046f68 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005d5fe:	4603      	mov	r3, r0
1005d600:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005d602:	9000      	str	r0, [sp, #0]
1005d604:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005d606:	9001      	str	r0, [sp, #4]
1005d608:	4630      	mov	r0, r6
1005d60a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d60c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005d60e:	f7ff fcfd 	bl	1005d00c <LL_eadv_Blue_Rx>
1005d612:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1005d614:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005d616:	582a      	ldr	r2, [r5, r0]
1005d618:	7838      	ldrb	r0, [r7, #0]
1005d61a:	4b12      	ldr	r3, [pc, #72]	@ (1005d664 <__arm_cp.24_3>)
1005d61c:	9307      	str	r3, [sp, #28]
1005d61e:	4b12      	ldr	r3, [pc, #72]	@ (1005d668 <__arm_cp.24_4>)
1005d620:	9306      	str	r3, [sp, #24]
1005d622:	4b12      	ldr	r3, [pc, #72]	@ (1005d66c <__arm_cp.24_5>)
1005d624:	9305      	str	r3, [sp, #20]
1005d626:	4b12      	ldr	r3, [pc, #72]	@ (1005d670 <__arm_cp.24_6>)
1005d628:	9304      	str	r3, [sp, #16]
1005d62a:	2314      	movs	r3, #20
1005d62c:	9303      	str	r3, [sp, #12]
1005d62e:	231f      	movs	r3, #31
1005d630:	ae00      	add	r6, sp, #0
1005d632:	c60e      	stmia	r6!, {r1, r2, r3}
1005d634:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005d636:	00cb      	lsls	r3, r1, #3
1005d638:	4621      	mov	r1, r4
1005d63a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005d63c:	f001 f848 	bl	1005e6d0 <LL_sched_enable_taskslot>
1005d640:	249c      	movs	r4, #156	@ 0x9c
1005d642:	5929      	ldr	r1, [r5, r4]
1005d644:	7838      	ldrb	r0, [r7, #0]
1005d646:	f001 f81f 	bl	1005e688 <LL_sched_set_anchor>
1005d64a:	5928      	ldr	r0, [r5, r4]
1005d64c:	7839      	ldrb	r1, [r7, #0]
1005d64e:	f001 facf 	bl	1005ebf0 <LL_sched_check_and_call_sched>
1005d652:	2000      	movs	r0, #0
1005d654:	e703      	b.n	1005d45e <LL_Set_Extented_Advertising_Enable+0xbe>
1005d656:	46c0      	nop			@ (mov r8, r8)

1005d658 <__arm_cp.24_0>:
1005d658:	0000fffc 	.word	0x0000fffc

1005d65c <__arm_cp.24_1>:
1005d65c:	0000ffff 	.word	0x0000ffff

1005d660 <__arm_cp.24_2>:
1005d660:	20001120 	.word	0x20001120

1005d664 <__arm_cp.24_3>:
1005d664:	1005d8a9 	.word	0x1005d8a9

1005d668 <__arm_cp.24_4>:
1005d668:	1005dd31 	.word	0x1005dd31

1005d66c <__arm_cp.24_5>:
1005d66c:	1005dba1 	.word	0x1005dba1

1005d670 <__arm_cp.24_6>:
1005d670:	1005d8b1 	.word	0x1005d8b1

1005d674 <LL_Set_Extented_Advertising_Set_Random_Address>:
1005d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d676:	460c      	mov	r4, r1
1005d678:	4606      	mov	r6, r0
1005d67a:	f7ff fd35 	bl	1005d0e8 <llc_get_advertising_set_index>
1005d67e:	4605      	mov	r5, r0
1005d680:	4818      	ldr	r0, [pc, #96]	@ (1005d6e4 <__arm_cp.25_0>)
1005d682:	4285      	cmp	r5, r0
1005d684:	d02b      	beq.n	1005d6de <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1005d686:	9400      	str	r4, [sp, #0]
1005d688:	022c      	lsls	r4, r5, #8
1005d68a:	f000 ff9f 	bl	1005e5cc <llc_get_linkms_cntxt_p>
1005d68e:	6807      	ldr	r7, [r0, #0]
1005d690:	1938      	adds	r0, r7, r4
1005d692:	21be      	movs	r1, #190	@ 0xbe
1005d694:	5246      	strh	r6, [r0, r1]
1005d696:	21b8      	movs	r1, #184	@ 0xb8
1005d698:	5c40      	ldrb	r0, [r0, r1]
1005d69a:	07c0      	lsls	r0, r0, #31
1005d69c:	d007      	beq.n	1005d6ae <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005d69e:	0228      	lsls	r0, r5, #8
1005d6a0:	1838      	adds	r0, r7, r0
1005d6a2:	21ce      	movs	r1, #206	@ 0xce
1005d6a4:	5c40      	ldrb	r0, [r0, r1]
1005d6a6:	2801      	cmp	r0, #1
1005d6a8:	d101      	bne.n	1005d6ae <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005d6aa:	250c      	movs	r5, #12
1005d6ac:	e018      	b.n	1005d6e0 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005d6ae:	480e      	ldr	r0, [pc, #56]	@ (1005d6e8 <__arm_cp.25_1>)
1005d6b0:	6800      	ldr	r0, [r0, #0]
1005d6b2:	3056      	adds	r0, #86	@ 0x56
1005d6b4:	2606      	movs	r6, #6
1005d6b6:	9c00      	ldr	r4, [sp, #0]
1005d6b8:	4621      	mov	r1, r4
1005d6ba:	4632      	mov	r2, r6
1005d6bc:	f7e8 fbdc 	bl	10045e78 <BLEPLAT_MemCpy>
1005d6c0:	0228      	lsls	r0, r5, #8
1005d6c2:	1838      	adds	r0, r7, r0
1005d6c4:	218c      	movs	r1, #140	@ 0x8c
1005d6c6:	2201      	movs	r2, #1
1005d6c8:	5042      	str	r2, [r0, r1]
1005d6ca:	4601      	mov	r1, r0
1005d6cc:	318c      	adds	r1, #140	@ 0x8c
1005d6ce:	2500      	movs	r5, #0
1005d6d0:	604d      	str	r5, [r1, #4]
1005d6d2:	308d      	adds	r0, #141	@ 0x8d
1005d6d4:	4621      	mov	r1, r4
1005d6d6:	4632      	mov	r2, r6
1005d6d8:	f7e8 fbce 	bl	10045e78 <BLEPLAT_MemCpy>
1005d6dc:	e000      	b.n	1005d6e0 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005d6de:	2512      	movs	r5, #18
1005d6e0:	4628      	mov	r0, r5
1005d6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d6e4 <__arm_cp.25_0>:
1005d6e4:	0000ffff 	.word	0x0000ffff

1005d6e8 <__arm_cp.25_1>:
1005d6e8:	20001174 	.word	0x20001174

1005d6ec <LL_eadv_update_did>:
1005d6ec:	b510      	push	{r4, lr}
1005d6ee:	4604      	mov	r4, r0
1005d6f0:	2000      	movs	r0, #0
1005d6f2:	f005 f80a 	bl	1006270a <Hal_Get_Random_Number>
1005d6f6:	4904      	ldr	r1, [pc, #16]	@ (1005d708 <__arm_cp.27_0>)
1005d6f8:	4001      	ands	r1, r0
1005d6fa:	8820      	ldrh	r0, [r4, #0]
1005d6fc:	1a40      	subs	r0, r0, r1
1005d6fe:	4242      	negs	r2, r0
1005d700:	4142      	adcs	r2, r0
1005d702:	404a      	eors	r2, r1
1005d704:	8022      	strh	r2, [r4, #0]
1005d706:	bd10      	pop	{r4, pc}

1005d708 <__arm_cp.27_0>:
1005d708:	00000fff 	.word	0x00000fff

1005d70c <EADV_stop>:
1005d70c:	b5b0      	push	{r4, r5, r7, lr}
1005d70e:	4604      	mov	r4, r0
1005d710:	f3ef 8010 	mrs	r0, PRIMASK
1005d714:	b672      	cpsid	i
1005d716:	4625      	mov	r5, r4
1005d718:	35ce      	adds	r5, #206	@ 0xce
1005d71a:	78a8      	ldrb	r0, [r5, #2]
1005d71c:	f000 ffc6 	bl	1005e6ac <LL_sched_set_cancel_request>
1005d720:	20d1      	movs	r0, #209	@ 0xd1
1005d722:	5c20      	ldrb	r0, [r4, r0]
1005d724:	f000 ffc2 	bl	1005e6ac <LL_sched_set_cancel_request>
1005d728:	b662      	cpsie	i
1005d72a:	78a8      	ldrb	r0, [r5, #2]
1005d72c:	f001 fa70 	bl	1005ec10 <LL_sched_check_and_wait_sched>
1005d730:	20ce      	movs	r0, #206	@ 0xce
1005d732:	2100      	movs	r1, #0
1005d734:	5221      	strh	r1, [r4, r0]
1005d736:	7aa8      	ldrb	r0, [r5, #10]
1005d738:	28ff      	cmp	r0, #255	@ 0xff
1005d73a:	d001      	beq.n	1005d740 <EADV_stop+0x34>
1005d73c:	f7fb fd81 	bl	10059242 <llc_conn_release_conn_idx>
1005d740:	20ff      	movs	r0, #255	@ 0xff
1005d742:	72a8      	strb	r0, [r5, #10]
1005d744:	7a28      	ldrb	r0, [r5, #8]
1005d746:	0780      	lsls	r0, r0, #30
1005d748:	d501      	bpl.n	1005d74e <EADV_stop+0x42>
1005d74a:	f7fd faf3 	bl	1005ad34 <llc_priv_stop_privacy_timer_ucfg_weak>
1005d74e:	bdb0      	pop	{r4, r5, r7, pc}

1005d750 <LL_Set_Advertising_Set_Random_Address>:
1005d750:	b510      	push	{r4, lr}
1005d752:	4604      	mov	r4, r0
1005d754:	f7fa fa41 	bl	10057bda <scan_csr_ucfg_weak>
1005d758:	2801      	cmp	r0, #1
1005d75a:	d105      	bne.n	1005d768 <LL_Set_Advertising_Set_Random_Address+0x18>
1005d75c:	f7fd fb18 	bl	1005ad90 <llc_scan_get_cntxt_p>
1005d760:	21eb      	movs	r1, #235	@ 0xeb
1005d762:	5c40      	ldrb	r0, [r0, r1]
1005d764:	07c0      	lsls	r0, r0, #31
1005d766:	d106      	bne.n	1005d776 <LL_Set_Advertising_Set_Random_Address+0x26>
1005d768:	f7ff fdfc 	bl	1005d364 <LL_LE_Set_Advertising_Parameters_Default>
1005d76c:	4803      	ldr	r0, [pc, #12]	@ (1005d77c <__arm_cp.29_0>)
1005d76e:	4621      	mov	r1, r4
1005d770:	f7ff ff80 	bl	1005d674 <LL_Set_Extented_Advertising_Set_Random_Address>
1005d774:	bd10      	pop	{r4, pc}
1005d776:	200c      	movs	r0, #12
1005d778:	bd10      	pop	{r4, pc}
1005d77a:	46c0      	nop			@ (mov r8, r8)

1005d77c <__arm_cp.29_0>:
1005d77c:	0000fffc 	.word	0x0000fffc

1005d780 <ll_set_advertising_data_ptr>:
1005d780:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005d782:	9302      	str	r3, [sp, #8]
1005d784:	4614      	mov	r4, r2
1005d786:	460f      	mov	r7, r1
1005d788:	4605      	mov	r5, r0
1005d78a:	f000 ff1f 	bl	1005e5cc <llc_get_linkms_cntxt_p>
1005d78e:	4606      	mov	r6, r0
1005d790:	4830      	ldr	r0, [pc, #192]	@ (1005d854 <__arm_cp.33_0>)
1005d792:	4285      	cmp	r5, r0
1005d794:	d101      	bne.n	1005d79a <ll_set_advertising_data_ptr+0x1a>
1005d796:	201f      	movs	r0, #31
1005d798:	e007      	b.n	1005d7aa <ll_set_advertising_data_ptr+0x2a>
1005d79a:	2001      	movs	r0, #1
1005d79c:	2102      	movs	r1, #2
1005d79e:	f7fa f851 	bl	10057844 <hci_get_set_legacy_ext_flag>
1005d7a2:	2800      	cmp	r0, #0
1005d7a4:	d000      	beq.n	1005d7a8 <ll_set_advertising_data_ptr+0x28>
1005d7a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d7a8:	482b      	ldr	r0, [pc, #172]	@ (1005d858 <__arm_cp.33_1>)
1005d7aa:	2112      	movs	r1, #18
1005d7ac:	42a0      	cmp	r0, r4
1005d7ae:	d201      	bcs.n	1005d7b4 <ll_set_advertising_data_ptr+0x34>
1005d7b0:	4608      	mov	r0, r1
1005d7b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d7b4:	9101      	str	r1, [sp, #4]
1005d7b6:	4628      	mov	r0, r5
1005d7b8:	f7ff fc96 	bl	1005d0e8 <llc_get_advertising_set_index>
1005d7bc:	0200      	lsls	r0, r0, #8
1005d7be:	6831      	ldr	r1, [r6, #0]
1005d7c0:	180e      	adds	r6, r1, r0
1005d7c2:	4620      	mov	r0, r4
1005d7c4:	4631      	mov	r1, r6
1005d7c6:	f000 fc4b 	bl	1005e060 <llc_eadv_max_supported_data_check_ucfg_weak>
1005d7ca:	2800      	cmp	r0, #0
1005d7cc:	d1eb      	bne.n	1005d7a6 <ll_set_advertising_data_ptr+0x26>
1005d7ce:	20ce      	movs	r0, #206	@ 0xce
1005d7d0:	5c31      	ldrb	r1, [r6, r0]
1005d7d2:	2038      	movs	r0, #56	@ 0x38
1005d7d4:	5c30      	ldrb	r0, [r6, r0]
1005d7d6:	2f04      	cmp	r7, #4
1005d7d8:	d112      	bne.n	1005d800 <ll_set_advertising_data_ptr+0x80>
1005d7da:	2900      	cmp	r1, #0
1005d7dc:	d038      	beq.n	1005d850 <ll_set_advertising_data_ptr+0xd0>
1005d7de:	2800      	cmp	r0, #0
1005d7e0:	9a01      	ldr	r2, [sp, #4]
1005d7e2:	d01b      	beq.n	1005d81c <ll_set_advertising_data_ptr+0x9c>
1005d7e4:	481b      	ldr	r0, [pc, #108]	@ (1005d854 <__arm_cp.33_0>)
1005d7e6:	4285      	cmp	r5, r0
1005d7e8:	d118      	bne.n	1005d81c <ll_set_advertising_data_ptr+0x9c>
1005d7ea:	8df0      	ldrh	r0, [r6, #46]	@ 0x2e
1005d7ec:	2800      	cmp	r0, #0
1005d7ee:	d015      	beq.n	1005d81c <ll_set_advertising_data_ptr+0x9c>
1005d7f0:	20b8      	movs	r0, #184	@ 0xb8
1005d7f2:	5a30      	ldrh	r0, [r6, r0]
1005d7f4:	2110      	movs	r1, #16
1005d7f6:	4001      	ands	r1, r0
1005d7f8:	4321      	orrs	r1, r4
1005d7fa:	4610      	mov	r0, r2
1005d7fc:	d1d3      	bne.n	1005d7a6 <ll_set_advertising_data_ptr+0x26>
1005d7fe:	e00f      	b.n	1005d820 <ll_set_advertising_data_ptr+0xa0>
1005d800:	4635      	mov	r5, r6
1005d802:	3538      	adds	r5, #56	@ 0x38
1005d804:	2900      	cmp	r1, #0
1005d806:	d011      	beq.n	1005d82c <ll_set_advertising_data_ptr+0xac>
1005d808:	2f03      	cmp	r7, #3
1005d80a:	d109      	bne.n	1005d820 <ll_set_advertising_data_ptr+0xa0>
1005d80c:	2002      	movs	r0, #2
1005d80e:	7028      	strb	r0, [r5, #0]
1005d810:	86f4      	strh	r4, [r6, #54]	@ 0x36
1005d812:	2000      	movs	r0, #0
1005d814:	86b0      	strh	r0, [r6, #52]	@ 0x34
1005d816:	9902      	ldr	r1, [sp, #8]
1005d818:	6331      	str	r1, [r6, #48]	@ 0x30
1005d81a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d81c:	4610      	mov	r0, r2
1005d81e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d820:	36b6      	adds	r6, #182	@ 0xb6
1005d822:	4630      	mov	r0, r6
1005d824:	f7ff ff62 	bl	1005d6ec <LL_eadv_update_did>
1005d828:	2000      	movs	r0, #0
1005d82a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d82c:	4637      	mov	r7, r6
1005d82e:	3728      	adds	r7, #40	@ 0x28
1005d830:	2800      	cmp	r0, #0
1005d832:	9a02      	ldr	r2, [sp, #8]
1005d834:	d005      	beq.n	1005d842 <ll_set_advertising_data_ptr+0xc2>
1005d836:	6839      	ldr	r1, [r7, #0]
1005d838:	20a1      	movs	r0, #161	@ 0xa1
1005d83a:	9a02      	ldr	r2, [sp, #8]
1005d83c:	f006 f87c 	bl	10063938 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005d840:	9a02      	ldr	r2, [sp, #8]
1005d842:	603a      	str	r2, [r7, #0]
1005d844:	2001      	movs	r0, #1
1005d846:	7028      	strb	r0, [r5, #0]
1005d848:	85f4      	strh	r4, [r6, #46]	@ 0x2e
1005d84a:	2000      	movs	r0, #0
1005d84c:	85b0      	strh	r0, [r6, #44]	@ 0x2c
1005d84e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d850:	9801      	ldr	r0, [sp, #4]
1005d852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005d854 <__arm_cp.33_0>:
1005d854:	0000fffc 	.word	0x0000fffc

1005d858 <__arm_cp.33_1>:
1005d858:	00000672 	.word	0x00000672

1005d85c <ll_set_legacy_advertising_data_ptr>:
1005d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d85e:	460c      	mov	r4, r1
1005d860:	4605      	mov	r5, r0
1005d862:	f000 feb3 	bl	1005e5cc <llc_get_linkms_cntxt_p>
1005d866:	4607      	mov	r7, r0
1005d868:	f7ff fd7c 	bl	1005d364 <LL_LE_Set_Advertising_Parameters_Default>
1005d86c:	4e0c      	ldr	r6, [pc, #48]	@ (1005d8a0 <__arm_cp.36_0>)
1005d86e:	4630      	mov	r0, r6
1005d870:	f7ff fc3a 	bl	1005d0e8 <llc_get_advertising_set_index>
1005d874:	490b      	ldr	r1, [pc, #44]	@ (1005d8a4 <__arm_cp.36_1>)
1005d876:	4288      	cmp	r0, r1
1005d878:	d108      	bne.n	1005d88c <ll_set_legacy_advertising_data_ptr+0x30>
1005d87a:	f7ff fd43 	bl	1005d304 <LL_Context_ReturnFree>
1005d87e:	28ff      	cmp	r0, #255	@ 0xff
1005d880:	d00b      	beq.n	1005d89a <ll_set_legacy_advertising_data_ptr+0x3e>
1005d882:	0200      	lsls	r0, r0, #8
1005d884:	6839      	ldr	r1, [r7, #0]
1005d886:	1808      	adds	r0, r1, r0
1005d888:	21be      	movs	r1, #190	@ 0xbe
1005d88a:	5246      	strh	r6, [r0, r1]
1005d88c:	2103      	movs	r1, #3
1005d88e:	4630      	mov	r0, r6
1005d890:	462a      	mov	r2, r5
1005d892:	4623      	mov	r3, r4
1005d894:	f7ff ff74 	bl	1005d780 <ll_set_advertising_data_ptr>
1005d898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d89a:	2001      	movs	r0, #1
1005d89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d89e:	46c0      	nop			@ (mov r8, r8)

1005d8a0 <__arm_cp.36_0>:
1005d8a0:	0000fffc 	.word	0x0000fffc

1005d8a4 <__arm_cp.36_1>:
1005d8a4:	0000ffff 	.word	0x0000ffff

1005d8a8 <ADV_cancelslot>:
1005d8a8:	21d0      	movs	r1, #208	@ 0xd0
1005d8aa:	22ff      	movs	r2, #255	@ 0xff
1005d8ac:	5442      	strb	r2, [r0, r1]
1005d8ae:	4770      	bx	lr

1005d8b0 <ADV_skiproutine>:
1005d8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d8b2:	b08f      	sub	sp, #60	@ 0x3c
1005d8b4:	4607      	mov	r7, r0
1005d8b6:	20d0      	movs	r0, #208	@ 0xd0
1005d8b8:	5c38      	ldrb	r0, [r7, r0]
1005d8ba:	232c      	movs	r3, #44	@ 0x2c
1005d8bc:	4358      	muls	r0, r3
1005d8be:	4a68      	ldr	r2, [pc, #416]	@ (1005da60 <__arm_cp.40_0>)
1005d8c0:	6812      	ldr	r2, [r2, #0]
1005d8c2:	1810      	adds	r0, r2, r0
1005d8c4:	7d80      	ldrb	r0, [r0, #22]
1005d8c6:	463c      	mov	r4, r7
1005d8c8:	3494      	adds	r4, #148	@ 0x94
1005d8ca:	463a      	mov	r2, r7
1005d8cc:	32b4      	adds	r2, #180	@ 0xb4
1005d8ce:	9205      	str	r2, [sp, #20]
1005d8d0:	463e      	mov	r6, r7
1005d8d2:	36d6      	adds	r6, #214	@ 0xd6
1005d8d4:	2814      	cmp	r0, #20
1005d8d6:	9604      	str	r6, [sp, #16]
1005d8d8:	9302      	str	r3, [sp, #8]
1005d8da:	d10a      	bne.n	1005d8f2 <ADV_skiproutine+0x42>
1005d8dc:	f7e8 fbb8 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
1005d8e0:	4605      	mov	r5, r0
1005d8e2:	f000 feb1 	bl	1005e648 <LL_sched_engine_return_actual_scheduler_margin>
1005d8e6:	9b05      	ldr	r3, [sp, #20]
1005d8e8:	1828      	adds	r0, r5, r0
1005d8ea:	3032      	adds	r0, #50	@ 0x32
1005d8ec:	60a0      	str	r0, [r4, #8]
1005d8ee:	2501      	movs	r5, #1
1005d8f0:	e01b      	b.n	1005d92a <ADV_skiproutine+0x7a>
1005d8f2:	68a2      	ldr	r2, [r4, #8]
1005d8f4:	1856      	adds	r6, r2, r1
1005d8f6:	2500      	movs	r5, #0
1005d8f8:	4630      	mov	r0, r6
1005d8fa:	4611      	mov	r1, r2
1005d8fc:	f000 fea0 	bl	1005e640 <LL_sched_time_t1_ge_t2>
1005d900:	2800      	cmp	r0, #0
1005d902:	d005      	beq.n	1005d910 <ADV_skiproutine+0x60>
1005d904:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1005d906:	68a1      	ldr	r1, [r4, #8]
1005d908:	180a      	adds	r2, r1, r0
1005d90a:	60a2      	str	r2, [r4, #8]
1005d90c:	1c6d      	adds	r5, r5, #1
1005d90e:	e7f3      	b.n	1005d8f8 <ADV_skiproutine+0x48>
1005d910:	9b05      	ldr	r3, [sp, #20]
1005d912:	8898      	ldrh	r0, [r3, #4]
1005d914:	0700      	lsls	r0, r0, #28
1005d916:	d408      	bmi.n	1005d92a <ADV_skiproutine+0x7a>
1005d918:	2001      	movs	r0, #1
1005d91a:	f004 fefd 	bl	10062718 <Hal_Get_Random_Number32>
1005d91e:	9b05      	ldr	r3, [sp, #20]
1005d920:	4950      	ldr	r1, [pc, #320]	@ (1005da64 <__arm_cp.40_1>)
1005d922:	4001      	ands	r1, r0
1005d924:	68a0      	ldr	r0, [r4, #8]
1005d926:	1840      	adds	r0, r0, r1
1005d928:	60a0      	str	r0, [r4, #8]
1005d92a:	8898      	ldrh	r0, [r3, #4]
1005d92c:	2103      	movs	r1, #3
1005d92e:	4001      	ands	r1, r0
1005d930:	1e48      	subs	r0, r1, #1
1005d932:	4181      	sbcs	r1, r0
1005d934:	0048      	lsls	r0, r1, #1
1005d936:	8018      	strh	r0, [r3, #0]
1005d938:	7b98      	ldrb	r0, [r3, #14]
1005d93a:	2201      	movs	r2, #1
1005d93c:	4601      	mov	r1, r0
1005d93e:	9201      	str	r2, [sp, #4]
1005d940:	4011      	ands	r1, r2
1005d942:	0782      	lsls	r2, r0, #30
1005d944:	0fd2      	lsrs	r2, r2, #31
1005d946:	1889      	adds	r1, r1, r2
1005d948:	0740      	lsls	r0, r0, #29
1005d94a:	0fc0      	lsrs	r0, r0, #31
1005d94c:	1808      	adds	r0, r1, r0
1005d94e:	1e40      	subs	r0, r0, #1
1005d950:	7798      	strb	r0, [r3, #30]
1005d952:	4638      	mov	r0, r7
1005d954:	461e      	mov	r6, r3
1005d956:	f000 f88b 	bl	1005da70 <UTIL_u8GetNextAdvChannel>
1005d95a:	4601      	mov	r1, r0
1005d95c:	7f30      	ldrb	r0, [r6, #28]
1005d95e:	f7e9 ffc8 	bl	100478f2 <BLEPLAT_CNTR_SmSetRemapChan>
1005d962:	7f30      	ldrb	r0, [r6, #28]
1005d964:	f7ea f884 	bl	10047a70 <BLEPLAT_CNTR_SmSetTxMode>
1005d968:	2000      	movs	r0, #0
1005d96a:	9003      	str	r0, [sp, #12]
1005d96c:	9904      	ldr	r1, [sp, #16]
1005d96e:	7148      	strb	r0, [r1, #5]
1005d970:	4638      	mov	r0, r7
1005d972:	3028      	adds	r0, #40	@ 0x28
1005d974:	f7ff fafe 	bl	1005cf74 <LL_eadv_switchbackupdata_data_struc>
1005d978:	4606      	mov	r6, r0
1005d97a:	4638      	mov	r0, r7
1005d97c:	303c      	adds	r0, #60	@ 0x3c
1005d97e:	f7ff faf9 	bl	1005cf74 <LL_eadv_switchbackupdata_data_struc>
1005d982:	2e00      	cmp	r6, #0
1005d984:	9e04      	ldr	r6, [sp, #16]
1005d986:	d002      	beq.n	1005d98e <ADV_skiproutine+0xde>
1005d988:	7931      	ldrb	r1, [r6, #4]
1005d98a:	07c9      	lsls	r1, r1, #31
1005d98c:	d104      	bne.n	1005d998 <ADV_skiproutine+0xe8>
1005d98e:	2800      	cmp	r0, #0
1005d990:	d005      	beq.n	1005d99e <ADV_skiproutine+0xee>
1005d992:	7930      	ldrb	r0, [r6, #4]
1005d994:	0780      	lsls	r0, r0, #30
1005d996:	d502      	bpl.n	1005d99e <ADV_skiproutine+0xee>
1005d998:	4638      	mov	r0, r7
1005d99a:	f7ff fbe7 	bl	1005d16c <llc_eadv_generate_new_rpa_for_one_adv_set>
1005d99e:	68a1      	ldr	r1, [r4, #8]
1005d9a0:	6820      	ldr	r0, [r4, #0]
1005d9a2:	9b05      	ldr	r3, [sp, #20]
1005d9a4:	88da      	ldrh	r2, [r3, #6]
1005d9a6:	2a00      	cmp	r2, #0
1005d9a8:	d102      	bne.n	1005d9b0 <ADV_skiproutine+0x100>
1005d9aa:	7eda      	ldrb	r2, [r3, #27]
1005d9ac:	2a01      	cmp	r2, #1
1005d9ae:	d003      	beq.n	1005d9b8 <ADV_skiproutine+0x108>
1005d9b0:	4288      	cmp	r0, r1
1005d9b2:	da4c      	bge.n	1005da4e <ADV_skiproutine+0x19e>
1005d9b4:	2800      	cmp	r0, #0
1005d9b6:	d04a      	beq.n	1005da4e <ADV_skiproutine+0x19e>
1005d9b8:	7e98      	ldrb	r0, [r3, #26]
1005d9ba:	2800      	cmp	r0, #0
1005d9bc:	d047      	beq.n	1005da4e <ADV_skiproutine+0x19e>
1005d9be:	8898      	ldrh	r0, [r3, #4]
1005d9c0:	0700      	lsls	r0, r0, #28
1005d9c2:	d520      	bpl.n	1005da06 <ADV_skiproutine+0x156>
1005d9c4:	a80d      	add	r0, sp, #52	@ 0x34
1005d9c6:	9000      	str	r0, [sp, #0]
1005d9c8:	9903      	ldr	r1, [sp, #12]
1005d9ca:	8081      	strh	r1, [r0, #4]
1005d9cc:	910d      	str	r1, [sp, #52]	@ 0x34
1005d9ce:	a806      	add	r0, sp, #24
1005d9d0:	9a01      	ldr	r2, [sp, #4]
1005d9d2:	7642      	strb	r2, [r0, #25]
1005d9d4:	223c      	movs	r2, #60	@ 0x3c
1005d9d6:	7682      	strb	r2, [r0, #26]
1005d9d8:	22ff      	movs	r2, #255	@ 0xff
1005d9da:	7582      	strb	r2, [r0, #22]
1005d9dc:	81c1      	strh	r1, [r0, #14]
1005d9de:	4a22      	ldr	r2, [pc, #136]	@ (1005da68 <__arm_cp.40_2>)
1005d9e0:	8282      	strh	r2, [r0, #20]
1005d9e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1005d9e4:	7a13      	ldrb	r3, [r2, #8]
1005d9e6:	7603      	strb	r3, [r0, #24]
1005d9e8:	8181      	strh	r1, [r0, #12]
1005d9ea:	75c1      	strb	r1, [r0, #23]
1005d9ec:	9b00      	ldr	r3, [sp, #0]
1005d9ee:	9307      	str	r3, [sp, #28]
1005d9f0:	3209      	adds	r2, #9
1005d9f2:	9206      	str	r2, [sp, #24]
1005d9f4:	910a      	str	r1, [sp, #40]	@ 0x28
1005d9f6:	9308      	str	r3, [sp, #32]
1005d9f8:	f7fb f95a 	bl	10058cb0 <llc_conn_push_connection_complete_event>
1005d9fc:	7830      	ldrb	r0, [r6, #0]
1005d9fe:	0780      	lsls	r0, r0, #30
1005da00:	d501      	bpl.n	1005da06 <ADV_skiproutine+0x156>
1005da02:	f7fd f997 	bl	1005ad34 <llc_priv_stop_privacy_timer_ucfg_weak>
1005da06:	2002      	movs	r0, #2
1005da08:	f7f9 ff2a 	bl	10057860 <hci_check_legacy_ext_flag>
1005da0c:	2801      	cmp	r0, #1
1005da0e:	d119      	bne.n	1005da44 <ADV_skiproutine+0x194>
1005da10:	9b05      	ldr	r3, [sp, #20]
1005da12:	88da      	ldrh	r2, [r3, #6]
1005da14:	2a00      	cmp	r2, #0
1005da16:	d001      	beq.n	1005da1c <ADV_skiproutine+0x16c>
1005da18:	203c      	movs	r0, #60	@ 0x3c
1005da1a:	e000      	b.n	1005da1e <ADV_skiproutine+0x16e>
1005da1c:	2043      	movs	r0, #67	@ 0x43
1005da1e:	9001      	str	r0, [sp, #4]
1005da20:	4812      	ldr	r0, [pc, #72]	@ (1005da6c <__arm_cp.40_3>)
1005da22:	6800      	ldr	r0, [r0, #0]
1005da24:	9902      	ldr	r1, [sp, #8]
1005da26:	5c40      	ldrb	r0, [r0, r1]
1005da28:	0100      	lsls	r0, r0, #4
1005da2a:	43c0      	mvns	r0, r0
1005da2c:	4619      	mov	r1, r3
1005da2e:	23a1      	movs	r3, #161	@ 0xa1
1005da30:	4303      	orrs	r3, r0
1005da32:	20b1      	movs	r0, #177	@ 0xb1
1005da34:	4018      	ands	r0, r3
1005da36:	7a0b      	ldrb	r3, [r1, #8]
1005da38:	1a9a      	subs	r2, r3, r2
1005da3a:	b2d3      	uxtb	r3, r2
1005da3c:	7a8a      	ldrb	r2, [r1, #10]
1005da3e:	9901      	ldr	r1, [sp, #4]
1005da40:	f000 f85e 	bl	1005db00 <hci_le_advertising_set_terminated_event_push>
1005da44:	4638      	mov	r0, r7
1005da46:	f000 f895 	bl	1005db74 <EADV_stop_isr>
1005da4a:	68a1      	ldr	r1, [r4, #8]
1005da4c:	9b05      	ldr	r3, [sp, #20]
1005da4e:	7f18      	ldrb	r0, [r3, #28]
1005da50:	f000 fe1a 	bl	1005e688 <LL_sched_set_anchor>
1005da54:	9803      	ldr	r0, [sp, #12]
1005da56:	7170      	strb	r0, [r6, #5]
1005da58:	4628      	mov	r0, r5
1005da5a:	b00f      	add	sp, #60	@ 0x3c
1005da5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005da5e:	46c0      	nop			@ (mov r8, r8)

1005da60 <__arm_cp.40_0>:
1005da60:	2000117c 	.word	0x2000117c

1005da64 <__arm_cp.40_1>:
1005da64:	00000fff 	.word	0x00000fff

1005da68 <__arm_cp.40_2>:
1005da68:	0000ffff 	.word	0x0000ffff

1005da6c <__arm_cp.40_3>:
1005da6c:	20001120 	.word	0x20001120

1005da70 <UTIL_u8GetNextAdvChannel>:
1005da70:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005da72:	4604      	mov	r4, r0
1005da74:	20c2      	movs	r0, #194	@ 0xc2
1005da76:	5c27      	ldrb	r7, [r4, r0]
1005da78:	2501      	movs	r5, #1
1005da7a:	403d      	ands	r5, r7
1005da7c:	07ba      	lsls	r2, r7, #30
1005da7e:	0fd0      	lsrs	r0, r2, #31
1005da80:	1828      	adds	r0, r5, r0
1005da82:	0779      	lsls	r1, r7, #29
1005da84:	0fc9      	lsrs	r1, r1, #31
1005da86:	1840      	adds	r0, r0, r1
1005da88:	1e40      	subs	r0, r0, #1
1005da8a:	b2c0      	uxtb	r0, r0
1005da8c:	34c2      	adds	r4, #194	@ 0xc2
1005da8e:	7c26      	ldrb	r6, [r4, #16]
1005da90:	42b0      	cmp	r0, r6
1005da92:	d10f      	bne.n	1005dab4 <UTIL_u8GetNextAdvChannel+0x44>
1005da94:	9201      	str	r2, [sp, #4]
1005da96:	2001      	movs	r0, #1
1005da98:	9002      	str	r0, [sp, #8]
1005da9a:	f004 fe36 	bl	1006270a <Hal_Get_Random_Number>
1005da9e:	2e01      	cmp	r6, #1
1005daa0:	d00a      	beq.n	1005dab8 <UTIL_u8GetNextAdvChannel+0x48>
1005daa2:	2e02      	cmp	r6, #2
1005daa4:	d10e      	bne.n	1005dac4 <UTIL_u8GetNextAdvChannel+0x54>
1005daa6:	b2c0      	uxtb	r0, r0
1005daa8:	2106      	movs	r1, #6
1005daaa:	f7e2 fc63 	bl	10040374 <__aeabi_uidivmod>
1005daae:	a012      	add	r0, pc, #72	@ (adr r0, 1005daf8 <UTIL_u8GetNextAdvChannel+0x88>)
1005dab0:	5c40      	ldrb	r0, [r0, r1]
1005dab2:	e012      	b.n	1005dada <UTIL_u8GetNextAdvChannel+0x6a>
1005dab4:	7c60      	ldrb	r0, [r4, #17]
1005dab6:	e011      	b.n	1005dadc <UTIL_u8GetNextAdvChannel+0x6c>
1005dab8:	9902      	ldr	r1, [sp, #8]
1005daba:	4008      	ands	r0, r1
1005dabc:	2d00      	cmp	r5, #0
1005dabe:	d104      	bne.n	1005daca <UTIL_u8GetNextAdvChannel+0x5a>
1005dac0:	a10c      	add	r1, pc, #48	@ (adr r1, 1005daf4 <UTIL_u8GetNextAdvChannel+0x84>)
1005dac2:	e008      	b.n	1005dad6 <UTIL_u8GetNextAdvChannel+0x66>
1005dac4:	08b8      	lsrs	r0, r7, #2
1005dac6:	1a38      	subs	r0, r7, r0
1005dac8:	e007      	b.n	1005dada <UTIL_u8GetNextAdvChannel+0x6a>
1005daca:	9901      	ldr	r1, [sp, #4]
1005dacc:	2900      	cmp	r1, #0
1005dace:	d401      	bmi.n	1005dad4 <UTIL_u8GetNextAdvChannel+0x64>
1005dad0:	a107      	add	r1, pc, #28	@ (adr r1, 1005daf0 <UTIL_u8GetNextAdvChannel+0x80>)
1005dad2:	e000      	b.n	1005dad6 <UTIL_u8GetNextAdvChannel+0x66>
1005dad4:	a105      	add	r1, pc, #20	@ (adr r1, 1005daec <UTIL_u8GetNextAdvChannel+0x7c>)
1005dad6:	1808      	adds	r0, r1, r0
1005dad8:	7800      	ldrb	r0, [r0, #0]
1005dada:	7460      	strb	r0, [r4, #17]
1005dadc:	0071      	lsls	r1, r6, #1
1005dade:	b2c2      	uxtb	r2, r0
1005dae0:	40ca      	lsrs	r2, r1
1005dae2:	2003      	movs	r0, #3
1005dae4:	4010      	ands	r0, r2
1005dae6:	3024      	adds	r0, #36	@ 0x24
1005dae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005daea:	46c0      	nop			@ (mov r8, r8)
1005daec:	00000906 	.word	0x00000906
1005daf0:	00000d07 	.word	0x00000d07
1005daf4:	00000e0b 	.word	0x00000e0b
1005daf8:	2d271e1b 	.word	0x2d271e1b
1005dafc:	00003936 	.word	0x00003936

1005db00 <hci_le_advertising_set_terminated_event_push>:
1005db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005db02:	461f      	mov	r7, r3
1005db04:	4616      	mov	r6, r2
1005db06:	460d      	mov	r5, r1
1005db08:	4604      	mov	r4, r0
1005db0a:	06c0      	lsls	r0, r0, #27
1005db0c:	d40b      	bmi.n	1005db26 <hci_le_advertising_set_terminated_event_push+0x26>
1005db0e:	4817      	ldr	r0, [pc, #92]	@ (1005db6c <__arm_cp.42_0>)
1005db10:	6800      	ldr	r0, [r0, #0]
1005db12:	213d      	movs	r1, #61	@ 0x3d
1005db14:	5c41      	ldrb	r1, [r0, r1]
1005db16:	0689      	lsls	r1, r1, #26
1005db18:	d527      	bpl.n	1005db6a <hci_le_advertising_set_terminated_event_push+0x6a>
1005db1a:	303d      	adds	r0, #61	@ 0x3d
1005db1c:	7ac0      	ldrb	r0, [r0, #11]
1005db1e:	0780      	lsls	r0, r0, #30
1005db20:	d523      	bpl.n	1005db6a <hci_le_advertising_set_terminated_event_push+0x6a>
1005db22:	221f      	movs	r2, #31
1005db24:	e002      	b.n	1005db2c <hci_le_advertising_set_terminated_event_push+0x2c>
1005db26:	20bf      	movs	r0, #191	@ 0xbf
1005db28:	4004      	ands	r4, r0
1005db2a:	2211      	movs	r2, #17
1005db2c:	4810      	ldr	r0, [pc, #64]	@ (1005db70 <__arm_cp.42_1>)
1005db2e:	6800      	ldr	r0, [r0, #0]
1005db30:	0761      	lsls	r1, r4, #29
1005db32:	0ec9      	lsrs	r1, r1, #27
1005db34:	1840      	adds	r0, r0, r1
1005db36:	6900      	ldr	r0, [r0, #16]
1005db38:	2303      	movs	r3, #3
1005db3a:	4621      	mov	r1, r4
1005db3c:	f7f5 fc94 	bl	10053468 <aci_event_fifo_push_header>
1005db40:	2800      	cmp	r0, #0
1005db42:	d012      	beq.n	1005db6a <hci_le_advertising_set_terminated_event_push+0x6a>
1005db44:	4601      	mov	r1, r0
1005db46:	200f      	movs	r0, #15
1005db48:	72c8      	strb	r0, [r1, #11]
1005db4a:	20ff      	movs	r0, #255	@ 0xff
1005db4c:	7288      	strb	r0, [r1, #10]
1005db4e:	730f      	strb	r7, [r1, #12]
1005db50:	724e      	strb	r6, [r1, #9]
1005db52:	720d      	strb	r5, [r1, #8]
1005db54:	2012      	movs	r0, #18
1005db56:	71c8      	strb	r0, [r1, #7]
1005db58:	2006      	movs	r0, #6
1005db5a:	7188      	strb	r0, [r1, #6]
1005db5c:	203e      	movs	r0, #62	@ 0x3e
1005db5e:	7148      	strb	r0, [r1, #5]
1005db60:	2004      	movs	r0, #4
1005db62:	7108      	strb	r0, [r1, #4]
1005db64:	4620      	mov	r0, r4
1005db66:	f7f5 fd1c 	bl	100535a2 <aci_event_fifo_push>
1005db6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005db6c <__arm_cp.42_0>:
1005db6c:	20001174 	.word	0x20001174

1005db70 <__arm_cp.42_1>:
1005db70:	20001124 	.word	0x20001124

1005db74 <EADV_stop_isr>:
1005db74:	b5b0      	push	{r4, r5, r7, lr}
1005db76:	4604      	mov	r4, r0
1005db78:	20d1      	movs	r0, #209	@ 0xd1
1005db7a:	5c20      	ldrb	r0, [r4, r0]
1005db7c:	f000 fd96 	bl	1005e6ac <LL_sched_set_cancel_request>
1005db80:	4625      	mov	r5, r4
1005db82:	35ce      	adds	r5, #206	@ 0xce
1005db84:	78a8      	ldrb	r0, [r5, #2]
1005db86:	f000 fd91 	bl	1005e6ac <LL_sched_set_cancel_request>
1005db8a:	20ce      	movs	r0, #206	@ 0xce
1005db8c:	2100      	movs	r1, #0
1005db8e:	5221      	strh	r1, [r4, r0]
1005db90:	7aa8      	ldrb	r0, [r5, #10]
1005db92:	28ff      	cmp	r0, #255	@ 0xff
1005db94:	d001      	beq.n	1005db9a <EADV_stop_isr+0x26>
1005db96:	f7fb fb54 	bl	10059242 <llc_conn_release_conn_idx>
1005db9a:	20ff      	movs	r0, #255	@ 0xff
1005db9c:	72a8      	strb	r0, [r5, #10]
1005db9e:	bdb0      	pop	{r4, r5, r7, pc}

1005dba0 <ADV_createslot>:
1005dba0:	b570      	push	{r4, r5, r6, lr}
1005dba2:	4604      	mov	r4, r0
1005dba4:	20c5      	movs	r0, #197	@ 0xc5
1005dba6:	5c20      	ldrb	r0, [r4, r0]
1005dba8:	f7fd f94c 	bl	1005ae44 <llc_convert_hci_phy_enum_to_hw_phy>
1005dbac:	4605      	mov	r5, r0
1005dbae:	4626      	mov	r6, r4
1005dbb0:	36c5      	adds	r6, #197	@ 0xc5
1005dbb2:	7af0      	ldrb	r0, [r6, #11]
1005dbb4:	4629      	mov	r1, r5
1005dbb6:	f7e9 ff7c 	bl	10047ab2 <BLEPLAT_CNTR_SmSetTxPhy>
1005dbba:	7af0      	ldrb	r0, [r6, #11]
1005dbbc:	4629      	mov	r1, r5
1005dbbe:	f7e9 ff0c 	bl	100479da <BLEPLAT_CNTR_SmSetRxPhy>
1005dbc2:	f7e9 fa48 	bl	10047056 <BLEPLAT_CNTR_GlobEnableBlue>
1005dbc6:	f000 fceb 	bl	1005e5a0 <LL_get_tx_common_buffer_p>
1005dbca:	4602      	mov	r2, r0
1005dbcc:	7db0      	ldrb	r0, [r6, #22]
1005dbce:	4621      	mov	r1, r4
1005dbd0:	f000 f801 	bl	1005dbd6 <EADV_vPrepareAdvOrRspLegacyPacket>
1005dbd4:	bd70      	pop	{r4, r5, r6, pc}

1005dbd6 <EADV_vPrepareAdvOrRspLegacyPacket>:
1005dbd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005dbd8:	4614      	mov	r4, r2
1005dbda:	460d      	mov	r5, r1
1005dbdc:	4606      	mov	r6, r0
1005dbde:	460f      	mov	r7, r1
1005dbe0:	37b8      	adds	r7, #184	@ 0xb8
1005dbe2:	2004      	movs	r0, #4
1005dbe4:	2e00      	cmp	r6, #0
1005dbe6:	4601      	mov	r1, r0
1005dbe8:	d10d      	bne.n	1005dc06 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005dbea:	8839      	ldrh	r1, [r7, #0]
1005dbec:	074a      	lsls	r2, r1, #29
1005dbee:	d407      	bmi.n	1005dc00 <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1005dbf0:	2203      	movs	r2, #3
1005dbf2:	4011      	ands	r1, r2
1005dbf4:	424a      	negs	r2, r1
1005dbf6:	414a      	adcs	r2, r1
1005dbf8:	2902      	cmp	r1, #2
1005dbfa:	d003      	beq.n	1005dc04 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1005dbfc:	0051      	lsls	r1, r2, #1
1005dbfe:	e002      	b.n	1005dc06 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005dc00:	2101      	movs	r1, #1
1005dc02:	e000      	b.n	1005dc06 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005dc04:	2106      	movs	r1, #6
1005dc06:	7021      	strb	r1, [r4, #0]
1005dc08:	2e00      	cmp	r6, #0
1005dc0a:	d107      	bne.n	1005dc1c <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005dc0c:	8839      	ldrh	r1, [r7, #0]
1005dc0e:	4001      	ands	r1, r0
1005dc10:	d104      	bne.n	1005dc1c <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005dc12:	202e      	movs	r0, #46	@ 0x2e
1005dc14:	5c28      	ldrb	r0, [r5, r0]
1005dc16:	1d80      	adds	r0, r0, #6
1005dc18:	7060      	strb	r0, [r4, #1]
1005dc1a:	e00f      	b.n	1005dc3c <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1005dc1c:	2e00      	cmp	r6, #0
1005dc1e:	d004      	beq.n	1005dc2a <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1005dc20:	4628      	mov	r0, r5
1005dc22:	3042      	adds	r0, #66	@ 0x42
1005dc24:	7800      	ldrb	r0, [r0, #0]
1005dc26:	1d80      	adds	r0, r0, #6
1005dc28:	e000      	b.n	1005dc2c <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1005dc2a:	200c      	movs	r0, #12
1005dc2c:	7060      	strb	r0, [r4, #1]
1005dc2e:	4620      	mov	r0, r4
1005dc30:	3008      	adds	r0, #8
1005dc32:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005dc34:	3109      	adds	r1, #9
1005dc36:	2206      	movs	r2, #6
1005dc38:	f7e8 f91e 	bl	10045e78 <BLEPLAT_MemCpy>
1005dc3c:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005dc3e:	1ca0      	adds	r0, r4, #2
1005dc40:	1c49      	adds	r1, r1, #1
1005dc42:	2206      	movs	r2, #6
1005dc44:	f7e8 f918 	bl	10045e78 <BLEPLAT_MemCpy>
1005dc48:	7820      	ldrb	r0, [r4, #0]
1005dc4a:	212f      	movs	r1, #47	@ 0x2f
1005dc4c:	4001      	ands	r1, r0
1005dc4e:	7021      	strb	r1, [r4, #0]
1005dc50:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005dc52:	7800      	ldrb	r0, [r0, #0]
1005dc54:	07c0      	lsls	r0, r0, #31
1005dc56:	0e40      	lsrs	r0, r0, #25
1005dc58:	1840      	adds	r0, r0, r1
1005dc5a:	7020      	strb	r0, [r4, #0]
1005dc5c:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005dc5e:	7a09      	ldrb	r1, [r1, #8]
1005dc60:	01c9      	lsls	r1, r1, #7
1005dc62:	1808      	adds	r0, r1, r0
1005dc64:	7020      	strb	r0, [r4, #0]
1005dc66:	f000 f9f5 	bl	1005e054 <llc_get_channel_sel_algo2_enabled>
1005dc6a:	7821      	ldrb	r1, [r4, #0]
1005dc6c:	0140      	lsls	r0, r0, #5
1005dc6e:	4308      	orrs	r0, r1
1005dc70:	7020      	strb	r0, [r4, #0]
1005dc72:	4271      	negs	r1, r6
1005dc74:	4171      	adcs	r1, r6
1005dc76:	8838      	ldrh	r0, [r7, #0]
1005dc78:	2204      	movs	r2, #4
1005dc7a:	4002      	ands	r2, r0
1005dc7c:	0890      	lsrs	r0, r2, #2
1005dc7e:	4008      	ands	r0, r1
1005dc80:	d101      	bne.n	1005dc86 <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1005dc82:	2708      	movs	r7, #8
1005dc84:	e000      	b.n	1005dc88 <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1005dc86:	270e      	movs	r7, #14
1005dc88:	2800      	cmp	r0, #0
1005dc8a:	d001      	beq.n	1005dc90 <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1005dc8c:	200c      	movs	r0, #12
1005dc8e:	e011      	b.n	1005dcb4 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1005dc90:	2e00      	cmp	r6, #0
1005dc92:	d001      	beq.n	1005dc98 <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1005dc94:	203c      	movs	r0, #60	@ 0x3c
1005dc96:	e000      	b.n	1005dc9a <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1005dc98:	2028      	movs	r0, #40	@ 0x28
1005dc9a:	5829      	ldr	r1, [r5, r0]
1005dc9c:	2e00      	cmp	r6, #0
1005dc9e:	d001      	beq.n	1005dca4 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1005dca0:	2042      	movs	r0, #66	@ 0x42
1005dca2:	e000      	b.n	1005dca6 <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1005dca4:	202e      	movs	r0, #46	@ 0x2e
1005dca6:	5a2d      	ldrh	r5, [r5, r0]
1005dca8:	19e0      	adds	r0, r4, r7
1005dcaa:	462a      	mov	r2, r5
1005dcac:	f7e8 f8e4 	bl	10045e78 <BLEPLAT_MemCpy>
1005dcb0:	1978      	adds	r0, r7, r5
1005dcb2:	1e80      	subs	r0, r0, #2
1005dcb4:	7060      	strb	r0, [r4, #1]
1005dcb6:	2000      	movs	r0, #0
1005dcb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005dcbc <ADV_ISR_connect_request_received>:
1005dcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005dcbe:	b085      	sub	sp, #20
1005dcc0:	4616      	mov	r6, r2
1005dcc2:	460d      	mov	r5, r1
1005dcc4:	4604      	mov	r4, r0
1005dcc6:	f7e9 faa7 	bl	10047218 <BLEPLAT_CNTR_PacketClrPllTrig>
1005dcca:	f7e8 fa02 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
1005dcce:	2003      	movs	r0, #3
1005dcd0:	43c0      	mvns	r0, r0
1005dcd2:	1cc1      	adds	r1, r0, #3
1005dcd4:	4668      	mov	r0, sp
1005dcd6:	8101      	strh	r1, [r0, #8]
1005dcd8:	2101      	movs	r1, #1
1005dcda:	8201      	strh	r1, [r0, #16]
1005dcdc:	7341      	strb	r1, [r0, #13]
1005dcde:	21be      	movs	r1, #190	@ 0xbe
1005dce0:	5a61      	ldrh	r1, [r4, r1]
1005dce2:	7281      	strb	r1, [r0, #10]
1005dce4:	4627      	mov	r7, r4
1005dce6:	37be      	adds	r7, #190	@ 0xbe
1005dce8:	7eba      	ldrb	r2, [r7, #26]
1005dcea:	72c2      	strb	r2, [r0, #11]
1005dcec:	7cba      	ldrb	r2, [r7, #18]
1005dcee:	7382      	strb	r2, [r0, #14]
1005dcf0:	4a0e      	ldr	r2, [pc, #56]	@ (1005dd2c <__arm_cp.47_0>)
1005dcf2:	1a89      	subs	r1, r1, r2
1005dcf4:	1e4a      	subs	r2, r1, #1
1005dcf6:	4191      	sbcs	r1, r2
1005dcf8:	73c1      	strb	r1, [r0, #15]
1005dcfa:	7301      	strb	r1, [r0, #12]
1005dcfc:	9601      	str	r6, [sp, #4]
1005dcfe:	9500      	str	r5, [sp, #0]
1005dd00:	f7fb fad0 	bl	100592a4 <llc_conn_go_to_connect>
1005dd04:	4620      	mov	r0, r4
1005dd06:	3028      	adds	r0, #40	@ 0x28
1005dd08:	f7ff f934 	bl	1005cf74 <LL_eadv_switchbackupdata_data_struc>
1005dd0c:	343c      	adds	r4, #60	@ 0x3c
1005dd0e:	4620      	mov	r0, r4
1005dd10:	f7ff f930 	bl	1005cf74 <LL_eadv_switchbackupdata_data_struc>
1005dd14:	2000      	movs	r0, #0
1005dd16:	7438      	strb	r0, [r7, #16]
1005dd18:	7cb8      	ldrb	r0, [r7, #18]
1005dd1a:	f000 fd37 	bl	1005e78c <LL_sched_engine>
1005dd1e:	7e38      	ldrb	r0, [r7, #24]
1005dd20:	0780      	lsls	r0, r0, #30
1005dd22:	d501      	bpl.n	1005dd28 <ADV_ISR_connect_request_received+0x6c>
1005dd24:	f7fd f806 	bl	1005ad34 <llc_priv_stop_privacy_timer_ucfg_weak>
1005dd28:	b005      	add	sp, #20
1005dd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005dd2c <__arm_cp.47_0>:
1005dd2c:	0000fffc 	.word	0x0000fffc

1005dd30 <ADV_ISR>:
1005dd30:	b5f0      	push	{r4, r5, r6, r7, lr}
1005dd32:	b08f      	sub	sp, #60	@ 0x3c
1005dd34:	4604      	mov	r4, r0
1005dd36:	f000 fc3b 	bl	1005e5b0 <LL_get_rx_common_buffer_p>
1005dd3a:	9006      	str	r0, [sp, #24]
1005dd3c:	4d8b      	ldr	r5, [pc, #556]	@ (1005df6c <__arm_cp.48_0>)
1005dd3e:	6828      	ldr	r0, [r5, #0]
1005dd40:	f7e9 fa23 	bl	1004718a <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1005dd44:	4606      	mov	r6, r0
1005dd46:	6828      	ldr	r0, [r5, #0]
1005dd48:	f7e9 fa36 	bl	100471b8 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005dd4c:	4605      	mov	r5, r0
1005dd4e:	27d0      	movs	r7, #208	@ 0xd0
1005dd50:	5de0      	ldrb	r0, [r4, r7]
1005dd52:	212c      	movs	r1, #44	@ 0x2c
1005dd54:	4341      	muls	r1, r0
1005dd56:	4a86      	ldr	r2, [pc, #536]	@ (1005df70 <__arm_cp.48_1>)
1005dd58:	6812      	ldr	r2, [r2, #0]
1005dd5a:	1851      	adds	r1, r2, r1
1005dd5c:	7d89      	ldrb	r1, [r1, #22]
1005dd5e:	2914      	cmp	r1, #20
1005dd60:	d103      	bne.n	1005dd6a <ADV_ISR+0x3a>
1005dd62:	210a      	movs	r1, #10
1005dd64:	2203      	movs	r2, #3
1005dd66:	f000 fed7 	bl	1005eb18 <LL_sched_set_priority>
1005dd6a:	4620      	mov	r0, r4
1005dd6c:	30b4      	adds	r0, #180	@ 0xb4
1005dd6e:	9007      	str	r0, [sp, #28]
1005dd70:	9408      	str	r4, [sp, #32]
1005dd72:	34db      	adds	r4, #219	@ 0xdb
1005dd74:	9405      	str	r4, [sp, #20]
1005dd76:	2e00      	cmp	r6, #0
1005dd78:	d039      	beq.n	1005ddee <ADV_ISR+0xbe>
1005dd7a:	2500      	movs	r5, #0
1005dd7c:	950e      	str	r5, [sp, #56]	@ 0x38
1005dd7e:	950d      	str	r5, [sp, #52]	@ 0x34
1005dd80:	9c06      	ldr	r4, [sp, #24]
1005dd82:	7820      	ldrb	r0, [r4, #0]
1005dd84:	09c0      	lsrs	r0, r0, #7
1005dd86:	a90d      	add	r1, sp, #52	@ 0x34
1005dd88:	7008      	strb	r0, [r1, #0]
1005dd8a:	487a      	ldr	r0, [pc, #488]	@ (1005df74 <__arm_cp.48_2>)
1005dd8c:	6800      	ldr	r0, [r0, #0]
1005dd8e:	5dc0      	ldrb	r0, [r0, r7]
1005dd90:	9003      	str	r0, [sp, #12]
1005dd92:	1c48      	adds	r0, r1, #1
1005dd94:	4621      	mov	r1, r4
1005dd96:	3108      	adds	r1, #8
1005dd98:	2606      	movs	r6, #6
1005dd9a:	4632      	mov	r2, r6
1005dd9c:	f7e8 f86c 	bl	10045e78 <BLEPLAT_MemCpy>
1005dda0:	950c      	str	r5, [sp, #48]	@ 0x30
1005dda2:	9504      	str	r5, [sp, #16]
1005dda4:	950b      	str	r5, [sp, #44]	@ 0x2c
1005dda6:	7820      	ldrb	r0, [r4, #0]
1005dda8:	0640      	lsls	r0, r0, #25
1005ddaa:	0fc0      	lsrs	r0, r0, #31
1005ddac:	a90b      	add	r1, sp, #44	@ 0x2c
1005ddae:	7008      	strb	r0, [r1, #0]
1005ddb0:	1c48      	adds	r0, r1, #1
1005ddb2:	1ca1      	adds	r1, r4, #2
1005ddb4:	4632      	mov	r2, r6
1005ddb6:	f7e8 f85f 	bl	10045e78 <BLEPLAT_MemCpy>
1005ddba:	7820      	ldrb	r0, [r4, #0]
1005ddbc:	260f      	movs	r6, #15
1005ddbe:	4006      	ands	r6, r0
1005ddc0:	2e05      	cmp	r6, #5
1005ddc2:	d101      	bne.n	1005ddc8 <ADV_ISR+0x98>
1005ddc4:	f7e8 f985 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
1005ddc8:	9f07      	ldr	r7, [sp, #28]
1005ddca:	7bfb      	ldrb	r3, [r7, #15]
1005ddcc:	793a      	ldrb	r2, [r7, #4]
1005ddce:	9c04      	ldr	r4, [sp, #16]
1005ddd0:	9402      	str	r4, [sp, #8]
1005ddd2:	ad09      	add	r5, sp, #36	@ 0x24
1005ddd4:	9501      	str	r5, [sp, #4]
1005ddd6:	9808      	ldr	r0, [sp, #32]
1005ddd8:	3084      	adds	r0, #132	@ 0x84
1005ddda:	9000      	str	r0, [sp, #0]
1005dddc:	a80b      	add	r0, sp, #44	@ 0x2c
1005ddde:	4631      	mov	r1, r6
1005dde0:	f007 fdd4 	bl	1006598c <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1005dde4:	0841      	lsrs	r1, r0, #1
1005dde6:	297e      	cmp	r1, #126	@ 0x7e
1005dde8:	d808      	bhi.n	1005ddfc <ADV_ISR+0xcc>
1005ddea:	4601      	mov	r1, r0
1005ddec:	e007      	b.n	1005ddfe <ADV_ISR+0xce>
1005ddee:	2601      	movs	r6, #1
1005ddf0:	2400      	movs	r4, #0
1005ddf2:	2d00      	cmp	r5, #0
1005ddf4:	d05a      	beq.n	1005deac <ADV_ISR+0x17c>
1005ddf6:	9d08      	ldr	r5, [sp, #32]
1005ddf8:	9f07      	ldr	r7, [sp, #28]
1005ddfa:	e05a      	b.n	1005deb2 <ADV_ISR+0x182>
1005ddfc:	2101      	movs	r1, #1
1005ddfe:	7029      	strb	r1, [r5, #0]
1005de00:	9d08      	ldr	r5, [sp, #32]
1005de02:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005de04:	680a      	ldr	r2, [r1, #0]
1005de06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1005de08:	429a      	cmp	r2, r3
1005de0a:	d12d      	bne.n	1005de68 <ADV_ISR+0x138>
1005de0c:	6849      	ldr	r1, [r1, #4]
1005de0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005de10:	4291      	cmp	r1, r2
1005de12:	d129      	bne.n	1005de68 <ADV_ISR+0x138>
1005de14:	4604      	mov	r4, r0
1005de16:	3cff      	subs	r4, #255	@ 0xff
1005de18:	1e61      	subs	r1, r4, #1
1005de1a:	418c      	sbcs	r4, r1
1005de1c:	2e03      	cmp	r6, #3
1005de1e:	d123      	bne.n	1005de68 <ADV_ISR+0x138>
1005de20:	28ff      	cmp	r0, #255	@ 0xff
1005de22:	d021      	beq.n	1005de68 <ADV_ISR+0x138>
1005de24:	88b8      	ldrh	r0, [r7, #4]
1005de26:	2401      	movs	r4, #1
1005de28:	0780      	lsls	r0, r0, #30
1005de2a:	d51d      	bpl.n	1005de68 <ADV_ISR+0x138>
1005de2c:	9803      	ldr	r0, [sp, #12]
1005de2e:	2801      	cmp	r0, #1
1005de30:	d11a      	bne.n	1005de68 <ADV_ISR+0x138>
1005de32:	4628      	mov	r0, r5
1005de34:	f7e9 f9f0 	bl	10047218 <BLEPLAT_CNTR_PacketClrPllTrig>
1005de38:	7e78      	ldrb	r0, [r7, #25]
1005de3a:	2801      	cmp	r0, #1
1005de3c:	d109      	bne.n	1005de52 <ADV_ISR+0x122>
1005de3e:	8978      	ldrh	r0, [r7, #10]
1005de40:	494d      	ldr	r1, [pc, #308]	@ (1005df78 <__arm_cp.48_3>)
1005de42:	4288      	cmp	r0, r1
1005de44:	d005      	beq.n	1005de52 <ADV_ISR+0x122>
1005de46:	aa09      	add	r2, sp, #36	@ 0x24
1005de48:	7811      	ldrb	r1, [r2, #0]
1005de4a:	b2c0      	uxtb	r0, r0
1005de4c:	1c52      	adds	r2, r2, #1
1005de4e:	f000 f897 	bl	1005df80 <hci_le_scan_request_received_event_push>
1005de52:	7f38      	ldrb	r0, [r7, #28]
1005de54:	f7e9 fe0c 	bl	10047a70 <BLEPLAT_CNTR_SmSetTxMode>
1005de58:	2001      	movs	r0, #1
1005de5a:	9905      	ldr	r1, [sp, #20]
1005de5c:	7008      	strb	r0, [r1, #0]
1005de5e:	4628      	mov	r0, r5
1005de60:	f7ff fe9e 	bl	1005dba0 <ADV_createslot>
1005de64:	2600      	movs	r6, #0
1005de66:	e024      	b.n	1005deb2 <ADV_ISR+0x182>
1005de68:	88b8      	ldrh	r0, [r7, #4]
1005de6a:	07c0      	lsls	r0, r0, #31
1005de6c:	d01a      	beq.n	1005dea4 <ADV_ISR+0x174>
1005de6e:	2e05      	cmp	r6, #5
1005de70:	d118      	bne.n	1005dea4 <ADV_ISR+0x174>
1005de72:	9806      	ldr	r0, [sp, #24]
1005de74:	f7fb f8e2 	bl	1005903c <llc_conn_check_connect_request_params>
1005de78:	2801      	cmp	r0, #1
1005de7a:	d113      	bne.n	1005dea4 <ADV_ISR+0x174>
1005de7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005de7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005de80:	f7fa feb6 	bl	10058bf0 <llc_conn_list_search_address>
1005de84:	4241      	negs	r1, r0
1005de86:	4141      	adcs	r1, r0
1005de88:	4021      	ands	r1, r4
1005de8a:	2901      	cmp	r1, #1
1005de8c:	d10a      	bne.n	1005dea4 <ADV_ISR+0x174>
1005de8e:	9803      	ldr	r0, [sp, #12]
1005de90:	2801      	cmp	r0, #1
1005de92:	d107      	bne.n	1005dea4 <ADV_ISR+0x174>
1005de94:	aa09      	add	r2, sp, #36	@ 0x24
1005de96:	4628      	mov	r0, r5
1005de98:	9906      	ldr	r1, [sp, #24]
1005de9a:	f7f4 f859 	bl	10051f50 <ADV_ISR_connect_request_received_ucfg>
1005de9e:	2601      	movs	r6, #1
1005dea0:	2400      	movs	r4, #0
1005dea2:	e006      	b.n	1005deb2 <ADV_ISR+0x182>
1005dea4:	2400      	movs	r4, #0
1005dea6:	803c      	strh	r4, [r7, #0]
1005dea8:	2601      	movs	r6, #1
1005deaa:	e002      	b.n	1005deb2 <ADV_ISR+0x182>
1005deac:	9f07      	ldr	r7, [sp, #28]
1005deae:	803c      	strh	r4, [r7, #0]
1005deb0:	9d08      	ldr	r5, [sp, #32]
1005deb2:	8839      	ldrh	r1, [r7, #0]
1005deb4:	7fb8      	ldrb	r0, [r7, #30]
1005deb6:	2800      	cmp	r0, #0
1005deb8:	d022      	beq.n	1005df00 <ADV_ISR+0x1d0>
1005deba:	2900      	cmp	r1, #0
1005debc:	d122      	bne.n	1005df04 <ADV_ISR+0x1d4>
1005debe:	1e40      	subs	r0, r0, #1
1005dec0:	77b8      	strb	r0, [r7, #30]
1005dec2:	88b8      	ldrh	r0, [r7, #4]
1005dec4:	2103      	movs	r1, #3
1005dec6:	4001      	ands	r1, r0
1005dec8:	1e48      	subs	r0, r1, #1
1005deca:	4181      	sbcs	r1, r0
1005decc:	0048      	lsls	r0, r1, #1
1005dece:	8038      	strh	r0, [r7, #0]
1005ded0:	4628      	mov	r0, r5
1005ded2:	f7ff fdcd 	bl	1005da70 <UTIL_u8GetNextAdvChannel>
1005ded6:	4601      	mov	r1, r0
1005ded8:	7f38      	ldrb	r0, [r7, #28]
1005deda:	f7e9 fd0a 	bl	100478f2 <BLEPLAT_CNTR_SmSetRemapChan>
1005dede:	7f38      	ldrb	r0, [r7, #28]
1005dee0:	f7e9 fdc6 	bl	10047a70 <BLEPLAT_CNTR_SmSetTxMode>
1005dee4:	4628      	mov	r0, r5
1005dee6:	f7e9 fa8b 	bl	10047400 <BLEPLAT_CNTR_PacketSetPllTrig>
1005deea:	f7e8 f8f2 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
1005deee:	2000      	movs	r0, #0
1005def0:	9905      	ldr	r1, [sp, #20]
1005def2:	7008      	strb	r0, [r1, #0]
1005def4:	4628      	mov	r0, r5
1005def6:	f7ff fe53 	bl	1005dba0 <ADV_createslot>
1005defa:	f7e8 f902 	bl	10046102 <BLEPLAT_SetRadioCloseTimeout>
1005defe:	e02a      	b.n	1005df56 <ADV_ISR+0x226>
1005df00:	2900      	cmp	r1, #0
1005df02:	d019      	beq.n	1005df38 <ADV_ISR+0x208>
1005df04:	4819      	ldr	r0, [pc, #100]	@ (1005df6c <__arm_cp.48_0>)
1005df06:	6800      	ldr	r0, [r0, #0]
1005df08:	f7e9 f956 	bl	100471b8 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005df0c:	2800      	cmp	r0, #0
1005df0e:	d022      	beq.n	1005df56 <ADV_ISR+0x226>
1005df10:	4628      	mov	r0, r5
1005df12:	f7e9 fa75 	bl	10047400 <BLEPLAT_CNTR_PacketSetPllTrig>
1005df16:	7c78      	ldrb	r0, [r7, #17]
1005df18:	2801      	cmp	r0, #1
1005df1a:	d001      	beq.n	1005df20 <ADV_ISR+0x1f0>
1005df1c:	4917      	ldr	r1, [pc, #92]	@ (1005df7c <__arm_cp.48_4>)
1005df1e:	e000      	b.n	1005df22 <ADV_ISR+0x1f2>
1005df20:	2146      	movs	r1, #70	@ 0x46
1005df22:	3514      	adds	r5, #20
1005df24:	4628      	mov	r0, r5
1005df26:	f7e9 facc 	bl	100474c2 <BLEPLAT_CNTR_SetRcvLen>
1005df2a:	8838      	ldrh	r0, [r7, #0]
1005df2c:	1e40      	subs	r0, r0, #1
1005df2e:	8038      	strh	r0, [r7, #0]
1005df30:	f7e9 f891 	bl	10047056 <BLEPLAT_CNTR_GlobEnableBlue>
1005df34:	2600      	movs	r6, #0
1005df36:	e00e      	b.n	1005df56 <ADV_ISR+0x226>
1005df38:	f7e8 f8cb 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
1005df3c:	4628      	mov	r0, r5
1005df3e:	f7e9 fa5f 	bl	10047400 <BLEPLAT_CNTR_PacketSetPllTrig>
1005df42:	88f8      	ldrh	r0, [r7, #6]
1005df44:	1e40      	subs	r0, r0, #1
1005df46:	80f8      	strh	r0, [r7, #6]
1005df48:	2100      	movs	r1, #0
1005df4a:	4628      	mov	r0, r5
1005df4c:	f7ff fcb0 	bl	1005d8b0 <ADV_skiproutine>
1005df50:	7f38      	ldrb	r0, [r7, #28]
1005df52:	f000 fc1b 	bl	1005e78c <LL_sched_engine>
1005df56:	2c00      	cmp	r4, #0
1005df58:	d002      	beq.n	1005df60 <ADV_ISR+0x230>
1005df5a:	8838      	ldrh	r0, [r7, #0]
1005df5c:	1e40      	subs	r0, r0, #1
1005df5e:	8038      	strh	r0, [r7, #0]
1005df60:	f7f5 fa7f 	bl	10053462 <log_notify_us_flush_ucfg_weak>
1005df64:	4630      	mov	r0, r6
1005df66:	b00f      	add	sp, #60	@ 0x3c
1005df68:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005df6a:	46c0      	nop			@ (mov r8, r8)

1005df6c <__arm_cp.48_0>:
1005df6c:	20001170 	.word	0x20001170

1005df70 <__arm_cp.48_1>:
1005df70:	2000117c 	.word	0x2000117c

1005df74 <__arm_cp.48_2>:
1005df74:	20001174 	.word	0x20001174

1005df78 <__arm_cp.48_3>:
1005df78:	0000fffc 	.word	0x0000fffc

1005df7c <__arm_cp.48_4>:
1005df7c:	000002ee 	.word	0x000002ee

1005df80 <hci_le_scan_request_received_event_push>:
1005df80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005df82:	460e      	mov	r6, r1
1005df84:	4605      	mov	r5, r0
1005df86:	4815      	ldr	r0, [pc, #84]	@ (1005dfdc <__arm_cp.49_0>)
1005df88:	6800      	ldr	r0, [r0, #0]
1005df8a:	213d      	movs	r1, #61	@ 0x3d
1005df8c:	5c41      	ldrb	r1, [r0, r1]
1005df8e:	0689      	lsls	r1, r1, #26
1005df90:	d522      	bpl.n	1005dfd8 <hci_le_scan_request_received_event_push+0x58>
1005df92:	303d      	adds	r0, #61	@ 0x3d
1005df94:	7ac0      	ldrb	r0, [r0, #11]
1005df96:	0740      	lsls	r0, r0, #29
1005df98:	d51e      	bpl.n	1005dfd8 <hci_le_scan_request_received_event_push+0x58>
1005df9a:	4614      	mov	r4, r2
1005df9c:	4810      	ldr	r0, [pc, #64]	@ (1005dfe0 <__arm_cp.49_1>)
1005df9e:	6800      	ldr	r0, [r0, #0]
1005dfa0:	6940      	ldr	r0, [r0, #20]
1005dfa2:	21a1      	movs	r1, #161	@ 0xa1
1005dfa4:	222b      	movs	r2, #43	@ 0x2b
1005dfa6:	2303      	movs	r3, #3
1005dfa8:	f7f5 fa5e 	bl	10053468 <aci_event_fifo_push_header>
1005dfac:	2800      	cmp	r0, #0
1005dfae:	d013      	beq.n	1005dfd8 <hci_le_scan_request_received_event_push+0x58>
1005dfb0:	4607      	mov	r7, r0
1005dfb2:	7246      	strb	r6, [r0, #9]
1005dfb4:	7205      	strb	r5, [r0, #8]
1005dfb6:	300a      	adds	r0, #10
1005dfb8:	2206      	movs	r2, #6
1005dfba:	4621      	mov	r1, r4
1005dfbc:	f7e7 ff5c 	bl	10045e78 <BLEPLAT_MemCpy>
1005dfc0:	2013      	movs	r0, #19
1005dfc2:	71f8      	strb	r0, [r7, #7]
1005dfc4:	2009      	movs	r0, #9
1005dfc6:	71b8      	strb	r0, [r7, #6]
1005dfc8:	203e      	movs	r0, #62	@ 0x3e
1005dfca:	7178      	strb	r0, [r7, #5]
1005dfcc:	2004      	movs	r0, #4
1005dfce:	7138      	strb	r0, [r7, #4]
1005dfd0:	20a1      	movs	r0, #161	@ 0xa1
1005dfd2:	4639      	mov	r1, r7
1005dfd4:	f7f5 fae5 	bl	100535a2 <aci_event_fifo_push>
1005dfd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005dfda:	46c0      	nop			@ (mov r8, r8)

1005dfdc <__arm_cp.49_0>:
1005dfdc:	20001174 	.word	0x20001174

1005dfe0 <__arm_cp.49_1>:
1005dfe0:	20001124 	.word	0x20001124

1005dfe4 <EADV_start_request_radio_tasks>:
1005dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005dfe6:	4604      	mov	r4, r0
1005dfe8:	20d8      	movs	r0, #216	@ 0xd8
1005dfea:	21ff      	movs	r1, #255	@ 0xff
1005dfec:	5421      	strb	r1, [r4, r0]
1005dfee:	20b8      	movs	r0, #184	@ 0xb8
1005dff0:	5a25      	ldrh	r5, [r4, r0]
1005dff2:	2701      	movs	r7, #1
1005dff4:	402f      	ands	r7, r5
1005dff6:	4626      	mov	r6, r4
1005dff8:	36d8      	adds	r6, #216	@ 0xd8
1005dffa:	2f00      	cmp	r7, #0
1005dffc:	d004      	beq.n	1005e008 <EADV_start_request_radio_tasks+0x24>
1005dffe:	f7fb fcd9 	bl	100599b4 <llc_conn_reserve_conn_idx>
1005e002:	7030      	strb	r0, [r6, #0]
1005e004:	28ff      	cmp	r0, #255	@ 0xff
1005e006:	d022      	beq.n	1005e04e <EADV_start_request_radio_tasks+0x6a>
1005e008:	34b8      	adds	r4, #184	@ 0xb8
1005e00a:	f000 fdc3 	bl	1005eb94 <LL_sched_reserve_taskslot>
1005e00e:	7620      	strb	r0, [r4, #24]
1005e010:	28ff      	cmp	r0, #255	@ 0xff
1005e012:	d013      	beq.n	1005e03c <EADV_start_request_radio_tasks+0x58>
1005e014:	2100      	movs	r1, #0
1005e016:	06e8      	lsls	r0, r5, #27
1005e018:	d41a      	bmi.n	1005e050 <EADV_start_request_radio_tasks+0x6c>
1005e01a:	460d      	mov	r5, r1
1005e01c:	f000 fdba 	bl	1005eb94 <LL_sched_reserve_taskslot>
1005e020:	4629      	mov	r1, r5
1005e022:	7660      	strb	r0, [r4, #25]
1005e024:	28ff      	cmp	r0, #255	@ 0xff
1005e026:	d113      	bne.n	1005e050 <EADV_start_request_radio_tasks+0x6c>
1005e028:	2f00      	cmp	r7, #0
1005e02a:	d002      	beq.n	1005e032 <EADV_start_request_radio_tasks+0x4e>
1005e02c:	7830      	ldrb	r0, [r6, #0]
1005e02e:	f7fb f908 	bl	10059242 <llc_conn_release_conn_idx>
1005e032:	7e20      	ldrb	r0, [r4, #24]
1005e034:	f000 fdd0 	bl	1005ebd8 <LL_sched_release_taskslot>
1005e038:	2107      	movs	r1, #7
1005e03a:	e009      	b.n	1005e050 <EADV_start_request_radio_tasks+0x6c>
1005e03c:	2107      	movs	r1, #7
1005e03e:	2f00      	cmp	r7, #0
1005e040:	d006      	beq.n	1005e050 <EADV_start_request_radio_tasks+0x6c>
1005e042:	7830      	ldrb	r0, [r6, #0]
1005e044:	460c      	mov	r4, r1
1005e046:	f7fb f8fc 	bl	10059242 <llc_conn_release_conn_idx>
1005e04a:	4621      	mov	r1, r4
1005e04c:	e000      	b.n	1005e050 <EADV_start_request_radio_tasks+0x6c>
1005e04e:	210c      	movs	r1, #12
1005e050:	4608      	mov	r0, r1
1005e052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e054 <llc_get_channel_sel_algo2_enabled>:
1005e054:	b580      	push	{r7, lr}
1005e056:	f000 fab9 	bl	1005e5cc <llc_get_linkms_cntxt_p>
1005e05a:	214e      	movs	r1, #78	@ 0x4e
1005e05c:	5c40      	ldrb	r0, [r0, r1]
1005e05e:	bd80      	pop	{r7, pc}

1005e060 <llc_eadv_max_supported_data_check_ucfg_weak>:
1005e060:	2000      	movs	r0, #0
1005e062:	4770      	bx	lr

1005e064 <LL_eadv_start_extended_ucfg_weak>:
1005e064:	4770      	bx	lr

1005e066 <ext_adv_scan_enabled_ucfg_weak>:
1005e066:	2000      	movs	r0, #0
1005e068:	4770      	bx	lr

1005e06a <BLE_STACK_EndOfRadioActivityCb>:
1005e06a:	4770      	bx	lr

1005e06c <BLE_STACK_RadioHandler>:
1005e06c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e06e:	b083      	sub	sp, #12
1005e070:	4604      	mov	r4, r0
1005e072:	484c      	ldr	r0, [pc, #304]	@ (1005e1a4 <__arm_cp.1_0>)
1005e074:	6004      	str	r4, [r0, #0]
1005e076:	4620      	mov	r0, r4
1005e078:	f7e9 f863 	bl	10047142 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1005e07c:	4605      	mov	r5, r0
1005e07e:	4620      	mov	r0, r4
1005e080:	f7e9 f82f 	bl	100470e2 <BLEPLAT_CNTR_IntGetIntStatusDone>
1005e084:	4606      	mov	r6, r0
1005e086:	4668      	mov	r0, sp
1005e088:	f7e8 f82c 	bl	100460e4 <BLEPLAT_GetAnchorPoint>
1005e08c:	9900      	ldr	r1, [sp, #0]
1005e08e:	1a09      	subs	r1, r1, r0
1005e090:	0b4b      	lsrs	r3, r1, #13
1005e092:	4945      	ldr	r1, [pc, #276]	@ (1005e1a8 <__arm_cp.1_1>)
1005e094:	680a      	ldr	r2, [r1, #0]
1005e096:	4611      	mov	r1, r2
1005e098:	31d0      	adds	r1, #208	@ 0xd0
1005e09a:	2b00      	cmp	r3, #0
1005e09c:	d102      	bne.n	1005e0a4 <BLE_STACK_RadioHandler+0x38>
1005e09e:	6010      	str	r0, [r2, #0]
1005e0a0:	2001      	movs	r0, #1
1005e0a2:	e000      	b.n	1005e0a6 <BLE_STACK_RadioHandler+0x3a>
1005e0a4:	2000      	movs	r0, #0
1005e0a6:	7008      	strb	r0, [r1, #0]
1005e0a8:	4840      	ldr	r0, [pc, #256]	@ (1005e1ac <__arm_cp.1_2>)
1005e0aa:	6800      	ldr	r0, [r0, #0]
1005e0ac:	7b44      	ldrb	r4, [r0, #13]
1005e0ae:	2100      	movs	r1, #0
1005e0b0:	2cff      	cmp	r4, #255	@ 0xff
1005e0b2:	d00a      	beq.n	1005e0ca <BLE_STACK_RadioHandler+0x5e>
1005e0b4:	202c      	movs	r0, #44	@ 0x2c
1005e0b6:	4360      	muls	r0, r4
1005e0b8:	4a3d      	ldr	r2, [pc, #244]	@ (1005e1b0 <__arm_cp.1_3>)
1005e0ba:	6812      	ldr	r2, [r2, #0]
1005e0bc:	1810      	adds	r0, r2, r0
1005e0be:	7c82      	ldrb	r2, [r0, #18]
1005e0c0:	2a00      	cmp	r2, #0
1005e0c2:	d002      	beq.n	1005e0ca <BLE_STACK_RadioHandler+0x5e>
1005e0c4:	6a41      	ldr	r1, [r0, #36]	@ 0x24
1005e0c6:	68c0      	ldr	r0, [r0, #12]
1005e0c8:	e7ff      	b.n	1005e0ca <BLE_STACK_RadioHandler+0x5e>
1005e0ca:	2701      	movs	r7, #1
1005e0cc:	2e00      	cmp	r6, #0
1005e0ce:	d003      	beq.n	1005e0d8 <BLE_STACK_RadioHandler+0x6c>
1005e0d0:	2d00      	cmp	r5, #0
1005e0d2:	d101      	bne.n	1005e0d8 <BLE_STACK_RadioHandler+0x6c>
1005e0d4:	2900      	cmp	r1, #0
1005e0d6:	e011      	b.n	1005e0fc <BLE_STACK_RadioHandler+0x90>
1005e0d8:	2d00      	cmp	r5, #0
1005e0da:	d015      	beq.n	1005e108 <BLE_STACK_RadioHandler+0x9c>
1005e0dc:	4a35      	ldr	r2, [pc, #212]	@ (1005e1b4 <__arm_cp.1_4>)
1005e0de:	1a8b      	subs	r3, r1, r2
1005e0e0:	425a      	negs	r2, r3
1005e0e2:	415a      	adcs	r2, r3
1005e0e4:	4b34      	ldr	r3, [pc, #208]	@ (1005e1b8 <__arm_cp.1_5>)
1005e0e6:	1acd      	subs	r5, r1, r3
1005e0e8:	426b      	negs	r3, r5
1005e0ea:	416b      	adcs	r3, r5
1005e0ec:	4d33      	ldr	r5, [pc, #204]	@ (1005e1bc <__arm_cp.1_6>)
1005e0ee:	1b4e      	subs	r6, r1, r5
1005e0f0:	4275      	negs	r5, r6
1005e0f2:	4175      	adcs	r5, r6
1005e0f4:	2900      	cmp	r1, #0
1005e0f6:	d007      	beq.n	1005e108 <BLE_STACK_RadioHandler+0x9c>
1005e0f8:	4313      	orrs	r3, r2
1005e0fa:	431d      	orrs	r5, r3
1005e0fc:	4e2a      	ldr	r6, [pc, #168]	@ (1005e1a8 <__arm_cp.1_1>)
1005e0fe:	4d29      	ldr	r5, [pc, #164]	@ (1005e1a4 <__arm_cp.1_0>)
1005e100:	d004      	beq.n	1005e10c <BLE_STACK_RadioHandler+0xa0>
1005e102:	4788      	blx	r1
1005e104:	2700      	movs	r7, #0
1005e106:	e001      	b.n	1005e10c <BLE_STACK_RadioHandler+0xa0>
1005e108:	4e27      	ldr	r6, [pc, #156]	@ (1005e1a8 <__arm_cp.1_1>)
1005e10a:	4d26      	ldr	r5, [pc, #152]	@ (1005e1a4 <__arm_cp.1_0>)
1005e10c:	6828      	ldr	r0, [r5, #0]
1005e10e:	f7e9 f80c 	bl	1004712a <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
1005e112:	2800      	cmp	r0, #0
1005e114:	d001      	beq.n	1005e11a <BLE_STACK_RadioHandler+0xae>
1005e116:	2504      	movs	r5, #4
1005e118:	e020      	b.n	1005e15c <BLE_STACK_RadioHandler+0xf0>
1005e11a:	6828      	ldr	r0, [r5, #0]
1005e11c:	f7e8 ffc0 	bl	100470a0 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
1005e120:	2800      	cmp	r0, #0
1005e122:	d001      	beq.n	1005e128 <BLE_STACK_RadioHandler+0xbc>
1005e124:	2501      	movs	r5, #1
1005e126:	e019      	b.n	1005e15c <BLE_STACK_RadioHandler+0xf0>
1005e128:	6828      	ldr	r0, [r5, #0]
1005e12a:	f7e8 ffc5 	bl	100470b8 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
1005e12e:	2800      	cmp	r0, #0
1005e130:	d001      	beq.n	1005e136 <BLE_STACK_RadioHandler+0xca>
1005e132:	2502      	movs	r5, #2
1005e134:	e012      	b.n	1005e15c <BLE_STACK_RadioHandler+0xf0>
1005e136:	6828      	ldr	r0, [r5, #0]
1005e138:	f7e9 f80f 	bl	1004715a <BLEPLAT_CNTR_IntGetIntStatusTxError1>
1005e13c:	4629      	mov	r1, r5
1005e13e:	2505      	movs	r5, #5
1005e140:	2800      	cmp	r0, #0
1005e142:	d10b      	bne.n	1005e15c <BLE_STACK_RadioHandler+0xf0>
1005e144:	6808      	ldr	r0, [r1, #0]
1005e146:	f7e9 f814 	bl	10047172 <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1005e14a:	2800      	cmp	r0, #0
1005e14c:	d106      	bne.n	1005e15c <BLE_STACK_RadioHandler+0xf0>
1005e14e:	4815      	ldr	r0, [pc, #84]	@ (1005e1a4 <__arm_cp.1_0>)
1005e150:	6800      	ldr	r0, [r0, #0]
1005e152:	f7e8 ff97 	bl	10047084 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1005e156:	2800      	cmp	r0, #0
1005e158:	d020      	beq.n	1005e19c <BLE_STACK_RadioHandler+0x130>
1005e15a:	2500      	movs	r5, #0
1005e15c:	2001      	movs	r0, #1
1005e15e:	40a8      	lsls	r0, r5
1005e160:	4917      	ldr	r1, [pc, #92]	@ (1005e1c0 <__arm_cp.1_7>)
1005e162:	6809      	ldr	r1, [r1, #0]
1005e164:	680a      	ldr	r2, [r1, #0]
1005e166:	4302      	orrs	r2, r0
1005e168:	600a      	str	r2, [r1, #0]
1005e16a:	2000      	movs	r0, #0
1005e16c:	f003 ff96 	bl	1006209c <tsk_notify_idx>
1005e170:	f7e5 fe95 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005e174:	f7e7 ffad 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
1005e178:	4620      	mov	r0, r4
1005e17a:	f000 fb07 	bl	1005e78c <LL_sched_engine>
1005e17e:	6834      	ldr	r4, [r6, #0]
1005e180:	7d60      	ldrb	r0, [r4, #21]
1005e182:	2801      	cmp	r0, #1
1005e184:	d108      	bne.n	1005e198 <BLE_STACK_RadioHandler+0x12c>
1005e186:	7c21      	ldrb	r1, [r4, #16]
1005e188:	200f      	movs	r0, #15
1005e18a:	4008      	ands	r0, r1
1005e18c:	68e2      	ldr	r2, [r4, #12]
1005e18e:	0909      	lsrs	r1, r1, #4
1005e190:	f7ff ff6b 	bl	1005e06a <BLE_STACK_EndOfRadioActivityCb>
1005e194:	2000      	movs	r0, #0
1005e196:	7560      	strb	r0, [r4, #21]
1005e198:	b003      	add	sp, #12
1005e19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e19c:	2f00      	cmp	r7, #0
1005e19e:	d1e9      	bne.n	1005e174 <BLE_STACK_RadioHandler+0x108>
1005e1a0:	e7ed      	b.n	1005e17e <BLE_STACK_RadioHandler+0x112>
1005e1a2:	46c0      	nop			@ (mov r8, r8)

1005e1a4 <__arm_cp.1_0>:
1005e1a4:	20001170 	.word	0x20001170

1005e1a8 <__arm_cp.1_1>:
1005e1a8:	20001174 	.word	0x20001174

1005e1ac <__arm_cp.1_2>:
1005e1ac:	20001178 	.word	0x20001178

1005e1b0 <__arm_cp.1_3>:
1005e1b0:	2000117c 	.word	0x2000117c

1005e1b4 <__arm_cp.1_4>:
1005e1b4:	10065aa9 	.word	0x10065aa9

1005e1b8 <__arm_cp.1_5>:
1005e1b8:	10065aa5 	.word	0x10065aa5

1005e1bc <__arm_cp.1_6>:
1005e1bc:	10065aad 	.word	0x10065aad

1005e1c0 <__arm_cp.1_7>:
1005e1c0:	20001124 	.word	0x20001124

1005e1c4 <LL_link_calculate_window_widening_from_ppm>:
1005e1c4:	22ff      	movs	r2, #255	@ 0xff
1005e1c6:	320e      	adds	r2, #14
1005e1c8:	4342      	muls	r2, r0
1005e1ca:	0a10      	lsrs	r0, r2, #8
1005e1cc:	0889      	lsrs	r1, r1, #2
1005e1ce:	4341      	muls	r1, r0
1005e1d0:	0c88      	lsrs	r0, r1, #18
1005e1d2:	1c40      	adds	r0, r0, #1
1005e1d4:	4770      	bx	lr
	...

1005e1d8 <LL_link_calc_packetlength>:
1005e1d8:	2804      	cmp	r0, #4
1005e1da:	d005      	beq.n	1005e1e8 <LL_link_calc_packetlength+0x10>
1005e1dc:	2801      	cmp	r0, #1
1005e1de:	d106      	bne.n	1005e1ee <LL_link_calc_packetlength+0x16>
1005e1e0:	20ff      	movs	r0, #255	@ 0xff
1005e1e2:	30a4      	adds	r0, #164	@ 0xa4
1005e1e4:	4a07      	ldr	r2, [pc, #28]	@ (1005e204 <__arm_cp.10_2>)
1005e1e6:	e004      	b.n	1005e1f2 <LL_link_calc_packetlength+0x1a>
1005e1e8:	4a04      	ldr	r2, [pc, #16]	@ (1005e1fc <__arm_cp.10_0>)
1005e1ea:	4805      	ldr	r0, [pc, #20]	@ (1005e200 <__arm_cp.10_1>)
1005e1ec:	e001      	b.n	1005e1f2 <LL_link_calc_packetlength+0x1a>
1005e1ee:	4a06      	ldr	r2, [pc, #24]	@ (1005e208 <__arm_cp.10_3>)
1005e1f0:	4806      	ldr	r0, [pc, #24]	@ (1005e20c <__arm_cp.10_4>)
1005e1f2:	4341      	muls	r1, r0
1005e1f4:	1888      	adds	r0, r1, r2
1005e1f6:	0a00      	lsrs	r0, r0, #8
1005e1f8:	4770      	bx	lr
1005e1fa:	46c0      	nop			@ (mov r8, r8)

1005e1fc <__arm_cp.10_0>:
1005e1fc:	000126e9 	.word	0x000126e9

1005e200 <__arm_cp.10_1>:
1005e200:	00001a38 	.word	0x00001a38

1005e204 <__arm_cp.10_2>:
1005e204:	00001206 	.word	0x00001206

1005e208 <__arm_cp.10_3>:
1005e208:	000020c6 	.word	0x000020c6

1005e20c <__arm_cp.10_4>:
1005e20c:	00000347 	.word	0x00000347

1005e210 <LL_link_get_own_sca_ppm>:
1005e210:	4801      	ldr	r0, [pc, #4]	@ (1005e218 <__arm_cp.11_0>)
1005e212:	6800      	ldr	r0, [r0, #0]
1005e214:	8b00      	ldrh	r0, [r0, #24]
1005e216:	4770      	bx	lr

1005e218 <__arm_cp.11_0>:
1005e218:	20001174 	.word	0x20001174

1005e21c <LL_link_is_arg_in_range>:
1005e21c:	4290      	cmp	r0, r2
1005e21e:	d801      	bhi.n	1005e224 <LL_link_is_arg_in_range+0x8>
1005e220:	4288      	cmp	r0, r1
1005e222:	d201      	bcs.n	1005e228 <LL_link_is_arg_in_range+0xc>
1005e224:	2012      	movs	r0, #18
1005e226:	4770      	bx	lr
1005e228:	2000      	movs	r0, #0
1005e22a:	4770      	bx	lr

1005e22c <Data_Len_Update_Offline_Processing_ucfg_weak>:
1005e22c:	2000      	movs	r0, #0
1005e22e:	4770      	bx	lr

1005e230 <llc_timers_callback_wrapper>:
1005e230:	b580      	push	{r7, lr}
1005e232:	6940      	ldr	r0, [r0, #20]
1005e234:	4901      	ldr	r1, [pc, #4]	@ (1005e23c <__arm_cp.4_0>)
1005e236:	f004 f868 	bl	1006230a <cst_sharedCallback>
1005e23a:	bd80      	pop	{r7, pc}

1005e23c <__arm_cp.4_0>:
1005e23c:	1005e241 	.word	0x1005e241

1005e240 <llc_timers_callback>:
1005e240:	b580      	push	{r7, lr}
1005e242:	4903      	ldr	r1, [pc, #12]	@ (1005e250 <__arm_cp.5_0>)
1005e244:	7ac9      	ldrb	r1, [r1, #11]
1005e246:	4281      	cmp	r1, r0
1005e248:	d901      	bls.n	1005e24e <llc_timers_callback+0xe>
1005e24a:	f7fd ff69 	bl	1005c120 <LLC_authenticated_payload_timeout_cb>
1005e24e:	bd80      	pop	{r7, pc}

1005e250 <__arm_cp.5_0>:
1005e250:	20001188 	.word	0x20001188

1005e254 <LL_init_ucfg_weak>:
1005e254:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e256:	b091      	sub	sp, #68	@ 0x44
1005e258:	9305      	str	r3, [sp, #20]
1005e25a:	920b      	str	r2, [sp, #44]	@ 0x2c
1005e25c:	910d      	str	r1, [sp, #52]	@ 0x34
1005e25e:	900c      	str	r0, [sp, #48]	@ 0x30
1005e260:	48a8      	ldr	r0, [pc, #672]	@ (1005e504 <__arm_cp.6_0>)
1005e262:	7f01      	ldrb	r1, [r0, #28]
1005e264:	9108      	str	r1, [sp, #32]
1005e266:	7ec1      	ldrb	r1, [r0, #27]
1005e268:	9109      	str	r1, [sp, #36]	@ 0x24
1005e26a:	7e81      	ldrb	r1, [r0, #26]
1005e26c:	9107      	str	r1, [sp, #28]
1005e26e:	7ac1      	ldrb	r1, [r0, #11]
1005e270:	910a      	str	r1, [sp, #40]	@ 0x28
1005e272:	7fc5      	ldrb	r5, [r0, #31]
1005e274:	2601      	movs	r6, #1
1005e276:	21e0      	movs	r1, #224	@ 0xe0
1005e278:	4ca3      	ldr	r4, [pc, #652]	@ (1005e508 <__arm_cp.6_1>)
1005e27a:	4630      	mov	r0, r6
1005e27c:	47a0      	blx	r4
1005e27e:	4fa3      	ldr	r7, [pc, #652]	@ (1005e50c <__arm_cp.6_2>)
1005e280:	6038      	str	r0, [r7, #0]
1005e282:	2158      	movs	r1, #88	@ 0x58
1005e284:	4630      	mov	r0, r6
1005e286:	47a0      	blx	r4
1005e288:	6839      	ldr	r1, [r7, #0]
1005e28a:	2294      	movs	r2, #148	@ 0x94
1005e28c:	9206      	str	r2, [sp, #24]
1005e28e:	5088      	str	r0, [r1, r2]
1005e290:	4628      	mov	r0, r5
1005e292:	f007 fba3 	bl	100659dc <llc_wl_mem_allocate>
1005e296:	2107      	movs	r1, #7
1005e298:	4029      	ands	r1, r5
1005e29a:	9805      	ldr	r0, [sp, #20]
1005e29c:	f007 fbb2 	bl	10065a04 <llc_priv_mem_allocate>
1005e2a0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005e2a2:	9005      	str	r0, [sp, #20]
1005e2a4:	9001      	str	r0, [sp, #4]
1005e2a6:	981c      	ldr	r0, [sp, #112]	@ 0x70
1005e2a8:	9000      	str	r0, [sp, #0]
1005e2aa:	ab19      	add	r3, sp, #100	@ 0x64
1005e2ac:	cb0e      	ldmia	r3, {r1, r2, r3}
1005e2ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005e2b0:	9104      	str	r1, [sp, #16]
1005e2b2:	930d      	str	r3, [sp, #52]	@ 0x34
1005e2b4:	f7f3 fd9f 	bl	10051df6 <llc_conn_mem_allocate_ucfg>
1005e2b8:	252c      	movs	r5, #44	@ 0x2c
1005e2ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005e2bc:	4629      	mov	r1, r5
1005e2be:	47a0      	blx	r4
1005e2c0:	6839      	ldr	r1, [r7, #0]
1005e2c2:	229c      	movs	r2, #156	@ 0x9c
1005e2c4:	5088      	str	r0, [r1, r2]
1005e2c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005e2c8:	2901      	cmp	r1, #1
1005e2ca:	d000      	beq.n	1005e2ce <LL_init_ucfg_weak+0x7a>
1005e2cc:	9607      	str	r6, [sp, #28]
1005e2ce:	2000      	movs	r0, #0
1005e2d0:	2901      	cmp	r1, #1
1005e2d2:	d000      	beq.n	1005e2d6 <LL_init_ucfg_weak+0x82>
1005e2d4:	9009      	str	r0, [sp, #36]	@ 0x24
1005e2d6:	2901      	cmp	r1, #1
1005e2d8:	d000      	beq.n	1005e2dc <LL_init_ucfg_weak+0x88>
1005e2da:	9008      	str	r0, [sp, #32]
1005e2dc:	2041      	movs	r0, #65	@ 0x41
1005e2de:	0086      	lsls	r6, r0, #2
1005e2e0:	2901      	cmp	r1, #1
1005e2e2:	d109      	bne.n	1005e2f8 <LL_init_ucfg_weak+0xa4>
1005e2e4:	4631      	mov	r1, r6
1005e2e6:	3120      	adds	r1, #32
1005e2e8:	2001      	movs	r0, #1
1005e2ea:	f000 fe2f 	bl	1005ef4c <csmem_mem_0_assign>
1005e2ee:	4987      	ldr	r1, [pc, #540]	@ (1005e50c <__arm_cp.6_2>)
1005e2f0:	6809      	ldr	r1, [r1, #0]
1005e2f2:	228c      	movs	r2, #140	@ 0x8c
1005e2f4:	5088      	str	r0, [r1, r2]
1005e2f6:	e036      	b.n	1005e366 <LL_init_ucfg_weak+0x112>
1005e2f8:	2125      	movs	r1, #37	@ 0x25
1005e2fa:	4882      	ldr	r0, [pc, #520]	@ (1005e504 <__arm_cp.6_0>)
1005e2fc:	910a      	str	r1, [sp, #40]	@ 0x28
1005e2fe:	5c41      	ldrb	r1, [r0, r1]
1005e300:	4630      	mov	r0, r6
1005e302:	3020      	adds	r0, #32
1005e304:	2900      	cmp	r1, #0
1005e306:	d001      	beq.n	1005e30c <LL_init_ucfg_weak+0xb8>
1005e308:	4601      	mov	r1, r0
1005e30a:	e000      	b.n	1005e30e <LL_init_ucfg_weak+0xba>
1005e30c:	2144      	movs	r1, #68	@ 0x44
1005e30e:	462c      	mov	r4, r5
1005e310:	2726      	movs	r7, #38	@ 0x26
1005e312:	4a7c      	ldr	r2, [pc, #496]	@ (1005e504 <__arm_cp.6_0>)
1005e314:	5dd2      	ldrb	r2, [r2, r7]
1005e316:	2a00      	cmp	r2, #0
1005e318:	d000      	beq.n	1005e31c <LL_init_ucfg_weak+0xc8>
1005e31a:	4601      	mov	r1, r0
1005e31c:	2529      	movs	r5, #41	@ 0x29
1005e31e:	4a79      	ldr	r2, [pc, #484]	@ (1005e504 <__arm_cp.6_0>)
1005e320:	5d52      	ldrb	r2, [r2, r5]
1005e322:	2a00      	cmp	r2, #0
1005e324:	d000      	beq.n	1005e328 <LL_init_ucfg_weak+0xd4>
1005e326:	4601      	mov	r1, r0
1005e328:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005e32a:	2a01      	cmp	r2, #1
1005e32c:	d100      	bne.n	1005e330 <LL_init_ucfg_weak+0xdc>
1005e32e:	4601      	mov	r1, r0
1005e330:	2001      	movs	r0, #1
1005e332:	f000 fe0b 	bl	1005ef4c <csmem_mem_0_assign>
1005e336:	4975      	ldr	r1, [pc, #468]	@ (1005e50c <__arm_cp.6_2>)
1005e338:	6809      	ldr	r1, [r1, #0]
1005e33a:	228c      	movs	r2, #140	@ 0x8c
1005e33c:	5088      	str	r0, [r1, r2]
1005e33e:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005e340:	2801      	cmp	r0, #1
1005e342:	4631      	mov	r1, r6
1005e344:	d010      	beq.n	1005e368 <LL_init_ucfg_weak+0x114>
1005e346:	486f      	ldr	r0, [pc, #444]	@ (1005e504 <__arm_cp.6_0>)
1005e348:	5d40      	ldrb	r0, [r0, r5]
1005e34a:	2800      	cmp	r0, #0
1005e34c:	4631      	mov	r1, r6
1005e34e:	d10b      	bne.n	1005e368 <LL_init_ucfg_weak+0x114>
1005e350:	486c      	ldr	r0, [pc, #432]	@ (1005e504 <__arm_cp.6_0>)
1005e352:	5dc0      	ldrb	r0, [r0, r7]
1005e354:	2800      	cmp	r0, #0
1005e356:	4631      	mov	r1, r6
1005e358:	d106      	bne.n	1005e368 <LL_init_ucfg_weak+0x114>
1005e35a:	486a      	ldr	r0, [pc, #424]	@ (1005e504 <__arm_cp.6_0>)
1005e35c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005e35e:	5c40      	ldrb	r0, [r0, r1]
1005e360:	2800      	cmp	r0, #0
1005e362:	4621      	mov	r1, r4
1005e364:	d000      	beq.n	1005e368 <LL_init_ucfg_weak+0x114>
1005e366:	4631      	mov	r1, r6
1005e368:	9818      	ldr	r0, [sp, #96]	@ 0x60
1005e36a:	900a      	str	r0, [sp, #40]	@ 0x28
1005e36c:	9816      	ldr	r0, [sp, #88]	@ 0x58
1005e36e:	9002      	str	r0, [sp, #8]
1005e370:	2701      	movs	r7, #1
1005e372:	4638      	mov	r0, r7
1005e374:	4c64      	ldr	r4, [pc, #400]	@ (1005e508 <__arm_cp.6_1>)
1005e376:	47a0      	blx	r4
1005e378:	4d64      	ldr	r5, [pc, #400]	@ (1005e50c <__arm_cp.6_2>)
1005e37a:	6829      	ldr	r1, [r5, #0]
1005e37c:	2290      	movs	r2, #144	@ 0x90
1005e37e:	5088      	str	r0, [r1, r2]
1005e380:	2110      	movs	r1, #16
1005e382:	4638      	mov	r0, r7
1005e384:	47a0      	blx	r4
1005e386:	6829      	ldr	r1, [r5, #0]
1005e388:	2298      	movs	r2, #152	@ 0x98
1005e38a:	9203      	str	r2, [sp, #12]
1005e38c:	5088      	str	r0, [r1, r2]
1005e38e:	2104      	movs	r1, #4
1005e390:	4638      	mov	r0, r7
1005e392:	47a0      	blx	r4
1005e394:	6829      	ldr	r1, [r5, #0]
1005e396:	22a0      	movs	r2, #160	@ 0xa0
1005e398:	5088      	str	r0, [r1, r2]
1005e39a:	2134      	movs	r1, #52	@ 0x34
1005e39c:	970c      	str	r7, [sp, #48]	@ 0x30
1005e39e:	4638      	mov	r0, r7
1005e3a0:	47a0      	blx	r4
1005e3a2:	6829      	ldr	r1, [r5, #0]
1005e3a4:	22a4      	movs	r2, #164	@ 0xa4
1005e3a6:	5088      	str	r0, [r1, r2]
1005e3a8:	9807      	ldr	r0, [sp, #28]
1005e3aa:	b2c5      	uxtb	r5, r0
1005e3ac:	1f31      	subs	r1, r6, #4
1005e3ae:	4628      	mov	r0, r5
1005e3b0:	47a0      	blx	r4
1005e3b2:	4606      	mov	r6, r0
1005e3b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
1005e3b6:	2c01      	cmp	r4, #1
1005e3b8:	d105      	bne.n	1005e3c6 <LL_init_ucfg_weak+0x172>
1005e3ba:	215c      	movs	r1, #92	@ 0x5c
1005e3bc:	4628      	mov	r0, r5
1005e3be:	f000 fdc5 	bl	1005ef4c <csmem_mem_0_assign>
1005e3c2:	4602      	mov	r2, r0
1005e3c4:	e000      	b.n	1005e3c8 <LL_init_ucfg_weak+0x174>
1005e3c6:	2200      	movs	r2, #0
1005e3c8:	4628      	mov	r0, r5
1005e3ca:	4631      	mov	r1, r6
1005e3cc:	f7fe feea 	bl	1005d1a4 <EADV_init>
1005e3d0:	ab10      	add	r3, sp, #64	@ 0x40
1005e3d2:	9808      	ldr	r0, [sp, #32]
1005e3d4:	70d8      	strb	r0, [r3, #3]
1005e3d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e3d8:	7098      	strb	r0, [r3, #2]
1005e3da:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
1005e3dc:	705f      	strb	r7, [r3, #1]
1005e3de:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005e3e0:	7018      	strb	r0, [r3, #0]
1005e3e2:	4620      	mov	r0, r4
1005e3e4:	9e05      	ldr	r6, [sp, #20]
1005e3e6:	4631      	mov	r1, r6
1005e3e8:	462a      	mov	r2, r5
1005e3ea:	f007 fb07 	bl	100659fc <llc_padv_mem_allocate_ucfg_weak>
1005e3ee:	9d02      	ldr	r5, [sp, #8]
1005e3f0:	4628      	mov	r0, r5
1005e3f2:	4621      	mov	r1, r4
1005e3f4:	f7fc fcd5 	bl	1005ada2 <llc_scan_mem_allocate_ucfg_weak>
1005e3f8:	4628      	mov	r0, r5
1005e3fa:	4621      	mov	r1, r4
1005e3fc:	4632      	mov	r2, r6
1005e3fe:	f7fc fcaa 	bl	1005ad56 <llc_pscan_mem_allocate_ucfg_weak>
1005e402:	4628      	mov	r0, r5
1005e404:	4621      	mov	r1, r4
1005e406:	4632      	mov	r2, r6
1005e408:	463b      	mov	r3, r7
1005e40a:	f007 faf9 	bl	10065a00 <llc_past_mem_allocate_ucfg_weak>
1005e40e:	9700      	str	r7, [sp, #0]
1005e410:	4628      	mov	r0, r5
1005e412:	4621      	mov	r1, r4
1005e414:	4632      	mov	r2, r6
1005e416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005e418:	f7fc fca0 	bl	1005ad5c <llc_pscan_wr_mem_allocate_ucfg_weak>
1005e41c:	f7fc fc75 	bl	1005ad0a <llc_iso_cmn_mem_alloc_ucfg_weak>
1005e420:	2c01      	cmp	r4, #1
1005e422:	d107      	bne.n	1005e434 <LL_init_ucfg_weak+0x1e0>
1005e424:	2e01      	cmp	r6, #1
1005e426:	d105      	bne.n	1005e434 <LL_init_ucfg_weak+0x1e0>
1005e428:	f006 fc1a 	bl	10064c60 <llc_big_brc_mem_alloc_ucfg_weak>
1005e42c:	2d01      	cmp	r5, #1
1005e42e:	d101      	bne.n	1005e434 <LL_init_ucfg_weak+0x1e0>
1005e430:	f006 fc17 	bl	10064c62 <llc_big_sync_mem_alloc_ucfg_weak>
1005e434:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005e436:	2801      	cmp	r0, #1
1005e438:	d101      	bne.n	1005e43e <LL_init_ucfg_weak+0x1ea>
1005e43a:	f006 fc13 	bl	10064c64 <llc_cig_cmn_mem_alloc_ucfg_weak>
1005e43e:	f7fc fc5d 	bl	1005acfc <llc_isoal_mem_alloc_ucfg_weak>
1005e442:	9804      	ldr	r0, [sp, #16]
1005e444:	4629      	mov	r1, r5
1005e446:	4622      	mov	r2, r4
1005e448:	4633      	mov	r3, r6
1005e44a:	f7fe fd6c 	bl	1005cf26 <llc_cte_mem_allocate_ucfg_weak>
1005e44e:	4f2d      	ldr	r7, [pc, #180]	@ (1005e504 <__arm_cp.6_0>)
1005e450:	7af8      	ldrb	r0, [r7, #11]
1005e452:	1c41      	adds	r1, r0, #1
1005e454:	4d2e      	ldr	r5, [pc, #184]	@ (1005e510 <__arm_cp.6_3>)
1005e456:	4628      	mov	r0, r5
1005e458:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005e45a:	f000 fd65 	bl	1005ef28 <csmem_mem_assign>
1005e45e:	4f2b      	ldr	r7, [pc, #172]	@ (1005e50c <__arm_cp.6_2>)
1005e460:	6839      	ldr	r1, [r7, #0]
1005e462:	22c8      	movs	r2, #200	@ 0xc8
1005e464:	5088      	str	r0, [r1, r2]
1005e466:	4827      	ldr	r0, [pc, #156]	@ (1005e504 <__arm_cp.6_0>)
1005e468:	7ac1      	ldrb	r1, [r0, #11]
1005e46a:	2202      	movs	r2, #2
1005e46c:	4628      	mov	r0, r5
1005e46e:	f000 fd5b 	bl	1005ef28 <csmem_mem_assign>
1005e472:	6839      	ldr	r1, [r7, #0]
1005e474:	460a      	mov	r2, r1
1005e476:	3298      	adds	r2, #152	@ 0x98
1005e478:	6350      	str	r0, [r2, #52]	@ 0x34
1005e47a:	9803      	ldr	r0, [sp, #12]
1005e47c:	5808      	ldr	r0, [r1, r0]
1005e47e:	6078      	str	r0, [r7, #4]
1005e480:	6850      	ldr	r0, [r2, #4]
1005e482:	60b8      	str	r0, [r7, #8]
1005e484:	4620      	mov	r0, r4
1005e486:	f7fc fc8b 	bl	1005ada0 <llc_scan_init_ucfg_weak>
1005e48a:	f7fc fc63 	bl	1005ad54 <llc_pscan_init_ucfg_weak>
1005e48e:	f000 f8e1 	bl	1005e654 <LL_sched_init>
1005e492:	f7fe fd4d 	bl	1005cf30 <LL_dtm_init>
1005e496:	f007 fab2 	bl	100659fe <llc_padv_init_ucfg_weak>
1005e49a:	f7fe fd43 	bl	1005cf24 <llc_cte_init_ucfg_weak>
1005e49e:	f7f9 f975 	bl	1005778c <HCI_Init>
1005e4a2:	f7e7 fdb6 	bl	10046012 <BLEPLAT_GetDefaultPALevel>
1005e4a6:	6839      	ldr	r1, [r7, #0]
1005e4a8:	2400      	movs	r4, #0
1005e4aa:	728c      	strb	r4, [r1, #10]
1005e4ac:	7248      	strb	r0, [r1, #9]
1005e4ae:	4620      	mov	r0, r4
1005e4b0:	f7e7 fdb7 	bl	10046022 <BLEPLAT_SetHighPower>
1005e4b4:	f7f4 fc86 	bl	10052dc4 <ble_HAL_Init>
1005e4b8:	6838      	ldr	r0, [r7, #0]
1005e4ba:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1005e4bc:	f7fd fef1 	bl	1005c2a2 <LLC_pcl_hal_cntxt_init_ucfg_weak>
1005e4c0:	6838      	ldr	r0, [r7, #0]
1005e4c2:	9d06      	ldr	r5, [sp, #24]
1005e4c4:	5940      	ldr	r0, [r0, r5]
1005e4c6:	300c      	adds	r0, #12
1005e4c8:	f004 f8fb 	bl	100626c2 <addr8_list_clear>
1005e4cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005e4ce:	4630      	mov	r0, r6
1005e4d0:	f7fc fc28 	bl	1005ad24 <llc_priv_init_ucfg_weak>
1005e4d4:	6838      	ldr	r0, [r7, #0]
1005e4d6:	5941      	ldr	r1, [r0, r5]
1005e4d8:	2240      	movs	r2, #64	@ 0x40
1005e4da:	548c      	strb	r4, [r1, r2]
1005e4dc:	4a09      	ldr	r2, [pc, #36]	@ (1005e504 <__arm_cp.6_0>)
1005e4de:	8b12      	ldrh	r2, [r2, #24]
1005e4e0:	8302      	strh	r2, [r0, #24]
1005e4e2:	201f      	movs	r0, #31
1005e4e4:	900f      	str	r0, [sp, #60]	@ 0x3c
1005e4e6:	43e0      	mvns	r0, r4
1005e4e8:	900e      	str	r0, [sp, #56]	@ 0x38
1005e4ea:	3148      	adds	r1, #72	@ 0x48
1005e4ec:	a80e      	add	r0, sp, #56	@ 0x38
1005e4ee:	2205      	movs	r2, #5
1005e4f0:	f003 ff5c 	bl	100623ac <char_copy>
1005e4f4:	6838      	ldr	r0, [r7, #0]
1005e4f6:	5940      	ldr	r0, [r0, r5]
1005e4f8:	02f1      	lsls	r1, r6, #11
1005e4fa:	2254      	movs	r2, #84	@ 0x54
1005e4fc:	5281      	strh	r1, [r0, r2]
1005e4fe:	b011      	add	sp, #68	@ 0x44
1005e500:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e502:	46c0      	nop			@ (mov r8, r8)

1005e504 <__arm_cp.6_0>:
1005e504:	20001188 	.word	0x20001188

1005e508 <__arm_cp.6_1>:
1005e508:	1005ef4d 	.word	0x1005ef4d

1005e50c <__arm_cp.6_2>:
1005e50c:	20001174 	.word	0x20001174

1005e510 <__arm_cp.6_3>:
1005e510:	20001184 	.word	0x20001184

1005e514 <LL_init>:
1005e514:	b5b0      	push	{r4, r5, r7, lr}
1005e516:	b088      	sub	sp, #32
1005e518:	9c12      	ldr	r4, [sp, #72]	@ 0x48
1005e51a:	9406      	str	r4, [sp, #24]
1005e51c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005e51e:	9405      	str	r4, [sp, #20]
1005e520:	9d10      	ldr	r5, [sp, #64]	@ 0x40
1005e522:	9504      	str	r5, [sp, #16]
1005e524:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005e526:	9503      	str	r5, [sp, #12]
1005e528:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1005e52a:	9502      	str	r5, [sp, #8]
1005e52c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005e52e:	9501      	str	r5, [sp, #4]
1005e530:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005e532:	9500      	str	r5, [sp, #0]
1005e534:	f7ff fe8e 	bl	1005e254 <LL_init_ucfg_weak>
1005e538:	2c01      	cmp	r4, #1
1005e53a:	d110      	bne.n	1005e55e <LL_init+0x4a>
1005e53c:	f7fc fc0c 	bl	1005ad58 <llc_pscan_wr_init_ucfg_weak>
1005e540:	f7fa f864 	bl	1005860c <llc_conn_init>
1005e544:	4807      	ldr	r0, [pc, #28]	@ (1005e564 <__arm_cp.7_0>)
1005e546:	7ac1      	ldrb	r1, [r0, #11]
1005e548:	4807      	ldr	r0, [pc, #28]	@ (1005e568 <__arm_cp.7_1>)
1005e54a:	6800      	ldr	r0, [r0, #0]
1005e54c:	30a8      	adds	r0, #168	@ 0xa8
1005e54e:	4a07      	ldr	r2, [pc, #28]	@ (1005e56c <__arm_cp.7_2>)
1005e550:	2305      	movs	r3, #5
1005e552:	f003 fe01 	bl	10062158 <CST_init>
1005e556:	f7f4 fcab 	bl	10052eb0 <Acl_Init>
1005e55a:	f7fc fd33 	bl	1005afc4 <LLC_chc_ll_cntxt_init_ucfg_weak>
1005e55e:	b008      	add	sp, #32
1005e560:	bdb0      	pop	{r4, r5, r7, pc}
1005e562:	46c0      	nop			@ (mov r8, r8)

1005e564 <__arm_cp.7_0>:
1005e564:	20001188 	.word	0x20001188

1005e568 <__arm_cp.7_1>:
1005e568:	20001174 	.word	0x20001174

1005e56c <__arm_cp.7_2>:
1005e56c:	1005e231 	.word	0x1005e231

1005e570 <Is_Address_Initialized>:
1005e570:	2100      	movs	r1, #0
1005e572:	460a      	mov	r2, r1
1005e574:	2906      	cmp	r1, #6
1005e576:	d005      	beq.n	1005e584 <Is_Address_Initialized+0x14>
1005e578:	5c43      	ldrb	r3, [r0, r1]
1005e57a:	2b00      	cmp	r3, #0
1005e57c:	d000      	beq.n	1005e580 <Is_Address_Initialized+0x10>
1005e57e:	2201      	movs	r2, #1
1005e580:	1c49      	adds	r1, r1, #1
1005e582:	e7f7      	b.n	1005e574 <Is_Address_Initialized+0x4>
1005e584:	b2d0      	uxtb	r0, r2
1005e586:	4770      	bx	lr

1005e588 <get_rf_rx_path_compensation_db>:
1005e588:	4804      	ldr	r0, [pc, #16]	@ (1005e59c <__arm_cp.10_0>)
1005e58a:	6800      	ldr	r0, [r0, #0]
1005e58c:	215e      	movs	r1, #94	@ 0x5e
1005e58e:	5e40      	ldrsh	r0, [r0, r1]
1005e590:	210d      	movs	r1, #13
1005e592:	4341      	muls	r1, r0
1005e594:	3140      	adds	r1, #64	@ 0x40
1005e596:	11c8      	asrs	r0, r1, #7
1005e598:	4770      	bx	lr
1005e59a:	46c0      	nop			@ (mov r8, r8)

1005e59c <__arm_cp.10_0>:
1005e59c:	20001174 	.word	0x20001174

1005e5a0 <LL_get_tx_common_buffer_p>:
1005e5a0:	4802      	ldr	r0, [pc, #8]	@ (1005e5ac <__arm_cp.11_0>)
1005e5a2:	6800      	ldr	r0, [r0, #0]
1005e5a4:	218c      	movs	r1, #140	@ 0x8c
1005e5a6:	5840      	ldr	r0, [r0, r1]
1005e5a8:	4770      	bx	lr
1005e5aa:	46c0      	nop			@ (mov r8, r8)

1005e5ac <__arm_cp.11_0>:
1005e5ac:	20001174 	.word	0x20001174

1005e5b0 <LL_get_rx_common_buffer_p>:
1005e5b0:	4802      	ldr	r0, [pc, #8]	@ (1005e5bc <__arm_cp.12_0>)
1005e5b2:	6800      	ldr	r0, [r0, #0]
1005e5b4:	2190      	movs	r1, #144	@ 0x90
1005e5b6:	5840      	ldr	r0, [r0, r1]
1005e5b8:	4770      	bx	lr
1005e5ba:	46c0      	nop			@ (mov r8, r8)

1005e5bc <__arm_cp.12_0>:
1005e5bc:	20001174 	.word	0x20001174

1005e5c0 <LL_get_control_pdu_size>:
1005e5c0:	2800      	cmp	r0, #0
1005e5c2:	d001      	beq.n	1005e5c8 <LL_get_control_pdu_size+0x8>
1005e5c4:	2030      	movs	r0, #48	@ 0x30
1005e5c6:	4770      	bx	lr
1005e5c8:	2020      	movs	r0, #32
1005e5ca:	4770      	bx	lr

1005e5cc <llc_get_linkms_cntxt_p>:
1005e5cc:	4802      	ldr	r0, [pc, #8]	@ (1005e5d8 <__arm_cp.15_0>)
1005e5ce:	6800      	ldr	r0, [r0, #0]
1005e5d0:	2194      	movs	r1, #148	@ 0x94
1005e5d2:	5840      	ldr	r0, [r0, r1]
1005e5d4:	4770      	bx	lr
1005e5d6:	46c0      	nop			@ (mov r8, r8)

1005e5d8 <__arm_cp.15_0>:
1005e5d8:	20001174 	.word	0x20001174

1005e5dc <llc_get_next_free_conn_handle>:
1005e5dc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e5de:	4815      	ldr	r0, [pc, #84]	@ (1005e634 <__arm_cp.16_0>)
1005e5e0:	6800      	ldr	r0, [r0, #0]
1005e5e2:	2194      	movs	r1, #148	@ 0x94
1005e5e4:	9102      	str	r1, [sp, #8]
1005e5e6:	5841      	ldr	r1, [r0, r1]
1005e5e8:	2054      	movs	r0, #84	@ 0x54
1005e5ea:	9001      	str	r0, [sp, #4]
1005e5ec:	5a08      	ldrh	r0, [r1, r0]
1005e5ee:	6bcf      	ldr	r7, [r1, #60]	@ 0x3c
1005e5f0:	4c12      	ldr	r4, [pc, #72]	@ (1005e63c <__arm_cp.16_2>)
1005e5f2:	1c45      	adds	r5, r0, #1
1005e5f4:	b2a9      	uxth	r1, r5
1005e5f6:	0a09      	lsrs	r1, r1, #8
1005e5f8:	290e      	cmp	r1, #14
1005e5fa:	d901      	bls.n	1005e600 <llc_get_next_free_conn_handle+0x24>
1005e5fc:	490e      	ldr	r1, [pc, #56]	@ (1005e638 <__arm_cp.16_1>)
1005e5fe:	1845      	adds	r5, r0, r1
1005e600:	2f00      	cmp	r7, #0
1005e602:	d00f      	beq.n	1005e624 <llc_get_next_free_conn_handle+0x48>
1005e604:	2600      	movs	r6, #0
1005e606:	6820      	ldr	r0, [r4, #0]
1005e608:	2134      	movs	r1, #52	@ 0x34
1005e60a:	5c41      	ldrb	r1, [r0, r1]
1005e60c:	b2f0      	uxtb	r0, r6
1005e60e:	4288      	cmp	r0, r1
1005e610:	d208      	bcs.n	1005e624 <llc_get_next_free_conn_handle+0x48>
1005e612:	f7f9 ffb3 	bl	1005857c <llc_conn_get_cntxt_per_p>
1005e616:	1c76      	adds	r6, r6, #1
1005e618:	b2a9      	uxth	r1, r5
1005e61a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005e61c:	4281      	cmp	r1, r0
1005e61e:	d1f2      	bne.n	1005e606 <llc_get_next_free_conn_handle+0x2a>
1005e620:	4628      	mov	r0, r5
1005e622:	e7e6      	b.n	1005e5f2 <llc_get_next_free_conn_handle+0x16>
1005e624:	4803      	ldr	r0, [pc, #12]	@ (1005e634 <__arm_cp.16_0>)
1005e626:	6800      	ldr	r0, [r0, #0]
1005e628:	9902      	ldr	r1, [sp, #8]
1005e62a:	5840      	ldr	r0, [r0, r1]
1005e62c:	9901      	ldr	r1, [sp, #4]
1005e62e:	5245      	strh	r5, [r0, r1]
1005e630:	b2a8      	uxth	r0, r5
1005e632:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005e634 <__arm_cp.16_0>:
1005e634:	20001174 	.word	0x20001174

1005e638 <__arm_cp.16_1>:
1005e638:	fffff102 	.word	0xfffff102

1005e63c <__arm_cp.16_2>:
1005e63c:	20001120 	.word	0x20001120

1005e640 <LL_sched_time_t1_ge_t2>:
1005e640:	43c0      	mvns	r0, r0
1005e642:	1840      	adds	r0, r0, r1
1005e644:	0fc0      	lsrs	r0, r0, #31
1005e646:	4770      	bx	lr

1005e648 <LL_sched_engine_return_actual_scheduler_margin>:
1005e648:	4801      	ldr	r0, [pc, #4]	@ (1005e650 <__arm_cp.2_0>)
1005e64a:	6800      	ldr	r0, [r0, #0]
1005e64c:	6880      	ldr	r0, [r0, #8]
1005e64e:	4770      	bx	lr

1005e650 <__arm_cp.2_0>:
1005e650:	20001178 	.word	0x20001178

1005e654 <LL_sched_init>:
1005e654:	4809      	ldr	r0, [pc, #36]	@ (1005e67c <__arm_cp.4_0>)
1005e656:	7ac0      	ldrb	r0, [r0, #11]
1005e658:	4909      	ldr	r1, [pc, #36]	@ (1005e680 <__arm_cp.4_1>)
1005e65a:	6809      	ldr	r1, [r1, #0]
1005e65c:	3112      	adds	r1, #18
1005e65e:	2800      	cmp	r0, #0
1005e660:	d004      	beq.n	1005e66c <LL_sched_init+0x18>
1005e662:	2200      	movs	r2, #0
1005e664:	800a      	strh	r2, [r1, #0]
1005e666:	312c      	adds	r1, #44	@ 0x2c
1005e668:	1e40      	subs	r0, r0, #1
1005e66a:	e7f8      	b.n	1005e65e <LL_sched_init+0xa>
1005e66c:	4805      	ldr	r0, [pc, #20]	@ (1005e684 <__arm_cp.4_2>)
1005e66e:	6800      	ldr	r0, [r0, #0]
1005e670:	2100      	movs	r1, #0
1005e672:	73c1      	strb	r1, [r0, #15]
1005e674:	21ff      	movs	r1, #255	@ 0xff
1005e676:	0209      	lsls	r1, r1, #8
1005e678:	8181      	strh	r1, [r0, #12]
1005e67a:	4770      	bx	lr

1005e67c <__arm_cp.4_0>:
1005e67c:	20001188 	.word	0x20001188

1005e680 <__arm_cp.4_1>:
1005e680:	2000117c 	.word	0x2000117c

1005e684 <__arm_cp.4_2>:
1005e684:	20001178 	.word	0x20001178

1005e688 <LL_sched_set_anchor>:
1005e688:	222c      	movs	r2, #44	@ 0x2c
1005e68a:	4342      	muls	r2, r0
1005e68c:	4801      	ldr	r0, [pc, #4]	@ (1005e694 <__arm_cp.5_0>)
1005e68e:	6800      	ldr	r0, [r0, #0]
1005e690:	5081      	str	r1, [r0, r2]
1005e692:	4770      	bx	lr

1005e694 <__arm_cp.5_0>:
1005e694:	2000117c 	.word	0x2000117c

1005e698 <LL_sched_set_taskslot_length_anchor>:
1005e698:	232c      	movs	r3, #44	@ 0x2c
1005e69a:	4343      	muls	r3, r0
1005e69c:	4802      	ldr	r0, [pc, #8]	@ (1005e6a8 <__arm_cp.6_0>)
1005e69e:	6800      	ldr	r0, [r0, #0]
1005e6a0:	50c2      	str	r2, [r0, r3]
1005e6a2:	18c0      	adds	r0, r0, r3
1005e6a4:	6041      	str	r1, [r0, #4]
1005e6a6:	4770      	bx	lr

1005e6a8 <__arm_cp.6_0>:
1005e6a8:	2000117c 	.word	0x2000117c

1005e6ac <LL_sched_set_cancel_request>:
1005e6ac:	28ff      	cmp	r0, #255	@ 0xff
1005e6ae:	d00b      	beq.n	1005e6c8 <LL_sched_set_cancel_request+0x1c>
1005e6b0:	212c      	movs	r1, #44	@ 0x2c
1005e6b2:	4341      	muls	r1, r0
1005e6b4:	4805      	ldr	r0, [pc, #20]	@ (1005e6cc <__arm_cp.9_0>)
1005e6b6:	6800      	ldr	r0, [r0, #0]
1005e6b8:	1840      	adds	r0, r0, r1
1005e6ba:	7c81      	ldrb	r1, [r0, #18]
1005e6bc:	2908      	cmp	r1, #8
1005e6be:	d001      	beq.n	1005e6c4 <LL_sched_set_cancel_request+0x18>
1005e6c0:	2110      	movs	r1, #16
1005e6c2:	e000      	b.n	1005e6c6 <LL_sched_set_cancel_request+0x1a>
1005e6c4:	2120      	movs	r1, #32
1005e6c6:	7481      	strb	r1, [r0, #18]
1005e6c8:	4770      	bx	lr
1005e6ca:	46c0      	nop			@ (mov r8, r8)

1005e6cc <__arm_cp.9_0>:
1005e6cc:	2000117c 	.word	0x2000117c

1005e6d0 <LL_sched_enable_taskslot>:
1005e6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e6d2:	b088      	sub	sp, #32
1005e6d4:	9307      	str	r3, [sp, #28]
1005e6d6:	272c      	movs	r7, #44	@ 0x2c
1005e6d8:	4347      	muls	r7, r0
1005e6da:	481a      	ldr	r0, [pc, #104]	@ (1005e744 <__arm_cp.10_0>)
1005e6dc:	6806      	ldr	r6, [r0, #0]
1005e6de:	19f0      	adds	r0, r6, r7
1005e6e0:	7c84      	ldrb	r4, [r0, #18]
1005e6e2:	2c01      	cmp	r4, #1
1005e6e4:	d12b      	bne.n	1005e73e <LL_sched_enable_taskslot+0x6e>
1005e6e6:	4603      	mov	r3, r0
1005e6e8:	3312      	adds	r3, #18
1005e6ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1005e6ec:	9506      	str	r5, [sp, #24]
1005e6ee:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
1005e6f0:	9505      	str	r5, [sp, #20]
1005e6f2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1005e6f4:	9503      	str	r5, [sp, #12]
1005e6f6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
1005e6f8:	9502      	str	r5, [sp, #8]
1005e6fa:	9104      	str	r1, [sp, #16]
1005e6fc:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005e6fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005e700:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005e702:	9400      	str	r4, [sp, #0]
1005e704:	9201      	str	r2, [sp, #4]
1005e706:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005e708:	9c07      	ldr	r4, [sp, #28]
1005e70a:	6044      	str	r4, [r0, #4]
1005e70c:	6082      	str	r2, [r0, #8]
1005e70e:	9a00      	ldr	r2, [sp, #0]
1005e710:	51f2      	str	r2, [r6, r7]
1005e712:	221f      	movs	r2, #31
1005e714:	4015      	ands	r5, r2
1005e716:	7545      	strb	r5, [r0, #21]
1005e718:	4011      	ands	r1, r2
1005e71a:	7581      	strb	r1, [r0, #22]
1005e71c:	2101      	movs	r1, #1
1005e71e:	7501      	strb	r1, [r0, #20]
1005e720:	9a01      	ldr	r2, [sp, #4]
1005e722:	74c2      	strb	r2, [r0, #19]
1005e724:	8201      	strh	r1, [r0, #16]
1005e726:	9902      	ldr	r1, [sp, #8]
1005e728:	61c1      	str	r1, [r0, #28]
1005e72a:	9903      	ldr	r1, [sp, #12]
1005e72c:	6201      	str	r1, [r0, #32]
1005e72e:	9905      	ldr	r1, [sp, #20]
1005e730:	6241      	str	r1, [r0, #36]	@ 0x24
1005e732:	9906      	ldr	r1, [sp, #24]
1005e734:	6281      	str	r1, [r0, #40]	@ 0x28
1005e736:	9904      	ldr	r1, [sp, #16]
1005e738:	60c1      	str	r1, [r0, #12]
1005e73a:	2002      	movs	r0, #2
1005e73c:	7018      	strb	r0, [r3, #0]
1005e73e:	b008      	add	sp, #32
1005e740:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e742:	46c0      	nop			@ (mov r8, r8)

1005e744 <__arm_cp.10_0>:
1005e744:	2000117c 	.word	0x2000117c

1005e748 <LL_sched_is_scheduler_call_pending>:
1005e748:	b580      	push	{r7, lr}
1005e74a:	490a      	ldr	r1, [pc, #40]	@ (1005e774 <__arm_cp.11_0>)
1005e74c:	6809      	ldr	r1, [r1, #0]
1005e74e:	7b0a      	ldrb	r2, [r1, #12]
1005e750:	2a01      	cmp	r2, #1
1005e752:	d106      	bne.n	1005e762 <LL_sched_is_scheduler_call_pending+0x1a>
1005e754:	7bca      	ldrb	r2, [r1, #15]
1005e756:	2a03      	cmp	r2, #3
1005e758:	d105      	bne.n	1005e766 <LL_sched_is_scheduler_call_pending+0x1e>
1005e75a:	2000      	movs	r0, #0
1005e75c:	f7fc fb39 	bl	1005add2 <llc_scan_stop_ucfg_weak>
1005e760:	bd80      	pop	{r7, pc}
1005e762:	2000      	movs	r0, #0
1005e764:	bd80      	pop	{r7, pc}
1005e766:	6809      	ldr	r1, [r1, #0]
1005e768:	1a08      	subs	r0, r1, r0
1005e76a:	4903      	ldr	r1, [pc, #12]	@ (1005e778 <__arm_cp.11_1>)
1005e76c:	1840      	adds	r0, r0, r1
1005e76e:	0fc0      	lsrs	r0, r0, #31
1005e770:	bd80      	pop	{r7, pc}
1005e772:	46c0      	nop			@ (mov r8, r8)

1005e774 <__arm_cp.11_0>:
1005e774:	20001178 	.word	0x20001178

1005e778 <__arm_cp.11_1>:
1005e778:	fffffe0b 	.word	0xfffffe0b

1005e77c <LL_sched_anchorstretch>:
1005e77c:	4902      	ldr	r1, [pc, #8]	@ (1005e788 <__arm_cp.12_0>)
1005e77e:	6809      	ldr	r1, [r1, #0]
1005e780:	684a      	ldr	r2, [r1, #4]
1005e782:	6002      	str	r2, [r0, #0]
1005e784:	7b88      	ldrb	r0, [r1, #14]
1005e786:	4770      	bx	lr

1005e788 <__arm_cp.12_0>:
1005e788:	20001178 	.word	0x20001178

1005e78c <LL_sched_engine>:
1005e78c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e78e:	b0b3      	sub	sp, #204	@ 0xcc
1005e790:	4607      	mov	r7, r0
1005e792:	48dc      	ldr	r0, [pc, #880]	@ (1005eb04 <__arm_cp.13_0>)
1005e794:	6800      	ldr	r0, [r0, #0]
1005e796:	900b      	str	r0, [sp, #44]	@ 0x2c
1005e798:	2001      	movs	r0, #1
1005e79a:	9001      	str	r0, [sp, #4]
1005e79c:	9009      	str	r0, [sp, #36]	@ 0x24
1005e79e:	2100      	movs	r1, #0
1005e7a0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005e7a2:	7381      	strb	r1, [r0, #14]
1005e7a4:	48d8      	ldr	r0, [pc, #864]	@ (1005eb08 <__arm_cp.13_1>)
1005e7a6:	6803      	ldr	r3, [r0, #0]
1005e7a8:	910a      	str	r1, [sp, #40]	@ 0x28
1005e7aa:	7219      	strb	r1, [r3, #8]
1005e7ac:	20ff      	movs	r0, #255	@ 0xff
1005e7ae:	9008      	str	r0, [sp, #32]
1005e7b0:	3002      	adds	r0, #2
1005e7b2:	8298      	strh	r0, [r3, #20]
1005e7b4:	7c18      	ldrb	r0, [r3, #16]
1005e7b6:	21f0      	movs	r1, #240	@ 0xf0
1005e7b8:	4001      	ands	r1, r0
1005e7ba:	090a      	lsrs	r2, r1, #4
1005e7bc:	1888      	adds	r0, r1, r2
1005e7be:	7418      	strb	r0, [r3, #16]
1005e7c0:	8a59      	ldrh	r1, [r3, #18]
1005e7c2:	40d1      	lsrs	r1, r2
1005e7c4:	07c9      	lsls	r1, r1, #31
1005e7c6:	49d1      	ldr	r1, [pc, #836]	@ (1005eb0c <__arm_cp.13_2>)
1005e7c8:	6809      	ldr	r1, [r1, #0]
1005e7ca:	9107      	str	r1, [sp, #28]
1005e7cc:	9305      	str	r3, [sp, #20]
1005e7ce:	d006      	beq.n	1005e7de <LL_sched_engine+0x52>
1005e7d0:	2000      	movs	r0, #0
1005e7d2:	f003 fc63 	bl	1006209c <tsk_notify_idx>
1005e7d6:	f7e5 fb62 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005e7da:	9b05      	ldr	r3, [sp, #20]
1005e7dc:	7c18      	ldrb	r0, [r3, #16]
1005e7de:	210f      	movs	r1, #15
1005e7e0:	9102      	str	r1, [sp, #8]
1005e7e2:	4008      	ands	r0, r1
1005e7e4:	7418      	strb	r0, [r3, #16]
1005e7e6:	2196      	movs	r1, #150	@ 0x96
1005e7e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005e7ea:	4341      	muls	r1, r0
1005e7ec:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005e7ee:	9112      	str	r1, [sp, #72]	@ 0x48
1005e7f0:	6081      	str	r1, [r0, #8]
1005e7f2:	2001      	movs	r0, #1
1005e7f4:	9004      	str	r0, [sp, #16]
1005e7f6:	43c0      	mvns	r0, r0
1005e7f8:	b279      	sxtb	r1, r7
1005e7fa:	4281      	cmp	r1, r0
1005e7fc:	dc10      	bgt.n	1005e820 <LL_sched_engine+0x94>
1005e7fe:	207f      	movs	r0, #127	@ 0x7f
1005e800:	4007      	ands	r7, r0
1005e802:	252c      	movs	r5, #44	@ 0x2c
1005e804:	437d      	muls	r5, r7
1005e806:	9c07      	ldr	r4, [sp, #28]
1005e808:	1960      	adds	r0, r4, r5
1005e80a:	900a      	str	r0, [sp, #40]	@ 0x28
1005e80c:	5966      	ldr	r6, [r4, r5]
1005e80e:	f7e7 fc1f 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
1005e812:	1a30      	subs	r0, r6, r0
1005e814:	49be      	ldr	r1, [pc, #760]	@ (1005eb10 <__arm_cp.13_3>)
1005e816:	1840      	adds	r0, r0, r1
1005e818:	d500      	bpl.n	1005e81c <LL_sched_engine+0x90>
1005e81a:	e0ef      	b.n	1005e9fc <LL_sched_engine+0x270>
1005e81c:	4638      	mov	r0, r7
1005e81e:	e004      	b.n	1005e82a <LL_sched_engine+0x9e>
1005e820:	b2f8      	uxtb	r0, r7
1005e822:	28ff      	cmp	r0, #255	@ 0xff
1005e824:	d00e      	beq.n	1005e844 <LL_sched_engine+0xb8>
1005e826:	2100      	movs	r1, #0
1005e828:	910a      	str	r1, [sp, #40]	@ 0x28
1005e82a:	212c      	movs	r1, #44	@ 0x2c
1005e82c:	4341      	muls	r1, r0
1005e82e:	9807      	ldr	r0, [sp, #28]
1005e830:	1840      	adds	r0, r0, r1
1005e832:	2101      	movs	r1, #1
1005e834:	7501      	strb	r1, [r0, #20]
1005e836:	7c81      	ldrb	r1, [r0, #18]
1005e838:	2908      	cmp	r1, #8
1005e83a:	d102      	bne.n	1005e842 <LL_sched_engine+0xb6>
1005e83c:	3012      	adds	r0, #18
1005e83e:	2104      	movs	r1, #4
1005e840:	7001      	strb	r1, [r0, #0]
1005e842:	9708      	str	r7, [sp, #32]
1005e844:	f7e7 fc04 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
1005e848:	9912      	ldr	r1, [sp, #72]	@ 0x48
1005e84a:	180c      	adds	r4, r1, r0
1005e84c:	48af      	ldr	r0, [pc, #700]	@ (1005eb0c <__arm_cp.13_2>)
1005e84e:	6807      	ldr	r7, [r0, #0]
1005e850:	3728      	adds	r7, #40	@ 0x28
1005e852:	2500      	movs	r5, #0
1005e854:	4628      	mov	r0, r5
1005e856:	49af      	ldr	r1, [pc, #700]	@ (1005eb14 <__arm_cp.13_4>)
1005e858:	7aca      	ldrb	r2, [r1, #11]
1005e85a:	4295      	cmp	r5, r2
1005e85c:	d23a      	bcs.n	1005e8d4 <LL_sched_engine+0x148>
1005e85e:	463e      	mov	r6, r7
1005e860:	3e16      	subs	r6, #22
1005e862:	7831      	ldrb	r1, [r6, #0]
1005e864:	070a      	lsls	r2, r1, #28
1005e866:	0f52      	lsrs	r2, r2, #29
1005e868:	d01e      	beq.n	1005e8a8 <LL_sched_engine+0x11c>
1005e86a:	2104      	movs	r1, #4
1005e86c:	7031      	strb	r1, [r6, #0]
1005e86e:	4639      	mov	r1, r7
1005e870:	3928      	subs	r1, #40	@ 0x28
1005e872:	6809      	ldr	r1, [r1, #0]
1005e874:	43ca      	mvns	r2, r1
1005e876:	18a2      	adds	r2, r4, r2
1005e878:	d429      	bmi.n	1005e8ce <LL_sched_engine+0x142>
1005e87a:	1a61      	subs	r1, r4, r1
1005e87c:	4638      	mov	r0, r7
1005e87e:	381c      	subs	r0, #28
1005e880:	6800      	ldr	r0, [r0, #0]
1005e882:	463a      	mov	r2, r7
1005e884:	3a0c      	subs	r2, #12
1005e886:	6812      	ldr	r2, [r2, #0]
1005e888:	4790      	blx	r2
1005e88a:	4639      	mov	r1, r7
1005e88c:	3918      	subs	r1, #24
1005e88e:	880a      	ldrh	r2, [r1, #0]
1005e890:	1812      	adds	r2, r2, r0
1005e892:	800a      	strh	r2, [r1, #0]
1005e894:	4639      	mov	r1, r7
1005e896:	3914      	subs	r1, #20
1005e898:	780a      	ldrb	r2, [r1, #0]
1005e89a:	1880      	adds	r0, r0, r2
1005e89c:	287f      	cmp	r0, #127	@ 0x7f
1005e89e:	d300      	bcc.n	1005e8a2 <LL_sched_engine+0x116>
1005e8a0:	207f      	movs	r0, #127	@ 0x7f
1005e8a2:	7008      	strb	r0, [r1, #0]
1005e8a4:	7831      	ldrb	r1, [r6, #0]
1005e8a6:	2001      	movs	r0, #1
1005e8a8:	0689      	lsls	r1, r1, #26
1005e8aa:	0f89      	lsrs	r1, r1, #30
1005e8ac:	d00f      	beq.n	1005e8ce <LL_sched_engine+0x142>
1005e8ae:	6839      	ldr	r1, [r7, #0]
1005e8b0:	2900      	cmp	r1, #0
1005e8b2:	d006      	beq.n	1005e8c2 <LL_sched_engine+0x136>
1005e8b4:	4638      	mov	r0, r7
1005e8b6:	381c      	subs	r0, #28
1005e8b8:	6800      	ldr	r0, [r0, #0]
1005e8ba:	4788      	blx	r1
1005e8bc:	7830      	ldrb	r0, [r6, #0]
1005e8be:	2801      	cmp	r0, #1
1005e8c0:	d004      	beq.n	1005e8cc <LL_sched_engine+0x140>
1005e8c2:	2000      	movs	r0, #0
1005e8c4:	7030      	strb	r0, [r6, #0]
1005e8c6:	4639      	mov	r1, r7
1005e8c8:	3915      	subs	r1, #21
1005e8ca:	7008      	strb	r0, [r1, #0]
1005e8cc:	2001      	movs	r0, #1
1005e8ce:	372c      	adds	r7, #44	@ 0x2c
1005e8d0:	1c6d      	adds	r5, r5, #1
1005e8d2:	e7c0      	b.n	1005e856 <LL_sched_engine+0xca>
1005e8d4:	2800      	cmp	r0, #0
1005e8d6:	d1b5      	bne.n	1005e844 <LL_sched_engine+0xb8>
1005e8d8:	488c      	ldr	r0, [pc, #560]	@ (1005eb0c <__arm_cp.13_2>)
1005e8da:	6800      	ldr	r0, [r0, #0]
1005e8dc:	4603      	mov	r3, r0
1005e8de:	3312      	adds	r3, #18
1005e8e0:	2400      	movs	r4, #0
1005e8e2:	4621      	mov	r1, r4
1005e8e4:	42a2      	cmp	r2, r4
1005e8e6:	d009      	beq.n	1005e8fc <LL_sched_engine+0x170>
1005e8e8:	781d      	ldrb	r5, [r3, #0]
1005e8ea:	2d04      	cmp	r5, #4
1005e8ec:	d103      	bne.n	1005e8f6 <LL_sched_engine+0x16a>
1005e8ee:	b2cd      	uxtb	r5, r1
1005e8f0:	ae13      	add	r6, sp, #76	@ 0x4c
1005e8f2:	5574      	strb	r4, [r6, r5]
1005e8f4:	1c49      	adds	r1, r1, #1
1005e8f6:	332c      	adds	r3, #44	@ 0x2c
1005e8f8:	1c64      	adds	r4, r4, #1
1005e8fa:	e7f3      	b.n	1005e8e4 <LL_sched_engine+0x158>
1005e8fc:	060a      	lsls	r2, r1, #24
1005e8fe:	d074      	beq.n	1005e9ea <LL_sched_engine+0x25e>
1005e900:	b2ca      	uxtb	r2, r1
1005e902:	920e      	str	r2, [sp, #56]	@ 0x38
1005e904:	2200      	movs	r2, #0
1005e906:	9206      	str	r2, [sp, #24]
1005e908:	460c      	mov	r4, r1
1005e90a:	9203      	str	r2, [sp, #12]
1005e90c:	4616      	mov	r6, r2
1005e90e:	910d      	str	r1, [sp, #52]	@ 0x34
1005e910:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005e912:	4296      	cmp	r6, r2
1005e914:	d06e      	beq.n	1005e9f4 <LL_sched_engine+0x268>
1005e916:	9612      	str	r6, [sp, #72]	@ 0x48
1005e918:	9410      	str	r4, [sp, #64]	@ 0x40
1005e91a:	b2e3      	uxtb	r3, r4
1005e91c:	2700      	movs	r7, #0
1005e91e:	462c      	mov	r4, r5
1005e920:	463e      	mov	r6, r7
1005e922:	42bb      	cmp	r3, r7
1005e924:	d00d      	beq.n	1005e942 <LL_sched_engine+0x1b6>
1005e926:	aa13      	add	r2, sp, #76	@ 0x4c
1005e928:	5dd2      	ldrb	r2, [r2, r7]
1005e92a:	252c      	movs	r5, #44	@ 0x2c
1005e92c:	4355      	muls	r5, r2
1005e92e:	5945      	ldr	r5, [r0, r5]
1005e930:	2f00      	cmp	r7, #0
1005e932:	d002      	beq.n	1005e93a <LL_sched_engine+0x1ae>
1005e934:	43f2      	mvns	r2, r6
1005e936:	18aa      	adds	r2, r5, r2
1005e938:	d501      	bpl.n	1005e93e <LL_sched_engine+0x1b2>
1005e93a:	463c      	mov	r4, r7
1005e93c:	462e      	mov	r6, r5
1005e93e:	1c7f      	adds	r7, r7, #1
1005e940:	e7ef      	b.n	1005e922 <LL_sched_engine+0x196>
1005e942:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1005e944:	1b4a      	subs	r2, r1, r5
1005e946:	b2d2      	uxtb	r2, r2
1005e948:	1e51      	subs	r1, r2, #1
1005e94a:	aa13      	add	r2, sp, #76	@ 0x4c
1005e94c:	5c53      	ldrb	r3, [r2, r1]
1005e94e:	b2e4      	uxtb	r4, r4
1005e950:	5d17      	ldrb	r7, [r2, r4]
1005e952:	5457      	strb	r7, [r2, r1]
1005e954:	5513      	strb	r3, [r2, r4]
1005e956:	910f      	str	r1, [sp, #60]	@ 0x3c
1005e958:	b2cb      	uxtb	r3, r1
1005e95a:	5cd3      	ldrb	r3, [r2, r3]
1005e95c:	2d00      	cmp	r5, #0
1005e95e:	d02e      	beq.n	1005e9be <LL_sched_engine+0x232>
1005e960:	461d      	mov	r5, r3
1005e962:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005e964:	b2ca      	uxtb	r2, r1
1005e966:	ac13      	add	r4, sp, #76	@ 0x4c
1005e968:	5ca4      	ldrb	r4, [r4, r2]
1005e96a:	272c      	movs	r7, #44	@ 0x2c
1005e96c:	437c      	muls	r4, r7
1005e96e:	5902      	ldr	r2, [r0, r4]
1005e970:	1b91      	subs	r1, r2, r6
1005e972:	1904      	adds	r4, r0, r4
1005e974:	6863      	ldr	r3, [r4, #4]
1005e976:	18c9      	adds	r1, r1, r3
1005e978:	3195      	adds	r1, #149	@ 0x95
1005e97a:	d44a      	bmi.n	1005ea12 <LL_sched_engine+0x286>
1005e97c:	43d1      	mvns	r1, r2
1005e97e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005e980:	1851      	adds	r1, r2, r1
1005e982:	d449      	bmi.n	1005ea18 <LL_sched_engine+0x28c>
1005e984:	436f      	muls	r7, r5
1005e986:	19c1      	adds	r1, r0, r7
1005e988:	7d8a      	ldrb	r2, [r1, #22]
1005e98a:	7d0b      	ldrb	r3, [r1, #20]
1005e98c:	4093      	lsls	r3, r2
1005e98e:	7d49      	ldrb	r1, [r1, #21]
1005e990:	2601      	movs	r6, #1
1005e992:	4632      	mov	r2, r6
1005e994:	408a      	lsls	r2, r1
1005e996:	429a      	cmp	r2, r3
1005e998:	d800      	bhi.n	1005e99c <LL_sched_engine+0x210>
1005e99a:	4613      	mov	r3, r2
1005e99c:	7da1      	ldrb	r1, [r4, #22]
1005e99e:	7d27      	ldrb	r7, [r4, #20]
1005e9a0:	408f      	lsls	r7, r1
1005e9a2:	7d61      	ldrb	r1, [r4, #21]
1005e9a4:	408e      	lsls	r6, r1
1005e9a6:	42be      	cmp	r6, r7
1005e9a8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005e9aa:	d800      	bhi.n	1005e9ae <LL_sched_engine+0x222>
1005e9ac:	4637      	mov	r7, r6
1005e9ae:	429f      	cmp	r7, r3
1005e9b0:	462b      	mov	r3, r5
1005e9b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005e9b4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1005e9b6:	d300      	bcc.n	1005e9ba <LL_sched_engine+0x22e>
1005e9b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1005e9ba:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005e9bc:	e011      	b.n	1005e9e2 <LL_sched_engine+0x256>
1005e9be:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005e9c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005e9c2:	2a01      	cmp	r2, #1
1005e9c4:	d101      	bne.n	1005e9ca <LL_sched_engine+0x23e>
1005e9c6:	2202      	movs	r2, #2
1005e9c8:	9206      	str	r2, [sp, #24]
1005e9ca:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1005e9cc:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005e9ce:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1005e9d0:	222c      	movs	r2, #44	@ 0x2c
1005e9d2:	435a      	muls	r2, r3
1005e9d4:	5883      	ldr	r3, [r0, r2]
1005e9d6:	1882      	adds	r2, r0, r2
1005e9d8:	6852      	ldr	r2, [r2, #4]
1005e9da:	189a      	adds	r2, r3, r2
1005e9dc:	3296      	adds	r2, #150	@ 0x96
1005e9de:	920c      	str	r2, [sp, #48]	@ 0x30
1005e9e0:	462b      	mov	r3, r5
1005e9e2:	1e64      	subs	r4, r4, #1
1005e9e4:	1c76      	adds	r6, r6, #1
1005e9e6:	9311      	str	r3, [sp, #68]	@ 0x44
1005e9e8:	e792      	b.n	1005e910 <LL_sched_engine+0x184>
1005e9ea:	2000      	movs	r0, #0
1005e9ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005e9ee:	6048      	str	r0, [r1, #4]
1005e9f0:	7388      	strb	r0, [r1, #14]
1005e9f2:	e02d      	b.n	1005ea50 <LL_sched_engine+0x2c4>
1005e9f4:	9a03      	ldr	r2, [sp, #12]
1005e9f6:	4616      	mov	r6, r2
1005e9f8:	9b06      	ldr	r3, [sp, #24]
1005e9fa:	e013      	b.n	1005ea24 <LL_sched_engine+0x298>
1005e9fc:	1960      	adds	r0, r4, r5
1005e9fe:	7c80      	ldrb	r0, [r0, #18]
1005ea00:	2810      	cmp	r0, #16
1005ea02:	d100      	bne.n	1005ea06 <LL_sched_engine+0x27a>
1005ea04:	e70a      	b.n	1005e81c <LL_sched_engine+0x90>
1005ea06:	2820      	cmp	r0, #32
1005ea08:	d100      	bne.n	1005ea0c <LL_sched_engine+0x280>
1005ea0a:	e707      	b.n	1005e81c <LL_sched_engine+0x90>
1005ea0c:	2400      	movs	r4, #0
1005ea0e:	463d      	mov	r5, r7
1005ea10:	e021      	b.n	1005ea56 <LL_sched_engine+0x2ca>
1005ea12:	3e96      	subs	r6, #150	@ 0x96
1005ea14:	9b04      	ldr	r3, [sp, #16]
1005ea16:	e004      	b.n	1005ea22 <LL_sched_engine+0x296>
1005ea18:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005ea1a:	1e40      	subs	r0, r0, #1
1005ea1c:	9011      	str	r0, [sp, #68]	@ 0x44
1005ea1e:	2600      	movs	r6, #0
1005ea20:	4633      	mov	r3, r6
1005ea22:	9a03      	ldr	r2, [sp, #12]
1005ea24:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005ea26:	b2c0      	uxtb	r0, r0
1005ea28:	a913      	add	r1, sp, #76	@ 0x4c
1005ea2a:	5c0d      	ldrb	r5, [r1, r0]
1005ea2c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005ea2e:	6042      	str	r2, [r0, #4]
1005ea30:	7383      	strb	r3, [r0, #14]
1005ea32:	2dff      	cmp	r5, #255	@ 0xff
1005ea34:	d00c      	beq.n	1005ea50 <LL_sched_engine+0x2c4>
1005ea36:	202c      	movs	r0, #44	@ 0x2c
1005ea38:	4368      	muls	r0, r5
1005ea3a:	9907      	ldr	r1, [sp, #28]
1005ea3c:	1809      	adds	r1, r1, r0
1005ea3e:	b2d8      	uxtb	r0, r3
1005ea40:	2801      	cmp	r0, #1
1005ea42:	910a      	str	r1, [sp, #40]	@ 0x28
1005ea44:	d105      	bne.n	1005ea52 <LL_sched_engine+0x2c6>
1005ea46:	6808      	ldr	r0, [r1, #0]
1005ea48:	1a30      	subs	r0, r6, r0
1005ea4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005ea4c:	6048      	str	r0, [r1, #4]
1005ea4e:	e000      	b.n	1005ea52 <LL_sched_engine+0x2c6>
1005ea50:	25ff      	movs	r5, #255	@ 0xff
1005ea52:	9c01      	ldr	r4, [sp, #4]
1005ea54:	9f08      	ldr	r7, [sp, #32]
1005ea56:	f7e8 faef 	bl	10047038 <BLEPLAT_CNTR_ClearSemareq>
1005ea5a:	482a      	ldr	r0, [pc, #168]	@ (1005eb04 <__arm_cp.13_0>)
1005ea5c:	6800      	ldr	r0, [r0, #0]
1005ea5e:	2dff      	cmp	r5, #255	@ 0xff
1005ea60:	d02f      	beq.n	1005eac2 <LL_sched_engine+0x336>
1005ea62:	9711      	str	r7, [sp, #68]	@ 0x44
1005ea64:	9412      	str	r4, [sp, #72]	@ 0x48
1005ea66:	4604      	mov	r4, r0
1005ea68:	2008      	movs	r0, #8
1005ea6a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1005ea6c:	74b8      	strb	r0, [r7, #18]
1005ea6e:	f7fe fa5c 	bl	1005cf2a <llc_cte_timer_stop_ucfg_weak>
1005ea72:	7365      	strb	r5, [r4, #13]
1005ea74:	6a3a      	ldr	r2, [r7, #32]
1005ea76:	68f8      	ldr	r0, [r7, #12]
1005ea78:	6879      	ldr	r1, [r7, #4]
1005ea7a:	4790      	blx	r2
1005ea7c:	683e      	ldr	r6, [r7, #0]
1005ea7e:	940b      	str	r4, [sp, #44]	@ 0x2c
1005ea80:	6026      	str	r6, [r4, #0]
1005ea82:	4628      	mov	r0, r5
1005ea84:	f7e8 faee 	bl	10047064 <BLEPLAT_CNTR_GlobWriteSlot>
1005ea88:	f7e8 fae5 	bl	10047056 <BLEPLAT_CNTR_GlobEnableBlue>
1005ea8c:	9812      	ldr	r0, [sp, #72]	@ 0x48
1005ea8e:	2800      	cmp	r0, #0
1005ea90:	d023      	beq.n	1005eada <LL_sched_engine+0x34e>
1005ea92:	7cf8      	ldrb	r0, [r7, #19]
1005ea94:	09c1      	lsrs	r1, r0, #7
1005ea96:	2201      	movs	r2, #1
1005ea98:	4630      	mov	r0, r6
1005ea9a:	f7e7 fb00 	bl	1004609e <BLEPLAT_SetRadioTimerValue>
1005ea9e:	2800      	cmp	r0, #0
1005eaa0:	d01d      	beq.n	1005eade <LL_sched_engine+0x352>
1005eaa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005eaa4:	0040      	lsls	r0, r0, #1
1005eaa6:	9009      	str	r0, [sp, #36]	@ 0x24
1005eaa8:	2810      	cmp	r0, #16
1005eaaa:	9f11      	ldr	r7, [sp, #68]	@ 0x44
1005eaac:	d200      	bcs.n	1005eab0 <LL_sched_engine+0x324>
1005eaae:	e676      	b.n	1005e79e <LL_sched_engine+0x12>
1005eab0:	f7fe fa3a 	bl	1005cf28 <llc_cte_timer_error_ucfg_weak>
1005eab4:	20a1      	movs	r0, #161	@ 0xa1
1005eab6:	2106      	movs	r1, #6
1005eab8:	2200      	movs	r2, #0
1005eaba:	4613      	mov	r3, r2
1005eabc:	f004 ff02 	bl	100638c4 <aci_hal_fw_error_event_push_noinline>
1005eac0:	e009      	b.n	1005ead6 <LL_sched_engine+0x34a>
1005eac2:	4604      	mov	r4, r0
1005eac4:	f7e7 fb05 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
1005eac8:	f7e8 fabe 	bl	10047048 <BLEPLAT_CNTR_GlobDisableBlue>
1005eacc:	2000      	movs	r0, #0
1005eace:	73e0      	strb	r0, [r4, #15]
1005ead0:	20ff      	movs	r0, #255	@ 0xff
1005ead2:	0200      	lsls	r0, r0, #8
1005ead4:	81a0      	strh	r0, [r4, #12]
1005ead6:	9904      	ldr	r1, [sp, #16]
1005ead8:	e00f      	b.n	1005eafa <LL_sched_engine+0x36e>
1005eada:	f7e7 fb12 	bl	10046102 <BLEPLAT_SetRadioCloseTimeout>
1005eade:	9b04      	ldr	r3, [sp, #16]
1005eae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005eae2:	730b      	strb	r3, [r1, #12]
1005eae4:	7cf8      	ldrb	r0, [r7, #19]
1005eae6:	73c8      	strb	r0, [r1, #15]
1005eae8:	9a05      	ldr	r2, [sp, #20]
1005eaea:	60d6      	str	r6, [r2, #12]
1005eaec:	7c11      	ldrb	r1, [r2, #16]
1005eaee:	9c02      	ldr	r4, [sp, #8]
1005eaf0:	4021      	ands	r1, r4
1005eaf2:	0100      	lsls	r0, r0, #4
1005eaf4:	1808      	adds	r0, r1, r0
1005eaf6:	4619      	mov	r1, r3
1005eaf8:	7410      	strb	r0, [r2, #16]
1005eafa:	4803      	ldr	r0, [pc, #12]	@ (1005eb08 <__arm_cp.13_1>)
1005eafc:	6800      	ldr	r0, [r0, #0]
1005eafe:	7201      	strb	r1, [r0, #8]
1005eb00:	b033      	add	sp, #204	@ 0xcc
1005eb02:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005eb04 <__arm_cp.13_0>:
1005eb04:	20001178 	.word	0x20001178

1005eb08 <__arm_cp.13_1>:
1005eb08:	20001174 	.word	0x20001174

1005eb0c <__arm_cp.13_2>:
1005eb0c:	2000117c 	.word	0x2000117c

1005eb10 <__arm_cp.13_3>:
1005eb10:	fffffed4 	.word	0xfffffed4

1005eb14 <__arm_cp.13_4>:
1005eb14:	20001188 	.word	0x20001188

1005eb18 <LL_sched_set_priority>:
1005eb18:	b510      	push	{r4, lr}
1005eb1a:	231f      	movs	r3, #31
1005eb1c:	401a      	ands	r2, r3
1005eb1e:	242c      	movs	r4, #44	@ 0x2c
1005eb20:	4344      	muls	r4, r0
1005eb22:	4803      	ldr	r0, [pc, #12]	@ (1005eb30 <__arm_cp.14_0>)
1005eb24:	6800      	ldr	r0, [r0, #0]
1005eb26:	1900      	adds	r0, r0, r4
1005eb28:	7582      	strb	r2, [r0, #22]
1005eb2a:	4019      	ands	r1, r3
1005eb2c:	7541      	strb	r1, [r0, #21]
1005eb2e:	bd10      	pop	{r4, pc}

1005eb30 <__arm_cp.14_0>:
1005eb30:	2000117c 	.word	0x2000117c

1005eb34 <LL_sched_set_params>:
1005eb34:	b5b0      	push	{r4, r5, r7, lr}
1005eb36:	242c      	movs	r4, #44	@ 0x2c
1005eb38:	4344      	muls	r4, r0
1005eb3a:	480b      	ldr	r0, [pc, #44]	@ (1005eb68 <__arm_cp.15_0>)
1005eb3c:	6800      	ldr	r0, [r0, #0]
1005eb3e:	9d05      	ldr	r5, [sp, #20]
1005eb40:	5105      	str	r5, [r0, r4]
1005eb42:	1900      	adds	r0, r0, r4
1005eb44:	9c04      	ldr	r4, [sp, #16]
1005eb46:	6084      	str	r4, [r0, #8]
1005eb48:	60c1      	str	r1, [r0, #12]
1005eb4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005eb4c:	6281      	str	r1, [r0, #40]	@ 0x28
1005eb4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005eb50:	6241      	str	r1, [r0, #36]	@ 0x24
1005eb52:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005eb54:	6201      	str	r1, [r0, #32]
1005eb56:	9908      	ldr	r1, [sp, #32]
1005eb58:	61c1      	str	r1, [r0, #28]
1005eb5a:	9907      	ldr	r1, [sp, #28]
1005eb5c:	7581      	strb	r1, [r0, #22]
1005eb5e:	9906      	ldr	r1, [sp, #24]
1005eb60:	7541      	strb	r1, [r0, #21]
1005eb62:	74c2      	strb	r2, [r0, #19]
1005eb64:	6043      	str	r3, [r0, #4]
1005eb66:	bdb0      	pop	{r4, r5, r7, pc}

1005eb68 <__arm_cp.15_0>:
1005eb68:	2000117c 	.word	0x2000117c

1005eb6c <LL_sched_delete_taskslot>:
1005eb6c:	212c      	movs	r1, #44	@ 0x2c
1005eb6e:	4341      	muls	r1, r0
1005eb70:	4802      	ldr	r0, [pc, #8]	@ (1005eb7c <__arm_cp.19_0>)
1005eb72:	6800      	ldr	r0, [r0, #0]
1005eb74:	1840      	adds	r0, r0, r1
1005eb76:	2110      	movs	r1, #16
1005eb78:	8241      	strh	r1, [r0, #18]
1005eb7a:	4770      	bx	lr

1005eb7c <__arm_cp.19_0>:
1005eb7c:	2000117c 	.word	0x2000117c

1005eb80 <LL_sched_set_per_state>:
1005eb80:	222c      	movs	r2, #44	@ 0x2c
1005eb82:	4342      	muls	r2, r0
1005eb84:	4802      	ldr	r0, [pc, #8]	@ (1005eb90 <__arm_cp.21_0>)
1005eb86:	6800      	ldr	r0, [r0, #0]
1005eb88:	1880      	adds	r0, r0, r2
1005eb8a:	7481      	strb	r1, [r0, #18]
1005eb8c:	4770      	bx	lr
1005eb8e:	46c0      	nop			@ (mov r8, r8)

1005eb90 <__arm_cp.21_0>:
1005eb90:	2000117c 	.word	0x2000117c

1005eb94 <LL_sched_reserve_taskslot>:
1005eb94:	b510      	push	{r4, lr}
1005eb96:	480e      	ldr	r0, [pc, #56]	@ (1005ebd0 <__arm_cp.22_0>)
1005eb98:	6801      	ldr	r1, [r0, #0]
1005eb9a:	3128      	adds	r1, #40	@ 0x28
1005eb9c:	2000      	movs	r0, #0
1005eb9e:	4a0d      	ldr	r2, [pc, #52]	@ (1005ebd4 <__arm_cp.22_1>)
1005eba0:	7ad3      	ldrb	r3, [r2, #11]
1005eba2:	4298      	cmp	r0, r3
1005eba4:	d20b      	bcs.n	1005ebbe <LL_sched_reserve_taskslot+0x2a>
1005eba6:	f3ef 8310 	mrs	r3, PRIMASK
1005ebaa:	b672      	cpsid	i
1005ebac:	460b      	mov	r3, r1
1005ebae:	3b16      	subs	r3, #22
1005ebb0:	781c      	ldrb	r4, [r3, #0]
1005ebb2:	2c00      	cmp	r4, #0
1005ebb4:	d005      	beq.n	1005ebc2 <LL_sched_reserve_taskslot+0x2e>
1005ebb6:	b662      	cpsie	i
1005ebb8:	312c      	adds	r1, #44	@ 0x2c
1005ebba:	1c40      	adds	r0, r0, #1
1005ebbc:	e7f0      	b.n	1005eba0 <LL_sched_reserve_taskslot+0xc>
1005ebbe:	20ff      	movs	r0, #255	@ 0xff
1005ebc0:	e004      	b.n	1005ebcc <LL_sched_reserve_taskslot+0x38>
1005ebc2:	2200      	movs	r2, #0
1005ebc4:	600a      	str	r2, [r1, #0]
1005ebc6:	2101      	movs	r1, #1
1005ebc8:	7019      	strb	r1, [r3, #0]
1005ebca:	b662      	cpsie	i
1005ebcc:	b2c0      	uxtb	r0, r0
1005ebce:	bd10      	pop	{r4, pc}

1005ebd0 <__arm_cp.22_0>:
1005ebd0:	2000117c 	.word	0x2000117c

1005ebd4 <__arm_cp.22_1>:
1005ebd4:	20001188 	.word	0x20001188

1005ebd8 <LL_sched_release_taskslot>:
1005ebd8:	28ff      	cmp	r0, #255	@ 0xff
1005ebda:	d006      	beq.n	1005ebea <LL_sched_release_taskslot+0x12>
1005ebdc:	212c      	movs	r1, #44	@ 0x2c
1005ebde:	4341      	muls	r1, r0
1005ebe0:	4802      	ldr	r0, [pc, #8]	@ (1005ebec <__arm_cp.23_0>)
1005ebe2:	6800      	ldr	r0, [r0, #0]
1005ebe4:	1840      	adds	r0, r0, r1
1005ebe6:	2100      	movs	r1, #0
1005ebe8:	8241      	strh	r1, [r0, #18]
1005ebea:	4770      	bx	lr

1005ebec <__arm_cp.23_0>:
1005ebec:	2000117c 	.word	0x2000117c

1005ebf0 <LL_sched_check_and_call_sched>:
1005ebf0:	b510      	push	{r4, lr}
1005ebf2:	460c      	mov	r4, r1
1005ebf4:	f3ef 8110 	mrs	r1, PRIMASK
1005ebf8:	b672      	cpsid	i
1005ebfa:	f7ff fda5 	bl	1005e748 <LL_sched_is_scheduler_call_pending>
1005ebfe:	b662      	cpsie	i
1005ec00:	2800      	cmp	r0, #0
1005ec02:	d000      	beq.n	1005ec06 <LL_sched_check_and_call_sched+0x16>
1005ec04:	bd10      	pop	{r4, pc}
1005ec06:	4620      	mov	r0, r4
1005ec08:	f7ff fdc0 	bl	1005e78c <LL_sched_engine>
1005ec0c:	bd10      	pop	{r4, pc}
	...

1005ec10 <LL_sched_check_and_wait_sched>:
1005ec10:	b5b0      	push	{r4, r5, r7, lr}
1005ec12:	4604      	mov	r4, r0
1005ec14:	4813      	ldr	r0, [pc, #76]	@ (1005ec64 <__arm_cp.25_0>)
1005ec16:	7ac0      	ldrb	r0, [r0, #11]
1005ec18:	42a0      	cmp	r0, r4
1005ec1a:	d922      	bls.n	1005ec62 <LL_sched_check_and_wait_sched+0x52>
1005ec1c:	f3ef 8010 	mrs	r0, PRIMASK
1005ec20:	b672      	cpsid	i
1005ec22:	25ff      	movs	r5, #255	@ 0xff
1005ec24:	35ec      	adds	r5, #236	@ 0xec
1005ec26:	f7e7 fa13 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
1005ec2a:	1940      	adds	r0, r0, r5
1005ec2c:	f7ff fd8c 	bl	1005e748 <LL_sched_is_scheduler_call_pending>
1005ec30:	4a0d      	ldr	r2, [pc, #52]	@ (1005ec68 <__arm_cp.25_1>)
1005ec32:	6813      	ldr	r3, [r2, #0]
1005ec34:	2100      	movs	r1, #0
1005ec36:	7219      	strb	r1, [r3, #8]
1005ec38:	b662      	cpsie	i
1005ec3a:	2801      	cmp	r0, #1
1005ec3c:	d10c      	bne.n	1005ec58 <LL_sched_check_and_wait_sched+0x48>
1005ec3e:	6810      	ldr	r0, [r2, #0]
1005ec40:	6041      	str	r1, [r0, #4]
1005ec42:	4a0a      	ldr	r2, [pc, #40]	@ (1005ec6c <__arm_cp.25_2>)
1005ec44:	6843      	ldr	r3, [r0, #4]
1005ec46:	4293      	cmp	r3, r2
1005ec48:	d80b      	bhi.n	1005ec62 <LL_sched_check_and_wait_sched+0x52>
1005ec4a:	7a03      	ldrb	r3, [r0, #8]
1005ec4c:	2b00      	cmp	r3, #0
1005ec4e:	d107      	bne.n	1005ec60 <LL_sched_check_and_wait_sched+0x50>
1005ec50:	6843      	ldr	r3, [r0, #4]
1005ec52:	1c5b      	adds	r3, r3, #1
1005ec54:	6043      	str	r3, [r0, #4]
1005ec56:	e7f5      	b.n	1005ec44 <LL_sched_check_and_wait_sched+0x34>
1005ec58:	4620      	mov	r0, r4
1005ec5a:	f7ff fd97 	bl	1005e78c <LL_sched_engine>
1005ec5e:	bdb0      	pop	{r4, r5, r7, pc}
1005ec60:	7201      	strb	r1, [r0, #8]
1005ec62:	bdb0      	pop	{r4, r5, r7, pc}

1005ec64 <__arm_cp.25_0>:
1005ec64:	20001188 	.word	0x20001188

1005ec68 <__arm_cp.25_1>:
1005ec68:	20001174 	.word	0x20001174

1005ec6c <__arm_cp.25_2>:
1005ec6c:	0004e1ff 	.word	0x0004e1ff

1005ec70 <MBM_init>:
1005ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ec72:	4c18      	ldr	r4, [pc, #96]	@ (1005ecd4 <__arm_cp.1_0>)
1005ec74:	2501      	movs	r5, #1
1005ec76:	2204      	movs	r2, #4
1005ec78:	4e17      	ldr	r6, [pc, #92]	@ (1005ecd8 <__arm_cp.1_1>)
1005ec7a:	4620      	mov	r0, r4
1005ec7c:	4629      	mov	r1, r5
1005ec7e:	47b0      	blx	r6
1005ec80:	4f16      	ldr	r7, [pc, #88]	@ (1005ecdc <__arm_cp.1_2>)
1005ec82:	6038      	str	r0, [r7, #0]
1005ec84:	2210      	movs	r2, #16
1005ec86:	4620      	mov	r0, r4
1005ec88:	4629      	mov	r1, r5
1005ec8a:	47b0      	blx	r6
1005ec8c:	6839      	ldr	r1, [r7, #0]
1005ec8e:	6008      	str	r0, [r1, #0]
1005ec90:	220c      	movs	r2, #12
1005ec92:	4620      	mov	r0, r4
1005ec94:	4629      	mov	r1, r5
1005ec96:	47b0      	blx	r6
1005ec98:	6839      	ldr	r1, [r7, #0]
1005ec9a:	6809      	ldr	r1, [r1, #0]
1005ec9c:	60c8      	str	r0, [r1, #12]
1005ec9e:	4d10      	ldr	r5, [pc, #64]	@ (1005ece0 <__arm_cp.1_3>)
1005eca0:	89e9      	ldrh	r1, [r5, #14]
1005eca2:	2224      	movs	r2, #36	@ 0x24
1005eca4:	4620      	mov	r0, r4
1005eca6:	47b0      	blx	r6
1005eca8:	4601      	mov	r1, r0
1005ecaa:	6838      	ldr	r0, [r7, #0]
1005ecac:	6802      	ldr	r2, [r0, #0]
1005ecae:	68d0      	ldr	r0, [r2, #12]
1005ecb0:	6081      	str	r1, [r0, #8]
1005ecb2:	2100      	movs	r1, #0
1005ecb4:	2908      	cmp	r1, #8
1005ecb6:	d003      	beq.n	1005ecc0 <MBM_init+0x50>
1005ecb8:	2300      	movs	r3, #0
1005ecba:	5253      	strh	r3, [r2, r1]
1005ecbc:	1c89      	adds	r1, r1, #2
1005ecbe:	e7f9      	b.n	1005ecb4 <MBM_init+0x44>
1005ecc0:	89e9      	ldrh	r1, [r5, #14]
1005ecc2:	80d1      	strh	r1, [r2, #6]
1005ecc4:	2100      	movs	r1, #0
1005ecc6:	8111      	strh	r1, [r2, #8]
1005ecc8:	89e9      	ldrh	r1, [r5, #14]
1005ecca:	8041      	strh	r1, [r0, #2]
1005eccc:	f000 f948 	bl	1005ef60 <Mem_Buff_init>
1005ecd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005ecd2:	46c0      	nop			@ (mov r8, r8)

1005ecd4 <__arm_cp.1_0>:
1005ecd4:	20001184 	.word	0x20001184

1005ecd8 <__arm_cp.1_1>:
1005ecd8:	1005ef29 	.word	0x1005ef29

1005ecdc <__arm_cp.1_2>:
1005ecdc:	20001180 	.word	0x20001180

1005ece0 <__arm_cp.1_3>:
1005ece0:	20001188 	.word	0x20001188

1005ece4 <MBM_get>:
1005ece4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005ece6:	4a1a      	ldr	r2, [pc, #104]	@ (1005ed50 <__arm_cp.2_0>)
1005ece8:	6812      	ldr	r2, [r2, #0]
1005ecea:	6813      	ldr	r3, [r2, #0]
1005ecec:	f3ef 8210 	mrs	r2, PRIMASK
1005ecf0:	b672      	cpsid	i
1005ecf2:	2206      	movs	r2, #6
1005ecf4:	5e9c      	ldrsh	r4, [r3, r2]
1005ecf6:	17e2      	asrs	r2, r4, #31
1005ecf8:	4627      	mov	r7, r4
1005ecfa:	4397      	bics	r7, r2
1005ecfc:	0040      	lsls	r0, r0, #1
1005ecfe:	9000      	str	r0, [sp, #0]
1005ed00:	5e18      	ldrsh	r0, [r3, r0]
1005ed02:	4a14      	ldr	r2, [pc, #80]	@ (1005ed54 <__arm_cp.2_1>)
1005ed04:	9102      	str	r1, [sp, #8]
1005ed06:	1889      	adds	r1, r1, r2
1005ed08:	0949      	lsrs	r1, r1, #5
1005ed0a:	1c4d      	adds	r5, r1, #1
1005ed0c:	2801      	cmp	r0, #1
1005ed0e:	9501      	str	r5, [sp, #4]
1005ed10:	db05      	blt.n	1005ed1e <MBM_get+0x3a>
1005ed12:	1b42      	subs	r2, r0, r5
1005ed14:	4256      	negs	r6, r2
1005ed16:	b212      	sxth	r2, r2
1005ed18:	13d5      	asrs	r5, r2, #15
1005ed1a:	4035      	ands	r5, r6
1005ed1c:	183f      	adds	r7, r7, r0
1005ed1e:	68d8      	ldr	r0, [r3, #12]
1005ed20:	2200      	movs	r2, #0
1005ed22:	5e86      	ldrsh	r6, [r0, r2]
1005ed24:	b209      	sxth	r1, r1
1005ed26:	428e      	cmp	r6, r1
1005ed28:	dd0e      	ble.n	1005ed48 <MBM_get+0x64>
1005ed2a:	b23e      	sxth	r6, r7
1005ed2c:	428e      	cmp	r6, r1
1005ed2e:	dd0b      	ble.n	1005ed48 <MBM_get+0x64>
1005ed30:	9900      	ldr	r1, [sp, #0]
1005ed32:	1859      	adds	r1, r3, r1
1005ed34:	1b62      	subs	r2, r4, r5
1005ed36:	80da      	strh	r2, [r3, #6]
1005ed38:	880a      	ldrh	r2, [r1, #0]
1005ed3a:	9b01      	ldr	r3, [sp, #4]
1005ed3c:	1ad2      	subs	r2, r2, r3
1005ed3e:	800a      	strh	r2, [r1, #0]
1005ed40:	9902      	ldr	r1, [sp, #8]
1005ed42:	f000 f943 	bl	1005efcc <Mem_Buff_get>
1005ed46:	4602      	mov	r2, r0
1005ed48:	b662      	cpsie	i
1005ed4a:	4610      	mov	r0, r2
1005ed4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ed4e:	46c0      	nop			@ (mov r8, r8)

1005ed50 <__arm_cp.2_0>:
1005ed50:	20001180 	.word	0x20001180

1005ed54 <__arm_cp.2_1>:
1005ed54:	001fffff 	.word	0x001fffff

1005ed58 <MBM_release>:
1005ed58:	b5b0      	push	{r4, r5, r7, lr}
1005ed5a:	460d      	mov	r5, r1
1005ed5c:	4604      	mov	r4, r0
1005ed5e:	f000 f95b 	bl	1005f018 <Mem_Buff_get_chain_count>
1005ed62:	4601      	mov	r1, r0
1005ed64:	4628      	mov	r0, r5
1005ed66:	f000 f80b 	bl	1005ed80 <MBM_release_balance>
1005ed6a:	4804      	ldr	r0, [pc, #16]	@ (1005ed7c <__arm_cp.3_0>)
1005ed6c:	6800      	ldr	r0, [r0, #0]
1005ed6e:	6800      	ldr	r0, [r0, #0]
1005ed70:	68c0      	ldr	r0, [r0, #12]
1005ed72:	4621      	mov	r1, r4
1005ed74:	f000 f90f 	bl	1005ef96 <Mem_Buff_release>
1005ed78:	bdb0      	pop	{r4, r5, r7, pc}
1005ed7a:	46c0      	nop			@ (mov r8, r8)

1005ed7c <__arm_cp.3_0>:
1005ed7c:	20001180 	.word	0x20001180

1005ed80 <MBM_release_balance>:
1005ed80:	b510      	push	{r4, lr}
1005ed82:	4a0b      	ldr	r2, [pc, #44]	@ (1005edb0 <__arm_cp.4_0>)
1005ed84:	6812      	ldr	r2, [r2, #0]
1005ed86:	6812      	ldr	r2, [r2, #0]
1005ed88:	f3ef 8310 	mrs	r3, PRIMASK
1005ed8c:	b672      	cpsid	i
1005ed8e:	0043      	lsls	r3, r0, #1
1005ed90:	5ed0      	ldrsh	r0, [r2, r3]
1005ed92:	1844      	adds	r4, r0, r1
1005ed94:	52d4      	strh	r4, [r2, r3]
1005ed96:	b20b      	sxth	r3, r1
1005ed98:	18c3      	adds	r3, r0, r3
1005ed9a:	2b01      	cmp	r3, #1
1005ed9c:	db02      	blt.n	1005eda4 <MBM_release_balance+0x24>
1005ed9e:	4243      	negs	r3, r0
1005eda0:	0bc1      	lsrs	r1, r0, #15
1005eda2:	4019      	ands	r1, r3
1005eda4:	88d0      	ldrh	r0, [r2, #6]
1005eda6:	1808      	adds	r0, r1, r0
1005eda8:	80d0      	strh	r0, [r2, #6]
1005edaa:	b662      	cpsie	i
1005edac:	bd10      	pop	{r4, pc}
1005edae:	46c0      	nop			@ (mov r8, r8)

1005edb0 <__arm_cp.4_0>:
1005edb0:	20001180 	.word	0x20001180

1005edb4 <MBM_get_available_mem_buffers>:
1005edb4:	4908      	ldr	r1, [pc, #32]	@ (1005edd8 <__arm_cp.5_0>)
1005edb6:	6809      	ldr	r1, [r1, #0]
1005edb8:	680a      	ldr	r2, [r1, #0]
1005edba:	f3ef 8110 	mrs	r1, PRIMASK
1005edbe:	b672      	cpsid	i
1005edc0:	2106      	movs	r1, #6
1005edc2:	5e51      	ldrsh	r1, [r2, r1]
1005edc4:	17cb      	asrs	r3, r1, #31
1005edc6:	4399      	bics	r1, r3
1005edc8:	0040      	lsls	r0, r0, #1
1005edca:	5e10      	ldrsh	r0, [r2, r0]
1005edcc:	2800      	cmp	r0, #0
1005edce:	dd00      	ble.n	1005edd2 <MBM_get_available_mem_buffers+0x1e>
1005edd0:	1809      	adds	r1, r1, r0
1005edd2:	b288      	uxth	r0, r1
1005edd4:	b662      	cpsie	i
1005edd6:	4770      	bx	lr

1005edd8 <__arm_cp.5_0>:
1005edd8:	20001180 	.word	0x20001180

1005eddc <MBM_resize>:
1005eddc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005edde:	2481      	movs	r4, #129	@ 0x81
1005ede0:	2800      	cmp	r0, #0
1005ede2:	d032      	beq.n	1005ee4a <MBM_resize+0x6e>
1005ede4:	4606      	mov	r6, r0
1005ede6:	9102      	str	r1, [sp, #8]
1005ede8:	9401      	str	r4, [sp, #4]
1005edea:	4819      	ldr	r0, [pc, #100]	@ (1005ee50 <__arm_cp.6_0>)
1005edec:	6800      	ldr	r0, [r0, #0]
1005edee:	6800      	ldr	r0, [r0, #0]
1005edf0:	9000      	str	r0, [sp, #0]
1005edf2:	1e50      	subs	r0, r2, #1
1005edf4:	211f      	movs	r1, #31
1005edf6:	4301      	orrs	r1, r0
1005edf8:	1c4c      	adds	r4, r1, #1
1005edfa:	b2a7      	uxth	r7, r4
1005edfc:	4630      	mov	r0, r6
1005edfe:	f000 f913 	bl	1005f028 <Mem_Buff_get_chain_size>
1005ee02:	4605      	mov	r5, r0
1005ee04:	4287      	cmp	r7, r0
1005ee06:	d90c      	bls.n	1005ee22 <MBM_resize+0x46>
1005ee08:	1b60      	subs	r0, r4, r5
1005ee0a:	b281      	uxth	r1, r0
1005ee0c:	9802      	ldr	r0, [sp, #8]
1005ee0e:	f7ff ff69 	bl	1005ece4 <MBM_get>
1005ee12:	2800      	cmp	r0, #0
1005ee14:	9c01      	ldr	r4, [sp, #4]
1005ee16:	d018      	beq.n	1005ee4a <MBM_resize+0x6e>
1005ee18:	4601      	mov	r1, r0
1005ee1a:	4630      	mov	r0, r6
1005ee1c:	f000 fa29 	bl	1005f272 <Mem_Buff_append>
1005ee20:	e012      	b.n	1005ee48 <MBM_resize+0x6c>
1005ee22:	42af      	cmp	r7, r5
1005ee24:	d210      	bcs.n	1005ee48 <MBM_resize+0x6c>
1005ee26:	9800      	ldr	r0, [sp, #0]
1005ee28:	68c0      	ldr	r0, [r0, #12]
1005ee2a:	4631      	mov	r1, r6
1005ee2c:	463a      	mov	r2, r7
1005ee2e:	f000 f907 	bl	1005f040 <Mem_Buff_resize>
1005ee32:	4604      	mov	r4, r0
1005ee34:	1e78      	subs	r0, r7, #1
1005ee36:	0940      	lsrs	r0, r0, #5
1005ee38:	1e69      	subs	r1, r5, #1
1005ee3a:	0949      	lsrs	r1, r1, #5
1005ee3c:	1a08      	subs	r0, r1, r0
1005ee3e:	b281      	uxth	r1, r0
1005ee40:	9802      	ldr	r0, [sp, #8]
1005ee42:	f7ff ff9d 	bl	1005ed80 <MBM_release_balance>
1005ee46:	e000      	b.n	1005ee4a <MBM_resize+0x6e>
1005ee48:	2400      	movs	r4, #0
1005ee4a:	4620      	mov	r0, r4
1005ee4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ee4e:	46c0      	nop			@ (mov r8, r8)

1005ee50 <__arm_cp.6_0>:
1005ee50:	20001180 	.word	0x20001180

1005ee54 <MBM_reserve>:
1005ee54:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005ee56:	460c      	mov	r4, r1
1005ee58:	4601      	mov	r1, r0
1005ee5a:	481c      	ldr	r0, [pc, #112]	@ (1005eecc <__arm_cp.7_0>)
1005ee5c:	6800      	ldr	r0, [r0, #0]
1005ee5e:	6805      	ldr	r5, [r0, #0]
1005ee60:	8928      	ldrh	r0, [r5, #8]
1005ee62:	68ea      	ldr	r2, [r5, #12]
1005ee64:	8852      	ldrh	r2, [r2, #2]
1005ee66:	1a13      	subs	r3, r2, r0
1005ee68:	42a3      	cmp	r3, r4
1005ee6a:	da26      	bge.n	1005eeba <MBM_reserve+0x66>
1005ee6c:	1aa1      	subs	r1, r4, r2
1005ee6e:	1808      	adds	r0, r1, r0
1005ee70:	a901      	add	r1, sp, #4
1005ee72:	8008      	strh	r0, [r1, #0]
1005ee74:	4816      	ldr	r0, [pc, #88]	@ (1005eed0 <__arm_cp.7_1>)
1005ee76:	6800      	ldr	r0, [r0, #0]
1005ee78:	6980      	ldr	r0, [r0, #24]
1005ee7a:	2142      	movs	r1, #66	@ 0x42
1005ee7c:	2240      	movs	r2, #64	@ 0x40
1005ee7e:	2303      	movs	r3, #3
1005ee80:	f7f4 faf2 	bl	10053468 <aci_event_fifo_push_header>
1005ee84:	2800      	cmp	r0, #0
1005ee86:	d017      	beq.n	1005eeb8 <MBM_reserve+0x64>
1005ee88:	4604      	mov	r4, r0
1005ee8a:	2202      	movs	r2, #2
1005ee8c:	72c2      	strb	r2, [r0, #11]
1005ee8e:	2009      	movs	r0, #9
1005ee90:	72a0      	strb	r0, [r4, #10]
1005ee92:	4620      	mov	r0, r4
1005ee94:	300c      	adds	r0, #12
1005ee96:	a901      	add	r1, sp, #4
1005ee98:	f7e6 ffee 	bl	10045e78 <BLEPLAT_MemCpy>
1005ee9c:	2000      	movs	r0, #0
1005ee9e:	7260      	strb	r0, [r4, #9]
1005eea0:	2106      	movs	r1, #6
1005eea2:	7221      	strb	r1, [r4, #8]
1005eea4:	71e0      	strb	r0, [r4, #7]
1005eea6:	71a1      	strb	r1, [r4, #6]
1005eea8:	20ff      	movs	r0, #255	@ 0xff
1005eeaa:	7160      	strb	r0, [r4, #5]
1005eeac:	2082      	movs	r0, #130	@ 0x82
1005eeae:	7120      	strb	r0, [r4, #4]
1005eeb0:	2042      	movs	r0, #66	@ 0x42
1005eeb2:	4621      	mov	r1, r4
1005eeb4:	f7f4 fb75 	bl	100535a2 <aci_event_fifo_push>
1005eeb8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005eeba:	2003      	movs	r0, #3
1005eebc:	4622      	mov	r2, r4
1005eebe:	f000 f809 	bl	1005eed4 <MBM_move_class>
1005eec2:	8928      	ldrh	r0, [r5, #8]
1005eec4:	1900      	adds	r0, r0, r4
1005eec6:	8128      	strh	r0, [r5, #8]
1005eec8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005eeca:	46c0      	nop			@ (mov r8, r8)

1005eecc <__arm_cp.7_0>:
1005eecc:	20001180 	.word	0x20001180

1005eed0 <__arm_cp.7_1>:
1005eed0:	20001124 	.word	0x20001124

1005eed4 <MBM_move_class>:
1005eed4:	b510      	push	{r4, lr}
1005eed6:	4b08      	ldr	r3, [pc, #32]	@ (1005eef8 <__arm_cp.8_0>)
1005eed8:	681b      	ldr	r3, [r3, #0]
1005eeda:	681b      	ldr	r3, [r3, #0]
1005eedc:	f3ef 8410 	mrs	r4, PRIMASK
1005eee0:	b672      	cpsid	i
1005eee2:	0040      	lsls	r0, r0, #1
1005eee4:	5a1c      	ldrh	r4, [r3, r0]
1005eee6:	1aa4      	subs	r4, r4, r2
1005eee8:	521c      	strh	r4, [r3, r0]
1005eeea:	0048      	lsls	r0, r1, #1
1005eeec:	5a19      	ldrh	r1, [r3, r0]
1005eeee:	1889      	adds	r1, r1, r2
1005eef0:	5219      	strh	r1, [r3, r0]
1005eef2:	b662      	cpsie	i
1005eef4:	bd10      	pop	{r4, pc}
1005eef6:	46c0      	nop			@ (mov r8, r8)

1005eef8 <__arm_cp.8_0>:
1005eef8:	20001180 	.word	0x20001180

1005eefc <MBM_unreserve>:
1005eefc:	b5b0      	push	{r4, r5, r7, lr}
1005eefe:	460c      	mov	r4, r1
1005ef00:	4905      	ldr	r1, [pc, #20]	@ (1005ef18 <__arm_cp.9_0>)
1005ef02:	6809      	ldr	r1, [r1, #0]
1005ef04:	680d      	ldr	r5, [r1, #0]
1005ef06:	2103      	movs	r1, #3
1005ef08:	4622      	mov	r2, r4
1005ef0a:	f7ff ffe3 	bl	1005eed4 <MBM_move_class>
1005ef0e:	8928      	ldrh	r0, [r5, #8]
1005ef10:	1b00      	subs	r0, r0, r4
1005ef12:	8128      	strh	r0, [r5, #8]
1005ef14:	bdb0      	pop	{r4, r5, r7, pc}
1005ef16:	46c0      	nop			@ (mov r8, r8)

1005ef18 <__arm_cp.9_0>:
1005ef18:	20001180 	.word	0x20001180

1005ef1c <csmem_init>:
1005ef1c:	4801      	ldr	r0, [pc, #4]	@ (1005ef24 <__arm_cp.0_0>)
1005ef1e:	6841      	ldr	r1, [r0, #4]
1005ef20:	6001      	str	r1, [r0, #0]
1005ef22:	4770      	bx	lr

1005ef24 <__arm_cp.0_0>:
1005ef24:	20001184 	.word	0x20001184

1005ef28 <csmem_mem_assign>:
1005ef28:	b570      	push	{r4, r5, r6, lr}
1005ef2a:	4614      	mov	r4, r2
1005ef2c:	4605      	mov	r5, r0
1005ef2e:	434c      	muls	r4, r1
1005ef30:	6800      	ldr	r0, [r0, #0]
1005ef32:	1e40      	subs	r0, r0, #1
1005ef34:	2103      	movs	r1, #3
1005ef36:	4301      	orrs	r1, r0
1005ef38:	1c4e      	adds	r6, r1, #1
1005ef3a:	2100      	movs	r1, #0
1005ef3c:	4630      	mov	r0, r6
1005ef3e:	4622      	mov	r2, r4
1005ef40:	f7e6 ffaa 	bl	10045e98 <BLEPLAT_MemSet>
1005ef44:	1930      	adds	r0, r6, r4
1005ef46:	6028      	str	r0, [r5, #0]
1005ef48:	4630      	mov	r0, r6
1005ef4a:	bd70      	pop	{r4, r5, r6, pc}

1005ef4c <csmem_mem_0_assign>:
1005ef4c:	b580      	push	{r7, lr}
1005ef4e:	460a      	mov	r2, r1
1005ef50:	4601      	mov	r1, r0
1005ef52:	4802      	ldr	r0, [pc, #8]	@ (1005ef5c <__arm_cp.3_0>)
1005ef54:	f7ff ffe8 	bl	1005ef28 <csmem_mem_assign>
1005ef58:	bd80      	pop	{r7, pc}
1005ef5a:	46c0      	nop			@ (mov r8, r8)

1005ef5c <__arm_cp.3_0>:
1005ef5c:	20001184 	.word	0x20001184

1005ef60 <Mem_Buff_init>:
1005ef60:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ef62:	b081      	sub	sp, #4
1005ef64:	4605      	mov	r5, r0
1005ef66:	8840      	ldrh	r0, [r0, #2]
1005ef68:	2486      	movs	r4, #134	@ 0x86
1005ef6a:	2800      	cmp	r0, #0
1005ef6c:	d010      	beq.n	1005ef90 <Mem_Buff_init+0x30>
1005ef6e:	68ae      	ldr	r6, [r5, #8]
1005ef70:	2e00      	cmp	r6, #0
1005ef72:	d00d      	beq.n	1005ef90 <Mem_Buff_init+0x30>
1005ef74:	2400      	movs	r4, #0
1005ef76:	606c      	str	r4, [r5, #4]
1005ef78:	802c      	strh	r4, [r5, #0]
1005ef7a:	4627      	mov	r7, r4
1005ef7c:	6034      	str	r4, [r6, #0]
1005ef7e:	4628      	mov	r0, r5
1005ef80:	4631      	mov	r1, r6
1005ef82:	f000 f808 	bl	1005ef96 <Mem_Buff_release>
1005ef86:	3624      	adds	r6, #36	@ 0x24
1005ef88:	1c7f      	adds	r7, r7, #1
1005ef8a:	8868      	ldrh	r0, [r5, #2]
1005ef8c:	4287      	cmp	r7, r0
1005ef8e:	d3f5      	bcc.n	1005ef7c <Mem_Buff_init+0x1c>
1005ef90:	4620      	mov	r0, r4
1005ef92:	b001      	add	sp, #4
1005ef94:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ef96 <Mem_Buff_release>:
1005ef96:	b510      	push	{r4, lr}
1005ef98:	2900      	cmp	r1, #0
1005ef9a:	d015      	beq.n	1005efc8 <Mem_Buff_release+0x32>
1005ef9c:	2200      	movs	r2, #0
1005ef9e:	460c      	mov	r4, r1
1005efa0:	4623      	mov	r3, r4
1005efa2:	1c52      	adds	r2, r2, #1
1005efa4:	6824      	ldr	r4, [r4, #0]
1005efa6:	2c00      	cmp	r4, #0
1005efa8:	d1fa      	bne.n	1005efa0 <Mem_Buff_release+0xa>
1005efaa:	f3ef 8410 	mrs	r4, PRIMASK
1005efae:	b672      	cpsid	i
1005efb0:	6844      	ldr	r4, [r0, #4]
1005efb2:	6041      	str	r1, [r0, #4]
1005efb4:	601c      	str	r4, [r3, #0]
1005efb6:	8801      	ldrh	r1, [r0, #0]
1005efb8:	1889      	adds	r1, r1, r2
1005efba:	8001      	strh	r1, [r0, #0]
1005efbc:	b662      	cpsie	i
1005efbe:	2000      	movs	r0, #0
1005efc0:	f003 f894 	bl	100620ec <tsk_signal_resource_idx>
1005efc4:	f7e4 ff6b 	bl	10043e9e <BLE_STACK_ProcessRequest>
1005efc8:	bd10      	pop	{r4, pc}
	...

1005efcc <Mem_Buff_get>:
1005efcc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005efce:	4a11      	ldr	r2, [pc, #68]	@ (1005f014 <__arm_cp.2_0>)
1005efd0:	1889      	adds	r1, r1, r2
1005efd2:	0949      	lsrs	r1, r1, #5
1005efd4:	1c4a      	adds	r2, r1, #1
1005efd6:	b294      	uxth	r4, r2
1005efd8:	f3ef 8110 	mrs	r1, PRIMASK
1005efdc:	b672      	cpsid	i
1005efde:	2100      	movs	r1, #0
1005efe0:	2c00      	cmp	r4, #0
1005efe2:	d013      	beq.n	1005f00c <Mem_Buff_get+0x40>
1005efe4:	8803      	ldrh	r3, [r0, #0]
1005efe6:	429c      	cmp	r4, r3
1005efe8:	d810      	bhi.n	1005f00c <Mem_Buff_get+0x40>
1005efea:	1e64      	subs	r4, r4, #1
1005efec:	6841      	ldr	r1, [r0, #4]
1005efee:	460d      	mov	r5, r1
1005eff0:	d006      	beq.n	1005f000 <Mem_Buff_get+0x34>
1005eff2:	2600      	movs	r6, #0
1005eff4:	460d      	mov	r5, r1
1005eff6:	682d      	ldr	r5, [r5, #0]
1005eff8:	1c76      	adds	r6, r6, #1
1005effa:	b2b7      	uxth	r7, r6
1005effc:	42bc      	cmp	r4, r7
1005effe:	d8fa      	bhi.n	1005eff6 <Mem_Buff_get+0x2a>
1005f000:	682c      	ldr	r4, [r5, #0]
1005f002:	6044      	str	r4, [r0, #4]
1005f004:	2400      	movs	r4, #0
1005f006:	602c      	str	r4, [r5, #0]
1005f008:	1a9a      	subs	r2, r3, r2
1005f00a:	8002      	strh	r2, [r0, #0]
1005f00c:	b662      	cpsie	i
1005f00e:	4608      	mov	r0, r1
1005f010:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f012:	46c0      	nop			@ (mov r8, r8)

1005f014 <__arm_cp.2_0>:
1005f014:	001fffff 	.word	0x001fffff

1005f018 <Mem_Buff_get_chain_count>:
1005f018:	2100      	movs	r1, #0
1005f01a:	2800      	cmp	r0, #0
1005f01c:	d002      	beq.n	1005f024 <Mem_Buff_get_chain_count+0xc>
1005f01e:	6800      	ldr	r0, [r0, #0]
1005f020:	1c49      	adds	r1, r1, #1
1005f022:	e7fa      	b.n	1005f01a <Mem_Buff_get_chain_count+0x2>
1005f024:	b288      	uxth	r0, r1
1005f026:	4770      	bx	lr

1005f028 <Mem_Buff_get_chain_size>:
1005f028:	2800      	cmp	r0, #0
1005f02a:	d006      	beq.n	1005f03a <Mem_Buff_get_chain_size+0x12>
1005f02c:	2100      	movs	r1, #0
1005f02e:	6800      	ldr	r0, [r0, #0]
1005f030:	1c49      	adds	r1, r1, #1
1005f032:	2800      	cmp	r0, #0
1005f034:	d1fb      	bne.n	1005f02e <Mem_Buff_get_chain_size+0x6>
1005f036:	0148      	lsls	r0, r1, #5
1005f038:	e000      	b.n	1005f03c <Mem_Buff_get_chain_size+0x14>
1005f03a:	2000      	movs	r0, #0
1005f03c:	b280      	uxth	r0, r0
1005f03e:	4770      	bx	lr

1005f040 <Mem_Buff_resize>:
1005f040:	b570      	push	{r4, r5, r6, lr}
1005f042:	2400      	movs	r4, #0
1005f044:	2900      	cmp	r1, #0
1005f046:	d00a      	beq.n	1005f05e <Mem_Buff_resize+0x1e>
1005f048:	2600      	movs	r6, #0
1005f04a:	460d      	mov	r5, r1
1005f04c:	6809      	ldr	r1, [r1, #0]
1005f04e:	4633      	mov	r3, r6
1005f050:	3320      	adds	r3, #32
1005f052:	b29e      	uxth	r6, r3
1005f054:	4296      	cmp	r6, r2
1005f056:	d20e      	bcs.n	1005f076 <Mem_Buff_resize+0x36>
1005f058:	2900      	cmp	r1, #0
1005f05a:	d1f6      	bne.n	1005f04a <Mem_Buff_resize+0xa>
1005f05c:	e001      	b.n	1005f062 <Mem_Buff_resize+0x22>
1005f05e:	4623      	mov	r3, r4
1005f060:	4625      	mov	r5, r4
1005f062:	1ad1      	subs	r1, r2, r3
1005f064:	b289      	uxth	r1, r1
1005f066:	f7ff ffb1 	bl	1005efcc <Mem_Buff_get>
1005f06a:	6028      	str	r0, [r5, #0]
1005f06c:	2800      	cmp	r0, #0
1005f06e:	d10a      	bne.n	1005f086 <Mem_Buff_resize+0x46>
1005f070:	2079      	movs	r0, #121	@ 0x79
1005f072:	43c4      	mvns	r4, r0
1005f074:	e007      	b.n	1005f086 <Mem_Buff_resize+0x46>
1005f076:	2900      	cmp	r1, #0
1005f078:	d004      	beq.n	1005f084 <Mem_Buff_resize+0x44>
1005f07a:	f7ff ff8c 	bl	1005ef96 <Mem_Buff_release>
1005f07e:	2400      	movs	r4, #0
1005f080:	602c      	str	r4, [r5, #0]
1005f082:	e000      	b.n	1005f086 <Mem_Buff_resize+0x46>
1005f084:	2400      	movs	r4, #0
1005f086:	b2e0      	uxtb	r0, r4
1005f088:	bd70      	pop	{r4, r5, r6, pc}

1005f08a <Mem_Buff_get_buff_off>:
1005f08a:	2900      	cmp	r1, #0
1005f08c:	d008      	beq.n	1005f0a0 <Mem_Buff_get_buff_off+0x16>
1005f08e:	2800      	cmp	r0, #0
1005f090:	d009      	beq.n	1005f0a6 <Mem_Buff_get_buff_off+0x1c>
1005f092:	b28b      	uxth	r3, r1
1005f094:	2b20      	cmp	r3, #32
1005f096:	d304      	bcc.n	1005f0a2 <Mem_Buff_get_buff_off+0x18>
1005f098:	6800      	ldr	r0, [r0, #0]
1005f09a:	3920      	subs	r1, #32
1005f09c:	040b      	lsls	r3, r1, #16
1005f09e:	d1f6      	bne.n	1005f08e <Mem_Buff_get_buff_off+0x4>
1005f0a0:	2100      	movs	r1, #0
1005f0a2:	8011      	strh	r1, [r2, #0]
1005f0a4:	4770      	bx	lr
1005f0a6:	2000      	movs	r0, #0
1005f0a8:	4770      	bx	lr

1005f0aa <Mem_Buff_write>:
1005f0aa:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f0ac:	b081      	sub	sp, #4
1005f0ae:	4606      	mov	r6, r0
1005f0b0:	0950      	lsrs	r0, r2, #5
1005f0b2:	0604      	lsls	r4, r0, #24
1005f0b4:	d004      	beq.n	1005f0c0 <Mem_Buff_write+0x16>
1005f0b6:	2e00      	cmp	r6, #0
1005f0b8:	d02d      	beq.n	1005f116 <Mem_Buff_write+0x6c>
1005f0ba:	6836      	ldr	r6, [r6, #0]
1005f0bc:	1e40      	subs	r0, r0, #1
1005f0be:	e7f8      	b.n	1005f0b2 <Mem_Buff_write+0x8>
1005f0c0:	461c      	mov	r4, r3
1005f0c2:	1e5b      	subs	r3, r3, #1
1005f0c4:	4620      	mov	r0, r4
1005f0c6:	4198      	sbcs	r0, r3
1005f0c8:	2c00      	cmp	r4, #0
1005f0ca:	d01f      	beq.n	1005f10c <Mem_Buff_write+0x62>
1005f0cc:	2e00      	cmp	r6, #0
1005f0ce:	d01d      	beq.n	1005f10c <Mem_Buff_write+0x62>
1005f0d0:	201f      	movs	r0, #31
1005f0d2:	4002      	ands	r2, r0
1005f0d4:	2020      	movs	r0, #32
1005f0d6:	1a85      	subs	r5, r0, r2
1005f0d8:	b2a8      	uxth	r0, r5
1005f0da:	b2a3      	uxth	r3, r4
1005f0dc:	4298      	cmp	r0, r3
1005f0de:	d300      	bcc.n	1005f0e2 <Mem_Buff_write+0x38>
1005f0e0:	4625      	mov	r5, r4
1005f0e2:	9500      	str	r5, [sp, #0]
1005f0e4:	b2af      	uxth	r7, r5
1005f0e6:	18b0      	adds	r0, r6, r2
1005f0e8:	1d00      	adds	r0, r0, #4
1005f0ea:	463a      	mov	r2, r7
1005f0ec:	460d      	mov	r5, r1
1005f0ee:	f7e6 fec3 	bl	10045e78 <BLEPLAT_MemCpy>
1005f0f2:	9800      	ldr	r0, [sp, #0]
1005f0f4:	1a24      	subs	r4, r4, r0
1005f0f6:	b2a1      	uxth	r1, r4
1005f0f8:	1e4a      	subs	r2, r1, #1
1005f0fa:	4608      	mov	r0, r1
1005f0fc:	4190      	sbcs	r0, r2
1005f0fe:	2900      	cmp	r1, #0
1005f100:	d004      	beq.n	1005f10c <Mem_Buff_write+0x62>
1005f102:	19e9      	adds	r1, r5, r7
1005f104:	6836      	ldr	r6, [r6, #0]
1005f106:	2200      	movs	r2, #0
1005f108:	2e00      	cmp	r6, #0
1005f10a:	d1e3      	bne.n	1005f0d4 <Mem_Buff_write+0x2a>
1005f10c:	2800      	cmp	r0, #0
1005f10e:	d003      	beq.n	1005f118 <Mem_Buff_write+0x6e>
1005f110:	207e      	movs	r0, #126	@ 0x7e
1005f112:	43c0      	mvns	r0, r0
1005f114:	e000      	b.n	1005f118 <Mem_Buff_write+0x6e>
1005f116:	2081      	movs	r0, #129	@ 0x81
1005f118:	b2c0      	uxtb	r0, r0
1005f11a:	b001      	add	sp, #4
1005f11c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f11e <Mem_Buff_read>:
1005f11e:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f120:	b081      	sub	sp, #4
1005f122:	460d      	mov	r5, r1
1005f124:	4606      	mov	r6, r0
1005f126:	2a00      	cmp	r2, #0
1005f128:	d008      	beq.n	1005f13c <Mem_Buff_read+0x1e>
1005f12a:	2e00      	cmp	r6, #0
1005f12c:	d02a      	beq.n	1005f184 <Mem_Buff_read+0x66>
1005f12e:	b290      	uxth	r0, r2
1005f130:	2820      	cmp	r0, #32
1005f132:	d306      	bcc.n	1005f142 <Mem_Buff_read+0x24>
1005f134:	6836      	ldr	r6, [r6, #0]
1005f136:	3a20      	subs	r2, #32
1005f138:	0410      	lsls	r0, r2, #16
1005f13a:	d1f6      	bne.n	1005f12a <Mem_Buff_read+0xc>
1005f13c:	2e00      	cmp	r6, #0
1005f13e:	d021      	beq.n	1005f184 <Mem_Buff_read+0x66>
1005f140:	2200      	movs	r2, #0
1005f142:	2b00      	cmp	r3, #0
1005f144:	d020      	beq.n	1005f188 <Mem_Buff_read+0x6a>
1005f146:	2020      	movs	r0, #32
1005f148:	1a84      	subs	r4, r0, r2
1005f14a:	b2a0      	uxth	r0, r4
1005f14c:	b299      	uxth	r1, r3
1005f14e:	4288      	cmp	r0, r1
1005f150:	d300      	bcc.n	1005f154 <Mem_Buff_read+0x36>
1005f152:	461c      	mov	r4, r3
1005f154:	b2a7      	uxth	r7, r4
1005f156:	b290      	uxth	r0, r2
1005f158:	1830      	adds	r0, r6, r0
1005f15a:	1d01      	adds	r1, r0, #4
1005f15c:	4628      	mov	r0, r5
1005f15e:	463a      	mov	r2, r7
1005f160:	9300      	str	r3, [sp, #0]
1005f162:	f7e6 fe89 	bl	10045e78 <BLEPLAT_MemCpy>
1005f166:	9b00      	ldr	r3, [sp, #0]
1005f168:	1b1b      	subs	r3, r3, r4
1005f16a:	0418      	lsls	r0, r3, #16
1005f16c:	d004      	beq.n	1005f178 <Mem_Buff_read+0x5a>
1005f16e:	19ed      	adds	r5, r5, r7
1005f170:	6836      	ldr	r6, [r6, #0]
1005f172:	2200      	movs	r2, #0
1005f174:	2e00      	cmp	r6, #0
1005f176:	d1e6      	bne.n	1005f146 <Mem_Buff_read+0x28>
1005f178:	b298      	uxth	r0, r3
1005f17a:	2800      	cmp	r0, #0
1005f17c:	d005      	beq.n	1005f18a <Mem_Buff_read+0x6c>
1005f17e:	207e      	movs	r0, #126	@ 0x7e
1005f180:	43c0      	mvns	r0, r0
1005f182:	e002      	b.n	1005f18a <Mem_Buff_read+0x6c>
1005f184:	2081      	movs	r0, #129	@ 0x81
1005f186:	e000      	b.n	1005f18a <Mem_Buff_read+0x6c>
1005f188:	2000      	movs	r0, #0
1005f18a:	b2c0      	uxtb	r0, r0
1005f18c:	b001      	add	sp, #4
1005f18e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f190 <Mem_Buff_cmp>:
1005f190:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f192:	b083      	sub	sp, #12
1005f194:	9102      	str	r1, [sp, #8]
1005f196:	4606      	mov	r6, r0
1005f198:	2a00      	cmp	r2, #0
1005f19a:	d008      	beq.n	1005f1ae <Mem_Buff_cmp+0x1e>
1005f19c:	2e00      	cmp	r6, #0
1005f19e:	d033      	beq.n	1005f208 <Mem_Buff_cmp+0x78>
1005f1a0:	b290      	uxth	r0, r2
1005f1a2:	2820      	cmp	r0, #32
1005f1a4:	d306      	bcc.n	1005f1b4 <Mem_Buff_cmp+0x24>
1005f1a6:	6836      	ldr	r6, [r6, #0]
1005f1a8:	3a20      	subs	r2, #32
1005f1aa:	0410      	lsls	r0, r2, #16
1005f1ac:	d1f6      	bne.n	1005f19c <Mem_Buff_cmp+0xc>
1005f1ae:	2e00      	cmp	r6, #0
1005f1b0:	d02a      	beq.n	1005f208 <Mem_Buff_cmp+0x78>
1005f1b2:	2200      	movs	r2, #0
1005f1b4:	2b00      	cmp	r3, #0
1005f1b6:	9301      	str	r3, [sp, #4]
1005f1b8:	d020      	beq.n	1005f1fc <Mem_Buff_cmp+0x6c>
1005f1ba:	2700      	movs	r7, #0
1005f1bc:	461d      	mov	r5, r3
1005f1be:	b290      	uxth	r0, r2
1005f1c0:	281f      	cmp	r0, #31
1005f1c2:	d814      	bhi.n	1005f1ee <Mem_Buff_cmp+0x5e>
1005f1c4:	2120      	movs	r1, #32
1005f1c6:	1a8c      	subs	r4, r1, r2
1005f1c8:	b2a1      	uxth	r1, r4
1005f1ca:	b2aa      	uxth	r2, r5
1005f1cc:	4291      	cmp	r1, r2
1005f1ce:	d300      	bcc.n	1005f1d2 <Mem_Buff_cmp+0x42>
1005f1d0:	462c      	mov	r4, r5
1005f1d2:	b2a2      	uxth	r2, r4
1005f1d4:	b2b9      	uxth	r1, r7
1005f1d6:	9b02      	ldr	r3, [sp, #8]
1005f1d8:	1859      	adds	r1, r3, r1
1005f1da:	1830      	adds	r0, r6, r0
1005f1dc:	1d00      	adds	r0, r0, #4
1005f1de:	f7e6 fe6b 	bl	10045eb8 <BLEPLAT_MemCmp>
1005f1e2:	2800      	cmp	r0, #0
1005f1e4:	d10f      	bne.n	1005f206 <Mem_Buff_cmp+0x76>
1005f1e6:	1b2d      	subs	r5, r5, r4
1005f1e8:	19e7      	adds	r7, r4, r7
1005f1ea:	2200      	movs	r2, #0
1005f1ec:	e000      	b.n	1005f1f0 <Mem_Buff_cmp+0x60>
1005f1ee:	3a20      	subs	r2, #32
1005f1f0:	0428      	lsls	r0, r5, #16
1005f1f2:	d004      	beq.n	1005f1fe <Mem_Buff_cmp+0x6e>
1005f1f4:	6836      	ldr	r6, [r6, #0]
1005f1f6:	2e00      	cmp	r6, #0
1005f1f8:	d1e1      	bne.n	1005f1be <Mem_Buff_cmp+0x2e>
1005f1fa:	e000      	b.n	1005f1fe <Mem_Buff_cmp+0x6e>
1005f1fc:	2700      	movs	r7, #0
1005f1fe:	b2b8      	uxth	r0, r7
1005f200:	9b01      	ldr	r3, [sp, #4]
1005f202:	1a1b      	subs	r3, r3, r0
1005f204:	e000      	b.n	1005f208 <Mem_Buff_cmp+0x78>
1005f206:	4603      	mov	r3, r0
1005f208:	4618      	mov	r0, r3
1005f20a:	b003      	add	sp, #12
1005f20c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f20e <Mem_Buff_block_copy>:
1005f20e:	b510      	push	{r4, lr}
1005f210:	1e52      	subs	r2, r2, #1
1005f212:	231f      	movs	r3, #31
1005f214:	4313      	orrs	r3, r2
1005f216:	b29a      	uxth	r2, r3
1005f218:	1c53      	adds	r3, r2, #1
1005f21a:	b29a      	uxth	r2, r3
1005f21c:	429a      	cmp	r2, r3
1005f21e:	d001      	beq.n	1005f224 <Mem_Buff_block_copy+0x16>
1005f220:	2200      	movs	r2, #0
1005f222:	e00d      	b.n	1005f240 <Mem_Buff_block_copy+0x32>
1005f224:	0953      	lsrs	r3, r2, #5
1005f226:	460a      	mov	r2, r1
1005f228:	2100      	movs	r1, #0
1005f22a:	1854      	adds	r4, r2, r1
1005f22c:	6864      	ldr	r4, [r4, #4]
1005f22e:	5044      	str	r4, [r0, r1]
1005f230:	1d09      	adds	r1, r1, #4
1005f232:	2920      	cmp	r1, #32
1005f234:	d1f9      	bne.n	1005f22a <Mem_Buff_block_copy+0x1c>
1005f236:	6811      	ldr	r1, [r2, #0]
1005f238:	3020      	adds	r0, #32
1005f23a:	1e5b      	subs	r3, r3, #1
1005f23c:	041c      	lsls	r4, r3, #16
1005f23e:	d1f2      	bne.n	1005f226 <Mem_Buff_block_copy+0x18>
1005f240:	4610      	mov	r0, r2
1005f242:	bd10      	pop	{r4, pc}

1005f244 <Mem_Buff_block_write>:
1005f244:	b5b0      	push	{r4, r5, r7, lr}
1005f246:	1e52      	subs	r2, r2, #1
1005f248:	231f      	movs	r3, #31
1005f24a:	4313      	orrs	r3, r2
1005f24c:	b29a      	uxth	r2, r3
1005f24e:	1c53      	adds	r3, r2, #1
1005f250:	b29a      	uxth	r2, r3
1005f252:	429a      	cmp	r2, r3
1005f254:	d10c      	bne.n	1005f270 <Mem_Buff_block_write+0x2c>
1005f256:	0952      	lsrs	r2, r2, #5
1005f258:	1d03      	adds	r3, r0, #4
1005f25a:	2400      	movs	r4, #0
1005f25c:	590d      	ldr	r5, [r1, r4]
1005f25e:	511d      	str	r5, [r3, r4]
1005f260:	1d24      	adds	r4, r4, #4
1005f262:	2c20      	cmp	r4, #32
1005f264:	d1fa      	bne.n	1005f25c <Mem_Buff_block_write+0x18>
1005f266:	6800      	ldr	r0, [r0, #0]
1005f268:	3120      	adds	r1, #32
1005f26a:	1e52      	subs	r2, r2, #1
1005f26c:	0413      	lsls	r3, r2, #16
1005f26e:	d1f3      	bne.n	1005f258 <Mem_Buff_block_write+0x14>
1005f270:	bdb0      	pop	{r4, r5, r7, pc}

1005f272 <Mem_Buff_append>:
1005f272:	4602      	mov	r2, r0
1005f274:	6800      	ldr	r0, [r0, #0]
1005f276:	2800      	cmp	r0, #0
1005f278:	d1fb      	bne.n	1005f272 <Mem_Buff_append>
1005f27a:	6011      	str	r1, [r2, #0]
1005f27c:	4770      	bx	lr

1005f27e <Mem_Buff_squize_buffer>:
1005f27e:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f280:	b08d      	sub	sp, #52	@ 0x34
1005f282:	4291      	cmp	r1, r2
1005f284:	d300      	bcc.n	1005f288 <Mem_Buff_squize_buffer+0xa>
1005f286:	e083      	b.n	1005f390 <Mem_Buff_squize_buffer+0x112>
1005f288:	4613      	mov	r3, r2
1005f28a:	4606      	mov	r6, r0
1005f28c:	2900      	cmp	r1, #0
1005f28e:	d00c      	beq.n	1005f2aa <Mem_Buff_squize_buffer+0x2c>
1005f290:	460c      	mov	r4, r1
1005f292:	4635      	mov	r5, r6
1005f294:	2d00      	cmp	r5, #0
1005f296:	d00b      	beq.n	1005f2b0 <Mem_Buff_squize_buffer+0x32>
1005f298:	b2a0      	uxth	r0, r4
1005f29a:	2820      	cmp	r0, #32
1005f29c:	d309      	bcc.n	1005f2b2 <Mem_Buff_squize_buffer+0x34>
1005f29e:	682d      	ldr	r5, [r5, #0]
1005f2a0:	3c20      	subs	r4, #32
1005f2a2:	0420      	lsls	r0, r4, #16
1005f2a4:	d1f6      	bne.n	1005f294 <Mem_Buff_squize_buffer+0x16>
1005f2a6:	2400      	movs	r4, #0
1005f2a8:	e003      	b.n	1005f2b2 <Mem_Buff_squize_buffer+0x34>
1005f2aa:	2400      	movs	r4, #0
1005f2ac:	4635      	mov	r5, r6
1005f2ae:	e000      	b.n	1005f2b2 <Mem_Buff_squize_buffer+0x34>
1005f2b0:	2500      	movs	r5, #0
1005f2b2:	461f      	mov	r7, r3
1005f2b4:	4632      	mov	r2, r6
1005f2b6:	2a00      	cmp	r2, #0
1005f2b8:	d008      	beq.n	1005f2cc <Mem_Buff_squize_buffer+0x4e>
1005f2ba:	b2b8      	uxth	r0, r7
1005f2bc:	2820      	cmp	r0, #32
1005f2be:	d306      	bcc.n	1005f2ce <Mem_Buff_squize_buffer+0x50>
1005f2c0:	6812      	ldr	r2, [r2, #0]
1005f2c2:	3f20      	subs	r7, #32
1005f2c4:	0438      	lsls	r0, r7, #16
1005f2c6:	d1f6      	bne.n	1005f2b6 <Mem_Buff_squize_buffer+0x38>
1005f2c8:	2700      	movs	r7, #0
1005f2ca:	e000      	b.n	1005f2ce <Mem_Buff_squize_buffer+0x50>
1005f2cc:	2200      	movs	r2, #0
1005f2ce:	0420      	lsls	r0, r4, #16
1005f2d0:	d00a      	beq.n	1005f2e8 <Mem_Buff_squize_buffer+0x6a>
1005f2d2:	9102      	str	r1, [sp, #8]
1005f2d4:	1d29      	adds	r1, r5, #4
1005f2d6:	9204      	str	r2, [sp, #16]
1005f2d8:	b2a2      	uxth	r2, r4
1005f2da:	a805      	add	r0, sp, #20
1005f2dc:	9303      	str	r3, [sp, #12]
1005f2de:	f7e6 fdcb 	bl	10045e78 <BLEPLAT_MemCpy>
1005f2e2:	9902      	ldr	r1, [sp, #8]
1005f2e4:	9b03      	ldr	r3, [sp, #12]
1005f2e6:	9a04      	ldr	r2, [sp, #16]
1005f2e8:	2e00      	cmp	r6, #0
1005f2ea:	9501      	str	r5, [sp, #4]
1005f2ec:	d006      	beq.n	1005f2fc <Mem_Buff_squize_buffer+0x7e>
1005f2ee:	2000      	movs	r0, #0
1005f2f0:	6836      	ldr	r6, [r6, #0]
1005f2f2:	1c40      	adds	r0, r0, #1
1005f2f4:	2e00      	cmp	r6, #0
1005f2f6:	d1fb      	bne.n	1005f2f0 <Mem_Buff_squize_buffer+0x72>
1005f2f8:	0140      	lsls	r0, r0, #5
1005f2fa:	e000      	b.n	1005f2fe <Mem_Buff_squize_buffer+0x80>
1005f2fc:	2000      	movs	r0, #0
1005f2fe:	2a00      	cmp	r2, #0
1005f300:	d03d      	beq.n	1005f37e <Mem_Buff_squize_buffer+0x100>
1005f302:	1ac9      	subs	r1, r1, r3
1005f304:	180d      	adds	r5, r1, r0
1005f306:	0428      	lsls	r0, r5, #16
1005f308:	d039      	beq.n	1005f37e <Mem_Buff_squize_buffer+0x100>
1005f30a:	9204      	str	r2, [sp, #16]
1005f30c:	2120      	movs	r1, #32
1005f30e:	1bc8      	subs	r0, r1, r7
1005f310:	b282      	uxth	r2, r0
1005f312:	b2ab      	uxth	r3, r5
1005f314:	429a      	cmp	r2, r3
1005f316:	d300      	bcc.n	1005f31a <Mem_Buff_squize_buffer+0x9c>
1005f318:	4628      	mov	r0, r5
1005f31a:	9502      	str	r5, [sp, #8]
1005f31c:	b282      	uxth	r2, r0
1005f31e:	1b0d      	subs	r5, r1, r4
1005f320:	b2a9      	uxth	r1, r5
1005f322:	4291      	cmp	r1, r2
1005f324:	d300      	bcc.n	1005f328 <Mem_Buff_squize_buffer+0xaa>
1005f326:	4605      	mov	r5, r0
1005f328:	b2aa      	uxth	r2, r5
1005f32a:	b2a0      	uxth	r0, r4
1005f32c:	a905      	add	r1, sp, #20
1005f32e:	1808      	adds	r0, r1, r0
1005f330:	b2b9      	uxth	r1, r7
1005f332:	9e04      	ldr	r6, [sp, #16]
1005f334:	1871      	adds	r1, r6, r1
1005f336:	1d09      	adds	r1, r1, #4
1005f338:	f7e6 fd9e 	bl	10045e78 <BLEPLAT_MemCpy>
1005f33c:	192c      	adds	r4, r5, r4
1005f33e:	19ef      	adds	r7, r5, r7
1005f340:	9703      	str	r7, [sp, #12]
1005f342:	b2b8      	uxth	r0, r7
1005f344:	2820      	cmp	r0, #32
1005f346:	d103      	bne.n	1005f350 <Mem_Buff_squize_buffer+0xd2>
1005f348:	6832      	ldr	r2, [r6, #0]
1005f34a:	2000      	movs	r0, #0
1005f34c:	9003      	str	r0, [sp, #12]
1005f34e:	e000      	b.n	1005f352 <Mem_Buff_squize_buffer+0xd4>
1005f350:	4632      	mov	r2, r6
1005f352:	b2a0      	uxth	r0, r4
1005f354:	2820      	cmp	r0, #32
1005f356:	d10a      	bne.n	1005f36e <Mem_Buff_squize_buffer+0xf0>
1005f358:	9c01      	ldr	r4, [sp, #4]
1005f35a:	1d20      	adds	r0, r4, #4
1005f35c:	a905      	add	r1, sp, #20
1005f35e:	9204      	str	r2, [sp, #16]
1005f360:	2220      	movs	r2, #32
1005f362:	f7e6 fd89 	bl	10045e78 <BLEPLAT_MemCpy>
1005f366:	9a04      	ldr	r2, [sp, #16]
1005f368:	6824      	ldr	r4, [r4, #0]
1005f36a:	9401      	str	r4, [sp, #4]
1005f36c:	2400      	movs	r4, #0
1005f36e:	9f03      	ldr	r7, [sp, #12]
1005f370:	2a00      	cmp	r2, #0
1005f372:	d007      	beq.n	1005f384 <Mem_Buff_squize_buffer+0x106>
1005f374:	9802      	ldr	r0, [sp, #8]
1005f376:	1b45      	subs	r5, r0, r5
1005f378:	0428      	lsls	r0, r5, #16
1005f37a:	d1c6      	bne.n	1005f30a <Mem_Buff_squize_buffer+0x8c>
1005f37c:	e002      	b.n	1005f384 <Mem_Buff_squize_buffer+0x106>
1005f37e:	b2a0      	uxth	r0, r4
1005f380:	2820      	cmp	r0, #32
1005f382:	d005      	beq.n	1005f390 <Mem_Buff_squize_buffer+0x112>
1005f384:	9801      	ldr	r0, [sp, #4]
1005f386:	1d00      	adds	r0, r0, #4
1005f388:	b2a2      	uxth	r2, r4
1005f38a:	a905      	add	r1, sp, #20
1005f38c:	f7e6 fd74 	bl	10045e78 <BLEPLAT_MemCpy>
1005f390:	b00d      	add	sp, #52	@ 0x34
1005f392:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f394 <BlueNRG_Stack_Initialize_RAM_check>:
1005f394:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f396:	b097      	sub	sp, #92	@ 0x5c
1005f398:	4ce5      	ldr	r4, [pc, #916]	@ (1005f730 <__arm_cp.0_4>)
1005f39a:	2067      	movs	r0, #103	@ 0x67
1005f39c:	43c5      	mvns	r5, r0
1005f39e:	f7f2 fc56 	bl	10051c4e <conn_supp_csr_ucfg>
1005f3a2:	4ee4      	ldr	r6, [pc, #912]	@ (1005f734 <__arm_cp.0_5>)
1005f3a4:	2801      	cmp	r0, #1
1005f3a6:	d002      	beq.n	1005f3ae <BlueNRG_Stack_Initialize_RAM_check+0x1a>
1005f3a8:	7af0      	ldrb	r0, [r6, #11]
1005f3aa:	2800      	cmp	r0, #0
1005f3ac:	d010      	beq.n	1005f3d0 <BlueNRG_Stack_Initialize_RAM_check+0x3c>
1005f3ae:	4627      	mov	r7, r4
1005f3b0:	462c      	mov	r4, r5
1005f3b2:	3438      	adds	r4, #56	@ 0x38
1005f3b4:	f7f2 fc4b 	bl	10051c4e <conn_supp_csr_ucfg>
1005f3b8:	7af1      	ldrb	r1, [r6, #11]
1005f3ba:	4361      	muls	r1, r4
1005f3bc:	4378      	muls	r0, r7
1005f3be:	1838      	adds	r0, r7, r0
1005f3c0:	1844      	adds	r4, r0, r1
1005f3c2:	f7f2 fc44 	bl	10051c4e <conn_supp_csr_ucfg>
1005f3c6:	7af1      	ldrb	r1, [r6, #11]
1005f3c8:	4341      	muls	r1, r0
1005f3ca:	48db      	ldr	r0, [pc, #876]	@ (1005f738 <__arm_cp.0_6>)
1005f3cc:	4348      	muls	r0, r1
1005f3ce:	1824      	adds	r4, r4, r0
1005f3d0:	3426      	adds	r4, #38	@ 0x26
1005f3d2:	f7f2 fc3c 	bl	10051c4e <conn_supp_csr_ucfg>
1005f3d6:	2801      	cmp	r0, #1
1005f3d8:	d10e      	bne.n	1005f3f8 <BlueNRG_Stack_Initialize_RAM_check+0x64>
1005f3da:	4628      	mov	r0, r5
1005f3dc:	3060      	adds	r0, #96	@ 0x60
1005f3de:	8931      	ldrh	r1, [r6, #8]
1005f3e0:	4341      	muls	r1, r0
1005f3e2:	4628      	mov	r0, r5
1005f3e4:	3044      	adds	r0, #68	@ 0x44
1005f3e6:	7ab2      	ldrb	r2, [r6, #10]
1005f3e8:	4342      	muls	r2, r0
1005f3ea:	1850      	adds	r0, r2, r1
1005f3ec:	4629      	mov	r1, r5
1005f3ee:	3148      	adds	r1, #72	@ 0x48
1005f3f0:	7b32      	ldrb	r2, [r6, #12]
1005f3f2:	434a      	muls	r2, r1
1005f3f4:	1880      	adds	r0, r0, r2
1005f3f6:	e000      	b.n	1005f3fa <BlueNRG_Stack_Initialize_RAM_check+0x66>
1005f3f8:	2000      	movs	r0, #0
1005f3fa:	9003      	str	r0, [sp, #12]
1005f3fc:	89f0      	ldrh	r0, [r6, #14]
1005f3fe:	900a      	str	r0, [sp, #40]	@ 0x28
1005f400:	f7f8 fbe5 	bl	10057bce <data_length_extension_csr_ucfg_weak>
1005f404:	2801      	cmp	r0, #1
1005f406:	d001      	beq.n	1005f40c <BlueNRG_Stack_Initialize_RAM_check+0x78>
1005f408:	f7fe fe2d 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005f40c:	f7f2 fc17 	bl	10051c3e <phy_upd_csr_ucfg>
1005f410:	2801      	cmp	r0, #1
1005f412:	9411      	str	r4, [sp, #68]	@ 0x44
1005f414:	d109      	bne.n	1005f42a <BlueNRG_Stack_Initialize_RAM_check+0x96>
1005f416:	462c      	mov	r4, r5
1005f418:	3438      	adds	r4, #56	@ 0x38
1005f41a:	f7f2 fc18 	bl	10051c4e <conn_supp_csr_ucfg>
1005f41e:	4360      	muls	r0, r4
1005f420:	7af1      	ldrb	r1, [r6, #11]
1005f422:	4341      	muls	r1, r0
1005f424:	3908      	subs	r1, #8
1005f426:	9109      	str	r1, [sp, #36]	@ 0x24
1005f428:	e001      	b.n	1005f42e <BlueNRG_Stack_Initialize_RAM_check+0x9a>
1005f42a:	2000      	movs	r0, #0
1005f42c:	9009      	str	r0, [sp, #36]	@ 0x24
1005f42e:	48f2      	ldr	r0, [pc, #968]	@ (1005f7f8 <__arm_cp.0_3>)
1005f430:	304c      	adds	r0, #76	@ 0x4c
1005f432:	9013      	str	r0, [sp, #76]	@ 0x4c
1005f434:	f7fe fe17 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005f438:	2801      	cmp	r0, #1
1005f43a:	d015      	beq.n	1005f468 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005f43c:	f7f8 fbc7 	bl	10057bce <data_length_extension_csr_ucfg_weak>
1005f440:	2801      	cmp	r0, #1
1005f442:	d011      	beq.n	1005f468 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005f444:	2029      	movs	r0, #41	@ 0x29
1005f446:	5c30      	ldrb	r0, [r6, r0]
1005f448:	2800      	cmp	r0, #0
1005f44a:	d10d      	bne.n	1005f468 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005f44c:	2025      	movs	r0, #37	@ 0x25
1005f44e:	5c30      	ldrb	r0, [r6, r0]
1005f450:	2800      	cmp	r0, #0
1005f452:	d109      	bne.n	1005f468 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1005f454:	2026      	movs	r0, #38	@ 0x26
1005f456:	5c30      	ldrb	r0, [r6, r0]
1005f458:	2800      	cmp	r0, #0
1005f45a:	d002      	beq.n	1005f462 <BlueNRG_Stack_Initialize_RAM_check+0xce>
1005f45c:	48e6      	ldr	r0, [pc, #920]	@ (1005f7f8 <__arm_cp.0_3>)
1005f45e:	304c      	adds	r0, #76	@ 0x4c
1005f460:	e001      	b.n	1005f466 <BlueNRG_Stack_Initialize_RAM_check+0xd2>
1005f462:	4628      	mov	r0, r5
1005f464:	3024      	adds	r0, #36	@ 0x24
1005f466:	9013      	str	r0, [sp, #76]	@ 0x4c
1005f468:	48e3      	ldr	r0, [pc, #908]	@ (1005f7f8 <__arm_cp.0_3>)
1005f46a:	306c      	adds	r0, #108	@ 0x6c
1005f46c:	9012      	str	r0, [sp, #72]	@ 0x48
1005f46e:	f7fe fdfa 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005f472:	2801      	cmp	r0, #1
1005f474:	d015      	beq.n	1005f4a2 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005f476:	f7f8 fbaa 	bl	10057bce <data_length_extension_csr_ucfg_weak>
1005f47a:	2801      	cmp	r0, #1
1005f47c:	d011      	beq.n	1005f4a2 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005f47e:	2029      	movs	r0, #41	@ 0x29
1005f480:	5c30      	ldrb	r0, [r6, r0]
1005f482:	2800      	cmp	r0, #0
1005f484:	d10d      	bne.n	1005f4a2 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005f486:	2025      	movs	r0, #37	@ 0x25
1005f488:	5c30      	ldrb	r0, [r6, r0]
1005f48a:	2800      	cmp	r0, #0
1005f48c:	d109      	bne.n	1005f4a2 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1005f48e:	2026      	movs	r0, #38	@ 0x26
1005f490:	5c30      	ldrb	r0, [r6, r0]
1005f492:	2800      	cmp	r0, #0
1005f494:	d002      	beq.n	1005f49c <BlueNRG_Stack_Initialize_RAM_check+0x108>
1005f496:	48d8      	ldr	r0, [pc, #864]	@ (1005f7f8 <__arm_cp.0_3>)
1005f498:	306c      	adds	r0, #108	@ 0x6c
1005f49a:	e001      	b.n	1005f4a0 <BlueNRG_Stack_Initialize_RAM_check+0x10c>
1005f49c:	4628      	mov	r0, r5
1005f49e:	303c      	adds	r0, #60	@ 0x3c
1005f4a0:	9012      	str	r0, [sp, #72]	@ 0x48
1005f4a2:	f7fe fde0 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005f4a6:	9010      	str	r0, [sp, #64]	@ 0x40
1005f4a8:	7eb0      	ldrb	r0, [r6, #26]
1005f4aa:	9000      	str	r0, [sp, #0]
1005f4ac:	7ff0      	ldrb	r0, [r6, #31]
1005f4ae:	900f      	str	r0, [sp, #60]	@ 0x3c
1005f4b0:	f7f2 fbcd 	bl	10051c4e <conn_supp_csr_ucfg>
1005f4b4:	9007      	str	r0, [sp, #28]
1005f4b6:	7ff0      	ldrb	r0, [r6, #31]
1005f4b8:	9001      	str	r0, [sp, #4]
1005f4ba:	f7fb fc36 	bl	1005ad2a <llc_priv_controller_privacy_csr_ucfg_weak>
1005f4be:	9008      	str	r0, [sp, #32]
1005f4c0:	7ff0      	ldrb	r0, [r6, #31]
1005f4c2:	9002      	str	r0, [sp, #8]
1005f4c4:	f7f2 fc5b 	bl	10051d7e <secure_connections_csr_ucfg>
1005f4c8:	2700      	movs	r7, #0
1005f4ca:	f7f8 fb86 	bl	10057bda <scan_csr_ucfg_weak>
1005f4ce:	2801      	cmp	r0, #1
1005f4d0:	4638      	mov	r0, r7
1005f4d2:	9515      	str	r5, [sp, #84]	@ 0x54
1005f4d4:	9716      	str	r7, [sp, #88]	@ 0x58
1005f4d6:	d14f      	bne.n	1005f578 <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
1005f4d8:	7f70      	ldrb	r0, [r6, #29]
1005f4da:	280a      	cmp	r0, #10
1005f4dc:	d300      	bcc.n	1005f4e0 <BlueNRG_Stack_Initialize_RAM_check+0x14c>
1005f4de:	200a      	movs	r0, #10
1005f4e0:	462c      	mov	r4, r5
1005f4e2:	3438      	adds	r4, #56	@ 0x38
1005f4e4:	4344      	muls	r4, r0
1005f4e6:	3cc0      	subs	r4, #192	@ 0xc0
1005f4e8:	2500      	movs	r5, #0
1005f4ea:	f7fb fc0f 	bl	1005ad0c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005f4ee:	2801      	cmp	r0, #1
1005f4f0:	462f      	mov	r7, r5
1005f4f2:	d120      	bne.n	1005f536 <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
1005f4f4:	f7f2 fbab 	bl	10051c4e <conn_supp_csr_ucfg>
1005f4f8:	2801      	cmp	r0, #1
1005f4fa:	950e      	str	r5, [sp, #56]	@ 0x38
1005f4fc:	d003      	beq.n	1005f506 <BlueNRG_Stack_Initialize_RAM_check+0x172>
1005f4fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1005f500:	4618      	mov	r0, r3
1005f502:	3054      	adds	r0, #84	@ 0x54
1005f504:	e002      	b.n	1005f50c <BlueNRG_Stack_Initialize_RAM_check+0x178>
1005f506:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1005f508:	4618      	mov	r0, r3
1005f50a:	3048      	adds	r0, #72	@ 0x48
1005f50c:	49ba      	ldr	r1, [pc, #744]	@ (1005f7f8 <__arm_cp.0_3>)
1005f50e:	31e4      	adds	r1, #228	@ 0xe4
1005f510:	7fb2      	ldrb	r2, [r6, #30]
1005f512:	434a      	muls	r2, r1
1005f514:	1810      	adds	r0, r2, r0
1005f516:	4635      	mov	r5, r6
1005f518:	461e      	mov	r6, r3
1005f51a:	3660      	adds	r6, #96	@ 0x60
1005f51c:	7fe9      	ldrb	r1, [r5, #31]
1005f51e:	4632      	mov	r2, r6
1005f520:	408a      	lsls	r2, r1
1005f522:	1887      	adds	r7, r0, r2
1005f524:	f7f2 fb93 	bl	10051c4e <conn_supp_csr_ucfg>
1005f528:	2801      	cmp	r0, #1
1005f52a:	d102      	bne.n	1005f532 <BlueNRG_Stack_Initialize_RAM_check+0x19e>
1005f52c:	7ae8      	ldrb	r0, [r5, #11]
1005f52e:	4346      	muls	r6, r0
1005f530:	19bf      	adds	r7, r7, r6
1005f532:	462e      	mov	r6, r5
1005f534:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1005f536:	19e0      	adds	r0, r4, r7
1005f538:	9014      	str	r0, [sp, #80]	@ 0x50
1005f53a:	f7fb fbe9 	bl	1005ad10 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005f53e:	4607      	mov	r7, r0
1005f540:	f7fb fbe4 	bl	1005ad0c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005f544:	4604      	mov	r4, r0
1005f546:	403c      	ands	r4, r7
1005f548:	f7f2 fb81 	bl	10051c4e <conn_supp_csr_ucfg>
1005f54c:	4020      	ands	r0, r4
1005f54e:	2801      	cmp	r0, #1
1005f550:	d108      	bne.n	1005f564 <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
1005f552:	7ef0      	ldrb	r0, [r6, #27]
1005f554:	1e40      	subs	r0, r0, #1
1005f556:	2103      	movs	r1, #3
1005f558:	4301      	orrs	r1, r0
1005f55a:	7fb0      	ldrb	r0, [r6, #30]
1005f55c:	22b0      	movs	r2, #176	@ 0xb0
1005f55e:	4342      	muls	r2, r0
1005f560:	43d0      	mvns	r0, r2
1005f562:	1a45      	subs	r5, r0, r1
1005f564:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005f566:	1944      	adds	r4, r0, r5
1005f568:	f7fe fd7d 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005f56c:	4360      	muls	r0, r4
1005f56e:	49a2      	ldr	r1, [pc, #648]	@ (1005f7f8 <__arm_cp.0_3>)
1005f570:	1808      	adds	r0, r1, r0
1005f572:	302c      	adds	r0, #44	@ 0x2c
1005f574:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005f576:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005f578:	9006      	str	r0, [sp, #24]
1005f57a:	f7f2 fb68 	bl	10051c4e <conn_supp_csr_ucfg>
1005f57e:	2801      	cmp	r0, #1
1005f580:	4639      	mov	r1, r7
1005f582:	d109      	bne.n	1005f598 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1005f584:	f7f8 fcf0 	bl	10057f68 <l2c_cos_csr_ucfg_weak>
1005f588:	2801      	cmp	r0, #1
1005f58a:	4639      	mov	r1, r7
1005f58c:	d104      	bne.n	1005f598 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1005f58e:	2022      	movs	r0, #34	@ 0x22
1005f590:	5c30      	ldrb	r0, [r6, r0]
1005f592:	4629      	mov	r1, r5
1005f594:	3114      	adds	r1, #20
1005f596:	4341      	muls	r1, r0
1005f598:	9105      	str	r1, [sp, #20]
1005f59a:	f7fb fbb7 	bl	1005ad0c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005f59e:	2801      	cmp	r0, #1
1005f5a0:	4638      	mov	r0, r7
1005f5a2:	d121      	bne.n	1005f5e8 <BlueNRG_Stack_Initialize_RAM_check+0x254>
1005f5a4:	4894      	ldr	r0, [pc, #592]	@ (1005f7f8 <__arm_cp.0_3>)
1005f5a6:	30d4      	adds	r0, #212	@ 0xd4
1005f5a8:	7eb1      	ldrb	r1, [r6, #26]
1005f5aa:	4341      	muls	r1, r0
1005f5ac:	4628      	mov	r0, r5
1005f5ae:	3048      	adds	r0, #72	@ 0x48
1005f5b0:	7af2      	ldrb	r2, [r6, #11]
1005f5b2:	4342      	muls	r2, r0
1005f5b4:	1854      	adds	r4, r2, r1
1005f5b6:	2700      	movs	r7, #0
1005f5b8:	f7fb fbaa 	bl	1005ad10 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005f5bc:	2801      	cmp	r0, #1
1005f5be:	d110      	bne.n	1005f5e2 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1005f5c0:	f7f2 fb45 	bl	10051c4e <conn_supp_csr_ucfg>
1005f5c4:	2801      	cmp	r0, #1
1005f5c6:	d10c      	bne.n	1005f5e2 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1005f5c8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1005f5ca:	4610      	mov	r0, r2
1005f5cc:	3058      	adds	r0, #88	@ 0x58
1005f5ce:	7f31      	ldrb	r1, [r6, #28]
1005f5d0:	4341      	muls	r1, r0
1005f5d2:	4610      	mov	r0, r2
1005f5d4:	3060      	adds	r0, #96	@ 0x60
1005f5d6:	7ef2      	ldrb	r2, [r6, #27]
1005f5d8:	4342      	muls	r2, r0
1005f5da:	1850      	adds	r0, r2, r1
1005f5dc:	3884      	subs	r0, #132	@ 0x84
1005f5de:	7eb7      	ldrb	r7, [r6, #26]
1005f5e0:	4347      	muls	r7, r0
1005f5e2:	19e0      	adds	r0, r4, r7
1005f5e4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005f5e6:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005f5e8:	900e      	str	r0, [sp, #56]	@ 0x38
1005f5ea:	f7f8 f9ab 	bl	10057944 <cte_csr_ucfg_weak>
1005f5ee:	2801      	cmp	r0, #1
1005f5f0:	4638      	mov	r0, r7
1005f5f2:	d133      	bne.n	1005f65c <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
1005f5f4:	f7f2 fb2b 	bl	10051c4e <conn_supp_csr_ucfg>
1005f5f8:	2801      	cmp	r0, #1
1005f5fa:	d002      	beq.n	1005f602 <BlueNRG_Stack_Initialize_RAM_check+0x26e>
1005f5fc:	462f      	mov	r7, r5
1005f5fe:	375c      	adds	r7, #92	@ 0x5c
1005f600:	e004      	b.n	1005f60c <BlueNRG_Stack_Initialize_RAM_check+0x278>
1005f602:	4628      	mov	r0, r5
1005f604:	3060      	adds	r0, #96	@ 0x60
1005f606:	7af7      	ldrb	r7, [r6, #11]
1005f608:	4347      	muls	r7, r0
1005f60a:	3f0c      	subs	r7, #12
1005f60c:	2523      	movs	r5, #35	@ 0x23
1005f60e:	5d70      	ldrb	r0, [r6, r5]
1005f610:	2400      	movs	r4, #0
1005f612:	2800      	cmp	r0, #0
1005f614:	4620      	mov	r0, r4
1005f616:	d005      	beq.n	1005f624 <BlueNRG_Stack_Initialize_RAM_check+0x290>
1005f618:	f7f2 fb19 	bl	10051c4e <conn_supp_csr_ucfg>
1005f61c:	5d70      	ldrb	r0, [r6, r5]
1005f61e:	4240      	negs	r0, r0
1005f620:	2103      	movs	r1, #3
1005f622:	4388      	bics	r0, r1
1005f624:	19c0      	adds	r0, r0, r7
1005f626:	2724      	movs	r7, #36	@ 0x24
1005f628:	5df1      	ldrb	r1, [r6, r7]
1005f62a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1005f62c:	3264      	adds	r2, #100	@ 0x64
1005f62e:	434a      	muls	r2, r1
1005f630:	1885      	adds	r5, r0, r2
1005f632:	f7f8 fad2 	bl	10057bda <scan_csr_ucfg_weak>
1005f636:	2801      	cmp	r0, #1
1005f638:	d10d      	bne.n	1005f656 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005f63a:	f7fe fd14 	bl	1005e066 <ext_adv_scan_enabled_ucfg_weak>
1005f63e:	2801      	cmp	r0, #1
1005f640:	d109      	bne.n	1005f656 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005f642:	f7fb fb63 	bl	1005ad0c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005f646:	2801      	cmp	r0, #1
1005f648:	d105      	bne.n	1005f656 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005f64a:	5df4      	ldrb	r4, [r6, r7]
1005f64c:	2c00      	cmp	r4, #0
1005f64e:	9815      	ldr	r0, [sp, #84]	@ 0x54
1005f650:	d001      	beq.n	1005f656 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1005f652:	4604      	mov	r4, r0
1005f654:	3450      	adds	r4, #80	@ 0x50
1005f656:	1928      	adds	r0, r5, r4
1005f658:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005f65a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1005f65c:	900d      	str	r0, [sp, #52]	@ 0x34
1005f65e:	f7f2 faf6 	bl	10051c4e <conn_supp_csr_ucfg>
1005f662:	2801      	cmp	r0, #1
1005f664:	4639      	mov	r1, r7
1005f666:	d109      	bne.n	1005f67c <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1005f668:	f7f8 fab3 	bl	10057bd2 <pcl_csr_ucfg_weak>
1005f66c:	2801      	cmp	r0, #1
1005f66e:	4639      	mov	r1, r7
1005f670:	d104      	bne.n	1005f67c <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1005f672:	4628      	mov	r0, r5
1005f674:	3048      	adds	r0, #72	@ 0x48
1005f676:	7af1      	ldrb	r1, [r6, #11]
1005f678:	4341      	muls	r1, r0
1005f67a:	3914      	subs	r1, #20
1005f67c:	910c      	str	r1, [sp, #48]	@ 0x30
1005f67e:	f7f2 fae6 	bl	10051c4e <conn_supp_csr_ucfg>
1005f682:	2801      	cmp	r0, #1
1005f684:	463a      	mov	r2, r7
1005f686:	d108      	bne.n	1005f69a <BlueNRG_Stack_Initialize_RAM_check+0x306>
1005f688:	f7fb fc9f 	bl	1005afca <chc_csr_ucfg_weak>
1005f68c:	2801      	cmp	r0, #1
1005f68e:	463a      	mov	r2, r7
1005f690:	d103      	bne.n	1005f69a <BlueNRG_Stack_Initialize_RAM_check+0x306>
1005f692:	4628      	mov	r0, r5
1005f694:	304c      	adds	r0, #76	@ 0x4c
1005f696:	7af2      	ldrb	r2, [r6, #11]
1005f698:	4342      	muls	r2, r0
1005f69a:	2026      	movs	r0, #38	@ 0x26
1005f69c:	5c31      	ldrb	r1, [r6, r0]
1005f69e:	2025      	movs	r0, #37	@ 0x25
1005f6a0:	5c34      	ldrb	r4, [r6, r0]
1005f6a2:	1863      	adds	r3, r4, r1
1005f6a4:	2029      	movs	r0, #41	@ 0x29
1005f6a6:	5c30      	ldrb	r0, [r6, r0]
1005f6a8:	9304      	str	r3, [sp, #16]
1005f6aa:	2b00      	cmp	r3, #0
1005f6ac:	9014      	str	r0, [sp, #80]	@ 0x50
1005f6ae:	d010      	beq.n	1005f6d2 <BlueNRG_Stack_Initialize_RAM_check+0x33e>
1005f6b0:	2028      	movs	r0, #40	@ 0x28
1005f6b2:	5c33      	ldrb	r3, [r6, r0]
1005f6b4:	4628      	mov	r0, r5
1005f6b6:	3060      	adds	r0, #96	@ 0x60
1005f6b8:	4358      	muls	r0, r3
1005f6ba:	38f8      	subs	r0, #248	@ 0xf8
1005f6bc:	4348      	muls	r0, r1
1005f6be:	2327      	movs	r3, #39	@ 0x27
1005f6c0:	5cf3      	ldrb	r3, [r6, r3]
1005f6c2:	3554      	adds	r5, #84	@ 0x54
1005f6c4:	435d      	muls	r5, r3
1005f6c6:	4b4c      	ldr	r3, [pc, #304]	@ (1005f7f8 <__arm_cp.0_3>)
1005f6c8:	195b      	adds	r3, r3, r5
1005f6ca:	3348      	adds	r3, #72	@ 0x48
1005f6cc:	4363      	muls	r3, r4
1005f6ce:	181f      	adds	r7, r3, r0
1005f6d0:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005f6d2:	2800      	cmp	r0, #0
1005f6d4:	9716      	str	r7, [sp, #88]	@ 0x58
1005f6d6:	920b      	str	r2, [sp, #44]	@ 0x2c
1005f6d8:	d00d      	beq.n	1005f6f6 <BlueNRG_Stack_Initialize_RAM_check+0x362>
1005f6da:	4602      	mov	r2, r0
1005f6dc:	202a      	movs	r0, #42	@ 0x2a
1005f6de:	5c30      	ldrb	r0, [r6, r0]
1005f6e0:	4d45      	ldr	r5, [pc, #276]	@ (1005f7f8 <__arm_cp.0_3>)
1005f6e2:	462b      	mov	r3, r5
1005f6e4:	33b0      	adds	r3, #176	@ 0xb0
1005f6e6:	4343      	muls	r3, r0
1005f6e8:	4637      	mov	r7, r6
1005f6ea:	462e      	mov	r6, r5
1005f6ec:	36c8      	adds	r6, #200	@ 0xc8
1005f6ee:	4356      	muls	r6, r2
1005f6f0:	18f3      	adds	r3, r6, r3
1005f6f2:	3b48      	subs	r3, #72	@ 0x48
1005f6f4:	e003      	b.n	1005f6fe <BlueNRG_Stack_Initialize_RAM_check+0x36a>
1005f6f6:	202a      	movs	r0, #42	@ 0x2a
1005f6f8:	5c30      	ldrb	r0, [r6, r0]
1005f6fa:	2300      	movs	r3, #0
1005f6fc:	4637      	mov	r7, r6
1005f6fe:	2628      	movs	r6, #40	@ 0x28
1005f700:	5dbe      	ldrb	r6, [r7, r6]
1005f702:	4371      	muls	r1, r6
1005f704:	1809      	adds	r1, r1, r0
1005f706:	2627      	movs	r6, #39	@ 0x27
1005f708:	463d      	mov	r5, r7
1005f70a:	5dbe      	ldrb	r6, [r7, r6]
1005f70c:	4374      	muls	r4, r6
1005f70e:	1824      	adds	r4, r4, r0
1005f710:	1860      	adds	r0, r4, r1
1005f712:	d013      	beq.n	1005f73c <__arm_cp.0_6+0x4>
1005f714:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1005f716:	463e      	mov	r6, r7
1005f718:	364c      	adds	r6, #76	@ 0x4c
1005f71a:	4366      	muls	r6, r4
1005f71c:	463c      	mov	r4, r7
1005f71e:	3434      	adds	r4, #52	@ 0x34
1005f720:	434c      	muls	r4, r1
1005f722:	19a1      	adds	r1, r4, r6
1005f724:	463c      	mov	r4, r7
1005f726:	345c      	adds	r4, #92	@ 0x5c
1005f728:	4344      	muls	r4, r0
1005f72a:	190c      	adds	r4, r1, r4
1005f72c:	3c14      	subs	r4, #20
1005f72e:	e007      	b.n	1005f740 <__arm_cp.0_6+0x8>

1005f730 <__arm_cp.0_4>:
1005f730:	fffffc10 	.word	0xfffffc10

1005f734 <__arm_cp.0_5>:
1005f734:	20001188 	.word	0x20001188

1005f738 <__arm_cp.0_6>:
1005f738:	fffffd7c 	.word	0xfffffd7c
1005f73c:	2400      	movs	r4, #0
1005f73e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1005f740:	9903      	ldr	r1, [sp, #12]
1005f742:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1005f744:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005f746:	1808      	adds	r0, r1, r0
1005f748:	4639      	mov	r1, r7
1005f74a:	3144      	adds	r1, #68	@ 0x44
1005f74c:	4371      	muls	r1, r6
1005f74e:	1840      	adds	r0, r0, r1
1005f750:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005f752:	1840      	adds	r0, r0, r1
1005f754:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1005f756:	1840      	adds	r0, r0, r1
1005f758:	9912      	ldr	r1, [sp, #72]	@ 0x48
1005f75a:	1841      	adds	r1, r0, r1
1005f75c:	4638      	mov	r0, r7
1005f75e:	3060      	adds	r0, #96	@ 0x60
1005f760:	4606      	mov	r6, r0
1005f762:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005f764:	4096      	lsls	r6, r2
1005f766:	1989      	adds	r1, r1, r6
1005f768:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005f76a:	2a01      	cmp	r2, #1
1005f76c:	d106      	bne.n	1005f77c <__arm_cp.0_6+0x44>
1005f76e:	4e22      	ldr	r6, [pc, #136]	@ (1005f7f8 <__arm_cp.0_3>)
1005f770:	9a00      	ldr	r2, [sp, #0]
1005f772:	4356      	muls	r6, r2
1005f774:	1871      	adds	r1, r6, r1
1005f776:	2645      	movs	r6, #69	@ 0x45
1005f778:	00b6      	lsls	r6, r6, #2
1005f77a:	1989      	adds	r1, r1, r6
1005f77c:	462e      	mov	r6, r5
1005f77e:	9d07      	ldr	r5, [sp, #28]
1005f780:	9a05      	ldr	r2, [sp, #20]
1005f782:	2d01      	cmp	r5, #1
1005f784:	d102      	bne.n	1005f78c <__arm_cp.0_6+0x54>
1005f786:	9d01      	ldr	r5, [sp, #4]
1005f788:	40a8      	lsls	r0, r5
1005f78a:	1809      	adds	r1, r1, r0
1005f78c:	9808      	ldr	r0, [sp, #32]
1005f78e:	2801      	cmp	r0, #1
1005f790:	d105      	bne.n	1005f79e <__arm_cp.0_6+0x66>
1005f792:	4638      	mov	r0, r7
1005f794:	3018      	adds	r0, #24
1005f796:	9d02      	ldr	r5, [sp, #8]
1005f798:	40a8      	lsls	r0, r5
1005f79a:	1841      	adds	r1, r0, r1
1005f79c:	3970      	subs	r1, #112	@ 0x70
1005f79e:	9806      	ldr	r0, [sp, #24]
1005f7a0:	9d04      	ldr	r5, [sp, #16]
1005f7a2:	1808      	adds	r0, r1, r0
1005f7a4:	1880      	adds	r0, r0, r2
1005f7a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005f7a8:	1840      	adds	r0, r0, r1
1005f7aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005f7ac:	1840      	adds	r0, r0, r1
1005f7ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005f7b0:	1840      	adds	r0, r0, r1
1005f7b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005f7b4:	1840      	adds	r0, r0, r1
1005f7b6:	9914      	ldr	r1, [sp, #80]	@ 0x50
1005f7b8:	42cd      	cmn	r5, r1
1005f7ba:	d001      	beq.n	1005f7c0 <__arm_cp.0_6+0x88>
1005f7bc:	1838      	adds	r0, r7, r0
1005f7be:	3058      	adds	r0, #88	@ 0x58
1005f7c0:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005f7c2:	1840      	adds	r0, r0, r1
1005f7c4:	18c0      	adds	r0, r0, r3
1005f7c6:	1904      	adds	r4, r0, r4
1005f7c8:	f7f3 fe4c 	bl	10053464 <log_csr_ucfg_weak>
1005f7cc:	2801      	cmp	r0, #1
1005f7ce:	d100      	bne.n	1005f7d2 <__arm_cp.0_6+0x9a>
1005f7d0:	19e4      	adds	r4, r4, r7
1005f7d2:	6870      	ldr	r0, [r6, #4]
1005f7d4:	1820      	adds	r0, r4, r0
1005f7d6:	2103      	movs	r1, #3
1005f7d8:	43c9      	mvns	r1, r1
1005f7da:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
1005f7dc:	1cd2      	adds	r2, r2, #3
1005f7de:	400a      	ands	r2, r1
1005f7e0:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
1005f7e2:	1cdb      	adds	r3, r3, #3
1005f7e4:	400b      	ands	r3, r1
1005f7e6:	189a      	adds	r2, r3, r2
1005f7e8:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
1005f7ea:	1cdb      	adds	r3, r3, #3
1005f7ec:	400b      	ands	r3, r1
1005f7ee:	18d1      	adds	r1, r2, r3
1005f7f0:	1a40      	subs	r0, r0, r1
1005f7f2:	b017      	add	sp, #92	@ 0x5c
1005f7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f7f6:	46c0      	nop			@ (mov r8, r8)

1005f7f8 <__arm_cp.0_3>:
1005f7f8:	fffffe90 	.word	0xfffffe90

1005f7fc <sdb_sap_clear_all_records>:
1005f7fc:	b580      	push	{r7, lr}
1005f7fe:	f002 fbcf 	bl	10061fa0 <nvm_discard_all_records>
1005f802:	bd80      	pop	{r7, pc}

1005f804 <sdb_sap_get_security_records_count>:
1005f804:	b580      	push	{r7, lr}
1005f806:	f002 fbb8 	bl	10061f7a <nvm_sec_db_get_record_count>
1005f80a:	bd80      	pop	{r7, pc}

1005f80c <sdb_sap_add_security_record>:
1005f80c:	b5b0      	push	{r4, r5, r7, lr}
1005f80e:	b094      	sub	sp, #80	@ 0x50
1005f810:	4604      	mov	r4, r0
1005f812:	7841      	ldrb	r1, [r0, #1]
1005f814:	2501      	movs	r5, #1
1005f816:	4029      	ands	r1, r5
1005f818:	303e      	adds	r0, #62	@ 0x3e
1005f81a:	466a      	mov	r2, sp
1005f81c:	f000 f819 	bl	1005f852 <sdb_sap_read_security_record>
1005f820:	2800      	cmp	r0, #0
1005f822:	d10c      	bne.n	1005f83e <sdb_sap_add_security_record+0x32>
1005f824:	4669      	mov	r1, sp
1005f826:	2250      	movs	r2, #80	@ 0x50
1005f828:	4620      	mov	r0, r4
1005f82a:	f7e6 fb45 	bl	10045eb8 <BLEPLAT_MemCmp>
1005f82e:	2800      	cmp	r0, #0
1005f830:	d008      	beq.n	1005f844 <sdb_sap_add_security_record+0x38>
1005f832:	4669      	mov	r1, sp
1005f834:	7848      	ldrb	r0, [r1, #1]
1005f836:	4028      	ands	r0, r5
1005f838:	313e      	adds	r1, #62	@ 0x3e
1005f83a:	f000 f83b 	bl	1005f8b4 <sdb_remove_security_record_by_address>
1005f83e:	7860      	ldrb	r0, [r4, #1]
1005f840:	2810      	cmp	r0, #16
1005f842:	d201      	bcs.n	1005f848 <sdb_sap_add_security_record+0x3c>
1005f844:	2000      	movs	r0, #0
1005f846:	e002      	b.n	1005f84e <sdb_sap_add_security_record+0x42>
1005f848:	4620      	mov	r0, r4
1005f84a:	f002 fb8b 	bl	10061f64 <nvm_sec_db_add_record>
1005f84e:	b014      	add	sp, #80	@ 0x50
1005f850:	bdb0      	pop	{r4, r5, r7, pc}

1005f852 <sdb_sap_read_security_record>:
1005f852:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f854:	4614      	mov	r4, r2
1005f856:	4606      	mov	r6, r0
1005f858:	2501      	movs	r5, #1
1005f85a:	9102      	str	r1, [sp, #8]
1005f85c:	2901      	cmp	r1, #1
1005f85e:	d105      	bne.n	1005f86c <sdb_sap_read_security_record+0x1a>
1005f860:	7970      	ldrb	r0, [r6, #5]
1005f862:	21c0      	movs	r1, #192	@ 0xc0
1005f864:	4001      	ands	r1, r0
1005f866:	2940      	cmp	r1, #64	@ 0x40
1005f868:	d100      	bne.n	1005f86c <sdb_sap_read_security_record+0x1a>
1005f86a:	2500      	movs	r5, #0
1005f86c:	f002 fb62 	bl	10061f34 <nvm_sec_db_read_init>
1005f870:	4620      	mov	r0, r4
1005f872:	303e      	adds	r0, #62	@ 0x3e
1005f874:	9001      	str	r0, [sp, #4]
1005f876:	4627      	mov	r7, r4
1005f878:	371e      	adds	r7, #30
1005f87a:	4620      	mov	r0, r4
1005f87c:	f002 fb60 	bl	10061f40 <nvm_sec_db_read_next_record>
1005f880:	2800      	cmp	r0, #0
1005f882:	d115      	bne.n	1005f8b0 <sdb_sap_read_security_record+0x5e>
1005f884:	2d00      	cmp	r5, #0
1005f886:	d00b      	beq.n	1005f8a0 <sdb_sap_read_security_record+0x4e>
1005f888:	7860      	ldrb	r0, [r4, #1]
1005f88a:	2101      	movs	r1, #1
1005f88c:	4001      	ands	r1, r0
1005f88e:	9802      	ldr	r0, [sp, #8]
1005f890:	4281      	cmp	r1, r0
1005f892:	d1f2      	bne.n	1005f87a <sdb_sap_read_security_record+0x28>
1005f894:	2206      	movs	r2, #6
1005f896:	9801      	ldr	r0, [sp, #4]
1005f898:	4631      	mov	r1, r6
1005f89a:	f7e6 fb0d 	bl	10045eb8 <BLEPLAT_MemCmp>
1005f89e:	e003      	b.n	1005f8a8 <sdb_sap_read_security_record+0x56>
1005f8a0:	4630      	mov	r0, r6
1005f8a2:	4639      	mov	r1, r7
1005f8a4:	f000 f980 	bl	1005fba8 <smp_sap_crt_resolve_rpa>
1005f8a8:	2800      	cmp	r0, #0
1005f8aa:	d1e6      	bne.n	1005f87a <sdb_sap_read_security_record+0x28>
1005f8ac:	2000      	movs	r0, #0
1005f8ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f8b0:	20b3      	movs	r0, #179	@ 0xb3
1005f8b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005f8b4 <sdb_remove_security_record_by_address>:
1005f8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f8b6:	b095      	sub	sp, #84	@ 0x54
1005f8b8:	460c      	mov	r4, r1
1005f8ba:	4605      	mov	r5, r0
1005f8bc:	f002 fb3a 	bl	10061f34 <nvm_sec_db_read_init>
1005f8c0:	ae01      	add	r6, sp, #4
1005f8c2:	363e      	adds	r6, #62	@ 0x3e
1005f8c4:	27b3      	movs	r7, #179	@ 0xb3
1005f8c6:	a801      	add	r0, sp, #4
1005f8c8:	f002 fb3a 	bl	10061f40 <nvm_sec_db_read_next_record>
1005f8cc:	2800      	cmp	r0, #0
1005f8ce:	d110      	bne.n	1005f8f2 <sdb_remove_security_record_by_address+0x3e>
1005f8d0:	2206      	movs	r2, #6
1005f8d2:	4630      	mov	r0, r6
1005f8d4:	4621      	mov	r1, r4
1005f8d6:	f7e6 faef 	bl	10045eb8 <BLEPLAT_MemCmp>
1005f8da:	a901      	add	r1, sp, #4
1005f8dc:	7849      	ldrb	r1, [r1, #1]
1005f8de:	2201      	movs	r2, #1
1005f8e0:	400a      	ands	r2, r1
1005f8e2:	42aa      	cmp	r2, r5
1005f8e4:	d1ef      	bne.n	1005f8c6 <sdb_remove_security_record_by_address+0x12>
1005f8e6:	2800      	cmp	r0, #0
1005f8e8:	d1ed      	bne.n	1005f8c6 <sdb_remove_security_record_by_address+0x12>
1005f8ea:	f002 fb5e 	bl	10061faa <nvm_discard_current_record>
1005f8ee:	2700      	movs	r7, #0
1005f8f0:	e7e9      	b.n	1005f8c6 <sdb_remove_security_record_by_address+0x12>
1005f8f2:	b2f8      	uxtb	r0, r7
1005f8f4:	b015      	add	sp, #84	@ 0x54
1005f8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f8f8 <sdb_sap_read_security_record_sequential>:
1005f8f8:	b5b0      	push	{r4, r5, r7, lr}
1005f8fa:	4604      	mov	r4, r0
1005f8fc:	4d07      	ldr	r5, [pc, #28]	@ (1005f91c <__arm_cp.5_0>)
1005f8fe:	7828      	ldrb	r0, [r5, #0]
1005f900:	2800      	cmp	r0, #0
1005f902:	d103      	bne.n	1005f90c <sdb_sap_read_security_record_sequential+0x14>
1005f904:	f002 fb16 	bl	10061f34 <nvm_sec_db_read_init>
1005f908:	2001      	movs	r0, #1
1005f90a:	7028      	strb	r0, [r5, #0]
1005f90c:	4620      	mov	r0, r4
1005f90e:	f002 fb17 	bl	10061f40 <nvm_sec_db_read_next_record>
1005f912:	2800      	cmp	r0, #0
1005f914:	d001      	beq.n	1005f91a <sdb_sap_read_security_record_sequential+0x22>
1005f916:	2100      	movs	r1, #0
1005f918:	7029      	strb	r1, [r5, #0]
1005f91a:	bdb0      	pop	{r4, r5, r7, pc}

1005f91c <__arm_cp.5_0>:
1005f91c:	200011bc 	.word	0x200011bc

1005f920 <sdb_sap_del_bonded_device>:
1005f920:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005f922:	460d      	mov	r5, r1
1005f924:	4604      	mov	r4, r0
1005f926:	aa01      	add	r2, sp, #4
1005f928:	4608      	mov	r0, r1
1005f92a:	4621      	mov	r1, r4
1005f92c:	f000 f87f 	bl	1005fa2e <sdb_gatt_search_record>
1005f930:	2800      	cmp	r0, #0
1005f932:	d101      	bne.n	1005f938 <sdb_sap_del_bonded_device+0x18>
1005f934:	f002 fb39 	bl	10061faa <nvm_discard_current_record>
1005f938:	4628      	mov	r0, r5
1005f93a:	4621      	mov	r1, r4
1005f93c:	f7ff ffba 	bl	1005f8b4 <sdb_remove_security_record_by_address>
1005f940:	b004      	add	sp, #16
1005f942:	bdb0      	pop	{r4, r5, r7, pc}

1005f944 <sdb_sap_read_security_record_matching>:
1005f944:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f946:	4614      	mov	r4, r2
1005f948:	9101      	str	r1, [sp, #4]
1005f94a:	4606      	mov	r6, r0
1005f94c:	f002 faf2 	bl	10061f34 <nvm_sec_db_read_init>
1005f950:	4627      	mov	r7, r4
1005f952:	3744      	adds	r7, #68	@ 0x44
1005f954:	4620      	mov	r0, r4
1005f956:	f002 faf3 	bl	10061f40 <nvm_sec_db_read_next_record>
1005f95a:	2800      	cmp	r0, #0
1005f95c:	d111      	bne.n	1005f982 <sdb_sap_read_security_record_matching+0x3e>
1005f95e:	7860      	ldrb	r0, [r4, #1]
1005f960:	06c0      	lsls	r0, r0, #27
1005f962:	d5f7      	bpl.n	1005f954 <sdb_sap_read_security_record_matching+0x10>
1005f964:	ad02      	add	r5, sp, #8
1005f966:	4638      	mov	r0, r7
1005f968:	9901      	ldr	r1, [sp, #4]
1005f96a:	462a      	mov	r2, r5
1005f96c:	f000 f87a 	bl	1005fa64 <smp_sap_crt_generate_ediv>
1005f970:	2202      	movs	r2, #2
1005f972:	4628      	mov	r0, r5
1005f974:	4631      	mov	r1, r6
1005f976:	f7e6 fa9f 	bl	10045eb8 <BLEPLAT_MemCmp>
1005f97a:	2800      	cmp	r0, #0
1005f97c:	d1ea      	bne.n	1005f954 <sdb_sap_read_security_record_matching+0x10>
1005f97e:	2000      	movs	r0, #0
1005f980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f982:	2081      	movs	r0, #129	@ 0x81
1005f984:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005f986 <SDB_sap_write_peer_bonded_gatt_client_data>:
1005f986:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f988:	b085      	sub	sp, #20
1005f98a:	461e      	mov	r6, r3
1005f98c:	4617      	mov	r7, r2
1005f98e:	460d      	mov	r5, r1
1005f990:	4604      	mov	r4, r0
1005f992:	aa02      	add	r2, sp, #8
1005f994:	4608      	mov	r0, r1
1005f996:	4621      	mov	r1, r4
1005f998:	f000 f849 	bl	1005fa2e <sdb_gatt_search_record>
1005f99c:	2800      	cmp	r0, #0
1005f99e:	d10b      	bne.n	1005f9b8 <SDB_sap_write_peer_bonded_gatt_client_data+0x32>
1005f9a0:	9804      	ldr	r0, [sp, #16]
1005f9a2:	42b8      	cmp	r0, r7
1005f9a4:	d106      	bne.n	1005f9b4 <SDB_sap_write_peer_bonded_gatt_client_data+0x2e>
1005f9a6:	b2ba      	uxth	r2, r7
1005f9a8:	200c      	movs	r0, #12
1005f9aa:	4631      	mov	r1, r6
1005f9ac:	f7e6 fa14 	bl	10045dd8 <BLEPLAT_NvmCompare>
1005f9b0:	2800      	cmp	r0, #0
1005f9b2:	d016      	beq.n	1005f9e2 <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
1005f9b4:	f002 faf9 	bl	10061faa <nvm_discard_current_record>
1005f9b8:	9601      	str	r6, [sp, #4]
1005f9ba:	ae02      	add	r6, sp, #8
1005f9bc:	7035      	strb	r5, [r6, #0]
1005f9be:	1c70      	adds	r0, r6, #1
1005f9c0:	2206      	movs	r2, #6
1005f9c2:	4621      	mov	r1, r4
1005f9c4:	f7e6 fa58 	bl	10045e78 <BLEPLAT_MemCpy>
1005f9c8:	9704      	str	r7, [sp, #16]
1005f9ca:	4630      	mov	r0, r6
1005f9cc:	9901      	ldr	r1, [sp, #4]
1005f9ce:	f002 faa4 	bl	10061f1a <nvm_gatt_db_update_record>
1005f9d2:	2800      	cmp	r0, #0
1005f9d4:	d005      	beq.n	1005f9e2 <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
1005f9d6:	4606      	mov	r6, r0
1005f9d8:	4628      	mov	r0, r5
1005f9da:	4621      	mov	r1, r4
1005f9dc:	f7ff ff6a 	bl	1005f8b4 <sdb_remove_security_record_by_address>
1005f9e0:	e000      	b.n	1005f9e4 <SDB_sap_write_peer_bonded_gatt_client_data+0x5e>
1005f9e2:	2600      	movs	r6, #0
1005f9e4:	4630      	mov	r0, r6
1005f9e6:	b005      	add	sp, #20
1005f9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f9ea <SDB_sap_read_peer_bonded_gatt_client_data>:
1005f9ea:	b5b0      	push	{r4, r5, r7, lr}
1005f9ec:	b098      	sub	sp, #96	@ 0x60
1005f9ee:	461c      	mov	r4, r3
1005f9f0:	4615      	mov	r5, r2
1005f9f2:	aa01      	add	r2, sp, #4
1005f9f4:	f7ff ff2d 	bl	1005f852 <sdb_sap_read_security_record>
1005f9f8:	2800      	cmp	r0, #0
1005f9fa:	d116      	bne.n	1005fa2a <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005f9fc:	a901      	add	r1, sp, #4
1005f9fe:	784a      	ldrb	r2, [r1, #1]
1005fa00:	2001      	movs	r0, #1
1005fa02:	4010      	ands	r0, r2
1005fa04:	313e      	adds	r1, #62	@ 0x3e
1005fa06:	aa15      	add	r2, sp, #84	@ 0x54
1005fa08:	f000 f811 	bl	1005fa2e <sdb_gatt_search_record>
1005fa0c:	2800      	cmp	r0, #0
1005fa0e:	d001      	beq.n	1005fa14 <SDB_sap_read_peer_bonded_gatt_client_data+0x2a>
1005fa10:	20b3      	movs	r0, #179	@ 0xb3
1005fa12:	e00a      	b.n	1005fa2a <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005fa14:	6829      	ldr	r1, [r5, #0]
1005fa16:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005fa18:	4288      	cmp	r0, r1
1005fa1a:	d901      	bls.n	1005fa20 <SDB_sap_read_peer_bonded_gatt_client_data+0x36>
1005fa1c:	2087      	movs	r0, #135	@ 0x87
1005fa1e:	e004      	b.n	1005fa2a <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1005fa20:	6028      	str	r0, [r5, #0]
1005fa22:	b281      	uxth	r1, r0
1005fa24:	4620      	mov	r0, r4
1005fa26:	f002 fa6d 	bl	10061f04 <nvm_gatt_db_read_full_current_record>
1005fa2a:	b018      	add	sp, #96	@ 0x60
1005fa2c:	bdb0      	pop	{r4, r5, r7, pc}

1005fa2e <sdb_gatt_search_record>:
1005fa2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005fa30:	4614      	mov	r4, r2
1005fa32:	460d      	mov	r5, r1
1005fa34:	4606      	mov	r6, r0
1005fa36:	f002 fa3f 	bl	10061eb8 <nvm_gatt_db_read_init>
1005fa3a:	1c67      	adds	r7, r4, #1
1005fa3c:	4620      	mov	r0, r4
1005fa3e:	f002 fa41 	bl	10061ec4 <nvm_gatt_db_read_next_record>
1005fa42:	2800      	cmp	r0, #0
1005fa44:	d10b      	bne.n	1005fa5e <sdb_gatt_search_record+0x30>
1005fa46:	2206      	movs	r2, #6
1005fa48:	4628      	mov	r0, r5
1005fa4a:	4639      	mov	r1, r7
1005fa4c:	f7e6 fa34 	bl	10045eb8 <BLEPLAT_MemCmp>
1005fa50:	2800      	cmp	r0, #0
1005fa52:	d1f3      	bne.n	1005fa3c <sdb_gatt_search_record+0xe>
1005fa54:	7820      	ldrb	r0, [r4, #0]
1005fa56:	42b0      	cmp	r0, r6
1005fa58:	d1f0      	bne.n	1005fa3c <sdb_gatt_search_record+0xe>
1005fa5a:	2000      	movs	r0, #0
1005fa5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005fa5e:	20b3      	movs	r0, #179	@ 0xb3
1005fa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005fa64 <smp_sap_crt_generate_ediv>:
1005fa64:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fa66:	b091      	sub	sp, #68	@ 0x44
1005fa68:	9201      	str	r2, [sp, #4]
1005fa6a:	9100      	str	r1, [sp, #0]
1005fa6c:	4605      	mov	r5, r0
1005fa6e:	a908      	add	r1, sp, #32
1005fa70:	2003      	movs	r0, #3
1005fa72:	8008      	strh	r0, [r1, #0]
1005fa74:	aa07      	add	r2, sp, #28
1005fa76:	2400      	movs	r4, #0
1005fa78:	8014      	strh	r4, [r2, #0]
1005fa7a:	4814      	ldr	r0, [pc, #80]	@ (1005facc <__arm_cp.0_0>)
1005fa7c:	6800      	ldr	r0, [r0, #0]
1005fa7e:	3018      	adds	r0, #24
1005fa80:	af03      	add	r7, sp, #12
1005fa82:	463b      	mov	r3, r7
1005fa84:	f000 f824 	bl	1005fad0 <smp_crt_diversify>
1005fa88:	ae0d      	add	r6, sp, #52	@ 0x34
1005fa8a:	2210      	movs	r2, #16
1005fa8c:	4630      	mov	r0, r6
1005fa8e:	4621      	mov	r1, r4
1005fa90:	f7e6 fa02 	bl	10045e98 <BLEPLAT_MemSet>
1005fa94:	2208      	movs	r2, #8
1005fa96:	4630      	mov	r0, r6
1005fa98:	9900      	ldr	r1, [sp, #0]
1005fa9a:	f7e6 f9ed 	bl	10045e78 <BLEPLAT_MemCpy>
1005fa9e:	ac09      	add	r4, sp, #36	@ 0x24
1005faa0:	4638      	mov	r0, r7
1005faa2:	4631      	mov	r1, r6
1005faa4:	4622      	mov	r2, r4
1005faa6:	f7f7 ff4f 	bl	10057948 <hci_le_encrypt>
1005faaa:	ae02      	add	r6, sp, #8
1005faac:	2202      	movs	r2, #2
1005faae:	4630      	mov	r0, r6
1005fab0:	4621      	mov	r1, r4
1005fab2:	f7e6 f9e1 	bl	10045e78 <BLEPLAT_MemCpy>
1005fab6:	7828      	ldrb	r0, [r5, #0]
1005fab8:	9902      	ldr	r1, [sp, #8]
1005faba:	4041      	eors	r1, r0
1005fabc:	9a01      	ldr	r2, [sp, #4]
1005fabe:	7011      	strb	r1, [r2, #0]
1005fac0:	7870      	ldrb	r0, [r6, #1]
1005fac2:	7869      	ldrb	r1, [r5, #1]
1005fac4:	4041      	eors	r1, r0
1005fac6:	7051      	strb	r1, [r2, #1]
1005fac8:	b011      	add	sp, #68	@ 0x44
1005faca:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005facc <__arm_cp.0_0>:
1005facc:	20001120 	.word	0x20001120

1005fad0 <smp_crt_diversify>:
1005fad0:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005fad2:	780d      	ldrb	r5, [r1, #0]
1005fad4:	466c      	mov	r4, sp
1005fad6:	7025      	strb	r5, [r4, #0]
1005fad8:	7849      	ldrb	r1, [r1, #1]
1005fada:	7061      	strb	r1, [r4, #1]
1005fadc:	7811      	ldrb	r1, [r2, #0]
1005fade:	70a1      	strb	r1, [r4, #2]
1005fae0:	7851      	ldrb	r1, [r2, #1]
1005fae2:	70e1      	strb	r1, [r4, #3]
1005fae4:	2100      	movs	r1, #0
1005fae6:	9103      	str	r1, [sp, #12]
1005fae8:	9102      	str	r1, [sp, #8]
1005faea:	9101      	str	r1, [sp, #4]
1005faec:	4621      	mov	r1, r4
1005faee:	461a      	mov	r2, r3
1005faf0:	f7f7 ff2a 	bl	10057948 <hci_le_encrypt>
1005faf4:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

1005faf8 <smp_sap_crt_generate_local_irk>:
1005faf8:	b5e0      	push	{r5, r6, r7, lr}
1005fafa:	4603      	mov	r3, r0
1005fafc:	a901      	add	r1, sp, #4
1005fafe:	2001      	movs	r0, #1
1005fb00:	8008      	strh	r0, [r1, #0]
1005fb02:	466a      	mov	r2, sp
1005fb04:	2000      	movs	r0, #0
1005fb06:	8010      	strh	r0, [r2, #0]
1005fb08:	4802      	ldr	r0, [pc, #8]	@ (1005fb14 <__arm_cp.2_0>)
1005fb0a:	6800      	ldr	r0, [r0, #0]
1005fb0c:	3018      	adds	r0, #24
1005fb0e:	f7ff ffdf 	bl	1005fad0 <smp_crt_diversify>
1005fb12:	bd8c      	pop	{r2, r3, r7, pc}

1005fb14 <__arm_cp.2_0>:
1005fb14:	20001120 	.word	0x20001120

1005fb18 <smp_sap_crt_generate_rpa>:
1005fb18:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fb1a:	b087      	sub	sp, #28
1005fb1c:	9000      	str	r0, [sp, #0]
1005fb1e:	ae03      	add	r6, sp, #12
1005fb20:	4630      	mov	r0, r6
1005fb22:	f7ff ffe9 	bl	1005faf8 <smp_sap_crt_generate_local_irk>
1005fb26:	2700      	movs	r7, #0
1005fb28:	4638      	mov	r0, r7
1005fb2a:	f002 fdee 	bl	1006270a <Hal_Get_Random_Number>
1005fb2e:	0a01      	lsrs	r1, r0, #8
1005fb30:	ad02      	add	r5, sp, #8
1005fb32:	7069      	strb	r1, [r5, #1]
1005fb34:	243f      	movs	r4, #63	@ 0x3f
1005fb36:	4004      	ands	r4, r0
1005fb38:	3440      	adds	r4, #64	@ 0x40
1005fb3a:	4638      	mov	r0, r7
1005fb3c:	f002 fde5 	bl	1006270a <Hal_Get_Random_Number>
1005fb40:	70ac      	strb	r4, [r5, #2]
1005fb42:	7028      	strb	r0, [r5, #0]
1005fb44:	af01      	add	r7, sp, #4
1005fb46:	4630      	mov	r0, r6
1005fb48:	4629      	mov	r1, r5
1005fb4a:	463a      	mov	r2, r7
1005fb4c:	f000 f80e 	bl	1005fb6c <smp_crt_calculate_hash>
1005fb50:	2603      	movs	r6, #3
1005fb52:	9c00      	ldr	r4, [sp, #0]
1005fb54:	4620      	mov	r0, r4
1005fb56:	4639      	mov	r1, r7
1005fb58:	4632      	mov	r2, r6
1005fb5a:	f7e6 f98d 	bl	10045e78 <BLEPLAT_MemCpy>
1005fb5e:	1ce0      	adds	r0, r4, #3
1005fb60:	4629      	mov	r1, r5
1005fb62:	4632      	mov	r2, r6
1005fb64:	f7e6 f988 	bl	10045e78 <BLEPLAT_MemCpy>
1005fb68:	b007      	add	sp, #28
1005fb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fb6c <smp_crt_calculate_hash>:
1005fb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fb6e:	b089      	sub	sp, #36	@ 0x24
1005fb70:	9200      	str	r2, [sp, #0]
1005fb72:	460f      	mov	r7, r1
1005fb74:	4605      	mov	r5, r0
1005fb76:	ae05      	add	r6, sp, #20
1005fb78:	2100      	movs	r1, #0
1005fb7a:	2210      	movs	r2, #16
1005fb7c:	4630      	mov	r0, r6
1005fb7e:	f7e6 f98b 	bl	10045e98 <BLEPLAT_MemSet>
1005fb82:	2403      	movs	r4, #3
1005fb84:	4630      	mov	r0, r6
1005fb86:	4639      	mov	r1, r7
1005fb88:	4622      	mov	r2, r4
1005fb8a:	f7e6 f975 	bl	10045e78 <BLEPLAT_MemCpy>
1005fb8e:	af01      	add	r7, sp, #4
1005fb90:	4628      	mov	r0, r5
1005fb92:	4631      	mov	r1, r6
1005fb94:	463a      	mov	r2, r7
1005fb96:	f7f7 fed7 	bl	10057948 <hci_le_encrypt>
1005fb9a:	9800      	ldr	r0, [sp, #0]
1005fb9c:	4639      	mov	r1, r7
1005fb9e:	4622      	mov	r2, r4
1005fba0:	f7e6 f96a 	bl	10045e78 <BLEPLAT_MemCpy>
1005fba4:	b009      	add	sp, #36	@ 0x24
1005fba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fba8 <smp_sap_crt_resolve_rpa>:
1005fba8:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005fbaa:	460a      	mov	r2, r1
1005fbac:	4604      	mov	r4, r0
1005fbae:	1cc1      	adds	r1, r0, #3
1005fbb0:	ad01      	add	r5, sp, #4
1005fbb2:	4610      	mov	r0, r2
1005fbb4:	462a      	mov	r2, r5
1005fbb6:	f7ff ffd9 	bl	1005fb6c <smp_crt_calculate_hash>
1005fbba:	2203      	movs	r2, #3
1005fbbc:	4628      	mov	r0, r5
1005fbbe:	4621      	mov	r1, r4
1005fbc0:	f7e6 f97a 	bl	10045eb8 <BLEPLAT_MemCmp>
1005fbc4:	2800      	cmp	r0, #0
1005fbc6:	d000      	beq.n	1005fbca <smp_sap_crt_resolve_rpa+0x22>
1005fbc8:	2081      	movs	r0, #129	@ 0x81
1005fbca:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005fbcc <smp_crt_s1_generate_stk>:
1005fbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fbce:	b085      	sub	sp, #20
1005fbd0:	9300      	str	r3, [sp, #0]
1005fbd2:	4617      	mov	r7, r2
1005fbd4:	4605      	mov	r5, r0
1005fbd6:	ae01      	add	r6, sp, #4
1005fbd8:	4630      	mov	r0, r6
1005fbda:	3008      	adds	r0, #8
1005fbdc:	2408      	movs	r4, #8
1005fbde:	4622      	mov	r2, r4
1005fbe0:	f7e6 f94a 	bl	10045e78 <BLEPLAT_MemCpy>
1005fbe4:	4630      	mov	r0, r6
1005fbe6:	4639      	mov	r1, r7
1005fbe8:	4622      	mov	r2, r4
1005fbea:	f7e6 f945 	bl	10045e78 <BLEPLAT_MemCpy>
1005fbee:	4628      	mov	r0, r5
1005fbf0:	4631      	mov	r1, r6
1005fbf2:	9a00      	ldr	r2, [sp, #0]
1005fbf4:	f7f7 fea8 	bl	10057948 <hci_le_encrypt>
1005fbf8:	b005      	add	sp, #20
1005fbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fbfc <smp_crt_generate_csrk>:
1005fbfc:	b5e0      	push	{r5, r6, r7, lr}
1005fbfe:	460b      	mov	r3, r1
1005fc00:	4601      	mov	r1, r0
1005fc02:	aa01      	add	r2, sp, #4
1005fc04:	2001      	movs	r0, #1
1005fc06:	8010      	strh	r0, [r2, #0]
1005fc08:	4802      	ldr	r0, [pc, #8]	@ (1005fc14 <__arm_cp.7_0>)
1005fc0a:	6800      	ldr	r0, [r0, #0]
1005fc0c:	3008      	adds	r0, #8
1005fc0e:	f7ff ff5f 	bl	1005fad0 <smp_crt_diversify>
1005fc12:	bd8c      	pop	{r2, r3, r7, pc}

1005fc14 <__arm_cp.7_0>:
1005fc14:	20001120 	.word	0x20001120

1005fc18 <smp_crt_f4_generate_confirm>:
1005fc18:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fc1a:	b09d      	sub	sp, #116	@ 0x74
1005fc1c:	9302      	str	r3, [sp, #8]
1005fc1e:	9203      	str	r2, [sp, #12]
1005fc20:	9101      	str	r1, [sp, #4]
1005fc22:	4601      	mov	r1, r0
1005fc24:	ad0c      	add	r5, sp, #48	@ 0x30
1005fc26:	2720      	movs	r7, #32
1005fc28:	2401      	movs	r4, #1
1005fc2a:	4e12      	ldr	r6, [pc, #72]	@ (1005fc74 <__arm_cp.8_0>)
1005fc2c:	4628      	mov	r0, r5
1005fc2e:	463a      	mov	r2, r7
1005fc30:	4623      	mov	r3, r4
1005fc32:	47b0      	blx	r6
1005fc34:	4628      	mov	r0, r5
1005fc36:	3020      	adds	r0, #32
1005fc38:	9901      	ldr	r1, [sp, #4]
1005fc3a:	463a      	mov	r2, r7
1005fc3c:	4623      	mov	r3, r4
1005fc3e:	47b0      	blx	r6
1005fc40:	4637      	mov	r7, r6
1005fc42:	2040      	movs	r0, #64	@ 0x40
1005fc44:	9902      	ldr	r1, [sp, #8]
1005fc46:	5429      	strb	r1, [r5, r0]
1005fc48:	ae08      	add	r6, sp, #32
1005fc4a:	2210      	movs	r2, #16
1005fc4c:	9202      	str	r2, [sp, #8]
1005fc4e:	4630      	mov	r0, r6
1005fc50:	9903      	ldr	r1, [sp, #12]
1005fc52:	4623      	mov	r3, r4
1005fc54:	47b8      	blx	r7
1005fc56:	2141      	movs	r1, #65	@ 0x41
1005fc58:	af04      	add	r7, sp, #16
1005fc5a:	4628      	mov	r0, r5
1005fc5c:	4632      	mov	r2, r6
1005fc5e:	463b      	mov	r3, r7
1005fc60:	f002 fd32 	bl	100626c8 <AES_CMAC_Encrypt>
1005fc64:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005fc66:	4639      	mov	r1, r7
1005fc68:	9a02      	ldr	r2, [sp, #8]
1005fc6a:	4623      	mov	r3, r4
1005fc6c:	4c01      	ldr	r4, [pc, #4]	@ (1005fc74 <__arm_cp.8_0>)
1005fc6e:	47a0      	blx	r4
1005fc70:	b01d      	add	sp, #116	@ 0x74
1005fc72:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fc74 <__arm_cp.8_0>:
1005fc74:	10062369 	.word	0x10062369

1005fc78 <smp_crt_f5_generate_keys>:
1005fc78:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fc7a:	b0a9      	sub	sp, #164	@ 0xa4
1005fc7c:	9304      	str	r3, [sp, #16]
1005fc7e:	9202      	str	r2, [sp, #8]
1005fc80:	9101      	str	r1, [sp, #4]
1005fc82:	9005      	str	r0, [sp, #20]
1005fc84:	ad1b      	add	r5, sp, #108	@ 0x6c
1005fc86:	2135      	movs	r1, #53	@ 0x35
1005fc88:	9106      	str	r1, [sp, #24]
1005fc8a:	4628      	mov	r0, r5
1005fc8c:	f007 feb1 	bl	100679f2 <__aeabi_memclr>
1005fc90:	4628      	mov	r0, r5
1005fc92:	3025      	adds	r0, #37	@ 0x25
1005fc94:	9003      	str	r0, [sp, #12]
1005fc96:	2401      	movs	r4, #1
1005fc98:	7384      	strb	r4, [r0, #14]
1005fc9a:	2065      	movs	r0, #101	@ 0x65
1005fc9c:	7128      	strb	r0, [r5, #4]
1005fc9e:	4829      	ldr	r0, [pc, #164]	@ (1005fd44 <__arm_cp.9_0>)
1005fca0:	8068      	strh	r0, [r5, #2]
1005fca2:	2062      	movs	r0, #98	@ 0x62
1005fca4:	7068      	strb	r0, [r5, #1]
1005fca6:	af0f      	add	r7, sp, #60	@ 0x3c
1005fca8:	2220      	movs	r2, #32
1005fcaa:	9200      	str	r2, [sp, #0]
1005fcac:	4638      	mov	r0, r7
1005fcae:	9905      	ldr	r1, [sp, #20]
1005fcb0:	4623      	mov	r3, r4
1005fcb2:	4e25      	ldr	r6, [pc, #148]	@ (1005fd48 <__arm_cp.9_1>)
1005fcb4:	47b0      	blx	r6
1005fcb6:	4a25      	ldr	r2, [pc, #148]	@ (1005fd4c <__arm_cp.9_2>)
1005fcb8:	ab17      	add	r3, sp, #92	@ 0x5c
1005fcba:	9305      	str	r3, [sp, #20]
1005fcbc:	4e24      	ldr	r6, [pc, #144]	@ (1005fd50 <__arm_cp.9_3>)
1005fcbe:	4638      	mov	r0, r7
1005fcc0:	9900      	ldr	r1, [sp, #0]
1005fcc2:	47b0      	blx	r6
1005fcc4:	1d68      	adds	r0, r5, #5
1005fcc6:	2710      	movs	r7, #16
1005fcc8:	9700      	str	r7, [sp, #0]
1005fcca:	9901      	ldr	r1, [sp, #4]
1005fccc:	463a      	mov	r2, r7
1005fcce:	4623      	mov	r3, r4
1005fcd0:	4e1d      	ldr	r6, [pc, #116]	@ (1005fd48 <__arm_cp.9_1>)
1005fcd2:	47b0      	blx	r6
1005fcd4:	4628      	mov	r0, r5
1005fcd6:	3015      	adds	r0, #21
1005fcd8:	9902      	ldr	r1, [sp, #8]
1005fcda:	463a      	mov	r2, r7
1005fcdc:	4623      	mov	r3, r4
1005fcde:	47b0      	blx	r6
1005fce0:	2025      	movs	r0, #37	@ 0x25
1005fce2:	9904      	ldr	r1, [sp, #16]
1005fce4:	5429      	strb	r1, [r5, r0]
1005fce6:	4628      	mov	r0, r5
1005fce8:	3026      	adds	r0, #38	@ 0x26
1005fcea:	992e      	ldr	r1, [sp, #184]	@ 0xb8
1005fcec:	2706      	movs	r7, #6
1005fcee:	463a      	mov	r2, r7
1005fcf0:	4623      	mov	r3, r4
1005fcf2:	47b0      	blx	r6
1005fcf4:	982f      	ldr	r0, [sp, #188]	@ 0xbc
1005fcf6:	9903      	ldr	r1, [sp, #12]
1005fcf8:	71c8      	strb	r0, [r1, #7]
1005fcfa:	4628      	mov	r0, r5
1005fcfc:	302d      	adds	r0, #45	@ 0x2d
1005fcfe:	9930      	ldr	r1, [sp, #192]	@ 0xc0
1005fd00:	463a      	mov	r2, r7
1005fd02:	4623      	mov	r3, r4
1005fd04:	47b0      	blx	r6
1005fd06:	af0b      	add	r7, sp, #44	@ 0x2c
1005fd08:	4628      	mov	r0, r5
1005fd0a:	9906      	ldr	r1, [sp, #24]
1005fd0c:	9a05      	ldr	r2, [sp, #20]
1005fd0e:	463b      	mov	r3, r7
1005fd10:	4e0f      	ldr	r6, [pc, #60]	@ (1005fd50 <__arm_cp.9_3>)
1005fd12:	47b0      	blx	r6
1005fd14:	9831      	ldr	r0, [sp, #196]	@ 0xc4
1005fd16:	4639      	mov	r1, r7
1005fd18:	9e00      	ldr	r6, [sp, #0]
1005fd1a:	4632      	mov	r2, r6
1005fd1c:	4623      	mov	r3, r4
1005fd1e:	4f0a      	ldr	r7, [pc, #40]	@ (1005fd48 <__arm_cp.9_1>)
1005fd20:	47b8      	blx	r7
1005fd22:	702c      	strb	r4, [r5, #0]
1005fd24:	af07      	add	r7, sp, #28
1005fd26:	4628      	mov	r0, r5
1005fd28:	9906      	ldr	r1, [sp, #24]
1005fd2a:	9a05      	ldr	r2, [sp, #20]
1005fd2c:	463b      	mov	r3, r7
1005fd2e:	4d08      	ldr	r5, [pc, #32]	@ (1005fd50 <__arm_cp.9_3>)
1005fd30:	47a8      	blx	r5
1005fd32:	9832      	ldr	r0, [sp, #200]	@ 0xc8
1005fd34:	4639      	mov	r1, r7
1005fd36:	4632      	mov	r2, r6
1005fd38:	4623      	mov	r3, r4
1005fd3a:	4c03      	ldr	r4, [pc, #12]	@ (1005fd48 <__arm_cp.9_1>)
1005fd3c:	47a0      	blx	r4
1005fd3e:	b029      	add	sp, #164	@ 0xa4
1005fd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005fd42:	46c0      	nop			@ (mov r8, r8)

1005fd44 <__arm_cp.9_0>:
1005fd44:	00006c74 	.word	0x00006c74

1005fd48 <__arm_cp.9_1>:
1005fd48:	10062369 	.word	0x10062369

1005fd4c <__arm_cp.9_2>:
1005fd4c:	1006d12a 	.word	0x1006d12a

1005fd50 <__arm_cp.9_3>:
1005fd50:	100626c9 	.word	0x100626c9

1005fd54 <smp_crt_f6_generate_check_val>:
1005fd54:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fd56:	b09d      	sub	sp, #116	@ 0x74
1005fd58:	9301      	str	r3, [sp, #4]
1005fd5a:	9200      	str	r2, [sp, #0]
1005fd5c:	9002      	str	r0, [sp, #8]
1005fd5e:	ae0c      	add	r6, sp, #48	@ 0x30
1005fd60:	2410      	movs	r4, #16
1005fd62:	9403      	str	r4, [sp, #12]
1005fd64:	2501      	movs	r5, #1
1005fd66:	4f20      	ldr	r7, [pc, #128]	@ (1005fde8 <__arm_cp.10_0>)
1005fd68:	4630      	mov	r0, r6
1005fd6a:	4622      	mov	r2, r4
1005fd6c:	462b      	mov	r3, r5
1005fd6e:	47b8      	blx	r7
1005fd70:	4630      	mov	r0, r6
1005fd72:	3010      	adds	r0, #16
1005fd74:	9900      	ldr	r1, [sp, #0]
1005fd76:	4622      	mov	r2, r4
1005fd78:	462b      	mov	r3, r5
1005fd7a:	47b8      	blx	r7
1005fd7c:	4630      	mov	r0, r6
1005fd7e:	3020      	adds	r0, #32
1005fd80:	9901      	ldr	r1, [sp, #4]
1005fd82:	4622      	mov	r2, r4
1005fd84:	462b      	mov	r3, r5
1005fd86:	463c      	mov	r4, r7
1005fd88:	47b8      	blx	r7
1005fd8a:	4630      	mov	r0, r6
1005fd8c:	3030      	adds	r0, #48	@ 0x30
1005fd8e:	9922      	ldr	r1, [sp, #136]	@ 0x88
1005fd90:	2203      	movs	r2, #3
1005fd92:	462b      	mov	r3, r5
1005fd94:	47b8      	blx	r7
1005fd96:	2033      	movs	r0, #51	@ 0x33
1005fd98:	9923      	ldr	r1, [sp, #140]	@ 0x8c
1005fd9a:	5431      	strb	r1, [r6, r0]
1005fd9c:	4630      	mov	r0, r6
1005fd9e:	3034      	adds	r0, #52	@ 0x34
1005fda0:	9924      	ldr	r1, [sp, #144]	@ 0x90
1005fda2:	2706      	movs	r7, #6
1005fda4:	463a      	mov	r2, r7
1005fda6:	462b      	mov	r3, r5
1005fda8:	47a0      	blx	r4
1005fdaa:	4630      	mov	r0, r6
1005fdac:	3033      	adds	r0, #51	@ 0x33
1005fdae:	9925      	ldr	r1, [sp, #148]	@ 0x94
1005fdb0:	71c1      	strb	r1, [r0, #7]
1005fdb2:	4630      	mov	r0, r6
1005fdb4:	303b      	adds	r0, #59	@ 0x3b
1005fdb6:	9926      	ldr	r1, [sp, #152]	@ 0x98
1005fdb8:	463a      	mov	r2, r7
1005fdba:	462b      	mov	r3, r5
1005fdbc:	47a0      	blx	r4
1005fdbe:	af04      	add	r7, sp, #16
1005fdc0:	4638      	mov	r0, r7
1005fdc2:	9902      	ldr	r1, [sp, #8]
1005fdc4:	9a03      	ldr	r2, [sp, #12]
1005fdc6:	462b      	mov	r3, r5
1005fdc8:	47a0      	blx	r4
1005fdca:	2141      	movs	r1, #65	@ 0x41
1005fdcc:	ac08      	add	r4, sp, #32
1005fdce:	4630      	mov	r0, r6
1005fdd0:	463a      	mov	r2, r7
1005fdd2:	4623      	mov	r3, r4
1005fdd4:	f002 fc78 	bl	100626c8 <AES_CMAC_Encrypt>
1005fdd8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
1005fdda:	4621      	mov	r1, r4
1005fddc:	9a03      	ldr	r2, [sp, #12]
1005fdde:	462b      	mov	r3, r5
1005fde0:	4c01      	ldr	r4, [pc, #4]	@ (1005fde8 <__arm_cp.10_0>)
1005fde2:	47a0      	blx	r4
1005fde4:	b01d      	add	sp, #116	@ 0x74
1005fde6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fde8 <__arm_cp.10_0>:
1005fde8:	10062369 	.word	0x10062369

1005fdec <smp_crt_g2_generate_num_comp_val>:
1005fdec:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fdee:	b09f      	sub	sp, #124	@ 0x7c
1005fdf0:	9301      	str	r3, [sp, #4]
1005fdf2:	9202      	str	r2, [sp, #8]
1005fdf4:	9100      	str	r1, [sp, #0]
1005fdf6:	4601      	mov	r1, r0
1005fdf8:	ad0b      	add	r5, sp, #44	@ 0x2c
1005fdfa:	2720      	movs	r7, #32
1005fdfc:	2401      	movs	r4, #1
1005fdfe:	4e15      	ldr	r6, [pc, #84]	@ (1005fe54 <__arm_cp.11_0>)
1005fe00:	4628      	mov	r0, r5
1005fe02:	463a      	mov	r2, r7
1005fe04:	4623      	mov	r3, r4
1005fe06:	47b0      	blx	r6
1005fe08:	4628      	mov	r0, r5
1005fe0a:	3020      	adds	r0, #32
1005fe0c:	9900      	ldr	r1, [sp, #0]
1005fe0e:	463a      	mov	r2, r7
1005fe10:	4623      	mov	r3, r4
1005fe12:	47b0      	blx	r6
1005fe14:	4637      	mov	r7, r6
1005fe16:	4628      	mov	r0, r5
1005fe18:	3040      	adds	r0, #64	@ 0x40
1005fe1a:	2610      	movs	r6, #16
1005fe1c:	9901      	ldr	r1, [sp, #4]
1005fe1e:	4632      	mov	r2, r6
1005fe20:	4623      	mov	r3, r4
1005fe22:	47b8      	blx	r7
1005fe24:	af07      	add	r7, sp, #28
1005fe26:	4638      	mov	r0, r7
1005fe28:	9902      	ldr	r1, [sp, #8]
1005fe2a:	4632      	mov	r2, r6
1005fe2c:	4623      	mov	r3, r4
1005fe2e:	4e09      	ldr	r6, [pc, #36]	@ (1005fe54 <__arm_cp.11_0>)
1005fe30:	47b0      	blx	r6
1005fe32:	2150      	movs	r1, #80	@ 0x50
1005fe34:	ae03      	add	r6, sp, #12
1005fe36:	4628      	mov	r0, r5
1005fe38:	463a      	mov	r2, r7
1005fe3a:	4633      	mov	r3, r6
1005fe3c:	f002 fc44 	bl	100626c8 <AES_CMAC_Encrypt>
1005fe40:	360c      	adds	r6, #12
1005fe42:	9824      	ldr	r0, [sp, #144]	@ 0x90
1005fe44:	2204      	movs	r2, #4
1005fe46:	4631      	mov	r1, r6
1005fe48:	4623      	mov	r3, r4
1005fe4a:	4c02      	ldr	r4, [pc, #8]	@ (1005fe54 <__arm_cp.11_0>)
1005fe4c:	47a0      	blx	r4
1005fe4e:	b01f      	add	sp, #124	@ 0x7c
1005fe50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005fe52:	46c0      	nop			@ (mov r8, r8)

1005fe54 <__arm_cp.11_0>:
1005fe54:	10062369 	.word	0x10062369

1005fe58 <smp_crt_generate_cmac_tag>:
1005fe58:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fe5a:	b095      	sub	sp, #84	@ 0x54
1005fe5c:	9301      	str	r3, [sp, #4]
1005fe5e:	4617      	mov	r7, r2
1005fe60:	9103      	str	r1, [sp, #12]
1005fe62:	2500      	movs	r5, #0
1005fe64:	9514      	str	r5, [sp, #80]	@ 0x50
1005fe66:	9513      	str	r5, [sp, #76]	@ 0x4c
1005fe68:	9512      	str	r5, [sp, #72]	@ 0x48
1005fe6a:	9511      	str	r5, [sp, #68]	@ 0x44
1005fe6c:	a911      	add	r1, sp, #68	@ 0x44
1005fe6e:	ac0d      	add	r4, sp, #52	@ 0x34
1005fe70:	9004      	str	r0, [sp, #16]
1005fe72:	4622      	mov	r2, r4
1005fe74:	f7f7 fd68 	bl	10057948 <hci_le_encrypt>
1005fe78:	200f      	movs	r0, #15
1005fe7a:	9002      	str	r0, [sp, #8]
1005fe7c:	5626      	ldrsb	r6, [r4, r0]
1005fe7e:	a909      	add	r1, sp, #36	@ 0x24
1005fe80:	4620      	mov	r0, r4
1005fe82:	f000 f885 	bl	1005ff90 <smp_crt_left_shift>
1005fe86:	2e00      	cmp	r6, #0
1005fe88:	d467      	bmi.n	1005ff5a <smp_crt_generate_cmac_tag+0x102>
1005fe8a:	a809      	add	r0, sp, #36	@ 0x24
1005fe8c:	9902      	ldr	r1, [sp, #8]
1005fe8e:	5644      	ldrsb	r4, [r0, r1]
1005fe90:	a905      	add	r1, sp, #20
1005fe92:	f000 f87d 	bl	1005ff90 <smp_crt_left_shift>
1005fe96:	2c00      	cmp	r4, #0
1005fe98:	d46c      	bmi.n	1005ff74 <smp_crt_generate_cmac_tag+0x11c>
1005fe9a:	a811      	add	r0, sp, #68	@ 0x44
1005fe9c:	2400      	movs	r4, #0
1005fe9e:	2210      	movs	r2, #16
1005fea0:	4621      	mov	r1, r4
1005fea2:	f7e5 fff9 	bl	10045e98 <BLEPLAT_MemSet>
1005fea6:	b2fd      	uxtb	r5, r7
1005fea8:	2d11      	cmp	r5, #17
1005feaa:	d321      	bcc.n	1005fef0 <smp_crt_generate_cmac_tag+0x98>
1005feac:	1d20      	adds	r0, r4, #4
1005feae:	b281      	uxth	r1, r0
1005feb0:	2210      	movs	r2, #16
1005feb2:	ab0d      	add	r3, sp, #52	@ 0x34
1005feb4:	9803      	ldr	r0, [sp, #12]
1005feb6:	f7f3 f91d 	bl	100530f4 <ACL_pkt_read>
1005feba:	2000      	movs	r0, #0
1005febc:	2810      	cmp	r0, #16
1005febe:	d007      	beq.n	1005fed0 <smp_crt_generate_cmac_tag+0x78>
1005fec0:	a90d      	add	r1, sp, #52	@ 0x34
1005fec2:	5c09      	ldrb	r1, [r1, r0]
1005fec4:	aa11      	add	r2, sp, #68	@ 0x44
1005fec6:	5c13      	ldrb	r3, [r2, r0]
1005fec8:	404b      	eors	r3, r1
1005feca:	5413      	strb	r3, [r2, r0]
1005fecc:	1c40      	adds	r0, r0, #1
1005fece:	e7f5      	b.n	1005febc <smp_crt_generate_cmac_tag+0x64>
1005fed0:	ad11      	add	r5, sp, #68	@ 0x44
1005fed2:	ae0d      	add	r6, sp, #52	@ 0x34
1005fed4:	9804      	ldr	r0, [sp, #16]
1005fed6:	4629      	mov	r1, r5
1005fed8:	4632      	mov	r2, r6
1005feda:	f7f7 fd35 	bl	10057948 <hci_le_encrypt>
1005fede:	2210      	movs	r2, #16
1005fee0:	4628      	mov	r0, r5
1005fee2:	4631      	mov	r1, r6
1005fee4:	f7e5 ffc8 	bl	10045e78 <BLEPLAT_MemCpy>
1005fee8:	3f10      	subs	r7, #16
1005feea:	3410      	adds	r4, #16
1005feec:	b2a4      	uxth	r4, r4
1005feee:	e7da      	b.n	1005fea6 <smp_crt_generate_cmac_tag+0x4e>
1005fef0:	2d10      	cmp	r5, #16
1005fef2:	d108      	bne.n	1005ff06 <smp_crt_generate_cmac_tag+0xae>
1005fef4:	1d20      	adds	r0, r4, #4
1005fef6:	b281      	uxth	r1, r0
1005fef8:	2210      	movs	r2, #16
1005fefa:	ab0d      	add	r3, sp, #52	@ 0x34
1005fefc:	9803      	ldr	r0, [sp, #12]
1005fefe:	f7f3 f8f9 	bl	100530f4 <ACL_pkt_read>
1005ff02:	a809      	add	r0, sp, #36	@ 0x24
1005ff04:	e014      	b.n	1005ff30 <smp_crt_generate_cmac_tag+0xd8>
1005ff06:	a80d      	add	r0, sp, #52	@ 0x34
1005ff08:	2100      	movs	r1, #0
1005ff0a:	2210      	movs	r2, #16
1005ff0c:	f7e5 ffc4 	bl	10045e98 <BLEPLAT_MemSet>
1005ff10:	0638      	lsls	r0, r7, #24
1005ff12:	d008      	beq.n	1005ff26 <smp_crt_generate_cmac_tag+0xce>
1005ff14:	a80d      	add	r0, sp, #52	@ 0x34
1005ff16:	1b43      	subs	r3, r0, r5
1005ff18:	3310      	adds	r3, #16
1005ff1a:	1d20      	adds	r0, r4, #4
1005ff1c:	b281      	uxth	r1, r0
1005ff1e:	9803      	ldr	r0, [sp, #12]
1005ff20:	462a      	mov	r2, r5
1005ff22:	f7f3 f8e7 	bl	100530f4 <ACL_pkt_read>
1005ff26:	a80d      	add	r0, sp, #52	@ 0x34
1005ff28:	1b40      	subs	r0, r0, r5
1005ff2a:	2180      	movs	r1, #128	@ 0x80
1005ff2c:	73c1      	strb	r1, [r0, #15]
1005ff2e:	a805      	add	r0, sp, #20
1005ff30:	9a01      	ldr	r2, [sp, #4]
1005ff32:	2100      	movs	r1, #0
1005ff34:	2910      	cmp	r1, #16
1005ff36:	d009      	beq.n	1005ff4c <smp_crt_generate_cmac_tag+0xf4>
1005ff38:	ab0d      	add	r3, sp, #52	@ 0x34
1005ff3a:	5c5c      	ldrb	r4, [r3, r1]
1005ff3c:	5c43      	ldrb	r3, [r0, r1]
1005ff3e:	4063      	eors	r3, r4
1005ff40:	ad11      	add	r5, sp, #68	@ 0x44
1005ff42:	5c6c      	ldrb	r4, [r5, r1]
1005ff44:	405c      	eors	r4, r3
1005ff46:	546c      	strb	r4, [r5, r1]
1005ff48:	1c49      	adds	r1, r1, #1
1005ff4a:	e7f3      	b.n	1005ff34 <smp_crt_generate_cmac_tag+0xdc>
1005ff4c:	a911      	add	r1, sp, #68	@ 0x44
1005ff4e:	9804      	ldr	r0, [sp, #16]
1005ff50:	f7f7 fcfa 	bl	10057948 <hci_le_encrypt>
1005ff54:	2000      	movs	r0, #0
1005ff56:	b015      	add	sp, #84	@ 0x54
1005ff58:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ff5a:	a811      	add	r0, sp, #68	@ 0x44
1005ff5c:	2187      	movs	r1, #135	@ 0x87
1005ff5e:	7001      	strb	r1, [r0, #0]
1005ff60:	2d0f      	cmp	r5, #15
1005ff62:	d092      	beq.n	1005fe8a <smp_crt_generate_cmac_tag+0x32>
1005ff64:	a809      	add	r0, sp, #36	@ 0x24
1005ff66:	5d41      	ldrb	r1, [r0, r5]
1005ff68:	aa11      	add	r2, sp, #68	@ 0x44
1005ff6a:	5d52      	ldrb	r2, [r2, r5]
1005ff6c:	404a      	eors	r2, r1
1005ff6e:	5542      	strb	r2, [r0, r5]
1005ff70:	1c6d      	adds	r5, r5, #1
1005ff72:	e7f5      	b.n	1005ff60 <smp_crt_generate_cmac_tag+0x108>
1005ff74:	a811      	add	r0, sp, #68	@ 0x44
1005ff76:	2187      	movs	r1, #135	@ 0x87
1005ff78:	7001      	strb	r1, [r0, #0]
1005ff7a:	2000      	movs	r0, #0
1005ff7c:	280f      	cmp	r0, #15
1005ff7e:	d08c      	beq.n	1005fe9a <smp_crt_generate_cmac_tag+0x42>
1005ff80:	a905      	add	r1, sp, #20
1005ff82:	5c0a      	ldrb	r2, [r1, r0]
1005ff84:	ab11      	add	r3, sp, #68	@ 0x44
1005ff86:	5c1b      	ldrb	r3, [r3, r0]
1005ff88:	4053      	eors	r3, r2
1005ff8a:	540b      	strb	r3, [r1, r0]
1005ff8c:	1c40      	adds	r0, r0, #1
1005ff8e:	e7f5      	b.n	1005ff7c <smp_crt_generate_cmac_tag+0x124>

1005ff90 <smp_crt_left_shift>:
1005ff90:	b510      	push	{r4, lr}
1005ff92:	7802      	ldrb	r2, [r0, #0]
1005ff94:	0052      	lsls	r2, r2, #1
1005ff96:	700a      	strb	r2, [r1, #0]
1005ff98:	1c49      	adds	r1, r1, #1
1005ff9a:	2200      	movs	r2, #0
1005ff9c:	2a0f      	cmp	r2, #15
1005ff9e:	d00b      	beq.n	1005ffb8 <smp_crt_left_shift+0x28>
1005ffa0:	1883      	adds	r3, r0, r2
1005ffa2:	785b      	ldrb	r3, [r3, #1]
1005ffa4:	005b      	lsls	r3, r3, #1
1005ffa6:	548b      	strb	r3, [r1, r2]
1005ffa8:	5684      	ldrsb	r4, [r0, r2]
1005ffaa:	2c00      	cmp	r4, #0
1005ffac:	d502      	bpl.n	1005ffb4 <smp_crt_left_shift+0x24>
1005ffae:	2401      	movs	r4, #1
1005ffb0:	4323      	orrs	r3, r4
1005ffb2:	548b      	strb	r3, [r1, r2]
1005ffb4:	1c52      	adds	r2, r2, #1
1005ffb6:	e7f1      	b.n	1005ff9c <smp_crt_left_shift+0xc>
1005ffb8:	bd10      	pop	{r4, pc}
	...

1005ffbc <smp_pp1_get_next_free_pairing_idx>:
1005ffbc:	b510      	push	{r4, lr}
1005ffbe:	490b      	ldr	r1, [pc, #44]	@ (1005ffec <__arm_cp.0_0>)
1005ffc0:	680a      	ldr	r2, [r1, #0]
1005ffc2:	21b1      	movs	r1, #177	@ 0xb1
1005ffc4:	5c53      	ldrb	r3, [r2, r1]
1005ffc6:	32b1      	adds	r2, #177	@ 0xb1
1005ffc8:	2100      	movs	r1, #0
1005ffca:	2903      	cmp	r1, #3
1005ffcc:	d005      	beq.n	1005ffda <smp_pp1_get_next_free_pairing_idx+0x1e>
1005ffce:	2401      	movs	r4, #1
1005ffd0:	408c      	lsls	r4, r1
1005ffd2:	421c      	tst	r4, r3
1005ffd4:	d003      	beq.n	1005ffde <smp_pp1_get_next_free_pairing_idx+0x22>
1005ffd6:	1c49      	adds	r1, r1, #1
1005ffd8:	e7f7      	b.n	1005ffca <smp_pp1_get_next_free_pairing_idx+0xe>
1005ffda:	2103      	movs	r1, #3
1005ffdc:	e003      	b.n	1005ffe6 <smp_pp1_get_next_free_pairing_idx+0x2a>
1005ffde:	2800      	cmp	r0, #0
1005ffe0:	d001      	beq.n	1005ffe6 <smp_pp1_get_next_free_pairing_idx+0x2a>
1005ffe2:	4323      	orrs	r3, r4
1005ffe4:	7013      	strb	r3, [r2, #0]
1005ffe6:	b2c8      	uxtb	r0, r1
1005ffe8:	bd10      	pop	{r4, pc}
1005ffea:	46c0      	nop			@ (mov r8, r8)

1005ffec <__arm_cp.0_0>:
1005ffec:	200011c0 	.word	0x200011c0

1005fff0 <smp_pp1_get_pairing_pdu_offset>:
1005fff0:	0100      	lsls	r0, r0, #4
1005fff2:	2900      	cmp	r1, #0
1005fff4:	d000      	beq.n	1005fff8 <smp_pp1_get_pairing_pdu_offset+0x8>
1005fff6:	3008      	adds	r0, #8
1005fff8:	b2c0      	uxtb	r0, r0
1005fffa:	4770      	bx	lr

1005fffc <smp_pp1_reqrsp_pdu_params_check>:
1005fffc:	b51c      	push	{r2, r3, r4, lr}
1005fffe:	2104      	movs	r1, #4
10060000:	2207      	movs	r2, #7
10060002:	466c      	mov	r4, sp
10060004:	4623      	mov	r3, r4
10060006:	f7f3 f875 	bl	100530f4 <ACL_pkt_read>
1006000a:	7862      	ldrb	r2, [r4, #1]
1006000c:	210a      	movs	r1, #10
1006000e:	2a04      	cmp	r2, #4
10060010:	d813      	bhi.n	1006003a <smp_pp1_reqrsp_pdu_params_check+0x3e>
10060012:	466a      	mov	r2, sp
10060014:	7892      	ldrb	r2, [r2, #2]
10060016:	2a01      	cmp	r2, #1
10060018:	d80f      	bhi.n	1006003a <smp_pp1_reqrsp_pdu_params_check+0x3e>
1006001a:	466a      	mov	r2, sp
1006001c:	78d2      	ldrb	r2, [r2, #3]
1006001e:	0792      	lsls	r2, r2, #30
10060020:	d40b      	bmi.n	1006003a <smp_pp1_reqrsp_pdu_params_check+0x3e>
10060022:	4907      	ldr	r1, [pc, #28]	@ (10060040 <__arm_cp.2_0>)
10060024:	6809      	ldr	r1, [r1, #0]
10060026:	2234      	movs	r2, #52	@ 0x34
10060028:	5c8a      	ldrb	r2, [r1, r2]
1006002a:	4669      	mov	r1, sp
1006002c:	7909      	ldrb	r1, [r1, #4]
1006002e:	4291      	cmp	r1, r2
10060030:	d302      	bcc.n	10060038 <smp_pp1_reqrsp_pdu_params_check+0x3c>
10060032:	2911      	cmp	r1, #17
10060034:	4601      	mov	r1, r0
10060036:	d300      	bcc.n	1006003a <smp_pp1_reqrsp_pdu_params_check+0x3e>
10060038:	2106      	movs	r1, #6
1006003a:	4608      	mov	r0, r1
1006003c:	bd1c      	pop	{r2, r3, r4, pc}
1006003e:	46c0      	nop			@ (mov r8, r8)

10060040 <__arm_cp.2_0>:
10060040:	200011c0 	.word	0x200011c0

10060044 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>:
10060044:	b580      	push	{r7, lr}
10060046:	7d12      	ldrb	r2, [r2, #20]
10060048:	0112      	lsls	r2, r2, #4
1006004a:	2900      	cmp	r1, #0
1006004c:	d000      	beq.n	10060050 <smp_pp1_reqrsp_pdu_copy_to_pairing_data+0xc>
1006004e:	3208      	adds	r2, #8
10060050:	b2d1      	uxtb	r1, r2
10060052:	4a04      	ldr	r2, [pc, #16]	@ (10060064 <__arm_cp.3_0>)
10060054:	6812      	ldr	r2, [r2, #0]
10060056:	1853      	adds	r3, r2, r1
10060058:	33b4      	adds	r3, #180	@ 0xb4
1006005a:	2104      	movs	r1, #4
1006005c:	2207      	movs	r2, #7
1006005e:	f7f3 f849 	bl	100530f4 <ACL_pkt_read>
10060062:	bd80      	pop	{r7, pc}

10060064 <__arm_cp.3_0>:
10060064:	200011c0 	.word	0x200011c0

10060068 <smp_pp1_reqrsp_pdu_extract_from_pairing_data>:
10060068:	b5f0      	push	{r4, r5, r6, r7, lr}
1006006a:	4924      	ldr	r1, [pc, #144]	@ (100600fc <__arm_cp.4_0>)
1006006c:	6809      	ldr	r1, [r1, #0]
1006006e:	7d02      	ldrb	r2, [r0, #20]
10060070:	0112      	lsls	r2, r2, #4
10060072:	3208      	adds	r2, #8
10060074:	b2d2      	uxtb	r2, r2
10060076:	188b      	adds	r3, r1, r2
10060078:	24b5      	movs	r4, #181	@ 0xb5
1006007a:	5d1c      	ldrb	r4, [r3, r4]
1006007c:	7304      	strb	r4, [r0, #12]
1006007e:	24b6      	movs	r4, #182	@ 0xb6
10060080:	5d1b      	ldrb	r3, [r3, r4]
10060082:	2b01      	cmp	r3, #1
10060084:	d103      	bne.n	1006008e <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x26>
10060086:	7b43      	ldrb	r3, [r0, #13]
10060088:	2402      	movs	r4, #2
1006008a:	431c      	orrs	r4, r3
1006008c:	7344      	strb	r4, [r0, #13]
1006008e:	460b      	mov	r3, r1
10060090:	3336      	adds	r3, #54	@ 0x36
10060092:	2503      	movs	r5, #3
10060094:	4315      	orrs	r5, r2
10060096:	460c      	mov	r4, r1
10060098:	34b4      	adds	r4, #180	@ 0xb4
1006009a:	5d65      	ldrb	r5, [r4, r5]
1006009c:	2601      	movs	r6, #1
1006009e:	402e      	ands	r6, r5
100600a0:	7b87      	ldrb	r7, [r0, #14]
100600a2:	4337      	orrs	r7, r6
100600a4:	7387      	strb	r7, [r0, #14]
100600a6:	2604      	movs	r6, #4
100600a8:	4035      	ands	r5, r6
100600aa:	7bc7      	ldrb	r7, [r0, #15]
100600ac:	432f      	orrs	r7, r5
100600ae:	73c7      	strb	r7, [r0, #15]
100600b0:	4316      	orrs	r6, r2
100600b2:	5da5      	ldrb	r5, [r4, r6]
100600b4:	7405      	strb	r5, [r0, #16]
100600b6:	2505      	movs	r5, #5
100600b8:	4315      	orrs	r5, r2
100600ba:	5d64      	ldrb	r4, [r4, r5]
100600bc:	2560      	movs	r5, #96	@ 0x60
100600be:	5d45      	ldrb	r5, [r0, r5]
100600c0:	07ed      	lsls	r5, r5, #31
100600c2:	d10e      	bne.n	100600e2 <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x7a>
100600c4:	781d      	ldrb	r5, [r3, #0]
100600c6:	402c      	ands	r4, r5
100600c8:	2507      	movs	r5, #7
100600ca:	402c      	ands	r4, r5
100600cc:	7484      	strb	r4, [r0, #18]
100600ce:	2406      	movs	r4, #6
100600d0:	4322      	orrs	r2, r4
100600d2:	1889      	adds	r1, r1, r2
100600d4:	22b4      	movs	r2, #180	@ 0xb4
100600d6:	5c89      	ldrb	r1, [r1, r2]
100600d8:	785a      	ldrb	r2, [r3, #1]
100600da:	400a      	ands	r2, r1
100600dc:	402a      	ands	r2, r5
100600de:	7442      	strb	r2, [r0, #17]
100600e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100600e2:	785d      	ldrb	r5, [r3, #1]
100600e4:	4025      	ands	r5, r4
100600e6:	7445      	strb	r5, [r0, #17]
100600e8:	2406      	movs	r4, #6
100600ea:	4322      	orrs	r2, r4
100600ec:	1889      	adds	r1, r1, r2
100600ee:	22b4      	movs	r2, #180	@ 0xb4
100600f0:	5c89      	ldrb	r1, [r1, r2]
100600f2:	781a      	ldrb	r2, [r3, #0]
100600f4:	400a      	ands	r2, r1
100600f6:	7482      	strb	r2, [r0, #18]
100600f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100600fa:	46c0      	nop			@ (mov r8, r8)

100600fc <__arm_cp.4_0>:
100600fc:	200011c0 	.word	0x200011c0

10060100 <smp_pp1_key_generation_method_selection>:
10060100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060102:	7b01      	ldrb	r1, [r0, #12]
10060104:	7b42      	ldrb	r2, [r0, #13]
10060106:	07d3      	lsls	r3, r2, #31
10060108:	d001      	beq.n	1006010e <smp_pp1_key_generation_method_selection+0xe>
1006010a:	0793      	lsls	r3, r2, #30
1006010c:	d405      	bmi.n	1006011a <smp_pp1_key_generation_method_selection+0x1a>
1006010e:	7dc3      	ldrb	r3, [r0, #23]
10060110:	2408      	movs	r4, #8
10060112:	401c      	ands	r4, r3
10060114:	d003      	beq.n	1006011e <smp_pp1_key_generation_method_selection+0x1e>
10060116:	0792      	lsls	r2, r2, #30
10060118:	d001      	beq.n	1006011e <smp_pp1_key_generation_method_selection+0x1e>
1006011a:	2203      	movs	r2, #3
1006011c:	e019      	b.n	10060152 <smp_pp1_key_generation_method_selection+0x52>
1006011e:	7bc3      	ldrb	r3, [r0, #15]
10060120:	2205      	movs	r2, #5
10060122:	4213      	tst	r3, r2
10060124:	d014      	beq.n	10060150 <smp_pp1_key_generation_method_selection+0x50>
10060126:	4b42      	ldr	r3, [pc, #264]	@ (10060230 <__arm_cp.5_0>)
10060128:	681b      	ldr	r3, [r3, #0]
1006012a:	2540      	movs	r5, #64	@ 0x40
1006012c:	5d5d      	ldrb	r5, [r3, r5]
1006012e:	434a      	muls	r2, r1
10060130:	4b40      	ldr	r3, [pc, #256]	@ (10060234 <__arm_cp.5_1>)
10060132:	189a      	adds	r2, r3, r2
10060134:	5d52      	ldrb	r2, [r2, r5]
10060136:	74c2      	strb	r2, [r0, #19]
10060138:	4603      	mov	r3, r0
1006013a:	3313      	adds	r3, #19
1006013c:	2a00      	cmp	r2, #0
1006013e:	d10b      	bne.n	10060158 <smp_pp1_key_generation_method_selection+0x58>
10060140:	2c00      	cmp	r4, #0
10060142:	d13d      	bne.n	100601c0 <smp_pp1_key_generation_method_selection+0xc0>
10060144:	2901      	cmp	r1, #1
10060146:	d16f      	bne.n	10060228 <smp_pp1_key_generation_method_selection+0x128>
10060148:	2d01      	cmp	r5, #1
1006014a:	d16d      	bne.n	10060228 <smp_pp1_key_generation_method_selection+0x128>
1006014c:	2201      	movs	r2, #1
1006014e:	e06c      	b.n	1006022a <smp_pp1_key_generation_method_selection+0x12a>
10060150:	2201      	movs	r2, #1
10060152:	74c2      	strb	r2, [r0, #19]
10060154:	4603      	mov	r3, r0
10060156:	3313      	adds	r3, #19
10060158:	2460      	movs	r4, #96	@ 0x60
1006015a:	5d05      	ldrb	r5, [r0, r4]
1006015c:	2601      	movs	r6, #1
1006015e:	4035      	ands	r5, r6
10060160:	d103      	bne.n	1006016a <smp_pp1_key_generation_method_selection+0x6a>
10060162:	241a      	movs	r4, #26
10060164:	5704      	ldrsb	r4, [r0, r4]
10060166:	2c00      	cmp	r4, #0
10060168:	d426      	bmi.n	100601b8 <smp_pp1_key_generation_method_selection+0xb8>
1006016a:	4604      	mov	r4, r0
1006016c:	340f      	adds	r4, #15
1006016e:	7824      	ldrb	r4, [r4, #0]
10060170:	07e4      	lsls	r4, r4, #31
10060172:	d004      	beq.n	1006017e <smp_pp1_key_generation_method_selection+0x7e>
10060174:	2a01      	cmp	r2, #1
10060176:	d102      	bne.n	1006017e <smp_pp1_key_generation_method_selection+0x7e>
10060178:	2403      	movs	r4, #3
1006017a:	701c      	strb	r4, [r3, #0]
1006017c:	e052      	b.n	10060224 <smp_pp1_key_generation_method_selection+0x124>
1006017e:	7dc3      	ldrb	r3, [r0, #23]
10060180:	071b      	lsls	r3, r3, #28
10060182:	d503      	bpl.n	1006018c <smp_pp1_key_generation_method_selection+0x8c>
10060184:	2a02      	cmp	r2, #2
10060186:	d101      	bne.n	1006018c <smp_pp1_key_generation_method_selection+0x8c>
10060188:	2300      	movs	r3, #0
1006018a:	76c3      	strb	r3, [r0, #27]
1006018c:	2a02      	cmp	r2, #2
1006018e:	d111      	bne.n	100601b4 <smp_pp1_key_generation_method_selection+0xb4>
10060190:	7bc2      	ldrb	r2, [r0, #15]
10060192:	23ef      	movs	r3, #239	@ 0xef
10060194:	4013      	ands	r3, r2
10060196:	73c3      	strb	r3, [r0, #15]
10060198:	4a25      	ldr	r2, [pc, #148]	@ (10060230 <__arm_cp.5_0>)
1006019a:	6812      	ldr	r2, [r2, #0]
1006019c:	2340      	movs	r3, #64	@ 0x40
1006019e:	5cd2      	ldrb	r2, [r2, r3]
100601a0:	2400      	movs	r4, #0
100601a2:	2a02      	cmp	r2, #2
100601a4:	4627      	mov	r7, r4
100601a6:	d318      	bcc.n	100601da <smp_pp1_key_generation_method_selection+0xda>
100601a8:	2a04      	cmp	r2, #4
100601aa:	d00b      	beq.n	100601c4 <smp_pp1_key_generation_method_selection+0xc4>
100601ac:	2a02      	cmp	r2, #2
100601ae:	d113      	bne.n	100601d8 <smp_pp1_key_generation_method_selection+0xd8>
100601b0:	4637      	mov	r7, r6
100601b2:	e012      	b.n	100601da <smp_pp1_key_generation_method_selection+0xda>
100601b4:	2400      	movs	r4, #0
100601b6:	e035      	b.n	10060224 <smp_pp1_key_generation_method_selection+0x124>
100601b8:	4c1d      	ldr	r4, [pc, #116]	@ (10060230 <__arm_cp.5_0>)
100601ba:	6824      	ldr	r4, [r4, #0]
100601bc:	3431      	adds	r4, #49	@ 0x31
100601be:	e7d6      	b.n	1006016e <smp_pp1_key_generation_method_selection+0x6e>
100601c0:	2204      	movs	r2, #4
100601c2:	e032      	b.n	1006022a <smp_pp1_key_generation_method_selection+0x12a>
100601c4:	2902      	cmp	r1, #2
100601c6:	4637      	mov	r7, r6
100601c8:	d307      	bcc.n	100601da <smp_pp1_key_generation_method_selection+0xda>
100601ca:	2904      	cmp	r1, #4
100601cc:	462f      	mov	r7, r5
100601ce:	d004      	beq.n	100601da <smp_pp1_key_generation_method_selection+0xda>
100601d0:	2902      	cmp	r1, #2
100601d2:	d101      	bne.n	100601d8 <smp_pp1_key_generation_method_selection+0xd8>
100601d4:	4627      	mov	r7, r4
100601d6:	e000      	b.n	100601da <smp_pp1_key_generation_method_selection+0xda>
100601d8:	27ff      	movs	r7, #255	@ 0xff
100601da:	4917      	ldr	r1, [pc, #92]	@ (10060238 <__arm_cp.5_2>)
100601dc:	6809      	ldr	r1, [r1, #0]
100601de:	224e      	movs	r2, #78	@ 0x4e
100601e0:	5c89      	ldrb	r1, [r1, r2]
100601e2:	0749      	lsls	r1, r1, #29
100601e4:	d51e      	bpl.n	10060224 <smp_pp1_key_generation_method_selection+0x124>
100601e6:	8906      	ldrh	r6, [r0, #8]
100601e8:	4814      	ldr	r0, [pc, #80]	@ (1006023c <__arm_cp.5_3>)
100601ea:	6800      	ldr	r0, [r0, #0]
100601ec:	6980      	ldr	r0, [r0, #24]
100601ee:	2502      	movs	r5, #2
100601f0:	2246      	movs	r2, #70	@ 0x46
100601f2:	2303      	movs	r3, #3
100601f4:	4629      	mov	r1, r5
100601f6:	f7f3 f937 	bl	10053468 <aci_event_fifo_push_header>
100601fa:	2800      	cmp	r0, #0
100601fc:	d012      	beq.n	10060224 <smp_pp1_key_generation_method_selection+0x124>
100601fe:	4601      	mov	r1, r0
10060200:	7286      	strb	r6, [r0, #10]
10060202:	2004      	movs	r0, #4
10060204:	7248      	strb	r0, [r1, #9]
10060206:	720d      	strb	r5, [r1, #8]
10060208:	2400      	movs	r4, #0
1006020a:	71cc      	strb	r4, [r1, #7]
1006020c:	2005      	movs	r0, #5
1006020e:	7188      	strb	r0, [r1, #6]
10060210:	730f      	strb	r7, [r1, #12]
10060212:	20ff      	movs	r0, #255	@ 0xff
10060214:	7148      	strb	r0, [r1, #5]
10060216:	2082      	movs	r0, #130	@ 0x82
10060218:	7108      	strb	r0, [r1, #4]
1006021a:	0a30      	lsrs	r0, r6, #8
1006021c:	72c8      	strb	r0, [r1, #11]
1006021e:	4628      	mov	r0, r5
10060220:	f7f3 f9bf 	bl	100535a2 <aci_event_fifo_push>
10060224:	4620      	mov	r0, r4
10060226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060228:	2202      	movs	r2, #2
1006022a:	701a      	strb	r2, [r3, #0]
1006022c:	e794      	b.n	10060158 <smp_pp1_key_generation_method_selection+0x58>
1006022e:	46c0      	nop			@ (mov r8, r8)

10060230 <__arm_cp.5_0>:
10060230:	200011c0 	.word	0x200011c0

10060234 <__arm_cp.5_1>:
10060234:	1006d13a 	.word	0x1006d13a

10060238 <__arm_cp.5_2>:
10060238:	20001174 	.word	0x20001174

1006023c <__arm_cp.5_3>:
1006023c:	20001124 	.word	0x20001124

10060240 <smp_pp1_auth_req_field_generate_from_device_config>:
10060240:	490b      	ldr	r1, [pc, #44]	@ (10060270 <__arm_cp.6_0>)
10060242:	6809      	ldr	r1, [r1, #0]
10060244:	2230      	movs	r2, #48	@ 0x30
10060246:	5c8a      	ldrb	r2, [r1, r2]
10060248:	2301      	movs	r3, #1
1006024a:	4013      	ands	r3, r2
1006024c:	3130      	adds	r1, #48	@ 0x30
1006024e:	784a      	ldrb	r2, [r1, #1]
10060250:	07d2      	lsls	r2, r2, #31
10060252:	0f52      	lsrs	r2, r2, #29
10060254:	18d2      	adds	r2, r2, r3
10060256:	78cb      	ldrb	r3, [r1, #3]
10060258:	07db      	lsls	r3, r3, #31
1006025a:	0edb      	lsrs	r3, r3, #27
1006025c:	18d2      	adds	r2, r2, r3
1006025e:	7889      	ldrb	r1, [r1, #2]
10060260:	084b      	lsrs	r3, r1, #1
10060262:	430b      	orrs	r3, r1
10060264:	07d9      	lsls	r1, r3, #31
10060266:	0f09      	lsrs	r1, r1, #28
10060268:	1851      	adds	r1, r2, r1
1006026a:	7001      	strb	r1, [r0, #0]
1006026c:	4770      	bx	lr
1006026e:	46c0      	nop			@ (mov r8, r8)

10060270 <__arm_cp.6_0>:
10060270:	200011c0 	.word	0x200011c0

10060274 <smp_pp1_hndl_pairing_response_mode_through_event>:
10060274:	b570      	push	{r4, r5, r6, lr}
10060276:	4605      	mov	r5, r0
10060278:	8900      	ldrh	r0, [r0, #8]
1006027a:	f001 fd70 	bl	10061d5e <smp_sap_check_is_peer_device_bonded>
1006027e:	4246      	negs	r6, r0
10060280:	4146      	adcs	r6, r0
10060282:	491b      	ldr	r1, [pc, #108]	@ (100602f0 <__arm_cp.8_0>)
10060284:	6809      	ldr	r1, [r1, #0]
10060286:	223c      	movs	r2, #60	@ 0x3c
10060288:	5c89      	ldrb	r1, [r1, r2]
1006028a:	2902      	cmp	r1, #2
1006028c:	d004      	beq.n	10060298 <smp_pp1_hndl_pairing_response_mode_through_event+0x24>
1006028e:	2400      	movs	r4, #0
10060290:	2901      	cmp	r1, #1
10060292:	d12a      	bne.n	100602ea <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10060294:	2800      	cmp	r0, #0
10060296:	d128      	bne.n	100602ea <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10060298:	2008      	movs	r0, #8
1006029a:	4301      	orrs	r1, r0
1006029c:	75a9      	strb	r1, [r5, #22]
1006029e:	4815      	ldr	r0, [pc, #84]	@ (100602f4 <__arm_cp.8_1>)
100602a0:	6800      	ldr	r0, [r0, #0]
100602a2:	214e      	movs	r1, #78	@ 0x4e
100602a4:	5c40      	ldrb	r0, [r0, r1]
100602a6:	2401      	movs	r4, #1
100602a8:	0780      	lsls	r0, r0, #30
100602aa:	d51e      	bpl.n	100602ea <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
100602ac:	892d      	ldrh	r5, [r5, #8]
100602ae:	4812      	ldr	r0, [pc, #72]	@ (100602f8 <__arm_cp.8_2>)
100602b0:	6800      	ldr	r0, [r0, #0]
100602b2:	6980      	ldr	r0, [r0, #24]
100602b4:	2102      	movs	r1, #2
100602b6:	224b      	movs	r2, #75	@ 0x4b
100602b8:	2303      	movs	r3, #3
100602ba:	f7f3 f8d5 	bl	10053468 <aci_event_fifo_push_header>
100602be:	2800      	cmp	r0, #0
100602c0:	d013      	beq.n	100602ea <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
100602c2:	4601      	mov	r1, r0
100602c4:	7285      	strb	r5, [r0, #10]
100602c6:	2004      	movs	r0, #4
100602c8:	7248      	strb	r0, [r1, #9]
100602ca:	200b      	movs	r0, #11
100602cc:	7208      	strb	r0, [r1, #8]
100602ce:	2000      	movs	r0, #0
100602d0:	71c8      	strb	r0, [r1, #7]
100602d2:	2005      	movs	r0, #5
100602d4:	7188      	strb	r0, [r1, #6]
100602d6:	730e      	strb	r6, [r1, #12]
100602d8:	20ff      	movs	r0, #255	@ 0xff
100602da:	7148      	strb	r0, [r1, #5]
100602dc:	2082      	movs	r0, #130	@ 0x82
100602de:	7108      	strb	r0, [r1, #4]
100602e0:	0a28      	lsrs	r0, r5, #8
100602e2:	72c8      	strb	r0, [r1, #11]
100602e4:	2002      	movs	r0, #2
100602e6:	f7f3 f95c 	bl	100535a2 <aci_event_fifo_push>
100602ea:	4620      	mov	r0, r4
100602ec:	bd70      	pop	{r4, r5, r6, pc}
100602ee:	46c0      	nop			@ (mov r8, r8)

100602f0 <__arm_cp.8_0>:
100602f0:	200011c0 	.word	0x200011c0

100602f4 <__arm_cp.8_1>:
100602f4:	20001174 	.word	0x20001174

100602f8 <__arm_cp.8_2>:
100602f8:	20001124 	.word	0x20001124

100602fc <smp_pp1_pairing_packet_build>:
100602fc:	b510      	push	{r4, lr}
100602fe:	2407      	movs	r4, #7
10060300:	8044      	strh	r4, [r0, #2]
10060302:	6844      	ldr	r4, [r0, #4]
10060304:	7221      	strb	r1, [r4, #8]
10060306:	490b      	ldr	r1, [pc, #44]	@ (10060334 <__arm_cp.9_0>)
10060308:	6809      	ldr	r1, [r1, #0]
1006030a:	2440      	movs	r4, #64	@ 0x40
1006030c:	5d09      	ldrb	r1, [r1, r4]
1006030e:	6844      	ldr	r4, [r0, #4]
10060310:	7261      	strb	r1, [r4, #9]
10060312:	2101      	movs	r1, #1
10060314:	4011      	ands	r1, r2
10060316:	6842      	ldr	r2, [r0, #4]
10060318:	7291      	strb	r1, [r2, #10]
1006031a:	6841      	ldr	r1, [r0, #4]
1006031c:	72cb      	strb	r3, [r1, #11]
1006031e:	6841      	ldr	r1, [r0, #4]
10060320:	9a02      	ldr	r2, [sp, #8]
10060322:	730a      	strb	r2, [r1, #12]
10060324:	6841      	ldr	r1, [r0, #4]
10060326:	9a03      	ldr	r2, [sp, #12]
10060328:	734a      	strb	r2, [r1, #13]
1006032a:	6840      	ldr	r0, [r0, #4]
1006032c:	9904      	ldr	r1, [sp, #16]
1006032e:	7381      	strb	r1, [r0, #14]
10060330:	bd10      	pop	{r4, pc}
10060332:	46c0      	nop			@ (mov r8, r8)

10060334 <__arm_cp.9_0>:
10060334:	200011c0 	.word	0x200011c0

10060338 <le4ByteToInt32>:
10060338:	7801      	ldrb	r1, [r0, #0]
1006033a:	7842      	ldrb	r2, [r0, #1]
1006033c:	0212      	lsls	r2, r2, #8
1006033e:	1851      	adds	r1, r2, r1
10060340:	7882      	ldrb	r2, [r0, #2]
10060342:	0412      	lsls	r2, r2, #16
10060344:	1889      	adds	r1, r1, r2
10060346:	78c0      	ldrb	r0, [r0, #3]
10060348:	0600      	lsls	r0, r0, #24
1006034a:	1808      	adds	r0, r1, r0
1006034c:	4770      	bx	lr
	...

10060350 <aci_gap_numeric_comparison_value_event_push>:
10060350:	b5b0      	push	{r4, r5, r7, lr}
10060352:	460d      	mov	r5, r1
10060354:	4604      	mov	r4, r0
10060356:	4815      	ldr	r0, [pc, #84]	@ (100603ac <__arm_cp.6_0>)
10060358:	6800      	ldr	r0, [r0, #0]
1006035a:	214f      	movs	r1, #79	@ 0x4f
1006035c:	5c40      	ldrb	r0, [r0, r1]
1006035e:	0680      	lsls	r0, r0, #26
10060360:	d523      	bpl.n	100603aa <aci_gap_numeric_comparison_value_event_push+0x5a>
10060362:	4813      	ldr	r0, [pc, #76]	@ (100603b0 <__arm_cp.6_1>)
10060364:	6800      	ldr	r0, [r0, #0]
10060366:	6980      	ldr	r0, [r0, #24]
10060368:	2102      	movs	r1, #2
1006036a:	2249      	movs	r2, #73	@ 0x49
1006036c:	2303      	movs	r3, #3
1006036e:	f7f3 f87b 	bl	10053468 <aci_event_fifo_push_header>
10060372:	2800      	cmp	r0, #0
10060374:	d019      	beq.n	100603aa <aci_gap_numeric_comparison_value_event_push+0x5a>
10060376:	4601      	mov	r1, r0
10060378:	7305      	strb	r5, [r0, #12]
1006037a:	7284      	strb	r4, [r0, #10]
1006037c:	2004      	movs	r0, #4
1006037e:	7248      	strb	r0, [r1, #9]
10060380:	2009      	movs	r0, #9
10060382:	7208      	strb	r0, [r1, #8]
10060384:	2000      	movs	r0, #0
10060386:	71c8      	strb	r0, [r1, #7]
10060388:	2008      	movs	r0, #8
1006038a:	7188      	strb	r0, [r1, #6]
1006038c:	20ff      	movs	r0, #255	@ 0xff
1006038e:	7148      	strb	r0, [r1, #5]
10060390:	2082      	movs	r0, #130	@ 0x82
10060392:	7108      	strb	r0, [r1, #4]
10060394:	0e28      	lsrs	r0, r5, #24
10060396:	73c8      	strb	r0, [r1, #15]
10060398:	0c28      	lsrs	r0, r5, #16
1006039a:	7388      	strb	r0, [r1, #14]
1006039c:	0a28      	lsrs	r0, r5, #8
1006039e:	7348      	strb	r0, [r1, #13]
100603a0:	0a20      	lsrs	r0, r4, #8
100603a2:	72c8      	strb	r0, [r1, #11]
100603a4:	2002      	movs	r0, #2
100603a6:	f7f3 f8fc 	bl	100535a2 <aci_event_fifo_push>
100603aa:	bdb0      	pop	{r4, r5, r7, pc}

100603ac <__arm_cp.6_0>:
100603ac:	20001174 	.word	0x20001174

100603b0 <__arm_cp.6_1>:
100603b0:	20001124 	.word	0x20001124

100603b4 <smp_pp2_per_auth_stage1_start_excerpt_scp>:
100603b4:	b580      	push	{r7, lr}
100603b6:	4601      	mov	r1, r0
100603b8:	7cc0      	ldrb	r0, [r0, #19]
100603ba:	1e40      	subs	r0, r0, #1
100603bc:	2803      	cmp	r0, #3
100603be:	d812      	bhi.n	100603e6 <smp_pp2_per_auth_stage1_start_excerpt_scp+0x32>
100603c0:	4478      	add	r0, pc
100603c2:	7900      	ldrb	r0, [r0, #4]
100603c4:	0040      	lsls	r0, r0, #1
100603c6:	4487      	add	pc, r0
100603c8:	010b0501 	.word	0x010b0501
100603cc:	2000      	movs	r0, #0
100603ce:	f000 f80b 	bl	100603e8 <smp_pp2_per_rx_process_pairing_confirm>
100603d2:	bd80      	pop	{r7, pc}
100603d4:	20b5      	movs	r0, #181	@ 0xb5
100603d6:	7288      	strb	r0, [r1, #10]
100603d8:	7ec8      	ldrb	r0, [r1, #27]
100603da:	1c40      	adds	r0, r0, #1
100603dc:	76c8      	strb	r0, [r1, #27]
100603de:	bd80      	pop	{r7, pc}
100603e0:	4608      	mov	r0, r1
100603e2:	f000 fbd1 	bl	10060b88 <smp_scp_oob_confirm_receive_verify>
100603e6:	bd80      	pop	{r7, pc}

100603e8 <smp_pp2_per_rx_process_pairing_confirm>:
100603e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100603ea:	b089      	sub	sp, #36	@ 0x24
100603ec:	460c      	mov	r4, r1
100603ee:	4607      	mov	r7, r0
100603f0:	8909      	ldrh	r1, [r1, #8]
100603f2:	2500      	movs	r5, #0
100603f4:	2215      	movs	r2, #21
100603f6:	4628      	mov	r0, r5
100603f8:	f7f2 fe3e 	bl	10053078 <ACL_pkt_get>
100603fc:	2800      	cmp	r0, #0
100603fe:	d013      	beq.n	10060428 <smp_pp2_per_rx_process_pairing_confirm+0x40>
10060400:	4606      	mov	r6, r0
10060402:	2f00      	cmp	r7, #0
10060404:	d006      	beq.n	10060414 <smp_pp2_per_rx_process_pairing_confirm+0x2c>
10060406:	4623      	mov	r3, r4
10060408:	3328      	adds	r3, #40	@ 0x28
1006040a:	2105      	movs	r1, #5
1006040c:	2210      	movs	r2, #16
1006040e:	4638      	mov	r0, r7
10060410:	f7f2 fe70 	bl	100530f4 <ACL_pkt_read>
10060414:	7de0      	ldrb	r0, [r4, #23]
10060416:	0700      	lsls	r0, r0, #28
10060418:	d408      	bmi.n	1006042c <smp_pp2_per_rx_process_pairing_confirm+0x44>
1006041a:	4621      	mov	r1, r4
1006041c:	3148      	adds	r1, #72	@ 0x48
1006041e:	aa05      	add	r2, sp, #20
10060420:	4620      	mov	r0, r4
10060422:	f000 f89b 	bl	1006055c <smp_pp2_per_lep_confirm_value_compute>
10060426:	e007      	b.n	10060438 <smp_pp2_per_rx_process_pairing_confirm+0x50>
10060428:	2088      	movs	r0, #136	@ 0x88
1006042a:	e019      	b.n	10060460 <smp_pp2_per_rx_process_pairing_confirm+0x78>
1006042c:	a805      	add	r0, sp, #20
1006042e:	9002      	str	r0, [sp, #8]
10060430:	9401      	str	r4, [sp, #4]
10060432:	a801      	add	r0, sp, #4
10060434:	f7f1 fdf3 	bl	1005201e <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg>
10060438:	2011      	movs	r0, #17
1006043a:	8070      	strh	r0, [r6, #2]
1006043c:	6870      	ldr	r0, [r6, #4]
1006043e:	2103      	movs	r1, #3
10060440:	7201      	strb	r1, [r0, #8]
10060442:	2105      	movs	r1, #5
10060444:	2210      	movs	r2, #16
10060446:	ab05      	add	r3, sp, #20
10060448:	4630      	mov	r0, r6
1006044a:	f7f2 fe75 	bl	10053138 <ACL_pkt_write>
1006044e:	4620      	mov	r0, r4
10060450:	4631      	mov	r1, r6
10060452:	f005 fb45 	bl	10065ae0 <smp_dep_l2c_send_acl_packet>
10060456:	2800      	cmp	r0, #0
10060458:	d102      	bne.n	10060460 <smp_pp2_per_rx_process_pairing_confirm+0x78>
1006045a:	20b6      	movs	r0, #182	@ 0xb6
1006045c:	72a0      	strb	r0, [r4, #10]
1006045e:	4628      	mov	r0, r5
10060460:	b009      	add	sp, #36	@ 0x24
10060462:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060464 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp>:
10060464:	b51c      	push	{r2, r3, r4, lr}
10060466:	6802      	ldr	r2, [r0, #0]
10060468:	6840      	ldr	r0, [r0, #4]
1006046a:	7cd1      	ldrb	r1, [r2, #19]
1006046c:	2902      	cmp	r1, #2
1006046e:	d10b      	bne.n	10060488 <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp+0x24>
10060470:	7ed1      	ldrb	r1, [r2, #27]
10060472:	1e4b      	subs	r3, r1, #1
10060474:	490a      	ldr	r1, [pc, #40]	@ (100604a0 <__arm_cp.13_0>)
10060476:	6809      	ldr	r1, [r1, #0]
10060478:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
1006047a:	40dc      	lsrs	r4, r3
1006047c:	2301      	movs	r3, #1
1006047e:	4023      	ands	r3, r4
10060480:	247f      	movs	r4, #127	@ 0x7f
10060482:	43e4      	mvns	r4, r4
10060484:	191b      	adds	r3, r3, r4
10060486:	e002      	b.n	1006048e <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp+0x2a>
10060488:	4905      	ldr	r1, [pc, #20]	@ (100604a0 <__arm_cp.13_0>)
1006048a:	6809      	ldr	r1, [r1, #0]
1006048c:	2300      	movs	r3, #0
1006048e:	9000      	str	r0, [sp, #0]
10060490:	4608      	mov	r0, r1
10060492:	3064      	adds	r0, #100	@ 0x64
10060494:	31e4      	adds	r1, #228	@ 0xe4
10060496:	3248      	adds	r2, #72	@ 0x48
10060498:	b2db      	uxtb	r3, r3
1006049a:	f7ff fbbd 	bl	1005fc18 <smp_crt_f4_generate_confirm>
1006049e:	bd1c      	pop	{r2, r3, r4, pc}

100604a0 <__arm_cp.13_0>:
100604a0:	200011c0 	.word	0x200011c0

100604a4 <smp_pp2_per_rx_process_pairing_random_excerpt_scp>:
100604a4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100604a6:	c8b0      	ldmia	r0!, {r4, r5, r7}
100604a8:	6806      	ldr	r6, [r0, #0]
100604aa:	20ba      	movs	r0, #186	@ 0xba
100604ac:	7030      	strb	r0, [r6, #0]
100604ae:	2000      	movs	r0, #0
100604b0:	6038      	str	r0, [r7, #0]
100604b2:	7ce0      	ldrb	r0, [r4, #19]
100604b4:	2802      	cmp	r0, #2
100604b6:	d01a      	beq.n	100604ee <smp_pp2_per_rx_process_pairing_random_excerpt_scp+0x4a>
100604b8:	2804      	cmp	r0, #4
100604ba:	d137      	bne.n	1006052c <smp_pp2_per_rx_process_pairing_random_excerpt_scp+0x88>
100604bc:	481c      	ldr	r0, [pc, #112]	@ (10060530 <__arm_cp.14_0>)
100604be:	6801      	ldr	r1, [r0, #0]
100604c0:	ad02      	add	r5, sp, #8
100604c2:	9500      	str	r5, [sp, #0]
100604c4:	4622      	mov	r2, r4
100604c6:	3238      	adds	r2, #56	@ 0x38
100604c8:	4623      	mov	r3, r4
100604ca:	3348      	adds	r3, #72	@ 0x48
100604cc:	4608      	mov	r0, r1
100604ce:	30e4      	adds	r0, #228	@ 0xe4
100604d0:	3164      	adds	r1, #100	@ 0x64
100604d2:	f7ff fc8b 	bl	1005fdec <smp_crt_g2_generate_num_comp_val>
100604d6:	20c1      	movs	r0, #193	@ 0xc1
100604d8:	7030      	strb	r0, [r6, #0]
100604da:	4628      	mov	r0, r5
100604dc:	f7ff ff2c 	bl	10060338 <le4ByteToInt32>
100604e0:	4914      	ldr	r1, [pc, #80]	@ (10060534 <__arm_cp.14_1>)
100604e2:	f7df ff47 	bl	10040374 <__aeabi_uidivmod>
100604e6:	8920      	ldrh	r0, [r4, #8]
100604e8:	f7ff ff32 	bl	10060350 <aci_gap_numeric_comparison_value_event_push>
100604ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100604ee:	4810      	ldr	r0, [pc, #64]	@ (10060530 <__arm_cp.14_0>)
100604f0:	6801      	ldr	r1, [r0, #0]
100604f2:	6b88      	ldr	r0, [r1, #56]	@ 0x38
100604f4:	7ee2      	ldrb	r2, [r4, #27]
100604f6:	9201      	str	r2, [sp, #4]
100604f8:	9500      	str	r5, [sp, #0]
100604fa:	1e52      	subs	r2, r2, #1
100604fc:	40d0      	lsrs	r0, r2
100604fe:	2280      	movs	r2, #128	@ 0x80
10060500:	4302      	orrs	r2, r0
10060502:	2381      	movs	r3, #129	@ 0x81
10060504:	4013      	ands	r3, r2
10060506:	4622      	mov	r2, r4
10060508:	3238      	adds	r2, #56	@ 0x38
1006050a:	4608      	mov	r0, r1
1006050c:	30e4      	adds	r0, #228	@ 0xe4
1006050e:	3164      	adds	r1, #100	@ 0x64
10060510:	f7ff fb82 	bl	1005fc18 <smp_crt_f4_generate_confirm>
10060514:	3428      	adds	r4, #40	@ 0x28
10060516:	2210      	movs	r2, #16
10060518:	4628      	mov	r0, r5
1006051a:	4621      	mov	r1, r4
1006051c:	f7e5 fccc 	bl	10045eb8 <BLEPLAT_MemCmp>
10060520:	6038      	str	r0, [r7, #0]
10060522:	9801      	ldr	r0, [sp, #4]
10060524:	2813      	cmp	r0, #19
10060526:	d801      	bhi.n	1006052c <smp_pp2_per_rx_process_pairing_random_excerpt_scp+0x88>
10060528:	20b4      	movs	r0, #180	@ 0xb4
1006052a:	7030      	strb	r0, [r6, #0]
1006052c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006052e:	46c0      	nop			@ (mov r8, r8)

10060530 <__arm_cp.14_0>:
10060530:	200011c0 	.word	0x200011c0

10060534 <__arm_cp.14_1>:
10060534:	000f4240 	.word	0x000f4240

10060538 <smp_pp2_per_auth_stage_1_start>:
10060538:	b510      	push	{r4, lr}
1006053a:	4604      	mov	r4, r0
1006053c:	3048      	adds	r0, #72	@ 0x48
1006053e:	2110      	movs	r1, #16
10060540:	2200      	movs	r2, #0
10060542:	f002 f8ef 	bl	10062724 <HAL_Generate_Random_Bytes_To>
10060546:	7de0      	ldrb	r0, [r4, #23]
10060548:	0700      	lsls	r0, r0, #28
1006054a:	d402      	bmi.n	10060552 <smp_pp2_per_auth_stage_1_start+0x1a>
1006054c:	20b5      	movs	r0, #181	@ 0xb5
1006054e:	72a0      	strb	r0, [r4, #10]
10060550:	bd10      	pop	{r4, pc}
10060552:	4620      	mov	r0, r4
10060554:	f7f1 fd57 	bl	10052006 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg>
10060558:	bd10      	pop	{r4, pc}
	...

1006055c <smp_pp2_per_lep_confirm_value_compute>:
1006055c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006055e:	b09b      	sub	sp, #108	@ 0x6c
10060560:	4614      	mov	r4, r2
10060562:	9106      	str	r1, [sp, #24]
10060564:	4607      	mov	r7, r0
10060566:	ae0f      	add	r6, sp, #60	@ 0x3c
10060568:	2500      	movs	r5, #0
1006056a:	222e      	movs	r2, #46	@ 0x2e
1006056c:	4630      	mov	r0, r6
1006056e:	4629      	mov	r1, r5
10060570:	f7e5 fc92 	bl	10045e98 <BLEPLAT_MemSet>
10060574:	4630      	mov	r0, r6
10060576:	3010      	adds	r0, #16
10060578:	2210      	movs	r2, #16
1006057a:	9906      	ldr	r1, [sp, #24]
1006057c:	f7e5 fc7c 	bl	10045e78 <BLEPLAT_MemCpy>
10060580:	3620      	adds	r6, #32
10060582:	7cf8      	ldrb	r0, [r7, #19]
10060584:	2803      	cmp	r0, #3
10060586:	d00d      	beq.n	100605a4 <smp_pp2_per_lep_confirm_value_compute+0x48>
10060588:	2802      	cmp	r0, #2
1006058a:	d112      	bne.n	100605b2 <smp_pp2_per_lep_confirm_value_compute+0x56>
1006058c:	4844      	ldr	r0, [pc, #272]	@ (100606a0 <__arm_cp.16_0>)
1006058e:	6800      	ldr	r0, [r0, #0]
10060590:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10060592:	a90f      	add	r1, sp, #60	@ 0x3c
10060594:	7008      	strb	r0, [r1, #0]
10060596:	0a02      	lsrs	r2, r0, #8
10060598:	704a      	strb	r2, [r1, #1]
1006059a:	0c02      	lsrs	r2, r0, #16
1006059c:	708a      	strb	r2, [r1, #2]
1006059e:	0e00      	lsrs	r0, r0, #24
100605a0:	70c8      	strb	r0, [r1, #3]
100605a2:	e006      	b.n	100605b2 <smp_pp2_per_lep_confirm_value_compute+0x56>
100605a4:	483e      	ldr	r0, [pc, #248]	@ (100606a0 <__arm_cp.16_0>)
100605a6:	6801      	ldr	r1, [r0, #0]
100605a8:	3144      	adds	r1, #68	@ 0x44
100605aa:	a80f      	add	r0, sp, #60	@ 0x3c
100605ac:	2210      	movs	r2, #16
100605ae:	f7e5 fc63 	bl	10045e78 <BLEPLAT_MemCpy>
100605b2:	7d38      	ldrb	r0, [r7, #20]
100605b4:	2101      	movs	r1, #1
100605b6:	9105      	str	r1, [sp, #20]
100605b8:	f7ff fd1a 	bl	1005fff0 <smp_pp1_get_pairing_pdu_offset>
100605bc:	9002      	str	r0, [sp, #8]
100605be:	7d38      	ldrb	r0, [r7, #20]
100605c0:	4629      	mov	r1, r5
100605c2:	f7ff fd15 	bl	1005fff0 <smp_pp1_get_pairing_pdu_offset>
100605c6:	9001      	str	r0, [sp, #4]
100605c8:	2061      	movs	r0, #97	@ 0x61
100605ca:	5c38      	ldrb	r0, [r7, r0]
100605cc:	71f0      	strb	r0, [r6, #7]
100605ce:	9606      	str	r6, [sp, #24]
100605d0:	ae0f      	add	r6, sp, #60	@ 0x3c
100605d2:	4630      	mov	r0, r6
100605d4:	3028      	adds	r0, #40	@ 0x28
100605d6:	4639      	mov	r1, r7
100605d8:	3162      	adds	r1, #98	@ 0x62
100605da:	2206      	movs	r2, #6
100605dc:	9200      	str	r2, [sp, #0]
100605de:	4b31      	ldr	r3, [pc, #196]	@ (100606a4 <__arm_cp.16_1>)
100605e0:	9004      	str	r0, [sp, #16]
100605e2:	4798      	blx	r3
100605e4:	7878      	ldrb	r0, [r7, #1]
100605e6:	9906      	ldr	r1, [sp, #24]
100605e8:	7008      	strb	r0, [r1, #0]
100605ea:	4630      	mov	r0, r6
100605ec:	3021      	adds	r0, #33	@ 0x21
100605ee:	1cb9      	adds	r1, r7, #2
100605f0:	9003      	str	r0, [sp, #12]
100605f2:	9a00      	ldr	r2, [sp, #0]
100605f4:	4b2b      	ldr	r3, [pc, #172]	@ (100606a4 <__arm_cp.16_1>)
100605f6:	4798      	blx	r3
100605f8:	4829      	ldr	r0, [pc, #164]	@ (100606a0 <__arm_cp.16_0>)
100605fa:	6800      	ldr	r0, [r0, #0]
100605fc:	9901      	ldr	r1, [sp, #4]
100605fe:	1841      	adds	r1, r0, r1
10060600:	31b4      	adds	r1, #180	@ 0xb4
10060602:	af0b      	add	r7, sp, #44	@ 0x2c
10060604:	4638      	mov	r0, r7
10060606:	3009      	adds	r0, #9
10060608:	2207      	movs	r2, #7
1006060a:	9201      	str	r2, [sp, #4]
1006060c:	4b25      	ldr	r3, [pc, #148]	@ (100606a4 <__arm_cp.16_1>)
1006060e:	4798      	blx	r3
10060610:	4823      	ldr	r0, [pc, #140]	@ (100606a0 <__arm_cp.16_0>)
10060612:	6800      	ldr	r0, [r0, #0]
10060614:	9902      	ldr	r1, [sp, #8]
10060616:	1841      	adds	r1, r0, r1
10060618:	31b4      	adds	r1, #180	@ 0xb4
1006061a:	1cb8      	adds	r0, r7, #2
1006061c:	9a01      	ldr	r2, [sp, #4]
1006061e:	4b21      	ldr	r3, [pc, #132]	@ (100606a4 <__arm_cp.16_1>)
10060620:	4798      	blx	r3
10060622:	1c78      	adds	r0, r7, #1
10060624:	9906      	ldr	r1, [sp, #24]
10060626:	1dc9      	adds	r1, r1, #7
10060628:	9a05      	ldr	r2, [sp, #20]
1006062a:	4b1e      	ldr	r3, [pc, #120]	@ (100606a4 <__arm_cp.16_1>)
1006062c:	4798      	blx	r3
1006062e:	4b1d      	ldr	r3, [pc, #116]	@ (100606a4 <__arm_cp.16_1>)
10060630:	4638      	mov	r0, r7
10060632:	9906      	ldr	r1, [sp, #24]
10060634:	9a05      	ldr	r2, [sp, #20]
10060636:	4798      	blx	r3
10060638:	3610      	adds	r6, #16
1006063a:	2d10      	cmp	r5, #16
1006063c:	d007      	beq.n	1006064e <smp_pp2_per_lep_confirm_value_compute+0xf2>
1006063e:	5d70      	ldrb	r0, [r6, r5]
10060640:	a90b      	add	r1, sp, #44	@ 0x2c
10060642:	5d49      	ldrb	r1, [r1, r5]
10060644:	4041      	eors	r1, r0
10060646:	a807      	add	r0, sp, #28
10060648:	5541      	strb	r1, [r0, r5]
1006064a:	1c6d      	adds	r5, r5, #1
1006064c:	e7f5      	b.n	1006063a <smp_pp2_per_lep_confirm_value_compute+0xde>
1006064e:	a80f      	add	r0, sp, #60	@ 0x3c
10060650:	a907      	add	r1, sp, #28
10060652:	4622      	mov	r2, r4
10060654:	f7f7 f978 	bl	10057948 <hci_le_encrypt>
10060658:	ae0b      	add	r6, sp, #44	@ 0x2c
1006065a:	2500      	movs	r5, #0
1006065c:	2210      	movs	r2, #16
1006065e:	4630      	mov	r0, r6
10060660:	4629      	mov	r1, r5
10060662:	f7e5 fc19 	bl	10045e98 <BLEPLAT_MemSet>
10060666:	2706      	movs	r7, #6
10060668:	4630      	mov	r0, r6
1006066a:	9904      	ldr	r1, [sp, #16]
1006066c:	463a      	mov	r2, r7
1006066e:	f7e5 fc03 	bl	10045e78 <BLEPLAT_MemCpy>
10060672:	1db0      	adds	r0, r6, #6
10060674:	9903      	ldr	r1, [sp, #12]
10060676:	463a      	mov	r2, r7
10060678:	f7e5 fbfe 	bl	10045e78 <BLEPLAT_MemCpy>
1006067c:	2d10      	cmp	r5, #16
1006067e:	d007      	beq.n	10060690 <smp_pp2_per_lep_confirm_value_compute+0x134>
10060680:	5d60      	ldrb	r0, [r4, r5]
10060682:	a90b      	add	r1, sp, #44	@ 0x2c
10060684:	5d49      	ldrb	r1, [r1, r5]
10060686:	4041      	eors	r1, r0
10060688:	a807      	add	r0, sp, #28
1006068a:	5541      	strb	r1, [r0, r5]
1006068c:	1c6d      	adds	r5, r5, #1
1006068e:	e7f5      	b.n	1006067c <smp_pp2_per_lep_confirm_value_compute+0x120>
10060690:	a80f      	add	r0, sp, #60	@ 0x3c
10060692:	a907      	add	r1, sp, #28
10060694:	4622      	mov	r2, r4
10060696:	f7f7 f957 	bl	10057948 <hci_le_encrypt>
1006069a:	b01b      	add	sp, #108	@ 0x6c
1006069c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006069e:	46c0      	nop			@ (mov r8, r8)

100606a0 <__arm_cp.16_0>:
100606a0:	200011c0 	.word	0x200011c0

100606a4 <__arm_cp.16_1>:
100606a4:	10045e79 	.word	0x10045e79

100606a8 <smp_pp2_per_rx_process_pairing_random>:
100606a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100606aa:	b08b      	sub	sp, #44	@ 0x2c
100606ac:	460d      	mov	r5, r1
100606ae:	4606      	mov	r6, r0
100606b0:	2400      	movs	r4, #0
100606b2:	9402      	str	r4, [sp, #8]
100606b4:	8909      	ldrh	r1, [r1, #8]
100606b6:	2215      	movs	r2, #21
100606b8:	4620      	mov	r0, r4
100606ba:	f7f2 fcdd 	bl	10053078 <ACL_pkt_get>
100606be:	2800      	cmp	r0, #0
100606c0:	d020      	beq.n	10060704 <smp_pp2_per_rx_process_pairing_random+0x5c>
100606c2:	4607      	mov	r7, r0
100606c4:	462b      	mov	r3, r5
100606c6:	3338      	adds	r3, #56	@ 0x38
100606c8:	2105      	movs	r1, #5
100606ca:	2210      	movs	r2, #16
100606cc:	4630      	mov	r0, r6
100606ce:	461e      	mov	r6, r3
100606d0:	f7f2 fd10 	bl	100530f4 <ACL_pkt_read>
100606d4:	7de8      	ldrb	r0, [r5, #23]
100606d6:	0700      	lsls	r0, r0, #28
100606d8:	d416      	bmi.n	10060708 <smp_pp2_per_rx_process_pairing_random+0x60>
100606da:	9400      	str	r4, [sp, #0]
100606dc:	4634      	mov	r4, r6
100606de:	ae03      	add	r6, sp, #12
100606e0:	4628      	mov	r0, r5
100606e2:	4621      	mov	r1, r4
100606e4:	4632      	mov	r2, r6
100606e6:	f7ff ff39 	bl	1006055c <smp_pp2_per_lep_confirm_value_compute>
100606ea:	4629      	mov	r1, r5
100606ec:	3128      	adds	r1, #40	@ 0x28
100606ee:	2210      	movs	r2, #16
100606f0:	4630      	mov	r0, r6
100606f2:	4626      	mov	r6, r4
100606f4:	9c00      	ldr	r4, [sp, #0]
100606f6:	f7e5 fbdf 	bl	10045eb8 <BLEPLAT_MemCmp>
100606fa:	a901      	add	r1, sp, #4
100606fc:	22bc      	movs	r2, #188	@ 0xbc
100606fe:	700a      	strb	r2, [r1, #0]
10060700:	9002      	str	r0, [sp, #8]
10060702:	e00c      	b.n	1006071e <smp_pp2_per_rx_process_pairing_random+0x76>
10060704:	2488      	movs	r4, #136	@ 0x88
10060706:	e05b      	b.n	100607c0 <smp_pp2_per_rx_process_pairing_random+0x118>
10060708:	a801      	add	r0, sp, #4
1006070a:	900a      	str	r0, [sp, #40]	@ 0x28
1006070c:	a802      	add	r0, sp, #8
1006070e:	9009      	str	r0, [sp, #36]	@ 0x24
10060710:	a803      	add	r0, sp, #12
10060712:	9008      	str	r0, [sp, #32]
10060714:	9507      	str	r5, [sp, #28]
10060716:	a807      	add	r0, sp, #28
10060718:	f7f1 fc8d 	bl	10052036 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg>
1006071c:	9802      	ldr	r0, [sp, #8]
1006071e:	2800      	cmp	r0, #0
10060720:	d006      	beq.n	10060730 <smp_pp2_per_rx_process_pairing_random+0x88>
10060722:	2104      	movs	r1, #4
10060724:	2301      	movs	r3, #1
10060726:	4628      	mov	r0, r5
10060728:	463a      	mov	r2, r7
1006072a:	f005 fbd5 	bl	10065ed8 <smp_pp3_pairing_failed_send>
1006072e:	e01b      	b.n	10060768 <smp_pp2_per_rx_process_pairing_random+0xc0>
10060730:	2011      	movs	r0, #17
10060732:	8078      	strh	r0, [r7, #2]
10060734:	6878      	ldr	r0, [r7, #4]
10060736:	2104      	movs	r1, #4
10060738:	7201      	strb	r1, [r0, #8]
1006073a:	462b      	mov	r3, r5
1006073c:	3348      	adds	r3, #72	@ 0x48
1006073e:	2105      	movs	r1, #5
10060740:	2210      	movs	r2, #16
10060742:	4638      	mov	r0, r7
10060744:	f7f2 fcf8 	bl	10053138 <ACL_pkt_write>
10060748:	4628      	mov	r0, r5
1006074a:	4639      	mov	r1, r7
1006074c:	f005 f9c8 	bl	10065ae0 <smp_dep_l2c_send_acl_packet>
10060750:	2800      	cmp	r0, #0
10060752:	d109      	bne.n	10060768 <smp_pp2_per_rx_process_pairing_random+0xc0>
10060754:	9801      	ldr	r0, [sp, #4]
10060756:	72a8      	strb	r0, [r5, #10]
10060758:	481b      	ldr	r0, [pc, #108]	@ (100607c8 <__arm_cp.17_0>)
1006075a:	6800      	ldr	r0, [r0, #0]
1006075c:	2135      	movs	r1, #53	@ 0x35
1006075e:	5c40      	ldrb	r0, [r0, r1]
10060760:	7c29      	ldrb	r1, [r5, #16]
10060762:	4281      	cmp	r1, r0
10060764:	d900      	bls.n	10060768 <smp_pp2_per_rx_process_pairing_random+0xc0>
10060766:	7428      	strb	r0, [r5, #16]
10060768:	9802      	ldr	r0, [sp, #8]
1006076a:	2800      	cmp	r0, #0
1006076c:	d128      	bne.n	100607c0 <smp_pp2_per_rx_process_pairing_random+0x118>
1006076e:	7de8      	ldrb	r0, [r5, #23]
10060770:	0700      	lsls	r0, r0, #28
10060772:	d425      	bmi.n	100607c0 <smp_pp2_per_rx_process_pairing_random+0x118>
10060774:	a807      	add	r0, sp, #28
10060776:	2400      	movs	r4, #0
10060778:	2210      	movs	r2, #16
1006077a:	4621      	mov	r1, r4
1006077c:	f7e5 fb8c 	bl	10045e98 <BLEPLAT_MemSet>
10060780:	7ce8      	ldrb	r0, [r5, #19]
10060782:	2803      	cmp	r0, #3
10060784:	d00d      	beq.n	100607a2 <smp_pp2_per_rx_process_pairing_random+0xfa>
10060786:	2802      	cmp	r0, #2
10060788:	d112      	bne.n	100607b0 <smp_pp2_per_rx_process_pairing_random+0x108>
1006078a:	480f      	ldr	r0, [pc, #60]	@ (100607c8 <__arm_cp.17_0>)
1006078c:	6800      	ldr	r0, [r0, #0]
1006078e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10060790:	a907      	add	r1, sp, #28
10060792:	7008      	strb	r0, [r1, #0]
10060794:	0a02      	lsrs	r2, r0, #8
10060796:	704a      	strb	r2, [r1, #1]
10060798:	0c02      	lsrs	r2, r0, #16
1006079a:	708a      	strb	r2, [r1, #2]
1006079c:	0e00      	lsrs	r0, r0, #24
1006079e:	70c8      	strb	r0, [r1, #3]
100607a0:	e006      	b.n	100607b0 <smp_pp2_per_rx_process_pairing_random+0x108>
100607a2:	4809      	ldr	r0, [pc, #36]	@ (100607c8 <__arm_cp.17_0>)
100607a4:	6801      	ldr	r1, [r0, #0]
100607a6:	3144      	adds	r1, #68	@ 0x44
100607a8:	a807      	add	r0, sp, #28
100607aa:	2210      	movs	r2, #16
100607ac:	f7e5 fb64 	bl	10045e78 <BLEPLAT_MemCpy>
100607b0:	4629      	mov	r1, r5
100607b2:	3148      	adds	r1, #72	@ 0x48
100607b4:	3528      	adds	r5, #40	@ 0x28
100607b6:	a807      	add	r0, sp, #28
100607b8:	4632      	mov	r2, r6
100607ba:	462b      	mov	r3, r5
100607bc:	f7ff fa06 	bl	1005fbcc <smp_crt_s1_generate_stk>
100607c0:	4620      	mov	r0, r4
100607c2:	b00b      	add	sp, #44	@ 0x2c
100607c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100607c6:	46c0      	nop			@ (mov r8, r8)

100607c8 <__arm_cp.17_0>:
100607c8:	200011c0 	.word	0x200011c0

100607cc <smp_get_remote_device_list_index>:
100607cc:	b5b0      	push	{r4, r5, r7, lr}
100607ce:	490d      	ldr	r1, [pc, #52]	@ (10060804 <__arm_cp.0_0>)
100607d0:	6809      	ldr	r1, [r1, #0]
100607d2:	2234      	movs	r2, #52	@ 0x34
100607d4:	5c89      	ldrb	r1, [r1, r2]
100607d6:	2800      	cmp	r0, #0
100607d8:	d011      	beq.n	100607fe <smp_get_remote_device_list_index+0x32>
100607da:	4a0b      	ldr	r2, [pc, #44]	@ (10060808 <__arm_cp.0_1>)
100607dc:	6812      	ldr	r2, [r2, #0]
100607de:	32a4      	adds	r2, #164	@ 0xa4
100607e0:	2300      	movs	r3, #0
100607e2:	b2dc      	uxtb	r4, r3
100607e4:	428c      	cmp	r4, r1
100607e6:	d20a      	bcs.n	100607fe <smp_get_remote_device_list_index+0x32>
100607e8:	2570      	movs	r5, #112	@ 0x70
100607ea:	4365      	muls	r5, r4
100607ec:	6814      	ldr	r4, [r2, #0]
100607ee:	1964      	adds	r4, r4, r5
100607f0:	8924      	ldrh	r4, [r4, #8]
100607f2:	4044      	eors	r4, r0
100607f4:	0524      	lsls	r4, r4, #20
100607f6:	d001      	beq.n	100607fc <smp_get_remote_device_list_index+0x30>
100607f8:	1c5b      	adds	r3, r3, #1
100607fa:	e7f2      	b.n	100607e2 <smp_get_remote_device_list_index+0x16>
100607fc:	4619      	mov	r1, r3
100607fe:	b2c8      	uxtb	r0, r1
10060800:	bdb0      	pop	{r4, r5, r7, pc}
10060802:	46c0      	nop			@ (mov r8, r8)

10060804 <__arm_cp.0_0>:
10060804:	20001120 	.word	0x20001120

10060808 <__arm_cp.0_1>:
10060808:	200011c0 	.word	0x200011c0

1006080c <smp_get_remote_device_list_item>:
1006080c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006080e:	4601      	mov	r1, r0
10060810:	2000      	movs	r0, #0
10060812:	2900      	cmp	r1, #0
10060814:	d017      	beq.n	10060846 <smp_get_remote_device_list_item+0x3a>
10060816:	4a0c      	ldr	r2, [pc, #48]	@ (10060848 <__arm_cp.1_0>)
10060818:	6812      	ldr	r2, [r2, #0]
1006081a:	2334      	movs	r3, #52	@ 0x34
1006081c:	5cd3      	ldrb	r3, [r2, r3]
1006081e:	2270      	movs	r2, #112	@ 0x70
10060820:	435a      	muls	r2, r3
10060822:	236f      	movs	r3, #111	@ 0x6f
10060824:	43dd      	mvns	r5, r3
10060826:	4b09      	ldr	r3, [pc, #36]	@ (1006084c <__arm_cp.1_1>)
10060828:	681b      	ldr	r3, [r3, #0]
1006082a:	33a4      	adds	r3, #164	@ 0xa4
1006082c:	462c      	mov	r4, r5
1006082e:	3470      	adds	r4, #112	@ 0x70
10060830:	42a2      	cmp	r2, r4
10060832:	d008      	beq.n	10060846 <smp_get_remote_device_list_item+0x3a>
10060834:	681e      	ldr	r6, [r3, #0]
10060836:	1975      	adds	r5, r6, r5
10060838:	2778      	movs	r7, #120	@ 0x78
1006083a:	5bed      	ldrh	r5, [r5, r7]
1006083c:	404d      	eors	r5, r1
1006083e:	052d      	lsls	r5, r5, #20
10060840:	4625      	mov	r5, r4
10060842:	d1f4      	bne.n	1006082e <smp_get_remote_device_list_item+0x22>
10060844:	1930      	adds	r0, r6, r4
10060846:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060848 <__arm_cp.1_0>:
10060848:	20001120 	.word	0x20001120

1006084c <__arm_cp.1_1>:
1006084c:	200011c0 	.word	0x200011c0

10060850 <smp_oob_check_is_remote_data_present>:
10060850:	b5b0      	push	{r4, r5, r7, lr}
10060852:	4604      	mov	r4, r0
10060854:	480b      	ldr	r0, [pc, #44]	@ (10060884 <__arm_cp.2_0>)
10060856:	6800      	ldr	r0, [r0, #0]
10060858:	21ac      	movs	r1, #172	@ 0xac
1006085a:	5840      	ldr	r0, [r0, r1]
1006085c:	7845      	ldrb	r5, [r0, #1]
1006085e:	1c80      	adds	r0, r0, #2
10060860:	1ca1      	adds	r1, r4, #2
10060862:	2206      	movs	r2, #6
10060864:	f7e5 fb28 	bl	10045eb8 <BLEPLAT_MemCmp>
10060868:	4601      	mov	r1, r0
1006086a:	2000      	movs	r0, #0
1006086c:	2900      	cmp	r1, #0
1006086e:	d000      	beq.n	10060872 <smp_oob_check_is_remote_data_present+0x22>
10060870:	bdb0      	pop	{r4, r5, r7, pc}
10060872:	7861      	ldrb	r1, [r4, #1]
10060874:	428d      	cmp	r5, r1
10060876:	d1fb      	bne.n	10060870 <smp_oob_check_is_remote_data_present+0x20>
10060878:	7b61      	ldrb	r1, [r4, #13]
1006087a:	2001      	movs	r0, #1
1006087c:	4301      	orrs	r1, r0
1006087e:	7361      	strb	r1, [r4, #13]
10060880:	bdb0      	pop	{r4, r5, r7, pc}
10060882:	46c0      	nop			@ (mov r8, r8)

10060884 <__arm_cp.2_0>:
10060884:	200011c0 	.word	0x200011c0

10060888 <smp_oob_get_remote_data_reference>:
10060888:	b5b0      	push	{r4, r5, r7, lr}
1006088a:	461c      	mov	r4, r3
1006088c:	4615      	mov	r5, r2
1006088e:	2800      	cmp	r0, #0
10060890:	d004      	beq.n	1006089c <smp_oob_get_remote_data_reference+0x14>
10060892:	f7ff ffdd 	bl	10060850 <smp_oob_check_is_remote_data_present>
10060896:	2800      	cmp	r0, #0
10060898:	d102      	bne.n	100608a0 <smp_oob_get_remote_data_reference+0x18>
1006089a:	e013      	b.n	100608c4 <smp_oob_get_remote_data_reference+0x3c>
1006089c:	2900      	cmp	r1, #0
1006089e:	d111      	bne.n	100608c4 <smp_oob_get_remote_data_reference+0x3c>
100608a0:	2d02      	cmp	r5, #2
100608a2:	d205      	bcs.n	100608b0 <smp_oob_get_remote_data_reference+0x28>
100608a4:	4808      	ldr	r0, [pc, #32]	@ (100608c8 <__arm_cp.3_0>)
100608a6:	6800      	ldr	r0, [r0, #0]
100608a8:	21ac      	movs	r1, #172	@ 0xac
100608aa:	5840      	ldr	r0, [r0, r1]
100608ac:	3008      	adds	r0, #8
100608ae:	e006      	b.n	100608be <smp_oob_get_remote_data_reference+0x36>
100608b0:	2d02      	cmp	r5, #2
100608b2:	d107      	bne.n	100608c4 <smp_oob_get_remote_data_reference+0x3c>
100608b4:	4804      	ldr	r0, [pc, #16]	@ (100608c8 <__arm_cp.3_0>)
100608b6:	6800      	ldr	r0, [r0, #0]
100608b8:	21ac      	movs	r1, #172	@ 0xac
100608ba:	5840      	ldr	r0, [r0, r1]
100608bc:	3018      	adds	r0, #24
100608be:	6020      	str	r0, [r4, #0]
100608c0:	2000      	movs	r0, #0
100608c2:	bdb0      	pop	{r4, r5, r7, pc}
100608c4:	2012      	movs	r0, #18
100608c6:	bdb0      	pop	{r4, r5, r7, pc}

100608c8 <__arm_cp.3_0>:
100608c8:	200011c0 	.word	0x200011c0

100608cc <smp_oob_clear_remote_data_entry>:
100608cc:	b580      	push	{r7, lr}
100608ce:	2228      	movs	r2, #40	@ 0x28
100608d0:	4350      	muls	r0, r2
100608d2:	4904      	ldr	r1, [pc, #16]	@ (100608e4 <__arm_cp.4_0>)
100608d4:	6809      	ldr	r1, [r1, #0]
100608d6:	23ac      	movs	r3, #172	@ 0xac
100608d8:	58c9      	ldr	r1, [r1, r3]
100608da:	1808      	adds	r0, r1, r0
100608dc:	2100      	movs	r1, #0
100608de:	f7e5 fadb 	bl	10045e98 <BLEPLAT_MemSet>
100608e2:	bd80      	pop	{r7, pc}

100608e4 <__arm_cp.4_0>:
100608e4:	200011c0 	.word	0x200011c0

100608e8 <smp_scp_init>:
100608e8:	b5b0      	push	{r4, r5, r7, lr}
100608ea:	2800      	cmp	r0, #0
100608ec:	d014      	beq.n	10060918 <smp_scp_init+0x30>
100608ee:	4d0b      	ldr	r5, [pc, #44]	@ (1006091c <__arm_cp.0_0>)
100608f0:	6828      	ldr	r0, [r5, #0]
100608f2:	2142      	movs	r1, #66	@ 0x42
100608f4:	5c42      	ldrb	r2, [r0, r1]
100608f6:	2308      	movs	r3, #8
100608f8:	4313      	orrs	r3, r2
100608fa:	5443      	strb	r3, [r0, r1]
100608fc:	3064      	adds	r0, #100	@ 0x64
100608fe:	4908      	ldr	r1, [pc, #32]	@ (10060920 <__arm_cp.0_1>)
10060900:	2420      	movs	r4, #32
10060902:	4622      	mov	r2, r4
10060904:	f7e5 fab8 	bl	10045e78 <BLEPLAT_MemCpy>
10060908:	6828      	ldr	r0, [r5, #0]
1006090a:	3084      	adds	r0, #132	@ 0x84
1006090c:	4905      	ldr	r1, [pc, #20]	@ (10060924 <__arm_cp.0_2>)
1006090e:	4622      	mov	r2, r4
10060910:	f7e5 fab2 	bl	10045e78 <BLEPLAT_MemCpy>
10060914:	f7f7 f932 	bl	10057b7c <hci_vs_force_local_p256_debug_key_api>
10060918:	bdb0      	pop	{r4, r5, r7, pc}
1006091a:	46c0      	nop			@ (mov r8, r8)

1006091c <__arm_cp.0_0>:
1006091c:	200011c0 	.word	0x200011c0

10060920 <__arm_cp.0_1>:
10060920:	1006d153 	.word	0x1006d153

10060924 <__arm_cp.0_2>:
10060924:	1006d173 	.word	0x1006d173

10060928 <smp_scp_is_another_sc_pairing_ongoing>:
10060928:	b570      	push	{r4, r5, r6, lr}
1006092a:	490d      	ldr	r1, [pc, #52]	@ (10060960 <__arm_cp.1_0>)
1006092c:	6809      	ldr	r1, [r1, #0]
1006092e:	2234      	movs	r2, #52	@ 0x34
10060930:	5c89      	ldrb	r1, [r1, r2]
10060932:	2270      	movs	r2, #112	@ 0x70
10060934:	434a      	muls	r2, r1
10060936:	490b      	ldr	r1, [pc, #44]	@ (10060964 <__arm_cp.1_1>)
10060938:	680b      	ldr	r3, [r1, #0]
1006093a:	33a4      	adds	r3, #164	@ 0xa4
1006093c:	2100      	movs	r1, #0
1006093e:	460c      	mov	r4, r1
10060940:	42a2      	cmp	r2, r4
10060942:	d00a      	beq.n	1006095a <smp_scp_is_another_sc_pairing_ongoing+0x32>
10060944:	681d      	ldr	r5, [r3, #0]
10060946:	192d      	adds	r5, r5, r4
10060948:	7dee      	ldrb	r6, [r5, #23]
1006094a:	07f6      	lsls	r6, r6, #31
1006094c:	d002      	beq.n	10060954 <smp_scp_is_another_sc_pairing_ongoing+0x2c>
1006094e:	892d      	ldrh	r5, [r5, #8]
10060950:	4285      	cmp	r5, r0
10060952:	d101      	bne.n	10060958 <smp_scp_is_another_sc_pairing_ongoing+0x30>
10060954:	3470      	adds	r4, #112	@ 0x70
10060956:	e7f3      	b.n	10060940 <smp_scp_is_another_sc_pairing_ongoing+0x18>
10060958:	2101      	movs	r1, #1
1006095a:	4608      	mov	r0, r1
1006095c:	bd70      	pop	{r4, r5, r6, pc}
1006095e:	46c0      	nop			@ (mov r8, r8)

10060960 <__arm_cp.1_0>:
10060960:	20001120 	.word	0x20001120

10060964 <__arm_cp.1_1>:
10060964:	200011c0 	.word	0x200011c0

10060968 <smp_scp_continue_on_exclusive_sc_pairing>:
10060968:	b570      	push	{r4, r5, r6, lr}
1006096a:	4605      	mov	r5, r0
1006096c:	7dc6      	ldrb	r6, [r0, #23]
1006096e:	2400      	movs	r4, #0
10060970:	0730      	lsls	r0, r6, #28
10060972:	d510      	bpl.n	10060996 <smp_scp_continue_on_exclusive_sc_pairing+0x2e>
10060974:	8928      	ldrh	r0, [r5, #8]
10060976:	f7ff ffd7 	bl	10060928 <smp_scp_is_another_sc_pairing_ongoing>
1006097a:	2800      	cmp	r0, #0
1006097c:	d001      	beq.n	10060982 <smp_scp_continue_on_exclusive_sc_pairing+0x1a>
1006097e:	2408      	movs	r4, #8
10060980:	e009      	b.n	10060996 <smp_scp_continue_on_exclusive_sc_pairing+0x2e>
10060982:	4806      	ldr	r0, [pc, #24]	@ (1006099c <__arm_cp.2_0>)
10060984:	6800      	ldr	r0, [r0, #0]
10060986:	2142      	movs	r1, #66	@ 0x42
10060988:	5c42      	ldrb	r2, [r0, r1]
1006098a:	2304      	movs	r3, #4
1006098c:	4313      	orrs	r3, r2
1006098e:	5443      	strb	r3, [r0, r1]
10060990:	2001      	movs	r0, #1
10060992:	4306      	orrs	r6, r0
10060994:	75ee      	strb	r6, [r5, #23]
10060996:	4620      	mov	r0, r4
10060998:	bd70      	pop	{r4, r5, r6, pc}
1006099a:	46c0      	nop			@ (mov r8, r8)

1006099c <__arm_cp.2_0>:
1006099c:	200011c0 	.word	0x200011c0

100609a0 <smp_scp_execute_public_key_generation_request>:
100609a0:	b5b0      	push	{r4, r5, r7, lr}
100609a2:	4d0c      	ldr	r5, [pc, #48]	@ (100609d4 <__arm_cp.3_0>)
100609a4:	6828      	ldr	r0, [r5, #0]
100609a6:	2442      	movs	r4, #66	@ 0x42
100609a8:	5d00      	ldrb	r0, [r0, r4]
100609aa:	2190      	movs	r1, #144	@ 0x90
100609ac:	4208      	tst	r0, r1
100609ae:	d000      	beq.n	100609b2 <smp_scp_execute_public_key_generation_request+0x12>
100609b0:	bdb0      	pop	{r4, r5, r7, pc}
100609b2:	f7f7 f857 	bl	10057a64 <hci_le_read_local_p256_public_key_api>
100609b6:	2800      	cmp	r0, #0
100609b8:	d005      	beq.n	100609c6 <smp_scp_execute_public_key_generation_request+0x26>
100609ba:	200d      	movs	r0, #13
100609bc:	f001 fb6e 	bl	1006209c <tsk_notify_idx>
100609c0:	f7e3 fa6d 	bl	10043e9e <BLE_STACK_ProcessRequest>
100609c4:	bdb0      	pop	{r4, r5, r7, pc}
100609c6:	6828      	ldr	r0, [r5, #0]
100609c8:	5d01      	ldrb	r1, [r0, r4]
100609ca:	2280      	movs	r2, #128	@ 0x80
100609cc:	430a      	orrs	r2, r1
100609ce:	5502      	strb	r2, [r0, r4]
100609d0:	bdb0      	pop	{r4, r5, r7, pc}
100609d2:	46c0      	nop			@ (mov r8, r8)

100609d4 <__arm_cp.3_0>:
100609d4:	200011c0 	.word	0x200011c0

100609d8 <smp_scp_set_local_public_key>:
100609d8:	b580      	push	{r7, lr}
100609da:	4601      	mov	r1, r0
100609dc:	4806      	ldr	r0, [pc, #24]	@ (100609f8 <__arm_cp.4_0>)
100609de:	6800      	ldr	r0, [r0, #0]
100609e0:	2242      	movs	r2, #66	@ 0x42
100609e2:	5c82      	ldrb	r2, [r0, r2]
100609e4:	0712      	lsls	r2, r2, #28
100609e6:	d404      	bmi.n	100609f2 <smp_scp_set_local_public_key+0x1a>
100609e8:	3064      	adds	r0, #100	@ 0x64
100609ea:	2240      	movs	r2, #64	@ 0x40
100609ec:	f7e5 fa44 	bl	10045e78 <BLEPLAT_MemCpy>
100609f0:	bd80      	pop	{r7, pc}
100609f2:	f7f7 f8c3 	bl	10057b7c <hci_vs_force_local_p256_debug_key_api>
100609f6:	bd80      	pop	{r7, pc}

100609f8 <__arm_cp.4_0>:
100609f8:	200011c0 	.word	0x200011c0

100609fc <smp_scp_public_key_send>:
100609fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100609fe:	4604      	mov	r4, r0
10060a00:	8901      	ldrh	r1, [r0, #8]
10060a02:	2500      	movs	r5, #0
10060a04:	2245      	movs	r2, #69	@ 0x45
10060a06:	4628      	mov	r0, r5
10060a08:	f7f2 fb36 	bl	10053078 <ACL_pkt_get>
10060a0c:	2800      	cmp	r0, #0
10060a0e:	d014      	beq.n	10060a3a <smp_scp_public_key_send+0x3e>
10060a10:	4606      	mov	r6, r0
10060a12:	2041      	movs	r0, #65	@ 0x41
10060a14:	8070      	strh	r0, [r6, #2]
10060a16:	6870      	ldr	r0, [r6, #4]
10060a18:	210c      	movs	r1, #12
10060a1a:	7201      	strb	r1, [r0, #8]
10060a1c:	4f0f      	ldr	r7, [pc, #60]	@ (10060a5c <__arm_cp.5_0>)
10060a1e:	683b      	ldr	r3, [r7, #0]
10060a20:	3364      	adds	r3, #100	@ 0x64
10060a22:	2105      	movs	r1, #5
10060a24:	2240      	movs	r2, #64	@ 0x40
10060a26:	4630      	mov	r0, r6
10060a28:	f7f2 fb86 	bl	10053138 <ACL_pkt_write>
10060a2c:	4620      	mov	r0, r4
10060a2e:	4631      	mov	r1, r6
10060a30:	f005 f856 	bl	10065ae0 <smp_dep_l2c_send_acl_packet>
10060a34:	2800      	cmp	r0, #0
10060a36:	d002      	beq.n	10060a3e <smp_scp_public_key_send+0x42>
10060a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060a3a:	2081      	movs	r0, #129	@ 0x81
10060a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060a3e:	7de0      	ldrb	r0, [r4, #23]
10060a40:	2120      	movs	r1, #32
10060a42:	4301      	orrs	r1, r0
10060a44:	75e1      	strb	r1, [r4, #23]
10060a46:	6839      	ldr	r1, [r7, #0]
10060a48:	2242      	movs	r2, #66	@ 0x42
10060a4a:	5c89      	ldrb	r1, [r1, r2]
10060a4c:	0709      	lsls	r1, r1, #28
10060a4e:	d502      	bpl.n	10060a56 <smp_scp_public_key_send+0x5a>
10060a50:	2124      	movs	r1, #36	@ 0x24
10060a52:	4308      	orrs	r0, r1
10060a54:	75e0      	strb	r0, [r4, #23]
10060a56:	4628      	mov	r0, r5
10060a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060a5a:	46c0      	nop			@ (mov r8, r8)

10060a5c <__arm_cp.5_0>:
10060a5c:	200011c0 	.word	0x200011c0

10060a60 <smp_scp_public_key_receive>:
10060a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060a62:	4f2f      	ldr	r7, [pc, #188]	@ (10060b20 <__arm_cp.6_0>)
10060a64:	683b      	ldr	r3, [r7, #0]
10060a66:	2442      	movs	r4, #66	@ 0x42
10060a68:	571a      	ldrsb	r2, [r3, r4]
10060a6a:	2a00      	cmp	r2, #0
10060a6c:	d420      	bmi.n	10060ab0 <smp_scp_public_key_receive+0x50>
10060a6e:	9100      	str	r1, [sp, #0]
10060a70:	33e4      	adds	r3, #228	@ 0xe4
10060a72:	2105      	movs	r1, #5
10060a74:	2240      	movs	r2, #64	@ 0x40
10060a76:	f7f2 fb3d 	bl	100530f4 <ACL_pkt_read>
10060a7a:	6839      	ldr	r1, [r7, #0]
10060a7c:	4608      	mov	r0, r1
10060a7e:	3064      	adds	r0, #100	@ 0x64
10060a80:	31e4      	adds	r1, #228	@ 0xe4
10060a82:	2520      	movs	r5, #32
10060a84:	462a      	mov	r2, r5
10060a86:	f7e5 fa17 	bl	10045eb8 <BLEPLAT_MemCmp>
10060a8a:	4606      	mov	r6, r0
10060a8c:	6838      	ldr	r0, [r7, #0]
10060a8e:	3064      	adds	r0, #100	@ 0x64
10060a90:	4924      	ldr	r1, [pc, #144]	@ (10060b24 <__arm_cp.6_1>)
10060a92:	462a      	mov	r2, r5
10060a94:	f7e5 fa10 	bl	10045eb8 <BLEPLAT_MemCmp>
10060a98:	2e00      	cmp	r6, #0
10060a9a:	d10b      	bne.n	10060ab4 <smp_scp_public_key_receive+0x54>
10060a9c:	2800      	cmp	r0, #0
10060a9e:	d009      	beq.n	10060ab4 <smp_scp_public_key_receive+0x54>
10060aa0:	2108      	movs	r1, #8
10060aa2:	2500      	movs	r5, #0
10060aa4:	2301      	movs	r3, #1
10060aa6:	9800      	ldr	r0, [sp, #0]
10060aa8:	462a      	mov	r2, r5
10060aaa:	f005 fa15 	bl	10065ed8 <smp_pp3_pairing_failed_send>
10060aae:	e007      	b.n	10060ac0 <smp_scp_public_key_receive+0x60>
10060ab0:	253a      	movs	r5, #58	@ 0x3a
10060ab2:	e005      	b.n	10060ac0 <smp_scp_public_key_receive+0x60>
10060ab4:	6838      	ldr	r0, [r7, #0]
10060ab6:	5d01      	ldrb	r1, [r0, r4]
10060ab8:	22b0      	movs	r2, #176	@ 0xb0
10060aba:	4211      	tst	r1, r2
10060abc:	d002      	beq.n	10060ac4 <smp_scp_public_key_receive+0x64>
10060abe:	2538      	movs	r5, #56	@ 0x38
10060ac0:	4628      	mov	r0, r5
10060ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060ac4:	30e4      	adds	r0, #228	@ 0xe4
10060ac6:	f7f7 f833 	bl	10057b30 <hci_le_generate_dhkey_api>
10060aca:	281f      	cmp	r0, #31
10060acc:	d0e8      	beq.n	10060aa0 <smp_scp_public_key_receive+0x40>
10060ace:	4605      	mov	r5, r0
10060ad0:	2812      	cmp	r0, #18
10060ad2:	d023      	beq.n	10060b1c <smp_scp_public_key_receive+0xbc>
10060ad4:	2d00      	cmp	r5, #0
10060ad6:	d1f3      	bne.n	10060ac0 <smp_scp_public_key_receive+0x60>
10060ad8:	6838      	ldr	r0, [r7, #0]
10060ada:	5d01      	ldrb	r1, [r0, r4]
10060adc:	2210      	movs	r2, #16
10060ade:	430a      	orrs	r2, r1
10060ae0:	5502      	strb	r2, [r0, r4]
10060ae2:	9b00      	ldr	r3, [sp, #0]
10060ae4:	7dd9      	ldrb	r1, [r3, #23]
10060ae6:	22c0      	movs	r2, #192	@ 0xc0
10060ae8:	430a      	orrs	r2, r1
10060aea:	75da      	strb	r2, [r3, #23]
10060aec:	30e4      	adds	r0, #228	@ 0xe4
10060aee:	490d      	ldr	r1, [pc, #52]	@ (10060b24 <__arm_cp.6_1>)
10060af0:	2220      	movs	r2, #32
10060af2:	f7e5 f9e1 	bl	10045eb8 <BLEPLAT_MemCmp>
10060af6:	2500      	movs	r5, #0
10060af8:	2800      	cmp	r0, #0
10060afa:	d1e1      	bne.n	10060ac0 <smp_scp_public_key_receive+0x60>
10060afc:	2041      	movs	r0, #65	@ 0x41
10060afe:	0080      	lsls	r0, r0, #2
10060b00:	6839      	ldr	r1, [r7, #0]
10060b02:	1808      	adds	r0, r1, r0
10060b04:	4908      	ldr	r1, [pc, #32]	@ (10060b28 <__arm_cp.6_2>)
10060b06:	2220      	movs	r2, #32
10060b08:	f7e5 f9d6 	bl	10045eb8 <BLEPLAT_MemCmp>
10060b0c:	2800      	cmp	r0, #0
10060b0e:	d1d7      	bne.n	10060ac0 <smp_scp_public_key_receive+0x60>
10060b10:	9a00      	ldr	r2, [sp, #0]
10060b12:	7dd0      	ldrb	r0, [r2, #23]
10060b14:	2104      	movs	r1, #4
10060b16:	4301      	orrs	r1, r0
10060b18:	75d1      	strb	r1, [r2, #23]
10060b1a:	e7d1      	b.n	10060ac0 <smp_scp_public_key_receive+0x60>
10060b1c:	210b      	movs	r1, #11
10060b1e:	e7c0      	b.n	10060aa2 <smp_scp_public_key_receive+0x42>

10060b20 <__arm_cp.6_0>:
10060b20:	200011c0 	.word	0x200011c0

10060b24 <__arm_cp.6_1>:
10060b24:	1006d153 	.word	0x1006d153

10060b28 <__arm_cp.6_2>:
10060b28:	1006d173 	.word	0x1006d173

10060b2c <smp_scp_public_key_prepare_and_exchange>:
10060b2c:	b5b0      	push	{r4, r5, r7, lr}
10060b2e:	4604      	mov	r4, r0
10060b30:	4814      	ldr	r0, [pc, #80]	@ (10060b84 <__arm_cp.7_0>)
10060b32:	6802      	ldr	r2, [r0, #0]
10060b34:	3264      	adds	r2, #100	@ 0x64
10060b36:	2500      	movs	r5, #0
10060b38:	2140      	movs	r1, #64	@ 0x40
10060b3a:	4628      	mov	r0, r5
10060b3c:	f001 fc24 	bl	10062388 <is_Buffer_All_Set_To>
10060b40:	2800      	cmp	r0, #0
10060b42:	d003      	beq.n	10060b4c <smp_scp_public_key_prepare_and_exchange+0x20>
10060b44:	f7ff ff2c 	bl	100609a0 <smp_scp_execute_public_key_generation_request>
10060b48:	2512      	movs	r5, #18
10060b4a:	e019      	b.n	10060b80 <smp_scp_public_key_prepare_and_exchange+0x54>
10060b4c:	7de0      	ldrb	r0, [r4, #23]
10060b4e:	2160      	movs	r1, #96	@ 0x60
10060b50:	4602      	mov	r2, r0
10060b52:	400a      	ands	r2, r1
10060b54:	2a60      	cmp	r2, #96	@ 0x60
10060b56:	d013      	beq.n	10060b80 <smp_scp_public_key_prepare_and_exchange+0x54>
10060b58:	2220      	movs	r2, #32
10060b5a:	4002      	ands	r2, r0
10060b5c:	5c63      	ldrb	r3, [r4, r1]
10060b5e:	2101      	movs	r1, #1
10060b60:	4019      	ands	r1, r3
10060b62:	188a      	adds	r2, r1, r2
10060b64:	d107      	bne.n	10060b76 <smp_scp_public_key_prepare_and_exchange+0x4a>
10060b66:	219b      	movs	r1, #155	@ 0x9b
10060b68:	4008      	ands	r0, r1
10060b6a:	75e0      	strb	r0, [r4, #23]
10060b6c:	4620      	mov	r0, r4
10060b6e:	f7ff ff45 	bl	100609fc <smp_scp_public_key_send>
10060b72:	4605      	mov	r5, r0
10060b74:	e004      	b.n	10060b80 <smp_scp_public_key_prepare_and_exchange+0x54>
10060b76:	2584      	movs	r5, #132	@ 0x84
10060b78:	2900      	cmp	r1, #0
10060b7a:	d001      	beq.n	10060b80 <smp_scp_public_key_prepare_and_exchange+0x54>
10060b7c:	0640      	lsls	r0, r0, #25
10060b7e:	d4f5      	bmi.n	10060b6c <smp_scp_public_key_prepare_and_exchange+0x40>
10060b80:	4628      	mov	r0, r5
10060b82:	bdb0      	pop	{r4, r5, r7, pc}

10060b84 <__arm_cp.7_0>:
10060b84:	200011c0 	.word	0x200011c0

10060b88 <smp_scp_oob_confirm_receive_verify>:
10060b88:	b570      	push	{r4, r5, r6, lr}
10060b8a:	b088      	sub	sp, #32
10060b8c:	4604      	mov	r4, r0
10060b8e:	f7ff fe5f 	bl	10060850 <smp_oob_check_is_remote_data_present>
10060b92:	2801      	cmp	r0, #1
10060b94:	d124      	bne.n	10060be0 <smp_scp_oob_confirm_receive_verify+0x58>
10060b96:	2500      	movs	r5, #0
10060b98:	2201      	movs	r2, #1
10060b9a:	ab07      	add	r3, sp, #28
10060b9c:	4620      	mov	r0, r4
10060b9e:	4629      	mov	r1, r5
10060ba0:	f7ff fe72 	bl	10060888 <smp_oob_get_remote_data_reference>
10060ba4:	2202      	movs	r2, #2
10060ba6:	ab06      	add	r3, sp, #24
10060ba8:	4620      	mov	r0, r4
10060baa:	4629      	mov	r1, r5
10060bac:	f7ff fe6c 	bl	10060888 <smp_oob_get_remote_data_reference>
10060bb0:	481a      	ldr	r0, [pc, #104]	@ (10060c1c <__arm_cp.9_0>)
10060bb2:	6800      	ldr	r0, [r0, #0]
10060bb4:	9a07      	ldr	r2, [sp, #28]
10060bb6:	ae02      	add	r6, sp, #8
10060bb8:	9600      	str	r6, [sp, #0]
10060bba:	30e4      	adds	r0, #228	@ 0xe4
10060bbc:	4601      	mov	r1, r0
10060bbe:	462b      	mov	r3, r5
10060bc0:	f7ff f82a 	bl	1005fc18 <smp_crt_f4_generate_confirm>
10060bc4:	9806      	ldr	r0, [sp, #24]
10060bc6:	2210      	movs	r2, #16
10060bc8:	4631      	mov	r1, r6
10060bca:	f7e5 f975 	bl	10045eb8 <BLEPLAT_MemCmp>
10060bce:	2800      	cmp	r0, #0
10060bd0:	d006      	beq.n	10060be0 <smp_scp_oob_confirm_receive_verify+0x58>
10060bd2:	2104      	movs	r1, #4
10060bd4:	2200      	movs	r2, #0
10060bd6:	2301      	movs	r3, #1
10060bd8:	4620      	mov	r0, r4
10060bda:	f005 f97d 	bl	10065ed8 <smp_pp3_pairing_failed_send>
10060bde:	e01a      	b.n	10060c16 <smp_scp_oob_confirm_receive_verify+0x8e>
10060be0:	7b60      	ldrb	r0, [r4, #13]
10060be2:	2103      	movs	r1, #3
10060be4:	4001      	ands	r1, r0
10060be6:	2901      	cmp	r1, #1
10060be8:	d106      	bne.n	10060bf8 <smp_scp_oob_confirm_receive_verify+0x70>
10060bea:	480c      	ldr	r0, [pc, #48]	@ (10060c1c <__arm_cp.9_0>)
10060bec:	6800      	ldr	r0, [r0, #0]
10060bee:	3044      	adds	r0, #68	@ 0x44
10060bf0:	2100      	movs	r1, #0
10060bf2:	2210      	movs	r2, #16
10060bf4:	f7e5 f950 	bl	10045e98 <BLEPLAT_MemSet>
10060bf8:	2060      	movs	r0, #96	@ 0x60
10060bfa:	5c20      	ldrb	r0, [r4, r0]
10060bfc:	07c0      	lsls	r0, r0, #31
10060bfe:	d001      	beq.n	10060c04 <smp_scp_oob_confirm_receive_verify+0x7c>
10060c00:	2049      	movs	r0, #73	@ 0x49
10060c02:	e000      	b.n	10060c06 <smp_scp_oob_confirm_receive_verify+0x7e>
10060c04:	2056      	movs	r0, #86	@ 0x56
10060c06:	43c0      	mvns	r0, r0
10060c08:	72a0      	strb	r0, [r4, #10]
10060c0a:	200e      	movs	r0, #14
10060c0c:	f001 fa46 	bl	1006209c <tsk_notify_idx>
10060c10:	f7e3 f945 	bl	10043e9e <BLE_STACK_ProcessRequest>
10060c14:	2000      	movs	r0, #0
10060c16:	b008      	add	sp, #32
10060c18:	bd70      	pop	{r4, r5, r6, pc}
10060c1a:	46c0      	nop			@ (mov r8, r8)

10060c1c <__arm_cp.9_0>:
10060c1c:	200011c0 	.word	0x200011c0

10060c20 <smp_scp_phase_2as2_start>:
10060c20:	b5f0      	push	{r4, r5, r6, r7, lr}
10060c22:	b095      	sub	sp, #84	@ 0x54
10060c24:	4604      	mov	r4, r0
10060c26:	4e2c      	ldr	r6, [pc, #176]	@ (10060cd8 <__arm_cp.10_0>)
10060c28:	6830      	ldr	r0, [r6, #0]
10060c2a:	2542      	movs	r5, #66	@ 0x42
10060c2c:	5d41      	ldrb	r1, [r0, r5]
10060c2e:	2230      	movs	r2, #48	@ 0x30
10060c30:	400a      	ands	r2, r1
10060c32:	2100      	movs	r1, #0
10060c34:	2a30      	cmp	r2, #48	@ 0x30
10060c36:	d116      	bne.n	10060c66 <smp_scp_phase_2as2_start+0x46>
10060c38:	9106      	str	r1, [sp, #24]
10060c3a:	2149      	movs	r1, #73	@ 0x49
10060c3c:	008f      	lsls	r7, r1, #2
10060c3e:	19c1      	adds	r1, r0, r7
10060c40:	a807      	add	r0, sp, #28
10060c42:	2220      	movs	r2, #32
10060c44:	f7e5 f918 	bl	10045e78 <BLEPLAT_MemCpy>
10060c48:	6830      	ldr	r0, [r6, #0]
10060c4a:	5d41      	ldrb	r1, [r0, r5]
10060c4c:	22cf      	movs	r2, #207	@ 0xcf
10060c4e:	400a      	ands	r2, r1
10060c50:	5542      	strb	r2, [r0, r5]
10060c52:	2060      	movs	r0, #96	@ 0x60
10060c54:	5c20      	ldrb	r0, [r4, r0]
10060c56:	07c0      	lsls	r0, r0, #31
10060c58:	d107      	bne.n	10060c6a <smp_scp_phase_2as2_start+0x4a>
10060c5a:	a80f      	add	r0, sp, #60	@ 0x3c
10060c5c:	9000      	str	r0, [sp, #0]
10060c5e:	a914      	add	r1, sp, #80	@ 0x50
10060c60:	aa11      	add	r2, sp, #68	@ 0x44
10060c62:	ab13      	add	r3, sp, #76	@ 0x4c
10060c64:	e006      	b.n	10060c74 <smp_scp_phase_2as2_start+0x54>
10060c66:	4608      	mov	r0, r1
10060c68:	e033      	b.n	10060cd2 <smp_scp_phase_2as2_start+0xb2>
10060c6a:	a811      	add	r0, sp, #68	@ 0x44
10060c6c:	9000      	str	r0, [sp, #0]
10060c6e:	a913      	add	r1, sp, #76	@ 0x4c
10060c70:	aa0f      	add	r2, sp, #60	@ 0x3c
10060c72:	ab14      	add	r3, sp, #80	@ 0x50
10060c74:	4620      	mov	r0, r4
10060c76:	f000 f831 	bl	10060cdc <smp_scp_pp2_as2_set_addresses>
10060c7a:	a814      	add	r0, sp, #80	@ 0x50
10060c7c:	7803      	ldrb	r3, [r0, #0]
10060c7e:	a813      	add	r0, sp, #76	@ 0x4c
10060c80:	7800      	ldrb	r0, [r0, #0]
10060c82:	6831      	ldr	r1, [r6, #0]
10060c84:	4622      	mov	r2, r4
10060c86:	3228      	adds	r2, #40	@ 0x28
10060c88:	9204      	str	r2, [sp, #16]
10060c8a:	19c9      	adds	r1, r1, r7
10060c8c:	9103      	str	r1, [sp, #12]
10060c8e:	a90f      	add	r1, sp, #60	@ 0x3c
10060c90:	9102      	str	r1, [sp, #8]
10060c92:	9001      	str	r0, [sp, #4]
10060c94:	a811      	add	r0, sp, #68	@ 0x44
10060c96:	9000      	str	r0, [sp, #0]
10060c98:	4621      	mov	r1, r4
10060c9a:	3138      	adds	r1, #56	@ 0x38
10060c9c:	4622      	mov	r2, r4
10060c9e:	3248      	adds	r2, #72	@ 0x48
10060ca0:	a807      	add	r0, sp, #28
10060ca2:	f7fe ffe9 	bl	1005fc78 <smp_crt_f5_generate_keys>
10060ca6:	204d      	movs	r0, #77	@ 0x4d
10060ca8:	0080      	lsls	r0, r0, #2
10060caa:	6831      	ldr	r1, [r6, #0]
10060cac:	180a      	adds	r2, r1, r0
10060cae:	2101      	movs	r1, #1
10060cb0:	4620      	mov	r0, r4
10060cb2:	f000 f829 	bl	10060d08 <smp_scp_pp2_as2_dhkey_check_generate>
10060cb6:	2800      	cmp	r0, #0
10060cb8:	d10b      	bne.n	10060cd2 <smp_scp_phase_2as2_start+0xb2>
10060cba:	4620      	mov	r0, r4
10060cbc:	3060      	adds	r0, #96	@ 0x60
10060cbe:	7800      	ldrb	r0, [r0, #0]
10060cc0:	07c0      	lsls	r0, r0, #31
10060cc2:	d103      	bne.n	10060ccc <smp_scp_phase_2as2_start+0xac>
10060cc4:	4620      	mov	r0, r4
10060cc6:	f000 f8d9 	bl	10060e7c <smp_scp_pp2_as2_dhkey_check_send>
10060cca:	e002      	b.n	10060cd2 <smp_scp_phase_2as2_start+0xb2>
10060ccc:	20bb      	movs	r0, #187	@ 0xbb
10060cce:	72a0      	strb	r0, [r4, #10]
10060cd0:	9806      	ldr	r0, [sp, #24]
10060cd2:	b015      	add	sp, #84	@ 0x54
10060cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10060cd6:	46c0      	nop			@ (mov r8, r8)

10060cd8 <__arm_cp.10_0>:
10060cd8:	200011c0 	.word	0x200011c0

10060cdc <smp_scp_pp2_as2_set_addresses>:
10060cdc:	b570      	push	{r4, r5, r6, lr}
10060cde:	461c      	mov	r4, r3
10060ce0:	4605      	mov	r5, r0
10060ce2:	2061      	movs	r0, #97	@ 0x61
10060ce4:	5c28      	ldrb	r0, [r5, r0]
10060ce6:	7008      	strb	r0, [r1, #0]
10060ce8:	4629      	mov	r1, r5
10060cea:	3162      	adds	r1, #98	@ 0x62
10060cec:	2606      	movs	r6, #6
10060cee:	4610      	mov	r0, r2
10060cf0:	4632      	mov	r2, r6
10060cf2:	f7e5 f8c1 	bl	10045e78 <BLEPLAT_MemCpy>
10060cf6:	7868      	ldrb	r0, [r5, #1]
10060cf8:	7020      	strb	r0, [r4, #0]
10060cfa:	1ca9      	adds	r1, r5, #2
10060cfc:	9804      	ldr	r0, [sp, #16]
10060cfe:	4632      	mov	r2, r6
10060d00:	f7e5 f8ba 	bl	10045e78 <BLEPLAT_MemCpy>
10060d04:	bd70      	pop	{r4, r5, r6, pc}
	...

10060d08 <smp_scp_pp2_as2_dhkey_check_generate>:
10060d08:	b5f0      	push	{r4, r5, r6, r7, lr}
10060d0a:	b095      	sub	sp, #84	@ 0x54
10060d0c:	9207      	str	r2, [sp, #28]
10060d0e:	460f      	mov	r7, r1
10060d10:	4606      	mov	r6, r0
10060d12:	a813      	add	r0, sp, #76	@ 0x4c
10060d14:	2100      	movs	r1, #0
10060d16:	7001      	strb	r1, [r0, #0]
10060d18:	a812      	add	r0, sp, #72	@ 0x48
10060d1a:	7001      	strb	r1, [r0, #0]
10060d1c:	a809      	add	r0, sp, #36	@ 0x24
10060d1e:	2210      	movs	r2, #16
10060d20:	9108      	str	r1, [sp, #32]
10060d22:	f7e5 f8b9 	bl	10045e98 <BLEPLAT_MemSet>
10060d26:	7cf0      	ldrb	r0, [r6, #19]
10060d28:	2802      	cmp	r0, #2
10060d2a:	d10a      	bne.n	10060d42 <smp_scp_pp2_as2_dhkey_check_generate+0x3a>
10060d2c:	4852      	ldr	r0, [pc, #328]	@ (10060e78 <__arm_cp.12_0>)
10060d2e:	6800      	ldr	r0, [r0, #0]
10060d30:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10060d32:	a909      	add	r1, sp, #36	@ 0x24
10060d34:	7008      	strb	r0, [r1, #0]
10060d36:	0a02      	lsrs	r2, r0, #8
10060d38:	704a      	strb	r2, [r1, #1]
10060d3a:	0c02      	lsrs	r2, r0, #16
10060d3c:	708a      	strb	r2, [r1, #2]
10060d3e:	0e00      	lsrs	r0, r0, #24
10060d40:	70c8      	strb	r0, [r1, #3]
10060d42:	2f01      	cmp	r7, #1
10060d44:	d121      	bne.n	10060d8a <smp_scp_pp2_as2_dhkey_check_generate+0x82>
10060d46:	484c      	ldr	r0, [pc, #304]	@ (10060e78 <__arm_cp.12_0>)
10060d48:	6804      	ldr	r4, [r0, #0]
10060d4a:	2040      	movs	r0, #64	@ 0x40
10060d4c:	5c20      	ldrb	r0, [r4, r0]
10060d4e:	ad14      	add	r5, sp, #80	@ 0x50
10060d50:	7028      	strb	r0, [r5, #0]
10060d52:	7b70      	ldrb	r0, [r6, #13]
10060d54:	2101      	movs	r1, #1
10060d56:	4001      	ands	r1, r0
10060d58:	7069      	strb	r1, [r5, #1]
10060d5a:	7d30      	ldrb	r0, [r6, #20]
10060d5c:	2100      	movs	r1, #0
10060d5e:	f7ff f947 	bl	1005fff0 <smp_pp1_get_pairing_pdu_offset>
10060d62:	1900      	adds	r0, r0, r4
10060d64:	21b7      	movs	r1, #183	@ 0xb7
10060d66:	5c40      	ldrb	r0, [r0, r1]
10060d68:	70a8      	strb	r0, [r5, #2]
10060d6a:	7cf0      	ldrb	r0, [r6, #19]
10060d6c:	2803      	cmp	r0, #3
10060d6e:	d127      	bne.n	10060dc0 <smp_scp_pp2_as2_dhkey_check_generate+0xb8>
10060d70:	4630      	mov	r0, r6
10060d72:	f7ff fd6d 	bl	10060850 <smp_oob_check_is_remote_data_present>
10060d76:	2800      	cmp	r0, #0
10060d78:	d022      	beq.n	10060dc0 <smp_scp_pp2_as2_dhkey_check_generate+0xb8>
10060d7a:	2100      	movs	r1, #0
10060d7c:	2201      	movs	r2, #1
10060d7e:	ab0d      	add	r3, sp, #52	@ 0x34
10060d80:	4630      	mov	r0, r6
10060d82:	f7ff fd81 	bl	10060888 <smp_oob_get_remote_data_reference>
10060d86:	990d      	ldr	r1, [sp, #52]	@ 0x34
10060d88:	e016      	b.n	10060db8 <smp_scp_pp2_as2_dhkey_check_generate+0xb0>
10060d8a:	7b30      	ldrb	r0, [r6, #12]
10060d8c:	ac14      	add	r4, sp, #80	@ 0x50
10060d8e:	7020      	strb	r0, [r4, #0]
10060d90:	7b70      	ldrb	r0, [r6, #13]
10060d92:	0780      	lsls	r0, r0, #30
10060d94:	0fc0      	lsrs	r0, r0, #31
10060d96:	7060      	strb	r0, [r4, #1]
10060d98:	7d30      	ldrb	r0, [r6, #20]
10060d9a:	2101      	movs	r1, #1
10060d9c:	f7ff f928 	bl	1005fff0 <smp_pp1_get_pairing_pdu_offset>
10060da0:	1cc0      	adds	r0, r0, #3
10060da2:	b2c0      	uxtb	r0, r0
10060da4:	4934      	ldr	r1, [pc, #208]	@ (10060e78 <__arm_cp.12_0>)
10060da6:	6809      	ldr	r1, [r1, #0]
10060da8:	1808      	adds	r0, r1, r0
10060daa:	22b4      	movs	r2, #180	@ 0xb4
10060dac:	5c80      	ldrb	r0, [r0, r2]
10060dae:	70a0      	strb	r0, [r4, #2]
10060db0:	7cf0      	ldrb	r0, [r6, #19]
10060db2:	2803      	cmp	r0, #3
10060db4:	d104      	bne.n	10060dc0 <smp_scp_pp2_as2_dhkey_check_generate+0xb8>
10060db6:	3144      	adds	r1, #68	@ 0x44
10060db8:	a809      	add	r0, sp, #36	@ 0x24
10060dba:	2210      	movs	r2, #16
10060dbc:	f7e5 f85c 	bl	10045e78 <BLEPLAT_MemCpy>
10060dc0:	2060      	movs	r0, #96	@ 0x60
10060dc2:	5c31      	ldrb	r1, [r6, r0]
10060dc4:	2201      	movs	r2, #1
10060dc6:	4011      	ands	r1, r2
10060dc8:	2f01      	cmp	r7, #1
10060dca:	d106      	bne.n	10060dda <smp_scp_pp2_as2_dhkey_check_generate+0xd2>
10060dcc:	2900      	cmp	r1, #0
10060dce:	d104      	bne.n	10060dda <smp_scp_pp2_as2_dhkey_check_generate+0xd2>
10060dd0:	4635      	mov	r5, r6
10060dd2:	3548      	adds	r5, #72	@ 0x48
10060dd4:	4634      	mov	r4, r6
10060dd6:	3438      	adds	r4, #56	@ 0x38
10060dd8:	e01b      	b.n	10060e12 <smp_scp_pp2_as2_dhkey_check_generate+0x10a>
10060dda:	1e48      	subs	r0, r1, #1
10060ddc:	460c      	mov	r4, r1
10060dde:	4184      	sbcs	r4, r0
10060de0:	427b      	negs	r3, r7
10060de2:	417b      	adcs	r3, r7
10060de4:	4023      	ands	r3, r4
10060de6:	d004      	beq.n	10060df2 <smp_scp_pp2_as2_dhkey_check_generate+0xea>
10060de8:	4635      	mov	r5, r6
10060dea:	3548      	adds	r5, #72	@ 0x48
10060dec:	4634      	mov	r4, r6
10060dee:	3438      	adds	r4, #56	@ 0x38
10060df0:	e00b      	b.n	10060e0a <smp_scp_pp2_as2_dhkey_check_generate+0x102>
10060df2:	4608      	mov	r0, r1
10060df4:	4338      	orrs	r0, r7
10060df6:	d004      	beq.n	10060e02 <smp_scp_pp2_as2_dhkey_check_generate+0xfa>
10060df8:	2086      	movs	r0, #134	@ 0x86
10060dfa:	2f01      	cmp	r7, #1
10060dfc:	d12b      	bne.n	10060e56 <smp_scp_pp2_as2_dhkey_check_generate+0x14e>
10060dfe:	2900      	cmp	r1, #0
10060e00:	d029      	beq.n	10060e56 <smp_scp_pp2_as2_dhkey_check_generate+0x14e>
10060e02:	4635      	mov	r5, r6
10060e04:	3538      	adds	r5, #56	@ 0x38
10060e06:	4634      	mov	r4, r6
10060e08:	3448      	adds	r4, #72	@ 0x48
10060e0a:	2f01      	cmp	r7, #1
10060e0c:	d125      	bne.n	10060e5a <smp_scp_pp2_as2_dhkey_check_generate+0x152>
10060e0e:	2900      	cmp	r1, #0
10060e10:	d023      	beq.n	10060e5a <smp_scp_pp2_as2_dhkey_check_generate+0x152>
10060e12:	a80e      	add	r0, sp, #56	@ 0x38
10060e14:	9000      	str	r0, [sp, #0]
10060e16:	a913      	add	r1, sp, #76	@ 0x4c
10060e18:	aa10      	add	r2, sp, #64	@ 0x40
10060e1a:	ab12      	add	r3, sp, #72	@ 0x48
10060e1c:	4630      	mov	r0, r6
10060e1e:	f7ff ff5d 	bl	10060cdc <smp_scp_pp2_as2_set_addresses>
10060e22:	9e08      	ldr	r6, [sp, #32]
10060e24:	9b07      	ldr	r3, [sp, #28]
10060e26:	4814      	ldr	r0, [pc, #80]	@ (10060e78 <__arm_cp.12_0>)
10060e28:	6800      	ldr	r0, [r0, #0]
10060e2a:	a913      	add	r1, sp, #76	@ 0x4c
10060e2c:	7809      	ldrb	r1, [r1, #0]
10060e2e:	aa12      	add	r2, sp, #72	@ 0x48
10060e30:	7812      	ldrb	r2, [r2, #0]
10060e32:	9305      	str	r3, [sp, #20]
10060e34:	ab0e      	add	r3, sp, #56	@ 0x38
10060e36:	9304      	str	r3, [sp, #16]
10060e38:	9203      	str	r2, [sp, #12]
10060e3a:	aa10      	add	r2, sp, #64	@ 0x40
10060e3c:	9202      	str	r2, [sp, #8]
10060e3e:	9101      	str	r1, [sp, #4]
10060e40:	a914      	add	r1, sp, #80	@ 0x50
10060e42:	9100      	str	r1, [sp, #0]
10060e44:	2149      	movs	r1, #73	@ 0x49
10060e46:	0089      	lsls	r1, r1, #2
10060e48:	1840      	adds	r0, r0, r1
10060e4a:	ab09      	add	r3, sp, #36	@ 0x24
10060e4c:	4621      	mov	r1, r4
10060e4e:	462a      	mov	r2, r5
10060e50:	f7fe ff80 	bl	1005fd54 <smp_crt_f6_generate_check_val>
10060e54:	4630      	mov	r0, r6
10060e56:	b015      	add	sp, #84	@ 0x54
10060e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
10060e5a:	4339      	orrs	r1, r7
10060e5c:	1e48      	subs	r0, r1, #1
10060e5e:	4181      	sbcs	r1, r0
10060e60:	4053      	eors	r3, r2
10060e62:	4219      	tst	r1, r3
10060e64:	d105      	bne.n	10060e72 <smp_scp_pp2_as2_dhkey_check_generate+0x16a>
10060e66:	a810      	add	r0, sp, #64	@ 0x40
10060e68:	9000      	str	r0, [sp, #0]
10060e6a:	a912      	add	r1, sp, #72	@ 0x48
10060e6c:	aa0e      	add	r2, sp, #56	@ 0x38
10060e6e:	ab13      	add	r3, sp, #76	@ 0x4c
10060e70:	e7d4      	b.n	10060e1c <smp_scp_pp2_as2_dhkey_check_generate+0x114>
10060e72:	2086      	movs	r0, #134	@ 0x86
10060e74:	e7ef      	b.n	10060e56 <smp_scp_pp2_as2_dhkey_check_generate+0x14e>
10060e76:	46c0      	nop			@ (mov r8, r8)

10060e78 <__arm_cp.12_0>:
10060e78:	200011c0 	.word	0x200011c0

10060e7c <smp_scp_pp2_as2_dhkey_check_send>:
10060e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060e7e:	4605      	mov	r5, r0
10060e80:	8901      	ldrh	r1, [r0, #8]
10060e82:	2400      	movs	r4, #0
10060e84:	2215      	movs	r2, #21
10060e86:	4620      	mov	r0, r4
10060e88:	f7f2 f8f6 	bl	10053078 <ACL_pkt_get>
10060e8c:	2800      	cmp	r0, #0
10060e8e:	d01b      	beq.n	10060ec8 <smp_scp_pp2_as2_dhkey_check_send+0x4c>
10060e90:	4606      	mov	r6, r0
10060e92:	2011      	movs	r0, #17
10060e94:	8070      	strh	r0, [r6, #2]
10060e96:	6870      	ldr	r0, [r6, #4]
10060e98:	210d      	movs	r1, #13
10060e9a:	7201      	strb	r1, [r0, #8]
10060e9c:	204d      	movs	r0, #77	@ 0x4d
10060e9e:	0080      	lsls	r0, r0, #2
10060ea0:	490d      	ldr	r1, [pc, #52]	@ (10060ed8 <__arm_cp.13_0>)
10060ea2:	6809      	ldr	r1, [r1, #0]
10060ea4:	180b      	adds	r3, r1, r0
10060ea6:	2105      	movs	r1, #5
10060ea8:	2210      	movs	r2, #16
10060eaa:	4630      	mov	r0, r6
10060eac:	f7f2 f944 	bl	10053138 <ACL_pkt_write>
10060eb0:	2060      	movs	r0, #96	@ 0x60
10060eb2:	5c2f      	ldrb	r7, [r5, r0]
10060eb4:	4628      	mov	r0, r5
10060eb6:	4631      	mov	r1, r6
10060eb8:	f004 fe12 	bl	10065ae0 <smp_dep_l2c_send_acl_packet>
10060ebc:	2800      	cmp	r0, #0
10060ebe:	d108      	bne.n	10060ed2 <smp_scp_pp2_as2_dhkey_check_send+0x56>
10060ec0:	07f8      	lsls	r0, r7, #31
10060ec2:	d003      	beq.n	10060ecc <smp_scp_pp2_as2_dhkey_check_send+0x50>
10060ec4:	2043      	movs	r0, #67	@ 0x43
10060ec6:	e002      	b.n	10060ece <smp_scp_pp2_as2_dhkey_check_send+0x52>
10060ec8:	2488      	movs	r4, #136	@ 0x88
10060eca:	e002      	b.n	10060ed2 <smp_scp_pp2_as2_dhkey_check_send+0x56>
10060ecc:	2054      	movs	r0, #84	@ 0x54
10060ece:	43c0      	mvns	r0, r0
10060ed0:	72a8      	strb	r0, [r5, #10]
10060ed2:	4620      	mov	r0, r4
10060ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060ed6:	46c0      	nop			@ (mov r8, r8)

10060ed8 <__arm_cp.13_0>:
10060ed8:	200011c0 	.word	0x200011c0

10060edc <smp_scp_phase_2as2_dhkey_check_receive>:
10060edc:	b5f0      	push	{r4, r5, r6, r7, lr}
10060ede:	b08b      	sub	sp, #44	@ 0x2c
10060ee0:	460e      	mov	r6, r1
10060ee2:	2105      	movs	r1, #5
10060ee4:	2510      	movs	r5, #16
10060ee6:	af07      	add	r7, sp, #28
10060ee8:	462a      	mov	r2, r5
10060eea:	463b      	mov	r3, r7
10060eec:	f7f2 f902 	bl	100530f4 <ACL_pkt_read>
10060ef0:	2100      	movs	r1, #0
10060ef2:	ac03      	add	r4, sp, #12
10060ef4:	9602      	str	r6, [sp, #8]
10060ef6:	4630      	mov	r0, r6
10060ef8:	9101      	str	r1, [sp, #4]
10060efa:	4622      	mov	r2, r4
10060efc:	f7ff ff04 	bl	10060d08 <smp_scp_pp2_as2_dhkey_check_generate>
10060f00:	4606      	mov	r6, r0
10060f02:	4638      	mov	r0, r7
10060f04:	4621      	mov	r1, r4
10060f06:	462a      	mov	r2, r5
10060f08:	f7e4 ffd6 	bl	10045eb8 <BLEPLAT_MemCmp>
10060f0c:	2e00      	cmp	r6, #0
10060f0e:	d115      	bne.n	10060f3c <smp_scp_phase_2as2_dhkey_check_receive+0x60>
10060f10:	2800      	cmp	r0, #0
10060f12:	d113      	bne.n	10060f3c <smp_scp_phase_2as2_dhkey_check_receive+0x60>
10060f14:	2060      	movs	r0, #96	@ 0x60
10060f16:	9c02      	ldr	r4, [sp, #8]
10060f18:	5c20      	ldrb	r0, [r4, r0]
10060f1a:	07c0      	lsls	r0, r0, #31
10060f1c:	d115      	bne.n	10060f4a <smp_scp_phase_2as2_dhkey_check_receive+0x6e>
10060f1e:	7c20      	ldrb	r0, [r4, #16]
10060f20:	1a2a      	subs	r2, r5, r0
10060f22:	1820      	adds	r0, r4, r0
10060f24:	3028      	adds	r0, #40	@ 0x28
10060f26:	2100      	movs	r1, #0
10060f28:	f7e4 ffb6 	bl	10045e98 <BLEPLAT_MemSet>
10060f2c:	7ea0      	ldrb	r0, [r4, #26]
10060f2e:	2102      	movs	r1, #2
10060f30:	4301      	orrs	r1, r0
10060f32:	76a1      	strb	r1, [r4, #26]
10060f34:	4620      	mov	r0, r4
10060f36:	f004 ff14 	bl	10065d62 <smp_start_encryption_ucfg_weak>
10060f3a:	e00a      	b.n	10060f52 <smp_scp_phase_2as2_dhkey_check_receive+0x76>
10060f3c:	210b      	movs	r1, #11
10060f3e:	2200      	movs	r2, #0
10060f40:	2301      	movs	r3, #1
10060f42:	9802      	ldr	r0, [sp, #8]
10060f44:	f004 ffc8 	bl	10065ed8 <smp_pp3_pairing_failed_send>
10060f48:	e003      	b.n	10060f52 <smp_scp_phase_2as2_dhkey_check_receive+0x76>
10060f4a:	4620      	mov	r0, r4
10060f4c:	f7ff ff96 	bl	10060e7c <smp_scp_pp2_as2_dhkey_check_send>
10060f50:	9801      	ldr	r0, [sp, #4]
10060f52:	b00b      	add	sp, #44	@ 0x2c
10060f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10060f58 <smp_scp_stats_update_on_pairing_complete>:
10060f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060f5a:	6804      	ldr	r4, [r0, #0]
10060f5c:	7de5      	ldrb	r5, [r4, #23]
10060f5e:	0729      	lsls	r1, r5, #28
10060f60:	d530      	bpl.n	10060fc4 <smp_scp_stats_update_on_pairing_complete+0x6c>
10060f62:	7907      	ldrb	r7, [r0, #4]
10060f64:	20fe      	movs	r0, #254	@ 0xfe
10060f66:	4005      	ands	r5, r0
10060f68:	8920      	ldrh	r0, [r4, #8]
10060f6a:	f7ff fcdd 	bl	10060928 <smp_scp_is_another_sc_pairing_ongoing>
10060f6e:	75e5      	strb	r5, [r4, #23]
10060f70:	2800      	cmp	r0, #0
10060f72:	d106      	bne.n	10060f82 <smp_scp_stats_update_on_pairing_complete+0x2a>
10060f74:	4914      	ldr	r1, [pc, #80]	@ (10060fc8 <__arm_cp.15_0>)
10060f76:	6809      	ldr	r1, [r1, #0]
10060f78:	2242      	movs	r2, #66	@ 0x42
10060f7a:	5c8b      	ldrb	r3, [r1, r2]
10060f7c:	24fb      	movs	r4, #251	@ 0xfb
10060f7e:	401c      	ands	r4, r3
10060f80:	548c      	strb	r4, [r1, r2]
10060f82:	4c11      	ldr	r4, [pc, #68]	@ (10060fc8 <__arm_cp.15_0>)
10060f84:	6821      	ldr	r1, [r4, #0]
10060f86:	2543      	movs	r5, #67	@ 0x43
10060f88:	5d4e      	ldrb	r6, [r1, r5]
10060f8a:	3142      	adds	r1, #66	@ 0x42
10060f8c:	2f00      	cmp	r7, #0
10060f8e:	d008      	beq.n	10060fa2 <smp_scp_stats_update_on_pairing_complete+0x4a>
10060f90:	3610      	adds	r6, #16
10060f92:	704e      	strb	r6, [r1, #1]
10060f94:	2800      	cmp	r0, #0
10060f96:	d106      	bne.n	10060fa6 <smp_scp_stats_update_on_pairing_complete+0x4e>
10060f98:	7808      	ldrb	r0, [r1, #0]
10060f9a:	22cf      	movs	r2, #207	@ 0xcf
10060f9c:	4002      	ands	r2, r0
10060f9e:	700a      	strb	r2, [r1, #0]
10060fa0:	e001      	b.n	10060fa6 <smp_scp_stats_update_on_pairing_complete+0x4e>
10060fa2:	1c76      	adds	r6, r6, #1
10060fa4:	704e      	strb	r6, [r1, #1]
10060fa6:	200f      	movs	r0, #15
10060fa8:	4030      	ands	r0, r6
10060faa:	2103      	movs	r1, #3
10060fac:	f7df f95c 	bl	10040268 <__udivsi3>
10060fb0:	b2f1      	uxtb	r1, r6
10060fb2:	0909      	lsrs	r1, r1, #4
10060fb4:	1840      	adds	r0, r0, r1
10060fb6:	2803      	cmp	r0, #3
10060fb8:	d304      	bcc.n	10060fc4 <smp_scp_stats_update_on_pairing_complete+0x6c>
10060fba:	f7ff fcf1 	bl	100609a0 <smp_scp_execute_public_key_generation_request>
10060fbe:	6820      	ldr	r0, [r4, #0]
10060fc0:	2100      	movs	r1, #0
10060fc2:	5541      	strb	r1, [r0, r5]
10060fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060fc6:	46c0      	nop			@ (mov r8, r8)

10060fc8 <__arm_cp.15_0>:
10060fc8:	200011c0 	.word	0x200011c0

10060fcc <smp_fsm_process_actions_wrt_state_tsk>:
10060fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060fce:	2700      	movs	r7, #0
10060fd0:	4b6b      	ldr	r3, [pc, #428]	@ (10061180 <__arm_cp.0_0>)
10060fd2:	4a6c      	ldr	r2, [pc, #432]	@ (10061184 <__arm_cp.0_1>)
10060fd4:	463d      	mov	r5, r7
10060fd6:	6818      	ldr	r0, [r3, #0]
10060fd8:	2134      	movs	r1, #52	@ 0x34
10060fda:	5c40      	ldrb	r0, [r0, r1]
10060fdc:	4285      	cmp	r5, r0
10060fde:	d300      	bcc.n	10060fe2 <smp_fsm_process_actions_wrt_state_tsk+0x16>
10060fe0:	e0cd      	b.n	1006117e <smp_fsm_process_actions_wrt_state_tsk+0x1b2>
10060fe2:	6810      	ldr	r0, [r2, #0]
10060fe4:	21a4      	movs	r1, #164	@ 0xa4
10060fe6:	5840      	ldr	r0, [r0, r1]
10060fe8:	2800      	cmp	r0, #0
10060fea:	d100      	bne.n	10060fee <smp_fsm_process_actions_wrt_state_tsk+0x22>
10060fec:	e0b2      	b.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10060fee:	19c4      	adds	r4, r0, r7
10060ff0:	8920      	ldrh	r0, [r4, #8]
10060ff2:	2800      	cmp	r0, #0
10060ff4:	d100      	bne.n	10060ff8 <smp_fsm_process_actions_wrt_state_tsk+0x2c>
10060ff6:	e0ad      	b.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10060ff8:	7aa0      	ldrb	r0, [r4, #10]
10060ffa:	4601      	mov	r1, r0
10060ffc:	39d1      	subs	r1, #209	@ 0xd1
10060ffe:	2905      	cmp	r1, #5
10061000:	d35d      	bcc.n	100610be <smp_fsm_process_actions_wrt_state_tsk+0xf2>
10061002:	2800      	cmp	r0, #0
10061004:	d100      	bne.n	10061008 <smp_fsm_process_actions_wrt_state_tsk+0x3c>
10061006:	e0a5      	b.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061008:	28fe      	cmp	r0, #254	@ 0xfe
1006100a:	d100      	bne.n	1006100e <smp_fsm_process_actions_wrt_state_tsk+0x42>
1006100c:	e08a      	b.n	10061124 <smp_fsm_process_actions_wrt_state_tsk+0x158>
1006100e:	28a2      	cmp	r0, #162	@ 0xa2
10061010:	d059      	beq.n	100610c6 <smp_fsm_process_actions_wrt_state_tsk+0xfa>
10061012:	28aa      	cmp	r0, #170	@ 0xaa
10061014:	d100      	bne.n	10061018 <smp_fsm_process_actions_wrt_state_tsk+0x4c>
10061016:	e081      	b.n	1006111c <smp_fsm_process_actions_wrt_state_tsk+0x150>
10061018:	28b2      	cmp	r0, #178	@ 0xb2
1006101a:	d054      	beq.n	100610c6 <smp_fsm_process_actions_wrt_state_tsk+0xfa>
1006101c:	28b4      	cmp	r0, #180	@ 0xb4
1006101e:	d100      	bne.n	10061022 <smp_fsm_process_actions_wrt_state_tsk+0x56>
10061020:	e08a      	b.n	10061138 <smp_fsm_process_actions_wrt_state_tsk+0x16c>
10061022:	28ba      	cmp	r0, #186	@ 0xba
10061024:	d07a      	beq.n	1006111c <smp_fsm_process_actions_wrt_state_tsk+0x150>
10061026:	28bf      	cmp	r0, #191	@ 0xbf
10061028:	d100      	bne.n	1006102c <smp_fsm_process_actions_wrt_state_tsk+0x60>
1006102a:	e089      	b.n	10061140 <smp_fsm_process_actions_wrt_state_tsk+0x174>
1006102c:	28f0      	cmp	r0, #240	@ 0xf0
1006102e:	d100      	bne.n	10061032 <smp_fsm_process_actions_wrt_state_tsk+0x66>
10061030:	e08b      	b.n	1006114a <smp_fsm_process_actions_wrt_state_tsk+0x17e>
10061032:	2810      	cmp	r0, #16
10061034:	d000      	beq.n	10061038 <smp_fsm_process_actions_wrt_state_tsk+0x6c>
10061036:	e090      	b.n	1006115a <smp_fsm_process_actions_wrt_state_tsk+0x18e>
10061038:	2101      	movs	r1, #1
1006103a:	4620      	mov	r0, r4
1006103c:	f004 fe12 	bl	10065c64 <smp_dep_sdb_find_bonding_record_by_conn_addr>
10061040:	2800      	cmp	r0, #0
10061042:	d100      	bne.n	10061046 <smp_fsm_process_actions_wrt_state_tsk+0x7a>
10061044:	e096      	b.n	10061174 <smp_fsm_process_actions_wrt_state_tsk+0x1a8>
10061046:	2600      	movs	r6, #0
10061048:	72a6      	strb	r6, [r4, #10]
1006104a:	f7f3 faa9 	bl	100545a0 <GapIsPrivacySupported>
1006104e:	2800      	cmp	r0, #0
10061050:	4b4b      	ldr	r3, [pc, #300]	@ (10061180 <__arm_cp.0_0>)
10061052:	4a4c      	ldr	r2, [pc, #304]	@ (10061184 <__arm_cp.0_1>)
10061054:	d07e      	beq.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061056:	2060      	movs	r0, #96	@ 0x60
10061058:	5c20      	ldrb	r0, [r4, r0]
1006105a:	07c0      	lsls	r0, r0, #31
1006105c:	d07a      	beq.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006105e:	f004 fd72 	bl	10065b46 <smp_dep_sdb_get_bonding_records_count>
10061062:	4a48      	ldr	r2, [pc, #288]	@ (10061184 <__arm_cp.0_1>)
10061064:	4b46      	ldr	r3, [pc, #280]	@ (10061180 <__arm_cp.0_0>)
10061066:	2800      	cmp	r0, #0
10061068:	d074      	beq.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006106a:	79e0      	ldrb	r0, [r4, #7]
1006106c:	21c0      	movs	r1, #192	@ 0xc0
1006106e:	4001      	ands	r1, r0
10061070:	2940      	cmp	r1, #64	@ 0x40
10061072:	d16f      	bne.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061074:	4844      	ldr	r0, [pc, #272]	@ (10061188 <__arm_cp.0_2>)
10061076:	6800      	ldr	r0, [r0, #0]
10061078:	214f      	movs	r1, #79	@ 0x4f
1006107a:	5c40      	ldrb	r0, [r0, r1]
1006107c:	0700      	lsls	r0, r0, #28
1006107e:	d569      	bpl.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061080:	8924      	ldrh	r4, [r4, #8]
10061082:	4842      	ldr	r0, [pc, #264]	@ (1006118c <__arm_cp.0_3>)
10061084:	6800      	ldr	r0, [r0, #0]
10061086:	6980      	ldr	r0, [r0, #24]
10061088:	2248      	movs	r2, #72	@ 0x48
1006108a:	2102      	movs	r1, #2
1006108c:	460b      	mov	r3, r1
1006108e:	f7f2 f9eb 	bl	10053468 <aci_event_fifo_push_header>
10061092:	4a3c      	ldr	r2, [pc, #240]	@ (10061184 <__arm_cp.0_1>)
10061094:	4b3a      	ldr	r3, [pc, #232]	@ (10061180 <__arm_cp.0_0>)
10061096:	2800      	cmp	r0, #0
10061098:	d05c      	beq.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006109a:	4601      	mov	r1, r0
1006109c:	2004      	movs	r0, #4
1006109e:	7248      	strb	r0, [r1, #9]
100610a0:	2208      	movs	r2, #8
100610a2:	720a      	strb	r2, [r1, #8]
100610a4:	71ce      	strb	r6, [r1, #7]
100610a6:	7188      	strb	r0, [r1, #6]
100610a8:	728c      	strb	r4, [r1, #10]
100610aa:	20ff      	movs	r0, #255	@ 0xff
100610ac:	7148      	strb	r0, [r1, #5]
100610ae:	2082      	movs	r0, #130	@ 0x82
100610b0:	7108      	strb	r0, [r1, #4]
100610b2:	0a20      	lsrs	r0, r4, #8
100610b4:	72c8      	strb	r0, [r1, #11]
100610b6:	2002      	movs	r0, #2
100610b8:	f7f2 fa73 	bl	100535a2 <aci_event_fifo_push>
100610bc:	e048      	b.n	10061150 <smp_fsm_process_actions_wrt_state_tsk+0x184>
100610be:	4620      	mov	r0, r4
100610c0:	f005 f83e 	bl	10066140 <smp_pp3_keys_distribution_send>
100610c4:	e044      	b.n	10061150 <smp_fsm_process_actions_wrt_state_tsk+0x184>
100610c6:	7de0      	ldrb	r0, [r4, #23]
100610c8:	2601      	movs	r6, #1
100610ca:	0700      	lsls	r0, r0, #28
100610cc:	4630      	mov	r0, r6
100610ce:	d513      	bpl.n	100610f8 <smp_fsm_process_actions_wrt_state_tsk+0x12c>
100610d0:	4620      	mov	r0, r4
100610d2:	f7f0 ffd8 	bl	10052086 <smp_scp_public_key_prepare_and_exchange_ucfg>
100610d6:	2800      	cmp	r0, #0
100610d8:	d006      	beq.n	100610e8 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
100610da:	2812      	cmp	r0, #18
100610dc:	d004      	beq.n	100610e8 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
100610de:	200e      	movs	r0, #14
100610e0:	f000 ffdc 	bl	1006209c <tsk_notify_idx>
100610e4:	f7e2 fedb 	bl	10043e9e <BLE_STACK_ProcessRequest>
100610e8:	7de0      	ldrb	r0, [r4, #23]
100610ea:	2160      	movs	r1, #96	@ 0x60
100610ec:	4001      	ands	r1, r0
100610ee:	3960      	subs	r1, #96	@ 0x60
100610f0:	4248      	negs	r0, r1
100610f2:	4148      	adcs	r0, r1
100610f4:	4b22      	ldr	r3, [pc, #136]	@ (10061180 <__arm_cp.0_0>)
100610f6:	4a23      	ldr	r2, [pc, #140]	@ (10061184 <__arm_cp.0_1>)
100610f8:	7ce1      	ldrb	r1, [r4, #19]
100610fa:	2902      	cmp	r1, #2
100610fc:	d104      	bne.n	10061108 <smp_fsm_process_actions_wrt_state_tsk+0x13c>
100610fe:	7be1      	ldrb	r1, [r4, #15]
10061100:	2210      	movs	r2, #16
10061102:	400a      	ands	r2, r1
10061104:	0916      	lsrs	r6, r2, #4
10061106:	4a1f      	ldr	r2, [pc, #124]	@ (10061184 <__arm_cp.0_1>)
10061108:	2800      	cmp	r0, #0
1006110a:	d023      	beq.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006110c:	2e00      	cmp	r6, #0
1006110e:	d021      	beq.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061110:	2060      	movs	r0, #96	@ 0x60
10061112:	5c20      	ldrb	r0, [r4, r0]
10061114:	07c0      	lsls	r0, r0, #31
10061116:	d024      	beq.n	10061162 <smp_fsm_process_actions_wrt_state_tsk+0x196>
10061118:	204b      	movs	r0, #75	@ 0x4b
1006111a:	e023      	b.n	10061164 <smp_fsm_process_actions_wrt_state_tsk+0x198>
1006111c:	4620      	mov	r0, r4
1006111e:	f7f0 ffda 	bl	100520d6 <smp_fsm_execute_actions_scp_phase2as2_ucfg>
10061122:	e015      	b.n	10061150 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061124:	2060      	movs	r0, #96	@ 0x60
10061126:	5620      	ldrsb	r0, [r4, r0]
10061128:	2800      	cmp	r0, #0
1006112a:	d513      	bpl.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006112c:	2100      	movs	r1, #0
1006112e:	2270      	movs	r2, #112	@ 0x70
10061130:	4620      	mov	r0, r4
10061132:	f7e4 feb1 	bl	10045e98 <BLEPLAT_MemSet>
10061136:	e00b      	b.n	10061150 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061138:	4620      	mov	r0, r4
1006113a:	f7ff f9fd 	bl	10060538 <smp_pp2_per_auth_stage_1_start>
1006113e:	e007      	b.n	10061150 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061140:	2100      	movs	r1, #0
10061142:	4620      	mov	r0, r4
10061144:	f004 ffb2 	bl	100660ac <smp_pp3_keys_distribution_start>
10061148:	e002      	b.n	10061150 <smp_fsm_process_actions_wrt_state_tsk+0x184>
1006114a:	4620      	mov	r0, r4
1006114c:	f004 fe0c 	bl	10065d68 <smp_pp3_pairing_completed_successful>
10061150:	4a0c      	ldr	r2, [pc, #48]	@ (10061184 <__arm_cp.0_1>)
10061152:	4b0b      	ldr	r3, [pc, #44]	@ (10061180 <__arm_cp.0_0>)
10061154:	3770      	adds	r7, #112	@ 0x70
10061156:	1c6d      	adds	r5, r5, #1
10061158:	e73d      	b.n	10060fd6 <smp_fsm_process_actions_wrt_state_tsk+0xa>
1006115a:	4620      	mov	r0, r4
1006115c:	f000 f830 	bl	100611c0 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>
10061160:	e00a      	b.n	10061178 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
10061162:	205b      	movs	r0, #91	@ 0x5b
10061164:	43c0      	mvns	r0, r0
10061166:	72a0      	strb	r0, [r4, #10]
10061168:	200e      	movs	r0, #14
1006116a:	f000 ff97 	bl	1006209c <tsk_notify_idx>
1006116e:	f7e2 fe96 	bl	10043e9e <BLE_STACK_ProcessRequest>
10061172:	e001      	b.n	10061178 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
10061174:	20f1      	movs	r0, #241	@ 0xf1
10061176:	72a0      	strb	r0, [r4, #10]
10061178:	4b01      	ldr	r3, [pc, #4]	@ (10061180 <__arm_cp.0_0>)
1006117a:	4a02      	ldr	r2, [pc, #8]	@ (10061184 <__arm_cp.0_1>)
1006117c:	e7ea      	b.n	10061154 <smp_fsm_process_actions_wrt_state_tsk+0x188>
1006117e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061180 <__arm_cp.0_0>:
10061180:	20001120 	.word	0x20001120

10061184 <__arm_cp.0_1>:
10061184:	200011c0 	.word	0x200011c0

10061188 <__arm_cp.0_2>:
10061188:	20001174 	.word	0x20001174

1006118c <__arm_cp.0_3>:
1006118c:	20001124 	.word	0x20001124

10061190 <smp_fsm_execute_actions_scp_phase2as2>:
10061190:	b510      	push	{r4, lr}
10061192:	4604      	mov	r4, r0
10061194:	7dc0      	ldrb	r0, [r0, #23]
10061196:	0700      	lsls	r0, r0, #28
10061198:	d511      	bpl.n	100611be <smp_fsm_execute_actions_scp_phase2as2+0x2e>
1006119a:	4620      	mov	r0, r4
1006119c:	f7ff fd40 	bl	10060c20 <smp_scp_phase_2as2_start>
100611a0:	2800      	cmp	r0, #0
100611a2:	d007      	beq.n	100611b4 <smp_fsm_execute_actions_scp_phase2as2+0x24>
100611a4:	2888      	cmp	r0, #136	@ 0x88
100611a6:	d005      	beq.n	100611b4 <smp_fsm_execute_actions_scp_phase2as2+0x24>
100611a8:	210b      	movs	r1, #11
100611aa:	2200      	movs	r2, #0
100611ac:	2301      	movs	r3, #1
100611ae:	4620      	mov	r0, r4
100611b0:	f004 fe92 	bl	10065ed8 <smp_pp3_pairing_failed_send>
100611b4:	200e      	movs	r0, #14
100611b6:	f000 ff71 	bl	1006209c <tsk_notify_idx>
100611ba:	f7e2 fe70 	bl	10043e9e <BLE_STACK_ProcessRequest>
100611be:	bd10      	pop	{r4, pc}

100611c0 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>:
100611c0:	4770      	bx	lr

100611c2 <smp_pka_process_ecc_computation_tsk>:
100611c2:	b580      	push	{r7, lr}
100611c4:	f7ff fbec 	bl	100609a0 <smp_scp_execute_public_key_generation_request>
100611c8:	bd80      	pop	{r7, pc}
	...

100611cc <smp_rxp_process_rxed_packets_tsk>:
100611cc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100611ce:	4f60      	ldr	r7, [pc, #384]	@ (10061350 <__arm_cp.0_0>)
100611d0:	4c60      	ldr	r4, [pc, #384]	@ (10061354 <__arm_cp.0_1>)
100611d2:	6838      	ldr	r0, [r7, #0]
100611d4:	6801      	ldr	r1, [r0, #0]
100611d6:	2900      	cmp	r1, #0
100611d8:	d100      	bne.n	100611dc <smp_rxp_process_rxed_packets_tsk+0x10>
100611da:	e0b8      	b.n	1006134e <smp_rxp_process_rxed_packets_tsk+0x182>
100611dc:	f001 f97a 	bl	100624d4 <ACL_list_remove_head>
100611e0:	4605      	mov	r5, r0
100611e2:	8800      	ldrh	r0, [r0, #0]
100611e4:	f7ff fb12 	bl	1006080c <smp_get_remote_device_list_item>
100611e8:	2800      	cmp	r0, #0
100611ea:	d0f2      	beq.n	100611d2 <smp_rxp_process_rxed_packets_tsk+0x6>
100611ec:	4606      	mov	r6, r0
100611ee:	6838      	ldr	r0, [r7, #0]
100611f0:	21b0      	movs	r1, #176	@ 0xb0
100611f2:	5c40      	ldrb	r0, [r0, r1]
100611f4:	2800      	cmp	r0, #0
100611f6:	d00e      	beq.n	10061216 <smp_rxp_process_rxed_packets_tsk+0x4a>
100611f8:	2108      	movs	r1, #8
100611fa:	2200      	movs	r2, #0
100611fc:	2301      	movs	r3, #1
100611fe:	4630      	mov	r0, r6
10061200:	f004 fe6a 	bl	10065ed8 <smp_pp3_pairing_failed_send>
10061204:	2800      	cmp	r0, #0
10061206:	d00e      	beq.n	10061226 <smp_rxp_process_rxed_packets_tsk+0x5a>
10061208:	28fd      	cmp	r0, #253	@ 0xfd
1006120a:	d000      	beq.n	1006120e <smp_rxp_process_rxed_packets_tsk+0x42>
1006120c:	e096      	b.n	1006133c <smp_rxp_process_rxed_packets_tsk+0x170>
1006120e:	4628      	mov	r0, r5
10061210:	f7f1 ff54 	bl	100530bc <ACL_pkt_release>
10061214:	e7dd      	b.n	100611d2 <smp_rxp_process_rxed_packets_tsk+0x6>
10061216:	6868      	ldr	r0, [r5, #4]
10061218:	7a00      	ldrb	r0, [r0, #8]
1006121a:	2805      	cmp	r0, #5
1006121c:	d10c      	bne.n	10061238 <smp_rxp_process_rxed_packets_tsk+0x6c>
1006121e:	4628      	mov	r0, r5
10061220:	4631      	mov	r1, r6
10061222:	f004 fe2d 	bl	10065e80 <smp_pp3_pairing_failed_receive>
10061226:	4628      	mov	r0, r5
10061228:	f7f1 ff48 	bl	100530bc <ACL_pkt_release>
1006122c:	200e      	movs	r0, #14
1006122e:	f000 ff35 	bl	1006209c <tsk_notify_idx>
10061232:	f7e2 fe34 	bl	10043e9e <BLE_STACK_ProcessRequest>
10061236:	e7cc      	b.n	100611d2 <smp_rxp_process_rxed_packets_tsk+0x6>
10061238:	7ab1      	ldrb	r1, [r6, #10]
1006123a:	29f1      	cmp	r1, #241	@ 0xf1
1006123c:	d001      	beq.n	10061242 <smp_rxp_process_rxed_packets_tsk+0x76>
1006123e:	2900      	cmp	r1, #0
10061240:	d10a      	bne.n	10061258 <smp_rxp_process_rxed_packets_tsk+0x8c>
10061242:	2160      	movs	r1, #96	@ 0x60
10061244:	5c72      	ldrb	r2, [r6, r1]
10061246:	2101      	movs	r1, #1
10061248:	4011      	ands	r1, r2
1006124a:	d101      	bne.n	10061250 <smp_rxp_process_rxed_packets_tsk+0x84>
1006124c:	280b      	cmp	r0, #11
1006124e:	d1de      	bne.n	1006120e <smp_rxp_process_rxed_packets_tsk+0x42>
10061250:	2900      	cmp	r1, #0
10061252:	d001      	beq.n	10061258 <smp_rxp_process_rxed_packets_tsk+0x8c>
10061254:	2801      	cmp	r0, #1
10061256:	d1da      	bne.n	1006120e <smp_rxp_process_rxed_packets_tsk+0x42>
10061258:	7df0      	ldrb	r0, [r6, #23]
1006125a:	0700      	lsls	r0, r0, #28
1006125c:	d506      	bpl.n	1006126c <smp_rxp_process_rxed_packets_tsk+0xa0>
1006125e:	9602      	str	r6, [sp, #8]
10061260:	9501      	str	r5, [sp, #4]
10061262:	a801      	add	r0, sp, #4
10061264:	f7f0 ff6e 	bl	10052144 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg>
10061268:	28fc      	cmp	r0, #252	@ 0xfc
1006126a:	d1cb      	bne.n	10061204 <smp_rxp_process_rxed_packets_tsk+0x38>
1006126c:	2060      	movs	r0, #96	@ 0x60
1006126e:	5c30      	ldrb	r0, [r6, r0]
10061270:	07c0      	lsls	r0, r0, #31
10061272:	d107      	bne.n	10061284 <smp_rxp_process_rxed_packets_tsk+0xb8>
10061274:	9602      	str	r6, [sp, #8]
10061276:	9501      	str	r5, [sp, #4]
10061278:	a801      	add	r0, sp, #4
1006127a:	f000 f909 	bl	10061490 <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>
1006127e:	28fc      	cmp	r0, #252	@ 0xfc
10061280:	d1c0      	bne.n	10061204 <smp_rxp_process_rxed_packets_tsk+0x38>
10061282:	e022      	b.n	100612ca <smp_rxp_process_rxed_packets_tsk+0xfe>
10061284:	6868      	ldr	r0, [r5, #4]
10061286:	7a00      	ldrb	r0, [r0, #8]
10061288:	2804      	cmp	r0, #4
1006128a:	d031      	beq.n	100612f0 <smp_rxp_process_rxed_packets_tsk+0x124>
1006128c:	2803      	cmp	r0, #3
1006128e:	d037      	beq.n	10061300 <smp_rxp_process_rxed_packets_tsk+0x134>
10061290:	2801      	cmp	r0, #1
10061292:	d11a      	bne.n	100612ca <smp_rxp_process_rxed_packets_tsk+0xfe>
10061294:	7ab0      	ldrb	r0, [r6, #10]
10061296:	2800      	cmp	r0, #0
10061298:	d003      	beq.n	100612a2 <smp_rxp_process_rxed_packets_tsk+0xd6>
1006129a:	28fb      	cmp	r0, #251	@ 0xfb
1006129c:	d047      	beq.n	1006132e <smp_rxp_process_rxed_packets_tsk+0x162>
1006129e:	28f1      	cmp	r0, #241	@ 0xf1
100612a0:	d1b5      	bne.n	1006120e <smp_rxp_process_rxed_packets_tsk+0x42>
100612a2:	8930      	ldrh	r0, [r6, #8]
100612a4:	f7ff fa92 	bl	100607cc <smp_get_remote_device_list_index>
100612a8:	4602      	mov	r2, r0
100612aa:	2000      	movs	r0, #0
100612ac:	4601      	mov	r1, r0
100612ae:	4623      	mov	r3, r4
100612b0:	f000 f90c 	bl	100614cc <smp_timer_reset>
100612b4:	7e30      	ldrb	r0, [r6, #24]
100612b6:	0781      	lsls	r1, r0, #30
100612b8:	d502      	bpl.n	100612c0 <smp_rxp_process_rxed_packets_tsk+0xf4>
100612ba:	2103      	movs	r1, #3
100612bc:	4308      	orrs	r0, r1
100612be:	7630      	strb	r0, [r6, #24]
100612c0:	4628      	mov	r0, r5
100612c2:	4631      	mov	r1, r6
100612c4:	f004 fe1e 	bl	10065f04 <smp_pp1_per_rxp_pairing_request>
100612c8:	e7d9      	b.n	1006127e <smp_rxp_process_rxed_packets_tsk+0xb2>
100612ca:	4628      	mov	r0, r5
100612cc:	4631      	mov	r1, r6
100612ce:	f005 f805 	bl	100662dc <smp_pp3_keys_distribution_receive>
100612d2:	28fc      	cmp	r0, #252	@ 0xfc
100612d4:	d003      	beq.n	100612de <smp_rxp_process_rxed_packets_tsk+0x112>
100612d6:	2886      	cmp	r0, #134	@ 0x86
100612d8:	d099      	beq.n	1006120e <smp_rxp_process_rxed_packets_tsk+0x42>
100612da:	2884      	cmp	r0, #132	@ 0x84
100612dc:	d192      	bne.n	10061204 <smp_rxp_process_rxed_packets_tsk+0x38>
100612de:	7df0      	ldrb	r0, [r6, #23]
100612e0:	0700      	lsls	r0, r0, #28
100612e2:	d594      	bpl.n	1006120e <smp_rxp_process_rxed_packets_tsk+0x42>
100612e4:	9602      	str	r6, [sp, #8]
100612e6:	9501      	str	r5, [sp, #4]
100612e8:	a801      	add	r0, sp, #4
100612ea:	f7f0 ff1e 	bl	1005212a <smp_rxp_process_exception_cases_excerpt_scp_ucfg>
100612ee:	e789      	b.n	10061204 <smp_rxp_process_rxed_packets_tsk+0x38>
100612f0:	7ab0      	ldrb	r0, [r6, #10]
100612f2:	28b6      	cmp	r0, #182	@ 0xb6
100612f4:	d18b      	bne.n	1006120e <smp_rxp_process_rxed_packets_tsk+0x42>
100612f6:	4628      	mov	r0, r5
100612f8:	4631      	mov	r1, r6
100612fa:	f7ff f9d5 	bl	100606a8 <smp_pp2_per_rx_process_pairing_random>
100612fe:	e7be      	b.n	1006127e <smp_rxp_process_rxed_packets_tsk+0xb2>
10061300:	7ab0      	ldrb	r0, [r6, #10]
10061302:	28b2      	cmp	r0, #178	@ 0xb2
10061304:	d009      	beq.n	1006131a <smp_rxp_process_rxed_packets_tsk+0x14e>
10061306:	28b4      	cmp	r0, #180	@ 0xb4
10061308:	d007      	beq.n	1006131a <smp_rxp_process_rxed_packets_tsk+0x14e>
1006130a:	28b5      	cmp	r0, #181	@ 0xb5
1006130c:	d000      	beq.n	10061310 <smp_rxp_process_rxed_packets_tsk+0x144>
1006130e:	e77e      	b.n	1006120e <smp_rxp_process_rxed_packets_tsk+0x42>
10061310:	4628      	mov	r0, r5
10061312:	4631      	mov	r1, r6
10061314:	f7ff f868 	bl	100603e8 <smp_pp2_per_rx_process_pairing_confirm>
10061318:	e7b1      	b.n	1006127e <smp_rxp_process_rxed_packets_tsk+0xb2>
1006131a:	7cf0      	ldrb	r0, [r6, #19]
1006131c:	2802      	cmp	r0, #2
1006131e:	d000      	beq.n	10061322 <smp_rxp_process_rxed_packets_tsk+0x156>
10061320:	e775      	b.n	1006120e <smp_rxp_process_rxed_packets_tsk+0x42>
10061322:	6838      	ldr	r0, [r7, #0]
10061324:	2140      	movs	r1, #64	@ 0x40
10061326:	5c41      	ldrb	r1, [r0, r1]
10061328:	2903      	cmp	r1, #3
1006132a:	d108      	bne.n	1006133e <smp_rxp_process_rxed_packets_tsk+0x172>
1006132c:	e76f      	b.n	1006120e <smp_rxp_process_rxed_packets_tsk+0x42>
1006132e:	2109      	movs	r1, #9
10061330:	2200      	movs	r2, #0
10061332:	2301      	movs	r3, #1
10061334:	4630      	mov	r0, r6
10061336:	f004 fdcf 	bl	10065ed8 <smp_pp3_pairing_failed_send>
1006133a:	e7a0      	b.n	1006127e <smp_rxp_process_rxed_packets_tsk+0xb2>
1006133c:	6838      	ldr	r0, [r7, #0]
1006133e:	4629      	mov	r1, r5
10061340:	f001 f8a9 	bl	10062496 <ACL_list_insert_head>
10061344:	200f      	movs	r0, #15
10061346:	f000 fea9 	bl	1006209c <tsk_notify_idx>
1006134a:	f7e2 fda8 	bl	10043e9e <BLE_STACK_ProcessRequest>
1006134e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061350 <__arm_cp.0_0>:
10061350:	200011c0 	.word	0x200011c0

10061354 <__arm_cp.0_1>:
10061354:	00007530 	.word	0x00007530

10061358 <smp_rxp_process_wrt_current_fsm_excerpt_scp>:
10061358:	b580      	push	{r7, lr}
1006135a:	4601      	mov	r1, r0
1006135c:	6800      	ldr	r0, [r0, #0]
1006135e:	6849      	ldr	r1, [r1, #4]
10061360:	6842      	ldr	r2, [r0, #4]
10061362:	7a12      	ldrb	r2, [r2, #8]
10061364:	2a0d      	cmp	r2, #13
10061366:	d00f      	beq.n	10061388 <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x30>
10061368:	2a0c      	cmp	r2, #12
1006136a:	d115      	bne.n	10061398 <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x40>
1006136c:	7a8a      	ldrb	r2, [r1, #10]
1006136e:	2310      	movs	r3, #16
10061370:	4313      	orrs	r3, r2
10061372:	22ff      	movs	r2, #255	@ 0xff
10061374:	2bb2      	cmp	r3, #178	@ 0xb2
10061376:	d118      	bne.n	100613aa <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x52>
10061378:	2360      	movs	r3, #96	@ 0x60
1006137a:	5ccb      	ldrb	r3, [r1, r3]
1006137c:	07db      	lsls	r3, r3, #31
1006137e:	7dcb      	ldrb	r3, [r1, #23]
10061380:	d10c      	bne.n	1006139c <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x44>
10061382:	069b      	lsls	r3, r3, #26
10061384:	d40c      	bmi.n	100613a0 <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x48>
10061386:	e010      	b.n	100613aa <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x52>
10061388:	7a8a      	ldrb	r2, [r1, #10]
1006138a:	2310      	movs	r3, #16
1006138c:	4313      	orrs	r3, r2
1006138e:	2bbb      	cmp	r3, #187	@ 0xbb
10061390:	d10a      	bne.n	100613a8 <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x50>
10061392:	f7ff fda3 	bl	10060edc <smp_scp_phase_2as2_dhkey_check_receive>
10061396:	e005      	b.n	100613a4 <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x4c>
10061398:	22fc      	movs	r2, #252	@ 0xfc
1006139a:	e006      	b.n	100613aa <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x52>
1006139c:	065b      	lsls	r3, r3, #25
1006139e:	d404      	bmi.n	100613aa <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x52>
100613a0:	f7ff fb5e 	bl	10060a60 <smp_scp_public_key_receive>
100613a4:	4602      	mov	r2, r0
100613a6:	e000      	b.n	100613aa <smp_rxp_process_wrt_current_fsm_excerpt_scp+0x52>
100613a8:	22ff      	movs	r2, #255	@ 0xff
100613aa:	4610      	mov	r0, r2
100613ac:	bd80      	pop	{r7, pc}
	...

100613b0 <smp_rxp_process_exception_cases_excerpt_scp>:
100613b0:	b570      	push	{r4, r5, r6, lr}
100613b2:	6805      	ldr	r5, [r0, #0]
100613b4:	6869      	ldr	r1, [r5, #4]
100613b6:	7a09      	ldrb	r1, [r1, #8]
100613b8:	24fd      	movs	r4, #253	@ 0xfd
100613ba:	290e      	cmp	r1, #14
100613bc:	d146      	bne.n	1006144c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
100613be:	6846      	ldr	r6, [r0, #4]
100613c0:	7df0      	ldrb	r0, [r6, #23]
100613c2:	06c0      	lsls	r0, r0, #27
100613c4:	d542      	bpl.n	1006144c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
100613c6:	7cf0      	ldrb	r0, [r6, #19]
100613c8:	2802      	cmp	r0, #2
100613ca:	d13f      	bne.n	1006144c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
100613cc:	7b30      	ldrb	r0, [r6, #12]
100613ce:	2802      	cmp	r0, #2
100613d0:	d13c      	bne.n	1006144c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
100613d2:	2060      	movs	r0, #96	@ 0x60
100613d4:	5c30      	ldrb	r0, [r6, r0]
100613d6:	07c0      	lsls	r0, r0, #31
100613d8:	7ab0      	ldrb	r0, [r6, #10]
100613da:	d101      	bne.n	100613e0 <smp_rxp_process_exception_cases_excerpt_scp+0x30>
100613dc:	38a2      	subs	r0, #162	@ 0xa2
100613de:	e000      	b.n	100613e2 <smp_rxp_process_exception_cases_excerpt_scp+0x32>
100613e0:	38b2      	subs	r0, #178	@ 0xb2
100613e2:	2803      	cmp	r0, #3
100613e4:	d832      	bhi.n	1006144c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
100613e6:	2801      	cmp	r0, #1
100613e8:	d030      	beq.n	1006144c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
100613ea:	8930      	ldrh	r0, [r6, #8]
100613ec:	f7ff f9ee 	bl	100607cc <smp_get_remote_device_list_index>
100613f0:	4602      	mov	r2, r0
100613f2:	2400      	movs	r4, #0
100613f4:	4b16      	ldr	r3, [pc, #88]	@ (10061450 <__arm_cp.3_0>)
100613f6:	4620      	mov	r0, r4
100613f8:	4621      	mov	r1, r4
100613fa:	f000 f867 	bl	100614cc <smp_timer_reset>
100613fe:	4815      	ldr	r0, [pc, #84]	@ (10061454 <__arm_cp.3_1>)
10061400:	6800      	ldr	r0, [r0, #0]
10061402:	214f      	movs	r1, #79	@ 0x4f
10061404:	5c40      	ldrb	r0, [r0, r1]
10061406:	0640      	lsls	r0, r0, #25
10061408:	d520      	bpl.n	1006144c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
1006140a:	8936      	ldrh	r6, [r6, #8]
1006140c:	6868      	ldr	r0, [r5, #4]
1006140e:	7a45      	ldrb	r5, [r0, #9]
10061410:	4811      	ldr	r0, [pc, #68]	@ (10061458 <__arm_cp.3_2>)
10061412:	6800      	ldr	r0, [r0, #0]
10061414:	6980      	ldr	r0, [r0, #24]
10061416:	2102      	movs	r1, #2
10061418:	224a      	movs	r2, #74	@ 0x4a
1006141a:	2303      	movs	r3, #3
1006141c:	f7f2 f824 	bl	10053468 <aci_event_fifo_push_header>
10061420:	2800      	cmp	r0, #0
10061422:	d013      	beq.n	1006144c <smp_rxp_process_exception_cases_excerpt_scp+0x9c>
10061424:	4601      	mov	r1, r0
10061426:	7286      	strb	r6, [r0, #10]
10061428:	2004      	movs	r0, #4
1006142a:	7248      	strb	r0, [r1, #9]
1006142c:	200a      	movs	r0, #10
1006142e:	7208      	strb	r0, [r1, #8]
10061430:	2400      	movs	r4, #0
10061432:	71cc      	strb	r4, [r1, #7]
10061434:	2005      	movs	r0, #5
10061436:	7188      	strb	r0, [r1, #6]
10061438:	730d      	strb	r5, [r1, #12]
1006143a:	20ff      	movs	r0, #255	@ 0xff
1006143c:	7148      	strb	r0, [r1, #5]
1006143e:	2082      	movs	r0, #130	@ 0x82
10061440:	7108      	strb	r0, [r1, #4]
10061442:	0a30      	lsrs	r0, r6, #8
10061444:	72c8      	strb	r0, [r1, #11]
10061446:	2002      	movs	r0, #2
10061448:	f7f2 f8ab 	bl	100535a2 <aci_event_fifo_push>
1006144c:	4620      	mov	r0, r4
1006144e:	bd70      	pop	{r4, r5, r6, pc}

10061450 <__arm_cp.3_0>:
10061450:	00007530 	.word	0x00007530

10061454 <__arm_cp.3_1>:
10061454:	20001174 	.word	0x20001174

10061458 <__arm_cp.3_2>:
10061458:	20001124 	.word	0x20001124

1006145c <smp_rxp_flush_packet_queues>:
1006145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006145e:	4d0a      	ldr	r5, [pc, #40]	@ (10061488 <__arm_cp.4_0>)
10061460:	4005      	ands	r5, r0
10061462:	4e0a      	ldr	r6, [pc, #40]	@ (1006148c <__arm_cp.4_1>)
10061464:	6830      	ldr	r0, [r6, #0]
10061466:	6807      	ldr	r7, [r0, #0]
10061468:	2f00      	cmp	r7, #0
1006146a:	d00c      	beq.n	10061486 <smp_rxp_flush_packet_queues+0x2a>
1006146c:	463c      	mov	r4, r7
1006146e:	69ff      	ldr	r7, [r7, #28]
10061470:	8820      	ldrh	r0, [r4, #0]
10061472:	42a8      	cmp	r0, r5
10061474:	d1f8      	bne.n	10061468 <smp_rxp_flush_packet_queues+0xc>
10061476:	6830      	ldr	r0, [r6, #0]
10061478:	4621      	mov	r1, r4
1006147a:	f001 f815 	bl	100624a8 <ACL_list_remove>
1006147e:	4620      	mov	r0, r4
10061480:	f7f1 fe1c 	bl	100530bc <ACL_pkt_release>
10061484:	e7f0      	b.n	10061468 <smp_rxp_flush_packet_queues+0xc>
10061486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061488 <__arm_cp.4_0>:
10061488:	00000fff 	.word	0x00000fff

1006148c <__arm_cp.4_1>:
1006148c:	200011c0 	.word	0x200011c0

10061490 <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>:
10061490:	201f      	movs	r0, #31
10061492:	4770      	bx	lr

10061494 <smp_timer_init>:
10061494:	b580      	push	{r7, lr}
10061496:	4806      	ldr	r0, [pc, #24]	@ (100614b0 <__arm_cp.0_0>)
10061498:	7ac1      	ldrb	r1, [r0, #11]
1006149a:	4806      	ldr	r0, [pc, #24]	@ (100614b4 <__arm_cp.0_1>)
1006149c:	6800      	ldr	r0, [r0, #0]
1006149e:	3008      	adds	r0, #8
100614a0:	1cc9      	adds	r1, r1, #3
100614a2:	b2c9      	uxtb	r1, r1
100614a4:	4a04      	ldr	r2, [pc, #16]	@ (100614b8 <__arm_cp.0_2>)
100614a6:	2307      	movs	r3, #7
100614a8:	f000 fe56 	bl	10062158 <CST_init>
100614ac:	bd80      	pop	{r7, pc}
100614ae:	46c0      	nop			@ (mov r8, r8)

100614b0 <__arm_cp.0_0>:
100614b0:	20001188 	.word	0x20001188

100614b4 <__arm_cp.0_1>:
100614b4:	200011c0 	.word	0x200011c0

100614b8 <__arm_cp.0_2>:
100614b8:	100614bd 	.word	0x100614bd

100614bc <smp_timers_cb_wrapper>:
100614bc:	b580      	push	{r7, lr}
100614be:	6940      	ldr	r0, [r0, #20]
100614c0:	4901      	ldr	r1, [pc, #4]	@ (100614c8 <__arm_cp.1_0>)
100614c2:	f000 ff22 	bl	1006230a <cst_sharedCallback>
100614c6:	bd80      	pop	{r7, pc}

100614c8 <__arm_cp.1_0>:
100614c8:	10061565 	.word	0x10061565

100614cc <smp_timer_reset>:
100614cc:	b510      	push	{r4, lr}
100614ce:	2900      	cmp	r1, #0
100614d0:	d006      	beq.n	100614e0 <smp_timer_reset+0x14>
100614d2:	2486      	movs	r4, #134	@ 0x86
100614d4:	2901      	cmp	r1, #1
100614d6:	d11b      	bne.n	10061510 <smp_timer_reset+0x44>
100614d8:	2a02      	cmp	r2, #2
100614da:	d819      	bhi.n	10061510 <smp_timer_reset+0x44>
100614dc:	2100      	movs	r1, #0
100614de:	e000      	b.n	100614e2 <smp_timer_reset+0x16>
100614e0:	2103      	movs	r1, #3
100614e2:	2801      	cmp	r0, #1
100614e4:	d00a      	beq.n	100614fc <smp_timer_reset+0x30>
100614e6:	2800      	cmp	r0, #0
100614e8:	d111      	bne.n	1006150e <smp_timer_reset+0x42>
100614ea:	1888      	adds	r0, r1, r2
100614ec:	b2c1      	uxtb	r1, r0
100614ee:	4809      	ldr	r0, [pc, #36]	@ (10061514 <__arm_cp.2_0>)
100614f0:	6800      	ldr	r0, [r0, #0]
100614f2:	3008      	adds	r0, #8
100614f4:	2201      	movs	r2, #1
100614f6:	f000 fe7a 	bl	100621ee <CST_start>
100614fa:	e006      	b.n	1006150a <smp_timer_reset+0x3e>
100614fc:	1888      	adds	r0, r1, r2
100614fe:	b2c1      	uxtb	r1, r0
10061500:	4804      	ldr	r0, [pc, #16]	@ (10061514 <__arm_cp.2_0>)
10061502:	6800      	ldr	r0, [r0, #0]
10061504:	3008      	adds	r0, #8
10061506:	f000 fe3c 	bl	10062182 <CST_stop>
1006150a:	4604      	mov	r4, r0
1006150c:	e000      	b.n	10061510 <smp_timer_reset+0x44>
1006150e:	2400      	movs	r4, #0
10061510:	4620      	mov	r0, r4
10061512:	bd10      	pop	{r4, pc}

10061514 <__arm_cp.2_0>:
10061514:	200011c0 	.word	0x200011c0

10061518 <smp_timers_protocol_timeout_cb>:
10061518:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006151a:	4605      	mov	r5, r0
1006151c:	2070      	movs	r0, #112	@ 0x70
1006151e:	9002      	str	r0, [sp, #8]
10061520:	4345      	muls	r5, r0
10061522:	480f      	ldr	r0, [pc, #60]	@ (10061560 <__arm_cp.3_0>)
10061524:	6800      	ldr	r0, [r0, #0]
10061526:	21a4      	movs	r1, #164	@ 0xa4
10061528:	9101      	str	r1, [sp, #4]
1006152a:	5840      	ldr	r0, [r0, r1]
1006152c:	1947      	adds	r7, r0, r5
1006152e:	8939      	ldrh	r1, [r7, #8]
10061530:	2002      	movs	r0, #2
10061532:	2401      	movs	r4, #1
10061534:	2600      	movs	r6, #0
10061536:	4622      	mov	r2, r4
10061538:	4633      	mov	r3, r6
1006153a:	f002 fa37 	bl	100639ac <aci_gap_pairing_complete_event_push_noinline>
1006153e:	4638      	mov	r0, r7
10061540:	4621      	mov	r1, r4
10061542:	f004 fc79 	bl	10065e38 <smp_pp3_pairing_completed_update_stats>
10061546:	8938      	ldrh	r0, [r7, #8]
10061548:	f7ff ff88 	bl	1006145c <smp_rxp_flush_packet_queues>
1006154c:	4804      	ldr	r0, [pc, #16]	@ (10061560 <__arm_cp.3_0>)
1006154e:	6800      	ldr	r0, [r0, #0]
10061550:	9901      	ldr	r1, [sp, #4]
10061552:	5840      	ldr	r0, [r0, r1]
10061554:	1940      	adds	r0, r0, r5
10061556:	4631      	mov	r1, r6
10061558:	9a02      	ldr	r2, [sp, #8]
1006155a:	f7e4 fc9d 	bl	10045e98 <BLEPLAT_MemSet>
1006155e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061560 <__arm_cp.3_0>:
10061560:	200011c0 	.word	0x200011c0

10061564 <smp_timers_cb>:
10061564:	b580      	push	{r7, lr}
10061566:	2802      	cmp	r0, #2
10061568:	d802      	bhi.n	10061570 <smp_timers_cb+0xc>
1006156a:	f004 ffcf 	bl	1006650c <smp_cmn_repeated_attacks_timer_cb>
1006156e:	bd80      	pop	{r7, pc}
10061570:	4904      	ldr	r1, [pc, #16]	@ (10061584 <__arm_cp.4_0>)
10061572:	7ac9      	ldrb	r1, [r1, #11]
10061574:	1cc9      	adds	r1, r1, #3
10061576:	4281      	cmp	r1, r0
10061578:	d903      	bls.n	10061582 <smp_timers_cb+0x1e>
1006157a:	1ec0      	subs	r0, r0, #3
1006157c:	b2c0      	uxtb	r0, r0
1006157e:	f7ff ffcb 	bl	10061518 <smp_timers_protocol_timeout_cb>
10061582:	bd80      	pop	{r7, pc}

10061584 <__arm_cp.4_0>:
10061584:	20001188 	.word	0x20001188

10061588 <smp_init>:
10061588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006158a:	2029      	movs	r0, #41	@ 0x29
1006158c:	00c1      	lsls	r1, r0, #3
1006158e:	2401      	movs	r4, #1
10061590:	4d20      	ldr	r5, [pc, #128]	@ (10061614 <__arm_cp.0_0>)
10061592:	4620      	mov	r0, r4
10061594:	47a8      	blx	r5
10061596:	4e20      	ldr	r6, [pc, #128]	@ (10061618 <__arm_cp.0_1>)
10061598:	6030      	str	r0, [r6, #0]
1006159a:	4f20      	ldr	r7, [pc, #128]	@ (1006161c <__arm_cp.0_2>)
1006159c:	7af8      	ldrb	r0, [r7, #11]
1006159e:	2170      	movs	r1, #112	@ 0x70
100615a0:	47a8      	blx	r5
100615a2:	6831      	ldr	r1, [r6, #0]
100615a4:	22a4      	movs	r2, #164	@ 0xa4
100615a6:	5088      	str	r0, [r1, r2]
100615a8:	f004 ff38 	bl	1006641c <smp_cmn_rejectlist_init>
100615ac:	2128      	movs	r1, #40	@ 0x28
100615ae:	4620      	mov	r0, r4
100615b0:	47a8      	blx	r5
100615b2:	6831      	ldr	r1, [r6, #0]
100615b4:	22ac      	movs	r2, #172	@ 0xac
100615b6:	5088      	str	r0, [r1, r2]
100615b8:	7af8      	ldrb	r0, [r7, #11]
100615ba:	1cc0      	adds	r0, r0, #3
100615bc:	b2c0      	uxtb	r0, r0
100615be:	1c41      	adds	r1, r0, #1
100615c0:	4d17      	ldr	r5, [pc, #92]	@ (10061620 <__arm_cp.0_3>)
100615c2:	4628      	mov	r0, r5
100615c4:	4622      	mov	r2, r4
100615c6:	f7fd fcaf 	bl	1005ef28 <csmem_mem_assign>
100615ca:	6831      	ldr	r1, [r6, #0]
100615cc:	6288      	str	r0, [r1, #40]	@ 0x28
100615ce:	7af8      	ldrb	r0, [r7, #11]
100615d0:	1cc0      	adds	r0, r0, #3
100615d2:	b2c1      	uxtb	r1, r0
100615d4:	2202      	movs	r2, #2
100615d6:	4628      	mov	r0, r5
100615d8:	f7fd fca6 	bl	1005ef28 <csmem_mem_assign>
100615dc:	6831      	ldr	r1, [r6, #0]
100615de:	62c8      	str	r0, [r1, #44]	@ 0x2c
100615e0:	4608      	mov	r0, r1
100615e2:	f000 ff4d 	bl	10062480 <ACL_list_init>
100615e6:	f7ff ff55 	bl	10061494 <smp_timer_init>
100615ea:	6830      	ldr	r0, [r6, #0]
100615ec:	2142      	movs	r1, #66	@ 0x42
100615ee:	2500      	movs	r5, #0
100615f0:	5245      	strh	r5, [r0, r1]
100615f2:	2140      	movs	r1, #64	@ 0x40
100615f4:	2203      	movs	r2, #3
100615f6:	5442      	strb	r2, [r0, r1]
100615f8:	490a      	ldr	r1, [pc, #40]	@ (10061624 <__arm_cp.0_4>)
100615fa:	6304      	str	r4, [r0, #48]	@ 0x30
100615fc:	6341      	str	r1, [r0, #52]	@ 0x34
100615fe:	6385      	str	r5, [r0, #56]	@ 0x38
10061600:	3044      	adds	r0, #68	@ 0x44
10061602:	2110      	movs	r1, #16
10061604:	462a      	mov	r2, r5
10061606:	f001 f88d 	bl	10062724 <HAL_Generate_Random_Bytes_To>
1006160a:	4628      	mov	r0, r5
1006160c:	f7f0 fd1f 	bl	1005204e <smp_scp_init_ucfg>
10061610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061612:	46c0      	nop			@ (mov r8, r8)

10061614 <__arm_cp.0_0>:
10061614:	1005ef4d 	.word	0x1005ef4d

10061618 <__arm_cp.0_1>:
10061618:	200011c0 	.word	0x200011c0

1006161c <__arm_cp.0_2>:
1006161c:	20001188 	.word	0x20001188

10061620 <__arm_cp.0_3>:
10061620:	20001184 	.word	0x20001184

10061624 <__arm_cp.0_4>:
10061624:	07071007 	.word	0x07071007

10061628 <smp_sap_aci_set_io_capabilities>:
10061628:	b510      	push	{r4, lr}
1006162a:	4604      	mov	r4, r0
1006162c:	f000 f80c 	bl	10061648 <smp_check_is_any_pairing_ongoing>
10061630:	2800      	cmp	r0, #0
10061632:	d001      	beq.n	10061638 <smp_sap_aci_set_io_capabilities+0x10>
10061634:	200c      	movs	r0, #12
10061636:	bd10      	pop	{r4, pc}
10061638:	4802      	ldr	r0, [pc, #8]	@ (10061644 <__arm_cp.2_0>)
1006163a:	6800      	ldr	r0, [r0, #0]
1006163c:	2140      	movs	r1, #64	@ 0x40
1006163e:	5444      	strb	r4, [r0, r1]
10061640:	2000      	movs	r0, #0
10061642:	bd10      	pop	{r4, pc}

10061644 <__arm_cp.2_0>:
10061644:	200011c0 	.word	0x200011c0

10061648 <smp_check_is_any_pairing_ongoing>:
10061648:	b570      	push	{r4, r5, r6, lr}
1006164a:	4810      	ldr	r0, [pc, #64]	@ (1006168c <__arm_cp.3_0>)
1006164c:	6800      	ldr	r0, [r0, #0]
1006164e:	2134      	movs	r1, #52	@ 0x34
10061650:	5c40      	ldrb	r0, [r0, r1]
10061652:	2170      	movs	r1, #112	@ 0x70
10061654:	4341      	muls	r1, r0
10061656:	480e      	ldr	r0, [pc, #56]	@ (10061690 <__arm_cp.3_1>)
10061658:	6802      	ldr	r2, [r0, #0]
1006165a:	32a4      	adds	r2, #164	@ 0xa4
1006165c:	2000      	movs	r0, #0
1006165e:	4603      	mov	r3, r0
10061660:	4299      	cmp	r1, r3
10061662:	d012      	beq.n	1006168a <smp_check_is_any_pairing_ongoing+0x42>
10061664:	6814      	ldr	r4, [r2, #0]
10061666:	18e5      	adds	r5, r4, r3
10061668:	7aac      	ldrb	r4, [r5, #10]
1006166a:	2660      	movs	r6, #96	@ 0x60
1006166c:	5dad      	ldrb	r5, [r5, r6]
1006166e:	07ed      	lsls	r5, r5, #31
10061670:	d104      	bne.n	1006167c <smp_check_is_any_pairing_ongoing+0x34>
10061672:	3460      	adds	r4, #96	@ 0x60
10061674:	b2e4      	uxtb	r4, r4
10061676:	2c51      	cmp	r4, #81	@ 0x51
10061678:	d204      	bcs.n	10061684 <smp_check_is_any_pairing_ongoing+0x3c>
1006167a:	e005      	b.n	10061688 <smp_check_is_any_pairing_ongoing+0x40>
1006167c:	3450      	adds	r4, #80	@ 0x50
1006167e:	b2e4      	uxtb	r4, r4
10061680:	2c41      	cmp	r4, #65	@ 0x41
10061682:	d301      	bcc.n	10061688 <smp_check_is_any_pairing_ongoing+0x40>
10061684:	3370      	adds	r3, #112	@ 0x70
10061686:	e7eb      	b.n	10061660 <smp_check_is_any_pairing_ongoing+0x18>
10061688:	2001      	movs	r0, #1
1006168a:	bd70      	pop	{r4, r5, r6, pc}

1006168c <__arm_cp.3_0>:
1006168c:	20001120 	.word	0x20001120

10061690 <__arm_cp.3_1>:
10061690:	200011c0 	.word	0x200011c0

10061694 <smp_sap_aci_set_authentication_req>:
10061694:	b510      	push	{r4, lr}
10061696:	4604      	mov	r4, r0
10061698:	f7ff ffd6 	bl	10061648 <smp_check_is_any_pairing_ongoing>
1006169c:	7861      	ldrb	r1, [r4, #1]
1006169e:	2901      	cmp	r1, #1
100616a0:	d103      	bne.n	100616aa <smp_sap_aci_set_authentication_req+0x16>
100616a2:	2800      	cmp	r0, #0
100616a4:	d105      	bne.n	100616b2 <smp_sap_aci_set_authentication_req+0x1e>
100616a6:	4602      	mov	r2, r0
100616a8:	e004      	b.n	100616b4 <smp_sap_aci_set_authentication_req+0x20>
100616aa:	2800      	cmp	r0, #0
100616ac:	d00f      	beq.n	100616ce <smp_sap_aci_set_authentication_req+0x3a>
100616ae:	220c      	movs	r2, #12
100616b0:	e016      	b.n	100616e0 <smp_sap_aci_set_authentication_req+0x4c>
100616b2:	220c      	movs	r2, #12
100616b4:	490b      	ldr	r1, [pc, #44]	@ (100616e4 <__arm_cp.4_0>)
100616b6:	6809      	ldr	r1, [r1, #0]
100616b8:	2340      	movs	r3, #64	@ 0x40
100616ba:	5ccb      	ldrb	r3, [r1, r3]
100616bc:	2b03      	cmp	r3, #3
100616be:	d101      	bne.n	100616c4 <smp_sap_aci_set_authentication_req+0x30>
100616c0:	226e      	movs	r2, #110	@ 0x6e
100616c2:	43d2      	mvns	r2, r2
100616c4:	2b03      	cmp	r3, #3
100616c6:	d00b      	beq.n	100616e0 <smp_sap_aci_set_authentication_req+0x4c>
100616c8:	2800      	cmp	r0, #0
100616ca:	d002      	beq.n	100616d2 <smp_sap_aci_set_authentication_req+0x3e>
100616cc:	e008      	b.n	100616e0 <smp_sap_aci_set_authentication_req+0x4c>
100616ce:	4805      	ldr	r0, [pc, #20]	@ (100616e4 <__arm_cp.4_0>)
100616d0:	6801      	ldr	r1, [r0, #0]
100616d2:	3130      	adds	r1, #48	@ 0x30
100616d4:	2210      	movs	r2, #16
100616d6:	4608      	mov	r0, r1
100616d8:	4621      	mov	r1, r4
100616da:	f7e4 fbcd 	bl	10045e78 <BLEPLAT_MemCpy>
100616de:	2200      	movs	r2, #0
100616e0:	b2d0      	uxtb	r0, r2
100616e2:	bd10      	pop	{r4, pc}

100616e4 <__arm_cp.4_0>:
100616e4:	200011c0 	.word	0x200011c0

100616e8 <smp_sap_aci_passkey_response>:
100616e8:	b510      	push	{r4, lr}
100616ea:	460c      	mov	r4, r1
100616ec:	f7ff f88e 	bl	1006080c <smp_get_remote_device_list_item>
100616f0:	2800      	cmp	r0, #0
100616f2:	d010      	beq.n	10061716 <smp_sap_aci_passkey_response+0x2e>
100616f4:	7cc1      	ldrb	r1, [r0, #19]
100616f6:	2902      	cmp	r1, #2
100616f8:	d10f      	bne.n	1006171a <smp_sap_aci_passkey_response+0x32>
100616fa:	4909      	ldr	r1, [pc, #36]	@ (10061720 <__arm_cp.5_0>)
100616fc:	6809      	ldr	r1, [r1, #0]
100616fe:	638c      	str	r4, [r1, #56]	@ 0x38
10061700:	7bc1      	ldrb	r1, [r0, #15]
10061702:	2210      	movs	r2, #16
10061704:	430a      	orrs	r2, r1
10061706:	73c2      	strb	r2, [r0, #15]
10061708:	200e      	movs	r0, #14
1006170a:	f000 fcc7 	bl	1006209c <tsk_notify_idx>
1006170e:	f7e2 fbc6 	bl	10043e9e <BLE_STACK_ProcessRequest>
10061712:	2000      	movs	r0, #0
10061714:	bd10      	pop	{r4, pc}
10061716:	2002      	movs	r0, #2
10061718:	bd10      	pop	{r4, pc}
1006171a:	200c      	movs	r0, #12
1006171c:	bd10      	pop	{r4, pc}
1006171e:	46c0      	nop			@ (mov r8, r8)

10061720 <__arm_cp.5_0>:
10061720:	200011c0 	.word	0x200011c0

10061724 <smp_sap_aci_scp_numeric_comparison_response>:
10061724:	b510      	push	{r4, lr}
10061726:	460c      	mov	r4, r1
10061728:	f7ff f870 	bl	1006080c <smp_get_remote_device_list_item>
1006172c:	2800      	cmp	r0, #0
1006172e:	d007      	beq.n	10061740 <smp_sap_aci_scp_numeric_comparison_response+0x1c>
10061730:	7a81      	ldrb	r1, [r0, #10]
10061732:	29c1      	cmp	r1, #193	@ 0xc1
10061734:	d106      	bne.n	10061744 <smp_sap_aci_scp_numeric_comparison_response+0x20>
10061736:	2c00      	cmp	r4, #0
10061738:	d006      	beq.n	10061748 <smp_sap_aci_scp_numeric_comparison_response+0x24>
1006173a:	21ba      	movs	r1, #186	@ 0xba
1006173c:	7281      	strb	r1, [r0, #10]
1006173e:	e008      	b.n	10061752 <smp_sap_aci_scp_numeric_comparison_response+0x2e>
10061740:	2002      	movs	r0, #2
10061742:	bd10      	pop	{r4, pc}
10061744:	200c      	movs	r0, #12
10061746:	bd10      	pop	{r4, pc}
10061748:	210c      	movs	r1, #12
1006174a:	2200      	movs	r2, #0
1006174c:	2301      	movs	r3, #1
1006174e:	f004 fbc3 	bl	10065ed8 <smp_pp3_pairing_failed_send>
10061752:	200e      	movs	r0, #14
10061754:	f000 fca2 	bl	1006209c <tsk_notify_idx>
10061758:	f7e2 fba1 	bl	10043e9e <BLE_STACK_ProcessRequest>
1006175c:	2000      	movs	r0, #0
1006175e:	bd10      	pop	{r4, pc}

10061760 <smp_sap_hci_le_connection_complete_evt_hndl>:
10061760:	b5f0      	push	{r4, r5, r6, r7, lr}
10061762:	b089      	sub	sp, #36	@ 0x24
10061764:	9304      	str	r3, [sp, #16]
10061766:	4615      	mov	r5, r2
10061768:	9105      	str	r1, [sp, #20]
1006176a:	4607      	mov	r7, r0
1006176c:	ae06      	add	r6, sp, #24
1006176e:	ac08      	add	r4, sp, #32
10061770:	4630      	mov	r0, r6
10061772:	4621      	mov	r1, r4
10061774:	f7f2 ffbe 	bl	100546f4 <GAP_get_current_address>
10061778:	7822      	ldrb	r2, [r4, #0]
1006177a:	2000      	movs	r0, #0
1006177c:	9500      	str	r5, [sp, #0]
1006177e:	9904      	ldr	r1, [sp, #16]
10061780:	9101      	str	r1, [sp, #4]
10061782:	9002      	str	r0, [sp, #8]
10061784:	4638      	mov	r0, r7
10061786:	9905      	ldr	r1, [sp, #20]
10061788:	4633      	mov	r3, r6
1006178a:	f000 f803 	bl	10061794 <smp_connection_complete_handler>
1006178e:	b009      	add	sp, #36	@ 0x24
10061790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10061794 <smp_connection_complete_handler>:
10061794:	b5f0      	push	{r4, r5, r6, r7, lr}
10061796:	b087      	sub	sp, #28
10061798:	9302      	str	r3, [sp, #8]
1006179a:	9200      	str	r2, [sp, #0]
1006179c:	9101      	str	r1, [sp, #4]
1006179e:	493a      	ldr	r1, [pc, #232]	@ (10061888 <__arm_cp.1_0>)
100617a0:	6809      	ldr	r1, [r1, #0]
100617a2:	2334      	movs	r3, #52	@ 0x34
100617a4:	5cca      	ldrb	r2, [r1, r3]
100617a6:	2770      	movs	r7, #112	@ 0x70
100617a8:	4357      	muls	r7, r2
100617aa:	2500      	movs	r5, #0
100617ac:	43ec      	mvns	r4, r5
100617ae:	4b37      	ldr	r3, [pc, #220]	@ (1006188c <__arm_cp.1_1>)
100617b0:	681e      	ldr	r6, [r3, #0]
100617b2:	36a4      	adds	r6, #164	@ 0xa4
100617b4:	990c      	ldr	r1, [sp, #48]	@ 0x30
100617b6:	9106      	str	r1, [sp, #24]
100617b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
100617ba:	9103      	str	r1, [sp, #12]
100617bc:	990d      	ldr	r1, [sp, #52]	@ 0x34
100617be:	9105      	str	r1, [sp, #20]
100617c0:	9404      	str	r4, [sp, #16]
100617c2:	42af      	cmp	r7, r5
100617c4:	d05e      	beq.n	10061884 <smp_connection_complete_handler+0xf0>
100617c6:	6833      	ldr	r3, [r6, #0]
100617c8:	1959      	adds	r1, r3, r5
100617ca:	8909      	ldrh	r1, [r1, #8]
100617cc:	3570      	adds	r5, #112	@ 0x70
100617ce:	1c64      	adds	r4, r4, #1
100617d0:	2900      	cmp	r1, #0
100617d2:	d1f6      	bne.n	100617c2 <smp_connection_complete_handler+0x2e>
100617d4:	4294      	cmp	r4, r2
100617d6:	d255      	bcs.n	10061884 <smp_connection_complete_handler+0xf0>
100617d8:	195f      	adds	r7, r3, r5
100617da:	4639      	mov	r1, r7
100617dc:	3968      	subs	r1, #104	@ 0x68
100617de:	8008      	strh	r0, [r1, #0]
100617e0:	4638      	mov	r0, r7
100617e2:	3870      	subs	r0, #112	@ 0x70
100617e4:	2105      	movs	r1, #5
100617e6:	7001      	strb	r1, [r0, #0]
100617e8:	4638      	mov	r0, r7
100617ea:	380f      	subs	r0, #15
100617ec:	9900      	ldr	r1, [sp, #0]
100617ee:	7001      	strb	r1, [r0, #0]
100617f0:	4638      	mov	r0, r7
100617f2:	3810      	subs	r0, #16
100617f4:	9000      	str	r0, [sp, #0]
100617f6:	9901      	ldr	r1, [sp, #4]
100617f8:	7001      	strb	r1, [r0, #0]
100617fa:	4638      	mov	r0, r7
100617fc:	380e      	subs	r0, #14
100617fe:	2206      	movs	r2, #6
10061800:	4b23      	ldr	r3, [pc, #140]	@ (10061890 <__arm_cp.1_2>)
10061802:	9902      	ldr	r1, [sp, #8]
10061804:	4616      	mov	r6, r2
10061806:	4798      	blx	r3
10061808:	20fe      	movs	r0, #254	@ 0xfe
1006180a:	9a06      	ldr	r2, [sp, #24]
1006180c:	4010      	ands	r0, r2
1006180e:	2101      	movs	r1, #1
10061810:	400a      	ands	r2, r1
10061812:	2802      	cmp	r0, #2
10061814:	d000      	beq.n	10061818 <smp_connection_complete_handler+0x84>
10061816:	4611      	mov	r1, r2
10061818:	9206      	str	r2, [sp, #24]
1006181a:	463c      	mov	r4, r7
1006181c:	3c6f      	subs	r4, #111	@ 0x6f
1006181e:	7021      	strb	r1, [r4, #0]
10061820:	2802      	cmp	r0, #2
10061822:	9805      	ldr	r0, [sp, #20]
10061824:	9903      	ldr	r1, [sp, #12]
10061826:	d000      	beq.n	1006182a <smp_connection_complete_handler+0x96>
10061828:	4601      	mov	r1, r0
1006182a:	463d      	mov	r5, r7
1006182c:	3d6e      	subs	r5, #110	@ 0x6e
1006182e:	4628      	mov	r0, r5
10061830:	4632      	mov	r2, r6
10061832:	4b17      	ldr	r3, [pc, #92]	@ (10061890 <__arm_cp.1_2>)
10061834:	4798      	blx	r3
10061836:	4638      	mov	r0, r7
10061838:	3817      	subs	r0, #23
1006183a:	9906      	ldr	r1, [sp, #24]
1006183c:	7001      	strb	r1, [r0, #0]
1006183e:	4638      	mov	r0, r7
10061840:	3816      	subs	r0, #22
10061842:	9905      	ldr	r1, [sp, #20]
10061844:	4632      	mov	r2, r6
10061846:	4b12      	ldr	r3, [pc, #72]	@ (10061890 <__arm_cp.1_2>)
10061848:	4798      	blx	r3
1006184a:	4638      	mov	r0, r7
1006184c:	3858      	subs	r0, #88	@ 0x58
1006184e:	2100      	movs	r1, #0
10061850:	2204      	movs	r2, #4
10061852:	f7e4 fb21 	bl	10045e98 <BLEPLAT_MemSet>
10061856:	1f38      	subs	r0, r7, #4
10061858:	3f66      	subs	r7, #102	@ 0x66
1006185a:	2110      	movs	r1, #16
1006185c:	7039      	strb	r1, [r7, #0]
1006185e:	9904      	ldr	r1, [sp, #16]
10061860:	6001      	str	r1, [r0, #0]
10061862:	7820      	ldrb	r0, [r4, #0]
10061864:	4629      	mov	r1, r5
10061866:	f004 fec1 	bl	100665ec <smp_cmn_is_peer_rejectlisted>
1006186a:	2800      	cmp	r0, #0
1006186c:	d005      	beq.n	1006187a <smp_connection_complete_handler+0xe6>
1006186e:	9800      	ldr	r0, [sp, #0]
10061870:	7800      	ldrb	r0, [r0, #0]
10061872:	07c0      	lsls	r0, r0, #31
10061874:	d001      	beq.n	1006187a <smp_connection_complete_handler+0xe6>
10061876:	20fb      	movs	r0, #251	@ 0xfb
10061878:	7038      	strb	r0, [r7, #0]
1006187a:	200e      	movs	r0, #14
1006187c:	f000 fc0e 	bl	1006209c <tsk_notify_idx>
10061880:	f7e2 fb0d 	bl	10043e9e <BLE_STACK_ProcessRequest>
10061884:	b007      	add	sp, #28
10061886:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061888 <__arm_cp.1_0>:
10061888:	20001120 	.word	0x20001120

1006188c <__arm_cp.1_1>:
1006188c:	200011c0 	.word	0x200011c0

10061890 <__arm_cp.1_2>:
10061890:	10045e79 	.word	0x10045e79

10061894 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>:
10061894:	b5f0      	push	{r4, r5, r6, r7, lr}
10061896:	b089      	sub	sp, #36	@ 0x24
10061898:	9304      	str	r3, [sp, #16]
1006189a:	4617      	mov	r7, r2
1006189c:	9105      	str	r1, [sp, #20]
1006189e:	4606      	mov	r6, r0
100618a0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
100618a2:	4620      	mov	r0, r4
100618a4:	f7fc fe64 	bl	1005e570 <Is_Address_Initialized>
100618a8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
100618aa:	2800      	cmp	r0, #0
100618ac:	d008      	beq.n	100618c0 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x2c>
100618ae:	a807      	add	r0, sp, #28
100618b0:	2206      	movs	r2, #6
100618b2:	4621      	mov	r1, r4
100618b4:	f7e4 fae0 	bl	10045e78 <BLEPLAT_MemCpy>
100618b8:	a806      	add	r0, sp, #24
100618ba:	2201      	movs	r2, #1
100618bc:	7002      	strb	r2, [r0, #0]
100618be:	e005      	b.n	100618cc <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x38>
100618c0:	a807      	add	r0, sp, #28
100618c2:	ac06      	add	r4, sp, #24
100618c4:	4621      	mov	r1, r4
100618c6:	f7f2 ff15 	bl	100546f4 <GAP_get_current_address>
100618ca:	7822      	ldrb	r2, [r4, #0]
100618cc:	9700      	str	r7, [sp, #0]
100618ce:	9804      	ldr	r0, [sp, #16]
100618d0:	9001      	str	r0, [sp, #4]
100618d2:	9502      	str	r5, [sp, #8]
100618d4:	ab07      	add	r3, sp, #28
100618d6:	4630      	mov	r0, r6
100618d8:	9905      	ldr	r1, [sp, #20]
100618da:	f7ff ff5b 	bl	10061794 <smp_connection_complete_handler>
100618de:	b009      	add	sp, #36	@ 0x24
100618e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100618e4 <smp_sap_hci_le_long_term_key_request_evt_hndl>:
100618e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100618e6:	b089      	sub	sp, #36	@ 0x24
100618e8:	4615      	mov	r5, r2
100618ea:	460e      	mov	r6, r1
100618ec:	f7fe ff8e 	bl	1006080c <smp_get_remote_device_list_item>
100618f0:	2800      	cmp	r0, #0
100618f2:	d070      	beq.n	100619d6 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
100618f4:	4604      	mov	r4, r0
100618f6:	7a80      	ldrb	r0, [r0, #10]
100618f8:	28bc      	cmp	r0, #188	@ 0xbc
100618fa:	d106      	bne.n	1006190a <smp_sap_hci_le_long_term_key_request_evt_hndl+0x26>
100618fc:	8927      	ldrh	r7, [r4, #8]
100618fe:	a808      	add	r0, sp, #32
10061900:	2100      	movs	r1, #0
10061902:	8001      	strh	r1, [r0, #0]
10061904:	4626      	mov	r6, r4
10061906:	3628      	adds	r6, #40	@ 0x28
10061908:	e056      	b.n	100619b8 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd4>
1006190a:	4627      	mov	r7, r4
1006190c:	3730      	adds	r7, #48	@ 0x30
1006190e:	7de1      	ldrb	r1, [r4, #23]
10061910:	0709      	lsls	r1, r1, #28
10061912:	d409      	bmi.n	10061928 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x44>
10061914:	4620      	mov	r0, r4
10061916:	3028      	adds	r0, #40	@ 0x28
10061918:	2208      	movs	r2, #8
1006191a:	4631      	mov	r1, r6
1006191c:	f7e4 faac 	bl	10045e78 <BLEPLAT_MemCpy>
10061920:	703d      	strb	r5, [r7, #0]
10061922:	0a28      	lsrs	r0, r5, #8
10061924:	7078      	strb	r0, [r7, #1]
10061926:	7aa0      	ldrb	r0, [r4, #10]
10061928:	8921      	ldrh	r1, [r4, #8]
1006192a:	9102      	str	r1, [sp, #8]
1006192c:	a908      	add	r1, sp, #32
1006192e:	2200      	movs	r2, #0
10061930:	800a      	strh	r2, [r1, #0]
10061932:	4626      	mov	r6, r4
10061934:	3628      	adds	r6, #40	@ 0x28
10061936:	28bc      	cmp	r0, #188	@ 0xbc
10061938:	d03d      	beq.n	100619b6 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
1006193a:	4625      	mov	r5, r4
1006193c:	351c      	adds	r5, #28
1006193e:	28f1      	cmp	r0, #241	@ 0xf1
10061940:	d10f      	bne.n	10061962 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x7e>
10061942:	7de0      	ldrb	r0, [r4, #23]
10061944:	0700      	lsls	r0, r0, #28
10061946:	d436      	bmi.n	100619b6 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
10061948:	aa07      	add	r2, sp, #28
1006194a:	9201      	str	r2, [sp, #4]
1006194c:	4628      	mov	r0, r5
1006194e:	4631      	mov	r1, r6
10061950:	f7fe f888 	bl	1005fa64 <smp_sap_crt_generate_ediv>
10061954:	2202      	movs	r2, #2
10061956:	9801      	ldr	r0, [sp, #4]
10061958:	4639      	mov	r1, r7
1006195a:	f7e4 faad 	bl	10045eb8 <BLEPLAT_MemCmp>
1006195e:	2800      	cmp	r0, #0
10061960:	d021      	beq.n	100619a6 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10061962:	4638      	mov	r0, r7
10061964:	4631      	mov	r1, r6
10061966:	4622      	mov	r2, r4
10061968:	f004 f9eb 	bl	10065d42 <smp_dep_sdb_find_matching_ltk_read_record>
1006196c:	2800      	cmp	r0, #0
1006196e:	d01a      	beq.n	100619a6 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10061970:	9d02      	ldr	r5, [sp, #8]
10061972:	4628      	mov	r0, r5
10061974:	f7f6 f819 	bl	100579aa <hci_le_long_term_key_request_negative_reply_api>
10061978:	7e20      	ldrb	r0, [r4, #24]
1006197a:	0780      	lsls	r0, r0, #30
1006197c:	d00c      	beq.n	10061998 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xb4>
1006197e:	4628      	mov	r0, r5
10061980:	f7fe ff24 	bl	100607cc <smp_get_remote_device_list_index>
10061984:	4602      	mov	r2, r0
10061986:	2001      	movs	r0, #1
10061988:	2100      	movs	r1, #0
1006198a:	4b15      	ldr	r3, [pc, #84]	@ (100619e0 <__arm_cp.3_1>)
1006198c:	f7ff fd9e 	bl	100614cc <smp_timer_reset>
10061990:	7e20      	ldrb	r0, [r4, #24]
10061992:	21fc      	movs	r1, #252	@ 0xfc
10061994:	4001      	ands	r1, r0
10061996:	7621      	strb	r1, [r4, #24]
10061998:	2002      	movs	r0, #2
1006199a:	2203      	movs	r2, #3
1006199c:	2300      	movs	r3, #0
1006199e:	4629      	mov	r1, r5
100619a0:	f002 f804 	bl	100639ac <aci_gap_pairing_complete_event_push_noinline>
100619a4:	e017      	b.n	100619d6 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
100619a6:	480d      	ldr	r0, [pc, #52]	@ (100619dc <__arm_cp.3_0>)
100619a8:	6800      	ldr	r0, [r0, #0]
100619aa:	3008      	adds	r0, #8
100619ac:	aa08      	add	r2, sp, #32
100619ae:	4629      	mov	r1, r5
100619b0:	4633      	mov	r3, r6
100619b2:	f7fe f88d 	bl	1005fad0 <smp_crt_diversify>
100619b6:	9f02      	ldr	r7, [sp, #8]
100619b8:	ad03      	add	r5, sp, #12
100619ba:	2100      	movs	r1, #0
100619bc:	2210      	movs	r2, #16
100619be:	4628      	mov	r0, r5
100619c0:	f7e4 fa6a 	bl	10045e98 <BLEPLAT_MemSet>
100619c4:	7c22      	ldrb	r2, [r4, #16]
100619c6:	4628      	mov	r0, r5
100619c8:	4631      	mov	r1, r6
100619ca:	f7e4 fa55 	bl	10045e78 <BLEPLAT_MemCpy>
100619ce:	4638      	mov	r0, r7
100619d0:	4629      	mov	r1, r5
100619d2:	f7f5 ffdb 	bl	1005798c <hci_le_long_term_key_request_reply_api>
100619d6:	b009      	add	sp, #36	@ 0x24
100619d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100619da:	46c0      	nop			@ (mov r8, r8)

100619dc <__arm_cp.3_0>:
100619dc:	20001120 	.word	0x20001120

100619e0 <__arm_cp.3_1>:
100619e0:	00007530 	.word	0x00007530

100619e4 <smp_sap_hci_encryption_change_evt_hndl>:
100619e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100619e6:	460e      	mov	r6, r1
100619e8:	4605      	mov	r5, r0
100619ea:	4610      	mov	r0, r2
100619ec:	f7fe ff0e 	bl	1006080c <smp_get_remote_device_list_item>
100619f0:	2800      	cmp	r0, #0
100619f2:	d056      	beq.n	10061aa2 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
100619f4:	4604      	mov	r4, r0
100619f6:	4607      	mov	r7, r0
100619f8:	2e00      	cmp	r6, #0
100619fa:	d00b      	beq.n	10061a14 <smp_sap_hci_encryption_change_evt_hndl+0x30>
100619fc:	2000      	movs	r0, #0
100619fe:	72b8      	strb	r0, [r7, #10]
10061a00:	3408      	adds	r4, #8
10061a02:	2201      	movs	r2, #1
10061a04:	2d06      	cmp	r5, #6
10061a06:	d132      	bne.n	10061a6e <smp_sap_hci_encryption_change_evt_hndl+0x8a>
10061a08:	8939      	ldrh	r1, [r7, #8]
10061a0a:	4615      	mov	r5, r2
10061a0c:	2e06      	cmp	r6, #6
10061a0e:	d00e      	beq.n	10061a2e <smp_sap_hci_encryption_change_evt_hndl+0x4a>
10061a10:	2205      	movs	r2, #5
10061a12:	e00d      	b.n	10061a30 <smp_sap_hci_encryption_change_evt_hndl+0x4c>
10061a14:	7af9      	ldrb	r1, [r7, #11]
10061a16:	2001      	movs	r0, #1
10061a18:	4308      	orrs	r0, r1
10061a1a:	72f8      	strb	r0, [r7, #11]
10061a1c:	7cf9      	ldrb	r1, [r7, #19]
10061a1e:	1e89      	subs	r1, r1, #2
10061a20:	2902      	cmp	r1, #2
10061a22:	d810      	bhi.n	10061a46 <smp_sap_hci_encryption_change_evt_hndl+0x62>
10061a24:	7df9      	ldrb	r1, [r7, #23]
10061a26:	0709      	lsls	r1, r1, #28
10061a28:	d508      	bpl.n	10061a3c <smp_sap_hci_encryption_change_evt_hndl+0x58>
10061a2a:	2104      	movs	r1, #4
10061a2c:	e007      	b.n	10061a3e <smp_sap_hci_encryption_change_evt_hndl+0x5a>
10061a2e:	2204      	movs	r2, #4
10061a30:	2002      	movs	r0, #2
10061a32:	2300      	movs	r3, #0
10061a34:	f001 ffba 	bl	100639ac <aci_gap_pairing_complete_event_push_noinline>
10061a38:	462a      	mov	r2, r5
10061a3a:	e018      	b.n	10061a6e <smp_sap_hci_encryption_change_evt_hndl+0x8a>
10061a3c:	2102      	movs	r1, #2
10061a3e:	22f9      	movs	r2, #249	@ 0xf9
10061a40:	4010      	ands	r0, r2
10061a42:	1840      	adds	r0, r0, r1
10061a44:	72f8      	strb	r0, [r7, #11]
10061a46:	7ab8      	ldrb	r0, [r7, #10]
10061a48:	28ad      	cmp	r0, #173	@ 0xad
10061a4a:	d005      	beq.n	10061a58 <smp_sap_hci_encryption_change_evt_hndl+0x74>
10061a4c:	28ae      	cmp	r0, #174	@ 0xae
10061a4e:	d005      	beq.n	10061a5c <smp_sap_hci_encryption_change_evt_hndl+0x78>
10061a50:	28bc      	cmp	r0, #188	@ 0xbc
10061a52:	d127      	bne.n	10061aa4 <smp_sap_hci_encryption_change_evt_hndl+0xc0>
10061a54:	20bf      	movs	r0, #191	@ 0xbf
10061a56:	e002      	b.n	10061a5e <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10061a58:	20af      	movs	r0, #175	@ 0xaf
10061a5a:	e000      	b.n	10061a5e <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10061a5c:	20f0      	movs	r0, #240	@ 0xf0
10061a5e:	72b8      	strb	r0, [r7, #10]
10061a60:	3408      	adds	r4, #8
10061a62:	200e      	movs	r0, #14
10061a64:	f000 fb1a 	bl	1006209c <tsk_notify_idx>
10061a68:	f7e2 fa19 	bl	10043e9e <BLE_STACK_ProcessRequest>
10061a6c:	2200      	movs	r2, #0
10061a6e:	2060      	movs	r0, #96	@ 0x60
10061a70:	5c38      	ldrb	r0, [r7, r0]
10061a72:	07c0      	lsls	r0, r0, #31
10061a74:	d10b      	bne.n	10061a8e <smp_sap_hci_encryption_change_evt_hndl+0xaa>
10061a76:	7eb8      	ldrb	r0, [r7, #26]
10061a78:	06c1      	lsls	r1, r0, #27
10061a7a:	d505      	bpl.n	10061a88 <smp_sap_hci_encryption_change_evt_hndl+0xa4>
10061a7c:	21ef      	movs	r1, #239	@ 0xef
10061a7e:	4001      	ands	r1, r0
10061a80:	76b9      	strb	r1, [r7, #26]
10061a82:	b241      	sxtb	r1, r0
10061a84:	2900      	cmp	r1, #0
10061a86:	d418      	bmi.n	10061aba <smp_sap_hci_encryption_change_evt_hndl+0xd6>
10061a88:	2a00      	cmp	r2, #0
10061a8a:	d119      	bne.n	10061ac0 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10061a8c:	e009      	b.n	10061aa2 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
10061a8e:	7e38      	ldrb	r0, [r7, #24]
10061a90:	21fc      	movs	r1, #252	@ 0xfc
10061a92:	4001      	ands	r1, r0
10061a94:	7639      	strb	r1, [r7, #24]
10061a96:	2103      	movs	r1, #3
10061a98:	4001      	ands	r1, r0
10061a9a:	1e48      	subs	r0, r1, #1
10061a9c:	4181      	sbcs	r1, r0
10061a9e:	430a      	orrs	r2, r1
10061aa0:	d10e      	bne.n	10061ac0 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10061aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061aa4:	2d06      	cmp	r5, #6
10061aa6:	d1db      	bne.n	10061a60 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10061aa8:	28f1      	cmp	r0, #241	@ 0xf1
10061aaa:	d1d9      	bne.n	10061a60 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10061aac:	8939      	ldrh	r1, [r7, #8]
10061aae:	2002      	movs	r0, #2
10061ab0:	2200      	movs	r2, #0
10061ab2:	4613      	mov	r3, r2
10061ab4:	f001 ff7a 	bl	100639ac <aci_gap_pairing_complete_event_push_noinline>
10061ab8:	e7d2      	b.n	10061a60 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10061aba:	216f      	movs	r1, #111	@ 0x6f
10061abc:	4008      	ands	r0, r1
10061abe:	76b8      	strb	r0, [r7, #26]
10061ac0:	8820      	ldrh	r0, [r4, #0]
10061ac2:	f7fe fe83 	bl	100607cc <smp_get_remote_device_list_index>
10061ac6:	4602      	mov	r2, r0
10061ac8:	2001      	movs	r0, #1
10061aca:	2100      	movs	r1, #0
10061acc:	4b01      	ldr	r3, [pc, #4]	@ (10061ad4 <__arm_cp.4_0>)
10061ace:	f7ff fcfd 	bl	100614cc <smp_timer_reset>
10061ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061ad4 <__arm_cp.4_0>:
10061ad4:	00007530 	.word	0x00007530

10061ad8 <smp_sap_hci_disconnection_complete_evt_hndl>:
10061ad8:	b510      	push	{r4, lr}
10061ada:	f7fe fe97 	bl	1006080c <smp_get_remote_device_list_item>
10061ade:	2800      	cmp	r0, #0
10061ae0:	d025      	beq.n	10061b2e <smp_sap_hci_disconnection_complete_evt_hndl+0x56>
10061ae2:	4604      	mov	r4, r0
10061ae4:	8900      	ldrh	r0, [r0, #8]
10061ae6:	f7fe fe71 	bl	100607cc <smp_get_remote_device_list_index>
10061aea:	4602      	mov	r2, r0
10061aec:	2001      	movs	r0, #1
10061aee:	2100      	movs	r1, #0
10061af0:	4b0f      	ldr	r3, [pc, #60]	@ (10061b30 <__arm_cp.5_0>)
10061af2:	f7ff fceb 	bl	100614cc <smp_timer_reset>
10061af6:	8920      	ldrh	r0, [r4, #8]
10061af8:	f7ff fcb0 	bl	1006145c <smp_rxp_flush_packet_queues>
10061afc:	2060      	movs	r0, #96	@ 0x60
10061afe:	5c20      	ldrb	r0, [r4, r0]
10061b00:	07c0      	lsls	r0, r0, #31
10061b02:	7aa0      	ldrb	r0, [r4, #10]
10061b04:	d104      	bne.n	10061b10 <smp_sap_hci_disconnection_complete_evt_hndl+0x38>
10061b06:	3060      	adds	r0, #96	@ 0x60
10061b08:	b2c0      	uxtb	r0, r0
10061b0a:	2851      	cmp	r0, #81	@ 0x51
10061b0c:	d304      	bcc.n	10061b18 <smp_sap_hci_disconnection_complete_evt_hndl+0x40>
10061b0e:	e007      	b.n	10061b20 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
10061b10:	3050      	adds	r0, #80	@ 0x50
10061b12:	b2c0      	uxtb	r0, r0
10061b14:	2840      	cmp	r0, #64	@ 0x40
10061b16:	d803      	bhi.n	10061b20 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
10061b18:	2102      	movs	r1, #2
10061b1a:	4620      	mov	r0, r4
10061b1c:	f004 f98c 	bl	10065e38 <smp_pp3_pairing_completed_update_stats>
10061b20:	20fe      	movs	r0, #254	@ 0xfe
10061b22:	72a0      	strb	r0, [r4, #10]
10061b24:	200e      	movs	r0, #14
10061b26:	f000 fab9 	bl	1006209c <tsk_notify_idx>
10061b2a:	f7e2 f9b8 	bl	10043e9e <BLE_STACK_ProcessRequest>
10061b2e:	bd10      	pop	{r4, pc}

10061b30 <__arm_cp.5_0>:
10061b30:	00007530 	.word	0x00007530

10061b34 <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl>:
10061b34:	b5b0      	push	{r4, r5, r7, lr}
10061b36:	4a0a      	ldr	r2, [pc, #40]	@ (10061b60 <__arm_cp.1_0>)
10061b38:	6812      	ldr	r2, [r2, #0]
10061b3a:	2342      	movs	r3, #66	@ 0x42
10061b3c:	5cd4      	ldrb	r4, [r2, r3]
10061b3e:	257f      	movs	r5, #127	@ 0x7f
10061b40:	4025      	ands	r5, r4
10061b42:	54d5      	strb	r5, [r2, r3]
10061b44:	2800      	cmp	r0, #0
10061b46:	d002      	beq.n	10061b4e <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl+0x1a>
10061b48:	f7fe ff2a 	bl	100609a0 <smp_scp_execute_public_key_generation_request>
10061b4c:	bdb0      	pop	{r4, r5, r7, pc}
10061b4e:	4608      	mov	r0, r1
10061b50:	f7fe ff42 	bl	100609d8 <smp_scp_set_local_public_key>
10061b54:	200e      	movs	r0, #14
10061b56:	f000 faa1 	bl	1006209c <tsk_notify_idx>
10061b5a:	f7e2 f9a0 	bl	10043e9e <BLE_STACK_ProcessRequest>
10061b5e:	bdb0      	pop	{r4, r5, r7, pc}

10061b60 <__arm_cp.1_0>:
10061b60:	200011c0 	.word	0x200011c0

10061b64 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl>:
10061b64:	b570      	push	{r4, r5, r6, lr}
10061b66:	4e1d      	ldr	r6, [pc, #116]	@ (10061bdc <__arm_cp.2_0>)
10061b68:	6832      	ldr	r2, [r6, #0]
10061b6a:	2542      	movs	r5, #66	@ 0x42
10061b6c:	5d53      	ldrb	r3, [r2, r5]
10061b6e:	06db      	lsls	r3, r3, #27
10061b70:	d528      	bpl.n	10061bc4 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x60>
10061b72:	2800      	cmp	r0, #0
10061b74:	d016      	beq.n	10061ba4 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x40>
10061b76:	32a4      	adds	r2, #164	@ 0xa4
10061b78:	4819      	ldr	r0, [pc, #100]	@ (10061be0 <__arm_cp.2_1>)
10061b7a:	6800      	ldr	r0, [r0, #0]
10061b7c:	2134      	movs	r1, #52	@ 0x34
10061b7e:	5c40      	ldrb	r0, [r0, r1]
10061b80:	2170      	movs	r1, #112	@ 0x70
10061b82:	4341      	muls	r1, r0
10061b84:	2300      	movs	r3, #0
10061b86:	4299      	cmp	r1, r3
10061b88:	d01c      	beq.n	10061bc4 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x60>
10061b8a:	6810      	ldr	r0, [r2, #0]
10061b8c:	2800      	cmp	r0, #0
10061b8e:	d007      	beq.n	10061ba0 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x3c>
10061b90:	18c0      	adds	r0, r0, r3
10061b92:	8904      	ldrh	r4, [r0, #8]
10061b94:	2c00      	cmp	r4, #0
10061b96:	d003      	beq.n	10061ba0 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x3c>
10061b98:	2417      	movs	r4, #23
10061b9a:	5704      	ldrsb	r4, [r0, r4]
10061b9c:	2c00      	cmp	r4, #0
10061b9e:	d412      	bmi.n	10061bc6 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x62>
10061ba0:	3370      	adds	r3, #112	@ 0x70
10061ba2:	e7f0      	b.n	10061b86 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl+0x22>
10061ba4:	2049      	movs	r0, #73	@ 0x49
10061ba6:	0080      	lsls	r0, r0, #2
10061ba8:	1810      	adds	r0, r2, r0
10061baa:	2420      	movs	r4, #32
10061bac:	4622      	mov	r2, r4
10061bae:	f7e4 f963 	bl	10045e78 <BLEPLAT_MemCpy>
10061bb2:	6830      	ldr	r0, [r6, #0]
10061bb4:	5d41      	ldrb	r1, [r0, r5]
10061bb6:	4321      	orrs	r1, r4
10061bb8:	5541      	strb	r1, [r0, r5]
10061bba:	200e      	movs	r0, #14
10061bbc:	f000 fa6e 	bl	1006209c <tsk_notify_idx>
10061bc0:	f7e2 f96d 	bl	10043e9e <BLE_STACK_ProcessRequest>
10061bc4:	bd70      	pop	{r4, r5, r6, pc}
10061bc6:	210b      	movs	r1, #11
10061bc8:	2200      	movs	r2, #0
10061bca:	2301      	movs	r3, #1
10061bcc:	f004 f984 	bl	10065ed8 <smp_pp3_pairing_failed_send>
10061bd0:	6830      	ldr	r0, [r6, #0]
10061bd2:	5d41      	ldrb	r1, [r0, r5]
10061bd4:	22cf      	movs	r2, #207	@ 0xcf
10061bd6:	400a      	ands	r2, r1
10061bd8:	5542      	strb	r2, [r0, r5]
10061bda:	bd70      	pop	{r4, r5, r6, pc}

10061bdc <__arm_cp.2_0>:
10061bdc:	200011c0 	.word	0x200011c0

10061be0 <__arm_cp.2_1>:
10061be0:	20001120 	.word	0x20001120

10061be4 <secure_connections_csr>:
10061be4:	2001      	movs	r0, #1
10061be6:	4770      	bx	lr

10061be8 <smp_sap_l2c_acl_data_hndl>:
10061be8:	b5b0      	push	{r4, r5, r7, lr}
10061bea:	460c      	mov	r4, r1
10061bec:	4605      	mov	r5, r0
10061bee:	8808      	ldrh	r0, [r1, #0]
10061bf0:	f7fe fe0c 	bl	1006080c <smp_get_remote_device_list_item>
10061bf4:	2800      	cmp	r0, #0
10061bf6:	d025      	beq.n	10061c44 <smp_sap_l2c_acl_data_hndl+0x5c>
10061bf8:	2d00      	cmp	r5, #0
10061bfa:	d00f      	beq.n	10061c1c <smp_sap_l2c_acl_data_hndl+0x34>
10061bfc:	2d01      	cmp	r5, #1
10061bfe:	d121      	bne.n	10061c44 <smp_sap_l2c_acl_data_hndl+0x5c>
10061c00:	8860      	ldrh	r0, [r4, #2]
10061c02:	2841      	cmp	r0, #65	@ 0x41
10061c04:	d81e      	bhi.n	10061c44 <smp_sap_l2c_acl_data_hndl+0x5c>
10061c06:	4812      	ldr	r0, [pc, #72]	@ (10061c50 <__arm_cp.0_0>)
10061c08:	6800      	ldr	r0, [r0, #0]
10061c0a:	4621      	mov	r1, r4
10061c0c:	f000 fc3c 	bl	10062488 <ACL_list_insert_tail>
10061c10:	200f      	movs	r0, #15
10061c12:	f000 fa43 	bl	1006209c <tsk_notify_idx>
10061c16:	f7e2 f942 	bl	10043e9e <BLE_STACK_ProcessRequest>
10061c1a:	e016      	b.n	10061c4a <smp_sap_l2c_acl_data_hndl+0x62>
10061c1c:	6861      	ldr	r1, [r4, #4]
10061c1e:	7a09      	ldrb	r1, [r1, #8]
10061c20:	290b      	cmp	r1, #11
10061c22:	d109      	bne.n	10061c38 <smp_sap_l2c_acl_data_hndl+0x50>
10061c24:	7e01      	ldrb	r1, [r0, #24]
10061c26:	2203      	movs	r2, #3
10061c28:	400a      	ands	r2, r1
10061c2a:	2a01      	cmp	r2, #1
10061c2c:	d10a      	bne.n	10061c44 <smp_sap_l2c_acl_data_hndl+0x5c>
10061c2e:	22fc      	movs	r2, #252	@ 0xfc
10061c30:	4011      	ands	r1, r2
10061c32:	1c89      	adds	r1, r1, #2
10061c34:	7601      	strb	r1, [r0, #24]
10061c36:	e005      	b.n	10061c44 <smp_sap_l2c_acl_data_hndl+0x5c>
10061c38:	1f8a      	subs	r2, r1, #6
10061c3a:	b2d2      	uxtb	r2, r2
10061c3c:	2a04      	cmp	r2, #4
10061c3e:	d801      	bhi.n	10061c44 <smp_sap_l2c_acl_data_hndl+0x5c>
10061c40:	f004 fb22 	bl	10066288 <smp_pp3_keys_distribution_signaling_ack>
10061c44:	4620      	mov	r0, r4
10061c46:	f7f1 fa39 	bl	100530bc <ACL_pkt_release>
10061c4a:	2000      	movs	r0, #0
10061c4c:	bdb0      	pop	{r4, r5, r7, pc}
10061c4e:	46c0      	nop			@ (mov r8, r8)

10061c50 <__arm_cp.0_0>:
10061c50:	200011c0 	.word	0x200011c0

10061c54 <smp_get_sec_level_for_mode1>:
10061c54:	b510      	push	{r4, lr}
10061c56:	7ac3      	ldrb	r3, [r0, #11]
10061c58:	075c      	lsls	r4, r3, #29
10061c5a:	0fa2      	lsrs	r2, r4, #30
10061c5c:	d009      	beq.n	10061c72 <smp_get_sec_level_for_mode1+0x1e>
10061c5e:	2201      	movs	r2, #1
10061c60:	4013      	ands	r3, r2
10061c62:	425a      	negs	r2, r3
10061c64:	415a      	adcs	r2, r3
10061c66:	7c03      	ldrb	r3, [r0, #16]
10061c68:	2003      	movs	r0, #3
10061c6a:	2b10      	cmp	r3, #16
10061c6c:	d009      	beq.n	10061c82 <smp_get_sec_level_for_mode1+0x2e>
10061c6e:	4603      	mov	r3, r0
10061c70:	e008      	b.n	10061c84 <smp_get_sec_level_for_mode1+0x30>
10061c72:	07da      	lsls	r2, r3, #31
10061c74:	d10a      	bne.n	10061c8c <smp_get_sec_level_for_mode1+0x38>
10061c76:	7a80      	ldrb	r0, [r0, #10]
10061c78:	2201      	movs	r2, #1
10061c7a:	28f1      	cmp	r0, #241	@ 0xf1
10061c7c:	d009      	beq.n	10061c92 <smp_get_sec_level_for_mode1+0x3e>
10061c7e:	4613      	mov	r3, r2
10061c80:	e008      	b.n	10061c94 <smp_get_sec_level_for_mode1+0x40>
10061c82:	2304      	movs	r3, #4
10061c84:	2c00      	cmp	r4, #0
10061c86:	d405      	bmi.n	10061c94 <smp_get_sec_level_for_mode1+0x40>
10061c88:	4603      	mov	r3, r0
10061c8a:	e003      	b.n	10061c94 <smp_get_sec_level_for_mode1+0x40>
10061c8c:	2302      	movs	r3, #2
10061c8e:	2200      	movs	r2, #0
10061c90:	e000      	b.n	10061c94 <smp_get_sec_level_for_mode1+0x40>
10061c92:	2302      	movs	r3, #2
10061c94:	2a00      	cmp	r2, #0
10061c96:	d101      	bne.n	10061c9c <smp_get_sec_level_for_mode1+0x48>
10061c98:	4618      	mov	r0, r3
10061c9a:	e000      	b.n	10061c9e <smp_get_sec_level_for_mode1+0x4a>
10061c9c:	2001      	movs	r0, #1
10061c9e:	2900      	cmp	r1, #0
10061ca0:	d000      	beq.n	10061ca4 <smp_get_sec_level_for_mode1+0x50>
10061ca2:	4618      	mov	r0, r3
10061ca4:	bd10      	pop	{r4, pc}

10061ca6 <smp_sap_get_security_level>:
10061ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061ca8:	461c      	mov	r4, r3
10061caa:	4616      	mov	r6, r2
10061cac:	460d      	mov	r5, r1
10061cae:	2100      	movs	r1, #0
10061cb0:	7029      	strb	r1, [r5, #0]
10061cb2:	7011      	strb	r1, [r2, #0]
10061cb4:	7019      	strb	r1, [r3, #0]
10061cb6:	f7fe fda9 	bl	1006080c <smp_get_remote_device_list_item>
10061cba:	2800      	cmp	r0, #0
10061cbc:	d017      	beq.n	10061cee <smp_sap_get_security_level+0x48>
10061cbe:	4607      	mov	r7, r0
10061cc0:	2101      	movs	r1, #1
10061cc2:	7029      	strb	r1, [r5, #0]
10061cc4:	7a80      	ldrb	r0, [r0, #10]
10061cc6:	28f1      	cmp	r0, #241	@ 0xf1
10061cc8:	d110      	bne.n	10061cec <smp_sap_get_security_level+0x46>
10061cca:	9100      	str	r1, [sp, #0]
10061ccc:	2100      	movs	r1, #0
10061cce:	4638      	mov	r0, r7
10061cd0:	f7ff ffc0 	bl	10061c54 <smp_get_sec_level_for_mode1>
10061cd4:	7030      	strb	r0, [r6, #0]
10061cd6:	2801      	cmp	r0, #1
10061cd8:	d109      	bne.n	10061cee <smp_sap_get_security_level+0x48>
10061cda:	2002      	movs	r0, #2
10061cdc:	7028      	strb	r0, [r5, #0]
10061cde:	7af9      	ldrb	r1, [r7, #11]
10061ce0:	0749      	lsls	r1, r1, #29
10061ce2:	0f89      	lsrs	r1, r1, #30
10061ce4:	d100      	bne.n	10061ce8 <smp_sap_get_security_level+0x42>
10061ce6:	9800      	ldr	r0, [sp, #0]
10061ce8:	7020      	strb	r0, [r4, #0]
10061cea:	e000      	b.n	10061cee <smp_sap_get_security_level+0x48>
10061cec:	7031      	strb	r1, [r6, #0]
10061cee:	2000      	movs	r0, #0
10061cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061cf2 <smp_sap_get_remote_address_check_addr_type>:
10061cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061cf4:	461c      	mov	r4, r3
10061cf6:	4615      	mov	r5, r2
10061cf8:	460f      	mov	r7, r1
10061cfa:	f7fe fd87 	bl	1006080c <smp_get_remote_device_list_item>
10061cfe:	2800      	cmp	r0, #0
10061d00:	d016      	beq.n	10061d30 <smp_sap_get_remote_address_check_addr_type+0x3e>
10061d02:	4606      	mov	r6, r0
10061d04:	1c81      	adds	r1, r0, #2
10061d06:	2206      	movs	r2, #6
10061d08:	4628      	mov	r0, r5
10061d0a:	f7e4 f8b5 	bl	10045e78 <BLEPLAT_MemCpy>
10061d0e:	7870      	ldrb	r0, [r6, #1]
10061d10:	4669      	mov	r1, sp
10061d12:	7008      	strb	r0, [r1, #0]
10061d14:	2f00      	cmp	r7, #0
10061d16:	d01f      	beq.n	10061d58 <smp_sap_get_remote_address_check_addr_type+0x66>
10061d18:	2800      	cmp	r0, #0
10061d1a:	d01d      	beq.n	10061d58 <smp_sap_get_remote_address_check_addr_type+0x66>
10061d1c:	2801      	cmp	r0, #1
10061d1e:	d109      	bne.n	10061d34 <smp_sap_get_remote_address_check_addr_type+0x42>
10061d20:	79f1      	ldrb	r1, [r6, #7]
10061d22:	098a      	lsrs	r2, r1, #6
10061d24:	2001      	movs	r0, #1
10061d26:	2a02      	cmp	r2, #2
10061d28:	d816      	bhi.n	10061d58 <smp_sap_get_remote_address_check_addr_type+0x66>
10061d2a:	2940      	cmp	r1, #64	@ 0x40
10061d2c:	d203      	bcs.n	10061d36 <smp_sap_get_remote_address_check_addr_type+0x44>
10061d2e:	e013      	b.n	10061d58 <smp_sap_get_remote_address_check_addr_type+0x66>
10061d30:	2002      	movs	r0, #2
10061d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061d34:	79f1      	ldrb	r1, [r6, #7]
10061d36:	20c0      	movs	r0, #192	@ 0xc0
10061d38:	4008      	ands	r0, r1
10061d3a:	2840      	cmp	r0, #64	@ 0x40
10061d3c:	d108      	bne.n	10061d50 <smp_sap_get_remote_address_check_addr_type+0x5e>
10061d3e:	4669      	mov	r1, sp
10061d40:	4630      	mov	r0, r6
10061d42:	462a      	mov	r2, r5
10061d44:	f003 ffe6 	bl	10065d14 <smp_dep_sdb_find_bonding_record_read_address>
10061d48:	2800      	cmp	r0, #0
10061d4a:	d003      	beq.n	10061d54 <smp_sap_get_remote_address_check_addr_type+0x62>
10061d4c:	2081      	movs	r0, #129	@ 0x81
10061d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061d50:	2086      	movs	r0, #134	@ 0x86
10061d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061d54:	4668      	mov	r0, sp
10061d56:	7800      	ldrb	r0, [r0, #0]
10061d58:	7020      	strb	r0, [r4, #0]
10061d5a:	2000      	movs	r0, #0
10061d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061d5e <smp_sap_check_is_peer_device_bonded>:
10061d5e:	b5b0      	push	{r4, r5, r7, lr}
10061d60:	f7fe fd54 	bl	1006080c <smp_get_remote_device_list_item>
10061d64:	2800      	cmp	r0, #0
10061d66:	d011      	beq.n	10061d8c <smp_sap_check_is_peer_device_bonded+0x2e>
10061d68:	4604      	mov	r4, r0
10061d6a:	2500      	movs	r5, #0
10061d6c:	4629      	mov	r1, r5
10061d6e:	f003 ff79 	bl	10065c64 <smp_dep_sdb_find_bonding_record_by_conn_addr>
10061d72:	2800      	cmp	r0, #0
10061d74:	d00b      	beq.n	10061d8e <smp_sap_check_is_peer_device_bonded+0x30>
10061d76:	7aa1      	ldrb	r1, [r4, #10]
10061d78:	29f1      	cmp	r1, #241	@ 0xf1
10061d7a:	d105      	bne.n	10061d88 <smp_sap_check_is_peer_device_bonded+0x2a>
10061d7c:	7ba1      	ldrb	r1, [r4, #14]
10061d7e:	07ca      	lsls	r2, r1, #31
10061d80:	d002      	beq.n	10061d88 <smp_sap_check_is_peer_device_bonded+0x2a>
10061d82:	0789      	lsls	r1, r1, #30
10061d84:	d500      	bpl.n	10061d88 <smp_sap_check_is_peer_device_bonded+0x2a>
10061d86:	2000      	movs	r0, #0
10061d88:	4605      	mov	r5, r0
10061d8a:	e000      	b.n	10061d8e <smp_sap_check_is_peer_device_bonded+0x30>
10061d8c:	2502      	movs	r5, #2
10061d8e:	4628      	mov	r0, r5
10061d90:	bdb0      	pop	{r4, r5, r7, pc}

10061d92 <smp_sap_check_encryption_key_size>:
10061d92:	b510      	push	{r4, lr}
10061d94:	460c      	mov	r4, r1
10061d96:	f7fe fd39 	bl	1006080c <smp_get_remote_device_list_item>
10061d9a:	2800      	cmp	r0, #0
10061d9c:	d005      	beq.n	10061daa <smp_sap_check_encryption_key_size+0x18>
10061d9e:	7a81      	ldrb	r1, [r0, #10]
10061da0:	29f1      	cmp	r1, #241	@ 0xf1
10061da2:	d102      	bne.n	10061daa <smp_sap_check_encryption_key_size+0x18>
10061da4:	7c00      	ldrb	r0, [r0, #16]
10061da6:	42a0      	cmp	r0, r4
10061da8:	d201      	bcs.n	10061dae <smp_sap_check_encryption_key_size+0x1c>
10061daa:	20b6      	movs	r0, #182	@ 0xb6
10061dac:	bd10      	pop	{r4, pc}
10061dae:	2000      	movs	r0, #0
10061db0:	bd10      	pop	{r4, pc}

10061db2 <smp_sap_forget_device_upon_disconnection>:
10061db2:	b580      	push	{r7, lr}
10061db4:	f7fe fd2a 	bl	1006080c <smp_get_remote_device_list_item>
10061db8:	2800      	cmp	r0, #0
10061dba:	d006      	beq.n	10061dca <smp_sap_forget_device_upon_disconnection+0x18>
10061dbc:	2160      	movs	r1, #96	@ 0x60
10061dbe:	5c42      	ldrb	r2, [r0, r1]
10061dc0:	2380      	movs	r3, #128	@ 0x80
10061dc2:	4313      	orrs	r3, r2
10061dc4:	5443      	strb	r3, [r0, r1]
10061dc6:	2000      	movs	r0, #0
10061dc8:	bd80      	pop	{r7, pc}
10061dca:	2081      	movs	r0, #129	@ 0x81
10061dcc:	bd80      	pop	{r7, pc}

10061dce <smp_sap_sm2_packet_data_signing_compute>:
10061dce:	b5f0      	push	{r4, r5, r6, r7, lr}
10061dd0:	b089      	sub	sp, #36	@ 0x24
10061dd2:	460e      	mov	r6, r1
10061dd4:	f7fe fd1a 	bl	1006080c <smp_get_remote_device_list_item>
10061dd8:	2800      	cmp	r0, #0
10061dda:	d025      	beq.n	10061e28 <smp_sap_sm2_packet_data_signing_compute+0x5a>
10061ddc:	4605      	mov	r5, r0
10061dde:	301c      	adds	r0, #28
10061de0:	a905      	add	r1, sp, #20
10061de2:	9100      	str	r1, [sp, #0]
10061de4:	f7fd ff0a 	bl	1005fbfc <smp_crt_generate_csrk>
10061de8:	8874      	ldrh	r4, [r6, #2]
10061dea:	462b      	mov	r3, r5
10061dec:	3368      	adds	r3, #104	@ 0x68
10061dee:	1d27      	adds	r7, r4, #4
10061df0:	b2b9      	uxth	r1, r7
10061df2:	2204      	movs	r2, #4
10061df4:	4630      	mov	r0, r6
10061df6:	f7f1 f99f 	bl	10053138 <ACL_pkt_write>
10061dfa:	b2fa      	uxtb	r2, r7
10061dfc:	af01      	add	r7, sp, #4
10061dfe:	9800      	ldr	r0, [sp, #0]
10061e00:	4631      	mov	r1, r6
10061e02:	463b      	mov	r3, r7
10061e04:	f7fe f828 	bl	1005fe58 <smp_crt_generate_cmac_tag>
10061e08:	3708      	adds	r7, #8
10061e0a:	4620      	mov	r0, r4
10061e0c:	3008      	adds	r0, #8
10061e0e:	b281      	uxth	r1, r0
10061e10:	2208      	movs	r2, #8
10061e12:	4630      	mov	r0, r6
10061e14:	463b      	mov	r3, r7
10061e16:	f7f1 f98f 	bl	10053138 <ACL_pkt_write>
10061e1a:	340c      	adds	r4, #12
10061e1c:	8074      	strh	r4, [r6, #2]
10061e1e:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
10061e20:	1c40      	adds	r0, r0, #1
10061e22:	66a8      	str	r0, [r5, #104]	@ 0x68
10061e24:	2000      	movs	r0, #0
10061e26:	e000      	b.n	10061e2a <smp_sap_sm2_packet_data_signing_compute+0x5c>
10061e28:	2002      	movs	r0, #2
10061e2a:	b009      	add	sp, #36	@ 0x24
10061e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061e2e <smp_sap_sm2_packet_data_signing_validate>:
10061e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
10061e30:	b08d      	sub	sp, #52	@ 0x34
10061e32:	460d      	mov	r5, r1
10061e34:	884f      	ldrh	r7, [r1, #2]
10061e36:	f7fe fce9 	bl	1006080c <smp_get_remote_device_list_item>
10061e3a:	2800      	cmp	r0, #0
10061e3c:	d005      	beq.n	10061e4a <smp_sap_sm2_packet_data_signing_validate+0x1c>
10061e3e:	4604      	mov	r4, r0
10061e40:	7c40      	ldrb	r0, [r0, #17]
10061e42:	0640      	lsls	r0, r0, #25
10061e44:	d403      	bmi.n	10061e4e <smp_sap_sm2_packet_data_signing_validate+0x20>
10061e46:	20b1      	movs	r0, #177	@ 0xb1
10061e48:	e034      	b.n	10061eb4 <smp_sap_sm2_packet_data_signing_validate+0x86>
10061e4a:	2002      	movs	r0, #2
10061e4c:	e032      	b.n	10061eb4 <smp_sap_sm2_packet_data_signing_validate+0x86>
10061e4e:	4621      	mov	r1, r4
10061e50:	3148      	adds	r1, #72	@ 0x48
10061e52:	a805      	add	r0, sp, #20
10061e54:	2210      	movs	r2, #16
10061e56:	f7e4 f80f 	bl	10045e78 <BLEPLAT_MemCpy>
10061e5a:	3f08      	subs	r7, #8
10061e5c:	b2b9      	uxth	r1, r7
10061e5e:	220c      	movs	r2, #12
10061e60:	ae02      	add	r6, sp, #8
10061e62:	4628      	mov	r0, r5
10061e64:	4633      	mov	r3, r6
10061e66:	f7f1 f945 	bl	100530f4 <ACL_pkt_read>
10061e6a:	7830      	ldrb	r0, [r6, #0]
10061e6c:	7871      	ldrb	r1, [r6, #1]
10061e6e:	0209      	lsls	r1, r1, #8
10061e70:	1808      	adds	r0, r1, r0
10061e72:	78b1      	ldrb	r1, [r6, #2]
10061e74:	0409      	lsls	r1, r1, #16
10061e76:	1840      	adds	r0, r0, r1
10061e78:	78f1      	ldrb	r1, [r6, #3]
10061e7a:	0609      	lsls	r1, r1, #24
10061e7c:	1841      	adds	r1, r0, r1
10061e7e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
10061e80:	4281      	cmp	r1, r0
10061e82:	d801      	bhi.n	10061e88 <smp_sap_sm2_packet_data_signing_validate+0x5a>
10061e84:	1c40      	adds	r0, r0, #1
10061e86:	d110      	bne.n	10061eaa <smp_sap_sm2_packet_data_signing_validate+0x7c>
10061e88:	9101      	str	r1, [sp, #4]
10061e8a:	b2fa      	uxtb	r2, r7
10061e8c:	a805      	add	r0, sp, #20
10061e8e:	ae09      	add	r6, sp, #36	@ 0x24
10061e90:	4629      	mov	r1, r5
10061e92:	4633      	mov	r3, r6
10061e94:	f7fd ffe0 	bl	1005fe58 <smp_crt_generate_cmac_tag>
10061e98:	a802      	add	r0, sp, #8
10061e9a:	1d00      	adds	r0, r0, #4
10061e9c:	3608      	adds	r6, #8
10061e9e:	2208      	movs	r2, #8
10061ea0:	4631      	mov	r1, r6
10061ea2:	f7e4 f809 	bl	10045eb8 <BLEPLAT_MemCmp>
10061ea6:	2800      	cmp	r0, #0
10061ea8:	d001      	beq.n	10061eae <smp_sap_sm2_packet_data_signing_validate+0x80>
10061eaa:	2005      	movs	r0, #5
10061eac:	e002      	b.n	10061eb4 <smp_sap_sm2_packet_data_signing_validate+0x86>
10061eae:	9801      	ldr	r0, [sp, #4]
10061eb0:	66e0      	str	r0, [r4, #108]	@ 0x6c
10061eb2:	2000      	movs	r0, #0
10061eb4:	b00d      	add	sp, #52	@ 0x34
10061eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061eb8 <nvm_gatt_db_read_init>:
10061eb8:	4801      	ldr	r0, [pc, #4]	@ (10061ec0 <__arm_cp.0_0>)
10061eba:	2100      	movs	r1, #0
10061ebc:	7001      	strb	r1, [r0, #0]
10061ebe:	4770      	bx	lr

10061ec0 <__arm_cp.0_0>:
10061ec0:	200011c4 	.word	0x200011c4

10061ec4 <nvm_gatt_db_read_next_record>:
10061ec4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10061ec6:	4603      	mov	r3, r0
10061ec8:	4d06      	ldr	r5, [pc, #24]	@ (10061ee4 <__arm_cp.1_0>)
10061eca:	7828      	ldrb	r0, [r5, #0]
10061ecc:	210c      	movs	r1, #12
10061ece:	9100      	str	r1, [sp, #0]
10061ed0:	2401      	movs	r4, #1
10061ed2:	2200      	movs	r2, #0
10061ed4:	4621      	mov	r1, r4
10061ed6:	f7e3 ff07 	bl	10045ce8 <BLEPLAT_NvmGet>
10061eda:	702c      	strb	r4, [r5, #0]
10061edc:	f000 f804 	bl	10061ee8 <nvm_convert_bleplat_to_blestack_status>
10061ee0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10061ee2:	46c0      	nop			@ (mov r8, r8)

10061ee4 <__arm_cp.1_0>:
10061ee4:	200011c4 	.word	0x200011c4

10061ee8 <nvm_convert_bleplat_to_blestack_status>:
10061ee8:	1cc0      	adds	r0, r0, #3
10061eea:	b2c0      	uxtb	r0, r0
10061eec:	2804      	cmp	r0, #4
10061eee:	d302      	bcc.n	10061ef6 <nvm_convert_bleplat_to_blestack_status+0xe>
10061ef0:	207e      	movs	r0, #126	@ 0x7e
10061ef2:	43c0      	mvns	r0, r0
10061ef4:	e002      	b.n	10061efc <nvm_convert_bleplat_to_blestack_status+0x14>
10061ef6:	00c1      	lsls	r1, r0, #3
10061ef8:	4801      	ldr	r0, [pc, #4]	@ (10061f00 <__arm_cp.2_0>)
10061efa:	40c8      	lsrs	r0, r1
10061efc:	b2c0      	uxtb	r0, r0
10061efe:	4770      	bx	lr

10061f00 <__arm_cp.2_0>:
10061f00:	00b4b7b3 	.word	0x00b4b7b3

10061f04 <nvm_gatt_db_read_full_current_record>:
10061f04:	b5e0      	push	{r5, r6, r7, lr}
10061f06:	4603      	mov	r3, r0
10061f08:	9100      	str	r1, [sp, #0]
10061f0a:	2002      	movs	r0, #2
10061f0c:	2101      	movs	r1, #1
10061f0e:	220c      	movs	r2, #12
10061f10:	f7e3 feea 	bl	10045ce8 <BLEPLAT_NvmGet>
10061f14:	f7ff ffe8 	bl	10061ee8 <nvm_convert_bleplat_to_blestack_status>
10061f18:	bd8c      	pop	{r2, r3, r7, pc}

10061f1a <nvm_gatt_db_update_record>:
10061f1a:	b5e0      	push	{r5, r6, r7, lr}
10061f1c:	460b      	mov	r3, r1
10061f1e:	4601      	mov	r1, r0
10061f20:	8900      	ldrh	r0, [r0, #8]
10061f22:	9000      	str	r0, [sp, #0]
10061f24:	2001      	movs	r0, #1
10061f26:	220c      	movs	r2, #12
10061f28:	f7e3 fe90 	bl	10045c4c <BLEPLAT_NvmAdd>
10061f2c:	f7ff ffdc 	bl	10061ee8 <nvm_convert_bleplat_to_blestack_status>
10061f30:	bd8c      	pop	{r2, r3, r7, pc}
	...

10061f34 <nvm_sec_db_read_init>:
10061f34:	4801      	ldr	r0, [pc, #4]	@ (10061f3c <__arm_cp.5_0>)
10061f36:	2100      	movs	r1, #0
10061f38:	7001      	strb	r1, [r0, #0]
10061f3a:	4770      	bx	lr

10061f3c <__arm_cp.5_0>:
10061f3c:	200011c5 	.word	0x200011c5

10061f40 <nvm_sec_db_read_next_record>:
10061f40:	b51c      	push	{r2, r3, r4, lr}
10061f42:	4603      	mov	r3, r0
10061f44:	4c06      	ldr	r4, [pc, #24]	@ (10061f60 <__arm_cp.6_0>)
10061f46:	7820      	ldrb	r0, [r4, #0]
10061f48:	2150      	movs	r1, #80	@ 0x50
10061f4a:	9100      	str	r1, [sp, #0]
10061f4c:	2100      	movs	r1, #0
10061f4e:	460a      	mov	r2, r1
10061f50:	f7e3 feca 	bl	10045ce8 <BLEPLAT_NvmGet>
10061f54:	2101      	movs	r1, #1
10061f56:	7021      	strb	r1, [r4, #0]
10061f58:	f7ff ffc6 	bl	10061ee8 <nvm_convert_bleplat_to_blestack_status>
10061f5c:	bd1c      	pop	{r2, r3, r4, pc}
10061f5e:	46c0      	nop			@ (mov r8, r8)

10061f60 <__arm_cp.6_0>:
10061f60:	200011c5 	.word	0x200011c5

10061f64 <nvm_sec_db_add_record>:
10061f64:	b5e0      	push	{r5, r6, r7, lr}
10061f66:	4601      	mov	r1, r0
10061f68:	2000      	movs	r0, #0
10061f6a:	9000      	str	r0, [sp, #0]
10061f6c:	2250      	movs	r2, #80	@ 0x50
10061f6e:	4603      	mov	r3, r0
10061f70:	f7e3 fe6c 	bl	10045c4c <BLEPLAT_NvmAdd>
10061f74:	f7ff ffb8 	bl	10061ee8 <nvm_convert_bleplat_to_blestack_status>
10061f78:	bd8c      	pop	{r2, r3, r7, pc}

10061f7a <nvm_sec_db_get_record_count>:
10061f7a:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10061f7c:	2400      	movs	r4, #0
10061f7e:	4621      	mov	r1, r4
10061f80:	4620      	mov	r0, r4
10061f82:	460d      	mov	r5, r1
10061f84:	9400      	str	r4, [sp, #0]
10061f86:	b2c0      	uxtb	r0, r0
10061f88:	4621      	mov	r1, r4
10061f8a:	4622      	mov	r2, r4
10061f8c:	4623      	mov	r3, r4
10061f8e:	f7e3 feab 	bl	10045ce8 <BLEPLAT_NvmGet>
10061f92:	1cc2      	adds	r2, r0, #3
10061f94:	1c69      	adds	r1, r5, #1
10061f96:	2001      	movs	r0, #1
10061f98:	2a00      	cmp	r2, #0
10061f9a:	d1f2      	bne.n	10061f82 <nvm_sec_db_get_record_count+0x8>
10061f9c:	b2e8      	uxtb	r0, r5
10061f9e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10061fa0 <nvm_discard_all_records>:
10061fa0:	b580      	push	{r7, lr}
10061fa2:	2003      	movs	r0, #3
10061fa4:	f7e3 ff42 	bl	10045e2c <BLEPLAT_NvmDiscard>
10061fa8:	bd80      	pop	{r7, pc}

10061faa <nvm_discard_current_record>:
10061faa:	b580      	push	{r7, lr}
10061fac:	2002      	movs	r0, #2
10061fae:	f7e3 ff3d 	bl	10045e2c <BLEPLAT_NvmDiscard>
10061fb2:	bd80      	pop	{r7, pc}

10061fb4 <nvm_dev_id_data_get_record>:
10061fb4:	b5e0      	push	{r5, r6, r7, lr}
10061fb6:	4603      	mov	r3, r0
10061fb8:	2026      	movs	r0, #38	@ 0x26
10061fba:	9000      	str	r0, [sp, #0]
10061fbc:	2102      	movs	r1, #2
10061fbe:	2000      	movs	r0, #0
10061fc0:	4602      	mov	r2, r0
10061fc2:	f7e3 fe91 	bl	10045ce8 <BLEPLAT_NvmGet>
10061fc6:	2800      	cmp	r0, #0
10061fc8:	d000      	beq.n	10061fcc <nvm_dev_id_data_get_record+0x18>
10061fca:	2081      	movs	r0, #129	@ 0x81
10061fcc:	bd8c      	pop	{r2, r3, r7, pc}

10061fce <nvm_dev_id_data_add_record>:
10061fce:	b5e0      	push	{r5, r6, r7, lr}
10061fd0:	4601      	mov	r1, r0
10061fd2:	2300      	movs	r3, #0
10061fd4:	9300      	str	r3, [sp, #0]
10061fd6:	2002      	movs	r0, #2
10061fd8:	2226      	movs	r2, #38	@ 0x26
10061fda:	f7e3 fe37 	bl	10045c4c <BLEPLAT_NvmAdd>
10061fde:	2800      	cmp	r0, #0
10061fe0:	d000      	beq.n	10061fe4 <nvm_dev_id_data_add_record+0x16>
10061fe2:	2081      	movs	r0, #129	@ 0x81
10061fe4:	bd8c      	pop	{r2, r3, r7, pc}
	...

10061fe8 <tsk_init>:
10061fe8:	4803      	ldr	r0, [pc, #12]	@ (10061ff8 <__arm_cp.0_0>)
10061fea:	6800      	ldr	r0, [r0, #0]
10061fec:	2100      	movs	r1, #0
10061fee:	6081      	str	r1, [r0, #8]
10061ff0:	60c1      	str	r1, [r0, #12]
10061ff2:	6101      	str	r1, [r0, #16]
10061ff4:	6001      	str	r1, [r0, #0]
10061ff6:	4770      	bx	lr

10061ff8 <__arm_cp.0_0>:
10061ff8:	200011c8 	.word	0x200011c8

10061ffc <tsk_scheduler>:
10061ffc:	b570      	push	{r4, r5, r6, lr}
10061ffe:	4d20      	ldr	r5, [pc, #128]	@ (10062080 <__arm_cp.1_0>)
10062000:	6829      	ldr	r1, [r5, #0]
10062002:	f3ef 8210 	mrs	r2, PRIMASK
10062006:	b672      	cpsid	i
10062008:	680a      	ldr	r2, [r1, #0]
1006200a:	2600      	movs	r6, #0
1006200c:	600e      	str	r6, [r1, #0]
1006200e:	684b      	ldr	r3, [r1, #4]
10062010:	4313      	orrs	r3, r2
10062012:	604b      	str	r3, [r1, #4]
10062014:	b662      	cpsie	i
10062016:	2800      	cmp	r0, #0
10062018:	d00e      	beq.n	10062038 <tsk_scheduler+0x3c>
1006201a:	6828      	ldr	r0, [r5, #0]
1006201c:	6841      	ldr	r1, [r0, #4]
1006201e:	07ca      	lsls	r2, r1, #31
10062020:	d00a      	beq.n	10062038 <tsk_scheduler+0x3c>
10062022:	2201      	movs	r2, #1
10062024:	4051      	eors	r1, r2
10062026:	6041      	str	r1, [r0, #4]
10062028:	f3ef 8010 	mrs	r0, PRIMASK
1006202c:	b672      	cpsid	i
1006202e:	6828      	ldr	r0, [r5, #0]
10062030:	6801      	ldr	r1, [r0, #0]
10062032:	4311      	orrs	r1, r2
10062034:	6001      	str	r1, [r0, #0]
10062036:	b662      	cpsie	i
10062038:	682c      	ldr	r4, [r5, #0]
1006203a:	3410      	adds	r4, #16
1006203c:	6820      	ldr	r0, [r4, #0]
1006203e:	2800      	cmp	r0, #0
10062040:	d00f      	beq.n	10062062 <tsk_scheduler+0x66>
10062042:	4620      	mov	r0, r4
10062044:	f000 f866 	bl	10062114 <lsbit>
10062048:	0080      	lsls	r0, r0, #2
1006204a:	6829      	ldr	r1, [r5, #0]
1006204c:	1808      	adds	r0, r1, r0
1006204e:	f3ef 8210 	mrs	r2, PRIMASK
10062052:	b672      	cpsid	i
10062054:	6882      	ldr	r2, [r0, #8]
10062056:	6086      	str	r6, [r0, #8]
10062058:	6848      	ldr	r0, [r1, #4]
1006205a:	4310      	orrs	r0, r2
1006205c:	6048      	str	r0, [r1, #4]
1006205e:	b662      	cpsie	i
10062060:	e7ec      	b.n	1006203c <tsk_scheduler+0x40>
10062062:	6828      	ldr	r0, [r5, #0]
10062064:	1d04      	adds	r4, r0, #4
10062066:	4d07      	ldr	r5, [pc, #28]	@ (10062084 <__arm_cp.1_1>)
10062068:	6820      	ldr	r0, [r4, #0]
1006206a:	2800      	cmp	r0, #0
1006206c:	d006      	beq.n	1006207c <tsk_scheduler+0x80>
1006206e:	4620      	mov	r0, r4
10062070:	f000 f850 	bl	10062114 <lsbit>
10062074:	0081      	lsls	r1, r0, #2
10062076:	5869      	ldr	r1, [r5, r1]
10062078:	4788      	blx	r1
1006207a:	e7f5      	b.n	10062068 <tsk_scheduler+0x6c>
1006207c:	bd70      	pop	{r4, r5, r6, pc}
1006207e:	46c0      	nop			@ (mov r8, r8)

10062080 <__arm_cp.1_0>:
10062080:	200011c8 	.word	0x200011c8

10062084 <__arm_cp.1_1>:
10062084:	1006d194 	.word	0x1006d194

10062088 <tsk_no_idle_check>:
10062088:	4803      	ldr	r0, [pc, #12]	@ (10062098 <__arm_cp.2_0>)
1006208a:	6800      	ldr	r0, [r0, #0]
1006208c:	6801      	ldr	r1, [r0, #0]
1006208e:	6900      	ldr	r0, [r0, #16]
10062090:	4308      	orrs	r0, r1
10062092:	1e41      	subs	r1, r0, #1
10062094:	4188      	sbcs	r0, r1
10062096:	4770      	bx	lr

10062098 <__arm_cp.2_0>:
10062098:	200011c8 	.word	0x200011c8

1006209c <tsk_notify_idx>:
1006209c:	211f      	movs	r1, #31
1006209e:	4001      	ands	r1, r0
100620a0:	2201      	movs	r2, #1
100620a2:	408a      	lsls	r2, r1
100620a4:	f3ef 8110 	mrs	r1, PRIMASK
100620a8:	b672      	cpsid	i
100620aa:	4904      	ldr	r1, [pc, #16]	@ (100620bc <__arm_cp.3_0>)
100620ac:	6809      	ldr	r1, [r1, #0]
100620ae:	0940      	lsrs	r0, r0, #5
100620b0:	0080      	lsls	r0, r0, #2
100620b2:	580b      	ldr	r3, [r1, r0]
100620b4:	4313      	orrs	r3, r2
100620b6:	500b      	str	r3, [r1, r0]
100620b8:	b662      	cpsie	i
100620ba:	4770      	bx	lr

100620bc <__arm_cp.3_0>:
100620bc:	200011c8 	.word	0x200011c8

100620c0 <tsk_wait_resource_idx>:
100620c0:	221f      	movs	r2, #31
100620c2:	4002      	ands	r2, r0
100620c4:	2301      	movs	r3, #1
100620c6:	4093      	lsls	r3, r2
100620c8:	f3ef 8210 	mrs	r2, PRIMASK
100620cc:	b672      	cpsid	i
100620ce:	0089      	lsls	r1, r1, #2
100620d0:	4a05      	ldr	r2, [pc, #20]	@ (100620e8 <__arm_cp.4_0>)
100620d2:	6812      	ldr	r2, [r2, #0]
100620d4:	1851      	adds	r1, r2, r1
100620d6:	0940      	lsrs	r0, r0, #5
100620d8:	0080      	lsls	r0, r0, #2
100620da:	1808      	adds	r0, r1, r0
100620dc:	6881      	ldr	r1, [r0, #8]
100620de:	4319      	orrs	r1, r3
100620e0:	6081      	str	r1, [r0, #8]
100620e2:	b662      	cpsie	i
100620e4:	4770      	bx	lr
100620e6:	46c0      	nop			@ (mov r8, r8)

100620e8 <__arm_cp.4_0>:
100620e8:	200011c8 	.word	0x200011c8

100620ec <tsk_signal_resource_idx>:
100620ec:	211f      	movs	r1, #31
100620ee:	4001      	ands	r1, r0
100620f0:	2201      	movs	r2, #1
100620f2:	408a      	lsls	r2, r1
100620f4:	f3ef 8110 	mrs	r1, PRIMASK
100620f8:	b672      	cpsid	i
100620fa:	4905      	ldr	r1, [pc, #20]	@ (10062110 <__arm_cp.5_0>)
100620fc:	6809      	ldr	r1, [r1, #0]
100620fe:	0940      	lsrs	r0, r0, #5
10062100:	0080      	lsls	r0, r0, #2
10062102:	1808      	adds	r0, r1, r0
10062104:	6901      	ldr	r1, [r0, #16]
10062106:	4311      	orrs	r1, r2
10062108:	6101      	str	r1, [r0, #16]
1006210a:	b662      	cpsie	i
1006210c:	4770      	bx	lr
1006210e:	46c0      	nop			@ (mov r8, r8)

10062110 <__arm_cp.5_0>:
10062110:	200011c8 	.word	0x200011c8

10062114 <lsbit>:
10062114:	f3ef 8110 	mrs	r1, PRIMASK
10062118:	b672      	cpsid	i
1006211a:	6801      	ldr	r1, [r0, #0]
1006211c:	424a      	negs	r2, r1
1006211e:	400a      	ands	r2, r1
10062120:	4051      	eors	r1, r2
10062122:	6001      	str	r1, [r0, #0]
10062124:	4803      	ldr	r0, [pc, #12]	@ (10062134 <__arm_cp.7_0>)
10062126:	4350      	muls	r0, r2
10062128:	0ec0      	lsrs	r0, r0, #27
1006212a:	a103      	add	r1, pc, #12	@ (adr r1, 10062138 <__arm_cp.7_0+0x4>)
1006212c:	5c08      	ldrb	r0, [r1, r0]
1006212e:	b662      	cpsie	i
10062130:	4770      	bx	lr
10062132:	46c0      	nop			@ (mov r8, r8)

10062134 <__arm_cp.7_0>:
10062134:	04653adf 	.word	0x04653adf
10062138:	06020100 	.word	0x06020100
1006213c:	10070b03 	.word	0x10070b03
10062140:	150c0e04 	.word	0x150c0e04
10062144:	1a111708 	.word	0x1a111708
10062148:	0f0a051f 	.word	0x0f0a051f
1006214c:	1916140d 	.word	0x1916140d
10062150:	1813091e 	.word	0x1813091e
10062154:	1b1c121d 	.word	0x1b1c121d

10062158 <CST_init>:
10062158:	b510      	push	{r4, lr}
1006215a:	2412      	movs	r4, #18
1006215c:	2800      	cmp	r0, #0
1006215e:	d00e      	beq.n	1006217e <CST_init+0x26>
10062160:	2a00      	cmp	r2, #0
10062162:	d00c      	beq.n	1006217e <CST_init+0x26>
10062164:	2b0b      	cmp	r3, #11
10062166:	d80a      	bhi.n	1006217e <CST_init+0x26>
10062168:	7041      	strb	r1, [r0, #1]
1006216a:	7003      	strb	r3, [r0, #0]
1006216c:	6a03      	ldr	r3, [r0, #32]
1006216e:	5459      	strb	r1, [r3, r1]
10062170:	1e49      	subs	r1, r1, #1
10062172:	1c4b      	adds	r3, r1, #1
10062174:	d3fa      	bcc.n	1006216c <CST_init+0x14>
10062176:	6102      	str	r2, [r0, #16]
10062178:	2400      	movs	r4, #0
1006217a:	7504      	strb	r4, [r0, #20]
1006217c:	61c0      	str	r0, [r0, #28]
1006217e:	4620      	mov	r0, r4
10062180:	bd10      	pop	{r4, pc}

10062182 <CST_stop>:
10062182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062184:	4605      	mov	r5, r0
10062186:	2012      	movs	r0, #18
10062188:	2d00      	cmp	r5, #0
1006218a:	d01b      	beq.n	100621c4 <CST_stop+0x42>
1006218c:	460c      	mov	r4, r1
1006218e:	786a      	ldrb	r2, [r5, #1]
10062190:	428a      	cmp	r2, r1
10062192:	d917      	bls.n	100621c4 <CST_stop+0x42>
10062194:	6a2b      	ldr	r3, [r5, #32]
10062196:	5d19      	ldrb	r1, [r3, r4]
10062198:	42a1      	cmp	r1, r4
1006219a:	d101      	bne.n	100621a0 <CST_stop+0x1e>
1006219c:	2000      	movs	r0, #0
1006219e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100621a0:	4617      	mov	r7, r2
100621a2:	463e      	mov	r6, r7
100621a4:	5ddf      	ldrb	r7, [r3, r7]
100621a6:	4297      	cmp	r7, r2
100621a8:	d001      	beq.n	100621ae <CST_stop+0x2c>
100621aa:	42a7      	cmp	r7, r4
100621ac:	d1f9      	bne.n	100621a2 <CST_stop+0x20>
100621ae:	2000      	movs	r0, #0
100621b0:	4297      	cmp	r7, r2
100621b2:	d005      	beq.n	100621c0 <CST_stop+0x3e>
100621b4:	5599      	strb	r1, [r3, r6]
100621b6:	4296      	cmp	r6, r2
100621b8:	d102      	bne.n	100621c0 <CST_stop+0x3e>
100621ba:	4628      	mov	r0, r5
100621bc:	f000 f803 	bl	100621c6 <Timer_TryStartFirstActive>
100621c0:	6a29      	ldr	r1, [r5, #32]
100621c2:	550c      	strb	r4, [r1, r4]
100621c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100621c6 <Timer_TryStartFirstActive>:
100621c6:	b510      	push	{r4, lr}
100621c8:	7842      	ldrb	r2, [r0, #1]
100621ca:	428a      	cmp	r2, r1
100621cc:	d107      	bne.n	100621de <Timer_TryStartFirstActive+0x18>
100621ce:	7d01      	ldrb	r1, [r0, #20]
100621d0:	2400      	movs	r4, #0
100621d2:	2900      	cmp	r1, #0
100621d4:	d009      	beq.n	100621ea <Timer_TryStartFirstActive+0x24>
100621d6:	3008      	adds	r0, #8
100621d8:	f7e3 ff55 	bl	10046086 <BLEPLAT_StopTimer>
100621dc:	e005      	b.n	100621ea <Timer_TryStartFirstActive+0x24>
100621de:	0049      	lsls	r1, r1, #1
100621e0:	6a42      	ldr	r2, [r0, #36]	@ 0x24
100621e2:	5e51      	ldrsh	r1, [r2, r1]
100621e4:	f000 f86a 	bl	100622bc <Timer_StartFirstActive_sysT>
100621e8:	4604      	mov	r4, r0
100621ea:	4620      	mov	r0, r4
100621ec:	bd10      	pop	{r4, pc}

100621ee <CST_start>:
100621ee:	b5f0      	push	{r4, r5, r6, r7, lr}
100621f0:	b085      	sub	sp, #20
100621f2:	2612      	movs	r6, #18
100621f4:	2800      	cmp	r0, #0
100621f6:	d05e      	beq.n	100622b6 <CST_start+0xc8>
100621f8:	461f      	mov	r7, r3
100621fa:	460d      	mov	r5, r1
100621fc:	4604      	mov	r4, r0
100621fe:	7843      	ldrb	r3, [r0, #1]
10062200:	428b      	cmp	r3, r1
10062202:	d958      	bls.n	100622b6 <CST_start+0xc8>
10062204:	7820      	ldrb	r0, [r4, #0]
10062206:	2105      	movs	r1, #5
10062208:	0309      	lsls	r1, r1, #12
1006220a:	4081      	lsls	r1, r0
1006220c:	428f      	cmp	r7, r1
1006220e:	d852      	bhi.n	100622b6 <CST_start+0xc8>
10062210:	9204      	str	r2, [sp, #16]
10062212:	9302      	str	r3, [sp, #8]
10062214:	f7e3 ff1c 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
10062218:	4602      	mov	r2, r0
1006221a:	7823      	ldrb	r3, [r4, #0]
1006221c:	6a20      	ldr	r0, [r4, #32]
1006221e:	5d40      	ldrb	r0, [r0, r5]
10062220:	42a8      	cmp	r0, r5
10062222:	d00c      	beq.n	1006223e <CST_start+0x50>
10062224:	9804      	ldr	r0, [sp, #16]
10062226:	2800      	cmp	r0, #0
10062228:	d045      	beq.n	100622b6 <CST_start+0xc8>
1006222a:	4620      	mov	r0, r4
1006222c:	9103      	str	r1, [sp, #12]
1006222e:	4629      	mov	r1, r5
10062230:	9304      	str	r3, [sp, #16]
10062232:	4616      	mov	r6, r2
10062234:	f7ff ffa5 	bl	10062182 <CST_stop>
10062238:	9903      	ldr	r1, [sp, #12]
1006223a:	4632      	mov	r2, r6
1006223c:	9b04      	ldr	r3, [sp, #16]
1006223e:	2033      	movs	r0, #51	@ 0x33
10062240:	4378      	muls	r0, r7
10062242:	460e      	mov	r6, r1
10062244:	0a01      	lsrs	r1, r0, #8
10062246:	1808      	adds	r0, r1, r0
10062248:	0c01      	lsrs	r1, r0, #16
1006224a:	1808      	adds	r0, r1, r0
1006224c:	0771      	lsls	r1, r6, #29
1006224e:	08d2      	lsrs	r2, r2, #3
10062250:	1851      	adds	r1, r2, r1
10062252:	1842      	adds	r2, r0, r1
10062254:	1d58      	adds	r0, r3, #5
10062256:	b2c0      	uxtb	r0, r0
10062258:	40c2      	lsrs	r2, r0
1006225a:	9501      	str	r5, [sp, #4]
1006225c:	0068      	lsls	r0, r5, #1
1006225e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
10062260:	9204      	str	r2, [sp, #16]
10062262:	520a      	strh	r2, [r1, r0]
10062264:	f7e3 fef4 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
10062268:	08c0      	lsrs	r0, r0, #3
1006226a:	9003      	str	r0, [sp, #12]
1006226c:	7862      	ldrb	r2, [r4, #1]
1006226e:	6a20      	ldr	r0, [r4, #32]
10062270:	4617      	mov	r7, r2
10062272:	463b      	mov	r3, r7
10062274:	5dc7      	ldrb	r7, [r0, r7]
10062276:	4297      	cmp	r7, r2
10062278:	d00d      	beq.n	10062296 <CST_start+0xa8>
1006227a:	007d      	lsls	r5, r7, #1
1006227c:	6a66      	ldr	r6, [r4, #36]	@ 0x24
1006227e:	5b75      	ldrh	r5, [r6, r5]
10062280:	7826      	ldrb	r6, [r4, #0]
10062282:	1d76      	adds	r6, r6, #5
10062284:	9903      	ldr	r1, [sp, #12]
10062286:	40f1      	lsrs	r1, r6
10062288:	1a6d      	subs	r5, r5, r1
1006228a:	b22d      	sxth	r5, r5
1006228c:	9e04      	ldr	r6, [sp, #16]
1006228e:	1a71      	subs	r1, r6, r1
10062290:	b209      	sxth	r1, r1
10062292:	428d      	cmp	r5, r1
10062294:	dded      	ble.n	10062272 <CST_start+0x84>
10062296:	5cc1      	ldrb	r1, [r0, r3]
10062298:	9a01      	ldr	r2, [sp, #4]
1006229a:	5481      	strb	r1, [r0, r2]
1006229c:	6a20      	ldr	r0, [r4, #32]
1006229e:	54c2      	strb	r2, [r0, r3]
100622a0:	9802      	ldr	r0, [sp, #8]
100622a2:	4283      	cmp	r3, r0
100622a4:	d106      	bne.n	100622b4 <CST_start+0xc6>
100622a6:	9804      	ldr	r0, [sp, #16]
100622a8:	b201      	sxth	r1, r0
100622aa:	4620      	mov	r0, r4
100622ac:	f000 f806 	bl	100622bc <Timer_StartFirstActive_sysT>
100622b0:	4606      	mov	r6, r0
100622b2:	e000      	b.n	100622b6 <CST_start+0xc8>
100622b4:	2600      	movs	r6, #0
100622b6:	4630      	mov	r0, r6
100622b8:	b005      	add	sp, #20
100622ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

100622bc <Timer_StartFirstActive_sysT>:
100622bc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100622be:	9101      	str	r1, [sp, #4]
100622c0:	4604      	mov	r4, r0
100622c2:	4607      	mov	r7, r0
100622c4:	3708      	adds	r7, #8
100622c6:	f7e3 fec3 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
100622ca:	9002      	str	r0, [sp, #8]
100622cc:	460d      	mov	r5, r1
100622ce:	7826      	ldrb	r6, [r4, #0]
100622d0:	7d20      	ldrb	r0, [r4, #20]
100622d2:	2800      	cmp	r0, #0
100622d4:	d004      	beq.n	100622e0 <Timer_StartFirstActive_sysT+0x24>
100622d6:	4638      	mov	r0, r7
100622d8:	f7e3 fed5 	bl	10046086 <BLEPLAT_StopTimer>
100622dc:	7822      	ldrb	r2, [r4, #0]
100622de:	e000      	b.n	100622e2 <Timer_StartFirstActive_sysT+0x26>
100622e0:	4632      	mov	r2, r6
100622e2:	1d70      	adds	r0, r6, #5
100622e4:	9c02      	ldr	r4, [sp, #8]
100622e6:	08e1      	lsrs	r1, r4, #3
100622e8:	40c1      	lsrs	r1, r0
100622ea:	9801      	ldr	r0, [sp, #4]
100622ec:	1a40      	subs	r0, r0, r1
100622ee:	b200      	sxth	r0, r0
100622f0:	1e40      	subs	r0, r0, #1
100622f2:	17c1      	asrs	r1, r0, #31
100622f4:	3208      	adds	r2, #8
100622f6:	f7de f92d 	bl	10040554 <__aeabi_llsl>
100622fa:	1902      	adds	r2, r0, r4
100622fc:	414d      	adcs	r5, r1
100622fe:	4638      	mov	r0, r7
10062300:	462b      	mov	r3, r5
10062302:	f7e3 feaf 	bl	10046064 <BLEPLAT_StartTimer>
10062306:	b2c0      	uxtb	r0, r0
10062308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1006230a <cst_sharedCallback>:
1006230a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006230c:	9102      	str	r1, [sp, #8]
1006230e:	4605      	mov	r5, r0
10062310:	7847      	ldrb	r7, [r0, #1]
10062312:	6a00      	ldr	r0, [r0, #32]
10062314:	5dc4      	ldrb	r4, [r0, r7]
10062316:	f7e3 fe9b 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
1006231a:	08c0      	lsrs	r0, r0, #3
1006231c:	9001      	str	r0, [sp, #4]
1006231e:	4620      	mov	r0, r4
10062320:	b2c2      	uxtb	r2, r0
10062322:	42ba      	cmp	r2, r7
10062324:	d00d      	beq.n	10062342 <cst_sharedCallback+0x38>
10062326:	0053      	lsls	r3, r2, #1
10062328:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
1006232a:	5af3      	ldrh	r3, [r6, r3]
1006232c:	782e      	ldrb	r6, [r5, #0]
1006232e:	1d76      	adds	r6, r6, #5
10062330:	9901      	ldr	r1, [sp, #4]
10062332:	40f1      	lsrs	r1, r6
10062334:	1a59      	subs	r1, r3, r1
10062336:	b209      	sxth	r1, r1
10062338:	2901      	cmp	r1, #1
1006233a:	dc03      	bgt.n	10062344 <cst_sharedCallback+0x3a>
1006233c:	6a28      	ldr	r0, [r5, #32]
1006233e:	5c80      	ldrb	r0, [r0, r2]
10062340:	e7ee      	b.n	10062320 <cst_sharedCallback+0x16>
10062342:	4638      	mov	r0, r7
10062344:	6a29      	ldr	r1, [r5, #32]
10062346:	55c8      	strb	r0, [r1, r7]
10062348:	b2c6      	uxtb	r6, r0
1006234a:	4628      	mov	r0, r5
1006234c:	4631      	mov	r1, r6
1006234e:	f7ff ff3a 	bl	100621c6 <Timer_TryStartFirstActive>
10062352:	b2e0      	uxtb	r0, r4
10062354:	42b0      	cmp	r0, r6
10062356:	d006      	beq.n	10062366 <cst_sharedCallback+0x5c>
10062358:	6a29      	ldr	r1, [r5, #32]
1006235a:	5c0f      	ldrb	r7, [r1, r0]
1006235c:	540c      	strb	r4, [r1, r0]
1006235e:	9902      	ldr	r1, [sp, #8]
10062360:	4788      	blx	r1
10062362:	463c      	mov	r4, r7
10062364:	e7f5      	b.n	10062352 <cst_sharedCallback+0x48>
10062366:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062368 <copy_swap_buffer>:
10062368:	b5f0      	push	{r4, r5, r6, r7, lr}
1006236a:	2a00      	cmp	r2, #0
1006236c:	d00b      	beq.n	10062386 <copy_swap_buffer+0x1e>
1006236e:	2400      	movs	r4, #0
10062370:	43e5      	mvns	r5, r4
10062372:	2b00      	cmp	r3, #0
10062374:	4626      	mov	r6, r4
10062376:	d000      	beq.n	1006237a <copy_swap_buffer+0x12>
10062378:	1956      	adds	r6, r2, r5
1006237a:	5d0f      	ldrb	r7, [r1, r4]
1006237c:	5587      	strb	r7, [r0, r6]
1006237e:	1e6d      	subs	r5, r5, #1
10062380:	1c64      	adds	r4, r4, #1
10062382:	42a2      	cmp	r2, r4
10062384:	d1f5      	bne.n	10062372 <copy_swap_buffer+0xa>
10062386:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062388 <is_Buffer_All_Set_To>:
10062388:	b570      	push	{r4, r5, r6, lr}
1006238a:	4603      	mov	r3, r0
1006238c:	2001      	movs	r0, #1
1006238e:	2900      	cmp	r1, #0
10062390:	d009      	beq.n	100623a6 <is_Buffer_All_Set_To+0x1e>
10062392:	2400      	movs	r4, #0
10062394:	4626      	mov	r6, r4
10062396:	4625      	mov	r5, r4
10062398:	5d96      	ldrb	r6, [r2, r6]
1006239a:	429e      	cmp	r6, r3
1006239c:	d104      	bne.n	100623a8 <is_Buffer_All_Set_To+0x20>
1006239e:	1c6d      	adds	r5, r5, #1
100623a0:	b2ee      	uxtb	r6, r5
100623a2:	428e      	cmp	r6, r1
100623a4:	d3f8      	bcc.n	10062398 <is_Buffer_All_Set_To+0x10>
100623a6:	bd70      	pop	{r4, r5, r6, pc}
100623a8:	4620      	mov	r0, r4
100623aa:	bd70      	pop	{r4, r5, r6, pc}

100623ac <char_copy>:
100623ac:	2a00      	cmp	r2, #0
100623ae:	d005      	beq.n	100623bc <char_copy+0x10>
100623b0:	7803      	ldrb	r3, [r0, #0]
100623b2:	700b      	strb	r3, [r1, #0]
100623b4:	1e52      	subs	r2, r2, #1
100623b6:	1c49      	adds	r1, r1, #1
100623b8:	1c40      	adds	r0, r0, #1
100623ba:	e7f7      	b.n	100623ac <char_copy>
100623bc:	4770      	bx	lr

100623be <UUID_cmp>:
100623be:	b580      	push	{r7, lr}
100623c0:	7c02      	ldrb	r2, [r0, #16]
100623c2:	7c0b      	ldrb	r3, [r1, #16]
100623c4:	429a      	cmp	r2, r3
100623c6:	d106      	bne.n	100623d6 <UUID_cmp+0x18>
100623c8:	2a20      	cmp	r2, #32
100623ca:	d007      	beq.n	100623dc <UUID_cmp+0x1e>
100623cc:	2a10      	cmp	r2, #16
100623ce:	d109      	bne.n	100623e4 <UUID_cmp+0x26>
100623d0:	8989      	ldrh	r1, [r1, #12]
100623d2:	8980      	ldrh	r0, [r0, #12]
100623d4:	e008      	b.n	100623e8 <UUID_cmp+0x2a>
100623d6:	2000      	movs	r0, #0
100623d8:	43c0      	mvns	r0, r0
100623da:	bd80      	pop	{r7, pc}
100623dc:	2210      	movs	r2, #16
100623de:	f7e3 fd6b 	bl	10045eb8 <BLEPLAT_MemCmp>
100623e2:	bd80      	pop	{r7, pc}
100623e4:	68c9      	ldr	r1, [r1, #12]
100623e6:	68c0      	ldr	r0, [r0, #12]
100623e8:	1a40      	subs	r0, r0, r1
100623ea:	bd80      	pop	{r7, pc}

100623ec <UUID_cmp_128bits>:
100623ec:	b570      	push	{r4, r5, r6, lr}
100623ee:	b08a      	sub	sp, #40	@ 0x28
100623f0:	460c      	mov	r4, r1
100623f2:	4601      	mov	r1, r0
100623f4:	ad05      	add	r5, sp, #20
100623f6:	2614      	movs	r6, #20
100623f8:	4628      	mov	r0, r5
100623fa:	4632      	mov	r2, r6
100623fc:	f7e3 fd3c 	bl	10045e78 <BLEPLAT_MemCpy>
10062400:	4668      	mov	r0, sp
10062402:	4621      	mov	r1, r4
10062404:	4632      	mov	r2, r6
10062406:	f7e3 fd37 	bl	10045e78 <BLEPLAT_MemCpy>
1006240a:	7c28      	ldrb	r0, [r5, #16]
1006240c:	2880      	cmp	r0, #128	@ 0x80
1006240e:	d007      	beq.n	10062420 <UUID_cmp_128bits+0x34>
10062410:	ac05      	add	r4, sp, #20
10062412:	490d      	ldr	r1, [pc, #52]	@ (10062448 <__arm_cp.1_0>)
10062414:	220c      	movs	r2, #12
10062416:	4620      	mov	r0, r4
10062418:	f7e3 fd2e 	bl	10045e78 <BLEPLAT_MemCpy>
1006241c:	2000      	movs	r0, #0
1006241e:	81e0      	strh	r0, [r4, #14]
10062420:	4668      	mov	r0, sp
10062422:	7c00      	ldrb	r0, [r0, #16]
10062424:	2880      	cmp	r0, #128	@ 0x80
10062426:	d007      	beq.n	10062438 <UUID_cmp_128bits+0x4c>
10062428:	466c      	mov	r4, sp
1006242a:	4907      	ldr	r1, [pc, #28]	@ (10062448 <__arm_cp.1_0>)
1006242c:	220c      	movs	r2, #12
1006242e:	4620      	mov	r0, r4
10062430:	f7e3 fd22 	bl	10045e78 <BLEPLAT_MemCpy>
10062434:	2000      	movs	r0, #0
10062436:	81e0      	strh	r0, [r4, #14]
10062438:	a805      	add	r0, sp, #20
1006243a:	4669      	mov	r1, sp
1006243c:	2210      	movs	r2, #16
1006243e:	f7e3 fd3b 	bl	10045eb8 <BLEPLAT_MemCmp>
10062442:	b00a      	add	sp, #40	@ 0x28
10062444:	bd70      	pop	{r4, r5, r6, pc}
10062446:	46c0      	nop			@ (mov r8, r8)

10062448 <__arm_cp.1_0>:
10062448:	1006d1ec 	.word	0x1006d1ec

1006244c <UUID_write_to_flat>:
1006244c:	b510      	push	{r4, lr}
1006244e:	460a      	mov	r2, r1
10062450:	4601      	mov	r1, r0
10062452:	7c00      	ldrb	r0, [r0, #16]
10062454:	2820      	cmp	r0, #32
10062456:	d004      	beq.n	10062462 <UUID_write_to_flat+0x16>
10062458:	2810      	cmp	r0, #16
1006245a:	d105      	bne.n	10062468 <UUID_write_to_flat+0x1c>
1006245c:	310c      	adds	r1, #12
1006245e:	2402      	movs	r4, #2
10062460:	e003      	b.n	1006246a <UUID_write_to_flat+0x1e>
10062462:	310c      	adds	r1, #12
10062464:	2404      	movs	r4, #4
10062466:	e000      	b.n	1006246a <UUID_write_to_flat+0x1e>
10062468:	2410      	movs	r4, #16
1006246a:	4610      	mov	r0, r2
1006246c:	4622      	mov	r2, r4
1006246e:	f7e3 fd03 	bl	10045e78 <BLEPLAT_MemCpy>
10062472:	4620      	mov	r0, r4
10062474:	bd10      	pop	{r4, pc}

10062476 <UUID_get_value_p>:
10062476:	7c01      	ldrb	r1, [r0, #16]
10062478:	2980      	cmp	r1, #128	@ 0x80
1006247a:	d000      	beq.n	1006247e <UUID_get_value_p+0x8>
1006247c:	300c      	adds	r0, #12
1006247e:	4770      	bx	lr

10062480 <ACL_list_init>:
10062480:	2100      	movs	r1, #0
10062482:	6001      	str	r1, [r0, #0]
10062484:	6040      	str	r0, [r0, #4]
10062486:	4770      	bx	lr

10062488 <ACL_list_insert_tail>:
10062488:	2200      	movs	r2, #0
1006248a:	61ca      	str	r2, [r1, #28]
1006248c:	6842      	ldr	r2, [r0, #4]
1006248e:	6011      	str	r1, [r2, #0]
10062490:	311c      	adds	r1, #28
10062492:	6041      	str	r1, [r0, #4]
10062494:	4770      	bx	lr

10062496 <ACL_list_insert_head>:
10062496:	6802      	ldr	r2, [r0, #0]
10062498:	61ca      	str	r2, [r1, #28]
1006249a:	2a00      	cmp	r2, #0
1006249c:	d102      	bne.n	100624a4 <ACL_list_insert_head+0xe>
1006249e:	460a      	mov	r2, r1
100624a0:	321c      	adds	r2, #28
100624a2:	6042      	str	r2, [r0, #4]
100624a4:	6001      	str	r1, [r0, #0]
100624a6:	4770      	bx	lr

100624a8 <ACL_list_remove>:
100624a8:	6803      	ldr	r3, [r0, #0]
100624aa:	428b      	cmp	r3, r1
100624ac:	d009      	beq.n	100624c2 <ACL_list_remove+0x1a>
100624ae:	461a      	mov	r2, r3
100624b0:	69db      	ldr	r3, [r3, #28]
100624b2:	428b      	cmp	r3, r1
100624b4:	d1fb      	bne.n	100624ae <ACL_list_remove+0x6>
100624b6:	69cb      	ldr	r3, [r1, #28]
100624b8:	61d3      	str	r3, [r2, #28]
100624ba:	2b00      	cmp	r3, #0
100624bc:	d107      	bne.n	100624ce <ACL_list_remove+0x26>
100624be:	321c      	adds	r2, #28
100624c0:	e004      	b.n	100624cc <ACL_list_remove+0x24>
100624c2:	69ca      	ldr	r2, [r1, #28]
100624c4:	6002      	str	r2, [r0, #0]
100624c6:	2a00      	cmp	r2, #0
100624c8:	d101      	bne.n	100624ce <ACL_list_remove+0x26>
100624ca:	4602      	mov	r2, r0
100624cc:	6042      	str	r2, [r0, #4]
100624ce:	2000      	movs	r0, #0
100624d0:	61c8      	str	r0, [r1, #28]
100624d2:	4770      	bx	lr

100624d4 <ACL_list_remove_head>:
100624d4:	4601      	mov	r1, r0
100624d6:	6800      	ldr	r0, [r0, #0]
100624d8:	69c2      	ldr	r2, [r0, #28]
100624da:	600a      	str	r2, [r1, #0]
100624dc:	2a00      	cmp	r2, #0
100624de:	d100      	bne.n	100624e2 <ACL_list_remove_head+0xe>
100624e0:	6049      	str	r1, [r1, #4]
100624e2:	2100      	movs	r1, #0
100624e4:	61c1      	str	r1, [r0, #28]
100624e6:	4770      	bx	lr

100624e8 <ACL_list_get_pckt_count>:
100624e8:	2100      	movs	r1, #0
100624ea:	6800      	ldr	r0, [r0, #0]
100624ec:	2800      	cmp	r0, #0
100624ee:	d002      	beq.n	100624f6 <ACL_list_get_pckt_count+0xe>
100624f0:	301c      	adds	r0, #28
100624f2:	1c49      	adds	r1, r1, #1
100624f4:	e7f9      	b.n	100624ea <ACL_list_get_pckt_count+0x2>
100624f6:	b288      	uxth	r0, r1
100624f8:	4770      	bx	lr
	...

100624fc <addr8_list_search>:
100624fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100624fe:	b087      	sub	sp, #28
10062500:	4604      	mov	r4, r0
10062502:	0608      	lsls	r0, r1, #24
10062504:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10062506:	d052      	beq.n	100625ae <addr8_list_search+0xb2>
10062508:	9501      	str	r5, [sp, #4]
1006250a:	20ff      	movs	r0, #255	@ 0xff
1006250c:	4615      	mov	r5, r2
1006250e:	4385      	bics	r5, r0
10062510:	2601      	movs	r6, #1
10062512:	9305      	str	r3, [sp, #20]
10062514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10062516:	461f      	mov	r7, r3
10062518:	9600      	str	r6, [sp, #0]
1006251a:	4037      	ands	r7, r6
1006251c:	9703      	str	r7, [sp, #12]
1006251e:	427e      	negs	r6, r7
10062520:	4016      	ands	r6, r2
10062522:	b2f2      	uxtb	r2, r6
10062524:	1952      	adds	r2, r2, r5
10062526:	9206      	str	r2, [sp, #24]
10062528:	4d25      	ldr	r5, [pc, #148]	@ (100625c0 <__arm_cp.0_0>)
1006252a:	9f05      	ldr	r7, [sp, #20]
1006252c:	463a      	mov	r2, r7
1006252e:	402a      	ands	r2, r5
10062530:	461e      	mov	r6, r3
10062532:	079d      	lsls	r5, r3, #30
10062534:	17ed      	asrs	r5, r5, #31
10062536:	403d      	ands	r5, r7
10062538:	9004      	str	r0, [sp, #16]
1006253a:	0603      	lsls	r3, r0, #24
1006253c:	402b      	ands	r3, r5
1006253e:	189b      	adds	r3, r3, r2
10062540:	2002      	movs	r0, #2
10062542:	4030      	ands	r0, r6
10062544:	9002      	str	r0, [sp, #8]
10062546:	1e48      	subs	r0, r1, #1
10062548:	9005      	str	r0, [sp, #20]
1006254a:	b2c8      	uxtb	r0, r1
1006254c:	0841      	lsrs	r1, r0, #1
1006254e:	2600      	movs	r6, #0
10062550:	b2c8      	uxtb	r0, r1
10062552:	00c2      	lsls	r2, r0, #3
10062554:	18a0      	adds	r0, r4, r2
10062556:	6845      	ldr	r5, [r0, #4]
10062558:	9802      	ldr	r0, [sp, #8]
1006255a:	2800      	cmp	r0, #0
1006255c:	d101      	bne.n	10062562 <addr8_list_search+0x66>
1006255e:	4818      	ldr	r0, [pc, #96]	@ (100625c0 <__arm_cp.0_0>)
10062560:	4005      	ands	r5, r0
10062562:	58a0      	ldr	r0, [r4, r2]
10062564:	4602      	mov	r2, r0
10062566:	9f04      	ldr	r7, [sp, #16]
10062568:	43ba      	bics	r2, r7
1006256a:	9f03      	ldr	r7, [sp, #12]
1006256c:	2f00      	cmp	r7, #0
1006256e:	d101      	bne.n	10062574 <addr8_list_search+0x78>
10062570:	4638      	mov	r0, r7
10062572:	e000      	b.n	10062576 <addr8_list_search+0x7a>
10062574:	b2c0      	uxtb	r0, r0
10062576:	1882      	adds	r2, r0, r2
10062578:	9806      	ldr	r0, [sp, #24]
1006257a:	4290      	cmp	r0, r2
1006257c:	d101      	bne.n	10062582 <addr8_list_search+0x86>
1006257e:	42ab      	cmp	r3, r5
10062580:	d018      	beq.n	100625b4 <addr8_list_search+0xb8>
10062582:	42ab      	cmp	r3, r5
10062584:	d803      	bhi.n	1006258e <addr8_list_search+0x92>
10062586:	d104      	bne.n	10062592 <addr8_list_search+0x96>
10062588:	9806      	ldr	r0, [sp, #24]
1006258a:	4290      	cmp	r0, r2
1006258c:	d901      	bls.n	10062592 <addr8_list_search+0x96>
1006258e:	1c4e      	adds	r6, r1, #1
10062590:	e001      	b.n	10062596 <addr8_list_search+0x9a>
10062592:	1e48      	subs	r0, r1, #1
10062594:	9005      	str	r0, [sp, #20]
10062596:	9805      	ldr	r0, [sp, #20]
10062598:	1b80      	subs	r0, r0, r6
1006259a:	b2c0      	uxtb	r0, r0
1006259c:	1c40      	adds	r0, r0, #1
1006259e:	b2c2      	uxtb	r2, r0
100625a0:	0851      	lsrs	r1, r2, #1
100625a2:	1989      	adds	r1, r1, r6
100625a4:	4282      	cmp	r2, r0
100625a6:	d0d3      	beq.n	10062550 <addr8_list_search+0x54>
100625a8:	2000      	movs	r0, #0
100625aa:	9d01      	ldr	r5, [sp, #4]
100625ac:	e004      	b.n	100625b8 <addr8_list_search+0xbc>
100625ae:	2100      	movs	r1, #0
100625b0:	4608      	mov	r0, r1
100625b2:	e001      	b.n	100625b8 <addr8_list_search+0xbc>
100625b4:	9d01      	ldr	r5, [sp, #4]
100625b6:	9800      	ldr	r0, [sp, #0]
100625b8:	7029      	strb	r1, [r5, #0]
100625ba:	b007      	add	sp, #28
100625bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100625be:	46c0      	nop			@ (mov r8, r8)

100625c0 <__arm_cp.0_0>:
100625c0:	00ffffff 	.word	0x00ffffff

100625c4 <addr8_list_add>:
100625c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100625c6:	b089      	sub	sp, #36	@ 0x24
100625c8:	4615      	mov	r5, r2
100625ca:	460f      	mov	r7, r1
100625cc:	4604      	mov	r4, r0
100625ce:	7906      	ldrb	r6, [r0, #4]
100625d0:	6800      	ldr	r0, [r0, #0]
100625d2:	6861      	ldr	r1, [r4, #4]
100625d4:	aa08      	add	r2, sp, #32
100625d6:	9300      	str	r3, [sp, #0]
100625d8:	9201      	str	r2, [sp, #4]
100625da:	463a      	mov	r2, r7
100625dc:	462b      	mov	r3, r5
100625de:	f7ff ff8d 	bl	100624fc <addr8_list_search>
100625e2:	2100      	movs	r1, #0
100625e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100625e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100625e8:	2800      	cmp	r0, #0
100625ea:	9207      	str	r2, [sp, #28]
100625ec:	d126      	bne.n	1006263c <addr8_list_add+0x78>
100625ee:	9706      	str	r7, [sp, #24]
100625f0:	7967      	ldrb	r7, [r4, #5]
100625f2:	42be      	cmp	r6, r7
100625f4:	d222      	bcs.n	1006263c <addr8_list_add+0x78>
100625f6:	9302      	str	r3, [sp, #8]
100625f8:	9003      	str	r0, [sp, #12]
100625fa:	9504      	str	r5, [sp, #16]
100625fc:	a908      	add	r1, sp, #32
100625fe:	7808      	ldrb	r0, [r1, #0]
10062600:	9605      	str	r6, [sp, #20]
10062602:	4286      	cmp	r6, r0
10062604:	d00d      	beq.n	10062622 <addr8_list_add+0x5e>
10062606:	9f05      	ldr	r7, [sp, #20]
10062608:	6822      	ldr	r2, [r4, #0]
1006260a:	b2fd      	uxtb	r5, r7
1006260c:	00ed      	lsls	r5, r5, #3
1006260e:	1956      	adds	r6, r2, r5
10062610:	4633      	mov	r3, r6
10062612:	3b08      	subs	r3, #8
10062614:	cb0a      	ldmia	r3, {r1, r3}
10062616:	5151      	str	r1, [r2, r5]
10062618:	6073      	str	r3, [r6, #4]
1006261a:	1e7f      	subs	r7, r7, #1
1006261c:	b2f9      	uxtb	r1, r7
1006261e:	4281      	cmp	r1, r0
10062620:	d1f2      	bne.n	10062608 <addr8_list_add+0x44>
10062622:	6821      	ldr	r1, [r4, #0]
10062624:	00c0      	lsls	r0, r0, #3
10062626:	9a06      	ldr	r2, [sp, #24]
10062628:	500a      	str	r2, [r1, r0]
1006262a:	1808      	adds	r0, r1, r0
1006262c:	9904      	ldr	r1, [sp, #16]
1006262e:	6041      	str	r1, [r0, #4]
10062630:	9805      	ldr	r0, [sp, #20]
10062632:	1c40      	adds	r0, r0, #1
10062634:	7120      	strb	r0, [r4, #4]
10062636:	2101      	movs	r1, #1
10062638:	9803      	ldr	r0, [sp, #12]
1006263a:	9b02      	ldr	r3, [sp, #8]
1006263c:	9a08      	ldr	r2, [sp, #32]
1006263e:	9c07      	ldr	r4, [sp, #28]
10062640:	7022      	strb	r2, [r4, #0]
10062642:	7018      	strb	r0, [r3, #0]
10062644:	4608      	mov	r0, r1
10062646:	b009      	add	sp, #36	@ 0x24
10062648:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006264a <addr8_list_remove_by_addr>:
1006264a:	b5f0      	push	{r4, r5, r6, r7, lr}
1006264c:	b087      	sub	sp, #28
1006264e:	460f      	mov	r7, r1
10062650:	4601      	mov	r1, r0
10062652:	7900      	ldrb	r0, [r0, #4]
10062654:	2600      	movs	r6, #0
10062656:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10062658:	2800      	cmp	r0, #0
1006265a:	d02f      	beq.n	100626bc <addr8_list_remove_by_addr+0x72>
1006265c:	9003      	str	r0, [sp, #12]
1006265e:	6808      	ldr	r0, [r1, #0]
10062660:	9104      	str	r1, [sp, #16]
10062662:	6849      	ldr	r1, [r1, #4]
10062664:	9205      	str	r2, [sp, #20]
10062666:	ad06      	add	r5, sp, #24
10062668:	9300      	str	r3, [sp, #0]
1006266a:	9501      	str	r5, [sp, #4]
1006266c:	463a      	mov	r2, r7
1006266e:	9b05      	ldr	r3, [sp, #20]
10062670:	f7ff ff44 	bl	100624fc <addr8_list_search>
10062674:	2800      	cmp	r0, #0
10062676:	d021      	beq.n	100626bc <addr8_list_remove_by_addr+0x72>
10062678:	9002      	str	r0, [sp, #8]
1006267a:	9405      	str	r4, [sp, #20]
1006267c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1006267e:	9c04      	ldr	r4, [sp, #16]
10062680:	6823      	ldr	r3, [r4, #0]
10062682:	a906      	add	r1, sp, #24
10062684:	7809      	ldrb	r1, [r1, #0]
10062686:	00cd      	lsls	r5, r1, #3
10062688:	195b      	adds	r3, r3, r5
1006268a:	79db      	ldrb	r3, [r3, #7]
1006268c:	7013      	strb	r3, [r2, #0]
1006268e:	9803      	ldr	r0, [sp, #12]
10062690:	1e40      	subs	r0, r0, #1
10062692:	9003      	str	r0, [sp, #12]
10062694:	b2c0      	uxtb	r0, r0
10062696:	4281      	cmp	r1, r0
10062698:	4623      	mov	r3, r4
1006269a:	d00b      	beq.n	100626b4 <addr8_list_remove_by_addr+0x6a>
1006269c:	681d      	ldr	r5, [r3, #0]
1006269e:	b2ce      	uxtb	r6, r1
100626a0:	00f6      	lsls	r6, r6, #3
100626a2:	19af      	adds	r7, r5, r6
100626a4:	68ba      	ldr	r2, [r7, #8]
100626a6:	68fc      	ldr	r4, [r7, #12]
100626a8:	51aa      	str	r2, [r5, r6]
100626aa:	607c      	str	r4, [r7, #4]
100626ac:	1c49      	adds	r1, r1, #1
100626ae:	b2ca      	uxtb	r2, r1
100626b0:	4282      	cmp	r2, r0
100626b2:	d1f3      	bne.n	1006269c <addr8_list_remove_by_addr+0x52>
100626b4:	9803      	ldr	r0, [sp, #12]
100626b6:	7118      	strb	r0, [r3, #4]
100626b8:	9e02      	ldr	r6, [sp, #8]
100626ba:	9c05      	ldr	r4, [sp, #20]
100626bc:	7026      	strb	r6, [r4, #0]
100626be:	b007      	add	sp, #28
100626c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

100626c2 <addr8_list_clear>:
100626c2:	2100      	movs	r1, #0
100626c4:	7101      	strb	r1, [r0, #4]
100626c6:	4770      	bx	lr

100626c8 <AES_CMAC_Encrypt>:
100626c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100626ca:	b0b9      	sub	sp, #228	@ 0xe4
100626cc:	461c      	mov	r4, r3
100626ce:	460e      	mov	r6, r1
100626d0:	4607      	mov	r7, r0
100626d2:	ad01      	add	r5, sp, #4
100626d4:	2020      	movs	r0, #32
100626d6:	7128      	strb	r0, [r5, #4]
100626d8:	2010      	movs	r0, #16
100626da:	9038      	str	r0, [sp, #224]	@ 0xe0
100626dc:	900a      	str	r0, [sp, #40]	@ 0x28
100626de:	9203      	str	r2, [sp, #12]
100626e0:	2000      	movs	r0, #0
100626e2:	9000      	str	r0, [sp, #0]
100626e4:	4628      	mov	r0, r5
100626e6:	f7e3 fc45 	bl	10045f74 <BLEPLAT_AesCMACEncryptInit>
100626ea:	4628      	mov	r0, r5
100626ec:	4639      	mov	r1, r7
100626ee:	4632      	mov	r2, r6
100626f0:	f7e3 fc4d 	bl	10045f8e <BLEPLAT_AesCMACEncryptAppend>
100626f4:	466a      	mov	r2, sp
100626f6:	4628      	mov	r0, r5
100626f8:	4621      	mov	r1, r4
100626fa:	f7e3 fc59 	bl	10045fb0 <BLEPLAT_AesCMACEncryptFinish>
100626fe:	b039      	add	sp, #228	@ 0xe4
10062700:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062702 <BLEPLAT_aes128_encrypt>:
10062702:	b580      	push	{r7, lr}
10062704:	f7e3 fc26 	bl	10045f54 <BLEPLAT_AesEcbEncrypt>
10062708:	bd80      	pop	{r7, pc}

1006270a <Hal_Get_Random_Number>:
1006270a:	b51c      	push	{r2, r3, r4, lr}
1006270c:	ac01      	add	r4, sp, #4
1006270e:	4620      	mov	r0, r4
10062710:	f7e3 fc5f 	bl	10045fd2 <BLEPLAT_RngGetRandom16>
10062714:	8820      	ldrh	r0, [r4, #0]
10062716:	bd1c      	pop	{r2, r3, r4, pc}

10062718 <Hal_Get_Random_Number32>:
10062718:	b5e0      	push	{r5, r6, r7, lr}
1006271a:	a801      	add	r0, sp, #4
1006271c:	f7e3 fc65 	bl	10045fea <BLEPLAT_RngGetRandom32>
10062720:	9801      	ldr	r0, [sp, #4]
10062722:	bd8c      	pop	{r2, r3, r7, pc}

10062724 <HAL_Generate_Random_Bytes_To>:
10062724:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10062726:	460c      	mov	r4, r1
10062728:	4605      	mov	r5, r0
1006272a:	2000      	movs	r0, #0
1006272c:	b2c6      	uxtb	r6, r0
1006272e:	42a6      	cmp	r6, r4
10062730:	d20e      	bcs.n	10062750 <HAL_Generate_Random_Bytes_To+0x2c>
10062732:	2000      	movs	r0, #0
10062734:	f7ff ffe9 	bl	1006270a <Hal_Get_Random_Number>
10062738:	55a8      	strb	r0, [r5, r6]
1006273a:	a901      	add	r1, sp, #4
1006273c:	7008      	strb	r0, [r1, #0]
1006273e:	0a00      	lsrs	r0, r0, #8
10062740:	4669      	mov	r1, sp
10062742:	7008      	strb	r0, [r1, #0]
10062744:	1c71      	adds	r1, r6, #1
10062746:	42a1      	cmp	r1, r4
10062748:	d200      	bcs.n	1006274c <HAL_Generate_Random_Bytes_To+0x28>
1006274a:	5468      	strb	r0, [r5, r1]
1006274c:	1cb0      	adds	r0, r6, #2
1006274e:	e7ed      	b.n	1006272c <HAL_Generate_Random_Bytes_To+0x8>
10062750:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

10062754 <IDD_Initialize_Device_IDs>:
10062754:	b5f0      	push	{r4, r5, r6, r7, lr}
10062756:	b095      	sub	sp, #84	@ 0x54
10062758:	4839      	ldr	r0, [pc, #228]	@ (10062840 <__arm_cp.0_0>)
1006275a:	6800      	ldr	r0, [r0, #0]
1006275c:	9000      	str	r0, [sp, #0]
1006275e:	a80b      	add	r0, sp, #44	@ 0x2c
10062760:	f7ff fc28 	bl	10061fb4 <nvm_dev_id_data_get_record>
10062764:	2800      	cmp	r0, #0
10062766:	d031      	beq.n	100627cc <IDD_Initialize_Device_IDs+0x78>
10062768:	af01      	add	r7, sp, #4
1006276a:	2406      	movs	r4, #6
1006276c:	2500      	movs	r5, #0
1006276e:	4b35      	ldr	r3, [pc, #212]	@ (10062844 <__arm_cp.0_1>)
10062770:	4638      	mov	r0, r7
10062772:	4621      	mov	r1, r4
10062774:	462a      	mov	r2, r5
10062776:	4798      	blx	r3
10062778:	7978      	ldrb	r0, [r7, #5]
1006277a:	21c0      	movs	r1, #192	@ 0xc0
1006277c:	4301      	orrs	r1, r0
1006277e:	7179      	strb	r1, [r7, #5]
10062780:	ae0b      	add	r6, sp, #44	@ 0x2c
10062782:	4630      	mov	r0, r6
10062784:	3020      	adds	r0, #32
10062786:	4b30      	ldr	r3, [pc, #192]	@ (10062848 <__arm_cp.0_2>)
10062788:	4639      	mov	r1, r7
1006278a:	4622      	mov	r2, r4
1006278c:	4798      	blx	r3
1006278e:	ac07      	add	r4, sp, #28
10062790:	2710      	movs	r7, #16
10062792:	4620      	mov	r0, r4
10062794:	4639      	mov	r1, r7
10062796:	462a      	mov	r2, r5
10062798:	4b2a      	ldr	r3, [pc, #168]	@ (10062844 <__arm_cp.0_1>)
1006279a:	4798      	blx	r3
1006279c:	4630      	mov	r0, r6
1006279e:	4621      	mov	r1, r4
100627a0:	463a      	mov	r2, r7
100627a2:	4b29      	ldr	r3, [pc, #164]	@ (10062848 <__arm_cp.0_2>)
100627a4:	4798      	blx	r3
100627a6:	ac03      	add	r4, sp, #12
100627a8:	4620      	mov	r0, r4
100627aa:	4639      	mov	r1, r7
100627ac:	462a      	mov	r2, r5
100627ae:	4b25      	ldr	r3, [pc, #148]	@ (10062844 <__arm_cp.0_1>)
100627b0:	4798      	blx	r3
100627b2:	4630      	mov	r0, r6
100627b4:	3010      	adds	r0, #16
100627b6:	4621      	mov	r1, r4
100627b8:	463a      	mov	r2, r7
100627ba:	4b23      	ldr	r3, [pc, #140]	@ (10062848 <__arm_cp.0_2>)
100627bc:	4798      	blx	r3
100627be:	4630      	mov	r0, r6
100627c0:	f7ff fc05 	bl	10061fce <nvm_dev_id_data_add_record>
100627c4:	2800      	cmp	r0, #0
100627c6:	d103      	bne.n	100627d0 <IDD_Initialize_Device_IDs+0x7c>
100627c8:	4605      	mov	r5, r0
100627ca:	e003      	b.n	100627d4 <IDD_Initialize_Device_IDs+0x80>
100627cc:	2500      	movs	r5, #0
100627ce:	e001      	b.n	100627d4 <IDD_Initialize_Device_IDs+0x80>
100627d0:	200e      	movs	r0, #14
100627d2:	43c5      	mvns	r5, r0
100627d4:	4c1d      	ldr	r4, [pc, #116]	@ (1006284c <__arm_cp.0_3>)
100627d6:	6822      	ldr	r2, [r4, #0]
100627d8:	322e      	adds	r2, #46	@ 0x2e
100627da:	2600      	movs	r6, #0
100627dc:	2706      	movs	r7, #6
100627de:	4630      	mov	r0, r6
100627e0:	4639      	mov	r1, r7
100627e2:	f7ff fdd1 	bl	10062388 <is_Buffer_All_Set_To>
100627e6:	a90b      	add	r1, sp, #44	@ 0x2c
100627e8:	2800      	cmp	r0, #0
100627ea:	d001      	beq.n	100627f0 <IDD_Initialize_Device_IDs+0x9c>
100627ec:	3120      	adds	r1, #32
100627ee:	e001      	b.n	100627f4 <IDD_Initialize_Device_IDs+0xa0>
100627f0:	6821      	ldr	r1, [r4, #0]
100627f2:	312e      	adds	r1, #46	@ 0x2e
100627f4:	9800      	ldr	r0, [sp, #0]
100627f6:	3060      	adds	r0, #96	@ 0x60
100627f8:	463a      	mov	r2, r7
100627fa:	f7e3 fb3d 	bl	10045e78 <BLEPLAT_MemCpy>
100627fe:	6822      	ldr	r2, [r4, #0]
10062800:	3208      	adds	r2, #8
10062802:	2110      	movs	r1, #16
10062804:	4630      	mov	r0, r6
10062806:	f7ff fdbf 	bl	10062388 <is_Buffer_All_Set_To>
1006280a:	2800      	cmp	r0, #0
1006280c:	d005      	beq.n	1006281a <IDD_Initialize_Device_IDs+0xc6>
1006280e:	6820      	ldr	r0, [r4, #0]
10062810:	3008      	adds	r0, #8
10062812:	a90b      	add	r1, sp, #44	@ 0x2c
10062814:	2210      	movs	r2, #16
10062816:	f7e3 fb2f 	bl	10045e78 <BLEPLAT_MemCpy>
1006281a:	6822      	ldr	r2, [r4, #0]
1006281c:	3218      	adds	r2, #24
1006281e:	2000      	movs	r0, #0
10062820:	2110      	movs	r1, #16
10062822:	f7ff fdb1 	bl	10062388 <is_Buffer_All_Set_To>
10062826:	2800      	cmp	r0, #0
10062828:	d006      	beq.n	10062838 <IDD_Initialize_Device_IDs+0xe4>
1006282a:	a90b      	add	r1, sp, #44	@ 0x2c
1006282c:	3110      	adds	r1, #16
1006282e:	6820      	ldr	r0, [r4, #0]
10062830:	3018      	adds	r0, #24
10062832:	2210      	movs	r2, #16
10062834:	f7e3 fb20 	bl	10045e78 <BLEPLAT_MemCpy>
10062838:	b2e8      	uxtb	r0, r5
1006283a:	b015      	add	sp, #84	@ 0x54
1006283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006283e:	46c0      	nop			@ (mov r8, r8)

10062840 <__arm_cp.0_0>:
10062840:	20001128 	.word	0x20001128

10062844 <__arm_cp.0_1>:
10062844:	10062725 	.word	0x10062725

10062848 <__arm_cp.0_2>:
10062848:	10045e79 	.word	0x10045e79

1006284c <__arm_cp.0_3>:
1006284c:	20001120 	.word	0x20001120

10062850 <aci_gatt_clt_notification_event_notify>:
10062850:	b5b0      	push	{r4, r5, r7, lr}
10062852:	b0ff      	sub	sp, #508	@ 0x1fc
10062854:	b083      	sub	sp, #12
10062856:	461c      	mov	r4, r3
10062858:	466d      	mov	r5, sp
1006285a:	732b      	strb	r3, [r5, #12]
1006285c:	72aa      	strb	r2, [r5, #10]
1006285e:	7229      	strb	r1, [r5, #8]
10062860:	71a8      	strb	r0, [r5, #6]
10062862:	0a1b      	lsrs	r3, r3, #8
10062864:	736b      	strb	r3, [r5, #13]
10062866:	0a12      	lsrs	r2, r2, #8
10062868:	72ea      	strb	r2, [r5, #11]
1006286a:	0a09      	lsrs	r1, r1, #8
1006286c:	7269      	strb	r1, [r5, #9]
1006286e:	0a00      	lsrs	r0, r0, #8
10062870:	71e8      	strb	r0, [r5, #7]
10062872:	4628      	mov	r0, r5
10062874:	300e      	adds	r0, #14
10062876:	9986      	ldr	r1, [sp, #536]	@ 0x218
10062878:	4622      	mov	r2, r4
1006287a:	f7e3 fafd 	bl	10045e78 <BLEPLAT_MemCpy>
1006287e:	4620      	mov	r0, r4
10062880:	300a      	adds	r0, #10
10062882:	70a8      	strb	r0, [r5, #2]
10062884:	0a00      	lsrs	r0, r0, #8
10062886:	70e8      	strb	r0, [r5, #3]
10062888:	200f      	movs	r0, #15
1006288a:	7128      	strb	r0, [r5, #4]
1006288c:	20ff      	movs	r0, #255	@ 0xff
1006288e:	7068      	strb	r0, [r5, #1]
10062890:	2082      	movs	r0, #130	@ 0x82
10062892:	7028      	strb	r0, [r5, #0]
10062894:	200c      	movs	r0, #12
10062896:	7168      	strb	r0, [r5, #5]
10062898:	340e      	adds	r4, #14
1006289a:	b2a1      	uxth	r1, r4
1006289c:	4628      	mov	r0, r5
1006289e:	f7ef f915 	bl	10051acc <BLE_STACK_Event>
100628a2:	b07f      	add	sp, #508	@ 0x1fc
100628a4:	b003      	add	sp, #12
100628a6:	bdb0      	pop	{r4, r5, r7, pc}

100628a8 <aci_gatt_clt_indication_event_cb>:
100628a8:	b5b0      	push	{r4, r5, r7, lr}
100628aa:	b0ff      	sub	sp, #508	@ 0x1fc
100628ac:	b083      	sub	sp, #12
100628ae:	460c      	mov	r4, r1
100628b0:	4605      	mov	r5, r0
100628b2:	688b      	ldr	r3, [r1, #8]
100628b4:	88ca      	ldrh	r2, [r1, #6]
100628b6:	8889      	ldrh	r1, [r1, #4]
100628b8:	4668      	mov	r0, sp
100628ba:	1d80      	adds	r0, r0, #6
100628bc:	f7f1 fa69 	bl	10053d92 <aci_gatt_clt_indication_event_copy>
100628c0:	0728      	lsls	r0, r5, #28
100628c2:	d502      	bpl.n	100628ca <aci_gatt_clt_indication_event_cb+0x22>
100628c4:	68a0      	ldr	r0, [r4, #8]
100628c6:	f7f0 fbf9 	bl	100530bc <ACL_pkt_release>
100628ca:	9903      	ldr	r1, [sp, #12]
100628cc:	460a      	mov	r2, r1
100628ce:	320a      	adds	r2, #10
100628d0:	4668      	mov	r0, sp
100628d2:	7082      	strb	r2, [r0, #2]
100628d4:	0a12      	lsrs	r2, r2, #8
100628d6:	70c2      	strb	r2, [r0, #3]
100628d8:	220e      	movs	r2, #14
100628da:	7102      	strb	r2, [r0, #4]
100628dc:	4a05      	ldr	r2, [pc, #20]	@ (100628f4 <__arm_cp.1_0>)
100628de:	8002      	strh	r2, [r0, #0]
100628e0:	220c      	movs	r2, #12
100628e2:	7142      	strb	r2, [r0, #5]
100628e4:	310e      	adds	r1, #14
100628e6:	b289      	uxth	r1, r1
100628e8:	f7ef f8f0 	bl	10051acc <BLE_STACK_Event>
100628ec:	b07f      	add	sp, #508	@ 0x1fc
100628ee:	b003      	add	sp, #12
100628f0:	bdb0      	pop	{r4, r5, r7, pc}
100628f2:	46c0      	nop			@ (mov r8, r8)

100628f4 <__arm_cp.1_0>:
100628f4:	0000ff82 	.word	0x0000ff82

100628f8 <aci_gatt_clt_notification_event_cb>:
100628f8:	b5b0      	push	{r4, r5, r7, lr}
100628fa:	b0ff      	sub	sp, #508	@ 0x1fc
100628fc:	b085      	sub	sp, #20
100628fe:	460c      	mov	r4, r1
10062900:	4605      	mov	r5, r0
10062902:	688b      	ldr	r3, [r1, #8]
10062904:	88ca      	ldrh	r2, [r1, #6]
10062906:	8889      	ldrh	r1, [r1, #4]
10062908:	a802      	add	r0, sp, #8
1006290a:	1d80      	adds	r0, r0, #6
1006290c:	f7f1 fa66 	bl	10053ddc <aci_gatt_clt_notification_event_copy>
10062910:	0728      	lsls	r0, r5, #28
10062912:	d502      	bpl.n	1006291a <aci_gatt_clt_notification_event_cb+0x22>
10062914:	68a0      	ldr	r0, [r4, #8]
10062916:	f7f0 fbd1 	bl	100530bc <ACL_pkt_release>
1006291a:	ac02      	add	r4, sp, #8
1006291c:	89a3      	ldrh	r3, [r4, #12]
1006291e:	8962      	ldrh	r2, [r4, #10]
10062920:	8921      	ldrh	r1, [r4, #8]
10062922:	88e0      	ldrh	r0, [r4, #6]
10062924:	340e      	adds	r4, #14
10062926:	9400      	str	r4, [sp, #0]
10062928:	f7ff ff92 	bl	10062850 <aci_gatt_clt_notification_event_notify>
1006292c:	b07f      	add	sp, #508	@ 0x1fc
1006292e:	b005      	add	sp, #20
10062930:	bdb0      	pop	{r4, r5, r7, pc}
	...

10062934 <aci_gatt_srv_write_event_cb>:
10062934:	b5f0      	push	{r4, r5, r6, r7, lr}
10062936:	b0ff      	sub	sp, #508	@ 0x1fc
10062938:	b086      	sub	sp, #24
1006293a:	460c      	mov	r4, r1
1006293c:	4605      	mov	r5, r0
1006293e:	7a0b      	ldrb	r3, [r1, #8]
10062940:	88ca      	ldrh	r2, [r1, #6]
10062942:	8889      	ldrh	r1, [r1, #4]
10062944:	8960      	ldrh	r0, [r4, #10]
10062946:	89a6      	ldrh	r6, [r4, #12]
10062948:	6927      	ldr	r7, [r4, #16]
1006294a:	9000      	str	r0, [sp, #0]
1006294c:	9601      	str	r6, [sp, #4]
1006294e:	9702      	str	r7, [sp, #8]
10062950:	a803      	add	r0, sp, #12
10062952:	1d80      	adds	r0, r0, #6
10062954:	f7f1 fa8b 	bl	10053e6e <aci_gatt_srv_write_event_copy>
10062958:	0728      	lsls	r0, r5, #28
1006295a:	d502      	bpl.n	10062962 <aci_gatt_srv_write_event_cb+0x2e>
1006295c:	6920      	ldr	r0, [r4, #16]
1006295e:	f7f0 fbad 	bl	100530bc <ACL_pkt_release>
10062962:	a803      	add	r0, sp, #12
10062964:	7b41      	ldrb	r1, [r0, #13]
10062966:	7b82      	ldrb	r2, [r0, #14]
10062968:	0212      	lsls	r2, r2, #8
1006296a:	1851      	adds	r1, r2, r1
1006296c:	460a      	mov	r2, r1
1006296e:	320b      	adds	r2, #11
10062970:	7082      	strb	r2, [r0, #2]
10062972:	0a12      	lsrs	r2, r2, #8
10062974:	70c2      	strb	r2, [r0, #3]
10062976:	221a      	movs	r2, #26
10062978:	7102      	strb	r2, [r0, #4]
1006297a:	4a05      	ldr	r2, [pc, #20]	@ (10062990 <__arm_cp.3_0>)
1006297c:	8002      	strh	r2, [r0, #0]
1006297e:	220c      	movs	r2, #12
10062980:	7142      	strb	r2, [r0, #5]
10062982:	310f      	adds	r1, #15
10062984:	b289      	uxth	r1, r1
10062986:	f7ef f8a1 	bl	10051acc <BLE_STACK_Event>
1006298a:	b07f      	add	sp, #508	@ 0x1fc
1006298c:	b006      	add	sp, #24
1006298e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062990 <__arm_cp.3_0>:
10062990:	0000ff82 	.word	0x0000ff82

10062994 <aci_gatt_clt_multi_notification_int_event_cb>:
10062994:	b5f0      	push	{r4, r5, r6, r7, lr}
10062996:	b0ff      	sub	sp, #508	@ 0x1fc
10062998:	b08c      	sub	sp, #48	@ 0x30
1006299a:	460c      	mov	r4, r1
1006299c:	4605      	mov	r5, r0
1006299e:	688b      	ldr	r3, [r1, #8]
100629a0:	88ca      	ldrh	r2, [r1, #6]
100629a2:	8889      	ldrh	r1, [r1, #4]
100629a4:	a807      	add	r0, sp, #28
100629a6:	1d80      	adds	r0, r0, #6
100629a8:	f7f1 fa99 	bl	10053ede <aci_gatt_clt_multi_notification_int_event_copy>
100629ac:	0728      	lsls	r0, r5, #28
100629ae:	d502      	bpl.n	100629b6 <aci_gatt_clt_multi_notification_int_event_cb+0x22>
100629b0:	68a0      	ldr	r0, [r4, #8]
100629b2:	f7f0 fb83 	bl	100530bc <ACL_pkt_release>
100629b6:	a807      	add	r0, sp, #28
100629b8:	8941      	ldrh	r1, [r0, #10]
100629ba:	9105      	str	r1, [sp, #20]
100629bc:	8901      	ldrh	r1, [r0, #8]
100629be:	9103      	str	r1, [sp, #12]
100629c0:	88c1      	ldrh	r1, [r0, #6]
100629c2:	9102      	str	r1, [sp, #8]
100629c4:	300c      	adds	r0, #12
100629c6:	9004      	str	r0, [sp, #16]
100629c8:	2500      	movs	r5, #0
100629ca:	9e04      	ldr	r6, [sp, #16]
100629cc:	b2a8      	uxth	r0, r5
100629ce:	9905      	ldr	r1, [sp, #20]
100629d0:	4288      	cmp	r0, r1
100629d2:	d21c      	bcs.n	10062a0e <aci_gatt_clt_multi_notification_int_event_cb+0x7a>
100629d4:	1831      	adds	r1, r6, r0
100629d6:	a88a      	add	r0, sp, #552	@ 0x228
100629d8:	9006      	str	r0, [sp, #24]
100629da:	2402      	movs	r4, #2
100629dc:	4622      	mov	r2, r4
100629de:	f7e3 fa4b 	bl	10045e78 <BLEPLAT_MemCpy>
100629e2:	1ca8      	adds	r0, r5, #2
100629e4:	b280      	uxth	r0, r0
100629e6:	1831      	adds	r1, r6, r0
100629e8:	af89      	add	r7, sp, #548	@ 0x224
100629ea:	4638      	mov	r0, r7
100629ec:	4622      	mov	r2, r4
100629ee:	f7e3 fa43 	bl	10045e78 <BLEPLAT_MemCpy>
100629f2:	1d28      	adds	r0, r5, #4
100629f4:	b284      	uxth	r4, r0
100629f6:	1930      	adds	r0, r6, r4
100629f8:	883b      	ldrh	r3, [r7, #0]
100629fa:	9906      	ldr	r1, [sp, #24]
100629fc:	880a      	ldrh	r2, [r1, #0]
100629fe:	9000      	str	r0, [sp, #0]
10062a00:	9802      	ldr	r0, [sp, #8]
10062a02:	9903      	ldr	r1, [sp, #12]
10062a04:	f7ff ff24 	bl	10062850 <aci_gatt_clt_notification_event_notify>
10062a08:	8838      	ldrh	r0, [r7, #0]
10062a0a:	1825      	adds	r5, r4, r0
10062a0c:	e7de      	b.n	100629cc <aci_gatt_clt_multi_notification_int_event_cb+0x38>
10062a0e:	b07f      	add	sp, #508	@ 0x1fc
10062a10:	b00c      	add	sp, #48	@ 0x30
10062a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062a14 <aci_att_clt_find_info_resp_event_cb>:
10062a14:	b5b0      	push	{r4, r5, r7, lr}
10062a16:	b0ff      	sub	sp, #508	@ 0x1fc
10062a18:	b083      	sub	sp, #12
10062a1a:	460c      	mov	r4, r1
10062a1c:	4605      	mov	r5, r0
10062a1e:	688b      	ldr	r3, [r1, #8]
10062a20:	88ca      	ldrh	r2, [r1, #6]
10062a22:	8889      	ldrh	r1, [r1, #4]
10062a24:	4668      	mov	r0, sp
10062a26:	1d80      	adds	r0, r0, #6
10062a28:	f7f1 f8d2 	bl	10053bd0 <aci_att_clt_find_info_resp_event_copy>
10062a2c:	0728      	lsls	r0, r5, #28
10062a2e:	d502      	bpl.n	10062a36 <aci_att_clt_find_info_resp_event_cb+0x22>
10062a30:	68a0      	ldr	r0, [r4, #8]
10062a32:	f7f0 fb43 	bl	100530bc <ACL_pkt_release>
10062a36:	4668      	mov	r0, sp
10062a38:	7ac1      	ldrb	r1, [r0, #11]
10062a3a:	9a03      	ldr	r2, [sp, #12]
10062a3c:	0212      	lsls	r2, r2, #8
10062a3e:	1851      	adds	r1, r2, r1
10062a40:	460a      	mov	r2, r1
10062a42:	3209      	adds	r2, #9
10062a44:	7082      	strb	r2, [r0, #2]
10062a46:	0a12      	lsrs	r2, r2, #8
10062a48:	70c2      	strb	r2, [r0, #3]
10062a4a:	2204      	movs	r2, #4
10062a4c:	7102      	strb	r2, [r0, #4]
10062a4e:	4a05      	ldr	r2, [pc, #20]	@ (10062a64 <__arm_cp.5_0>)
10062a50:	8002      	strh	r2, [r0, #0]
10062a52:	220c      	movs	r2, #12
10062a54:	7142      	strb	r2, [r0, #5]
10062a56:	310d      	adds	r1, #13
10062a58:	b289      	uxth	r1, r1
10062a5a:	f7ef f837 	bl	10051acc <BLE_STACK_Event>
10062a5e:	b07f      	add	sp, #508	@ 0x1fc
10062a60:	b003      	add	sp, #12
10062a62:	bdb0      	pop	{r4, r5, r7, pc}

10062a64 <__arm_cp.5_0>:
10062a64:	0000ff82 	.word	0x0000ff82

10062a68 <aci_att_clt_find_by_type_value_resp_event_cb>:
10062a68:	b5b0      	push	{r4, r5, r7, lr}
10062a6a:	b0ff      	sub	sp, #508	@ 0x1fc
10062a6c:	b083      	sub	sp, #12
10062a6e:	460c      	mov	r4, r1
10062a70:	4605      	mov	r5, r0
10062a72:	688b      	ldr	r3, [r1, #8]
10062a74:	88ca      	ldrh	r2, [r1, #6]
10062a76:	8889      	ldrh	r1, [r1, #4]
10062a78:	4668      	mov	r0, sp
10062a7a:	1d80      	adds	r0, r0, #6
10062a7c:	f7f1 f8c6 	bl	10053c0c <aci_att_clt_find_by_type_value_resp_event_copy>
10062a80:	0728      	lsls	r0, r5, #28
10062a82:	d502      	bpl.n	10062a8a <aci_att_clt_find_by_type_value_resp_event_cb+0x22>
10062a84:	68a0      	ldr	r0, [r4, #8]
10062a86:	f7f0 fb19 	bl	100530bc <ACL_pkt_release>
10062a8a:	4668      	mov	r0, sp
10062a8c:	7a81      	ldrb	r1, [r0, #10]
10062a8e:	0089      	lsls	r1, r1, #2
10062a90:	1dca      	adds	r2, r1, #7
10062a92:	7082      	strb	r2, [r0, #2]
10062a94:	0a12      	lsrs	r2, r2, #8
10062a96:	70c2      	strb	r2, [r0, #3]
10062a98:	2205      	movs	r2, #5
10062a9a:	7102      	strb	r2, [r0, #4]
10062a9c:	4a04      	ldr	r2, [pc, #16]	@ (10062ab0 <__arm_cp.6_0>)
10062a9e:	8002      	strh	r2, [r0, #0]
10062aa0:	220c      	movs	r2, #12
10062aa2:	7142      	strb	r2, [r0, #5]
10062aa4:	310b      	adds	r1, #11
10062aa6:	f7ef f811 	bl	10051acc <BLE_STACK_Event>
10062aaa:	b07f      	add	sp, #508	@ 0x1fc
10062aac:	b003      	add	sp, #12
10062aae:	bdb0      	pop	{r4, r5, r7, pc}

10062ab0 <__arm_cp.6_0>:
10062ab0:	0000ff82 	.word	0x0000ff82

10062ab4 <aci_att_clt_read_by_type_resp_event_cb>:
10062ab4:	b5b0      	push	{r4, r5, r7, lr}
10062ab6:	b0ff      	sub	sp, #508	@ 0x1fc
10062ab8:	b083      	sub	sp, #12
10062aba:	460c      	mov	r4, r1
10062abc:	4605      	mov	r5, r0
10062abe:	688b      	ldr	r3, [r1, #8]
10062ac0:	88ca      	ldrh	r2, [r1, #6]
10062ac2:	8889      	ldrh	r1, [r1, #4]
10062ac4:	4668      	mov	r0, sp
10062ac6:	1d80      	adds	r0, r0, #6
10062ac8:	f7f1 f8b5 	bl	10053c36 <aci_att_clt_read_by_type_resp_event_copy>
10062acc:	0728      	lsls	r0, r5, #28
10062ace:	d502      	bpl.n	10062ad6 <aci_att_clt_read_by_type_resp_event_cb+0x22>
10062ad0:	68a0      	ldr	r0, [r4, #8]
10062ad2:	f7f0 faf3 	bl	100530bc <ACL_pkt_release>
10062ad6:	4668      	mov	r0, sp
10062ad8:	7ac1      	ldrb	r1, [r0, #11]
10062ada:	9a03      	ldr	r2, [sp, #12]
10062adc:	0212      	lsls	r2, r2, #8
10062ade:	1851      	adds	r1, r2, r1
10062ae0:	460a      	mov	r2, r1
10062ae2:	3209      	adds	r2, #9
10062ae4:	7082      	strb	r2, [r0, #2]
10062ae6:	0a12      	lsrs	r2, r2, #8
10062ae8:	70c2      	strb	r2, [r0, #3]
10062aea:	2206      	movs	r2, #6
10062aec:	7102      	strb	r2, [r0, #4]
10062aee:	4a05      	ldr	r2, [pc, #20]	@ (10062b04 <__arm_cp.7_0>)
10062af0:	8002      	strh	r2, [r0, #0]
10062af2:	220c      	movs	r2, #12
10062af4:	7142      	strb	r2, [r0, #5]
10062af6:	310d      	adds	r1, #13
10062af8:	b289      	uxth	r1, r1
10062afa:	f7ee ffe7 	bl	10051acc <BLE_STACK_Event>
10062afe:	b07f      	add	sp, #508	@ 0x1fc
10062b00:	b003      	add	sp, #12
10062b02:	bdb0      	pop	{r4, r5, r7, pc}

10062b04 <__arm_cp.7_0>:
10062b04:	0000ff82 	.word	0x0000ff82

10062b08 <aci_att_clt_read_resp_event_cb>:
10062b08:	b5b0      	push	{r4, r5, r7, lr}
10062b0a:	b0ff      	sub	sp, #508	@ 0x1fc
10062b0c:	b083      	sub	sp, #12
10062b0e:	460c      	mov	r4, r1
10062b10:	4605      	mov	r5, r0
10062b12:	688b      	ldr	r3, [r1, #8]
10062b14:	88ca      	ldrh	r2, [r1, #6]
10062b16:	8889      	ldrh	r1, [r1, #4]
10062b18:	4668      	mov	r0, sp
10062b1a:	1d80      	adds	r0, r0, #6
10062b1c:	f7f1 f8a9 	bl	10053c72 <aci_att_clt_read_resp_event_copy>
10062b20:	0728      	lsls	r0, r5, #28
10062b22:	d502      	bpl.n	10062b2a <aci_att_clt_read_resp_event_cb+0x22>
10062b24:	68a0      	ldr	r0, [r4, #8]
10062b26:	f7f0 fac9 	bl	100530bc <ACL_pkt_release>
10062b2a:	4668      	mov	r0, sp
10062b2c:	8941      	ldrh	r1, [r0, #10]
10062b2e:	460a      	mov	r2, r1
10062b30:	3208      	adds	r2, #8
10062b32:	7082      	strb	r2, [r0, #2]
10062b34:	0a12      	lsrs	r2, r2, #8
10062b36:	70c2      	strb	r2, [r0, #3]
10062b38:	2207      	movs	r2, #7
10062b3a:	7102      	strb	r2, [r0, #4]
10062b3c:	4a05      	ldr	r2, [pc, #20]	@ (10062b54 <__arm_cp.8_0>)
10062b3e:	8002      	strh	r2, [r0, #0]
10062b40:	220c      	movs	r2, #12
10062b42:	7142      	strb	r2, [r0, #5]
10062b44:	310c      	adds	r1, #12
10062b46:	b289      	uxth	r1, r1
10062b48:	f7ee ffc0 	bl	10051acc <BLE_STACK_Event>
10062b4c:	b07f      	add	sp, #508	@ 0x1fc
10062b4e:	b003      	add	sp, #12
10062b50:	bdb0      	pop	{r4, r5, r7, pc}
10062b52:	46c0      	nop			@ (mov r8, r8)

10062b54 <__arm_cp.8_0>:
10062b54:	0000ff82 	.word	0x0000ff82

10062b58 <aci_att_clt_read_blob_resp_event_cb>:
10062b58:	b5b0      	push	{r4, r5, r7, lr}
10062b5a:	b0ff      	sub	sp, #508	@ 0x1fc
10062b5c:	b083      	sub	sp, #12
10062b5e:	460c      	mov	r4, r1
10062b60:	4605      	mov	r5, r0
10062b62:	688b      	ldr	r3, [r1, #8]
10062b64:	88ca      	ldrh	r2, [r1, #6]
10062b66:	8889      	ldrh	r1, [r1, #4]
10062b68:	4668      	mov	r0, sp
10062b6a:	1d80      	adds	r0, r0, #6
10062b6c:	f7f1 f897 	bl	10053c9e <aci_att_clt_read_blob_resp_event_copy>
10062b70:	0728      	lsls	r0, r5, #28
10062b72:	d502      	bpl.n	10062b7a <aci_att_clt_read_blob_resp_event_cb+0x22>
10062b74:	68a0      	ldr	r0, [r4, #8]
10062b76:	f7f0 faa1 	bl	100530bc <ACL_pkt_release>
10062b7a:	4668      	mov	r0, sp
10062b7c:	8941      	ldrh	r1, [r0, #10]
10062b7e:	460a      	mov	r2, r1
10062b80:	3208      	adds	r2, #8
10062b82:	7082      	strb	r2, [r0, #2]
10062b84:	0a12      	lsrs	r2, r2, #8
10062b86:	70c2      	strb	r2, [r0, #3]
10062b88:	2208      	movs	r2, #8
10062b8a:	7102      	strb	r2, [r0, #4]
10062b8c:	4a05      	ldr	r2, [pc, #20]	@ (10062ba4 <__arm_cp.9_0>)
10062b8e:	8002      	strh	r2, [r0, #0]
10062b90:	220c      	movs	r2, #12
10062b92:	7142      	strb	r2, [r0, #5]
10062b94:	310c      	adds	r1, #12
10062b96:	b289      	uxth	r1, r1
10062b98:	f7ee ff98 	bl	10051acc <BLE_STACK_Event>
10062b9c:	b07f      	add	sp, #508	@ 0x1fc
10062b9e:	b003      	add	sp, #12
10062ba0:	bdb0      	pop	{r4, r5, r7, pc}
10062ba2:	46c0      	nop			@ (mov r8, r8)

10062ba4 <__arm_cp.9_0>:
10062ba4:	0000ff82 	.word	0x0000ff82

10062ba8 <aci_att_clt_read_multiple_resp_event_cb>:
10062ba8:	b5b0      	push	{r4, r5, r7, lr}
10062baa:	b0ff      	sub	sp, #508	@ 0x1fc
10062bac:	b083      	sub	sp, #12
10062bae:	460c      	mov	r4, r1
10062bb0:	4605      	mov	r5, r0
10062bb2:	688b      	ldr	r3, [r1, #8]
10062bb4:	88ca      	ldrh	r2, [r1, #6]
10062bb6:	8889      	ldrh	r1, [r1, #4]
10062bb8:	4668      	mov	r0, sp
10062bba:	1d80      	adds	r0, r0, #6
10062bbc:	f7f1 f885 	bl	10053cca <aci_att_clt_read_multiple_resp_event_copy>
10062bc0:	0728      	lsls	r0, r5, #28
10062bc2:	d502      	bpl.n	10062bca <aci_att_clt_read_multiple_resp_event_cb+0x22>
10062bc4:	68a0      	ldr	r0, [r4, #8]
10062bc6:	f7f0 fa79 	bl	100530bc <ACL_pkt_release>
10062bca:	4668      	mov	r0, sp
10062bcc:	8941      	ldrh	r1, [r0, #10]
10062bce:	460a      	mov	r2, r1
10062bd0:	3208      	adds	r2, #8
10062bd2:	7082      	strb	r2, [r0, #2]
10062bd4:	0a12      	lsrs	r2, r2, #8
10062bd6:	70c2      	strb	r2, [r0, #3]
10062bd8:	2209      	movs	r2, #9
10062bda:	7102      	strb	r2, [r0, #4]
10062bdc:	4a05      	ldr	r2, [pc, #20]	@ (10062bf4 <__arm_cp.10_0>)
10062bde:	8002      	strh	r2, [r0, #0]
10062be0:	220c      	movs	r2, #12
10062be2:	7142      	strb	r2, [r0, #5]
10062be4:	310c      	adds	r1, #12
10062be6:	b289      	uxth	r1, r1
10062be8:	f7ee ff70 	bl	10051acc <BLE_STACK_Event>
10062bec:	b07f      	add	sp, #508	@ 0x1fc
10062bee:	b003      	add	sp, #12
10062bf0:	bdb0      	pop	{r4, r5, r7, pc}
10062bf2:	46c0      	nop			@ (mov r8, r8)

10062bf4 <__arm_cp.10_0>:
10062bf4:	0000ff82 	.word	0x0000ff82

10062bf8 <aci_att_clt_read_by_group_type_resp_event_cb>:
10062bf8:	b5b0      	push	{r4, r5, r7, lr}
10062bfa:	b0ff      	sub	sp, #508	@ 0x1fc
10062bfc:	b083      	sub	sp, #12
10062bfe:	460c      	mov	r4, r1
10062c00:	4605      	mov	r5, r0
10062c02:	688b      	ldr	r3, [r1, #8]
10062c04:	88ca      	ldrh	r2, [r1, #6]
10062c06:	8889      	ldrh	r1, [r1, #4]
10062c08:	4668      	mov	r0, sp
10062c0a:	1d80      	adds	r0, r0, #6
10062c0c:	f7f1 f873 	bl	10053cf6 <aci_att_clt_read_by_group_type_resp_event_copy>
10062c10:	0728      	lsls	r0, r5, #28
10062c12:	d502      	bpl.n	10062c1a <aci_att_clt_read_by_group_type_resp_event_cb+0x22>
10062c14:	68a0      	ldr	r0, [r4, #8]
10062c16:	f7f0 fa51 	bl	100530bc <ACL_pkt_release>
10062c1a:	4668      	mov	r0, sp
10062c1c:	7ac1      	ldrb	r1, [r0, #11]
10062c1e:	9a03      	ldr	r2, [sp, #12]
10062c20:	0212      	lsls	r2, r2, #8
10062c22:	1851      	adds	r1, r2, r1
10062c24:	460a      	mov	r2, r1
10062c26:	3209      	adds	r2, #9
10062c28:	7082      	strb	r2, [r0, #2]
10062c2a:	0a12      	lsrs	r2, r2, #8
10062c2c:	70c2      	strb	r2, [r0, #3]
10062c2e:	220a      	movs	r2, #10
10062c30:	7102      	strb	r2, [r0, #4]
10062c32:	4a05      	ldr	r2, [pc, #20]	@ (10062c48 <__arm_cp.11_0>)
10062c34:	8002      	strh	r2, [r0, #0]
10062c36:	220c      	movs	r2, #12
10062c38:	7142      	strb	r2, [r0, #5]
10062c3a:	310d      	adds	r1, #13
10062c3c:	b289      	uxth	r1, r1
10062c3e:	f7ee ff45 	bl	10051acc <BLE_STACK_Event>
10062c42:	b07f      	add	sp, #508	@ 0x1fc
10062c44:	b003      	add	sp, #12
10062c46:	bdb0      	pop	{r4, r5, r7, pc}

10062c48 <__arm_cp.11_0>:
10062c48:	0000ff82 	.word	0x0000ff82

10062c4c <aci_att_clt_prepare_write_resp_event_cb>:
10062c4c:	b5b0      	push	{r4, r5, r7, lr}
10062c4e:	b0ff      	sub	sp, #508	@ 0x1fc
10062c50:	b083      	sub	sp, #12
10062c52:	460c      	mov	r4, r1
10062c54:	4605      	mov	r5, r0
10062c56:	688b      	ldr	r3, [r1, #8]
10062c58:	88ca      	ldrh	r2, [r1, #6]
10062c5a:	8889      	ldrh	r1, [r1, #4]
10062c5c:	4668      	mov	r0, sp
10062c5e:	1d80      	adds	r0, r0, #6
10062c60:	f7f1 f867 	bl	10053d32 <aci_att_clt_prepare_write_resp_event_copy>
10062c64:	0728      	lsls	r0, r5, #28
10062c66:	d502      	bpl.n	10062c6e <aci_att_clt_prepare_write_resp_event_cb+0x22>
10062c68:	68a0      	ldr	r0, [r4, #8]
10062c6a:	f7f0 fa27 	bl	100530bc <ACL_pkt_release>
10062c6e:	4668      	mov	r0, sp
10062c70:	89c1      	ldrh	r1, [r0, #14]
10062c72:	460a      	mov	r2, r1
10062c74:	320c      	adds	r2, #12
10062c76:	7082      	strb	r2, [r0, #2]
10062c78:	0a12      	lsrs	r2, r2, #8
10062c7a:	70c2      	strb	r2, [r0, #3]
10062c7c:	220c      	movs	r2, #12
10062c7e:	7102      	strb	r2, [r0, #4]
10062c80:	4b04      	ldr	r3, [pc, #16]	@ (10062c94 <__arm_cp.12_0>)
10062c82:	8003      	strh	r3, [r0, #0]
10062c84:	7142      	strb	r2, [r0, #5]
10062c86:	3110      	adds	r1, #16
10062c88:	b289      	uxth	r1, r1
10062c8a:	f7ee ff1f 	bl	10051acc <BLE_STACK_Event>
10062c8e:	b07f      	add	sp, #508	@ 0x1fc
10062c90:	b003      	add	sp, #12
10062c92:	bdb0      	pop	{r4, r5, r7, pc}

10062c94 <__arm_cp.12_0>:
10062c94:	0000ff82 	.word	0x0000ff82

10062c98 <aci_att_srv_prepare_write_req_event_cb>:
10062c98:	b5f0      	push	{r4, r5, r6, r7, lr}
10062c9a:	b0ff      	sub	sp, #508	@ 0x1fc
10062c9c:	b086      	sub	sp, #24
10062c9e:	460c      	mov	r4, r1
10062ca0:	4605      	mov	r5, r0
10062ca2:	890b      	ldrh	r3, [r1, #8]
10062ca4:	88ca      	ldrh	r2, [r1, #6]
10062ca6:	8889      	ldrh	r1, [r1, #4]
10062ca8:	8960      	ldrh	r0, [r4, #10]
10062caa:	89a6      	ldrh	r6, [r4, #12]
10062cac:	6927      	ldr	r7, [r4, #16]
10062cae:	9000      	str	r0, [sp, #0]
10062cb0:	9601      	str	r6, [sp, #4]
10062cb2:	9702      	str	r7, [sp, #8]
10062cb4:	a803      	add	r0, sp, #12
10062cb6:	1d80      	adds	r0, r0, #6
10062cb8:	f7f1 f8f4 	bl	10053ea4 <aci_att_srv_prepare_write_req_event_copy>
10062cbc:	0728      	lsls	r0, r5, #28
10062cbe:	d502      	bpl.n	10062cc6 <aci_att_srv_prepare_write_req_event_cb+0x2e>
10062cc0:	6920      	ldr	r0, [r4, #16]
10062cc2:	f7f0 f9fb 	bl	100530bc <ACL_pkt_release>
10062cc6:	a803      	add	r0, sp, #12
10062cc8:	89c1      	ldrh	r1, [r0, #14]
10062cca:	460a      	mov	r2, r1
10062ccc:	320c      	adds	r2, #12
10062cce:	7082      	strb	r2, [r0, #2]
10062cd0:	0a12      	lsrs	r2, r2, #8
10062cd2:	70c2      	strb	r2, [r0, #3]
10062cd4:	221b      	movs	r2, #27
10062cd6:	7102      	strb	r2, [r0, #4]
10062cd8:	4a05      	ldr	r2, [pc, #20]	@ (10062cf0 <__arm_cp.13_0>)
10062cda:	8002      	strh	r2, [r0, #0]
10062cdc:	220c      	movs	r2, #12
10062cde:	7142      	strb	r2, [r0, #5]
10062ce0:	3110      	adds	r1, #16
10062ce2:	b289      	uxth	r1, r1
10062ce4:	f7ee fef2 	bl	10051acc <BLE_STACK_Event>
10062ce8:	b07f      	add	sp, #508	@ 0x1fc
10062cea:	b006      	add	sp, #24
10062cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062cee:	46c0      	nop			@ (mov r8, r8)

10062cf0 <__arm_cp.13_0>:
10062cf0:	0000ff82 	.word	0x0000ff82

10062cf4 <aci_att_clt_read_multiple_var_len_resp_event_cb>:
10062cf4:	b5b0      	push	{r4, r5, r7, lr}
10062cf6:	b0ff      	sub	sp, #508	@ 0x1fc
10062cf8:	b083      	sub	sp, #12
10062cfa:	460c      	mov	r4, r1
10062cfc:	4605      	mov	r5, r0
10062cfe:	688b      	ldr	r3, [r1, #8]
10062d00:	88ca      	ldrh	r2, [r1, #6]
10062d02:	8889      	ldrh	r1, [r1, #4]
10062d04:	4668      	mov	r0, sp
10062d06:	1d80      	adds	r0, r0, #6
10062d08:	f7f1 f8ff 	bl	10053f0a <aci_att_clt_read_multiple_var_len_resp_event_copy>
10062d0c:	0728      	lsls	r0, r5, #28
10062d0e:	d502      	bpl.n	10062d16 <aci_att_clt_read_multiple_var_len_resp_event_cb+0x22>
10062d10:	68a0      	ldr	r0, [r4, #8]
10062d12:	f7f0 f9d3 	bl	100530bc <ACL_pkt_release>
10062d16:	4668      	mov	r0, sp
10062d18:	8941      	ldrh	r1, [r0, #10]
10062d1a:	460a      	mov	r2, r1
10062d1c:	3208      	adds	r2, #8
10062d1e:	7082      	strb	r2, [r0, #2]
10062d20:	0a12      	lsrs	r2, r2, #8
10062d22:	70c2      	strb	r2, [r0, #3]
10062d24:	221e      	movs	r2, #30
10062d26:	7102      	strb	r2, [r0, #4]
10062d28:	4a05      	ldr	r2, [pc, #20]	@ (10062d40 <__arm_cp.14_0>)
10062d2a:	8002      	strh	r2, [r0, #0]
10062d2c:	220c      	movs	r2, #12
10062d2e:	7142      	strb	r2, [r0, #5]
10062d30:	310c      	adds	r1, #12
10062d32:	b289      	uxth	r1, r1
10062d34:	f7ee feca 	bl	10051acc <BLE_STACK_Event>
10062d38:	b07f      	add	sp, #508	@ 0x1fc
10062d3a:	b003      	add	sp, #12
10062d3c:	bdb0      	pop	{r4, r5, r7, pc}
10062d3e:	46c0      	nop			@ (mov r8, r8)

10062d40 <__arm_cp.14_0>:
10062d40:	0000ff82 	.word	0x0000ff82

10062d44 <aci_gatt_srv_attribute_modified_event_push_noinline>:
10062d44:	b5f0      	push	{r4, r5, r6, r7, lr}
10062d46:	b085      	sub	sp, #20
10062d48:	4605      	mov	r5, r0
10062d4a:	06c0      	lsls	r0, r0, #27
10062d4c:	d445      	bmi.n	10062dda <aci_gatt_srv_attribute_modified_event_push_noinline+0x96>
10062d4e:	4826      	ldr	r0, [pc, #152]	@ (10062de8 <__arm_cp.15_0>)
10062d50:	6800      	ldr	r0, [r0, #0]
10062d52:	2450      	movs	r4, #80	@ 0x50
10062d54:	5d00      	ldrb	r0, [r0, r4]
10062d56:	2400      	movs	r4, #0
10062d58:	07c0      	lsls	r0, r0, #31
10062d5a:	d03f      	beq.n	10062ddc <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10062d5c:	9302      	str	r3, [sp, #8]
10062d5e:	9203      	str	r2, [sp, #12]
10062d60:	9104      	str	r1, [sp, #16]
10062d62:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10062d64:	4821      	ldr	r0, [pc, #132]	@ (10062dec <__arm_cp.15_1>)
10062d66:	6800      	ldr	r0, [r0, #0]
10062d68:	0769      	lsls	r1, r5, #29
10062d6a:	0ec9      	lsrs	r1, r1, #27
10062d6c:	1840      	adds	r0, r0, r1
10062d6e:	6900      	ldr	r0, [r0, #16]
10062d70:	1e71      	subs	r1, r6, #1
10062d72:	2203      	movs	r2, #3
10062d74:	430a      	orrs	r2, r1
10062d76:	3211      	adds	r2, #17
10062d78:	0891      	lsrs	r1, r2, #2
10062d7a:	b28b      	uxth	r3, r1
10062d7c:	2256      	movs	r2, #86	@ 0x56
10062d7e:	4629      	mov	r1, r5
10062d80:	f7f0 fb72 	bl	10053468 <aci_event_fifo_push_header>
10062d84:	2800      	cmp	r0, #0
10062d86:	d02c      	beq.n	10062de2 <aci_gatt_srv_attribute_modified_event_push_noinline+0x9e>
10062d88:	4607      	mov	r7, r0
10062d8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10062d8c:	9001      	str	r0, [sp, #4]
10062d8e:	743e      	strb	r6, [r7, #16]
10062d90:	9902      	ldr	r1, [sp, #8]
10062d92:	73b9      	strb	r1, [r7, #14]
10062d94:	9b03      	ldr	r3, [sp, #12]
10062d96:	733b      	strb	r3, [r7, #12]
10062d98:	9a04      	ldr	r2, [sp, #16]
10062d9a:	72ba      	strb	r2, [r7, #10]
10062d9c:	0a30      	lsrs	r0, r6, #8
10062d9e:	7478      	strb	r0, [r7, #17]
10062da0:	0a08      	lsrs	r0, r1, #8
10062da2:	73f8      	strb	r0, [r7, #15]
10062da4:	0a18      	lsrs	r0, r3, #8
10062da6:	7378      	strb	r0, [r7, #13]
10062da8:	0a10      	lsrs	r0, r2, #8
10062daa:	72f8      	strb	r0, [r7, #11]
10062dac:	4638      	mov	r0, r7
10062dae:	3012      	adds	r0, #18
10062db0:	9901      	ldr	r1, [sp, #4]
10062db2:	4632      	mov	r2, r6
10062db4:	f7e3 f860 	bl	10045e78 <BLEPLAT_MemCpy>
10062db8:	200c      	movs	r0, #12
10062dba:	7278      	strb	r0, [r7, #9]
10062dbc:	2001      	movs	r0, #1
10062dbe:	7238      	strb	r0, [r7, #8]
10062dc0:	360a      	adds	r6, #10
10062dc2:	0a30      	lsrs	r0, r6, #8
10062dc4:	71f8      	strb	r0, [r7, #7]
10062dc6:	71be      	strb	r6, [r7, #6]
10062dc8:	20ff      	movs	r0, #255	@ 0xff
10062dca:	7178      	strb	r0, [r7, #5]
10062dcc:	2082      	movs	r0, #130	@ 0x82
10062dce:	7138      	strb	r0, [r7, #4]
10062dd0:	4628      	mov	r0, r5
10062dd2:	4639      	mov	r1, r7
10062dd4:	f7f0 fbe5 	bl	100535a2 <aci_event_fifo_push>
10062dd8:	e000      	b.n	10062ddc <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10062dda:	2486      	movs	r4, #134	@ 0x86
10062ddc:	4620      	mov	r0, r4
10062dde:	b005      	add	sp, #20
10062de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062de2:	2407      	movs	r4, #7
10062de4:	e7fa      	b.n	10062ddc <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10062de6:	46c0      	nop			@ (mov r8, r8)

10062de8 <__arm_cp.15_0>:
10062de8:	20001174 	.word	0x20001174

10062dec <__arm_cp.15_1>:
10062dec:	20001124 	.word	0x20001124

10062df0 <aci_gatt_proc_timeout_event_push_noinline>:
10062df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062df2:	4604      	mov	r4, r0
10062df4:	06c0      	lsls	r0, r0, #27
10062df6:	d408      	bmi.n	10062e0a <aci_gatt_proc_timeout_event_push_noinline+0x1a>
10062df8:	460d      	mov	r5, r1
10062dfa:	4819      	ldr	r0, [pc, #100]	@ (10062e60 <__arm_cp.16_0>)
10062dfc:	6800      	ldr	r0, [r0, #0]
10062dfe:	2150      	movs	r1, #80	@ 0x50
10062e00:	5c40      	ldrb	r0, [r0, r1]
10062e02:	0780      	lsls	r0, r0, #30
10062e04:	d403      	bmi.n	10062e0e <aci_gatt_proc_timeout_event_push_noinline+0x1e>
10062e06:	2700      	movs	r7, #0
10062e08:	e027      	b.n	10062e5a <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10062e0a:	2786      	movs	r7, #134	@ 0x86
10062e0c:	e025      	b.n	10062e5a <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10062e0e:	4616      	mov	r6, r2
10062e10:	4814      	ldr	r0, [pc, #80]	@ (10062e64 <__arm_cp.16_1>)
10062e12:	6800      	ldr	r0, [r0, #0]
10062e14:	0761      	lsls	r1, r4, #29
10062e16:	0ec9      	lsrs	r1, r1, #27
10062e18:	1840      	adds	r0, r0, r1
10062e1a:	6900      	ldr	r0, [r0, #16]
10062e1c:	2257      	movs	r2, #87	@ 0x57
10062e1e:	2303      	movs	r3, #3
10062e20:	4621      	mov	r1, r4
10062e22:	f7f0 fb21 	bl	10053468 <aci_event_fifo_push_header>
10062e26:	2800      	cmp	r0, #0
10062e28:	d016      	beq.n	10062e58 <aci_gatt_proc_timeout_event_push_noinline+0x68>
10062e2a:	4601      	mov	r1, r0
10062e2c:	7306      	strb	r6, [r0, #12]
10062e2e:	7285      	strb	r5, [r0, #10]
10062e30:	200c      	movs	r0, #12
10062e32:	7248      	strb	r0, [r1, #9]
10062e34:	2002      	movs	r0, #2
10062e36:	7208      	strb	r0, [r1, #8]
10062e38:	2700      	movs	r7, #0
10062e3a:	71cf      	strb	r7, [r1, #7]
10062e3c:	2006      	movs	r0, #6
10062e3e:	7188      	strb	r0, [r1, #6]
10062e40:	20ff      	movs	r0, #255	@ 0xff
10062e42:	7148      	strb	r0, [r1, #5]
10062e44:	2082      	movs	r0, #130	@ 0x82
10062e46:	7108      	strb	r0, [r1, #4]
10062e48:	0a30      	lsrs	r0, r6, #8
10062e4a:	7348      	strb	r0, [r1, #13]
10062e4c:	0a28      	lsrs	r0, r5, #8
10062e4e:	72c8      	strb	r0, [r1, #11]
10062e50:	4620      	mov	r0, r4
10062e52:	f7f0 fba6 	bl	100535a2 <aci_event_fifo_push>
10062e56:	e000      	b.n	10062e5a <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10062e58:	2707      	movs	r7, #7
10062e5a:	4638      	mov	r0, r7
10062e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062e5e:	46c0      	nop			@ (mov r8, r8)

10062e60 <__arm_cp.16_0>:
10062e60:	20001174 	.word	0x20001174

10062e64 <__arm_cp.16_1>:
10062e64:	20001124 	.word	0x20001124

10062e68 <aci_gatt_clt_indication_event_push_noinline>:
10062e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062e6a:	4605      	mov	r5, r0
10062e6c:	06c0      	lsls	r0, r0, #27
10062e6e:	d421      	bmi.n	10062eb4 <aci_gatt_clt_indication_event_push_noinline+0x4c>
10062e70:	460e      	mov	r6, r1
10062e72:	4813      	ldr	r0, [pc, #76]	@ (10062ec0 <__arm_cp.17_0>)
10062e74:	6800      	ldr	r0, [r0, #0]
10062e76:	2151      	movs	r1, #81	@ 0x51
10062e78:	5c40      	ldrb	r0, [r0, r1]
10062e7a:	2400      	movs	r4, #0
10062e7c:	0680      	lsls	r0, r0, #26
10062e7e:	d51a      	bpl.n	10062eb6 <aci_gatt_clt_indication_event_push_noinline+0x4e>
10062e80:	4617      	mov	r7, r2
10062e82:	9300      	str	r3, [sp, #0]
10062e84:	480f      	ldr	r0, [pc, #60]	@ (10062ec4 <__arm_cp.17_1>)
10062e86:	6800      	ldr	r0, [r0, #0]
10062e88:	0769      	lsls	r1, r5, #29
10062e8a:	0ec9      	lsrs	r1, r1, #27
10062e8c:	1840      	adds	r0, r0, r1
10062e8e:	6900      	ldr	r0, [r0, #16]
10062e90:	220f      	movs	r2, #15
10062e92:	2303      	movs	r3, #3
10062e94:	4629      	mov	r1, r5
10062e96:	f7f0 fae7 	bl	10053468 <aci_event_fifo_push_header>
10062e9a:	2800      	cmp	r0, #0
10062e9c:	d00d      	beq.n	10062eba <aci_gatt_clt_indication_event_push_noinline+0x52>
10062e9e:	4601      	mov	r1, r0
10062ea0:	9800      	ldr	r0, [sp, #0]
10062ea2:	60c8      	str	r0, [r1, #12]
10062ea4:	814f      	strh	r7, [r1, #10]
10062ea6:	810e      	strh	r6, [r1, #8]
10062ea8:	4807      	ldr	r0, [pc, #28]	@ (10062ec8 <__arm_cp.17_2>)
10062eaa:	6048      	str	r0, [r1, #4]
10062eac:	4628      	mov	r0, r5
10062eae:	f7f0 fb78 	bl	100535a2 <aci_event_fifo_push>
10062eb2:	e000      	b.n	10062eb6 <aci_gatt_clt_indication_event_push_noinline+0x4e>
10062eb4:	2486      	movs	r4, #134	@ 0x86
10062eb6:	4620      	mov	r0, r4
10062eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062eba:	2407      	movs	r4, #7
10062ebc:	e7fb      	b.n	10062eb6 <aci_gatt_clt_indication_event_push_noinline+0x4e>
10062ebe:	46c0      	nop			@ (mov r8, r8)

10062ec0 <__arm_cp.17_0>:
10062ec0:	20001174 	.word	0x20001174

10062ec4 <__arm_cp.17_1>:
10062ec4:	20001124 	.word	0x20001124

10062ec8 <__arm_cp.17_2>:
10062ec8:	100628a9 	.word	0x100628a9

10062ecc <aci_gatt_clt_notification_event_push_noinline>:
10062ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062ece:	4605      	mov	r5, r0
10062ed0:	06c0      	lsls	r0, r0, #27
10062ed2:	d421      	bmi.n	10062f18 <aci_gatt_clt_notification_event_push_noinline+0x4c>
10062ed4:	460e      	mov	r6, r1
10062ed6:	4813      	ldr	r0, [pc, #76]	@ (10062f24 <__arm_cp.18_0>)
10062ed8:	6800      	ldr	r0, [r0, #0]
10062eda:	2151      	movs	r1, #81	@ 0x51
10062edc:	5c40      	ldrb	r0, [r0, r1]
10062ede:	2400      	movs	r4, #0
10062ee0:	0640      	lsls	r0, r0, #25
10062ee2:	d51a      	bpl.n	10062f1a <aci_gatt_clt_notification_event_push_noinline+0x4e>
10062ee4:	4617      	mov	r7, r2
10062ee6:	9300      	str	r3, [sp, #0]
10062ee8:	480f      	ldr	r0, [pc, #60]	@ (10062f28 <__arm_cp.18_1>)
10062eea:	6800      	ldr	r0, [r0, #0]
10062eec:	0769      	lsls	r1, r5, #29
10062eee:	0ec9      	lsrs	r1, r1, #27
10062ef0:	1840      	adds	r0, r0, r1
10062ef2:	6900      	ldr	r0, [r0, #16]
10062ef4:	2210      	movs	r2, #16
10062ef6:	2303      	movs	r3, #3
10062ef8:	4629      	mov	r1, r5
10062efa:	f7f0 fab5 	bl	10053468 <aci_event_fifo_push_header>
10062efe:	2800      	cmp	r0, #0
10062f00:	d00d      	beq.n	10062f1e <aci_gatt_clt_notification_event_push_noinline+0x52>
10062f02:	4601      	mov	r1, r0
10062f04:	9800      	ldr	r0, [sp, #0]
10062f06:	60c8      	str	r0, [r1, #12]
10062f08:	814f      	strh	r7, [r1, #10]
10062f0a:	810e      	strh	r6, [r1, #8]
10062f0c:	4807      	ldr	r0, [pc, #28]	@ (10062f2c <__arm_cp.18_2>)
10062f0e:	6048      	str	r0, [r1, #4]
10062f10:	4628      	mov	r0, r5
10062f12:	f7f0 fb46 	bl	100535a2 <aci_event_fifo_push>
10062f16:	e000      	b.n	10062f1a <aci_gatt_clt_notification_event_push_noinline+0x4e>
10062f18:	2486      	movs	r4, #134	@ 0x86
10062f1a:	4620      	mov	r0, r4
10062f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062f1e:	2407      	movs	r4, #7
10062f20:	e7fb      	b.n	10062f1a <aci_gatt_clt_notification_event_push_noinline+0x4e>
10062f22:	46c0      	nop			@ (mov r8, r8)

10062f24 <__arm_cp.18_0>:
10062f24:	20001174 	.word	0x20001174

10062f28 <__arm_cp.18_1>:
10062f28:	20001124 	.word	0x20001124

10062f2c <__arm_cp.18_2>:
10062f2c:	100628f9 	.word	0x100628f9

10062f30 <aci_gatt_clt_error_resp_event_push_noinline>:
10062f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062f32:	4604      	mov	r4, r0
10062f34:	06c0      	lsls	r0, r0, #27
10062f36:	d408      	bmi.n	10062f4a <aci_gatt_clt_error_resp_event_push_noinline+0x1a>
10062f38:	460d      	mov	r5, r1
10062f3a:	481e      	ldr	r0, [pc, #120]	@ (10062fb4 <__arm_cp.20_0>)
10062f3c:	6800      	ldr	r0, [r0, #0]
10062f3e:	2151      	movs	r1, #81	@ 0x51
10062f40:	5640      	ldrsb	r0, [r0, r1]
10062f42:	2800      	cmp	r0, #0
10062f44:	d404      	bmi.n	10062f50 <aci_gatt_clt_error_resp_event_push_noinline+0x20>
10062f46:	2700      	movs	r7, #0
10062f48:	e000      	b.n	10062f4c <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
10062f4a:	2786      	movs	r7, #134	@ 0x86
10062f4c:	4638      	mov	r0, r7
10062f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062f50:	461f      	mov	r7, r3
10062f52:	4616      	mov	r6, r2
10062f54:	4818      	ldr	r0, [pc, #96]	@ (10062fb8 <__arm_cp.20_1>)
10062f56:	6800      	ldr	r0, [r0, #0]
10062f58:	0761      	lsls	r1, r4, #29
10062f5a:	0ec9      	lsrs	r1, r1, #27
10062f5c:	1840      	adds	r0, r0, r1
10062f5e:	6900      	ldr	r0, [r0, #16]
10062f60:	225b      	movs	r2, #91	@ 0x5b
10062f62:	2304      	movs	r3, #4
10062f64:	4621      	mov	r1, r4
10062f66:	f7f0 fa7f 	bl	10053468 <aci_event_fifo_push_header>
10062f6a:	2800      	cmp	r0, #0
10062f6c:	d020      	beq.n	10062fb0 <aci_gatt_clt_error_resp_event_push_noinline+0x80>
10062f6e:	4601      	mov	r1, r0
10062f70:	9a07      	ldr	r2, [sp, #28]
10062f72:	9806      	ldr	r0, [sp, #24]
10062f74:	9000      	str	r0, [sp, #0]
10062f76:	73c8      	strb	r0, [r1, #15]
10062f78:	730e      	strb	r6, [r1, #12]
10062f7a:	728d      	strb	r5, [r1, #10]
10062f7c:	230c      	movs	r3, #12
10062f7e:	724b      	strb	r3, [r1, #9]
10062f80:	2311      	movs	r3, #17
10062f82:	720b      	strb	r3, [r1, #8]
10062f84:	4638      	mov	r0, r7
10062f86:	2700      	movs	r7, #0
10062f88:	71cf      	strb	r7, [r1, #7]
10062f8a:	230a      	movs	r3, #10
10062f8c:	718b      	strb	r3, [r1, #6]
10062f8e:	744a      	strb	r2, [r1, #17]
10062f90:	7388      	strb	r0, [r1, #14]
10062f92:	22ff      	movs	r2, #255	@ 0xff
10062f94:	714a      	strb	r2, [r1, #5]
10062f96:	2282      	movs	r2, #130	@ 0x82
10062f98:	710a      	strb	r2, [r1, #4]
10062f9a:	9800      	ldr	r0, [sp, #0]
10062f9c:	0a00      	lsrs	r0, r0, #8
10062f9e:	7408      	strb	r0, [r1, #16]
10062fa0:	0a30      	lsrs	r0, r6, #8
10062fa2:	7348      	strb	r0, [r1, #13]
10062fa4:	0a28      	lsrs	r0, r5, #8
10062fa6:	72c8      	strb	r0, [r1, #11]
10062fa8:	4620      	mov	r0, r4
10062faa:	f7f0 fafa 	bl	100535a2 <aci_event_fifo_push>
10062fae:	e7cd      	b.n	10062f4c <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
10062fb0:	2707      	movs	r7, #7
10062fb2:	e7cb      	b.n	10062f4c <aci_gatt_clt_error_resp_event_push_noinline+0x1c>

10062fb4 <__arm_cp.20_0>:
10062fb4:	20001174 	.word	0x20001174

10062fb8 <__arm_cp.20_1>:
10062fb8:	20001124 	.word	0x20001124

10062fbc <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>:
10062fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10062fbe:	b087      	sub	sp, #28
10062fc0:	4605      	mov	r5, r0
10062fc2:	06c0      	lsls	r0, r0, #27
10062fc4:	d443      	bmi.n	1006304e <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x92>
10062fc6:	460e      	mov	r6, r1
10062fc8:	4824      	ldr	r0, [pc, #144]	@ (1006305c <__arm_cp.21_0>)
10062fca:	6800      	ldr	r0, [r0, #0]
10062fcc:	2152      	movs	r1, #82	@ 0x52
10062fce:	5c40      	ldrb	r0, [r0, r1]
10062fd0:	2400      	movs	r4, #0
10062fd2:	0780      	lsls	r0, r0, #30
10062fd4:	d53c      	bpl.n	10063050 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
10062fd6:	9204      	str	r2, [sp, #16]
10062fd8:	9305      	str	r3, [sp, #20]
10062fda:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10062fdc:	4820      	ldr	r0, [pc, #128]	@ (10063060 <__arm_cp.21_1>)
10062fde:	6800      	ldr	r0, [r0, #0]
10062fe0:	0769      	lsls	r1, r5, #29
10062fe2:	0ec9      	lsrs	r1, r1, #27
10062fe4:	1840      	adds	r0, r0, r1
10062fe6:	6900      	ldr	r0, [r0, #16]
10062fe8:	491e      	ldr	r1, [pc, #120]	@ (10063064 <__arm_cp.21_2>)
10062fea:	9206      	str	r2, [sp, #24]
10062fec:	1851      	adds	r1, r2, r1
10062fee:	2203      	movs	r2, #3
10062ff0:	430a      	orrs	r2, r1
10062ff2:	3211      	adds	r2, #17
10062ff4:	0891      	lsrs	r1, r2, #2
10062ff6:	b28b      	uxth	r3, r1
10062ff8:	225c      	movs	r2, #92	@ 0x5c
10062ffa:	4629      	mov	r1, r5
10062ffc:	f7f0 fa34 	bl	10053468 <aci_event_fifo_push_header>
10063000:	2800      	cmp	r0, #0
10063002:	d028      	beq.n	10063056 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x9a>
10063004:	4607      	mov	r7, r0
10063006:	990d      	ldr	r1, [sp, #52]	@ 0x34
10063008:	9806      	ldr	r0, [sp, #24]
1006300a:	9000      	str	r0, [sp, #0]
1006300c:	9103      	str	r1, [sp, #12]
1006300e:	9101      	str	r1, [sp, #4]
10063010:	1d38      	adds	r0, r7, #4
10063012:	4631      	mov	r1, r6
10063014:	9a04      	ldr	r2, [sp, #16]
10063016:	9b05      	ldr	r3, [sp, #20]
10063018:	f7f0 ff05 	bl	10053e26 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>
1006301c:	0728      	lsls	r0, r5, #28
1006301e:	d504      	bpl.n	1006302a <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x6e>
10063020:	9803      	ldr	r0, [sp, #12]
10063022:	f7f0 f84b 	bl	100530bc <ACL_pkt_release>
10063026:	20f7      	movs	r0, #247	@ 0xf7
10063028:	4005      	ands	r5, r0
1006302a:	200c      	movs	r0, #12
1006302c:	7278      	strb	r0, [r7, #9]
1006302e:	2012      	movs	r0, #18
10063030:	7238      	strb	r0, [r7, #8]
10063032:	20ff      	movs	r0, #255	@ 0xff
10063034:	7178      	strb	r0, [r7, #5]
10063036:	2082      	movs	r0, #130	@ 0x82
10063038:	7138      	strb	r0, [r7, #4]
1006303a:	9806      	ldr	r0, [sp, #24]
1006303c:	1dc0      	adds	r0, r0, #7
1006303e:	71b8      	strb	r0, [r7, #6]
10063040:	0a00      	lsrs	r0, r0, #8
10063042:	71f8      	strb	r0, [r7, #7]
10063044:	4628      	mov	r0, r5
10063046:	4639      	mov	r1, r7
10063048:	f7f0 faab 	bl	100535a2 <aci_event_fifo_push>
1006304c:	e000      	b.n	10063050 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
1006304e:	2486      	movs	r4, #134	@ 0x86
10063050:	4620      	mov	r0, r4
10063052:	b007      	add	sp, #28
10063054:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063056:	2407      	movs	r4, #7
10063058:	e7fa      	b.n	10063050 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
1006305a:	46c0      	nop			@ (mov r8, r8)

1006305c <__arm_cp.21_0>:
1006305c:	20001174 	.word	0x20001174

10063060 <__arm_cp.21_1>:
10063060:	20001124 	.word	0x20001124

10063064 <__arm_cp.21_2>:
10063064:	0003fffd 	.word	0x0003fffd

10063068 <aci_gatt_tx_pool_available_event_push_noinline>:
10063068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006306a:	4604      	mov	r4, r0
1006306c:	06c0      	lsls	r0, r0, #27
1006306e:	d425      	bmi.n	100630bc <aci_gatt_tx_pool_available_event_push_noinline+0x54>
10063070:	4616      	mov	r6, r2
10063072:	460d      	mov	r5, r1
10063074:	4814      	ldr	r0, [pc, #80]	@ (100630c8 <__arm_cp.22_0>)
10063076:	6800      	ldr	r0, [r0, #0]
10063078:	0761      	lsls	r1, r4, #29
1006307a:	0ec9      	lsrs	r1, r1, #27
1006307c:	1840      	adds	r0, r0, r1
1006307e:	6900      	ldr	r0, [r0, #16]
10063080:	225d      	movs	r2, #93	@ 0x5d
10063082:	2303      	movs	r3, #3
10063084:	4621      	mov	r1, r4
10063086:	f7f0 f9ef 	bl	10053468 <aci_event_fifo_push_header>
1006308a:	2800      	cmp	r0, #0
1006308c:	d018      	beq.n	100630c0 <aci_gatt_tx_pool_available_event_push_noinline+0x58>
1006308e:	4601      	mov	r1, r0
10063090:	7306      	strb	r6, [r0, #12]
10063092:	7285      	strb	r5, [r0, #10]
10063094:	200c      	movs	r0, #12
10063096:	7248      	strb	r0, [r1, #9]
10063098:	2016      	movs	r0, #22
1006309a:	7208      	strb	r0, [r1, #8]
1006309c:	2700      	movs	r7, #0
1006309e:	71cf      	strb	r7, [r1, #7]
100630a0:	2006      	movs	r0, #6
100630a2:	7188      	strb	r0, [r1, #6]
100630a4:	20ff      	movs	r0, #255	@ 0xff
100630a6:	7148      	strb	r0, [r1, #5]
100630a8:	2082      	movs	r0, #130	@ 0x82
100630aa:	7108      	strb	r0, [r1, #4]
100630ac:	0a30      	lsrs	r0, r6, #8
100630ae:	7348      	strb	r0, [r1, #13]
100630b0:	0a28      	lsrs	r0, r5, #8
100630b2:	72c8      	strb	r0, [r1, #11]
100630b4:	4620      	mov	r0, r4
100630b6:	f7f0 fa74 	bl	100535a2 <aci_event_fifo_push>
100630ba:	e002      	b.n	100630c2 <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
100630bc:	2786      	movs	r7, #134	@ 0x86
100630be:	e000      	b.n	100630c2 <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
100630c0:	2707      	movs	r7, #7
100630c2:	4638      	mov	r0, r7
100630c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100630c6:	46c0      	nop			@ (mov r8, r8)

100630c8 <__arm_cp.22_0>:
100630c8:	20001124 	.word	0x20001124

100630cc <aci_gatt_srv_confirmation_event_push_noinline>:
100630cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100630ce:	4604      	mov	r4, r0
100630d0:	06c0      	lsls	r0, r0, #27
100630d2:	d425      	bmi.n	10063120 <aci_gatt_srv_confirmation_event_push_noinline+0x54>
100630d4:	4616      	mov	r6, r2
100630d6:	460d      	mov	r5, r1
100630d8:	4814      	ldr	r0, [pc, #80]	@ (1006312c <__arm_cp.23_0>)
100630da:	6800      	ldr	r0, [r0, #0]
100630dc:	0761      	lsls	r1, r4, #29
100630de:	0ec9      	lsrs	r1, r1, #27
100630e0:	1840      	adds	r0, r0, r1
100630e2:	6900      	ldr	r0, [r0, #16]
100630e4:	225e      	movs	r2, #94	@ 0x5e
100630e6:	2303      	movs	r3, #3
100630e8:	4621      	mov	r1, r4
100630ea:	f7f0 f9bd 	bl	10053468 <aci_event_fifo_push_header>
100630ee:	2800      	cmp	r0, #0
100630f0:	d018      	beq.n	10063124 <aci_gatt_srv_confirmation_event_push_noinline+0x58>
100630f2:	4601      	mov	r1, r0
100630f4:	7306      	strb	r6, [r0, #12]
100630f6:	7285      	strb	r5, [r0, #10]
100630f8:	200c      	movs	r0, #12
100630fa:	7248      	strb	r0, [r1, #9]
100630fc:	2017      	movs	r0, #23
100630fe:	7208      	strb	r0, [r1, #8]
10063100:	2700      	movs	r7, #0
10063102:	71cf      	strb	r7, [r1, #7]
10063104:	2006      	movs	r0, #6
10063106:	7188      	strb	r0, [r1, #6]
10063108:	20ff      	movs	r0, #255	@ 0xff
1006310a:	7148      	strb	r0, [r1, #5]
1006310c:	2082      	movs	r0, #130	@ 0x82
1006310e:	7108      	strb	r0, [r1, #4]
10063110:	0a30      	lsrs	r0, r6, #8
10063112:	7348      	strb	r0, [r1, #13]
10063114:	0a28      	lsrs	r0, r5, #8
10063116:	72c8      	strb	r0, [r1, #11]
10063118:	4620      	mov	r0, r4
1006311a:	f7f0 fa42 	bl	100535a2 <aci_event_fifo_push>
1006311e:	e002      	b.n	10063126 <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
10063120:	2786      	movs	r7, #134	@ 0x86
10063122:	e000      	b.n	10063126 <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
10063124:	2707      	movs	r7, #7
10063126:	4638      	mov	r0, r7
10063128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006312a:	46c0      	nop			@ (mov r8, r8)

1006312c <__arm_cp.23_0>:
1006312c:	20001124 	.word	0x20001124

10063130 <aci_gatt_srv_read_event_push_noinline>:
10063130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063132:	4604      	mov	r4, r0
10063134:	06c0      	lsls	r0, r0, #27
10063136:	d42e      	bmi.n	10063196 <aci_gatt_srv_read_event_push_noinline+0x66>
10063138:	461f      	mov	r7, r3
1006313a:	4616      	mov	r6, r2
1006313c:	460d      	mov	r5, r1
1006313e:	4818      	ldr	r0, [pc, #96]	@ (100631a0 <__arm_cp.24_0>)
10063140:	6800      	ldr	r0, [r0, #0]
10063142:	0761      	lsls	r1, r4, #29
10063144:	0ec9      	lsrs	r1, r1, #27
10063146:	1840      	adds	r0, r0, r1
10063148:	6900      	ldr	r0, [r0, #16]
1006314a:	225f      	movs	r2, #95	@ 0x5f
1006314c:	2304      	movs	r3, #4
1006314e:	4621      	mov	r1, r4
10063150:	f7f0 f98a 	bl	10053468 <aci_event_fifo_push_header>
10063154:	2800      	cmp	r0, #0
10063156:	d020      	beq.n	1006319a <aci_gatt_srv_read_event_push_noinline+0x6a>
10063158:	4601      	mov	r1, r0
1006315a:	9806      	ldr	r0, [sp, #24]
1006315c:	7408      	strb	r0, [r1, #16]
1006315e:	738f      	strb	r7, [r1, #14]
10063160:	730e      	strb	r6, [r1, #12]
10063162:	728d      	strb	r5, [r1, #10]
10063164:	220c      	movs	r2, #12
10063166:	724a      	strb	r2, [r1, #9]
10063168:	2219      	movs	r2, #25
1006316a:	720a      	strb	r2, [r1, #8]
1006316c:	462b      	mov	r3, r5
1006316e:	2500      	movs	r5, #0
10063170:	71cd      	strb	r5, [r1, #7]
10063172:	220a      	movs	r2, #10
10063174:	718a      	strb	r2, [r1, #6]
10063176:	22ff      	movs	r2, #255	@ 0xff
10063178:	714a      	strb	r2, [r1, #5]
1006317a:	2282      	movs	r2, #130	@ 0x82
1006317c:	710a      	strb	r2, [r1, #4]
1006317e:	0a00      	lsrs	r0, r0, #8
10063180:	7448      	strb	r0, [r1, #17]
10063182:	0a38      	lsrs	r0, r7, #8
10063184:	73c8      	strb	r0, [r1, #15]
10063186:	0a30      	lsrs	r0, r6, #8
10063188:	7348      	strb	r0, [r1, #13]
1006318a:	0a18      	lsrs	r0, r3, #8
1006318c:	72c8      	strb	r0, [r1, #11]
1006318e:	4620      	mov	r0, r4
10063190:	f7f0 fa07 	bl	100535a2 <aci_event_fifo_push>
10063194:	e002      	b.n	1006319c <aci_gatt_srv_read_event_push_noinline+0x6c>
10063196:	2586      	movs	r5, #134	@ 0x86
10063198:	e000      	b.n	1006319c <aci_gatt_srv_read_event_push_noinline+0x6c>
1006319a:	2507      	movs	r5, #7
1006319c:	4628      	mov	r0, r5
1006319e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100631a0 <__arm_cp.24_0>:
100631a0:	20001124 	.word	0x20001124

100631a4 <aci_gatt_srv_write_event_push_noinline>:
100631a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100631a6:	4604      	mov	r4, r0
100631a8:	06c0      	lsls	r0, r0, #27
100631aa:	d420      	bmi.n	100631ee <aci_gatt_srv_write_event_push_noinline+0x4a>
100631ac:	461f      	mov	r7, r3
100631ae:	4616      	mov	r6, r2
100631b0:	460d      	mov	r5, r1
100631b2:	4811      	ldr	r0, [pc, #68]	@ (100631f8 <__arm_cp.25_0>)
100631b4:	6800      	ldr	r0, [r0, #0]
100631b6:	0761      	lsls	r1, r4, #29
100631b8:	0ec9      	lsrs	r1, r1, #27
100631ba:	1840      	adds	r0, r0, r1
100631bc:	6900      	ldr	r0, [r0, #16]
100631be:	2211      	movs	r2, #17
100631c0:	2305      	movs	r3, #5
100631c2:	4621      	mov	r1, r4
100631c4:	f7f0 f950 	bl	10053468 <aci_event_fifo_push_header>
100631c8:	2800      	cmp	r0, #0
100631ca:	d012      	beq.n	100631f2 <aci_gatt_srv_write_event_push_noinline+0x4e>
100631cc:	4601      	mov	r1, r0
100631ce:	9808      	ldr	r0, [sp, #32]
100631d0:	9a07      	ldr	r2, [sp, #28]
100631d2:	9b06      	ldr	r3, [sp, #24]
100631d4:	6148      	str	r0, [r1, #20]
100631d6:	820a      	strh	r2, [r1, #16]
100631d8:	81cb      	strh	r3, [r1, #14]
100631da:	730f      	strb	r7, [r1, #12]
100631dc:	814e      	strh	r6, [r1, #10]
100631de:	810d      	strh	r5, [r1, #8]
100631e0:	4806      	ldr	r0, [pc, #24]	@ (100631fc <__arm_cp.25_1>)
100631e2:	6048      	str	r0, [r1, #4]
100631e4:	4620      	mov	r0, r4
100631e6:	f7f0 f9dc 	bl	100535a2 <aci_event_fifo_push>
100631ea:	2000      	movs	r0, #0
100631ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100631ee:	2086      	movs	r0, #134	@ 0x86
100631f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100631f2:	2007      	movs	r0, #7
100631f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100631f6:	46c0      	nop			@ (mov r8, r8)

100631f8 <__arm_cp.25_0>:
100631f8:	20001124 	.word	0x20001124

100631fc <__arm_cp.25_1>:
100631fc:	10062935 	.word	0x10062935

10063200 <aci_gatt_clt_multi_notification_int_event_push_noinline>:
10063200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063202:	4605      	mov	r5, r0
10063204:	06c0      	lsls	r0, r0, #27
10063206:	d421      	bmi.n	1006324c <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4c>
10063208:	460e      	mov	r6, r1
1006320a:	4813      	ldr	r0, [pc, #76]	@ (10063258 <__arm_cp.26_0>)
1006320c:	6800      	ldr	r0, [r0, #0]
1006320e:	2152      	movs	r1, #82	@ 0x52
10063210:	5c40      	ldrb	r0, [r0, r1]
10063212:	2400      	movs	r4, #0
10063214:	0700      	lsls	r0, r0, #28
10063216:	d51a      	bpl.n	1006324e <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10063218:	4617      	mov	r7, r2
1006321a:	9300      	str	r3, [sp, #0]
1006321c:	480f      	ldr	r0, [pc, #60]	@ (1006325c <__arm_cp.26_1>)
1006321e:	6800      	ldr	r0, [r0, #0]
10063220:	0769      	lsls	r1, r5, #29
10063222:	0ec9      	lsrs	r1, r1, #27
10063224:	1840      	adds	r0, r0, r1
10063226:	6900      	ldr	r0, [r0, #16]
10063228:	2214      	movs	r2, #20
1006322a:	2303      	movs	r3, #3
1006322c:	4629      	mov	r1, r5
1006322e:	f7f0 f91b 	bl	10053468 <aci_event_fifo_push_header>
10063232:	2800      	cmp	r0, #0
10063234:	d00d      	beq.n	10063252 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x52>
10063236:	4601      	mov	r1, r0
10063238:	9800      	ldr	r0, [sp, #0]
1006323a:	60c8      	str	r0, [r1, #12]
1006323c:	814f      	strh	r7, [r1, #10]
1006323e:	810e      	strh	r6, [r1, #8]
10063240:	4807      	ldr	r0, [pc, #28]	@ (10063260 <__arm_cp.26_2>)
10063242:	6048      	str	r0, [r1, #4]
10063244:	4628      	mov	r0, r5
10063246:	f7f0 f9ac 	bl	100535a2 <aci_event_fifo_push>
1006324a:	e000      	b.n	1006324e <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
1006324c:	2486      	movs	r4, #134	@ 0x86
1006324e:	4620      	mov	r0, r4
10063250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063252:	2407      	movs	r4, #7
10063254:	e7fb      	b.n	1006324e <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10063256:	46c0      	nop			@ (mov r8, r8)

10063258 <__arm_cp.26_0>:
10063258:	20001174 	.word	0x20001174

1006325c <__arm_cp.26_1>:
1006325c:	20001124 	.word	0x20001124

10063260 <__arm_cp.26_2>:
10063260:	10062995 	.word	0x10062995

10063264 <aci_att_exchange_mtu_resp_event_push_noinline>:
10063264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063266:	4604      	mov	r4, r0
10063268:	06c0      	lsls	r0, r0, #27
1006326a:	d408      	bmi.n	1006327e <aci_att_exchange_mtu_resp_event_push_noinline+0x1a>
1006326c:	460d      	mov	r5, r1
1006326e:	4819      	ldr	r0, [pc, #100]	@ (100632d4 <__arm_cp.27_0>)
10063270:	6800      	ldr	r0, [r0, #0]
10063272:	2150      	movs	r1, #80	@ 0x50
10063274:	5c40      	ldrb	r0, [r0, r1]
10063276:	0740      	lsls	r0, r0, #29
10063278:	d403      	bmi.n	10063282 <aci_att_exchange_mtu_resp_event_push_noinline+0x1e>
1006327a:	2700      	movs	r7, #0
1006327c:	e027      	b.n	100632ce <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
1006327e:	2786      	movs	r7, #134	@ 0x86
10063280:	e025      	b.n	100632ce <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10063282:	4616      	mov	r6, r2
10063284:	4814      	ldr	r0, [pc, #80]	@ (100632d8 <__arm_cp.27_1>)
10063286:	6800      	ldr	r0, [r0, #0]
10063288:	0761      	lsls	r1, r4, #29
1006328a:	0ec9      	lsrs	r1, r1, #27
1006328c:	1840      	adds	r0, r0, r1
1006328e:	6900      	ldr	r0, [r0, #16]
10063290:	2258      	movs	r2, #88	@ 0x58
10063292:	2703      	movs	r7, #3
10063294:	4621      	mov	r1, r4
10063296:	463b      	mov	r3, r7
10063298:	f7f0 f8e6 	bl	10053468 <aci_event_fifo_push_header>
1006329c:	2800      	cmp	r0, #0
1006329e:	d015      	beq.n	100632cc <aci_att_exchange_mtu_resp_event_push_noinline+0x68>
100632a0:	4601      	mov	r1, r0
100632a2:	7306      	strb	r6, [r0, #12]
100632a4:	7285      	strb	r5, [r0, #10]
100632a6:	200c      	movs	r0, #12
100632a8:	7248      	strb	r0, [r1, #9]
100632aa:	720f      	strb	r7, [r1, #8]
100632ac:	2700      	movs	r7, #0
100632ae:	71cf      	strb	r7, [r1, #7]
100632b0:	2006      	movs	r0, #6
100632b2:	7188      	strb	r0, [r1, #6]
100632b4:	20ff      	movs	r0, #255	@ 0xff
100632b6:	7148      	strb	r0, [r1, #5]
100632b8:	2082      	movs	r0, #130	@ 0x82
100632ba:	7108      	strb	r0, [r1, #4]
100632bc:	0a30      	lsrs	r0, r6, #8
100632be:	7348      	strb	r0, [r1, #13]
100632c0:	0a28      	lsrs	r0, r5, #8
100632c2:	72c8      	strb	r0, [r1, #11]
100632c4:	4620      	mov	r0, r4
100632c6:	f7f0 f96c 	bl	100535a2 <aci_event_fifo_push>
100632ca:	e000      	b.n	100632ce <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
100632cc:	2707      	movs	r7, #7
100632ce:	4638      	mov	r0, r7
100632d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100632d2:	46c0      	nop			@ (mov r8, r8)

100632d4 <__arm_cp.27_0>:
100632d4:	20001174 	.word	0x20001174

100632d8 <__arm_cp.27_1>:
100632d8:	20001124 	.word	0x20001124

100632dc <aci_att_clt_find_info_resp_event_push_noinline>:
100632dc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100632de:	4604      	mov	r4, r0
100632e0:	06c0      	lsls	r0, r0, #27
100632e2:	d424      	bmi.n	1006332e <aci_att_clt_find_info_resp_event_push_noinline+0x52>
100632e4:	4616      	mov	r6, r2
100632e6:	4813      	ldr	r0, [pc, #76]	@ (10063334 <__arm_cp.28_0>)
100632e8:	6800      	ldr	r0, [r0, #0]
100632ea:	2250      	movs	r2, #80	@ 0x50
100632ec:	5c80      	ldrb	r0, [r0, r2]
100632ee:	2500      	movs	r5, #0
100632f0:	0700      	lsls	r0, r0, #28
100632f2:	d51d      	bpl.n	10063330 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
100632f4:	461f      	mov	r7, r3
100632f6:	9101      	str	r1, [sp, #4]
100632f8:	9502      	str	r5, [sp, #8]
100632fa:	480f      	ldr	r0, [pc, #60]	@ (10063338 <__arm_cp.28_1>)
100632fc:	6800      	ldr	r0, [r0, #0]
100632fe:	0761      	lsls	r1, r4, #29
10063300:	0ec9      	lsrs	r1, r1, #27
10063302:	1840      	adds	r0, r0, r1
10063304:	6900      	ldr	r0, [r0, #16]
10063306:	2507      	movs	r5, #7
10063308:	2303      	movs	r3, #3
1006330a:	4621      	mov	r1, r4
1006330c:	462a      	mov	r2, r5
1006330e:	f7f0 f8ab 	bl	10053468 <aci_event_fifo_push_header>
10063312:	2800      	cmp	r0, #0
10063314:	d00c      	beq.n	10063330 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10063316:	4601      	mov	r1, r0
10063318:	60c7      	str	r7, [r0, #12]
1006331a:	8146      	strh	r6, [r0, #10]
1006331c:	9801      	ldr	r0, [sp, #4]
1006331e:	8108      	strh	r0, [r1, #8]
10063320:	4806      	ldr	r0, [pc, #24]	@ (1006333c <__arm_cp.28_2>)
10063322:	6048      	str	r0, [r1, #4]
10063324:	4620      	mov	r0, r4
10063326:	f7f0 f93c 	bl	100535a2 <aci_event_fifo_push>
1006332a:	9d02      	ldr	r5, [sp, #8]
1006332c:	e000      	b.n	10063330 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
1006332e:	2586      	movs	r5, #134	@ 0x86
10063330:	4628      	mov	r0, r5
10063332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10063334 <__arm_cp.28_0>:
10063334:	20001174 	.word	0x20001174

10063338 <__arm_cp.28_1>:
10063338:	20001124 	.word	0x20001124

1006333c <__arm_cp.28_2>:
1006333c:	10062a15 	.word	0x10062a15

10063340 <aci_att_clt_find_by_type_value_resp_event_push_noinline>:
10063340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063342:	4605      	mov	r5, r0
10063344:	06c0      	lsls	r0, r0, #27
10063346:	d421      	bmi.n	1006338c <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4c>
10063348:	460e      	mov	r6, r1
1006334a:	4813      	ldr	r0, [pc, #76]	@ (10063398 <__arm_cp.29_0>)
1006334c:	6800      	ldr	r0, [r0, #0]
1006334e:	2150      	movs	r1, #80	@ 0x50
10063350:	5c40      	ldrb	r0, [r0, r1]
10063352:	2400      	movs	r4, #0
10063354:	06c0      	lsls	r0, r0, #27
10063356:	d51a      	bpl.n	1006338e <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063358:	4617      	mov	r7, r2
1006335a:	9300      	str	r3, [sp, #0]
1006335c:	480f      	ldr	r0, [pc, #60]	@ (1006339c <__arm_cp.29_1>)
1006335e:	6800      	ldr	r0, [r0, #0]
10063360:	0769      	lsls	r1, r5, #29
10063362:	0ec9      	lsrs	r1, r1, #27
10063364:	1840      	adds	r0, r0, r1
10063366:	6900      	ldr	r0, [r0, #16]
10063368:	2208      	movs	r2, #8
1006336a:	2303      	movs	r3, #3
1006336c:	4629      	mov	r1, r5
1006336e:	f7f0 f87b 	bl	10053468 <aci_event_fifo_push_header>
10063372:	2800      	cmp	r0, #0
10063374:	d00d      	beq.n	10063392 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x52>
10063376:	4601      	mov	r1, r0
10063378:	9800      	ldr	r0, [sp, #0]
1006337a:	60c8      	str	r0, [r1, #12]
1006337c:	814f      	strh	r7, [r1, #10]
1006337e:	810e      	strh	r6, [r1, #8]
10063380:	4807      	ldr	r0, [pc, #28]	@ (100633a0 <__arm_cp.29_2>)
10063382:	6048      	str	r0, [r1, #4]
10063384:	4628      	mov	r0, r5
10063386:	f7f0 f90c 	bl	100535a2 <aci_event_fifo_push>
1006338a:	e000      	b.n	1006338e <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
1006338c:	2486      	movs	r4, #134	@ 0x86
1006338e:	4620      	mov	r0, r4
10063390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063392:	2407      	movs	r4, #7
10063394:	e7fb      	b.n	1006338e <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063396:	46c0      	nop			@ (mov r8, r8)

10063398 <__arm_cp.29_0>:
10063398:	20001174 	.word	0x20001174

1006339c <__arm_cp.29_1>:
1006339c:	20001124 	.word	0x20001124

100633a0 <__arm_cp.29_2>:
100633a0:	10062a69 	.word	0x10062a69

100633a4 <aci_att_clt_read_by_type_resp_event_push_noinline>:
100633a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100633a6:	4605      	mov	r5, r0
100633a8:	06c0      	lsls	r0, r0, #27
100633aa:	d421      	bmi.n	100633f0 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4c>
100633ac:	460e      	mov	r6, r1
100633ae:	4813      	ldr	r0, [pc, #76]	@ (100633fc <__arm_cp.30_0>)
100633b0:	6800      	ldr	r0, [r0, #0]
100633b2:	2150      	movs	r1, #80	@ 0x50
100633b4:	5c40      	ldrb	r0, [r0, r1]
100633b6:	2400      	movs	r4, #0
100633b8:	0680      	lsls	r0, r0, #26
100633ba:	d51a      	bpl.n	100633f2 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
100633bc:	4617      	mov	r7, r2
100633be:	9300      	str	r3, [sp, #0]
100633c0:	480f      	ldr	r0, [pc, #60]	@ (10063400 <__arm_cp.30_1>)
100633c2:	6800      	ldr	r0, [r0, #0]
100633c4:	0769      	lsls	r1, r5, #29
100633c6:	0ec9      	lsrs	r1, r1, #27
100633c8:	1840      	adds	r0, r0, r1
100633ca:	6900      	ldr	r0, [r0, #16]
100633cc:	2209      	movs	r2, #9
100633ce:	2303      	movs	r3, #3
100633d0:	4629      	mov	r1, r5
100633d2:	f7f0 f849 	bl	10053468 <aci_event_fifo_push_header>
100633d6:	2800      	cmp	r0, #0
100633d8:	d00d      	beq.n	100633f6 <aci_att_clt_read_by_type_resp_event_push_noinline+0x52>
100633da:	4601      	mov	r1, r0
100633dc:	9800      	ldr	r0, [sp, #0]
100633de:	60c8      	str	r0, [r1, #12]
100633e0:	814f      	strh	r7, [r1, #10]
100633e2:	810e      	strh	r6, [r1, #8]
100633e4:	4807      	ldr	r0, [pc, #28]	@ (10063404 <__arm_cp.30_2>)
100633e6:	6048      	str	r0, [r1, #4]
100633e8:	4628      	mov	r0, r5
100633ea:	f7f0 f8da 	bl	100535a2 <aci_event_fifo_push>
100633ee:	e000      	b.n	100633f2 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
100633f0:	2486      	movs	r4, #134	@ 0x86
100633f2:	4620      	mov	r0, r4
100633f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100633f6:	2407      	movs	r4, #7
100633f8:	e7fb      	b.n	100633f2 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
100633fa:	46c0      	nop			@ (mov r8, r8)

100633fc <__arm_cp.30_0>:
100633fc:	20001174 	.word	0x20001174

10063400 <__arm_cp.30_1>:
10063400:	20001124 	.word	0x20001124

10063404 <__arm_cp.30_2>:
10063404:	10062ab5 	.word	0x10062ab5

10063408 <aci_att_clt_read_resp_event_push_noinline>:
10063408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006340a:	4605      	mov	r5, r0
1006340c:	06c0      	lsls	r0, r0, #27
1006340e:	d421      	bmi.n	10063454 <aci_att_clt_read_resp_event_push_noinline+0x4c>
10063410:	460e      	mov	r6, r1
10063412:	4813      	ldr	r0, [pc, #76]	@ (10063460 <__arm_cp.31_0>)
10063414:	6800      	ldr	r0, [r0, #0]
10063416:	2150      	movs	r1, #80	@ 0x50
10063418:	5c40      	ldrb	r0, [r0, r1]
1006341a:	2400      	movs	r4, #0
1006341c:	0640      	lsls	r0, r0, #25
1006341e:	d51a      	bpl.n	10063456 <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063420:	4617      	mov	r7, r2
10063422:	9300      	str	r3, [sp, #0]
10063424:	480f      	ldr	r0, [pc, #60]	@ (10063464 <__arm_cp.31_1>)
10063426:	6800      	ldr	r0, [r0, #0]
10063428:	0769      	lsls	r1, r5, #29
1006342a:	0ec9      	lsrs	r1, r1, #27
1006342c:	1840      	adds	r0, r0, r1
1006342e:	6900      	ldr	r0, [r0, #16]
10063430:	220a      	movs	r2, #10
10063432:	2303      	movs	r3, #3
10063434:	4629      	mov	r1, r5
10063436:	f7f0 f817 	bl	10053468 <aci_event_fifo_push_header>
1006343a:	2800      	cmp	r0, #0
1006343c:	d00d      	beq.n	1006345a <aci_att_clt_read_resp_event_push_noinline+0x52>
1006343e:	4601      	mov	r1, r0
10063440:	9800      	ldr	r0, [sp, #0]
10063442:	60c8      	str	r0, [r1, #12]
10063444:	814f      	strh	r7, [r1, #10]
10063446:	810e      	strh	r6, [r1, #8]
10063448:	4807      	ldr	r0, [pc, #28]	@ (10063468 <__arm_cp.31_2>)
1006344a:	6048      	str	r0, [r1, #4]
1006344c:	4628      	mov	r0, r5
1006344e:	f7f0 f8a8 	bl	100535a2 <aci_event_fifo_push>
10063452:	e000      	b.n	10063456 <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063454:	2486      	movs	r4, #134	@ 0x86
10063456:	4620      	mov	r0, r4
10063458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006345a:	2407      	movs	r4, #7
1006345c:	e7fb      	b.n	10063456 <aci_att_clt_read_resp_event_push_noinline+0x4e>
1006345e:	46c0      	nop			@ (mov r8, r8)

10063460 <__arm_cp.31_0>:
10063460:	20001174 	.word	0x20001174

10063464 <__arm_cp.31_1>:
10063464:	20001124 	.word	0x20001124

10063468 <__arm_cp.31_2>:
10063468:	10062b09 	.word	0x10062b09

1006346c <aci_att_clt_read_blob_resp_event_push_noinline>:
1006346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006346e:	4605      	mov	r5, r0
10063470:	06c0      	lsls	r0, r0, #27
10063472:	d421      	bmi.n	100634b8 <aci_att_clt_read_blob_resp_event_push_noinline+0x4c>
10063474:	460e      	mov	r6, r1
10063476:	4813      	ldr	r0, [pc, #76]	@ (100634c4 <__arm_cp.32_0>)
10063478:	6800      	ldr	r0, [r0, #0]
1006347a:	2150      	movs	r1, #80	@ 0x50
1006347c:	5640      	ldrsb	r0, [r0, r1]
1006347e:	2400      	movs	r4, #0
10063480:	2800      	cmp	r0, #0
10063482:	d51a      	bpl.n	100634ba <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063484:	4617      	mov	r7, r2
10063486:	9300      	str	r3, [sp, #0]
10063488:	480f      	ldr	r0, [pc, #60]	@ (100634c8 <__arm_cp.32_1>)
1006348a:	6800      	ldr	r0, [r0, #0]
1006348c:	0769      	lsls	r1, r5, #29
1006348e:	0ec9      	lsrs	r1, r1, #27
10063490:	1840      	adds	r0, r0, r1
10063492:	6900      	ldr	r0, [r0, #16]
10063494:	220b      	movs	r2, #11
10063496:	2303      	movs	r3, #3
10063498:	4629      	mov	r1, r5
1006349a:	f7ef ffe5 	bl	10053468 <aci_event_fifo_push_header>
1006349e:	2800      	cmp	r0, #0
100634a0:	d00d      	beq.n	100634be <aci_att_clt_read_blob_resp_event_push_noinline+0x52>
100634a2:	4601      	mov	r1, r0
100634a4:	9800      	ldr	r0, [sp, #0]
100634a6:	60c8      	str	r0, [r1, #12]
100634a8:	814f      	strh	r7, [r1, #10]
100634aa:	810e      	strh	r6, [r1, #8]
100634ac:	4807      	ldr	r0, [pc, #28]	@ (100634cc <__arm_cp.32_2>)
100634ae:	6048      	str	r0, [r1, #4]
100634b0:	4628      	mov	r0, r5
100634b2:	f7f0 f876 	bl	100535a2 <aci_event_fifo_push>
100634b6:	e000      	b.n	100634ba <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
100634b8:	2486      	movs	r4, #134	@ 0x86
100634ba:	4620      	mov	r0, r4
100634bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100634be:	2407      	movs	r4, #7
100634c0:	e7fb      	b.n	100634ba <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
100634c2:	46c0      	nop			@ (mov r8, r8)

100634c4 <__arm_cp.32_0>:
100634c4:	20001174 	.word	0x20001174

100634c8 <__arm_cp.32_1>:
100634c8:	20001124 	.word	0x20001124

100634cc <__arm_cp.32_2>:
100634cc:	10062b59 	.word	0x10062b59

100634d0 <aci_att_clt_read_multiple_resp_event_push_noinline>:
100634d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100634d2:	4605      	mov	r5, r0
100634d4:	06c0      	lsls	r0, r0, #27
100634d6:	d421      	bmi.n	1006351c <aci_att_clt_read_multiple_resp_event_push_noinline+0x4c>
100634d8:	460e      	mov	r6, r1
100634da:	4813      	ldr	r0, [pc, #76]	@ (10063528 <__arm_cp.33_0>)
100634dc:	6800      	ldr	r0, [r0, #0]
100634de:	2151      	movs	r1, #81	@ 0x51
100634e0:	5c40      	ldrb	r0, [r0, r1]
100634e2:	2400      	movs	r4, #0
100634e4:	07c0      	lsls	r0, r0, #31
100634e6:	d01a      	beq.n	1006351e <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
100634e8:	4617      	mov	r7, r2
100634ea:	9300      	str	r3, [sp, #0]
100634ec:	480f      	ldr	r0, [pc, #60]	@ (1006352c <__arm_cp.33_1>)
100634ee:	6800      	ldr	r0, [r0, #0]
100634f0:	0769      	lsls	r1, r5, #29
100634f2:	0ec9      	lsrs	r1, r1, #27
100634f4:	1840      	adds	r0, r0, r1
100634f6:	6900      	ldr	r0, [r0, #16]
100634f8:	220c      	movs	r2, #12
100634fa:	2303      	movs	r3, #3
100634fc:	4629      	mov	r1, r5
100634fe:	f7ef ffb3 	bl	10053468 <aci_event_fifo_push_header>
10063502:	2800      	cmp	r0, #0
10063504:	d00d      	beq.n	10063522 <aci_att_clt_read_multiple_resp_event_push_noinline+0x52>
10063506:	4601      	mov	r1, r0
10063508:	9800      	ldr	r0, [sp, #0]
1006350a:	60c8      	str	r0, [r1, #12]
1006350c:	814f      	strh	r7, [r1, #10]
1006350e:	810e      	strh	r6, [r1, #8]
10063510:	4807      	ldr	r0, [pc, #28]	@ (10063530 <__arm_cp.33_2>)
10063512:	6048      	str	r0, [r1, #4]
10063514:	4628      	mov	r0, r5
10063516:	f7f0 f844 	bl	100535a2 <aci_event_fifo_push>
1006351a:	e000      	b.n	1006351e <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
1006351c:	2486      	movs	r4, #134	@ 0x86
1006351e:	4620      	mov	r0, r4
10063520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063522:	2407      	movs	r4, #7
10063524:	e7fb      	b.n	1006351e <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063526:	46c0      	nop			@ (mov r8, r8)

10063528 <__arm_cp.33_0>:
10063528:	20001174 	.word	0x20001174

1006352c <__arm_cp.33_1>:
1006352c:	20001124 	.word	0x20001124

10063530 <__arm_cp.33_2>:
10063530:	10062ba9 	.word	0x10062ba9

10063534 <aci_att_clt_read_by_group_type_resp_event_push_noinline>:
10063534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063536:	4605      	mov	r5, r0
10063538:	06c0      	lsls	r0, r0, #27
1006353a:	d421      	bmi.n	10063580 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4c>
1006353c:	460e      	mov	r6, r1
1006353e:	4813      	ldr	r0, [pc, #76]	@ (1006358c <__arm_cp.34_0>)
10063540:	6800      	ldr	r0, [r0, #0]
10063542:	2151      	movs	r1, #81	@ 0x51
10063544:	5c40      	ldrb	r0, [r0, r1]
10063546:	2400      	movs	r4, #0
10063548:	0780      	lsls	r0, r0, #30
1006354a:	d51a      	bpl.n	10063582 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
1006354c:	4617      	mov	r7, r2
1006354e:	9300      	str	r3, [sp, #0]
10063550:	480f      	ldr	r0, [pc, #60]	@ (10063590 <__arm_cp.34_1>)
10063552:	6800      	ldr	r0, [r0, #0]
10063554:	0769      	lsls	r1, r5, #29
10063556:	0ec9      	lsrs	r1, r1, #27
10063558:	1840      	adds	r0, r0, r1
1006355a:	6900      	ldr	r0, [r0, #16]
1006355c:	220d      	movs	r2, #13
1006355e:	2303      	movs	r3, #3
10063560:	4629      	mov	r1, r5
10063562:	f7ef ff81 	bl	10053468 <aci_event_fifo_push_header>
10063566:	2800      	cmp	r0, #0
10063568:	d00d      	beq.n	10063586 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x52>
1006356a:	4601      	mov	r1, r0
1006356c:	9800      	ldr	r0, [sp, #0]
1006356e:	60c8      	str	r0, [r1, #12]
10063570:	814f      	strh	r7, [r1, #10]
10063572:	810e      	strh	r6, [r1, #8]
10063574:	4807      	ldr	r0, [pc, #28]	@ (10063594 <__arm_cp.34_2>)
10063576:	6048      	str	r0, [r1, #4]
10063578:	4628      	mov	r0, r5
1006357a:	f7f0 f812 	bl	100535a2 <aci_event_fifo_push>
1006357e:	e000      	b.n	10063582 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10063580:	2486      	movs	r4, #134	@ 0x86
10063582:	4620      	mov	r0, r4
10063584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063586:	2407      	movs	r4, #7
10063588:	e7fb      	b.n	10063582 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
1006358a:	46c0      	nop			@ (mov r8, r8)

1006358c <__arm_cp.34_0>:
1006358c:	20001174 	.word	0x20001174

10063590 <__arm_cp.34_1>:
10063590:	20001124 	.word	0x20001124

10063594 <__arm_cp.34_2>:
10063594:	10062bf9 	.word	0x10062bf9

10063598 <aci_att_clt_prepare_write_resp_event_push_noinline>:
10063598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006359a:	4605      	mov	r5, r0
1006359c:	06c0      	lsls	r0, r0, #27
1006359e:	d421      	bmi.n	100635e4 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4c>
100635a0:	460e      	mov	r6, r1
100635a2:	4813      	ldr	r0, [pc, #76]	@ (100635f0 <__arm_cp.35_0>)
100635a4:	6800      	ldr	r0, [r0, #0]
100635a6:	2151      	movs	r1, #81	@ 0x51
100635a8:	5c40      	ldrb	r0, [r0, r1]
100635aa:	2400      	movs	r4, #0
100635ac:	0700      	lsls	r0, r0, #28
100635ae:	d51a      	bpl.n	100635e6 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
100635b0:	4617      	mov	r7, r2
100635b2:	9300      	str	r3, [sp, #0]
100635b4:	480f      	ldr	r0, [pc, #60]	@ (100635f4 <__arm_cp.35_1>)
100635b6:	6800      	ldr	r0, [r0, #0]
100635b8:	0769      	lsls	r1, r5, #29
100635ba:	0ec9      	lsrs	r1, r1, #27
100635bc:	1840      	adds	r0, r0, r1
100635be:	6900      	ldr	r0, [r0, #16]
100635c0:	220e      	movs	r2, #14
100635c2:	2303      	movs	r3, #3
100635c4:	4629      	mov	r1, r5
100635c6:	f7ef ff4f 	bl	10053468 <aci_event_fifo_push_header>
100635ca:	2800      	cmp	r0, #0
100635cc:	d00d      	beq.n	100635ea <aci_att_clt_prepare_write_resp_event_push_noinline+0x52>
100635ce:	4601      	mov	r1, r0
100635d0:	9800      	ldr	r0, [sp, #0]
100635d2:	60c8      	str	r0, [r1, #12]
100635d4:	814f      	strh	r7, [r1, #10]
100635d6:	810e      	strh	r6, [r1, #8]
100635d8:	4807      	ldr	r0, [pc, #28]	@ (100635f8 <__arm_cp.35_2>)
100635da:	6048      	str	r0, [r1, #4]
100635dc:	4628      	mov	r0, r5
100635de:	f7ef ffe0 	bl	100535a2 <aci_event_fifo_push>
100635e2:	e000      	b.n	100635e6 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
100635e4:	2486      	movs	r4, #134	@ 0x86
100635e6:	4620      	mov	r0, r4
100635e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100635ea:	2407      	movs	r4, #7
100635ec:	e7fb      	b.n	100635e6 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
100635ee:	46c0      	nop			@ (mov r8, r8)

100635f0 <__arm_cp.35_0>:
100635f0:	20001174 	.word	0x20001174

100635f4 <__arm_cp.35_1>:
100635f4:	20001124 	.word	0x20001124

100635f8 <__arm_cp.35_2>:
100635f8:	10062c4d 	.word	0x10062c4d

100635fc <aci_att_clt_exec_write_resp_event_push_noinline>:
100635fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100635fe:	4604      	mov	r4, r0
10063600:	06c0      	lsls	r0, r0, #27
10063602:	d408      	bmi.n	10063616 <aci_att_clt_exec_write_resp_event_push_noinline+0x1a>
10063604:	460d      	mov	r5, r1
10063606:	4819      	ldr	r0, [pc, #100]	@ (1006366c <__arm_cp.36_0>)
10063608:	6800      	ldr	r0, [r0, #0]
1006360a:	2151      	movs	r1, #81	@ 0x51
1006360c:	5c40      	ldrb	r0, [r0, r1]
1006360e:	06c0      	lsls	r0, r0, #27
10063610:	d403      	bmi.n	1006361a <aci_att_clt_exec_write_resp_event_push_noinline+0x1e>
10063612:	2700      	movs	r7, #0
10063614:	e027      	b.n	10063666 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063616:	2786      	movs	r7, #134	@ 0x86
10063618:	e025      	b.n	10063666 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
1006361a:	4616      	mov	r6, r2
1006361c:	4814      	ldr	r0, [pc, #80]	@ (10063670 <__arm_cp.36_1>)
1006361e:	6800      	ldr	r0, [r0, #0]
10063620:	0761      	lsls	r1, r4, #29
10063622:	0ec9      	lsrs	r1, r1, #27
10063624:	1840      	adds	r0, r0, r1
10063626:	6900      	ldr	r0, [r0, #16]
10063628:	2259      	movs	r2, #89	@ 0x59
1006362a:	2303      	movs	r3, #3
1006362c:	4621      	mov	r1, r4
1006362e:	f7ef ff1b 	bl	10053468 <aci_event_fifo_push_header>
10063632:	2800      	cmp	r0, #0
10063634:	d016      	beq.n	10063664 <aci_att_clt_exec_write_resp_event_push_noinline+0x68>
10063636:	4601      	mov	r1, r0
10063638:	7306      	strb	r6, [r0, #12]
1006363a:	7285      	strb	r5, [r0, #10]
1006363c:	200c      	movs	r0, #12
1006363e:	7248      	strb	r0, [r1, #9]
10063640:	200d      	movs	r0, #13
10063642:	7208      	strb	r0, [r1, #8]
10063644:	2700      	movs	r7, #0
10063646:	71cf      	strb	r7, [r1, #7]
10063648:	2006      	movs	r0, #6
1006364a:	7188      	strb	r0, [r1, #6]
1006364c:	20ff      	movs	r0, #255	@ 0xff
1006364e:	7148      	strb	r0, [r1, #5]
10063650:	2082      	movs	r0, #130	@ 0x82
10063652:	7108      	strb	r0, [r1, #4]
10063654:	0a30      	lsrs	r0, r6, #8
10063656:	7348      	strb	r0, [r1, #13]
10063658:	0a28      	lsrs	r0, r5, #8
1006365a:	72c8      	strb	r0, [r1, #11]
1006365c:	4620      	mov	r0, r4
1006365e:	f7ef ffa0 	bl	100535a2 <aci_event_fifo_push>
10063662:	e000      	b.n	10063666 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063664:	2707      	movs	r7, #7
10063666:	4638      	mov	r0, r7
10063668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006366a:	46c0      	nop			@ (mov r8, r8)

1006366c <__arm_cp.36_0>:
1006366c:	20001174 	.word	0x20001174

10063670 <__arm_cp.36_1>:
10063670:	20001124 	.word	0x20001124

10063674 <aci_att_srv_prepare_write_req_event_push_noinline>:
10063674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063676:	4604      	mov	r4, r0
10063678:	06c0      	lsls	r0, r0, #27
1006367a:	d420      	bmi.n	100636be <aci_att_srv_prepare_write_req_event_push_noinline+0x4a>
1006367c:	461f      	mov	r7, r3
1006367e:	4616      	mov	r6, r2
10063680:	460d      	mov	r5, r1
10063682:	4811      	ldr	r0, [pc, #68]	@ (100636c8 <__arm_cp.37_0>)
10063684:	6800      	ldr	r0, [r0, #0]
10063686:	0761      	lsls	r1, r4, #29
10063688:	0ec9      	lsrs	r1, r1, #27
1006368a:	1840      	adds	r0, r0, r1
1006368c:	6900      	ldr	r0, [r0, #16]
1006368e:	2212      	movs	r2, #18
10063690:	2305      	movs	r3, #5
10063692:	4621      	mov	r1, r4
10063694:	f7ef fee8 	bl	10053468 <aci_event_fifo_push_header>
10063698:	2800      	cmp	r0, #0
1006369a:	d012      	beq.n	100636c2 <aci_att_srv_prepare_write_req_event_push_noinline+0x4e>
1006369c:	4601      	mov	r1, r0
1006369e:	9808      	ldr	r0, [sp, #32]
100636a0:	9a07      	ldr	r2, [sp, #28]
100636a2:	9b06      	ldr	r3, [sp, #24]
100636a4:	6148      	str	r0, [r1, #20]
100636a6:	820a      	strh	r2, [r1, #16]
100636a8:	81cb      	strh	r3, [r1, #14]
100636aa:	818f      	strh	r7, [r1, #12]
100636ac:	814e      	strh	r6, [r1, #10]
100636ae:	810d      	strh	r5, [r1, #8]
100636b0:	4806      	ldr	r0, [pc, #24]	@ (100636cc <__arm_cp.37_1>)
100636b2:	6048      	str	r0, [r1, #4]
100636b4:	4620      	mov	r0, r4
100636b6:	f7ef ff74 	bl	100535a2 <aci_event_fifo_push>
100636ba:	2000      	movs	r0, #0
100636bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100636be:	2086      	movs	r0, #134	@ 0x86
100636c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100636c2:	2007      	movs	r0, #7
100636c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100636c6:	46c0      	nop			@ (mov r8, r8)

100636c8 <__arm_cp.37_0>:
100636c8:	20001124 	.word	0x20001124

100636cc <__arm_cp.37_1>:
100636cc:	10062c99 	.word	0x10062c99

100636d0 <aci_att_srv_exec_write_req_event_push_noinline>:
100636d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100636d2:	4604      	mov	r4, r0
100636d4:	06c0      	lsls	r0, r0, #27
100636d6:	d428      	bmi.n	1006372a <aci_att_srv_exec_write_req_event_push_noinline+0x5a>
100636d8:	461f      	mov	r7, r3
100636da:	4616      	mov	r6, r2
100636dc:	460d      	mov	r5, r1
100636de:	4815      	ldr	r0, [pc, #84]	@ (10063734 <__arm_cp.38_0>)
100636e0:	6800      	ldr	r0, [r0, #0]
100636e2:	0761      	lsls	r1, r4, #29
100636e4:	0ec9      	lsrs	r1, r1, #27
100636e6:	1840      	adds	r0, r0, r1
100636e8:	6900      	ldr	r0, [r0, #16]
100636ea:	2260      	movs	r2, #96	@ 0x60
100636ec:	2303      	movs	r3, #3
100636ee:	4621      	mov	r1, r4
100636f0:	f7ef feba 	bl	10053468 <aci_event_fifo_push_header>
100636f4:	2800      	cmp	r0, #0
100636f6:	d01a      	beq.n	1006372e <aci_att_srv_exec_write_req_event_push_noinline+0x5e>
100636f8:	4601      	mov	r1, r0
100636fa:	7306      	strb	r6, [r0, #12]
100636fc:	7285      	strb	r5, [r0, #10]
100636fe:	200c      	movs	r0, #12
10063700:	7248      	strb	r0, [r1, #9]
10063702:	201c      	movs	r0, #28
10063704:	7208      	strb	r0, [r1, #8]
10063706:	463a      	mov	r2, r7
10063708:	2700      	movs	r7, #0
1006370a:	71cf      	strb	r7, [r1, #7]
1006370c:	2007      	movs	r0, #7
1006370e:	7188      	strb	r0, [r1, #6]
10063710:	738a      	strb	r2, [r1, #14]
10063712:	20ff      	movs	r0, #255	@ 0xff
10063714:	7148      	strb	r0, [r1, #5]
10063716:	2082      	movs	r0, #130	@ 0x82
10063718:	7108      	strb	r0, [r1, #4]
1006371a:	0a30      	lsrs	r0, r6, #8
1006371c:	7348      	strb	r0, [r1, #13]
1006371e:	0a28      	lsrs	r0, r5, #8
10063720:	72c8      	strb	r0, [r1, #11]
10063722:	4620      	mov	r0, r4
10063724:	f7ef ff3d 	bl	100535a2 <aci_event_fifo_push>
10063728:	e002      	b.n	10063730 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
1006372a:	2786      	movs	r7, #134	@ 0x86
1006372c:	e000      	b.n	10063730 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
1006372e:	2707      	movs	r7, #7
10063730:	4638      	mov	r0, r7
10063732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063734 <__arm_cp.38_0>:
10063734:	20001124 	.word	0x20001124

10063738 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>:
10063738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006373a:	4605      	mov	r5, r0
1006373c:	06c0      	lsls	r0, r0, #27
1006373e:	d421      	bmi.n	10063784 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4c>
10063740:	460e      	mov	r6, r1
10063742:	4813      	ldr	r0, [pc, #76]	@ (10063790 <__arm_cp.39_0>)
10063744:	6800      	ldr	r0, [r0, #0]
10063746:	2152      	movs	r1, #82	@ 0x52
10063748:	5c40      	ldrb	r0, [r0, r1]
1006374a:	2400      	movs	r4, #0
1006374c:	0740      	lsls	r0, r0, #29
1006374e:	d51a      	bpl.n	10063786 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063750:	4617      	mov	r7, r2
10063752:	9300      	str	r3, [sp, #0]
10063754:	480f      	ldr	r0, [pc, #60]	@ (10063794 <__arm_cp.39_1>)
10063756:	6800      	ldr	r0, [r0, #0]
10063758:	0769      	lsls	r1, r5, #29
1006375a:	0ec9      	lsrs	r1, r1, #27
1006375c:	1840      	adds	r0, r0, r1
1006375e:	6900      	ldr	r0, [r0, #16]
10063760:	2213      	movs	r2, #19
10063762:	2303      	movs	r3, #3
10063764:	4629      	mov	r1, r5
10063766:	f7ef fe7f 	bl	10053468 <aci_event_fifo_push_header>
1006376a:	2800      	cmp	r0, #0
1006376c:	d00d      	beq.n	1006378a <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x52>
1006376e:	4601      	mov	r1, r0
10063770:	9800      	ldr	r0, [sp, #0]
10063772:	60c8      	str	r0, [r1, #12]
10063774:	814f      	strh	r7, [r1, #10]
10063776:	810e      	strh	r6, [r1, #8]
10063778:	4807      	ldr	r0, [pc, #28]	@ (10063798 <__arm_cp.39_2>)
1006377a:	6048      	str	r0, [r1, #4]
1006377c:	4628      	mov	r0, r5
1006377e:	f7ef ff10 	bl	100535a2 <aci_event_fifo_push>
10063782:	e000      	b.n	10063786 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063784:	2486      	movs	r4, #134	@ 0x86
10063786:	4620      	mov	r0, r4
10063788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006378a:	2407      	movs	r4, #7
1006378c:	e7fb      	b.n	10063786 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
1006378e:	46c0      	nop			@ (mov r8, r8)

10063790 <__arm_cp.39_0>:
10063790:	20001174 	.word	0x20001174

10063794 <__arm_cp.39_1>:
10063794:	20001124 	.word	0x20001124

10063798 <__arm_cp.39_2>:
10063798:	10062cf5 	.word	0x10062cf5

1006379c <hci_number_of_completed_packets_event_cb>:
1006379c:	b51c      	push	{r2, r3, r4, lr}
1006379e:	8889      	ldrh	r1, [r1, #4]
100637a0:	466c      	mov	r4, sp
100637a2:	1ce0      	adds	r0, r4, #3
100637a4:	f7f0 f992 	bl	10053acc <hci_number_of_completed_packets_event_copy>
100637a8:	2005      	movs	r0, #5
100637aa:	70a0      	strb	r0, [r4, #2]
100637ac:	2013      	movs	r0, #19
100637ae:	7060      	strb	r0, [r4, #1]
100637b0:	2004      	movs	r0, #4
100637b2:	7020      	strb	r0, [r4, #0]
100637b4:	2108      	movs	r1, #8
100637b6:	4620      	mov	r0, r4
100637b8:	f7ee f988 	bl	10051acc <BLE_STACK_Event>
100637bc:	bd1c      	pop	{r2, r3, r4, pc}
	...

100637c0 <hci_number_of_completed_packets_event_push_noinline>:
100637c0:	b5b0      	push	{r4, r5, r7, lr}
100637c2:	4604      	mov	r4, r0
100637c4:	06c0      	lsls	r0, r0, #27
100637c6:	d416      	bmi.n	100637f6 <hci_number_of_completed_packets_event_push_noinline+0x36>
100637c8:	460d      	mov	r5, r1
100637ca:	480d      	ldr	r0, [pc, #52]	@ (10063800 <__arm_cp.22_0>)
100637cc:	6800      	ldr	r0, [r0, #0]
100637ce:	0761      	lsls	r1, r4, #29
100637d0:	0ec9      	lsrs	r1, r1, #27
100637d2:	1840      	adds	r0, r0, r1
100637d4:	6900      	ldr	r0, [r0, #16]
100637d6:	2202      	movs	r2, #2
100637d8:	4621      	mov	r1, r4
100637da:	4613      	mov	r3, r2
100637dc:	f7ef fe44 	bl	10053468 <aci_event_fifo_push_header>
100637e0:	2800      	cmp	r0, #0
100637e2:	d00a      	beq.n	100637fa <hci_number_of_completed_packets_event_push_noinline+0x3a>
100637e4:	4601      	mov	r1, r0
100637e6:	4807      	ldr	r0, [pc, #28]	@ (10063804 <__arm_cp.22_1>)
100637e8:	6048      	str	r0, [r1, #4]
100637ea:	810d      	strh	r5, [r1, #8]
100637ec:	4620      	mov	r0, r4
100637ee:	f7ef fed8 	bl	100535a2 <aci_event_fifo_push>
100637f2:	2000      	movs	r0, #0
100637f4:	bdb0      	pop	{r4, r5, r7, pc}
100637f6:	2086      	movs	r0, #134	@ 0x86
100637f8:	bdb0      	pop	{r4, r5, r7, pc}
100637fa:	2007      	movs	r0, #7
100637fc:	bdb0      	pop	{r4, r5, r7, pc}
100637fe:	46c0      	nop			@ (mov r8, r8)

10063800 <__arm_cp.22_0>:
10063800:	20001124 	.word	0x20001124

10063804 <__arm_cp.22_1>:
10063804:	1006379d 	.word	0x1006379d

10063808 <hci_le_read_remote_features_complete_event_push_noinline>:
10063808:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006380a:	4605      	mov	r5, r0
1006380c:	06c0      	lsls	r0, r0, #27
1006380e:	d433      	bmi.n	10063878 <hci_le_read_remote_features_complete_event_push_noinline+0x70>
10063810:	4617      	mov	r7, r2
10063812:	481c      	ldr	r0, [pc, #112]	@ (10063884 <__arm_cp.26_0>)
10063814:	6800      	ldr	r0, [r0, #0]
10063816:	223d      	movs	r2, #61	@ 0x3d
10063818:	5c82      	ldrb	r2, [r0, r2]
1006381a:	2400      	movs	r4, #0
1006381c:	0692      	lsls	r2, r2, #26
1006381e:	d52c      	bpl.n	1006387a <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063820:	303d      	adds	r0, #61	@ 0x3d
10063822:	7a40      	ldrb	r0, [r0, #9]
10063824:	0700      	lsls	r0, r0, #28
10063826:	d528      	bpl.n	1006387a <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063828:	9101      	str	r1, [sp, #4]
1006382a:	9302      	str	r3, [sp, #8]
1006382c:	4816      	ldr	r0, [pc, #88]	@ (10063888 <__arm_cp.26_1>)
1006382e:	6800      	ldr	r0, [r0, #0]
10063830:	0769      	lsls	r1, r5, #29
10063832:	0ec9      	lsrs	r1, r1, #27
10063834:	1840      	adds	r0, r0, r1
10063836:	6900      	ldr	r0, [r0, #16]
10063838:	2225      	movs	r2, #37	@ 0x25
1006383a:	2304      	movs	r3, #4
1006383c:	4629      	mov	r1, r5
1006383e:	9300      	str	r3, [sp, #0]
10063840:	f7ef fe12 	bl	10053468 <aci_event_fifo_push_header>
10063844:	2800      	cmp	r0, #0
10063846:	d01a      	beq.n	1006387e <hci_le_read_remote_features_complete_event_push_noinline+0x76>
10063848:	4606      	mov	r6, r0
1006384a:	7247      	strb	r7, [r0, #9]
1006384c:	9801      	ldr	r0, [sp, #4]
1006384e:	7230      	strb	r0, [r6, #8]
10063850:	0a38      	lsrs	r0, r7, #8
10063852:	72b0      	strb	r0, [r6, #10]
10063854:	4630      	mov	r0, r6
10063856:	300b      	adds	r0, #11
10063858:	2208      	movs	r2, #8
1006385a:	9902      	ldr	r1, [sp, #8]
1006385c:	f7e2 fb0c 	bl	10045e78 <BLEPLAT_MemCpy>
10063860:	9900      	ldr	r1, [sp, #0]
10063862:	71f1      	strb	r1, [r6, #7]
10063864:	200c      	movs	r0, #12
10063866:	71b0      	strb	r0, [r6, #6]
10063868:	203e      	movs	r0, #62	@ 0x3e
1006386a:	7170      	strb	r0, [r6, #5]
1006386c:	7131      	strb	r1, [r6, #4]
1006386e:	4628      	mov	r0, r5
10063870:	4631      	mov	r1, r6
10063872:	f7ef fe96 	bl	100535a2 <aci_event_fifo_push>
10063876:	e000      	b.n	1006387a <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063878:	2486      	movs	r4, #134	@ 0x86
1006387a:	4620      	mov	r0, r4
1006387c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006387e:	2407      	movs	r4, #7
10063880:	e7fb      	b.n	1006387a <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063882:	46c0      	nop			@ (mov r8, r8)

10063884 <__arm_cp.26_0>:
10063884:	20001174 	.word	0x20001174

10063888 <__arm_cp.26_1>:
10063888:	20001124 	.word	0x20001124

1006388c <aci_l2cap_proc_timeout_event_cb>:
1006388c:	b510      	push	{r4, lr}
1006388e:	b0ff      	sub	sp, #508	@ 0x1fc
10063890:	b083      	sub	sp, #12
10063892:	8889      	ldrh	r1, [r1, #4]
10063894:	466c      	mov	r4, sp
10063896:	1da0      	adds	r0, r4, #6
10063898:	f7f0 fb64 	bl	10053f64 <aci_l2cap_proc_timeout_event_copy>
1006389c:	7a21      	ldrb	r1, [r4, #8]
1006389e:	1d48      	adds	r0, r1, #5
100638a0:	70a0      	strb	r0, [r4, #2]
100638a2:	0a00      	lsrs	r0, r0, #8
100638a4:	70e0      	strb	r0, [r4, #3]
100638a6:	2001      	movs	r0, #1
100638a8:	7120      	strb	r0, [r4, #4]
100638aa:	20ff      	movs	r0, #255	@ 0xff
100638ac:	7060      	strb	r0, [r4, #1]
100638ae:	2082      	movs	r0, #130	@ 0x82
100638b0:	7020      	strb	r0, [r4, #0]
100638b2:	2008      	movs	r0, #8
100638b4:	7160      	strb	r0, [r4, #5]
100638b6:	3109      	adds	r1, #9
100638b8:	4620      	mov	r0, r4
100638ba:	f7ee f907 	bl	10051acc <BLE_STACK_Event>
100638be:	b07f      	add	sp, #508	@ 0x1fc
100638c0:	b003      	add	sp, #12
100638c2:	bd10      	pop	{r4, pc}

100638c4 <aci_hal_fw_error_event_push_noinline>:
100638c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100638c6:	4604      	mov	r4, r0
100638c8:	06c0      	lsls	r0, r0, #27
100638ca:	d42d      	bmi.n	10063928 <aci_hal_fw_error_event_push_noinline+0x64>
100638cc:	4615      	mov	r5, r2
100638ce:	460f      	mov	r7, r1
100638d0:	9300      	str	r3, [sp, #0]
100638d2:	4818      	ldr	r0, [pc, #96]	@ (10063934 <__arm_cp.0_0>)
100638d4:	6800      	ldr	r0, [r0, #0]
100638d6:	0761      	lsls	r1, r4, #29
100638d8:	0ec9      	lsrs	r1, r1, #27
100638da:	1840      	adds	r0, r0, r1
100638dc:	6900      	ldr	r0, [r0, #16]
100638de:	1e51      	subs	r1, r2, #1
100638e0:	2203      	movs	r2, #3
100638e2:	430a      	orrs	r2, r1
100638e4:	3209      	adds	r2, #9
100638e6:	0891      	lsrs	r1, r2, #2
100638e8:	b28b      	uxth	r3, r1
100638ea:	2240      	movs	r2, #64	@ 0x40
100638ec:	4621      	mov	r1, r4
100638ee:	f7ef fdbb 	bl	10053468 <aci_event_fifo_push_header>
100638f2:	2800      	cmp	r0, #0
100638f4:	d01a      	beq.n	1006392c <aci_hal_fw_error_event_push_noinline+0x68>
100638f6:	4606      	mov	r6, r0
100638f8:	72c5      	strb	r5, [r0, #11]
100638fa:	7287      	strb	r7, [r0, #10]
100638fc:	300c      	adds	r0, #12
100638fe:	9900      	ldr	r1, [sp, #0]
10063900:	462a      	mov	r2, r5
10063902:	f7e2 fab9 	bl	10045e78 <BLEPLAT_MemCpy>
10063906:	2700      	movs	r7, #0
10063908:	7277      	strb	r7, [r6, #9]
1006390a:	2006      	movs	r0, #6
1006390c:	7230      	strb	r0, [r6, #8]
1006390e:	1d28      	adds	r0, r5, #4
10063910:	0a01      	lsrs	r1, r0, #8
10063912:	71f1      	strb	r1, [r6, #7]
10063914:	71b0      	strb	r0, [r6, #6]
10063916:	20ff      	movs	r0, #255	@ 0xff
10063918:	7170      	strb	r0, [r6, #5]
1006391a:	2082      	movs	r0, #130	@ 0x82
1006391c:	7130      	strb	r0, [r6, #4]
1006391e:	4620      	mov	r0, r4
10063920:	4631      	mov	r1, r6
10063922:	f7ef fe3e 	bl	100535a2 <aci_event_fifo_push>
10063926:	e002      	b.n	1006392e <aci_hal_fw_error_event_push_noinline+0x6a>
10063928:	2786      	movs	r7, #134	@ 0x86
1006392a:	e000      	b.n	1006392e <aci_hal_fw_error_event_push_noinline+0x6a>
1006392c:	2707      	movs	r7, #7
1006392e:	4638      	mov	r0, r7
10063930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063932:	46c0      	nop			@ (mov r8, r8)

10063934 <__arm_cp.0_0>:
10063934:	20001124 	.word	0x20001124

10063938 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
10063938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006393a:	4604      	mov	r4, r0
1006393c:	06c0      	lsls	r0, r0, #27
1006393e:	d42d      	bmi.n	1006399c <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
10063940:	4616      	mov	r6, r2
10063942:	460d      	mov	r5, r1
10063944:	4818      	ldr	r0, [pc, #96]	@ (100639a8 <__arm_cp.1_0>)
10063946:	6800      	ldr	r0, [r0, #0]
10063948:	0761      	lsls	r1, r4, #29
1006394a:	0ec9      	lsrs	r1, r1, #27
1006394c:	1840      	adds	r0, r0, r1
1006394e:	6900      	ldr	r0, [r0, #16]
10063950:	2241      	movs	r2, #65	@ 0x41
10063952:	2304      	movs	r3, #4
10063954:	4621      	mov	r1, r4
10063956:	f7ef fd87 	bl	10053468 <aci_event_fifo_push_header>
1006395a:	2800      	cmp	r0, #0
1006395c:	d020      	beq.n	100639a0 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
1006395e:	4601      	mov	r1, r0
10063960:	300a      	adds	r0, #10
10063962:	7106      	strb	r6, [r0, #4]
10063964:	7005      	strb	r5, [r0, #0]
10063966:	2700      	movs	r7, #0
10063968:	724f      	strb	r7, [r1, #9]
1006396a:	2210      	movs	r2, #16
1006396c:	720a      	strb	r2, [r1, #8]
1006396e:	71cf      	strb	r7, [r1, #7]
10063970:	220a      	movs	r2, #10
10063972:	718a      	strb	r2, [r1, #6]
10063974:	22ff      	movs	r2, #255	@ 0xff
10063976:	714a      	strb	r2, [r1, #5]
10063978:	2282      	movs	r2, #130	@ 0x82
1006397a:	710a      	strb	r2, [r1, #4]
1006397c:	0e32      	lsrs	r2, r6, #24
1006397e:	71c2      	strb	r2, [r0, #7]
10063980:	0c32      	lsrs	r2, r6, #16
10063982:	7182      	strb	r2, [r0, #6]
10063984:	0a32      	lsrs	r2, r6, #8
10063986:	7142      	strb	r2, [r0, #5]
10063988:	0e2a      	lsrs	r2, r5, #24
1006398a:	70c2      	strb	r2, [r0, #3]
1006398c:	0c2a      	lsrs	r2, r5, #16
1006398e:	7082      	strb	r2, [r0, #2]
10063990:	0a2a      	lsrs	r2, r5, #8
10063992:	7042      	strb	r2, [r0, #1]
10063994:	4620      	mov	r0, r4
10063996:	f7ef fe04 	bl	100535a2 <aci_event_fifo_push>
1006399a:	e002      	b.n	100639a2 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1006399c:	2786      	movs	r7, #134	@ 0x86
1006399e:	e000      	b.n	100639a2 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
100639a0:	2707      	movs	r7, #7
100639a2:	4638      	mov	r0, r7
100639a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100639a6:	46c0      	nop			@ (mov r8, r8)

100639a8 <__arm_cp.1_0>:
100639a8:	20001124 	.word	0x20001124

100639ac <aci_gap_pairing_complete_event_push_noinline>:
100639ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100639ae:	4604      	mov	r4, r0
100639b0:	06c0      	lsls	r0, r0, #27
100639b2:	d408      	bmi.n	100639c6 <aci_gap_pairing_complete_event_push_noinline+0x1a>
100639b4:	460d      	mov	r5, r1
100639b6:	4819      	ldr	r0, [pc, #100]	@ (10063a1c <__arm_cp.1_0>)
100639b8:	6800      	ldr	r0, [r0, #0]
100639ba:	214e      	movs	r1, #78	@ 0x4e
100639bc:	5c40      	ldrb	r0, [r0, r1]
100639be:	0780      	lsls	r0, r0, #30
100639c0:	d403      	bmi.n	100639ca <aci_gap_pairing_complete_event_push_noinline+0x1e>
100639c2:	2600      	movs	r6, #0
100639c4:	e028      	b.n	10063a18 <aci_gap_pairing_complete_event_push_noinline+0x6c>
100639c6:	2686      	movs	r6, #134	@ 0x86
100639c8:	e026      	b.n	10063a18 <aci_gap_pairing_complete_event_push_noinline+0x6c>
100639ca:	461f      	mov	r7, r3
100639cc:	4616      	mov	r6, r2
100639ce:	4814      	ldr	r0, [pc, #80]	@ (10063a20 <__arm_cp.1_1>)
100639d0:	6800      	ldr	r0, [r0, #0]
100639d2:	0761      	lsls	r1, r4, #29
100639d4:	0ec9      	lsrs	r1, r1, #27
100639d6:	1840      	adds	r0, r0, r1
100639d8:	6900      	ldr	r0, [r0, #16]
100639da:	2245      	movs	r2, #69	@ 0x45
100639dc:	2303      	movs	r3, #3
100639de:	4621      	mov	r1, r4
100639e0:	f7ef fd42 	bl	10053468 <aci_event_fifo_push_header>
100639e4:	2800      	cmp	r0, #0
100639e6:	d016      	beq.n	10063a16 <aci_gap_pairing_complete_event_push_noinline+0x6a>
100639e8:	4601      	mov	r1, r0
100639ea:	7285      	strb	r5, [r0, #10]
100639ec:	2004      	movs	r0, #4
100639ee:	7248      	strb	r0, [r1, #9]
100639f0:	2001      	movs	r0, #1
100639f2:	7208      	strb	r0, [r1, #8]
100639f4:	4632      	mov	r2, r6
100639f6:	2600      	movs	r6, #0
100639f8:	71ce      	strb	r6, [r1, #7]
100639fa:	2006      	movs	r0, #6
100639fc:	7188      	strb	r0, [r1, #6]
100639fe:	734f      	strb	r7, [r1, #13]
10063a00:	730a      	strb	r2, [r1, #12]
10063a02:	20ff      	movs	r0, #255	@ 0xff
10063a04:	7148      	strb	r0, [r1, #5]
10063a06:	2082      	movs	r0, #130	@ 0x82
10063a08:	7108      	strb	r0, [r1, #4]
10063a0a:	0a28      	lsrs	r0, r5, #8
10063a0c:	72c8      	strb	r0, [r1, #11]
10063a0e:	4620      	mov	r0, r4
10063a10:	f7ef fdc7 	bl	100535a2 <aci_event_fifo_push>
10063a14:	e000      	b.n	10063a18 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10063a16:	2607      	movs	r6, #7
10063a18:	4630      	mov	r0, r6
10063a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063a1c <__arm_cp.1_0>:
10063a1c:	20001174 	.word	0x20001174

10063a20 <__arm_cp.1_1>:
10063a20:	20001124 	.word	0x20001124

10063a24 <GAT_att_clt_init>:
10063a24:	b580      	push	{r7, lr}
10063a26:	f000 fd35 	bl	10064494 <GAT_clt_init>
10063a2a:	bd80      	pop	{r7, pc}

10063a2c <GAT_att_clt_rcv>:
10063a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063a2e:	4604      	mov	r4, r0
10063a30:	8805      	ldrh	r5, [r0, #0]
10063a32:	f7f4 f9e0 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10063a36:	4601      	mov	r1, r0
10063a38:	4628      	mov	r0, r5
10063a3a:	f7f1 f9eb 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
10063a3e:	4605      	mov	r5, r0
10063a40:	4620      	mov	r0, r4
10063a42:	f000 f8d7 	bl	10063bf4 <GAT_att_cmn_get_opcode>
10063a46:	281d      	cmp	r0, #29
10063a48:	d003      	beq.n	10063a52 <GAT_att_clt_rcv+0x26>
10063a4a:	2823      	cmp	r0, #35	@ 0x23
10063a4c:	d001      	beq.n	10063a52 <GAT_att_clt_rcv+0x26>
10063a4e:	281b      	cmp	r0, #27
10063a50:	d10e      	bne.n	10063a70 <GAT_att_clt_rcv+0x44>
10063a52:	8861      	ldrh	r1, [r4, #2]
10063a54:	88ea      	ldrh	r2, [r5, #6]
10063a56:	4291      	cmp	r1, r2
10063a58:	d805      	bhi.n	10063a66 <GAT_att_clt_rcv+0x3a>
10063a5a:	2903      	cmp	r1, #3
10063a5c:	d303      	bcc.n	10063a66 <GAT_att_clt_rcv+0x3a>
10063a5e:	2823      	cmp	r0, #35	@ 0x23
10063a60:	d167      	bne.n	10063b32 <GAT_att_clt_rcv+0x106>
10063a62:	2904      	cmp	r1, #4
10063a64:	d865      	bhi.n	10063b32 <GAT_att_clt_rcv+0x106>
10063a66:	4620      	mov	r0, r4
10063a68:	f7ef fb28 	bl	100530bc <ACL_pkt_release>
10063a6c:	2000      	movs	r0, #0
10063a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063a70:	4620      	mov	r0, r4
10063a72:	f000 f8bf 	bl	10063bf4 <GAT_att_cmn_get_opcode>
10063a76:	88a9      	ldrh	r1, [r5, #4]
10063a78:	06ca      	lsls	r2, r1, #27
10063a7a:	d56e      	bpl.n	10063b5a <GAT_att_clt_rcv+0x12e>
10063a7c:	2801      	cmp	r0, #1
10063a7e:	d002      	beq.n	10063a86 <GAT_att_clt_rcv+0x5a>
10063a80:	78aa      	ldrb	r2, [r5, #2]
10063a82:	4290      	cmp	r0, r2
10063a84:	d169      	bne.n	10063b5a <GAT_att_clt_rcv+0x12e>
10063a86:	2010      	movs	r0, #16
10063a88:	4381      	bics	r1, r0
10063a8a:	80a9      	strh	r1, [r5, #4]
10063a8c:	896a      	ldrh	r2, [r5, #10]
10063a8e:	8929      	ldrh	r1, [r5, #8]
10063a90:	2603      	movs	r6, #3
10063a92:	4630      	mov	r0, r6
10063a94:	f7f1 fa30 	bl	10054ef8 <GAT_att_cmn_stop_timer>
10063a98:	8861      	ldrh	r1, [r4, #2]
10063a9a:	88e8      	ldrh	r0, [r5, #6]
10063a9c:	9100      	str	r1, [sp, #0]
10063a9e:	4281      	cmp	r1, r0
10063aa0:	d900      	bls.n	10063aa4 <GAT_att_clt_rcv+0x78>
10063aa2:	e09a      	b.n	10063bda <GAT_att_clt_rcv+0x1ae>
10063aa4:	4620      	mov	r0, r4
10063aa6:	f000 f8a5 	bl	10063bf4 <GAT_att_cmn_get_opcode>
10063aaa:	1e42      	subs	r2, r0, #1
10063aac:	2101      	movs	r1, #1
10063aae:	41ca      	rors	r2, r1
10063ab0:	2300      	movs	r3, #0
10063ab2:	2a10      	cmp	r2, #16
10063ab4:	d900      	bls.n	10063ab8 <GAT_att_clt_rcv+0x8c>
10063ab6:	e088      	b.n	10063bca <GAT_att_clt_rcv+0x19e>
10063ab8:	0092      	lsls	r2, r2, #2
10063aba:	461f      	mov	r7, r3
10063abc:	a301      	add	r3, pc, #4	@ (adr r3, 10063ac4 <GAT_att_clt_rcv+0x98>)
10063abe:	589a      	ldr	r2, [r3, r2]
10063ac0:	463b      	mov	r3, r7
10063ac2:	4697      	mov	pc, r2
10063ac4:	10063b7b 	.word	0x10063b7b
10063ac8:	10063b7f 	.word	0x10063b7f
10063acc:	10063b8b 	.word	0x10063b8b
10063ad0:	10063ba9 	.word	0x10063ba9
10063ad4:	10063b09 	.word	0x10063b09
10063ad8:	10063bd1 	.word	0x10063bd1
10063adc:	10063bd1 	.word	0x10063bd1
10063ae0:	10063bd1 	.word	0x10063bd1
10063ae4:	10063b09 	.word	0x10063b09
10063ae8:	10063b77 	.word	0x10063b77
10063aec:	10063bcb 	.word	0x10063bcb
10063af0:	10063b83 	.word	0x10063b83
10063af4:	10063b77 	.word	0x10063b77
10063af8:	10063bcb 	.word	0x10063bcb
10063afc:	10063bcb 	.word	0x10063bcb
10063b00:	10063bcb 	.word	0x10063bcb
10063b04:	10063bd1 	.word	0x10063bd1
10063b08:	2809      	cmp	r0, #9
10063b0a:	d102      	bne.n	10063b12 <GAT_att_clt_rcv+0xe6>
10063b0c:	9900      	ldr	r1, [sp, #0]
10063b0e:	2904      	cmp	r1, #4
10063b10:	d35b      	bcc.n	10063bca <GAT_att_clt_rcv+0x19e>
10063b12:	2811      	cmp	r0, #17
10063b14:	d102      	bne.n	10063b1c <GAT_att_clt_rcv+0xf0>
10063b16:	9800      	ldr	r0, [sp, #0]
10063b18:	2806      	cmp	r0, #6
10063b1a:	d356      	bcc.n	10063bca <GAT_att_clt_rcv+0x19e>
10063b1c:	89a0      	ldrh	r0, [r4, #12]
10063b1e:	1c40      	adds	r0, r0, #1
10063b20:	b281      	uxth	r1, r0
10063b22:	4620      	mov	r0, r4
10063b24:	f000 fa47 	bl	10063fb6 <ACL_pkt_read_8b>
10063b28:	463b      	mov	r3, r7
10063b2a:	2800      	cmp	r0, #0
10063b2c:	d04d      	beq.n	10063bca <GAT_att_clt_rcv+0x19e>
10063b2e:	4601      	mov	r1, r0
10063b30:	e043      	b.n	10063bba <GAT_att_clt_rcv+0x18e>
10063b32:	281d      	cmp	r0, #29
10063b34:	d10d      	bne.n	10063b52 <GAT_att_clt_rcv+0x126>
10063b36:	88a8      	ldrh	r0, [r5, #4]
10063b38:	0680      	lsls	r0, r0, #26
10063b3a:	d412      	bmi.n	10063b62 <GAT_att_clt_rcv+0x136>
10063b3c:	896a      	ldrh	r2, [r5, #10]
10063b3e:	8929      	ldrh	r1, [r5, #8]
10063b40:	2002      	movs	r0, #2
10063b42:	f7f1 fa23 	bl	10054f8c <GAT_att_cmn_start_timer>
10063b46:	2800      	cmp	r0, #0
10063b48:	d14c      	bne.n	10063be4 <GAT_att_clt_rcv+0x1b8>
10063b4a:	88a8      	ldrh	r0, [r5, #4]
10063b4c:	2120      	movs	r1, #32
10063b4e:	4301      	orrs	r1, r0
10063b50:	80a9      	strh	r1, [r5, #4]
10063b52:	4620      	mov	r0, r4
10063b54:	f000 ffb7 	bl	10064ac6 <GAT_clt_rcv_srv_initiated>
10063b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b5a:	4620      	mov	r0, r4
10063b5c:	f000 fab7 	bl	100640ce <GAT_att_clt_unexpect_rx>
10063b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b62:	3508      	adds	r5, #8
10063b64:	2042      	movs	r0, #66	@ 0x42
10063b66:	2103      	movs	r1, #3
10063b68:	2202      	movs	r2, #2
10063b6a:	462b      	mov	r3, r5
10063b6c:	f7ff feaa 	bl	100638c4 <aci_hal_fw_error_event_push_noinline>
10063b70:	2800      	cmp	r0, #0
10063b72:	d137      	bne.n	10063be4 <GAT_att_clt_rcv+0x1b8>
10063b74:	e777      	b.n	10063a66 <GAT_att_clt_rcv+0x3a>
10063b76:	460b      	mov	r3, r1
10063b78:	e027      	b.n	10063bca <GAT_att_clt_rcv+0x19e>
10063b7a:	2305      	movs	r3, #5
10063b7c:	e025      	b.n	10063bca <GAT_att_clt_rcv+0x19e>
10063b7e:	4633      	mov	r3, r6
10063b80:	e023      	b.n	10063bca <GAT_att_clt_rcv+0x19e>
10063b82:	9b00      	ldr	r3, [sp, #0]
10063b84:	2b04      	cmp	r3, #4
10063b86:	d91f      	bls.n	10063bc8 <GAT_att_clt_rcv+0x19c>
10063b88:	e01f      	b.n	10063bca <GAT_att_clt_rcv+0x19e>
10063b8a:	9800      	ldr	r0, [sp, #0]
10063b8c:	2806      	cmp	r0, #6
10063b8e:	d31c      	bcc.n	10063bca <GAT_att_clt_rcv+0x19e>
10063b90:	89a0      	ldrh	r0, [r4, #12]
10063b92:	1c40      	adds	r0, r0, #1
10063b94:	b281      	uxth	r1, r0
10063b96:	4620      	mov	r0, r4
10063b98:	f000 fa0d 	bl	10063fb6 <ACL_pkt_read_8b>
10063b9c:	2801      	cmp	r0, #1
10063b9e:	d00b      	beq.n	10063bb8 <GAT_att_clt_rcv+0x18c>
10063ba0:	2802      	cmp	r0, #2
10063ba2:	d11a      	bne.n	10063bda <GAT_att_clt_rcv+0x1ae>
10063ba4:	2112      	movs	r1, #18
10063ba6:	e008      	b.n	10063bba <GAT_att_clt_rcv+0x18e>
10063ba8:	9800      	ldr	r0, [sp, #0]
10063baa:	2802      	cmp	r0, #2
10063bac:	d30d      	bcc.n	10063bca <GAT_att_clt_rcv+0x19e>
10063bae:	9b00      	ldr	r3, [sp, #0]
10063bb0:	1e58      	subs	r0, r3, #1
10063bb2:	0780      	lsls	r0, r0, #30
10063bb4:	d108      	bne.n	10063bc8 <GAT_att_clt_rcv+0x19c>
10063bb6:	e008      	b.n	10063bca <GAT_att_clt_rcv+0x19e>
10063bb8:	2104      	movs	r1, #4
10063bba:	9e00      	ldr	r6, [sp, #0]
10063bbc:	1eb0      	subs	r0, r6, #2
10063bbe:	f7dc fbd9 	bl	10040374 <__aeabi_uidivmod>
10063bc2:	2900      	cmp	r1, #0
10063bc4:	4633      	mov	r3, r6
10063bc6:	d000      	beq.n	10063bca <GAT_att_clt_rcv+0x19e>
10063bc8:	2300      	movs	r3, #0
10063bca:	9800      	ldr	r0, [sp, #0]
10063bcc:	4298      	cmp	r0, r3
10063bce:	d104      	bne.n	10063bda <GAT_att_clt_rcv+0x1ae>
10063bd0:	4807      	ldr	r0, [pc, #28]	@ (10063bf0 <__arm_cp.1_0>)
10063bd2:	6801      	ldr	r1, [r0, #0]
10063bd4:	4620      	mov	r0, r4
10063bd6:	4788      	blx	r1
10063bd8:	e002      	b.n	10063be0 <GAT_att_clt_rcv+0x1b4>
10063bda:	4620      	mov	r0, r4
10063bdc:	f000 ff5e 	bl	10064a9c <GAT_clt_rcv_corrupted>
10063be0:	2884      	cmp	r0, #132	@ 0x84
10063be2:	d101      	bne.n	10063be8 <GAT_att_clt_rcv+0x1bc>
10063be4:	2084      	movs	r0, #132	@ 0x84
10063be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063be8:	2000      	movs	r0, #0
10063bea:	70a8      	strb	r0, [r5, #2]
10063bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063bee:	46c0      	nop			@ (mov r8, r8)

10063bf0 <__arm_cp.1_0>:
10063bf0:	2000151c 	.word	0x2000151c

10063bf4 <GAT_att_cmn_get_opcode>:
10063bf4:	b580      	push	{r7, lr}
10063bf6:	8981      	ldrh	r1, [r0, #12]
10063bf8:	f000 f9dd 	bl	10063fb6 <ACL_pkt_read_8b>
10063bfc:	bd80      	pop	{r7, pc}

10063bfe <GAT_att_clt_connection>:
10063bfe:	b580      	push	{r7, lr}
10063c00:	f000 fc70 	bl	100644e4 <GAT_clt_connection>
10063c04:	bd80      	pop	{r7, pc}

10063c06 <GAT_att_clt_bearer_close>:
10063c06:	b580      	push	{r7, lr}
10063c08:	f000 fc6e 	bl	100644e8 <GAT_clt_bearer_close>
10063c0c:	bd80      	pop	{r7, pc}
	...

10063c10 <GAT_att_clt_tx>:
10063c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063c12:	4605      	mov	r5, r0
10063c14:	8881      	ldrh	r1, [r0, #4]
10063c16:	8840      	ldrh	r0, [r0, #2]
10063c18:	f7f1 f8fc 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
10063c1c:	2800      	cmp	r0, #0
10063c1e:	d008      	beq.n	10063c32 <GAT_att_clt_tx+0x22>
10063c20:	4604      	mov	r4, r0
10063c22:	7829      	ldrb	r1, [r5, #0]
10063c24:	291e      	cmp	r1, #30
10063c26:	d106      	bne.n	10063c36 <GAT_att_clt_tx+0x26>
10063c28:	88a0      	ldrh	r0, [r4, #4]
10063c2a:	0680      	lsls	r0, r0, #26
10063c2c:	d439      	bmi.n	10063ca2 <GAT_att_clt_tx+0x92>
10063c2e:	260c      	movs	r6, #12
10063c30:	e193      	b.n	10063f5a <GAT_att_clt_tx+0x34a>
10063c32:	2612      	movs	r6, #18
10063c34:	e191      	b.n	10063f5a <GAT_att_clt_tx+0x34a>
10063c36:	0648      	lsls	r0, r1, #25
10063c38:	d406      	bmi.n	10063c48 <GAT_att_clt_tx+0x38>
10063c3a:	48ca      	ldr	r0, [pc, #808]	@ (10063f64 <__arm_cp.5_0>)
10063c3c:	4aca      	ldr	r2, [pc, #808]	@ (10063f68 <__arm_cp.5_1>)
10063c3e:	6002      	str	r2, [r0, #0]
10063c40:	88a0      	ldrh	r0, [r4, #4]
10063c42:	06c0      	lsls	r0, r0, #27
10063c44:	d500      	bpl.n	10063c48 <GAT_att_clt_tx+0x38>
10063c46:	e16d      	b.n	10063f24 <GAT_att_clt_tx+0x314>
10063c48:	88e0      	ldrh	r0, [r4, #6]
10063c4a:	1e8a      	subs	r2, r1, #2
10063c4c:	2686      	movs	r6, #134	@ 0x86
10063c4e:	2a1e      	cmp	r2, #30
10063c50:	d900      	bls.n	10063c54 <GAT_att_clt_tx+0x44>
10063c52:	e091      	b.n	10063d78 <GAT_att_clt_tx+0x168>
10063c54:	2703      	movs	r7, #3
10063c56:	0052      	lsls	r2, r2, #1
10063c58:	447a      	add	r2, pc
10063c5a:	8892      	ldrh	r2, [r2, #4]
10063c5c:	0052      	lsls	r2, r2, #1
10063c5e:	4497      	add	pc, r2
10063c60:	017c0022 	.word	0x017c0022
10063c64:	017c001e 	.word	0x017c001e
10063c68:	017c009f 	.word	0x017c009f
10063c6c:	017c00a2 	.word	0x017c00a2
10063c70:	017c0022 	.word	0x017c0022
10063c74:	017c001e 	.word	0x017c001e
10063c78:	017c0094 	.word	0x017c0094
10063c7c:	017c012d 	.word	0x017c012d
10063c80:	017c0090 	.word	0x017c0090
10063c84:	017c017c 	.word	0x017c017c
10063c88:	017c00a9 	.word	0x017c00a9
10063c8c:	017c00ac 	.word	0x017c00ac
10063c90:	017c017c 	.word	0x017c017c
10063c94:	017c017c 	.word	0x017c017c
10063c98:	017c0021 	.word	0x017c0021
10063c9c:	0094      	.short	0x0094
10063c9e:	2705      	movs	r7, #5
10063ca0:	e001      	b.n	10063ca6 <GAT_att_clt_tx+0x96>
10063ca2:	88e0      	ldrh	r0, [r4, #6]
10063ca4:	2701      	movs	r7, #1
10063ca6:	b2b9      	uxth	r1, r7
10063ca8:	4281      	cmp	r1, r0
10063caa:	d300      	bcc.n	10063cae <GAT_att_clt_tx+0x9e>
10063cac:	4607      	mov	r7, r0
10063cae:	9700      	str	r7, [sp, #0]
10063cb0:	b2bf      	uxth	r7, r7
10063cb2:	4620      	mov	r0, r4
10063cb4:	4639      	mov	r1, r7
10063cb6:	f7f1 f9ab 	bl	10055010 <GAT_att_cmn_get_pckt>
10063cba:	2800      	cmp	r0, #0
10063cbc:	d02f      	beq.n	10063d1e <GAT_att_clt_tx+0x10e>
10063cbe:	4606      	mov	r6, r0
10063cc0:	782a      	ldrb	r2, [r5, #0]
10063cc2:	8981      	ldrh	r1, [r0, #12]
10063cc4:	f000 f954 	bl	10063f70 <ACL_pkt_write_8b>
10063cc8:	7828      	ldrb	r0, [r5, #0]
10063cca:	1e81      	subs	r1, r0, #2
10063ccc:	2916      	cmp	r1, #22
10063cce:	d82d      	bhi.n	10063d2c <GAT_att_clt_tx+0x11c>
10063cd0:	0049      	lsls	r1, r1, #1
10063cd2:	46c0      	nop			@ (mov r8, r8)
10063cd4:	4479      	add	r1, pc
10063cd6:	8889      	ldrh	r1, [r1, #4]
10063cd8:	0049      	lsls	r1, r1, #1
10063cda:	448f      	add	pc, r1
10063cdc:	010d0016 	.word	0x010d0016
10063ce0:	010d0070 	.word	0x010d0070
10063ce4:	010d0077 	.word	0x010d0077
10063ce8:	010d0093 	.word	0x010d0093
10063cec:	010d00a1 	.word	0x010d00a1
10063cf0:	010d00aa 	.word	0x010d00aa
10063cf4:	010d00ba 	.word	0x010d00ba
10063cf8:	010d00c0 	.word	0x010d00c0
10063cfc:	010d002f 	.word	0x010d002f
10063d00:	010d010d 	.word	0x010d010d
10063d04:	010d00ce 	.word	0x010d00ce
10063d08:	00e6      	.short	0x00e6
10063d0a:	4898      	ldr	r0, [pc, #608]	@ (10063f6c <__arm_cp.5_2>)
10063d0c:	8a02      	ldrh	r2, [r0, #16]
10063d0e:	89b0      	ldrh	r0, [r6, #12]
10063d10:	1c40      	adds	r0, r0, #1
10063d12:	b281      	uxth	r1, r0
10063d14:	4630      	mov	r0, r6
10063d16:	f7ef fa06 	bl	10053126 <ACL_pkt_write_16b>
10063d1a:	2003      	movs	r0, #3
10063d1c:	e0eb      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063d1e:	2008      	movs	r0, #8
10063d20:	f7fe f9bc 	bl	1006209c <tsk_notify_idx>
10063d24:	f7e0 f8bb 	bl	10043e9e <BLE_STACK_ProcessRequest>
10063d28:	2688      	movs	r6, #136	@ 0x88
10063d2a:	e116      	b.n	10063f5a <GAT_att_clt_tx+0x34a>
10063d2c:	2820      	cmp	r0, #32
10063d2e:	d100      	bne.n	10063d32 <GAT_att_clt_tx+0x122>
10063d30:	e0ca      	b.n	10063ec8 <GAT_att_clt_tx+0x2b8>
10063d32:	2852      	cmp	r0, #82	@ 0x52
10063d34:	d002      	beq.n	10063d3c <GAT_att_clt_tx+0x12c>
10063d36:	28d2      	cmp	r0, #210	@ 0xd2
10063d38:	d000      	beq.n	10063d3c <GAT_att_clt_tx+0x12c>
10063d3a:	e0dd      	b.n	10063ef8 <GAT_att_clt_tx+0x2e8>
10063d3c:	892a      	ldrh	r2, [r5, #8]
10063d3e:	89b0      	ldrh	r0, [r6, #12]
10063d40:	1c40      	adds	r0, r0, #1
10063d42:	b281      	uxth	r1, r0
10063d44:	4630      	mov	r0, r6
10063d46:	f7ef f9ee 	bl	10053126 <ACL_pkt_write_16b>
10063d4a:	68eb      	ldr	r3, [r5, #12]
10063d4c:	896a      	ldrh	r2, [r5, #10]
10063d4e:	89b0      	ldrh	r0, [r6, #12]
10063d50:	1cc0      	adds	r0, r0, #3
10063d52:	b281      	uxth	r1, r0
10063d54:	4630      	mov	r0, r6
10063d56:	f7ef f9ef 	bl	10053138 <ACL_pkt_write>
10063d5a:	7828      	ldrb	r0, [r5, #0]
10063d5c:	2812      	cmp	r0, #18
10063d5e:	d100      	bne.n	10063d62 <GAT_att_clt_tx+0x152>
10063d60:	e0b8      	b.n	10063ed4 <GAT_att_clt_tx+0x2c4>
10063d62:	28d2      	cmp	r0, #210	@ 0xd2
10063d64:	d000      	beq.n	10063d68 <GAT_att_clt_tx+0x158>
10063d66:	e0c7      	b.n	10063ef8 <GAT_att_clt_tx+0x2e8>
10063d68:	9800      	ldr	r0, [sp, #0]
10063d6a:	380c      	subs	r0, #12
10063d6c:	8070      	strh	r0, [r6, #2]
10063d6e:	8920      	ldrh	r0, [r4, #8]
10063d70:	4631      	mov	r1, r6
10063d72:	f7fe f82c 	bl	10061dce <smp_sap_sm2_packet_data_signing_compute>
10063d76:	e0bf      	b.n	10063ef8 <GAT_att_clt_tx+0x2e8>
10063d78:	2952      	cmp	r1, #82	@ 0x52
10063d7a:	d002      	beq.n	10063d82 <GAT_att_clt_tx+0x172>
10063d7c:	29d2      	cmp	r1, #210	@ 0xd2
10063d7e:	d000      	beq.n	10063d82 <GAT_att_clt_tx+0x172>
10063d80:	e0eb      	b.n	10063f5a <GAT_att_clt_tx+0x34a>
10063d82:	29d2      	cmp	r1, #210	@ 0xd2
10063d84:	d008      	beq.n	10063d98 <GAT_att_clt_tx+0x188>
10063d86:	2103      	movs	r1, #3
10063d88:	e007      	b.n	10063d9a <GAT_att_clt_tx+0x18a>
10063d8a:	7a29      	ldrb	r1, [r5, #8]
10063d8c:	0049      	lsls	r1, r1, #1
10063d8e:	1c4f      	adds	r7, r1, #1
10063d90:	4287      	cmp	r7, r0
10063d92:	d800      	bhi.n	10063d96 <GAT_att_clt_tx+0x186>
10063d94:	e787      	b.n	10063ca6 <GAT_att_clt_tx+0x96>
10063d96:	e0e0      	b.n	10063f5a <GAT_att_clt_tx+0x34a>
10063d98:	210f      	movs	r1, #15
10063d9a:	896a      	ldrh	r2, [r5, #10]
10063d9c:	1857      	adds	r7, r2, r1
10063d9e:	e782      	b.n	10063ca6 <GAT_att_clt_tx+0x96>
10063da0:	89e9      	ldrh	r1, [r5, #14]
10063da2:	1dcf      	adds	r7, r1, #7
10063da4:	e77f      	b.n	10063ca6 <GAT_att_clt_tx+0x96>
10063da6:	68e9      	ldr	r1, [r5, #12]
10063da8:	7c09      	ldrb	r1, [r1, #16]
10063daa:	2980      	cmp	r1, #128	@ 0x80
10063dac:	d000      	beq.n	10063db0 <GAT_att_clt_tx+0x1a0>
10063dae:	e089      	b.n	10063ec4 <GAT_att_clt_tx+0x2b4>
10063db0:	2715      	movs	r7, #21
10063db2:	e778      	b.n	10063ca6 <GAT_att_clt_tx+0x96>
10063db4:	89a9      	ldrh	r1, [r5, #12]
10063db6:	1d4f      	adds	r7, r1, #5
10063db8:	e775      	b.n	10063ca6 <GAT_att_clt_tx+0x96>
10063dba:	2702      	movs	r7, #2
10063dbc:	e773      	b.n	10063ca6 <GAT_att_clt_tx+0x96>
10063dbe:	896a      	ldrh	r2, [r5, #10]
10063dc0:	8929      	ldrh	r1, [r5, #8]
10063dc2:	4630      	mov	r0, r6
10063dc4:	f000 f9a2 	bl	1006410c <GAT_att_clt_fill_handle_range>
10063dc8:	2005      	movs	r0, #5
10063dca:	e094      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063dcc:	896a      	ldrh	r2, [r5, #10]
10063dce:	8929      	ldrh	r1, [r5, #8]
10063dd0:	4630      	mov	r0, r6
10063dd2:	f000 f99b 	bl	1006410c <GAT_att_clt_fill_handle_range>
10063dd6:	89aa      	ldrh	r2, [r5, #12]
10063dd8:	89b0      	ldrh	r0, [r6, #12]
10063dda:	1d40      	adds	r0, r0, #5
10063ddc:	b281      	uxth	r1, r0
10063dde:	4630      	mov	r0, r6
10063de0:	f7ef f9a1 	bl	10053126 <ACL_pkt_write_16b>
10063de4:	89e8      	ldrh	r0, [r5, #14]
10063de6:	1dc0      	adds	r0, r0, #7
10063de8:	42b8      	cmp	r0, r7
10063dea:	d800      	bhi.n	10063dee <GAT_att_clt_tx+0x1de>
10063dec:	4607      	mov	r7, r0
10063dee:	1ff8      	subs	r0, r7, #7
10063df0:	b282      	uxth	r2, r0
10063df2:	692b      	ldr	r3, [r5, #16]
10063df4:	89b0      	ldrh	r0, [r6, #12]
10063df6:	1dc0      	adds	r0, r0, #7
10063df8:	b281      	uxth	r1, r0
10063dfa:	4630      	mov	r0, r6
10063dfc:	f7ef f99c 	bl	10053138 <ACL_pkt_write>
10063e00:	2007      	movs	r0, #7
10063e02:	e078      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063e04:	896a      	ldrh	r2, [r5, #10]
10063e06:	8929      	ldrh	r1, [r5, #8]
10063e08:	4630      	mov	r0, r6
10063e0a:	f000 f97f 	bl	1006410c <GAT_att_clt_fill_handle_range>
10063e0e:	89b0      	ldrh	r0, [r6, #12]
10063e10:	1d40      	adds	r0, r0, #5
10063e12:	68eb      	ldr	r3, [r5, #12]
10063e14:	7c19      	ldrb	r1, [r3, #16]
10063e16:	2980      	cmp	r1, #128	@ 0x80
10063e18:	d15e      	bne.n	10063ed8 <GAT_att_clt_tx+0x2c8>
10063e1a:	b281      	uxth	r1, r0
10063e1c:	2210      	movs	r2, #16
10063e1e:	e05e      	b.n	10063ede <GAT_att_clt_tx+0x2ce>
10063e20:	892a      	ldrh	r2, [r5, #8]
10063e22:	89b0      	ldrh	r0, [r6, #12]
10063e24:	1c40      	adds	r0, r0, #1
10063e26:	b281      	uxth	r1, r0
10063e28:	4630      	mov	r0, r6
10063e2a:	f7ef f97c 	bl	10053126 <ACL_pkt_write_16b>
10063e2e:	200b      	movs	r0, #11
10063e30:	e061      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063e32:	892a      	ldrh	r2, [r5, #8]
10063e34:	89b0      	ldrh	r0, [r6, #12]
10063e36:	1c40      	adds	r0, r0, #1
10063e38:	b281      	uxth	r1, r0
10063e3a:	4630      	mov	r0, r6
10063e3c:	f7ef f973 	bl	10053126 <ACL_pkt_write_16b>
10063e40:	896a      	ldrh	r2, [r5, #10]
10063e42:	89b0      	ldrh	r0, [r6, #12]
10063e44:	1cc0      	adds	r0, r0, #3
10063e46:	b281      	uxth	r1, r0
10063e48:	4630      	mov	r0, r6
10063e4a:	f7ef f96c 	bl	10053126 <ACL_pkt_write_16b>
10063e4e:	200d      	movs	r0, #13
10063e50:	e051      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063e52:	4628      	mov	r0, r5
10063e54:	4631      	mov	r1, r6
10063e56:	f000 f94d 	bl	100640f4 <GAT_att_clt_fill_read_multi_req>
10063e5a:	200f      	movs	r0, #15
10063e5c:	e04b      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063e5e:	896a      	ldrh	r2, [r5, #10]
10063e60:	8929      	ldrh	r1, [r5, #8]
10063e62:	4630      	mov	r0, r6
10063e64:	f000 f952 	bl	1006410c <GAT_att_clt_fill_handle_range>
10063e68:	89b0      	ldrh	r0, [r6, #12]
10063e6a:	1d40      	adds	r0, r0, #5
10063e6c:	68eb      	ldr	r3, [r5, #12]
10063e6e:	7c19      	ldrb	r1, [r3, #16]
10063e70:	2980      	cmp	r1, #128	@ 0x80
10063e72:	d139      	bne.n	10063ee8 <GAT_att_clt_tx+0x2d8>
10063e74:	b281      	uxth	r1, r0
10063e76:	2210      	movs	r2, #16
10063e78:	e039      	b.n	10063eee <GAT_att_clt_tx+0x2de>
10063e7a:	892a      	ldrh	r2, [r5, #8]
10063e7c:	89b0      	ldrh	r0, [r6, #12]
10063e7e:	1c40      	adds	r0, r0, #1
10063e80:	b281      	uxth	r1, r0
10063e82:	4630      	mov	r0, r6
10063e84:	f7ef f94f 	bl	10053126 <ACL_pkt_write_16b>
10063e88:	896a      	ldrh	r2, [r5, #10]
10063e8a:	89b0      	ldrh	r0, [r6, #12]
10063e8c:	1cc0      	adds	r0, r0, #3
10063e8e:	b281      	uxth	r1, r0
10063e90:	4630      	mov	r0, r6
10063e92:	f7ef f948 	bl	10053126 <ACL_pkt_write_16b>
10063e96:	692b      	ldr	r3, [r5, #16]
10063e98:	89aa      	ldrh	r2, [r5, #12]
10063e9a:	89b0      	ldrh	r0, [r6, #12]
10063e9c:	1d40      	adds	r0, r0, #5
10063e9e:	b281      	uxth	r1, r0
10063ea0:	4630      	mov	r0, r6
10063ea2:	f7ef f949 	bl	10053138 <ACL_pkt_write>
10063ea6:	2017      	movs	r0, #23
10063ea8:	e025      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063eaa:	7a2a      	ldrb	r2, [r5, #8]
10063eac:	89b0      	ldrh	r0, [r6, #12]
10063eae:	1c40      	adds	r0, r0, #1
10063eb0:	b281      	uxth	r1, r0
10063eb2:	4630      	mov	r0, r6
10063eb4:	f000 f85c 	bl	10063f70 <ACL_pkt_write_8b>
10063eb8:	2019      	movs	r0, #25
10063eba:	e01c      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063ebc:	68e9      	ldr	r1, [r5, #12]
10063ebe:	7c09      	ldrb	r1, [r1, #16]
10063ec0:	2980      	cmp	r1, #128	@ 0x80
10063ec2:	d04c      	beq.n	10063f5e <GAT_att_clt_tx+0x34e>
10063ec4:	2707      	movs	r7, #7
10063ec6:	e6ee      	b.n	10063ca6 <GAT_att_clt_tx+0x96>
10063ec8:	4628      	mov	r0, r5
10063eca:	4631      	mov	r1, r6
10063ecc:	f000 f912 	bl	100640f4 <GAT_att_clt_fill_read_multi_req>
10063ed0:	2021      	movs	r0, #33	@ 0x21
10063ed2:	e010      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063ed4:	2013      	movs	r0, #19
10063ed6:	e00e      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063ed8:	b281      	uxth	r1, r0
10063eda:	330c      	adds	r3, #12
10063edc:	2202      	movs	r2, #2
10063ede:	4630      	mov	r0, r6
10063ee0:	f7ef f92a 	bl	10053138 <ACL_pkt_write>
10063ee4:	2009      	movs	r0, #9
10063ee6:	e006      	b.n	10063ef6 <GAT_att_clt_tx+0x2e6>
10063ee8:	b281      	uxth	r1, r0
10063eea:	330c      	adds	r3, #12
10063eec:	2202      	movs	r2, #2
10063eee:	4630      	mov	r0, r6
10063ef0:	f7ef f922 	bl	10053138 <ACL_pkt_write>
10063ef4:	2011      	movs	r0, #17
10063ef6:	70a0      	strb	r0, [r4, #2]
10063ef8:	9800      	ldr	r0, [sp, #0]
10063efa:	8070      	strh	r0, [r6, #2]
10063efc:	782a      	ldrb	r2, [r5, #0]
10063efe:	89b1      	ldrh	r1, [r6, #12]
10063f00:	4630      	mov	r0, r6
10063f02:	f000 f835 	bl	10063f70 <ACL_pkt_write_8b>
10063f06:	7828      	ldrb	r0, [r5, #0]
10063f08:	0641      	lsls	r1, r0, #25
10063f0a:	d411      	bmi.n	10063f30 <GAT_att_clt_tx+0x320>
10063f0c:	281e      	cmp	r0, #30
10063f0e:	d00f      	beq.n	10063f30 <GAT_att_clt_tx+0x320>
10063f10:	8962      	ldrh	r2, [r4, #10]
10063f12:	8921      	ldrh	r1, [r4, #8]
10063f14:	2003      	movs	r0, #3
10063f16:	f7f1 f839 	bl	10054f8c <GAT_att_cmn_start_timer>
10063f1a:	2800      	cmp	r0, #0
10063f1c:	d004      	beq.n	10063f28 <GAT_att_clt_tx+0x318>
10063f1e:	4630      	mov	r0, r6
10063f20:	f7ef f8cc 	bl	100530bc <ACL_pkt_release>
10063f24:	2684      	movs	r6, #132	@ 0x84
10063f26:	e018      	b.n	10063f5a <GAT_att_clt_tx+0x34a>
10063f28:	88a0      	ldrh	r0, [r4, #4]
10063f2a:	2110      	movs	r1, #16
10063f2c:	4301      	orrs	r1, r0
10063f2e:	80a1      	strh	r1, [r4, #4]
10063f30:	8960      	ldrh	r0, [r4, #10]
10063f32:	4631      	mov	r1, r6
10063f34:	f7f0 fff0 	bl	10054f18 <GAT_att_cmn_send>
10063f38:	2800      	cmp	r0, #0
10063f3a:	d001      	beq.n	10063f40 <GAT_att_clt_tx+0x330>
10063f3c:	2681      	movs	r6, #129	@ 0x81
10063f3e:	e00c      	b.n	10063f5a <GAT_att_clt_tx+0x34a>
10063f40:	7828      	ldrb	r0, [r5, #0]
10063f42:	2600      	movs	r6, #0
10063f44:	281e      	cmp	r0, #30
10063f46:	d108      	bne.n	10063f5a <GAT_att_clt_tx+0x34a>
10063f48:	8962      	ldrh	r2, [r4, #10]
10063f4a:	8921      	ldrh	r1, [r4, #8]
10063f4c:	2002      	movs	r0, #2
10063f4e:	f7f0 ffd3 	bl	10054ef8 <GAT_att_cmn_stop_timer>
10063f52:	88a0      	ldrh	r0, [r4, #4]
10063f54:	2120      	movs	r1, #32
10063f56:	4388      	bics	r0, r1
10063f58:	80a0      	strh	r0, [r4, #4]
10063f5a:	4630      	mov	r0, r6
10063f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063f5e:	2711      	movs	r7, #17
10063f60:	e6a1      	b.n	10063ca6 <GAT_att_clt_tx+0x96>
10063f62:	46c0      	nop			@ (mov r8, r8)

10063f64 <__arm_cp.5_0>:
10063f64:	2000151c 	.word	0x2000151c

10063f68 <__arm_cp.5_1>:
10063f68:	10064569 	.word	0x10064569

10063f6c <__arm_cp.5_2>:
10063f6c:	20001188 	.word	0x20001188

10063f70 <ACL_pkt_write_8b>:
10063f70:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10063f72:	4614      	mov	r4, r2
10063f74:	6840      	ldr	r0, [r0, #4]
10063f76:	2920      	cmp	r1, #32
10063f78:	d304      	bcc.n	10063f84 <ACL_pkt_write_8b+0x14>
10063f7a:	ad01      	add	r5, sp, #4
10063f7c:	462a      	mov	r2, r5
10063f7e:	f7fb f884 	bl	1005f08a <Mem_Buff_get_buff_off>
10063f82:	8829      	ldrh	r1, [r5, #0]
10063f84:	1840      	adds	r0, r0, r1
10063f86:	7104      	strb	r4, [r0, #4]
10063f88:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10063f8a <GAT_att_clt_read_grp_type_get_last_attr_h>:
10063f8a:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10063f8c:	4604      	mov	r4, r0
10063f8e:	8980      	ldrh	r0, [r0, #12]
10063f90:	1c40      	adds	r0, r0, #1
10063f92:	b281      	uxth	r1, r0
10063f94:	4620      	mov	r0, r4
10063f96:	f000 f80e 	bl	10063fb6 <ACL_pkt_read_8b>
10063f9a:	8861      	ldrh	r1, [r4, #2]
10063f9c:	1a08      	subs	r0, r1, r0
10063f9e:	89a1      	ldrh	r1, [r4, #12]
10063fa0:	1840      	adds	r0, r0, r1
10063fa2:	1c80      	adds	r0, r0, #2
10063fa4:	b281      	uxth	r1, r0
10063fa6:	2202      	movs	r2, #2
10063fa8:	ad01      	add	r5, sp, #4
10063faa:	4620      	mov	r0, r4
10063fac:	462b      	mov	r3, r5
10063fae:	f7ef f8a1 	bl	100530f4 <ACL_pkt_read>
10063fb2:	8828      	ldrh	r0, [r5, #0]
10063fb4:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10063fb6 <ACL_pkt_read_8b>:
10063fb6:	b51c      	push	{r2, r3, r4, lr}
10063fb8:	291f      	cmp	r1, #31
10063fba:	d803      	bhi.n	10063fc4 <ACL_pkt_read_8b+0xe>
10063fbc:	aa01      	add	r2, sp, #4
10063fbe:	8011      	strh	r1, [r2, #0]
10063fc0:	6840      	ldr	r0, [r0, #4]
10063fc2:	e005      	b.n	10063fd0 <ACL_pkt_read_8b+0x1a>
10063fc4:	6840      	ldr	r0, [r0, #4]
10063fc6:	ac01      	add	r4, sp, #4
10063fc8:	4622      	mov	r2, r4
10063fca:	f7fb f85e 	bl	1005f08a <Mem_Buff_get_buff_off>
10063fce:	8821      	ldrh	r1, [r4, #0]
10063fd0:	1840      	adds	r0, r0, r1
10063fd2:	7900      	ldrb	r0, [r0, #4]
10063fd4:	bd1c      	pop	{r2, r3, r4, pc}

10063fd6 <GAT_att_clt_find_type_val_get_last_attr_h>:
10063fd6:	b51c      	push	{r2, r3, r4, lr}
10063fd8:	8981      	ldrh	r1, [r0, #12]
10063fda:	8842      	ldrh	r2, [r0, #2]
10063fdc:	1851      	adds	r1, r2, r1
10063fde:	1e89      	subs	r1, r1, #2
10063fe0:	b289      	uxth	r1, r1
10063fe2:	2202      	movs	r2, #2
10063fe4:	ac01      	add	r4, sp, #4
10063fe6:	4623      	mov	r3, r4
10063fe8:	f7ef f884 	bl	100530f4 <ACL_pkt_read>
10063fec:	8820      	ldrh	r0, [r4, #0]
10063fee:	bd1c      	pop	{r2, r3, r4, pc}

10063ff0 <GAT_att_clt_parse_error_resp>:
10063ff0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10063ff2:	460e      	mov	r6, r1
10063ff4:	8841      	ldrh	r1, [r0, #2]
10063ff6:	2905      	cmp	r1, #5
10063ff8:	d112      	bne.n	10064020 <GAT_att_clt_parse_error_resp+0x30>
10063ffa:	461c      	mov	r4, r3
10063ffc:	4615      	mov	r5, r2
10063ffe:	8981      	ldrh	r1, [r0, #12]
10064000:	2205      	movs	r2, #5
10064002:	af01      	add	r7, sp, #4
10064004:	463b      	mov	r3, r7
10064006:	f7ef f875 	bl	100530f4 <ACL_pkt_read>
1006400a:	7878      	ldrb	r0, [r7, #1]
1006400c:	7030      	strb	r0, [r6, #0]
1006400e:	78b8      	ldrb	r0, [r7, #2]
10064010:	78f9      	ldrb	r1, [r7, #3]
10064012:	0209      	lsls	r1, r1, #8
10064014:	1808      	adds	r0, r1, r0
10064016:	8028      	strh	r0, [r5, #0]
10064018:	9802      	ldr	r0, [sp, #8]
1006401a:	7020      	strb	r0, [r4, #0]
1006401c:	2000      	movs	r0, #0
1006401e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064020:	2086      	movs	r0, #134	@ 0x86
10064022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10064024 <GAT_att_clt_read_type_get_last_attr_h>:
10064024:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10064026:	4604      	mov	r4, r0
10064028:	8980      	ldrh	r0, [r0, #12]
1006402a:	1c40      	adds	r0, r0, #1
1006402c:	b281      	uxth	r1, r0
1006402e:	4620      	mov	r0, r4
10064030:	f7ff ffc1 	bl	10063fb6 <ACL_pkt_read_8b>
10064034:	8861      	ldrh	r1, [r4, #2]
10064036:	1a08      	subs	r0, r1, r0
10064038:	89a1      	ldrh	r1, [r4, #12]
1006403a:	1840      	adds	r0, r0, r1
1006403c:	b281      	uxth	r1, r0
1006403e:	2202      	movs	r2, #2
10064040:	ad01      	add	r5, sp, #4
10064042:	4620      	mov	r0, r4
10064044:	462b      	mov	r3, r5
10064046:	f7ef f855 	bl	100530f4 <ACL_pkt_read>
1006404a:	8828      	ldrh	r0, [r5, #0]
1006404c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1006404e <GAT_att_clt_read_type_get_data>:
1006404e:	b570      	push	{r4, r5, r6, lr}
10064050:	4614      	mov	r4, r2
10064052:	460e      	mov	r6, r1
10064054:	4605      	mov	r5, r0
10064056:	8980      	ldrh	r0, [r0, #12]
10064058:	1c40      	adds	r0, r0, #1
1006405a:	b281      	uxth	r1, r0
1006405c:	4628      	mov	r0, r5
1006405e:	f7ff ffaa 	bl	10063fb6 <ACL_pkt_read_8b>
10064062:	4602      	mov	r2, r0
10064064:	4346      	muls	r6, r0
10064066:	1cb0      	adds	r0, r6, #2
10064068:	8869      	ldrh	r1, [r5, #2]
1006406a:	4288      	cmp	r0, r1
1006406c:	d208      	bcs.n	10064080 <GAT_att_clt_read_type_get_data+0x32>
1006406e:	89a9      	ldrh	r1, [r5, #12]
10064070:	1808      	adds	r0, r1, r0
10064072:	b281      	uxth	r1, r0
10064074:	4628      	mov	r0, r5
10064076:	4623      	mov	r3, r4
10064078:	f7ef f83c 	bl	100530f4 <ACL_pkt_read>
1006407c:	2000      	movs	r0, #0
1006407e:	bd70      	pop	{r4, r5, r6, pc}
10064080:	2086      	movs	r0, #134	@ 0x86
10064082:	bd70      	pop	{r4, r5, r6, pc}

10064084 <GAT_att_clt_find_info_get_last_attr_h>:
10064084:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10064086:	4604      	mov	r4, r0
10064088:	8980      	ldrh	r0, [r0, #12]
1006408a:	1c40      	adds	r0, r0, #1
1006408c:	b281      	uxth	r1, r0
1006408e:	4620      	mov	r0, r4
10064090:	f7ff ff91 	bl	10063fb6 <ACL_pkt_read_8b>
10064094:	2111      	movs	r1, #17
10064096:	43c9      	mvns	r1, r1
10064098:	2801      	cmp	r0, #1
1006409a:	d100      	bne.n	1006409e <GAT_att_clt_find_info_get_last_attr_h+0x1a>
1006409c:	310e      	adds	r1, #14
1006409e:	8860      	ldrh	r0, [r4, #2]
100640a0:	1840      	adds	r0, r0, r1
100640a2:	89a1      	ldrh	r1, [r4, #12]
100640a4:	1808      	adds	r0, r1, r0
100640a6:	b281      	uxth	r1, r0
100640a8:	2202      	movs	r2, #2
100640aa:	ad01      	add	r5, sp, #4
100640ac:	4620      	mov	r0, r4
100640ae:	462b      	mov	r3, r5
100640b0:	f7ef f820 	bl	100530f4 <ACL_pkt_read>
100640b4:	8828      	ldrh	r0, [r5, #0]
100640b6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100640b8 <GAT_att_clt_prep_wr_cmp_data>:
100640b8:	b580      	push	{r7, lr}
100640ba:	460b      	mov	r3, r1
100640bc:	8842      	ldrh	r2, [r0, #2]
100640be:	8981      	ldrh	r1, [r0, #12]
100640c0:	1d49      	adds	r1, r1, #5
100640c2:	b289      	uxth	r1, r1
100640c4:	1f52      	subs	r2, r2, #5
100640c6:	b292      	uxth	r2, r2
100640c8:	f7ef f80b 	bl	100530e2 <ACL_pkt_cmp>
100640cc:	bd80      	pop	{r7, pc}

100640ce <GAT_att_clt_unexpect_rx>:
100640ce:	b51c      	push	{r2, r3, r4, lr}
100640d0:	4604      	mov	r4, r0
100640d2:	8800      	ldrh	r0, [r0, #0]
100640d4:	ab01      	add	r3, sp, #4
100640d6:	8018      	strh	r0, [r3, #0]
100640d8:	2042      	movs	r0, #66	@ 0x42
100640da:	2102      	movs	r1, #2
100640dc:	460a      	mov	r2, r1
100640de:	f7ff fbf1 	bl	100638c4 <aci_hal_fw_error_event_push_noinline>
100640e2:	2800      	cmp	r0, #0
100640e4:	d001      	beq.n	100640ea <GAT_att_clt_unexpect_rx+0x1c>
100640e6:	2084      	movs	r0, #132	@ 0x84
100640e8:	bd1c      	pop	{r2, r3, r4, pc}
100640ea:	4620      	mov	r0, r4
100640ec:	f7ee ffe6 	bl	100530bc <ACL_pkt_release>
100640f0:	2000      	movs	r0, #0
100640f2:	bd1c      	pop	{r2, r3, r4, pc}

100640f4 <GAT_att_clt_fill_read_multi_req>:
100640f4:	b510      	push	{r4, lr}
100640f6:	460c      	mov	r4, r1
100640f8:	68c3      	ldr	r3, [r0, #12]
100640fa:	8989      	ldrh	r1, [r1, #12]
100640fc:	7a00      	ldrb	r0, [r0, #8]
100640fe:	0042      	lsls	r2, r0, #1
10064100:	1c48      	adds	r0, r1, #1
10064102:	b281      	uxth	r1, r0
10064104:	4620      	mov	r0, r4
10064106:	f7ef f817 	bl	10053138 <ACL_pkt_write>
1006410a:	bd10      	pop	{r4, pc}

1006410c <GAT_att_clt_fill_handle_range>:
1006410c:	b5b0      	push	{r4, r5, r7, lr}
1006410e:	4614      	mov	r4, r2
10064110:	460a      	mov	r2, r1
10064112:	4605      	mov	r5, r0
10064114:	8980      	ldrh	r0, [r0, #12]
10064116:	1c40      	adds	r0, r0, #1
10064118:	b281      	uxth	r1, r0
1006411a:	4628      	mov	r0, r5
1006411c:	f7ef f803 	bl	10053126 <ACL_pkt_write_16b>
10064120:	89a8      	ldrh	r0, [r5, #12]
10064122:	1cc0      	adds	r0, r0, #3
10064124:	b281      	uxth	r1, r0
10064126:	4628      	mov	r0, r5
10064128:	4622      	mov	r2, r4
1006412a:	f7ee fffc 	bl	10053126 <ACL_pkt_write_16b>
1006412e:	bdb0      	pop	{r4, r5, r7, pc}

10064130 <GAT_att_db_init>:
10064130:	b510      	push	{r4, lr}
10064132:	4604      	mov	r4, r0
10064134:	2108      	movs	r1, #8
10064136:	f7fa ff09 	bl	1005ef4c <csmem_mem_0_assign>
1006413a:	4904      	ldr	r1, [pc, #16]	@ (1006414c <__arm_cp.0_0>)
1006413c:	6809      	ldr	r1, [r1, #0]
1006413e:	2260      	movs	r2, #96	@ 0x60
10064140:	2300      	movs	r3, #0
10064142:	528b      	strh	r3, [r1, r2]
10064144:	6648      	str	r0, [r1, #100]	@ 0x64
10064146:	3160      	adds	r1, #96	@ 0x60
10064148:	804c      	strh	r4, [r1, #2]
1006414a:	bd10      	pop	{r4, pc}

1006414c <__arm_cp.0_0>:
1006414c:	2000112c 	.word	0x2000112c

10064150 <GAT_att_db_insert>:
10064150:	b5f0      	push	{r4, r5, r6, r7, lr}
10064152:	b085      	sub	sp, #20
10064154:	4617      	mov	r7, r2
10064156:	9004      	str	r0, [sp, #16]
10064158:	4d1c      	ldr	r5, [pc, #112]	@ (100641cc <__arm_cp.1_0>)
1006415a:	6828      	ldr	r0, [r5, #0]
1006415c:	2460      	movs	r4, #96	@ 0x60
1006415e:	5b06      	ldrh	r6, [r0, r4]
10064160:	4602      	mov	r2, r0
10064162:	3260      	adds	r2, #96	@ 0x60
10064164:	8852      	ldrh	r2, [r2, #2]
10064166:	4296      	cmp	r6, r2
10064168:	d217      	bcs.n	1006419a <GAT_att_db_insert+0x4a>
1006416a:	9402      	str	r4, [sp, #8]
1006416c:	9303      	str	r3, [sp, #12]
1006416e:	2900      	cmp	r1, #0
10064170:	d017      	beq.n	100641a2 <GAT_att_db_insert+0x52>
10064172:	9701      	str	r7, [sp, #4]
10064174:	4608      	mov	r0, r1
10064176:	f000 f82b 	bl	100641d0 <GAT_att_db_get_att_idx>
1006417a:	1c44      	adds	r4, r0, #1
1006417c:	6828      	ldr	r0, [r5, #0]
1006417e:	b2b1      	uxth	r1, r6
10064180:	b2a2      	uxth	r2, r4
10064182:	4291      	cmp	r1, r2
10064184:	d30b      	bcc.n	1006419e <GAT_att_db_insert+0x4e>
10064186:	00c9      	lsls	r1, r1, #3
10064188:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1006418a:	1840      	adds	r0, r0, r1
1006418c:	4601      	mov	r1, r0
1006418e:	3908      	subs	r1, #8
10064190:	2208      	movs	r2, #8
10064192:	f7e1 fe71 	bl	10045e78 <BLEPLAT_MemCpy>
10064196:	1e76      	subs	r6, r6, #1
10064198:	e7f0      	b.n	1006417c <GAT_att_db_insert+0x2c>
1006419a:	2700      	movs	r7, #0
1006419c:	e012      	b.n	100641c4 <GAT_att_db_insert+0x74>
1006419e:	9f01      	ldr	r7, [sp, #4]
100641a0:	e000      	b.n	100641a4 <GAT_att_db_insert+0x54>
100641a2:	4634      	mov	r4, r6
100641a4:	6e40      	ldr	r0, [r0, #100]	@ 0x64
100641a6:	b2a1      	uxth	r1, r4
100641a8:	00c9      	lsls	r1, r1, #3
100641aa:	9a04      	ldr	r2, [sp, #16]
100641ac:	5442      	strb	r2, [r0, r1]
100641ae:	1840      	adds	r0, r0, r1
100641b0:	9a03      	ldr	r2, [sp, #12]
100641b2:	6042      	str	r2, [r0, #4]
100641b4:	6828      	ldr	r0, [r5, #0]
100641b6:	9b02      	ldr	r3, [sp, #8]
100641b8:	5ac2      	ldrh	r2, [r0, r3]
100641ba:	1c52      	adds	r2, r2, #1
100641bc:	52c2      	strh	r2, [r0, r3]
100641be:	6e40      	ldr	r0, [r0, #100]	@ 0x64
100641c0:	1840      	adds	r0, r0, r1
100641c2:	8047      	strh	r7, [r0, #2]
100641c4:	4638      	mov	r0, r7
100641c6:	b005      	add	sp, #20
100641c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100641ca:	46c0      	nop			@ (mov r8, r8)

100641cc <__arm_cp.1_0>:
100641cc:	2000112c 	.word	0x2000112c

100641d0 <GAT_att_db_get_att_idx>:
100641d0:	4908      	ldr	r1, [pc, #32]	@ (100641f4 <__arm_cp.2_0>)
100641d2:	680a      	ldr	r2, [r1, #0]
100641d4:	6e51      	ldr	r1, [r2, #100]	@ 0x64
100641d6:	2362      	movs	r3, #98	@ 0x62
100641d8:	5ad2      	ldrh	r2, [r2, r3]
100641da:	00d2      	lsls	r2, r2, #3
100641dc:	1852      	adds	r2, r2, r1
100641de:	3a08      	subs	r2, #8
100641e0:	4282      	cmp	r2, r0
100641e2:	d302      	bcc.n	100641ea <GAT_att_db_get_att_idx+0x1a>
100641e4:	1a40      	subs	r0, r0, r1
100641e6:	08c0      	lsrs	r0, r0, #3
100641e8:	e001      	b.n	100641ee <GAT_att_db_get_att_idx+0x1e>
100641ea:	2000      	movs	r0, #0
100641ec:	43c0      	mvns	r0, r0
100641ee:	b280      	uxth	r0, r0
100641f0:	4770      	bx	lr
100641f2:	46c0      	nop			@ (mov r8, r8)

100641f4 <__arm_cp.2_0>:
100641f4:	2000112c 	.word	0x2000112c

100641f8 <GAT_att_db_find_by_handle>:
100641f8:	b580      	push	{r7, lr}
100641fa:	f000 f80f 	bl	1006421c <GAT_att_db_find_attr_idx_with_handle>
100641fe:	4905      	ldr	r1, [pc, #20]	@ (10064214 <__arm_cp.3_0>)
10064200:	4288      	cmp	r0, r1
10064202:	d005      	beq.n	10064210 <GAT_att_db_find_by_handle+0x18>
10064204:	00c0      	lsls	r0, r0, #3
10064206:	4904      	ldr	r1, [pc, #16]	@ (10064218 <__arm_cp.3_1>)
10064208:	6809      	ldr	r1, [r1, #0]
1006420a:	6e49      	ldr	r1, [r1, #100]	@ 0x64
1006420c:	1808      	adds	r0, r1, r0
1006420e:	bd80      	pop	{r7, pc}
10064210:	2000      	movs	r0, #0
10064212:	bd80      	pop	{r7, pc}

10064214 <__arm_cp.3_0>:
10064214:	0000ffff 	.word	0x0000ffff

10064218 <__arm_cp.3_1>:
10064218:	2000112c 	.word	0x2000112c

1006421c <GAT_att_db_find_attr_idx_with_handle>:
1006421c:	b510      	push	{r4, lr}
1006421e:	4604      	mov	r4, r0
10064220:	f000 f824 	bl	1006426c <GAT_att_db_find_attr_idx_from_handle>
10064224:	4906      	ldr	r1, [pc, #24]	@ (10064240 <__arm_cp.4_0>)
10064226:	4288      	cmp	r0, r1
10064228:	d007      	beq.n	1006423a <GAT_att_db_find_attr_idx_with_handle+0x1e>
1006422a:	00c2      	lsls	r2, r0, #3
1006422c:	4b05      	ldr	r3, [pc, #20]	@ (10064244 <__arm_cp.4_1>)
1006422e:	681b      	ldr	r3, [r3, #0]
10064230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10064232:	189a      	adds	r2, r3, r2
10064234:	8852      	ldrh	r2, [r2, #2]
10064236:	42a2      	cmp	r2, r4
10064238:	d000      	beq.n	1006423c <GAT_att_db_find_attr_idx_with_handle+0x20>
1006423a:	4608      	mov	r0, r1
1006423c:	bd10      	pop	{r4, pc}
1006423e:	46c0      	nop			@ (mov r8, r8)

10064240 <__arm_cp.4_0>:
10064240:	0000ffff 	.word	0x0000ffff

10064244 <__arm_cp.4_1>:
10064244:	2000112c 	.word	0x2000112c

10064248 <GAT_att_db_find_from_handle>:
10064248:	b580      	push	{r7, lr}
1006424a:	f000 f80f 	bl	1006426c <GAT_att_db_find_attr_idx_from_handle>
1006424e:	4905      	ldr	r1, [pc, #20]	@ (10064264 <__arm_cp.5_0>)
10064250:	4288      	cmp	r0, r1
10064252:	d005      	beq.n	10064260 <GAT_att_db_find_from_handle+0x18>
10064254:	00c0      	lsls	r0, r0, #3
10064256:	4904      	ldr	r1, [pc, #16]	@ (10064268 <__arm_cp.5_1>)
10064258:	6809      	ldr	r1, [r1, #0]
1006425a:	6e49      	ldr	r1, [r1, #100]	@ 0x64
1006425c:	1808      	adds	r0, r1, r0
1006425e:	bd80      	pop	{r7, pc}
10064260:	2000      	movs	r0, #0
10064262:	bd80      	pop	{r7, pc}

10064264 <__arm_cp.5_0>:
10064264:	0000ffff 	.word	0x0000ffff

10064268 <__arm_cp.5_1>:
10064268:	2000112c 	.word	0x2000112c

1006426c <GAT_att_db_find_attr_idx_from_handle>:
1006426c:	b570      	push	{r4, r5, r6, lr}
1006426e:	4909      	ldr	r1, [pc, #36]	@ (10064294 <__arm_cp.6_0>)
10064270:	680a      	ldr	r2, [r1, #0]
10064272:	2160      	movs	r1, #96	@ 0x60
10064274:	5a53      	ldrh	r3, [r2, r1]
10064276:	2100      	movs	r1, #0
10064278:	2502      	movs	r5, #2
1006427a:	4c07      	ldr	r4, [pc, #28]	@ (10064298 <__arm_cp.6_1>)
1006427c:	428b      	cmp	r3, r1
1006427e:	d006      	beq.n	1006428e <GAT_att_db_find_attr_idx_from_handle+0x22>
10064280:	6e56      	ldr	r6, [r2, #100]	@ 0x64
10064282:	5b76      	ldrh	r6, [r6, r5]
10064284:	4286      	cmp	r6, r0
10064286:	d203      	bcs.n	10064290 <GAT_att_db_find_attr_idx_from_handle+0x24>
10064288:	3508      	adds	r5, #8
1006428a:	1c49      	adds	r1, r1, #1
1006428c:	e7f6      	b.n	1006427c <GAT_att_db_find_attr_idx_from_handle+0x10>
1006428e:	4621      	mov	r1, r4
10064290:	b288      	uxth	r0, r1
10064292:	bd70      	pop	{r4, r5, r6, pc}

10064294 <__arm_cp.6_0>:
10064294:	2000112c 	.word	0x2000112c

10064298 <__arm_cp.6_1>:
10064298:	0000ffff 	.word	0x0000ffff

1006429c <GAT_att_db_find_by_def>:
1006429c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006429e:	9302      	str	r3, [sp, #8]
100642a0:	4615      	mov	r5, r2
100642a2:	2200      	movs	r2, #0
100642a4:	4288      	cmp	r0, r1
100642a6:	d823      	bhi.n	100642f0 <GAT_att_db_find_by_def+0x54>
100642a8:	460c      	mov	r4, r1
100642aa:	4916      	ldr	r1, [pc, #88]	@ (10064304 <__arm_cp.8_0>)
100642ac:	680f      	ldr	r7, [r1, #0]
100642ae:	2160      	movs	r1, #96	@ 0x60
100642b0:	5a79      	ldrh	r1, [r7, r1]
100642b2:	2900      	cmp	r1, #0
100642b4:	d01c      	beq.n	100642f0 <GAT_att_db_find_by_def+0x54>
100642b6:	9200      	str	r2, [sp, #0]
100642b8:	9101      	str	r1, [sp, #4]
100642ba:	f7ff ffd7 	bl	1006426c <GAT_att_db_find_attr_idx_from_handle>
100642be:	4606      	mov	r6, r0
100642c0:	4620      	mov	r0, r4
100642c2:	f7ff ffd3 	bl	1006426c <GAT_att_db_find_attr_idx_from_handle>
100642c6:	9901      	ldr	r1, [sp, #4]
100642c8:	1e49      	subs	r1, r1, #1
100642ca:	4281      	cmp	r1, r0
100642cc:	d300      	bcc.n	100642d0 <GAT_att_db_find_by_def+0x34>
100642ce:	4601      	mov	r1, r0
100642d0:	b289      	uxth	r1, r1
100642d2:	b2b2      	uxth	r2, r6
100642d4:	428a      	cmp	r2, r1
100642d6:	d80d      	bhi.n	100642f4 <GAT_att_db_find_by_def+0x58>
100642d8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
100642da:	00d3      	lsls	r3, r2, #3
100642dc:	5cc4      	ldrb	r4, [r0, r3]
100642de:	42ac      	cmp	r4, r5
100642e0:	d104      	bne.n	100642ec <GAT_att_db_find_by_def+0x50>
100642e2:	18c0      	adds	r0, r0, r3
100642e4:	6843      	ldr	r3, [r0, #4]
100642e6:	9c02      	ldr	r4, [sp, #8]
100642e8:	42a3      	cmp	r3, r4
100642ea:	d005      	beq.n	100642f8 <GAT_att_db_find_by_def+0x5c>
100642ec:	1c76      	adds	r6, r6, #1
100642ee:	e7f0      	b.n	100642d2 <GAT_att_db_find_by_def+0x36>
100642f0:	4610      	mov	r0, r2
100642f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100642f4:	9800      	ldr	r0, [sp, #0]
100642f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100642f8:	4903      	ldr	r1, [pc, #12]	@ (10064308 <__arm_cp.8_1>)
100642fa:	428a      	cmp	r2, r1
100642fc:	d100      	bne.n	10064300 <GAT_att_db_find_by_def+0x64>
100642fe:	2000      	movs	r0, #0
10064300:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064302:	46c0      	nop			@ (mov r8, r8)

10064304 <__arm_cp.8_0>:
10064304:	2000112c 	.word	0x2000112c

10064308 <__arm_cp.8_1>:
10064308:	0000ffff 	.word	0x0000ffff

1006430c <GAT_att_db_get_next>:
1006430c:	b580      	push	{r7, lr}
1006430e:	f7ff ff5f 	bl	100641d0 <GAT_att_db_get_att_idx>
10064312:	4907      	ldr	r1, [pc, #28]	@ (10064330 <__arm_cp.10_0>)
10064314:	6809      	ldr	r1, [r1, #0]
10064316:	2260      	movs	r2, #96	@ 0x60
10064318:	5a8a      	ldrh	r2, [r1, r2]
1006431a:	1c40      	adds	r0, r0, #1
1006431c:	b280      	uxth	r0, r0
1006431e:	4290      	cmp	r0, r2
10064320:	d203      	bcs.n	1006432a <GAT_att_db_get_next+0x1e>
10064322:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064324:	00c0      	lsls	r0, r0, #3
10064326:	1808      	adds	r0, r1, r0
10064328:	bd80      	pop	{r7, pc}
1006432a:	2000      	movs	r0, #0
1006432c:	bd80      	pop	{r7, pc}
1006432e:	46c0      	nop			@ (mov r8, r8)

10064330 <__arm_cp.10_0>:
10064330:	2000112c 	.word	0x2000112c

10064334 <GAT_att_db_get_last_group_handle>:
10064334:	b580      	push	{r7, lr}
10064336:	f000 f803 	bl	10064340 <GAT_att_db_get_last_group_attribute>
1006433a:	8840      	ldrh	r0, [r0, #2]
1006433c:	bd80      	pop	{r7, pc}
	...

10064340 <GAT_att_db_get_last_group_attribute>:
10064340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064342:	7804      	ldrb	r4, [r0, #0]
10064344:	2502      	movs	r5, #2
10064346:	4621      	mov	r1, r4
10064348:	4329      	orrs	r1, r5
1006434a:	2902      	cmp	r1, #2
1006434c:	d11e      	bne.n	1006438c <GAT_att_db_get_last_group_attribute+0x4c>
1006434e:	f7ff ff3f 	bl	100641d0 <GAT_att_db_get_att_idx>
10064352:	490f      	ldr	r1, [pc, #60]	@ (10064390 <__arm_cp.12_0>)
10064354:	6809      	ldr	r1, [r1, #0]
10064356:	2260      	movs	r2, #96	@ 0x60
10064358:	5a8b      	ldrh	r3, [r1, r2]
1006435a:	1c40      	adds	r0, r0, #1
1006435c:	b282      	uxth	r2, r0
1006435e:	429a      	cmp	r2, r3
10064360:	d210      	bcs.n	10064384 <GAT_att_db_get_last_group_attribute+0x44>
10064362:	2c00      	cmp	r4, #0
10064364:	d008      	beq.n	10064378 <GAT_att_db_get_last_group_attribute+0x38>
10064366:	2c02      	cmp	r4, #2
10064368:	d1f7      	bne.n	1006435a <GAT_att_db_get_last_group_attribute+0x1a>
1006436a:	00d7      	lsls	r7, r2, #3
1006436c:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
1006436e:	5df7      	ldrb	r7, [r6, r7]
10064370:	432f      	orrs	r7, r5
10064372:	2f02      	cmp	r7, #2
10064374:	d1f1      	bne.n	1006435a <GAT_att_db_get_last_group_attribute+0x1a>
10064376:	e006      	b.n	10064386 <GAT_att_db_get_last_group_attribute+0x46>
10064378:	00d7      	lsls	r7, r2, #3
1006437a:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
1006437c:	5df7      	ldrb	r7, [r6, r7]
1006437e:	2f00      	cmp	r7, #0
10064380:	d1eb      	bne.n	1006435a <GAT_att_db_get_last_group_attribute+0x1a>
10064382:	e000      	b.n	10064386 <GAT_att_db_get_last_group_attribute+0x46>
10064384:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10064386:	00d0      	lsls	r0, r2, #3
10064388:	1980      	adds	r0, r0, r6
1006438a:	3808      	subs	r0, #8
1006438c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006438e:	46c0      	nop			@ (mov r8, r8)

10064390 <__arm_cp.12_0>:
10064390:	2000112c 	.word	0x2000112c

10064394 <GAT_att_db_get_last_handle>:
10064394:	4806      	ldr	r0, [pc, #24]	@ (100643b0 <__arm_cp.14_0>)
10064396:	6800      	ldr	r0, [r0, #0]
10064398:	2160      	movs	r1, #96	@ 0x60
1006439a:	5a41      	ldrh	r1, [r0, r1]
1006439c:	2900      	cmp	r1, #0
1006439e:	d005      	beq.n	100643ac <GAT_att_db_get_last_handle+0x18>
100643a0:	6e40      	ldr	r0, [r0, #100]	@ 0x64
100643a2:	00c9      	lsls	r1, r1, #3
100643a4:	1808      	adds	r0, r1, r0
100643a6:	1f80      	subs	r0, r0, #6
100643a8:	8800      	ldrh	r0, [r0, #0]
100643aa:	4770      	bx	lr
100643ac:	2000      	movs	r0, #0
100643ae:	4770      	bx	lr

100643b0 <__arm_cp.14_0>:
100643b0:	2000112c 	.word	0x2000112c

100643b4 <GAT_att_db_rm_att_range>:
100643b4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100643b6:	460d      	mov	r5, r1
100643b8:	4604      	mov	r4, r0
100643ba:	f7ff ffeb 	bl	10064394 <GAT_att_db_get_last_handle>
100643be:	2800      	cmp	r0, #0
100643c0:	d034      	beq.n	1006442c <GAT_att_db_rm_att_range+0x78>
100643c2:	42ac      	cmp	r4, r5
100643c4:	d832      	bhi.n	1006442c <GAT_att_db_rm_att_range+0x78>
100643c6:	4606      	mov	r6, r0
100643c8:	42a0      	cmp	r0, r4
100643ca:	d32f      	bcc.n	1006442c <GAT_att_db_rm_att_range+0x78>
100643cc:	4620      	mov	r0, r4
100643ce:	f7ff ff25 	bl	1006421c <GAT_att_db_find_attr_idx_with_handle>
100643d2:	4604      	mov	r4, r0
100643d4:	4816      	ldr	r0, [pc, #88]	@ (10064430 <__arm_cp.16_0>)
100643d6:	4284      	cmp	r4, r0
100643d8:	d028      	beq.n	1006442c <GAT_att_db_rm_att_range+0x78>
100643da:	42ae      	cmp	r6, r5
100643dc:	d300      	bcc.n	100643e0 <GAT_att_db_rm_att_range+0x2c>
100643de:	462e      	mov	r6, r5
100643e0:	4630      	mov	r0, r6
100643e2:	f7ff ff1b 	bl	1006421c <GAT_att_db_find_attr_idx_with_handle>
100643e6:	4913      	ldr	r1, [pc, #76]	@ (10064434 <__arm_cp.16_1>)
100643e8:	680f      	ldr	r7, [r1, #0]
100643ea:	2660      	movs	r6, #96	@ 0x60
100643ec:	5bb9      	ldrh	r1, [r7, r6]
100643ee:	1e4a      	subs	r2, r1, #1
100643f0:	4282      	cmp	r2, r0
100643f2:	d917      	bls.n	10064424 <GAT_att_db_rm_att_range+0x70>
100643f4:	9001      	str	r0, [sp, #4]
100643f6:	4605      	mov	r5, r0
100643f8:	9402      	str	r4, [sp, #8]
100643fa:	b28b      	uxth	r3, r1
100643fc:	1c6d      	adds	r5, r5, #1
100643fe:	b2aa      	uxth	r2, r5
10064400:	429a      	cmp	r2, r3
10064402:	d20d      	bcs.n	10064420 <GAT_att_db_rm_att_range+0x6c>
10064404:	6e79      	ldr	r1, [r7, #100]	@ 0x64
10064406:	b2a0      	uxth	r0, r4
10064408:	00c0      	lsls	r0, r0, #3
1006440a:	1808      	adds	r0, r1, r0
1006440c:	00d2      	lsls	r2, r2, #3
1006440e:	1889      	adds	r1, r1, r2
10064410:	2208      	movs	r2, #8
10064412:	f7e1 fd31 	bl	10045e78 <BLEPLAT_MemCpy>
10064416:	4807      	ldr	r0, [pc, #28]	@ (10064434 <__arm_cp.16_1>)
10064418:	6807      	ldr	r7, [r0, #0]
1006441a:	5bb9      	ldrh	r1, [r7, r6]
1006441c:	1c64      	adds	r4, r4, #1
1006441e:	e7ec      	b.n	100643fa <GAT_att_db_rm_att_range+0x46>
10064420:	9c02      	ldr	r4, [sp, #8]
10064422:	9801      	ldr	r0, [sp, #4]
10064424:	43c2      	mvns	r2, r0
10064426:	18a2      	adds	r2, r4, r2
10064428:	1851      	adds	r1, r2, r1
1006442a:	53b9      	strh	r1, [r7, r6]
1006442c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006442e:	46c0      	nop			@ (mov r8, r8)

10064430 <__arm_cp.16_0>:
10064430:	0000ffff 	.word	0x0000ffff

10064434 <__arm_cp.16_1>:
10064434:	2000112c 	.word	0x2000112c

10064438 <GAT_att_db_find_last_attr_of_type>:
10064438:	b510      	push	{r4, lr}
1006443a:	4909      	ldr	r1, [pc, #36]	@ (10064460 <__arm_cp.17_0>)
1006443c:	680a      	ldr	r2, [r1, #0]
1006443e:	2160      	movs	r1, #96	@ 0x60
10064440:	5a53      	ldrh	r3, [r2, r1]
10064442:	0419      	lsls	r1, r3, #16
10064444:	d009      	beq.n	1006445a <GAT_att_db_find_last_attr_of_type+0x22>
10064446:	6e51      	ldr	r1, [r2, #100]	@ 0x64
10064448:	b29c      	uxth	r4, r3
1006444a:	00e4      	lsls	r4, r4, #3
1006444c:	1861      	adds	r1, r4, r1
1006444e:	3908      	subs	r1, #8
10064450:	780c      	ldrb	r4, [r1, #0]
10064452:	1e5b      	subs	r3, r3, #1
10064454:	4284      	cmp	r4, r0
10064456:	d1f4      	bne.n	10064442 <GAT_att_db_find_last_attr_of_type+0xa>
10064458:	e000      	b.n	1006445c <GAT_att_db_find_last_attr_of_type+0x24>
1006445a:	2100      	movs	r1, #0
1006445c:	4608      	mov	r0, r1
1006445e:	bd10      	pop	{r4, pc}

10064460 <__arm_cp.17_0>:
10064460:	2000112c 	.word	0x2000112c

10064464 <GAT_att_db_reverse_find_attr_of_type>:
10064464:	b510      	push	{r4, lr}
10064466:	4604      	mov	r4, r0
10064468:	4608      	mov	r0, r1
1006446a:	f7ff feff 	bl	1006426c <GAT_att_db_find_attr_idx_from_handle>
1006446e:	4908      	ldr	r1, [pc, #32]	@ (10064490 <__arm_cp.18_0>)
10064470:	6809      	ldr	r1, [r1, #0]
10064472:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064474:	b282      	uxth	r2, r0
10064476:	00d2      	lsls	r2, r2, #3
10064478:	5c8b      	ldrb	r3, [r1, r2]
1006447a:	42a3      	cmp	r3, r4
1006447c:	d005      	beq.n	1006448a <GAT_att_db_reverse_find_attr_of_type+0x26>
1006447e:	1e42      	subs	r2, r0, #1
10064480:	0400      	lsls	r0, r0, #16
10064482:	4610      	mov	r0, r2
10064484:	d1f6      	bne.n	10064474 <GAT_att_db_reverse_find_attr_of_type+0x10>
10064486:	2000      	movs	r0, #0
10064488:	bd10      	pop	{r4, pc}
1006448a:	1888      	adds	r0, r1, r2
1006448c:	bd10      	pop	{r4, pc}
1006448e:	46c0      	nop			@ (mov r8, r8)

10064490 <__arm_cp.18_0>:
10064490:	2000112c 	.word	0x2000112c

10064494 <GAT_clt_init>:
10064494:	b570      	push	{r4, r5, r6, lr}
10064496:	4c11      	ldr	r4, [pc, #68]	@ (100644dc <__arm_cp.0_0>)
10064498:	7aa0      	ldrb	r0, [r4, #10]
1006449a:	2124      	movs	r1, #36	@ 0x24
1006449c:	f7fa fd56 	bl	1005ef4c <csmem_mem_0_assign>
100644a0:	490f      	ldr	r1, [pc, #60]	@ (100644e0 <__arm_cp.0_1>)
100644a2:	680b      	ldr	r3, [r1, #0]
100644a4:	2200      	movs	r2, #0
100644a6:	461d      	mov	r5, r3
100644a8:	3550      	adds	r5, #80	@ 0x50
100644aa:	461e      	mov	r6, r3
100644ac:	3648      	adds	r6, #72	@ 0x48
100644ae:	649a      	str	r2, [r3, #72]	@ 0x48
100644b0:	64de      	str	r6, [r3, #76]	@ 0x4c
100644b2:	651a      	str	r2, [r3, #80]	@ 0x50
100644b4:	655d      	str	r5, [r3, #84]	@ 0x54
100644b6:	7aa4      	ldrb	r4, [r4, #10]
100644b8:	2c00      	cmp	r4, #0
100644ba:	d00c      	beq.n	100644d6 <GAT_clt_init+0x42>
100644bc:	6202      	str	r2, [r0, #32]
100644be:	680b      	ldr	r3, [r1, #0]
100644c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100644c2:	6018      	str	r0, [r3, #0]
100644c4:	2301      	movs	r3, #1
100644c6:	7003      	strb	r3, [r0, #0]
100644c8:	4605      	mov	r5, r0
100644ca:	3520      	adds	r5, #32
100644cc:	680b      	ldr	r3, [r1, #0]
100644ce:	655d      	str	r5, [r3, #84]	@ 0x54
100644d0:	3024      	adds	r0, #36	@ 0x24
100644d2:	1e64      	subs	r4, r4, #1
100644d4:	e7f0      	b.n	100644b8 <GAT_clt_init+0x24>
100644d6:	659a      	str	r2, [r3, #88]	@ 0x58
100644d8:	bd70      	pop	{r4, r5, r6, pc}
100644da:	46c0      	nop			@ (mov r8, r8)

100644dc <__arm_cp.0_0>:
100644dc:	20001188 	.word	0x20001188

100644e0 <__arm_cp.0_1>:
100644e0:	2000112c 	.word	0x2000112c

100644e4 <GAT_clt_connection>:
100644e4:	4770      	bx	lr
	...

100644e8 <GAT_clt_bearer_close>:
100644e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100644ea:	460d      	mov	r5, r1
100644ec:	4604      	mov	r4, r0
100644ee:	4e19      	ldr	r6, [pc, #100]	@ (10064554 <__arm_cp.2_0>)
100644f0:	6837      	ldr	r7, [r6, #0]
100644f2:	3748      	adds	r7, #72	@ 0x48
100644f4:	683f      	ldr	r7, [r7, #0]
100644f6:	2f00      	cmp	r7, #0
100644f8:	d010      	beq.n	1006451c <GAT_clt_bearer_close+0x34>
100644fa:	8878      	ldrh	r0, [r7, #2]
100644fc:	42a0      	cmp	r0, r4
100644fe:	d10b      	bne.n	10064518 <GAT_clt_bearer_close+0x30>
10064500:	88b8      	ldrh	r0, [r7, #4]
10064502:	42a8      	cmp	r0, r5
10064504:	d108      	bne.n	10064518 <GAT_clt_bearer_close+0x30>
10064506:	7838      	ldrb	r0, [r7, #0]
10064508:	2118      	movs	r1, #24
1006450a:	4301      	orrs	r1, r0
1006450c:	7039      	strb	r1, [r7, #0]
1006450e:	200c      	movs	r0, #12
10064510:	f7fd fdc4 	bl	1006209c <tsk_notify_idx>
10064514:	f7df fcc3 	bl	10043e9e <BLE_STACK_ProcessRequest>
10064518:	3720      	adds	r7, #32
1006451a:	e7eb      	b.n	100644f4 <GAT_clt_bearer_close+0xc>
1006451c:	2d04      	cmp	r5, #4
1006451e:	d117      	bne.n	10064550 <GAT_clt_bearer_close+0x68>
10064520:	6830      	ldr	r0, [r6, #0]
10064522:	6d81      	ldr	r1, [r0, #88]	@ 0x58
10064524:	460b      	mov	r3, r1
10064526:	2b00      	cmp	r3, #0
10064528:	d00b      	beq.n	10064542 <GAT_clt_bearer_close+0x5a>
1006452a:	461a      	mov	r2, r3
1006452c:	689d      	ldr	r5, [r3, #8]
1006452e:	2300      	movs	r3, #0
10064530:	2d00      	cmp	r5, #0
10064532:	d0f8      	beq.n	10064526 <GAT_clt_bearer_close+0x3e>
10064534:	88ab      	ldrh	r3, [r5, #4]
10064536:	42a3      	cmp	r3, r4
10064538:	462b      	mov	r3, r5
1006453a:	d1f4      	bne.n	10064526 <GAT_clt_bearer_close+0x3e>
1006453c:	68ab      	ldr	r3, [r5, #8]
1006453e:	6093      	str	r3, [r2, #8]
10064540:	e7f1      	b.n	10064526 <GAT_clt_bearer_close+0x3e>
10064542:	2900      	cmp	r1, #0
10064544:	d004      	beq.n	10064550 <GAT_clt_bearer_close+0x68>
10064546:	888a      	ldrh	r2, [r1, #4]
10064548:	42a2      	cmp	r2, r4
1006454a:	d101      	bne.n	10064550 <GAT_clt_bearer_close+0x68>
1006454c:	6889      	ldr	r1, [r1, #8]
1006454e:	6581      	str	r1, [r0, #88]	@ 0x58
10064550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064552:	46c0      	nop			@ (mov r8, r8)

10064554 <__arm_cp.2_0>:
10064554:	2000112c 	.word	0x2000112c

10064558 <GAT_clt_proc_exec_tsk>:
10064558:	b580      	push	{r7, lr}
1006455a:	4802      	ldr	r0, [pc, #8]	@ (10064564 <__arm_cp.3_0>)
1006455c:	6800      	ldr	r0, [r0, #0]
1006455e:	4780      	blx	r0
10064560:	bd80      	pop	{r7, pc}
10064562:	46c0      	nop			@ (mov r8, r8)

10064564 <__arm_cp.3_0>:
10064564:	20001520 	.word	0x20001520

10064568 <GAT_clt_rcv>:
10064568:	b5f0      	push	{r4, r5, r6, r7, lr}
1006456a:	b095      	sub	sp, #84	@ 0x54
1006456c:	4605      	mov	r5, r0
1006456e:	8804      	ldrh	r4, [r0, #0]
10064570:	f7f3 fc41 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10064574:	4601      	mov	r1, r0
10064576:	4620      	mov	r0, r4
10064578:	f000 fa6e 	bl	10064a58 <GAT_clt_get_proc_per_channel>
1006457c:	2686      	movs	r6, #134	@ 0x86
1006457e:	2800      	cmp	r0, #0
10064580:	d100      	bne.n	10064584 <GAT_clt_rcv+0x1c>
10064582:	e208      	b.n	10064996 <GAT_clt_rcv+0x42e>
10064584:	4604      	mov	r4, r0
10064586:	882f      	ldrh	r7, [r5, #0]
10064588:	4628      	mov	r0, r5
1006458a:	f7f3 fc34 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
1006458e:	4601      	mov	r1, r0
10064590:	4638      	mov	r0, r7
10064592:	f7f0 fc3f 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
10064596:	9008      	str	r0, [sp, #32]
10064598:	7820      	ldrb	r0, [r4, #0]
1006459a:	21fb      	movs	r1, #251	@ 0xfb
1006459c:	4001      	ands	r1, r0
1006459e:	7021      	strb	r1, [r4, #0]
100645a0:	270c      	movs	r7, #12
100645a2:	4638      	mov	r0, r7
100645a4:	f7fd fd7a 	bl	1006209c <tsk_notify_idx>
100645a8:	f7df fc79 	bl	10043e9e <BLE_STACK_ProcessRequest>
100645ac:	4628      	mov	r0, r5
100645ae:	f000 fa65 	bl	10064a7c <GAT_att_cmn_get_opcode>
100645b2:	2801      	cmp	r0, #1
100645b4:	d107      	bne.n	100645c6 <GAT_clt_rcv+0x5e>
100645b6:	8860      	ldrh	r0, [r4, #2]
100645b8:	f7ef fd16 	bl	10053fe8 <GAP_started_gatt_proc>
100645bc:	2800      	cmp	r0, #0
100645be:	d060      	beq.n	10064682 <GAT_clt_rcv+0x11a>
100645c0:	4620      	mov	r0, r4
100645c2:	f000 fa60 	bl	10064a86 <GAT_clt_stop_proc>
100645c6:	7820      	ldrb	r0, [r4, #0]
100645c8:	2200      	movs	r2, #0
100645ca:	0701      	lsls	r1, r0, #28
100645cc:	d457      	bmi.n	1006467e <GAT_clt_rcv+0x116>
100645ce:	79a3      	ldrb	r3, [r4, #6]
100645d0:	1e59      	subs	r1, r3, #1
100645d2:	2911      	cmp	r1, #17
100645d4:	d900      	bls.n	100645d8 <GAT_clt_rcv+0x70>
100645d6:	e1de      	b.n	10064996 <GAT_clt_rcv+0x42e>
100645d8:	9207      	str	r2, [sp, #28]
100645da:	0049      	lsls	r1, r1, #1
100645dc:	4479      	add	r1, pc
100645de:	8889      	ldrh	r1, [r1, #4]
100645e0:	0049      	lsls	r1, r1, #1
100645e2:	448f      	add	pc, r1
100645e4:	010200c5 	.word	0x010200c5
100645e8:	0099010f 	.word	0x0099010f
100645ec:	011f0099 	.word	0x011f0099
100645f0:	01750164 	.word	0x01750164
100645f4:	01b9017c 	.word	0x01b9017c
100645f8:	00a600a6 	.word	0x00a600a6
100645fc:	001100b8 	.word	0x001100b8
10064600:	001100b0 	.word	0x001100b0
10064604:	00b00011 	.word	0x00b00011
10064608:	06c0      	lsls	r0, r0, #27
1006460a:	d500      	bpl.n	1006460e <GAT_clt_rcv+0xa6>
1006460c:	e0a7      	b.n	1006475e <GAT_clt_rcv+0x1f6>
1006460e:	88a2      	ldrh	r2, [r4, #4]
10064610:	8861      	ldrh	r1, [r4, #2]
10064612:	200a      	movs	r0, #10
10064614:	462b      	mov	r3, r5
10064616:	f7fe ffbf 	bl	10063598 <aci_att_clt_prepare_write_resp_event_push_noinline>
1006461a:	2800      	cmp	r0, #0
1006461c:	d000      	beq.n	10064620 <GAT_clt_rcv+0xb8>
1006461e:	e1b4      	b.n	1006498a <GAT_clt_rcv+0x422>
10064620:	79a0      	ldrb	r0, [r4, #6]
10064622:	2811      	cmp	r0, #17
10064624:	d100      	bne.n	10064628 <GAT_clt_rcv+0xc0>
10064626:	e1b2      	b.n	1006498e <GAT_clt_rcv+0x426>
10064628:	7a63      	ldrb	r3, [r4, #9]
1006462a:	6921      	ldr	r1, [r4, #16]
1006462c:	9108      	str	r1, [sp, #32]
1006462e:	2810      	cmp	r0, #16
10064630:	d000      	beq.n	10064634 <GAT_clt_rcv+0xcc>
10064632:	e1d0      	b.n	100649d6 <GAT_clt_rcv+0x46e>
10064634:	9306      	str	r3, [sp, #24]
10064636:	89a8      	ldrh	r0, [r5, #12]
10064638:	1c40      	adds	r0, r0, #1
1006463a:	b281      	uxth	r1, r0
1006463c:	4628      	mov	r0, r5
1006463e:	f7ee fd62 	bl	10053106 <ACL_pkt_read_16b>
10064642:	9005      	str	r0, [sp, #20]
10064644:	89a8      	ldrh	r0, [r5, #12]
10064646:	1cc0      	adds	r0, r0, #3
10064648:	b281      	uxth	r1, r0
1006464a:	4628      	mov	r0, r5
1006464c:	f7ee fd5b 	bl	10053106 <ACL_pkt_read_16b>
10064650:	2600      	movs	r6, #0
10064652:	89a2      	ldrh	r2, [r4, #12]
10064654:	8869      	ldrh	r1, [r5, #2]
10064656:	1f49      	subs	r1, r1, #5
10064658:	4291      	cmp	r1, r2
1006465a:	9004      	str	r0, [sp, #16]
1006465c:	d000      	beq.n	10064660 <GAT_clt_rcv+0xf8>
1006465e:	e1cf      	b.n	10064a00 <GAT_clt_rcv+0x498>
10064660:	4638      	mov	r0, r7
10064662:	9906      	ldr	r1, [sp, #24]
10064664:	4348      	muls	r0, r1
10064666:	9a08      	ldr	r2, [sp, #32]
10064668:	1810      	adds	r0, r2, r0
1006466a:	6880      	ldr	r0, [r0, #8]
1006466c:	8961      	ldrh	r1, [r4, #10]
1006466e:	1841      	adds	r1, r0, r1
10064670:	4628      	mov	r0, r5
10064672:	4615      	mov	r5, r2
10064674:	f7ff fd20 	bl	100640b8 <GAT_att_clt_prep_wr_cmp_data>
10064678:	9b06      	ldr	r3, [sp, #24]
1006467a:	9003      	str	r0, [sp, #12]
1006467c:	e1c4      	b.n	10064a08 <GAT_clt_rcv+0x4a0>
1006467e:	4616      	mov	r6, r2
10064680:	e189      	b.n	10064996 <GAT_clt_rcv+0x42e>
10064682:	a909      	add	r1, sp, #36	@ 0x24
10064684:	aa0f      	add	r2, sp, #60	@ 0x3c
10064686:	ab0e      	add	r3, sp, #56	@ 0x38
10064688:	4628      	mov	r0, r5
1006468a:	f7ff fcb1 	bl	10063ff0 <GAT_att_clt_parse_error_resp>
1006468e:	2800      	cmp	r0, #0
10064690:	d02b      	beq.n	100646ea <GAT_clt_rcv+0x182>
10064692:	4628      	mov	r0, r5
10064694:	f7ee fd12 	bl	100530bc <ACL_pkt_release>
10064698:	a80e      	add	r0, sp, #56	@ 0x38
1006469a:	7800      	ldrb	r0, [r0, #0]
1006469c:	2812      	cmp	r0, #18
1006469e:	d108      	bne.n	100646b2 <GAT_clt_rcv+0x14a>
100646a0:	8860      	ldrh	r0, [r4, #2]
100646a2:	2104      	movs	r1, #4
100646a4:	f7f0 fbb6 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
100646a8:	8881      	ldrh	r1, [r0, #4]
100646aa:	2201      	movs	r2, #1
100646ac:	0252      	lsls	r2, r2, #9
100646ae:	430a      	orrs	r2, r1
100646b0:	8082      	strh	r2, [r0, #4]
100646b2:	79a0      	ldrb	r0, [r4, #6]
100646b4:	2801      	cmp	r0, #1
100646b6:	d104      	bne.n	100646c2 <GAT_clt_rcv+0x15a>
100646b8:	9b08      	ldr	r3, [sp, #32]
100646ba:	8899      	ldrh	r1, [r3, #4]
100646bc:	2204      	movs	r2, #4
100646be:	4391      	bics	r1, r2
100646c0:	8099      	strh	r1, [r3, #4]
100646c2:	a90e      	add	r1, sp, #56	@ 0x38
100646c4:	7809      	ldrb	r1, [r1, #0]
100646c6:	290a      	cmp	r1, #10
100646c8:	d008      	beq.n	100646dc <GAT_clt_rcv+0x174>
100646ca:	2907      	cmp	r1, #7
100646cc:	d102      	bne.n	100646d4 <GAT_clt_rcv+0x16c>
100646ce:	280a      	cmp	r0, #10
100646d0:	d100      	bne.n	100646d4 <GAT_clt_rcv+0x16c>
100646d2:	e775      	b.n	100645c0 <GAT_clt_rcv+0x58>
100646d4:	7821      	ldrb	r1, [r4, #0]
100646d6:	2210      	movs	r2, #16
100646d8:	430a      	orrs	r2, r1
100646da:	7022      	strb	r2, [r4, #0]
100646dc:	280e      	cmp	r0, #14
100646de:	d100      	bne.n	100646e2 <GAT_clt_rcv+0x17a>
100646e0:	e771      	b.n	100645c6 <GAT_clt_rcv+0x5e>
100646e2:	2810      	cmp	r0, #16
100646e4:	d100      	bne.n	100646e8 <GAT_clt_rcv+0x180>
100646e6:	e76e      	b.n	100645c6 <GAT_clt_rcv+0x5e>
100646e8:	e76a      	b.n	100645c0 <GAT_clt_rcv+0x58>
100646ea:	a809      	add	r0, sp, #36	@ 0x24
100646ec:	7800      	ldrb	r0, [r0, #0]
100646ee:	9007      	str	r0, [sp, #28]
100646f0:	88a3      	ldrh	r3, [r4, #4]
100646f2:	8862      	ldrh	r2, [r4, #2]
100646f4:	a80f      	add	r0, sp, #60	@ 0x3c
100646f6:	8800      	ldrh	r0, [r0, #0]
100646f8:	4621      	mov	r1, r4
100646fa:	ac0e      	add	r4, sp, #56	@ 0x38
100646fc:	7824      	ldrb	r4, [r4, #0]
100646fe:	9000      	str	r0, [sp, #0]
10064700:	9401      	str	r4, [sp, #4]
10064702:	460c      	mov	r4, r1
10064704:	2002      	movs	r0, #2
10064706:	4611      	mov	r1, r2
10064708:	461a      	mov	r2, r3
1006470a:	9b07      	ldr	r3, [sp, #28]
1006470c:	f7fe fc10 	bl	10062f30 <aci_gatt_clt_error_resp_event_push_noinline>
10064710:	2800      	cmp	r0, #0
10064712:	d0be      	beq.n	10064692 <GAT_clt_rcv+0x12a>
10064714:	4606      	mov	r6, r0
10064716:	e13e      	b.n	10064996 <GAT_clt_rcv+0x42e>
10064718:	88a2      	ldrh	r2, [r4, #4]
1006471a:	8861      	ldrh	r1, [r4, #2]
1006471c:	200a      	movs	r0, #10
1006471e:	462b      	mov	r3, r5
10064720:	f7fe fe40 	bl	100633a4 <aci_att_clt_read_by_type_resp_event_push_noinline>
10064724:	2800      	cmp	r0, #0
10064726:	d000      	beq.n	1006472a <GAT_clt_rcv+0x1c2>
10064728:	e12f      	b.n	1006498a <GAT_clt_rcv+0x422>
1006472a:	4628      	mov	r0, r5
1006472c:	f7ff fc7a 	bl	10064024 <GAT_att_clt_read_type_get_last_attr_h>
10064730:	e0c8      	b.n	100648c4 <GAT_clt_rcv+0x35c>
10064732:	88a2      	ldrh	r2, [r4, #4]
10064734:	8861      	ldrh	r1, [r4, #2]
10064736:	200a      	movs	r0, #10
10064738:	2b0b      	cmp	r3, #11
1006473a:	d000      	beq.n	1006473e <GAT_clt_rcv+0x1d6>
1006473c:	e120      	b.n	10064980 <GAT_clt_rcv+0x418>
1006473e:	462b      	mov	r3, r5
10064740:	f7fe fec6 	bl	100634d0 <aci_att_clt_read_multiple_resp_event_push_noinline>
10064744:	e11f      	b.n	10064986 <GAT_clt_rcv+0x41e>
10064746:	88a2      	ldrh	r2, [r4, #4]
10064748:	8861      	ldrh	r1, [r4, #2]
1006474a:	2002      	movs	r0, #2
1006474c:	f7fe ff56 	bl	100635fc <aci_att_clt_exec_write_resp_event_push_noinline>
10064750:	2800      	cmp	r0, #0
10064752:	d000      	beq.n	10064756 <GAT_clt_rcv+0x1ee>
10064754:	e119      	b.n	1006498a <GAT_clt_rcv+0x422>
10064756:	4628      	mov	r0, r5
10064758:	f7ee fcb0 	bl	100530bc <ACL_pkt_release>
1006475c:	e117      	b.n	1006498e <GAT_clt_rcv+0x426>
1006475e:	8960      	ldrh	r0, [r4, #10]
10064760:	2800      	cmp	r0, #0
10064762:	d100      	bne.n	10064766 <GAT_clt_rcv+0x1fe>
10064764:	e113      	b.n	1006498e <GAT_clt_rcv+0x426>
10064766:	2600      	movs	r6, #0
10064768:	7226      	strb	r6, [r4, #8]
1006476a:	200f      	movs	r0, #15
1006476c:	71a0      	strb	r0, [r4, #6]
1006476e:	e112      	b.n	10064996 <GAT_clt_rcv+0x42e>
10064770:	89a8      	ldrh	r0, [r5, #12]
10064772:	1c40      	adds	r0, r0, #1
10064774:	b281      	uxth	r1, r0
10064776:	4628      	mov	r0, r5
10064778:	f7ee fcc5 	bl	10053106 <ACL_pkt_read_16b>
1006477c:	4606      	mov	r6, r0
1006477e:	2817      	cmp	r0, #23
10064780:	d800      	bhi.n	10064784 <GAT_clt_rcv+0x21c>
10064782:	2617      	movs	r6, #23
10064784:	48b3      	ldr	r0, [pc, #716]	@ (10064a54 <__arm_cp.4_3>)
10064786:	8a00      	ldrh	r0, [r0, #16]
10064788:	4286      	cmp	r6, r0
1006478a:	9f08      	ldr	r7, [sp, #32]
1006478c:	d300      	bcc.n	10064790 <GAT_clt_rcv+0x228>
1006478e:	4606      	mov	r6, r0
10064790:	88b8      	ldrh	r0, [r7, #4]
10064792:	0700      	lsls	r0, r0, #28
10064794:	d514      	bpl.n	100647c0 <GAT_clt_rcv+0x258>
10064796:	88f8      	ldrh	r0, [r7, #6]
10064798:	42b0      	cmp	r0, r6
1006479a:	d011      	beq.n	100647c0 <GAT_clt_rcv+0x258>
1006479c:	463b      	mov	r3, r7
1006479e:	3308      	adds	r3, #8
100647a0:	2042      	movs	r0, #66	@ 0x42
100647a2:	2103      	movs	r1, #3
100647a4:	2202      	movs	r2, #2
100647a6:	f7ff f88d 	bl	100638c4 <aci_hal_fw_error_event_push_noinline>
100647aa:	2800      	cmp	r0, #0
100647ac:	d000      	beq.n	100647b0 <GAT_clt_rcv+0x248>
100647ae:	e0ec      	b.n	1006498a <GAT_clt_rcv+0x422>
100647b0:	7820      	ldrb	r0, [r4, #0]
100647b2:	2110      	movs	r1, #16
100647b4:	4301      	orrs	r1, r0
100647b6:	7021      	strb	r1, [r4, #0]
100647b8:	88b8      	ldrh	r0, [r7, #4]
100647ba:	2108      	movs	r1, #8
100647bc:	4388      	bics	r0, r1
100647be:	80b8      	strh	r0, [r7, #4]
100647c0:	7820      	ldrb	r0, [r4, #0]
100647c2:	06c0      	lsls	r0, r0, #27
100647c4:	d500      	bpl.n	100647c8 <GAT_clt_rcv+0x260>
100647c6:	88fe      	ldrh	r6, [r7, #6]
100647c8:	8861      	ldrh	r1, [r4, #2]
100647ca:	2002      	movs	r0, #2
100647cc:	4632      	mov	r2, r6
100647ce:	f7fe fd49 	bl	10063264 <aci_att_exchange_mtu_resp_event_push_noinline>
100647d2:	2800      	cmp	r0, #0
100647d4:	d000      	beq.n	100647d8 <GAT_clt_rcv+0x270>
100647d6:	e0d8      	b.n	1006498a <GAT_clt_rcv+0x422>
100647d8:	80fe      	strh	r6, [r7, #6]
100647da:	88b8      	ldrh	r0, [r7, #4]
100647dc:	2108      	movs	r1, #8
100647de:	4301      	orrs	r1, r0
100647e0:	2004      	movs	r0, #4
100647e2:	4381      	bics	r1, r0
100647e4:	80b9      	strh	r1, [r7, #4]
100647e6:	4620      	mov	r0, r4
100647e8:	e0dc      	b.n	100649a4 <GAT_clt_rcv+0x43c>
100647ea:	88a2      	ldrh	r2, [r4, #4]
100647ec:	8861      	ldrh	r1, [r4, #2]
100647ee:	200a      	movs	r0, #10
100647f0:	462b      	mov	r3, r5
100647f2:	f7fe fe9f 	bl	10063534 <aci_att_clt_read_by_group_type_resp_event_push_noinline>
100647f6:	2800      	cmp	r0, #0
100647f8:	d000      	beq.n	100647fc <GAT_clt_rcv+0x294>
100647fa:	e0c6      	b.n	1006498a <GAT_clt_rcv+0x422>
100647fc:	4628      	mov	r0, r5
100647fe:	f7ff fbc4 	bl	10063f8a <GAT_att_clt_read_grp_type_get_last_attr_h>
10064802:	e00b      	b.n	1006481c <GAT_clt_rcv+0x2b4>
10064804:	88a2      	ldrh	r2, [r4, #4]
10064806:	8861      	ldrh	r1, [r4, #2]
10064808:	200a      	movs	r0, #10
1006480a:	462b      	mov	r3, r5
1006480c:	f7fe fd98 	bl	10063340 <aci_att_clt_find_by_type_value_resp_event_push_noinline>
10064810:	2800      	cmp	r0, #0
10064812:	d000      	beq.n	10064816 <GAT_clt_rcv+0x2ae>
10064814:	e0b9      	b.n	1006498a <GAT_clt_rcv+0x422>
10064816:	4628      	mov	r0, r5
10064818:	f7ff fbdd 	bl	10063fd6 <GAT_att_clt_find_type_val_get_last_attr_h>
1006481c:	498c      	ldr	r1, [pc, #560]	@ (10064a50 <__arm_cp.4_2>)
1006481e:	4288      	cmp	r0, r1
10064820:	d153      	bne.n	100648ca <GAT_clt_rcv+0x362>
10064822:	e0b4      	b.n	1006498e <GAT_clt_rcv+0x426>
10064824:	4628      	mov	r0, r5
10064826:	f000 fa08 	bl	10064c3a <GAT_att_clt_read_type_get_len>
1006482a:	9008      	str	r0, [sp, #32]
1006482c:	8960      	ldrh	r0, [r4, #10]
1006482e:	a90e      	add	r1, sp, #56	@ 0x38
10064830:	8008      	strh	r0, [r1, #0]
10064832:	4620      	mov	r0, r4
10064834:	300c      	adds	r0, #12
10064836:	9007      	str	r0, [sp, #28]
10064838:	a809      	add	r0, sp, #36	@ 0x24
1006483a:	300c      	adds	r0, #12
1006483c:	9005      	str	r0, [sp, #20]
1006483e:	a80f      	add	r0, sp, #60	@ 0x3c
10064840:	1d40      	adds	r0, r0, #5
10064842:	9006      	str	r0, [sp, #24]
10064844:	2600      	movs	r6, #0
10064846:	b2f7      	uxtb	r7, r6
10064848:	aa0f      	add	r2, sp, #60	@ 0x3c
1006484a:	4628      	mov	r0, r5
1006484c:	4639      	mov	r1, r7
1006484e:	f7ff fbfe 	bl	1006404e <GAT_att_clt_read_type_get_data>
10064852:	2800      	cmp	r0, #0
10064854:	d000      	beq.n	10064858 <GAT_clt_rcv+0x2f0>
10064856:	e0a1      	b.n	1006499c <GAT_clt_rcv+0x434>
10064858:	9808      	ldr	r0, [sp, #32]
1006485a:	2807      	cmp	r0, #7
1006485c:	d105      	bne.n	1006486a <GAT_clt_rcv+0x302>
1006485e:	a809      	add	r0, sp, #36	@ 0x24
10064860:	2110      	movs	r1, #16
10064862:	7401      	strb	r1, [r0, #16]
10064864:	2202      	movs	r2, #2
10064866:	9805      	ldr	r0, [sp, #20]
10064868:	e003      	b.n	10064872 <GAT_clt_rcv+0x30a>
1006486a:	a809      	add	r0, sp, #36	@ 0x24
1006486c:	2180      	movs	r1, #128	@ 0x80
1006486e:	7401      	strb	r1, [r0, #16]
10064870:	2210      	movs	r2, #16
10064872:	9906      	ldr	r1, [sp, #24]
10064874:	f7e1 fb00 	bl	10045e78 <BLEPLAT_MemCpy>
10064878:	a80e      	add	r0, sp, #56	@ 0x38
1006487a:	a90f      	add	r1, sp, #60	@ 0x3c
1006487c:	2202      	movs	r2, #2
1006487e:	f7e1 fafb 	bl	10045e78 <BLEPLAT_MemCpy>
10064882:	a809      	add	r0, sp, #36	@ 0x24
10064884:	9907      	ldr	r1, [sp, #28]
10064886:	f7fd fdb1 	bl	100623ec <UUID_cmp_128bits>
1006488a:	2800      	cmp	r0, #0
1006488c:	d10d      	bne.n	100648aa <GAT_clt_rcv+0x342>
1006488e:	88a2      	ldrh	r2, [r4, #4]
10064890:	8861      	ldrh	r1, [r4, #2]
10064892:	9808      	ldr	r0, [sp, #32]
10064894:	9000      	str	r0, [sp, #0]
10064896:	9501      	str	r5, [sp, #4]
10064898:	4347      	muls	r7, r0
1006489a:	1cb8      	adds	r0, r7, #2
1006489c:	b283      	uxth	r3, r0
1006489e:	2002      	movs	r0, #2
100648a0:	f7fe fb8c 	bl	10062fbc <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
100648a4:	2800      	cmp	r0, #0
100648a6:	d000      	beq.n	100648aa <GAT_clt_rcv+0x342>
100648a8:	e082      	b.n	100649b0 <GAT_clt_rcv+0x448>
100648aa:	1c76      	adds	r6, r6, #1
100648ac:	e7cb      	b.n	10064846 <GAT_clt_rcv+0x2de>
100648ae:	88a2      	ldrh	r2, [r4, #4]
100648b0:	8861      	ldrh	r1, [r4, #2]
100648b2:	200a      	movs	r0, #10
100648b4:	462b      	mov	r3, r5
100648b6:	f7fe fd11 	bl	100632dc <aci_att_clt_find_info_resp_event_push_noinline>
100648ba:	2800      	cmp	r0, #0
100648bc:	d165      	bne.n	1006498a <GAT_clt_rcv+0x422>
100648be:	4628      	mov	r0, r5
100648c0:	f7ff fbe0 	bl	10064084 <GAT_att_clt_find_info_get_last_attr_h>
100648c4:	8961      	ldrh	r1, [r4, #10]
100648c6:	4288      	cmp	r0, r1
100648c8:	d261      	bcs.n	1006498e <GAT_clt_rcv+0x426>
100648ca:	1c40      	adds	r0, r0, #1
100648cc:	8120      	strh	r0, [r4, #8]
100648ce:	e061      	b.n	10064994 <GAT_clt_rcv+0x42c>
100648d0:	88a2      	ldrh	r2, [r4, #4]
100648d2:	8861      	ldrh	r1, [r4, #2]
100648d4:	200a      	movs	r0, #10
100648d6:	462b      	mov	r3, r5
100648d8:	f7fe fd96 	bl	10063408 <aci_att_clt_read_resp_event_push_noinline>
100648dc:	e053      	b.n	10064986 <GAT_clt_rcv+0x41e>
100648de:	4628      	mov	r0, r5
100648e0:	f000 f9ab 	bl	10064c3a <GAT_att_clt_read_type_get_len>
100648e4:	4606      	mov	r6, r0
100648e6:	9406      	str	r4, [sp, #24]
100648e8:	8860      	ldrh	r0, [r4, #2]
100648ea:	f7ef fb7d 	bl	10053fe8 <GAP_started_gatt_proc>
100648ee:	9008      	str	r0, [sp, #32]
100648f0:	2402      	movs	r4, #2
100648f2:	8868      	ldrh	r0, [r5, #2]
100648f4:	b2a3      	uxth	r3, r4
100648f6:	4283      	cmp	r3, r0
100648f8:	d253      	bcs.n	100649a2 <GAT_clt_rcv+0x43a>
100648fa:	9808      	ldr	r0, [sp, #32]
100648fc:	2801      	cmp	r0, #1
100648fe:	d10e      	bne.n	1006491e <GAT_clt_rcv+0x3b6>
10064900:	89a8      	ldrh	r0, [r5, #12]
10064902:	1900      	adds	r0, r0, r4
10064904:	b281      	uxth	r1, r0
10064906:	af0f      	add	r7, sp, #60	@ 0x3c
10064908:	4628      	mov	r0, r5
1006490a:	4632      	mov	r2, r6
1006490c:	463b      	mov	r3, r7
1006490e:	f7ee fbf1 	bl	100530f4 <ACL_pkt_read>
10064912:	205c      	movs	r0, #92	@ 0x5c
10064914:	4631      	mov	r1, r6
10064916:	463a      	mov	r2, r7
10064918:	f7ef fd02 	bl	10054320 <GAP_internal_evt_handler>
1006491c:	e01a      	b.n	10064954 <GAT_clt_rcv+0x3ec>
1006491e:	9f06      	ldr	r7, [sp, #24]
10064920:	88ba      	ldrh	r2, [r7, #4]
10064922:	8879      	ldrh	r1, [r7, #2]
10064924:	9600      	str	r6, [sp, #0]
10064926:	9501      	str	r5, [sp, #4]
10064928:	2002      	movs	r0, #2
1006492a:	f7fe fb47 	bl	10062fbc <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
1006492e:	2800      	cmp	r0, #0
10064930:	d12b      	bne.n	1006498a <GAT_clt_rcv+0x422>
10064932:	7f38      	ldrb	r0, [r7, #28]
10064934:	2810      	cmp	r0, #16
10064936:	d10d      	bne.n	10064954 <GAT_clt_rcv+0x3ec>
10064938:	9806      	ldr	r0, [sp, #24]
1006493a:	8b00      	ldrh	r0, [r0, #24]
1006493c:	4942      	ldr	r1, [pc, #264]	@ (10064a48 <__arm_cp.4_0>)
1006493e:	4288      	cmp	r0, r1
10064940:	d108      	bne.n	10064954 <GAT_clt_rcv+0x3ec>
10064942:	9806      	ldr	r0, [sp, #24]
10064944:	8840      	ldrh	r0, [r0, #2]
10064946:	2104      	movs	r1, #4
10064948:	f7f0 fa64 	bl	10054e14 <GAT_att_cmn_get_channel_descr_p>
1006494c:	8881      	ldrh	r1, [r0, #4]
1006494e:	4a3f      	ldr	r2, [pc, #252]	@ (10064a4c <__arm_cp.4_1>)
10064950:	4011      	ands	r1, r2
10064952:	8081      	strh	r1, [r0, #4]
10064954:	19a4      	adds	r4, r4, r6
10064956:	e7cc      	b.n	100648f2 <GAT_clt_rcv+0x38a>
10064958:	88a2      	ldrh	r2, [r4, #4]
1006495a:	8861      	ldrh	r1, [r4, #2]
1006495c:	200a      	movs	r0, #10
1006495e:	462b      	mov	r3, r5
10064960:	f7fe fd84 	bl	1006346c <aci_att_clt_read_blob_resp_event_push_noinline>
10064964:	2800      	cmp	r0, #0
10064966:	d110      	bne.n	1006498a <GAT_clt_rcv+0x422>
10064968:	9808      	ldr	r0, [sp, #32]
1006496a:	88c0      	ldrh	r0, [r0, #6]
1006496c:	1e41      	subs	r1, r0, #1
1006496e:	8868      	ldrh	r0, [r5, #2]
10064970:	1e40      	subs	r0, r0, #1
10064972:	b282      	uxth	r2, r0
10064974:	4291      	cmp	r1, r2
10064976:	d80a      	bhi.n	1006498e <GAT_clt_rcv+0x426>
10064978:	8961      	ldrh	r1, [r4, #10]
1006497a:	1808      	adds	r0, r1, r0
1006497c:	8160      	strh	r0, [r4, #10]
1006497e:	e009      	b.n	10064994 <GAT_clt_rcv+0x42c>
10064980:	462b      	mov	r3, r5
10064982:	f7fe fed9 	bl	10063738 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>
10064986:	2800      	cmp	r0, #0
10064988:	d001      	beq.n	1006498e <GAT_clt_rcv+0x426>
1006498a:	2684      	movs	r6, #132	@ 0x84
1006498c:	e003      	b.n	10064996 <GAT_clt_rcv+0x42e>
1006498e:	4620      	mov	r0, r4
10064990:	f000 f879 	bl	10064a86 <GAT_clt_stop_proc>
10064994:	9e07      	ldr	r6, [sp, #28]
10064996:	4630      	mov	r0, r6
10064998:	b015      	add	sp, #84	@ 0x54
1006499a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006499c:	a80e      	add	r0, sp, #56	@ 0x38
1006499e:	8800      	ldrh	r0, [r0, #0]
100649a0:	e00a      	b.n	100649b8 <GAT_clt_rcv+0x450>
100649a2:	9806      	ldr	r0, [sp, #24]
100649a4:	f000 f86f 	bl	10064a86 <GAT_clt_stop_proc>
100649a8:	4628      	mov	r0, r5
100649aa:	f7ee fb87 	bl	100530bc <ACL_pkt_release>
100649ae:	e7f1      	b.n	10064994 <GAT_clt_rcv+0x42c>
100649b0:	980e      	ldr	r0, [sp, #56]	@ 0x38
100649b2:	1e40      	subs	r0, r0, #1
100649b4:	a90e      	add	r1, sp, #56	@ 0x38
100649b6:	8008      	strh	r0, [r1, #0]
100649b8:	8961      	ldrh	r1, [r4, #10]
100649ba:	b282      	uxth	r2, r0
100649bc:	428a      	cmp	r2, r1
100649be:	d202      	bcs.n	100649c6 <GAT_clt_rcv+0x45e>
100649c0:	1c40      	adds	r0, r0, #1
100649c2:	8120      	strh	r0, [r4, #8]
100649c4:	e002      	b.n	100649cc <GAT_clt_rcv+0x464>
100649c6:	4620      	mov	r0, r4
100649c8:	f000 f85d 	bl	10064a86 <GAT_clt_stop_proc>
100649cc:	4628      	mov	r0, r5
100649ce:	f7ee fb75 	bl	100530bc <ACL_pkt_release>
100649d2:	2600      	movs	r6, #0
100649d4:	e7df      	b.n	10064996 <GAT_clt_rcv+0x42e>
100649d6:	8961      	ldrh	r1, [r4, #10]
100649d8:	9a08      	ldr	r2, [sp, #32]
100649da:	89a0      	ldrh	r0, [r4, #12]
100649dc:	1840      	adds	r0, r0, r1
100649de:	8160      	strh	r0, [r4, #10]
100649e0:	b280      	uxth	r0, r0
100649e2:	435f      	muls	r7, r3
100649e4:	19d1      	adds	r1, r2, r7
100649e6:	8889      	ldrh	r1, [r1, #4]
100649e8:	4288      	cmp	r0, r1
100649ea:	d1d3      	bne.n	10064994 <GAT_clt_rcv+0x42c>
100649ec:	7a20      	ldrb	r0, [r4, #8]
100649ee:	1e40      	subs	r0, r0, #1
100649f0:	4298      	cmp	r0, r3
100649f2:	d924      	bls.n	10064a3e <GAT_clt_rcv+0x4d6>
100649f4:	2600      	movs	r6, #0
100649f6:	8166      	strh	r6, [r4, #10]
100649f8:	7a60      	ldrb	r0, [r4, #9]
100649fa:	1c40      	adds	r0, r0, #1
100649fc:	7260      	strb	r0, [r4, #9]
100649fe:	e7ca      	b.n	10064996 <GAT_clt_rcv+0x42e>
10064a00:	43f0      	mvns	r0, r6
10064a02:	9003      	str	r0, [sp, #12]
10064a04:	9b06      	ldr	r3, [sp, #24]
10064a06:	9d08      	ldr	r5, [sp, #32]
10064a08:	4639      	mov	r1, r7
10064a0a:	4359      	muls	r1, r3
10064a0c:	5a6a      	ldrh	r2, [r5, r1]
10064a0e:	4628      	mov	r0, r5
10064a10:	9d05      	ldr	r5, [sp, #20]
10064a12:	4295      	cmp	r5, r2
10064a14:	d10b      	bne.n	10064a2e <GAT_clt_rcv+0x4c6>
10064a16:	4602      	mov	r2, r0
10064a18:	1841      	adds	r1, r0, r1
10064a1a:	884a      	ldrh	r2, [r1, #2]
10064a1c:	8961      	ldrh	r1, [r4, #10]
10064a1e:	188a      	adds	r2, r1, r2
10064a20:	9d04      	ldr	r5, [sp, #16]
10064a22:	42aa      	cmp	r2, r5
10064a24:	d103      	bne.n	10064a2e <GAT_clt_rcv+0x4c6>
10064a26:	4602      	mov	r2, r0
10064a28:	9803      	ldr	r0, [sp, #12]
10064a2a:	2800      	cmp	r0, #0
10064a2c:	d0d5      	beq.n	100649da <GAT_clt_rcv+0x472>
10064a2e:	7226      	strb	r6, [r4, #8]
10064a30:	200f      	movs	r0, #15
10064a32:	71a0      	strb	r0, [r4, #6]
10064a34:	7820      	ldrb	r0, [r4, #0]
10064a36:	2110      	movs	r1, #16
10064a38:	4301      	orrs	r1, r0
10064a3a:	7021      	strb	r1, [r4, #0]
10064a3c:	e7ab      	b.n	10064996 <GAT_clt_rcv+0x42e>
10064a3e:	2001      	movs	r0, #1
10064a40:	7220      	strb	r0, [r4, #8]
10064a42:	200f      	movs	r0, #15
10064a44:	71a0      	strb	r0, [r4, #6]
10064a46:	e7a5      	b.n	10064994 <GAT_clt_rcv+0x42c>

10064a48 <__arm_cp.4_0>:
10064a48:	00002b2a 	.word	0x00002b2a

10064a4c <__arm_cp.4_1>:
10064a4c:	0000fdff 	.word	0x0000fdff

10064a50 <__arm_cp.4_2>:
10064a50:	0000ffff 	.word	0x0000ffff

10064a54 <__arm_cp.4_3>:
10064a54:	20001188 	.word	0x20001188

10064a58 <GAT_clt_get_proc_per_channel>:
10064a58:	4a07      	ldr	r2, [pc, #28]	@ (10064a78 <__arm_cp.5_0>)
10064a5a:	6812      	ldr	r2, [r2, #0]
10064a5c:	3248      	adds	r2, #72	@ 0x48
10064a5e:	6812      	ldr	r2, [r2, #0]
10064a60:	2a00      	cmp	r2, #0
10064a62:	d007      	beq.n	10064a74 <GAT_clt_get_proc_per_channel+0x1c>
10064a64:	8853      	ldrh	r3, [r2, #2]
10064a66:	4283      	cmp	r3, r0
10064a68:	d102      	bne.n	10064a70 <GAT_clt_get_proc_per_channel+0x18>
10064a6a:	8893      	ldrh	r3, [r2, #4]
10064a6c:	428b      	cmp	r3, r1
10064a6e:	d001      	beq.n	10064a74 <GAT_clt_get_proc_per_channel+0x1c>
10064a70:	3220      	adds	r2, #32
10064a72:	e7f4      	b.n	10064a5e <GAT_clt_get_proc_per_channel+0x6>
10064a74:	4610      	mov	r0, r2
10064a76:	4770      	bx	lr

10064a78 <__arm_cp.5_0>:
10064a78:	2000112c 	.word	0x2000112c

10064a7c <GAT_att_cmn_get_opcode>:
10064a7c:	b580      	push	{r7, lr}
10064a7e:	8981      	ldrh	r1, [r0, #12]
10064a80:	f000 f8cb 	bl	10064c1a <ACL_pkt_read_8b>
10064a84:	bd80      	pop	{r7, pc}

10064a86 <GAT_clt_stop_proc>:
10064a86:	b580      	push	{r7, lr}
10064a88:	7801      	ldrb	r1, [r0, #0]
10064a8a:	2208      	movs	r2, #8
10064a8c:	430a      	orrs	r2, r1
10064a8e:	7002      	strb	r2, [r0, #0]
10064a90:	200c      	movs	r0, #12
10064a92:	f7fd fb03 	bl	1006209c <tsk_notify_idx>
10064a96:	f7df fa02 	bl	10043e9e <BLE_STACK_ProcessRequest>
10064a9a:	bd80      	pop	{r7, pc}

10064a9c <GAT_clt_rcv_corrupted>:
10064a9c:	b510      	push	{r4, lr}
10064a9e:	8804      	ldrh	r4, [r0, #0]
10064aa0:	f7f3 f9a9 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10064aa4:	4601      	mov	r1, r0
10064aa6:	4620      	mov	r0, r4
10064aa8:	f7ff ffd6 	bl	10064a58 <GAT_clt_get_proc_per_channel>
10064aac:	2800      	cmp	r0, #0
10064aae:	d008      	beq.n	10064ac2 <GAT_clt_rcv_corrupted+0x26>
10064ab0:	7801      	ldrb	r1, [r0, #0]
10064ab2:	2218      	movs	r2, #24
10064ab4:	430a      	orrs	r2, r1
10064ab6:	7002      	strb	r2, [r0, #0]
10064ab8:	200c      	movs	r0, #12
10064aba:	f7fd faef 	bl	1006209c <tsk_notify_idx>
10064abe:	f7df f9ee 	bl	10043e9e <BLE_STACK_ProcessRequest>
10064ac2:	2000      	movs	r0, #0
10064ac4:	bd10      	pop	{r4, pc}

10064ac6 <GAT_clt_rcv_srv_initiated>:
10064ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
10064ac8:	b085      	sub	sp, #20
10064aca:	4604      	mov	r4, r0
10064acc:	8805      	ldrh	r5, [r0, #0]
10064ace:	8980      	ldrh	r0, [r0, #12]
10064ad0:	1c46      	adds	r6, r0, #1
10064ad2:	4620      	mov	r0, r4
10064ad4:	f7ff ffd2 	bl	10064a7c <GAT_att_cmn_get_opcode>
10064ad8:	2823      	cmp	r0, #35	@ 0x23
10064ada:	d010      	beq.n	10064afe <GAT_clt_rcv_srv_initiated+0x38>
10064adc:	b2b1      	uxth	r1, r6
10064ade:	281b      	cmp	r0, #27
10064ae0:	d122      	bne.n	10064b28 <GAT_clt_rcv_srv_initiated+0x62>
10064ae2:	4620      	mov	r0, r4
10064ae4:	f7ee fb0f 	bl	10053106 <ACL_pkt_read_16b>
10064ae8:	4601      	mov	r1, r0
10064aea:	4628      	mov	r0, r5
10064aec:	f000 f85c 	bl	10064ba8 <GAT_clt_check_security>
10064af0:	2800      	cmp	r0, #0
10064af2:	d03d      	beq.n	10064b70 <GAT_clt_rcv_srv_initiated+0xaa>
10064af4:	4620      	mov	r0, r4
10064af6:	f7ee fae1 	bl	100530bc <ACL_pkt_release>
10064afa:	2500      	movs	r5, #0
10064afc:	e050      	b.n	10064ba0 <GAT_clt_rcv_srv_initiated+0xda>
10064afe:	8867      	ldrh	r7, [r4, #2]
10064b00:	b2b1      	uxth	r1, r6
10064b02:	4620      	mov	r0, r4
10064b04:	42b9      	cmp	r1, r7
10064b06:	d22a      	bcs.n	10064b5e <GAT_clt_rcv_srv_initiated+0x98>
10064b08:	f7ee fafd 	bl	10053106 <ACL_pkt_read_16b>
10064b0c:	4601      	mov	r1, r0
10064b0e:	4628      	mov	r0, r5
10064b10:	f000 f84a 	bl	10064ba8 <GAT_clt_check_security>
10064b14:	2800      	cmp	r0, #0
10064b16:	d1ed      	bne.n	10064af4 <GAT_clt_rcv_srv_initiated+0x2e>
10064b18:	1cb0      	adds	r0, r6, #2
10064b1a:	b281      	uxth	r1, r0
10064b1c:	4620      	mov	r0, r4
10064b1e:	f7ee faf2 	bl	10053106 <ACL_pkt_read_16b>
10064b22:	1830      	adds	r0, r6, r0
10064b24:	1d06      	adds	r6, r0, #4
10064b26:	e7eb      	b.n	10064b00 <GAT_clt_rcv_srv_initiated+0x3a>
10064b28:	4620      	mov	r0, r4
10064b2a:	f7ee faec 	bl	10053106 <ACL_pkt_read_16b>
10064b2e:	4601      	mov	r1, r0
10064b30:	4628      	mov	r0, r5
10064b32:	f000 f839 	bl	10064ba8 <GAT_clt_check_security>
10064b36:	2800      	cmp	r0, #0
10064b38:	d024      	beq.n	10064b84 <GAT_clt_rcv_srv_initiated+0xbe>
10064b3a:	466e      	mov	r6, sp
10064b3c:	8075      	strh	r5, [r6, #2]
10064b3e:	4620      	mov	r0, r4
10064b40:	f7f3 f959 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10064b44:	80b0      	strh	r0, [r6, #4]
10064b46:	201e      	movs	r0, #30
10064b48:	7030      	strb	r0, [r6, #0]
10064b4a:	4630      	mov	r0, r6
10064b4c:	f7ff f860 	bl	10063c10 <GAT_att_clt_tx>
10064b50:	4605      	mov	r5, r0
10064b52:	2800      	cmp	r0, #0
10064b54:	d120      	bne.n	10064b98 <GAT_clt_rcv_srv_initiated+0xd2>
10064b56:	4620      	mov	r0, r4
10064b58:	f7ee fab0 	bl	100530bc <ACL_pkt_release>
10064b5c:	e01c      	b.n	10064b98 <GAT_clt_rcv_srv_initiated+0xd2>
10064b5e:	f7f3 f94a 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10064b62:	4602      	mov	r2, r0
10064b64:	200a      	movs	r0, #10
10064b66:	4629      	mov	r1, r5
10064b68:	4623      	mov	r3, r4
10064b6a:	f7fe fb49 	bl	10063200 <aci_gatt_clt_multi_notification_int_event_push_noinline>
10064b6e:	e012      	b.n	10064b96 <GAT_clt_rcv_srv_initiated+0xd0>
10064b70:	4620      	mov	r0, r4
10064b72:	f7f3 f940 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10064b76:	4602      	mov	r2, r0
10064b78:	200a      	movs	r0, #10
10064b7a:	4629      	mov	r1, r5
10064b7c:	4623      	mov	r3, r4
10064b7e:	f7fe f9a5 	bl	10062ecc <aci_gatt_clt_notification_event_push_noinline>
10064b82:	e008      	b.n	10064b96 <GAT_clt_rcv_srv_initiated+0xd0>
10064b84:	4620      	mov	r0, r4
10064b86:	f7f3 f936 	bl	10057df6 <L2C_get_cid_from_basic_packet_header>
10064b8a:	4602      	mov	r2, r0
10064b8c:	200a      	movs	r0, #10
10064b8e:	4629      	mov	r1, r5
10064b90:	4623      	mov	r3, r4
10064b92:	f7fe f969 	bl	10062e68 <aci_gatt_clt_indication_event_push_noinline>
10064b96:	4605      	mov	r5, r0
10064b98:	2d00      	cmp	r5, #0
10064b9a:	d001      	beq.n	10064ba0 <GAT_clt_rcv_srv_initiated+0xda>
10064b9c:	207b      	movs	r0, #123	@ 0x7b
10064b9e:	43c5      	mvns	r5, r0
10064ba0:	b2e8      	uxtb	r0, r5
10064ba2:	b005      	add	sp, #20
10064ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10064ba8 <GAT_clt_check_security>:
10064ba8:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10064baa:	4604      	mov	r4, r0
10064bac:	f000 f822 	bl	10064bf4 <GAT_clt_find_sec_level_entry_p>
10064bb0:	4605      	mov	r5, r0
10064bb2:	2800      	cmp	r0, #0
10064bb4:	d106      	bne.n	10064bc4 <GAT_clt_check_security+0x1c>
10064bb6:	480e      	ldr	r0, [pc, #56]	@ (10064bf0 <__arm_cp.13_0>)
10064bb8:	4601      	mov	r1, r0
10064bba:	f000 f81b 	bl	10064bf4 <GAT_clt_find_sec_level_entry_p>
10064bbe:	4605      	mov	r5, r0
10064bc0:	2800      	cmp	r0, #0
10064bc2:	d002      	beq.n	10064bca <GAT_clt_check_security+0x22>
10064bc4:	7828      	ldrb	r0, [r5, #0]
10064bc6:	2802      	cmp	r0, #2
10064bc8:	d201      	bcs.n	10064bce <GAT_clt_check_security+0x26>
10064bca:	2000      	movs	r0, #0
10064bcc:	e00d      	b.n	10064bea <GAT_clt_check_security+0x42>
10064bce:	a903      	add	r1, sp, #12
10064bd0:	aa02      	add	r2, sp, #8
10064bd2:	ab01      	add	r3, sp, #4
10064bd4:	4620      	mov	r0, r4
10064bd6:	f7fd f866 	bl	10061ca6 <smp_sap_get_security_level>
10064bda:	2800      	cmp	r0, #0
10064bdc:	d104      	bne.n	10064be8 <GAT_clt_check_security+0x40>
10064bde:	7828      	ldrb	r0, [r5, #0]
10064be0:	a902      	add	r1, sp, #8
10064be2:	7809      	ldrb	r1, [r1, #0]
10064be4:	4281      	cmp	r1, r0
10064be6:	d2f0      	bcs.n	10064bca <GAT_clt_check_security+0x22>
10064be8:	20c0      	movs	r0, #192	@ 0xc0
10064bea:	b004      	add	sp, #16
10064bec:	bdb0      	pop	{r4, r5, r7, pc}
10064bee:	46c0      	nop			@ (mov r8, r8)

10064bf0 <__arm_cp.13_0>:
10064bf0:	0000ffff 	.word	0x0000ffff

10064bf4 <GAT_clt_find_sec_level_entry_p>:
10064bf4:	4a07      	ldr	r2, [pc, #28]	@ (10064c14 <__arm_cp.15_0>)
10064bf6:	6812      	ldr	r2, [r2, #0]
10064bf8:	3258      	adds	r2, #88	@ 0x58
10064bfa:	6812      	ldr	r2, [r2, #0]
10064bfc:	2a00      	cmp	r2, #0
10064bfe:	d007      	beq.n	10064c10 <GAT_clt_find_sec_level_entry_p+0x1c>
10064c00:	8893      	ldrh	r3, [r2, #4]
10064c02:	4283      	cmp	r3, r0
10064c04:	d102      	bne.n	10064c0c <GAT_clt_find_sec_level_entry_p+0x18>
10064c06:	8853      	ldrh	r3, [r2, #2]
10064c08:	428b      	cmp	r3, r1
10064c0a:	d001      	beq.n	10064c10 <GAT_clt_find_sec_level_entry_p+0x1c>
10064c0c:	3208      	adds	r2, #8
10064c0e:	e7f4      	b.n	10064bfa <GAT_clt_find_sec_level_entry_p+0x6>
10064c10:	4610      	mov	r0, r2
10064c12:	4770      	bx	lr

10064c14 <__arm_cp.15_0>:
10064c14:	2000112c 	.word	0x2000112c

10064c18 <GAT_clt_exec_empty>:
10064c18:	4770      	bx	lr

10064c1a <ACL_pkt_read_8b>:
10064c1a:	b51c      	push	{r2, r3, r4, lr}
10064c1c:	291f      	cmp	r1, #31
10064c1e:	d803      	bhi.n	10064c28 <ACL_pkt_read_8b+0xe>
10064c20:	aa01      	add	r2, sp, #4
10064c22:	8011      	strh	r1, [r2, #0]
10064c24:	6840      	ldr	r0, [r0, #4]
10064c26:	e005      	b.n	10064c34 <ACL_pkt_read_8b+0x1a>
10064c28:	6840      	ldr	r0, [r0, #4]
10064c2a:	ac01      	add	r4, sp, #4
10064c2c:	4622      	mov	r2, r4
10064c2e:	f7fa fa2c 	bl	1005f08a <Mem_Buff_get_buff_off>
10064c32:	8821      	ldrh	r1, [r4, #0]
10064c34:	1840      	adds	r0, r0, r1
10064c36:	7900      	ldrb	r0, [r0, #4]
10064c38:	bd1c      	pop	{r2, r3, r4, pc}

10064c3a <GAT_att_clt_read_type_get_len>:
10064c3a:	b580      	push	{r7, lr}
10064c3c:	8981      	ldrh	r1, [r0, #12]
10064c3e:	1c49      	adds	r1, r1, #1
10064c40:	b289      	uxth	r1, r1
10064c42:	f7ff ffea 	bl	10064c1a <ACL_pkt_read_8b>
10064c46:	bd80      	pop	{r7, pc}

10064c48 <L2C_cos_process_cfc_mode_command_ucfg_weak>:
10064c48:	2000      	movs	r0, #0
10064c4a:	4770      	bx	lr

10064c4c <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>:
10064c4c:	2000      	movs	r0, #0
10064c4e:	4770      	bx	lr

10064c50 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>:
10064c50:	b580      	push	{r7, lr}
10064c52:	6841      	ldr	r1, [r0, #4]
10064c54:	7800      	ldrb	r0, [r0, #0]
10064c56:	f7f3 f8c9 	bl	10057dec <l2c_release_unexpected_acl_packet>
10064c5a:	2000      	movs	r0, #0
10064c5c:	bd80      	pop	{r7, pc}

10064c5e <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
10064c5e:	4770      	bx	lr

10064c60 <llc_big_brc_mem_alloc_ucfg_weak>:
10064c60:	4770      	bx	lr

10064c62 <llc_big_sync_mem_alloc_ucfg_weak>:
10064c62:	4770      	bx	lr

10064c64 <llc_cig_cmn_mem_alloc_ucfg_weak>:
10064c64:	4770      	bx	lr

10064c66 <llc_conn_cancel_slot>:
10064c66:	b5b0      	push	{r4, r5, r7, lr}
10064c68:	4604      	mov	r4, r0
10064c6a:	2030      	movs	r0, #48	@ 0x30
10064c6c:	5c25      	ldrb	r5, [r4, r0]
10064c6e:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
10064c70:	f7f3 fc79 	bl	10058566 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>
10064c74:	4628      	mov	r0, r5
10064c76:	f7f6 f889 	bl	1005ad8c <llc_pscan_wr_check_pawr_active_ucfg_weak>
10064c7a:	4625      	mov	r5, r4
10064c7c:	35ed      	adds	r5, #237	@ 0xed
10064c7e:	2800      	cmp	r0, #0
10064c80:	d004      	beq.n	10064c8c <llc_conn_cancel_slot+0x26>
10064c82:	3430      	adds	r4, #48	@ 0x30
10064c84:	7c60      	ldrb	r0, [r4, #17]
10064c86:	2101      	movs	r1, #1
10064c88:	f7f9 ff7a 	bl	1005eb80 <LL_sched_set_per_state>
10064c8c:	2000      	movs	r0, #0
10064c8e:	7028      	strb	r0, [r5, #0]
10064c90:	2015      	movs	r0, #21
10064c92:	f7fd fa03 	bl	1006209c <tsk_notify_idx>
10064c96:	f7df f902 	bl	10043e9e <BLE_STACK_ProcessRequest>
10064c9a:	bdb0      	pop	{r4, r5, r7, pc}

10064c9c <llc_conn_program_slot>:
10064c9c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10064c9e:	4604      	mov	r4, r0
10064ca0:	f7e2 fac7 	bl	10047232 <BLEPLAT_CNTR_PacketGetDataPtr>
10064ca4:	4605      	mov	r5, r0
10064ca6:	2101      	movs	r1, #1
10064ca8:	4620      	mov	r0, r4
10064caa:	f7f3 feef 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
10064cae:	4626      	mov	r6, r4
10064cb0:	362c      	adds	r6, #44	@ 0x2c
10064cb2:	4621      	mov	r1, r4
10064cb4:	3128      	adds	r1, #40	@ 0x28
10064cb6:	428d      	cmp	r5, r1
10064cb8:	d010      	beq.n	10064cdc <llc_conn_program_slot+0x40>
10064cba:	4285      	cmp	r5, r0
10064cbc:	d00e      	beq.n	10064cdc <llc_conn_program_slot+0x40>
10064cbe:	6f61      	ldr	r1, [r4, #116]	@ 0x74
10064cc0:	4620      	mov	r0, r4
10064cc2:	f7f3 fe39 	bl	10058938 <llc_conn_copy_tx_data_packet>
10064cc6:	2101      	movs	r1, #1
10064cc8:	4620      	mov	r0, r4
10064cca:	f7f3 fee5 	bl	10058a98 <llc_conn_get_enc_on>
10064cce:	2801      	cmp	r0, #1
10064cd0:	d104      	bne.n	10064cdc <llc_conn_program_slot+0x40>
10064cd2:	7868      	ldrb	r0, [r5, #1]
10064cd4:	2800      	cmp	r0, #0
10064cd6:	d001      	beq.n	10064cdc <llc_conn_program_slot+0x40>
10064cd8:	1d00      	adds	r0, r0, #4
10064cda:	7068      	strb	r0, [r5, #1]
10064cdc:	4625      	mov	r5, r4
10064cde:	35ac      	adds	r5, #172	@ 0xac
10064ce0:	7830      	ldrb	r0, [r6, #0]
10064ce2:	2803      	cmp	r0, #3
10064ce4:	d113      	bne.n	10064d0e <llc_conn_program_slot+0x72>
10064ce6:	a801      	add	r0, sp, #4
10064ce8:	f7f9 fd48 	bl	1005e77c <LL_sched_anchorstretch>
10064cec:	2801      	cmp	r0, #1
10064cee:	d006      	beq.n	10064cfe <llc_conn_program_slot+0x62>
10064cf0:	2800      	cmp	r0, #0
10064cf2:	d10a      	bne.n	10064d0a <llc_conn_program_slot+0x6e>
10064cf4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
10064cf6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
10064cf8:	0049      	lsls	r1, r1, #1
10064cfa:	1808      	adds	r0, r1, r0
10064cfc:	e006      	b.n	10064d0c <llc_conn_program_slot+0x70>
10064cfe:	6d21      	ldr	r1, [r4, #80]	@ 0x50
10064d00:	9801      	ldr	r0, [sp, #4]
10064d02:	4288      	cmp	r0, r1
10064d04:	d302      	bcc.n	10064d0c <llc_conn_program_slot+0x70>
10064d06:	4608      	mov	r0, r1
10064d08:	e000      	b.n	10064d0c <llc_conn_program_slot+0x70>
10064d0a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
10064d0c:	6068      	str	r0, [r5, #4]
10064d0e:	4620      	mov	r0, r4
10064d10:	f7f3 fee6 	bl	10058ae0 <llc_conn_guard_time_for_close_conn_event>
10064d14:	4620      	mov	r0, r4
10064d16:	f7f4 ff4f 	bl	10059bb8 <llc_conn_update_receive_window>
10064d1a:	6829      	ldr	r1, [r5, #0]
10064d1c:	3414      	adds	r4, #20
10064d1e:	4620      	mov	r0, r4
10064d20:	f7e2 fbcf 	bl	100474c2 <BLEPLAT_CNTR_SetRcvLen>
10064d24:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10064d26 <llc_conn_skip_slot>:
10064d26:	b5f0      	push	{r4, r5, r6, r7, lr}
10064d28:	b089      	sub	sp, #36	@ 0x24
10064d2a:	4602      	mov	r2, r0
10064d2c:	2042      	movs	r0, #66	@ 0x42
10064d2e:	5a15      	ldrh	r5, [r2, r0]
10064d30:	6c50      	ldr	r0, [r2, #68]	@ 0x44
10064d32:	9001      	str	r0, [sp, #4]
10064d34:	1840      	adds	r0, r0, r1
10064d36:	9006      	str	r0, [sp, #24]
10064d38:	20c9      	movs	r0, #201	@ 0xc9
10064d3a:	0040      	lsls	r0, r0, #1
10064d3c:	1810      	adds	r0, r2, r0
10064d3e:	9004      	str	r0, [sp, #16]
10064d40:	4610      	mov	r0, r2
10064d42:	3042      	adds	r0, #66	@ 0x42
10064d44:	9005      	str	r0, [sp, #20]
10064d46:	4610      	mov	r0, r2
10064d48:	302d      	adds	r0, #45	@ 0x2d
10064d4a:	9003      	str	r0, [sp, #12]
10064d4c:	9207      	str	r2, [sp, #28]
10064d4e:	32fe      	adds	r2, #254	@ 0xfe
10064d50:	9202      	str	r2, [sp, #8]
10064d52:	2000      	movs	r0, #0
10064d54:	9008      	str	r0, [sp, #32]
10064d56:	b2a9      	uxth	r1, r5
10064d58:	2201      	movs	r2, #1
10064d5a:	9e07      	ldr	r6, [sp, #28]
10064d5c:	4630      	mov	r0, r6
10064d5e:	f7f4 f96a 	bl	10059036 <llc_conn_calc_skip_ucfg_weak>
10064d62:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
10064d64:	4341      	muls	r1, r0
10064d66:	6c72      	ldr	r2, [r6, #68]	@ 0x44
10064d68:	1854      	adds	r4, r2, r1
10064d6a:	6474      	str	r4, [r6, #68]	@ 0x44
10064d6c:	9908      	ldr	r1, [sp, #32]
10064d6e:	1841      	adds	r1, r0, r1
10064d70:	9108      	str	r1, [sp, #32]
10064d72:	182d      	adds	r5, r5, r0
10064d74:	b2af      	uxth	r7, r5
10064d76:	4630      	mov	r0, r6
10064d78:	4639      	mov	r1, r7
10064d7a:	f7f4 f9c1 	bl	10059100 <llc_conn_check_instant_and_set_params>
10064d7e:	4606      	mov	r6, r0
10064d80:	2800      	cmp	r0, #0
10064d82:	d102      	bne.n	10064d8a <llc_conn_skip_slot+0x64>
10064d84:	9806      	ldr	r0, [sp, #24]
10064d86:	1a20      	subs	r0, r4, r0
10064d88:	d4e5      	bmi.n	10064d56 <llc_conn_skip_slot+0x30>
10064d8a:	9c05      	ldr	r4, [sp, #20]
10064d8c:	8820      	ldrh	r0, [r4, #0]
10064d8e:	42b8      	cmp	r0, r7
10064d90:	d905      	bls.n	10064d9e <llc_conn_skip_slot+0x78>
10064d92:	9802      	ldr	r0, [sp, #8]
10064d94:	8800      	ldrh	r0, [r0, #0]
10064d96:	9907      	ldr	r1, [sp, #28]
10064d98:	31fc      	adds	r1, #252	@ 0xfc
10064d9a:	f7f6 f840 	bl	1005ae1e <llc_subrate_new_sr_base_event_ucfg_weak>
10064d9e:	8025      	strh	r5, [r4, #0]
10064da0:	2e00      	cmp	r6, #0
10064da2:	9d08      	ldr	r5, [sp, #32]
10064da4:	d11b      	bne.n	10064dde <llc_conn_skip_slot+0xb8>
10064da6:	9807      	ldr	r0, [sp, #28]
10064da8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
10064daa:	9a01      	ldr	r2, [sp, #4]
10064dac:	1a8f      	subs	r7, r1, r2
10064dae:	4639      	mov	r1, r7
10064db0:	f7f4 fa38 	bl	10059224 <llc_conn_check_supervision_timer>
10064db4:	4606      	mov	r6, r0
10064db6:	2800      	cmp	r0, #0
10064db8:	d111      	bne.n	10064dde <llc_conn_skip_slot+0xb8>
10064dba:	2011      	movs	r0, #17
10064dbc:	0100      	lsls	r0, r0, #4
10064dbe:	9907      	ldr	r1, [sp, #28]
10064dc0:	1808      	adds	r0, r1, r0
10064dc2:	4639      	mov	r1, r7
10064dc4:	f7f5 faa3 	bl	1005a30e <llc_cpe_update_rsp_timer>
10064dc8:	4606      	mov	r6, r0
10064dca:	2800      	cmp	r0, #0
10064dcc:	d107      	bne.n	10064dde <llc_conn_skip_slot+0xb8>
10064dce:	9807      	ldr	r0, [sp, #28]
10064dd0:	4639      	mov	r1, r7
10064dd2:	462a      	mov	r2, r5
10064dd4:	f7f4 fe7a 	bl	10059acc <llc_conn_set_taskslot_params>
10064dd8:	4606      	mov	r6, r0
10064dda:	2800      	cmp	r0, #0
10064ddc:	d007      	beq.n	10064dee <llc_conn_skip_slot+0xc8>
10064dde:	9c03      	ldr	r4, [sp, #12]
10064de0:	7d20      	ldrb	r0, [r4, #20]
10064de2:	f7f9 fec3 	bl	1005eb6c <LL_sched_delete_taskslot>
10064de6:	7026      	strb	r6, [r4, #0]
10064de8:	2000      	movs	r0, #0
10064dea:	9904      	ldr	r1, [sp, #16]
10064dec:	8008      	strh	r0, [r1, #0]
10064dee:	4628      	mov	r0, r5
10064df0:	b009      	add	sp, #36	@ 0x24
10064df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

10064df4 <llc_conn_isr>:
10064df4:	b5f0      	push	{r4, r5, r6, r7, lr}
10064df6:	b099      	sub	sp, #100	@ 0x64
10064df8:	4604      	mov	r4, r0
10064dfa:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
10064dfc:	1c40      	adds	r0, r0, #1
10064dfe:	8660      	strh	r0, [r4, #50]	@ 0x32
10064e00:	2041      	movs	r0, #65	@ 0x41
10064e02:	5c27      	ldrb	r7, [r4, r0]
10064e04:	202d      	movs	r0, #45	@ 0x2d
10064e06:	5c20      	ldrb	r0, [r4, r0]
10064e08:	2800      	cmp	r0, #0
10064e0a:	d008      	beq.n	10064e1e <llc_conn_isr+0x2a>
10064e0c:	f7e1 f961 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
10064e10:	4638      	mov	r0, r7
10064e12:	f7f9 feab 	bl	1005eb6c <LL_sched_delete_taskslot>
10064e16:	4638      	mov	r0, r7
10064e18:	f7f9 fcb8 	bl	1005e78c <LL_sched_engine>
10064e1c:	e2bd      	b.n	1006539a <__arm_cp.0_5+0x19a>
10064e1e:	2015      	movs	r0, #21
10064e20:	0100      	lsls	r0, r0, #4
10064e22:	1820      	adds	r0, r4, r0
10064e24:	9007      	str	r0, [sp, #28]
10064e26:	20c9      	movs	r0, #201	@ 0xc9
10064e28:	0040      	lsls	r0, r0, #1
10064e2a:	1820      	adds	r0, r4, r0
10064e2c:	9008      	str	r0, [sp, #32]
10064e2e:	4620      	mov	r0, r4
10064e30:	302c      	adds	r0, #44	@ 0x2c
10064e32:	900c      	str	r0, [sp, #48]	@ 0x30
10064e34:	4625      	mov	r5, r4
10064e36:	3580      	adds	r5, #128	@ 0x80
10064e38:	4620      	mov	r0, r4
10064e3a:	30ac      	adds	r0, #172	@ 0xac
10064e3c:	9006      	str	r0, [sp, #24]
10064e3e:	4620      	mov	r0, r4
10064e40:	30e4      	adds	r0, #228	@ 0xe4
10064e42:	900b      	str	r0, [sp, #44]	@ 0x2c
10064e44:	4eec      	ldr	r6, [pc, #944]	@ (100651f8 <__arm_cp.0_3>)
10064e46:	6830      	ldr	r0, [r6, #0]
10064e48:	f7e2 f9b6 	bl	100471b8 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
10064e4c:	900a      	str	r0, [sp, #40]	@ 0x28
10064e4e:	2800      	cmp	r0, #0
10064e50:	950d      	str	r5, [sp, #52]	@ 0x34
10064e52:	d03e      	beq.n	10064ed2 <llc_conn_isr+0xde>
10064e54:	4626      	mov	r6, r4
10064e56:	3614      	adds	r6, #20
10064e58:	4630      	mov	r0, r6
10064e5a:	f7e2 f9dd 	bl	10047218 <BLEPLAT_CNTR_PacketClrPllTrig>
10064e5e:	4630      	mov	r0, r6
10064e60:	f7e2 f9ce 	bl	10047200 <BLEPLAT_CNTR_PacketClrIncChan>
10064e64:	7828      	ldrb	r0, [r5, #0]
10064e66:	0780      	lsls	r0, r0, #30
10064e68:	d447      	bmi.n	10064efa <llc_conn_isr+0x106>
10064e6a:	9709      	str	r7, [sp, #36]	@ 0x24
10064e6c:	4620      	mov	r0, r4
10064e6e:	f7e2 f9e0 	bl	10047232 <BLEPLAT_CNTR_PacketGetDataPtr>
10064e72:	4607      	mov	r7, r0
10064e74:	4625      	mov	r5, r4
10064e76:	3528      	adds	r5, #40	@ 0x28
10064e78:	980c      	ldr	r0, [sp, #48]	@ 0x30
10064e7a:	7800      	ldrb	r0, [r0, #0]
10064e7c:	2100      	movs	r1, #0
10064e7e:	9108      	str	r1, [sp, #32]
10064e80:	2803      	cmp	r0, #3
10064e82:	d000      	beq.n	10064e86 <llc_conn_isr+0x92>
10064e84:	e0a8      	b.n	10064fd8 <llc_conn_isr+0x1e4>
10064e86:	4630      	mov	r0, r6
10064e88:	f7e2 f9d3 	bl	10047232 <BLEPLAT_CNTR_PacketGetDataPtr>
10064e8c:	4603      	mov	r3, r0
10064e8e:	42af      	cmp	r7, r5
10064e90:	d015      	beq.n	10064ebe <llc_conn_isr+0xca>
10064e92:	7839      	ldrb	r1, [r7, #0]
10064e94:	2003      	movs	r0, #3
10064e96:	460a      	mov	r2, r1
10064e98:	4002      	ands	r2, r0
10064e9a:	2a03      	cmp	r2, #3
10064e9c:	d10a      	bne.n	10064eb4 <llc_conn_isr+0xc0>
10064e9e:	0689      	lsls	r1, r1, #26
10064ea0:	d400      	bmi.n	10064ea4 <llc_conn_isr+0xb0>
10064ea2:	2002      	movs	r0, #2
10064ea4:	5c38      	ldrb	r0, [r7, r0]
10064ea6:	2806      	cmp	r0, #6
10064ea8:	d104      	bne.n	10064eb4 <llc_conn_isr+0xc0>
10064eaa:	4620      	mov	r0, r4
10064eac:	9307      	str	r3, [sp, #28]
10064eae:	f7f3 fd2b 	bl	10058908 <llc_conn_clr_rx_acl_blocked>
10064eb2:	9b07      	ldr	r3, [sp, #28]
10064eb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10064eb6:	6810      	ldr	r0, [r2, #0]
10064eb8:	2140      	movs	r1, #64	@ 0x40
10064eba:	4301      	orrs	r1, r0
10064ebc:	6011      	str	r1, [r2, #0]
10064ebe:	7818      	ldrb	r0, [r3, #0]
10064ec0:	7839      	ldrb	r1, [r7, #0]
10064ec2:	4301      	orrs	r1, r0
10064ec4:	06c8      	lsls	r0, r1, #27
10064ec6:	d476      	bmi.n	10064fb6 <llc_conn_isr+0x1c2>
10064ec8:	980d      	ldr	r0, [sp, #52]	@ 0x34
10064eca:	7800      	ldrb	r0, [r0, #0]
10064ecc:	06c0      	lsls	r0, r0, #27
10064ece:	d57f      	bpl.n	10064fd0 <llc_conn_isr+0x1dc>
10064ed0:	e082      	b.n	10064fd8 <llc_conn_isr+0x1e4>
10064ed2:	9709      	str	r7, [sp, #36]	@ 0x24
10064ed4:	4620      	mov	r0, r4
10064ed6:	f7e2 f99f 	bl	10047218 <BLEPLAT_CNTR_PacketClrPllTrig>
10064eda:	4620      	mov	r0, r4
10064edc:	f7e2 f990 	bl	10047200 <BLEPLAT_CNTR_PacketClrIncChan>
10064ee0:	a80e      	add	r0, sp, #56	@ 0x38
10064ee2:	2100      	movs	r1, #0
10064ee4:	7781      	strb	r1, [r0, #30]
10064ee6:	7601      	strb	r1, [r0, #24]
10064ee8:	9105      	str	r1, [sp, #20]
10064eea:	7741      	strb	r1, [r0, #29]
10064eec:	6830      	ldr	r0, [r6, #0]
10064eee:	f7e2 f957 	bl	100471a0 <BLEPLAT_CNTR_IntGetIntStatusTimeout>
10064ef2:	2800      	cmp	r0, #0
10064ef4:	d014      	beq.n	10064f20 <llc_conn_isr+0x12c>
10064ef6:	2501      	movs	r5, #1
10064ef8:	e018      	b.n	10064f2c <llc_conn_isr+0x138>
10064efa:	208b      	movs	r0, #139	@ 0x8b
10064efc:	0040      	lsls	r0, r0, #1
10064efe:	1825      	adds	r5, r4, r0
10064f00:	f7e1 f8e7 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
10064f04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
10064f06:	7d70      	ldrb	r0, [r6, #21]
10064f08:	f7f9 fe30 	bl	1005eb6c <LL_sched_delete_taskslot>
10064f0c:	2000      	movs	r0, #0
10064f0e:	7028      	strb	r0, [r5, #0]
10064f10:	4635      	mov	r5, r6
10064f12:	2113      	movs	r1, #19
10064f14:	7071      	strb	r1, [r6, #1]
10064f16:	9907      	ldr	r1, [sp, #28]
10064f18:	7188      	strb	r0, [r1, #6]
10064f1a:	9908      	ldr	r1, [sp, #32]
10064f1c:	8008      	strh	r0, [r1, #0]
10064f1e:	e1f2      	b.n	10065306 <__arm_cp.0_5+0x106>
10064f20:	6830      	ldr	r0, [r6, #0]
10064f22:	f7e2 f8f6 	bl	10047112 <BLEPLAT_CNTR_IntGetIntStatusLenErr>
10064f26:	4605      	mov	r5, r0
10064f28:	1e40      	subs	r0, r0, #1
10064f2a:	4185      	sbcs	r5, r0
10064f2c:	a80e      	add	r0, sp, #56	@ 0x38
10064f2e:	76c5      	strb	r5, [r0, #27]
10064f30:	6830      	ldr	r0, [r6, #0]
10064f32:	f7e2 f94c 	bl	100471ce <BLEPLAT_CNTR_IntGetIntStatusTxOk>
10064f36:	4607      	mov	r7, r0
10064f38:	900f      	str	r0, [sp, #60]	@ 0x3c
10064f3a:	2d00      	cmp	r5, #0
10064f3c:	d01e      	beq.n	10064f7c <llc_conn_isr+0x188>
10064f3e:	f7e1 f8c8 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
10064f42:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
10064f44:	68e8      	ldr	r0, [r5, #12]
10064f46:	2800      	cmp	r0, #0
10064f48:	d002      	beq.n	10064f50 <llc_conn_isr+0x15c>
10064f4a:	88c1      	ldrh	r1, [r0, #6]
10064f4c:	1c49      	adds	r1, r1, #1
10064f4e:	80c1      	strh	r1, [r0, #6]
10064f50:	6928      	ldr	r0, [r5, #16]
10064f52:	2800      	cmp	r0, #0
10064f54:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10064f56:	d00a      	beq.n	10064f6e <llc_conn_isr+0x17a>
10064f58:	980c      	ldr	r0, [sp, #48]	@ 0x30
10064f5a:	7d40      	ldrb	r0, [r0, #21]
10064f5c:	f7e2 fbaa 	bl	100476b4 <BLEPLAT_CNTR_SmGetRemapChan>
10064f60:	0040      	lsls	r0, r0, #1
10064f62:	6929      	ldr	r1, [r5, #16]
10064f64:	1808      	adds	r0, r1, r0
10064f66:	2194      	movs	r1, #148	@ 0x94
10064f68:	5a42      	ldrh	r2, [r0, r1]
10064f6a:	1c52      	adds	r2, r2, #1
10064f6c:	5242      	strh	r2, [r0, r1]
10064f6e:	a80e      	add	r0, sp, #56	@ 0x38
10064f70:	2501      	movs	r5, #1
10064f72:	7605      	strb	r5, [r0, #24]
10064f74:	6830      	ldr	r0, [r6, #0]
10064f76:	2100      	movs	r1, #0
10064f78:	9105      	str	r1, [sp, #20]
10064f7a:	e0b9      	b.n	100650f0 <llc_conn_isr+0x2fc>
10064f7c:	9704      	str	r7, [sp, #16]
10064f7e:	6830      	ldr	r0, [r6, #0]
10064f80:	f7e2 f903 	bl	1004718a <BLEPLAT_CNTR_IntGetIntStatusRxOk>
10064f84:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
10064f86:	7839      	ldrb	r1, [r7, #0]
10064f88:	094a      	lsrs	r2, r1, #5
10064f8a:	2501      	movs	r5, #1
10064f8c:	4629      	mov	r1, r5
10064f8e:	4391      	bics	r1, r2
10064f90:	aa0e      	add	r2, sp, #56	@ 0x38
10064f92:	7691      	strb	r1, [r2, #26]
10064f94:	9003      	str	r0, [sp, #12]
10064f96:	900e      	str	r0, [sp, #56]	@ 0x38
10064f98:	6830      	ldr	r0, [r6, #0]
10064f9a:	f7e2 f896 	bl	100470ca <BLEPLAT_CNTR_IntGetIntStatusCrcErr>
10064f9e:	2800      	cmp	r0, #0
10064fa0:	d06e      	beq.n	10065080 <llc_conn_isr+0x28c>
10064fa2:	7838      	ldrb	r0, [r7, #0]
10064fa4:	06c0      	lsls	r0, r0, #27
10064fa6:	d47b      	bmi.n	100650a0 <llc_conn_isr+0x2ac>
10064fa8:	f7e2 f855 	bl	10047056 <BLEPLAT_CNTR_GlobEnableBlue>
10064fac:	6838      	ldr	r0, [r7, #0]
10064fae:	2110      	movs	r1, #16
10064fb0:	4301      	orrs	r1, r0
10064fb2:	6039      	str	r1, [r7, #0]
10064fb4:	e078      	b.n	100650a8 <llc_conn_isr+0x2b4>
10064fb6:	9806      	ldr	r0, [sp, #24]
10064fb8:	6840      	ldr	r0, [r0, #4]
10064fba:	9007      	str	r0, [sp, #28]
10064fbc:	f7e1 f848 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
10064fc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
10064fc2:	1a08      	subs	r0, r1, r0
10064fc4:	9907      	ldr	r1, [sp, #28]
10064fc6:	1840      	adds	r0, r0, r1
10064fc8:	d402      	bmi.n	10064fd0 <llc_conn_isr+0x1dc>
10064fca:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
10064fcc:	4288      	cmp	r0, r1
10064fce:	d203      	bcs.n	10064fd8 <llc_conn_isr+0x1e4>
10064fd0:	f7e1 f87f 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
10064fd4:	2001      	movs	r0, #1
10064fd6:	9008      	str	r0, [sp, #32]
10064fd8:	4620      	mov	r0, r4
10064fda:	f7f3 fd7a 	bl	10058ad2 <llc_conn_get_tx_ctrl_pdu_state>
10064fde:	2802      	cmp	r0, #2
10064fe0:	d13d      	bne.n	1006505e <llc_conn_isr+0x26a>
10064fe2:	980d      	ldr	r0, [sp, #52]	@ 0x34
10064fe4:	6880      	ldr	r0, [r0, #8]
10064fe6:	6800      	ldr	r0, [r0, #0]
10064fe8:	06c1      	lsls	r1, r0, #27
10064fea:	d415      	bmi.n	10065018 <llc_conn_isr+0x224>
10064fec:	0640      	lsls	r0, r0, #25
10064fee:	d536      	bpl.n	1006505e <llc_conn_isr+0x26a>
10064ff0:	980c      	ldr	r0, [sp, #48]	@ 0x30
10064ff2:	7d40      	ldrb	r0, [r0, #21]
10064ff4:	f7e2 fa9d 	bl	10047532 <BLEPLAT_CNTR_SmEncOff>
10064ff8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10064ffa:	6898      	ldr	r0, [r3, #8]
10064ffc:	6801      	ldr	r1, [r0, #0]
10064ffe:	2240      	movs	r2, #64	@ 0x40
10065000:	4391      	bics	r1, r2
10065002:	6001      	str	r1, [r0, #0]
10065004:	6818      	ldr	r0, [r3, #0]
10065006:	2108      	movs	r1, #8
10065008:	4388      	bics	r0, r1
1006500a:	6018      	str	r0, [r3, #0]
1006500c:	2013      	movs	r0, #19
1006500e:	f7fd f845 	bl	1006209c <tsk_notify_idx>
10065012:	f7de ff44 	bl	10043e9e <BLE_STACK_ProcessRequest>
10065016:	e022      	b.n	1006505e <llc_conn_isr+0x26a>
10065018:	9707      	str	r7, [sp, #28]
1006501a:	2000      	movs	r0, #0
1006501c:	900f      	str	r0, [sp, #60]	@ 0x3c
1006501e:	900e      	str	r0, [sp, #56]	@ 0x38
10065020:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
10065022:	7d78      	ldrb	r0, [r7, #21]
10065024:	f7e2 fa99 	bl	1004755a <BLEPLAT_CNTR_SmEncOn>
10065028:	7d78      	ldrb	r0, [r7, #21]
1006502a:	a90e      	add	r1, sp, #56	@ 0x38
1006502c:	f7e2 fc76 	bl	1004791c <BLEPLAT_CNTR_SmSetRxCount>
10065030:	7838      	ldrb	r0, [r7, #0]
10065032:	2803      	cmp	r0, #3
10065034:	d103      	bne.n	1006503e <llc_conn_isr+0x24a>
10065036:	980c      	ldr	r0, [sp, #48]	@ 0x30
10065038:	7d40      	ldrb	r0, [r0, #21]
1006503a:	f7e2 fc92 	bl	10047962 <BLEPLAT_CNTR_SmSetRxCountDirectionBit>
1006503e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10065040:	6898      	ldr	r0, [r3, #8]
10065042:	6801      	ldr	r1, [r0, #0]
10065044:	2210      	movs	r2, #16
10065046:	4391      	bics	r1, r2
10065048:	6001      	str	r1, [r0, #0]
1006504a:	6818      	ldr	r0, [r3, #0]
1006504c:	2108      	movs	r1, #8
1006504e:	4301      	orrs	r1, r0
10065050:	6019      	str	r1, [r3, #0]
10065052:	2013      	movs	r0, #19
10065054:	f7fd f822 	bl	1006209c <tsk_notify_idx>
10065058:	f7de ff21 	bl	10043e9e <BLE_STACK_ProcessRequest>
1006505c:	9f07      	ldr	r7, [sp, #28]
1006505e:	42af      	cmp	r7, r5
10065060:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10065062:	d001      	beq.n	10065068 <llc_conn_isr+0x274>
10065064:	8a88      	ldrh	r0, [r1, #20]
10065066:	82c8      	strh	r0, [r1, #22]
10065068:	9808      	ldr	r0, [sp, #32]
1006506a:	2800      	cmp	r0, #0
1006506c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1006506e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065070:	d000      	beq.n	10065074 <llc_conn_isr+0x280>
10065072:	e145      	b.n	10065300 <__arm_cp.0_5+0x100>
10065074:	9806      	ldr	r0, [sp, #24]
10065076:	6801      	ldr	r1, [r0, #0]
10065078:	4630      	mov	r0, r6
1006507a:	f7e2 fa22 	bl	100474c2 <BLEPLAT_CNTR_SetRcvLen>
1006507e:	e144      	b.n	1006530a <__arm_cp.0_5+0x10a>
10065080:	6830      	ldr	r0, [r6, #0]
10065082:	f7e2 f83a 	bl	100470fa <BLEPLAT_CNTR_IntGetIntStatusEncErr>
10065086:	2800      	cmp	r0, #0
10065088:	d027      	beq.n	100650da <llc_conn_isr+0x2e6>
1006508a:	9803      	ldr	r0, [sp, #12]
1006508c:	2800      	cmp	r0, #0
1006508e:	d024      	beq.n	100650da <llc_conn_isr+0x2e6>
10065090:	f7e1 f81f 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
10065094:	a80e      	add	r0, sp, #56	@ 0x38
10065096:	213d      	movs	r1, #61	@ 0x3d
10065098:	9105      	str	r1, [sp, #20]
1006509a:	7781      	strb	r1, [r0, #30]
1006509c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1006509e:	e023      	b.n	100650e8 <llc_conn_isr+0x2f4>
100650a0:	f7e1 f817 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
100650a4:	a80e      	add	r0, sp, #56	@ 0x38
100650a6:	7605      	strb	r5, [r0, #24]
100650a8:	9f04      	ldr	r7, [sp, #16]
100650aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100650ac:	68c0      	ldr	r0, [r0, #12]
100650ae:	2800      	cmp	r0, #0
100650b0:	d002      	beq.n	100650b8 <llc_conn_isr+0x2c4>
100650b2:	8841      	ldrh	r1, [r0, #2]
100650b4:	1c49      	adds	r1, r1, #1
100650b6:	8041      	strh	r1, [r0, #2]
100650b8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
100650ba:	6930      	ldr	r0, [r6, #16]
100650bc:	2800      	cmp	r0, #0
100650be:	d00a      	beq.n	100650d6 <llc_conn_isr+0x2e2>
100650c0:	980c      	ldr	r0, [sp, #48]	@ 0x30
100650c2:	7d40      	ldrb	r0, [r0, #21]
100650c4:	f7e2 faf6 	bl	100476b4 <BLEPLAT_CNTR_SmGetRemapChan>
100650c8:	0040      	lsls	r0, r0, #1
100650ca:	6931      	ldr	r1, [r6, #16]
100650cc:	1808      	adds	r0, r1, r0
100650ce:	214a      	movs	r1, #74	@ 0x4a
100650d0:	5a42      	ldrh	r2, [r0, r1]
100650d2:	1c52      	adds	r2, r2, #1
100650d4:	5242      	strh	r2, [r0, r1]
100650d6:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
100650d8:	e007      	b.n	100650ea <llc_conn_isr+0x2f6>
100650da:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
100650dc:	6830      	ldr	r0, [r6, #0]
100650de:	2110      	movs	r1, #16
100650e0:	4388      	bics	r0, r1
100650e2:	6030      	str	r0, [r6, #0]
100650e4:	2500      	movs	r5, #0
100650e6:	9505      	str	r5, [sp, #20]
100650e8:	9f04      	ldr	r7, [sp, #16]
100650ea:	6831      	ldr	r1, [r6, #0]
100650ec:	2020      	movs	r0, #32
100650ee:	4308      	orrs	r0, r1
100650f0:	4279      	negs	r1, r7
100650f2:	4179      	adcs	r1, r7
100650f4:	0189      	lsls	r1, r1, #6
100650f6:	463a      	mov	r2, r7
100650f8:	2740      	movs	r7, #64	@ 0x40
100650fa:	43b8      	bics	r0, r7
100650fc:	1840      	adds	r0, r0, r1
100650fe:	6030      	str	r0, [r6, #0]
10065100:	2d00      	cmp	r5, #0
10065102:	d027      	beq.n	10065154 <llc_conn_isr+0x360>
10065104:	a80e      	add	r0, sp, #56	@ 0x38
10065106:	7f80      	ldrb	r0, [r0, #30]
10065108:	2800      	cmp	r0, #0
1006510a:	d16b      	bne.n	100651e4 <llc_conn_isr+0x3f0>
1006510c:	a80e      	add	r0, sp, #56	@ 0x38
1006510e:	7ec0      	ldrb	r0, [r0, #27]
10065110:	2800      	cmp	r0, #0
10065112:	9f09      	ldr	r7, [sp, #36]	@ 0x24
10065114:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10065116:	d000      	beq.n	1006511a <llc_conn_isr+0x326>
10065118:	e0e9      	b.n	100652ee <__arm_cp.0_5+0xee>
1006511a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
1006511c:	2800      	cmp	r0, #0
1006511e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
10065120:	d100      	bne.n	10065124 <llc_conn_isr+0x330>
10065122:	e0c2      	b.n	100652aa <__arm_cp.0_5+0xaa>
10065124:	4e35      	ldr	r6, [pc, #212]	@ (100651fc <__arm_cp.0_3+0x4>)
10065126:	6830      	ldr	r0, [r6, #0]
10065128:	21d0      	movs	r1, #208	@ 0xd0
1006512a:	5c41      	ldrb	r1, [r0, r1]
1006512c:	2901      	cmp	r1, #1
1006512e:	d14a      	bne.n	100651c6 <llc_conn_isr+0x3d2>
10065130:	6805      	ldr	r5, [r0, #0]
10065132:	f7ec fd84 	bl	10051c3e <phy_upd_csr_ucfg>
10065136:	2801      	cmp	r0, #1
10065138:	d000      	beq.n	1006513c <llc_conn_isr+0x348>
1006513a:	e09f      	b.n	1006527c <__arm_cp.0_5+0x7c>
1006513c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1006513e:	7900      	ldrb	r0, [r0, #4]
10065140:	210e      	movs	r1, #14
10065142:	4341      	muls	r1, r0
10065144:	6830      	ldr	r0, [r6, #0]
10065146:	2294      	movs	r2, #148	@ 0x94
10065148:	5880      	ldr	r0, [r0, r2]
1006514a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1006514c:	6880      	ldr	r0, [r0, #8]
1006514e:	1840      	adds	r0, r0, r1
10065150:	79c0      	ldrb	r0, [r0, #7]
10065152:	e094      	b.n	1006527e <__arm_cp.0_5+0x7e>
10065154:	4615      	mov	r5, r2
10065156:	4620      	mov	r0, r4
10065158:	3014      	adds	r0, #20
1006515a:	f7e2 f86a 	bl	10047232 <BLEPLAT_CNTR_PacketGetDataPtr>
1006515e:	9011      	str	r0, [sp, #68]	@ 0x44
10065160:	7801      	ldrb	r1, [r0, #0]
10065162:	2203      	movs	r2, #3
10065164:	4011      	ands	r1, r2
10065166:	ae0e      	add	r6, sp, #56	@ 0x38
10065168:	9102      	str	r1, [sp, #8]
1006516a:	7571      	strb	r1, [r6, #21]
1006516c:	7801      	ldrb	r1, [r0, #0]
1006516e:	0689      	lsls	r1, r1, #26
10065170:	d400      	bmi.n	10065174 <llc_conn_isr+0x380>
10065172:	2202      	movs	r2, #2
10065174:	9004      	str	r0, [sp, #16]
10065176:	5c80      	ldrb	r0, [r0, r2]
10065178:	75f0      	strb	r0, [r6, #23]
1006517a:	f7f4 fe59 	bl	10059e30 <llc_cpe_get_cpf_id_from_opcode>
1006517e:	7530      	strb	r0, [r6, #20]
10065180:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
10065182:	6661      	str	r1, [r4, #100]	@ 0x64
10065184:	2301      	movs	r3, #1
10065186:	2d00      	cmp	r5, #0
10065188:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1006518a:	d008      	beq.n	1006519e <llc_conn_isr+0x3aa>
1006518c:	6811      	ldr	r1, [r2, #0]
1006518e:	4019      	ands	r1, r3
10065190:	d005      	beq.n	1006519e <llc_conn_isr+0x3aa>
10065192:	2616      	movs	r6, #22
10065194:	f7e0 ff9d 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
10065198:	a80e      	add	r0, sp, #56	@ 0x38
1006519a:	7786      	strb	r6, [r0, #30]
1006519c:	e022      	b.n	100651e4 <llc_conn_isr+0x3f0>
1006519e:	6891      	ldr	r1, [r2, #8]
100651a0:	7849      	ldrb	r1, [r1, #1]
100651a2:	07c9      	lsls	r1, r1, #31
100651a4:	9903      	ldr	r1, [sp, #12]
100651a6:	d01a      	beq.n	100651de <llc_conn_isr+0x3ea>
100651a8:	2900      	cmp	r1, #0
100651aa:	d018      	beq.n	100651de <llc_conn_isr+0x3ea>
100651ac:	9a02      	ldr	r2, [sp, #8]
100651ae:	2a03      	cmp	r2, #3
100651b0:	d10f      	bne.n	100651d2 <llc_conn_isr+0x3de>
100651b2:	263d      	movs	r6, #61	@ 0x3d
100651b4:	2812      	cmp	r0, #18
100651b6:	d8ed      	bhi.n	10065194 <llc_conn_isr+0x3a0>
100651b8:	4619      	mov	r1, r3
100651ba:	4081      	lsls	r1, r0
100651bc:	4810      	ldr	r0, [pc, #64]	@ (10065200 <__arm_cp.0_5>)
100651be:	4201      	tst	r1, r0
100651c0:	9903      	ldr	r1, [sp, #12]
100651c2:	d10c      	bne.n	100651de <llc_conn_isr+0x3ea>
100651c4:	e7e6      	b.n	10065194 <llc_conn_isr+0x3a0>
100651c6:	f7e0 ff84 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
100651ca:	a80e      	add	r0, sp, #56	@ 0x38
100651cc:	2101      	movs	r1, #1
100651ce:	7601      	strb	r1, [r0, #24]
100651d0:	e06a      	b.n	100652a8 <__arm_cp.0_5+0xa8>
100651d2:	9804      	ldr	r0, [sp, #16]
100651d4:	7840      	ldrb	r0, [r0, #1]
100651d6:	2800      	cmp	r0, #0
100651d8:	d001      	beq.n	100651de <llc_conn_isr+0x3ea>
100651da:	263d      	movs	r6, #61	@ 0x3d
100651dc:	e7da      	b.n	10065194 <llc_conn_isr+0x3a0>
100651de:	9805      	ldr	r0, [sp, #20]
100651e0:	2800      	cmp	r0, #0
100651e2:	d00f      	beq.n	10065204 <__arm_cp.0_5+0x4>
100651e4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100651e6:	7d68      	ldrb	r0, [r5, #21]
100651e8:	f7f9 fcc0 	bl	1005eb6c <LL_sched_delete_taskslot>
100651ec:	a80e      	add	r0, sp, #56	@ 0x38
100651ee:	7f80      	ldrb	r0, [r0, #30]
100651f0:	7068      	strb	r0, [r5, #1]
100651f2:	2601      	movs	r6, #1
100651f4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
100651f6:	e089      	b.n	1006530c <__arm_cp.0_5+0x10c>

100651f8 <__arm_cp.0_3>:
100651f8:	20001170 	.word	0x20001170
100651fc:	20001174 	.word	0x20001174

10065200 <__arm_cp.0_5>:
10065200:	00040012 	.word	0x00040012
10065204:	461d      	mov	r5, r3
10065206:	9701      	str	r7, [sp, #4]
10065208:	4620      	mov	r0, r4
1006520a:	460f      	mov	r7, r1
1006520c:	f7e2 f811 	bl	10047232 <BLEPLAT_CNTR_PacketGetDataPtr>
10065210:	4606      	mov	r6, r0
10065212:	a80e      	add	r0, sp, #56	@ 0x38
10065214:	2100      	movs	r1, #0
10065216:	7701      	strb	r1, [r0, #28]
10065218:	7641      	strb	r1, [r0, #25]
1006521a:	9612      	str	r6, [sp, #72]	@ 0x48
1006521c:	9103      	str	r1, [sp, #12]
1006521e:	9110      	str	r1, [sp, #64]	@ 0x40
10065220:	2f00      	cmp	r7, #0
10065222:	d100      	bne.n	10065226 <__arm_cp.0_5+0x26>
10065224:	e155      	b.n	100654d2 <__arm_cp.0_5+0x2d2>
10065226:	980c      	ldr	r0, [sp, #48]	@ 0x30
10065228:	7800      	ldrb	r0, [r0, #0]
1006522a:	2802      	cmp	r0, #2
1006522c:	d114      	bne.n	10065258 <__arm_cp.0_5+0x58>
1006522e:	9804      	ldr	r0, [sp, #16]
10065230:	7800      	ldrb	r0, [r0, #0]
10065232:	7831      	ldrb	r1, [r6, #0]
10065234:	4301      	orrs	r1, r0
10065236:	06c8      	lsls	r0, r1, #27
10065238:	d509      	bpl.n	1006524e <__arm_cp.0_5+0x4e>
1006523a:	6d27      	ldr	r7, [r4, #80]	@ 0x50
1006523c:	f7e0 ff08 	bl	10046050 <BLEPLAT_GetCurrentSysTime>
10065240:	6c61      	ldr	r1, [r4, #68]	@ 0x44
10065242:	1a08      	subs	r0, r1, r0
10065244:	19c0      	adds	r0, r0, r7
10065246:	d402      	bmi.n	1006524e <__arm_cp.0_5+0x4e>
10065248:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
1006524a:	4288      	cmp	r0, r1
1006524c:	d204      	bcs.n	10065258 <__arm_cp.0_5+0x58>
1006524e:	f7e0 ff40 	bl	100460d2 <BLEPLAT_ClearRadioTimerValue>
10065252:	a80e      	add	r0, sp, #56	@ 0x38
10065254:	2101      	movs	r1, #1
10065256:	7601      	strb	r1, [r0, #24]
10065258:	9804      	ldr	r0, [sp, #16]
1006525a:	7847      	ldrb	r7, [r0, #1]
1006525c:	2f00      	cmp	r7, #0
1006525e:	d100      	bne.n	10065262 <__arm_cp.0_5+0x62>
10065260:	e137      	b.n	100654d2 <__arm_cp.0_5+0x2d2>
10065262:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065264:	6800      	ldr	r0, [r0, #0]
10065266:	2608      	movs	r6, #8
10065268:	4006      	ands	r6, r0
1006526a:	d100      	bne.n	1006526e <__arm_cp.0_5+0x6e>
1006526c:	e0b0      	b.n	100653d0 <__arm_cp.0_5+0x1d0>
1006526e:	f7f2 fcae 	bl	10057bce <data_length_extension_csr_ucfg_weak>
10065272:	2801      	cmp	r0, #1
10065274:	d100      	bne.n	10065278 <__arm_cp.0_5+0x78>
10065276:	e099      	b.n	100653ac <__arm_cp.0_5+0x1ac>
10065278:	201c      	movs	r0, #28
1006527a:	e098      	b.n	100653ae <__arm_cp.0_5+0x1ae>
1006527c:	2001      	movs	r0, #1
1006527e:	6c66      	ldr	r6, [r4, #68]	@ 0x44
10065280:	f7e2 fc77 	bl	10047b72 <BLEPLAT_CNTR_DemodDelaySt>
10065284:	1a28      	subs	r0, r5, r0
10065286:	6460      	str	r0, [r4, #68]	@ 0x44
10065288:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1006528a:	1b89      	subs	r1, r1, r6
1006528c:	1808      	adds	r0, r1, r0
1006528e:	9a06      	ldr	r2, [sp, #24]
10065290:	6851      	ldr	r1, [r2, #4]
10065292:	4281      	cmp	r1, r0
10065294:	d901      	bls.n	1006529a <__arm_cp.0_5+0x9a>
10065296:	1a08      	subs	r0, r1, r0
10065298:	6050      	str	r0, [r2, #4]
1006529a:	2000      	movs	r0, #0
1006529c:	64a0      	str	r0, [r4, #72]	@ 0x48
1006529e:	6360      	str	r0, [r4, #52]	@ 0x34
100652a0:	4620      	mov	r0, r4
100652a2:	f7f4 fc89 	bl	10059bb8 <llc_conn_update_receive_window>
100652a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
100652a8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
100652aa:	a80e      	add	r0, sp, #56	@ 0x38
100652ac:	7e80      	ldrb	r0, [r0, #26]
100652ae:	2801      	cmp	r0, #1
100652b0:	d102      	bne.n	100652b8 <__arm_cp.0_5+0xb8>
100652b2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
100652b4:	6660      	str	r0, [r4, #100]	@ 0x64
100652b6:	e004      	b.n	100652c2 <__arm_cp.0_5+0xc2>
100652b8:	2012      	movs	r0, #18
100652ba:	f7fc feef 	bl	1006209c <tsk_notify_idx>
100652be:	f7de fdee 	bl	10043e9e <BLE_STACK_ProcessRequest>
100652c2:	68e8      	ldr	r0, [r5, #12]
100652c4:	2800      	cmp	r0, #0
100652c6:	d002      	beq.n	100652ce <__arm_cp.0_5+0xce>
100652c8:	8801      	ldrh	r1, [r0, #0]
100652ca:	1c49      	adds	r1, r1, #1
100652cc:	8001      	strh	r1, [r0, #0]
100652ce:	6928      	ldr	r0, [r5, #16]
100652d0:	2800      	cmp	r0, #0
100652d2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100652d4:	d008      	beq.n	100652e8 <__arm_cp.0_5+0xe8>
100652d6:	7d68      	ldrb	r0, [r5, #21]
100652d8:	f7e2 f9ec 	bl	100476b4 <BLEPLAT_CNTR_SmGetRemapChan>
100652dc:	0040      	lsls	r0, r0, #1
100652de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100652e0:	6909      	ldr	r1, [r1, #16]
100652e2:	5a0a      	ldrh	r2, [r1, r0]
100652e4:	1c52      	adds	r2, r2, #1
100652e6:	520a      	strh	r2, [r1, r0]
100652e8:	7928      	ldrb	r0, [r5, #4]
100652ea:	f7f6 ffdb 	bl	1005c2a4 <LLC_pcl_incr_rx_packets_ucfg_weak>
100652ee:	a80e      	add	r0, sp, #56	@ 0x38
100652f0:	7e00      	ldrb	r0, [r0, #24]
100652f2:	2801      	cmp	r0, #1
100652f4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100652f6:	d108      	bne.n	1006530a <__arm_cp.0_5+0x10a>
100652f8:	6830      	ldr	r0, [r6, #0]
100652fa:	2110      	movs	r1, #16
100652fc:	4388      	bics	r0, r1
100652fe:	6030      	str	r0, [r6, #0]
10065300:	4620      	mov	r0, r4
10065302:	f000 fa88 	bl	10065816 <llc_conn_close_event>
10065306:	2601      	movs	r6, #1
10065308:	e000      	b.n	1006530c <__arm_cp.0_5+0x10c>
1006530a:	2600      	movs	r6, #0
1006530c:	7d6d      	ldrb	r5, [r5, #21]
1006530e:	4628      	mov	r0, r5
10065310:	f7e2 f9bf 	bl	10047692 <BLEPLAT_CNTR_SmGetMode>
10065314:	990d      	ldr	r1, [sp, #52]	@ 0x34
10065316:	6809      	ldr	r1, [r1, #0]
10065318:	2800      	cmp	r0, #0
1006531a:	d005      	beq.n	10065328 <__arm_cp.0_5+0x128>
1006531c:	0748      	lsls	r0, r1, #29
1006531e:	d405      	bmi.n	1006532c <__arm_cp.0_5+0x12c>
10065320:	4628      	mov	r0, r5
10065322:	f7e2 f906 	bl	10047532 <BLEPLAT_CNTR_SmEncOff>
10065326:	e004      	b.n	10065332 <__arm_cp.0_5+0x132>
10065328:	0708      	lsls	r0, r1, #28
1006532a:	d5f9      	bpl.n	10065320 <__arm_cp.0_5+0x120>
1006532c:	4628      	mov	r0, r5
1006532e:	f7e2 f914 	bl	1004755a <BLEPLAT_CNTR_SmEncOn>
10065332:	2e00      	cmp	r6, #0
10065334:	d01f      	beq.n	10065376 <__arm_cp.0_5+0x176>
10065336:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10065338:	68f5      	ldr	r5, [r6, #12]
1006533a:	2d00      	cmp	r5, #0
1006533c:	d017      	beq.n	1006536e <__arm_cp.0_5+0x16e>
1006533e:	9409      	str	r4, [sp, #36]	@ 0x24
10065340:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10065342:	7d60      	ldrb	r0, [r4, #21]
10065344:	f7e2 f980 	bl	10047648 <BLEPLAT_CNTR_SmGetEncKeyPtr>
10065348:	4602      	mov	r2, r0
1006534a:	4629      	mov	r1, r5
1006534c:	3110      	adds	r1, #16
1006534e:	2301      	movs	r3, #1
10065350:	4628      	mov	r0, r5
10065352:	f7fd f9d6 	bl	10062702 <BLEPLAT_aes128_encrypt>
10065356:	7d60      	ldrb	r0, [r4, #21]
10065358:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1006535a:	f7e2 f961 	bl	10047620 <BLEPLAT_CNTR_SmGetEncIvPtr>
1006535e:	4601      	mov	r1, r0
10065360:	3520      	adds	r5, #32
10065362:	2208      	movs	r2, #8
10065364:	4628      	mov	r0, r5
10065366:	f7fd f821 	bl	100623ac <char_copy>
1006536a:	2000      	movs	r0, #0
1006536c:	60f0      	str	r0, [r6, #12]
1006536e:	4638      	mov	r0, r7
10065370:	f7f9 fa0c 	bl	1005e78c <LL_sched_engine>
10065374:	e001      	b.n	1006537a <__arm_cp.0_5+0x17a>
10065376:	f7e1 fe6e 	bl	10047056 <BLEPLAT_CNTR_GlobEnableBlue>
1006537a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1006537c:	2800      	cmp	r0, #0
1006537e:	d10c      	bne.n	1006539a <__arm_cp.0_5+0x19a>
10065380:	f7e0 fe5e 	bl	10046040 <BLEPLAT_CalculateRSSI>
10065384:	287f      	cmp	r0, #127	@ 0x7f
10065386:	d005      	beq.n	10065394 <__arm_cp.0_5+0x194>
10065388:	4605      	mov	r5, r0
1006538a:	f7f9 f8fd 	bl	1005e588 <get_rf_rx_path_compensation_db>
1006538e:	1828      	adds	r0, r5, r0
10065390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10065392:	7008      	strb	r0, [r1, #0]
10065394:	4620      	mov	r0, r4
10065396:	f7f6 ff86 	bl	1005c2a6 <LLC_pcl_update_avg_rssi_ucfg_weak>
1006539a:	2401      	movs	r4, #1
1006539c:	4620      	mov	r0, r4
1006539e:	f7fc fea5 	bl	100620ec <tsk_signal_resource_idx>
100653a2:	f7de fd7c 	bl	10043e9e <BLE_STACK_ProcessRequest>
100653a6:	4620      	mov	r0, r4
100653a8:	b019      	add	sp, #100	@ 0x64
100653aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100653ac:	20fc      	movs	r0, #252	@ 0xfc
100653ae:	9904      	ldr	r1, [sp, #16]
100653b0:	4238      	tst	r0, r7
100653b2:	d00d      	beq.n	100653d0 <__arm_cp.0_5+0x1d0>
100653b4:	7848      	ldrb	r0, [r1, #1]
100653b6:	1f00      	subs	r0, r0, #4
100653b8:	7048      	strb	r0, [r1, #1]
100653ba:	2002      	movs	r0, #2
100653bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100653be:	7188      	strb	r0, [r1, #6]
100653c0:	2013      	movs	r0, #19
100653c2:	f7fc fe6b 	bl	1006209c <tsk_notify_idx>
100653c6:	f7de fd6a 	bl	10043e9e <BLE_STACK_ProcessRequest>
100653ca:	a80e      	add	r0, sp, #56	@ 0x38
100653cc:	7d40      	ldrb	r0, [r0, #21]
100653ce:	9002      	str	r0, [sp, #8]
100653d0:	9802      	ldr	r0, [sp, #8]
100653d2:	2803      	cmp	r0, #3
100653d4:	d110      	bne.n	100653f8 <__arm_cp.0_5+0x1f8>
100653d6:	a80e      	add	r0, sp, #56	@ 0x38
100653d8:	7dc5      	ldrb	r5, [r0, #23]
100653da:	2d02      	cmp	r5, #2
100653dc:	d118      	bne.n	10065410 <__arm_cp.0_5+0x210>
100653de:	9811      	ldr	r0, [sp, #68]	@ 0x44
100653e0:	7840      	ldrb	r0, [r0, #1]
100653e2:	2802      	cmp	r0, #2
100653e4:	d114      	bne.n	10065410 <__arm_cp.0_5+0x210>
100653e6:	a80e      	add	r0, sp, #56	@ 0x38
100653e8:	2101      	movs	r1, #1
100653ea:	7701      	strb	r1, [r0, #28]
100653ec:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
100653ee:	6828      	ldr	r0, [r5, #0]
100653f0:	2102      	movs	r1, #2
100653f2:	4301      	orrs	r1, r0
100653f4:	6029      	str	r1, [r5, #0]
100653f6:	e043      	b.n	10065480 <__arm_cp.0_5+0x280>
100653f8:	980c      	ldr	r0, [sp, #48]	@ 0x30
100653fa:	7800      	ldrb	r0, [r0, #0]
100653fc:	2803      	cmp	r0, #3
100653fe:	d118      	bne.n	10065432 <__arm_cp.0_5+0x232>
10065400:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10065402:	7a00      	ldrb	r0, [r0, #8]
10065404:	2800      	cmp	r0, #0
10065406:	d014      	beq.n	10065432 <__arm_cp.0_5+0x232>
10065408:	2002      	movs	r0, #2
1006540a:	9910      	ldr	r1, [sp, #64]	@ 0x40
1006540c:	4301      	orrs	r1, r0
1006540e:	e04f      	b.n	100654b0 <__arm_cp.0_5+0x2b0>
10065410:	4620      	mov	r0, r4
10065412:	f7f3 fb4c 	bl	10058aae <llc_conn_get_rx_ctrl_pdu_full>
10065416:	2800      	cmp	r0, #0
10065418:	d021      	beq.n	1006545e <__arm_cp.0_5+0x25e>
1006541a:	980c      	ldr	r0, [sp, #48]	@ 0x30
1006541c:	7d40      	ldrb	r0, [r0, #21]
1006541e:	f7e2 fb99 	bl	10047b54 <BLEPLAT_CNTR_SmToggleNesn>
10065422:	2e00      	cmp	r6, #0
10065424:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10065426:	d02b      	beq.n	10065480 <__arm_cp.0_5+0x280>
10065428:	980c      	ldr	r0, [sp, #48]	@ 0x30
1006542a:	7d40      	ldrb	r0, [r0, #21]
1006542c:	f000 fa6b 	bl	10065906 <llc_conn_decrement_enc_count_rx>
10065430:	e026      	b.n	10065480 <__arm_cp.0_5+0x280>
10065432:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065434:	9005      	str	r0, [sp, #20]
10065436:	7847      	ldrb	r7, [r0, #1]
10065438:	f7f2 fbc9 	bl	10057bce <data_length_extension_csr_ucfg_weak>
1006543c:	2801      	cmp	r0, #1
1006543e:	d001      	beq.n	10065444 <__arm_cp.0_5+0x244>
10065440:	261f      	movs	r6, #31
10065442:	e000      	b.n	10065446 <__arm_cp.0_5+0x246>
10065444:	26ff      	movs	r6, #255	@ 0xff
10065446:	403e      	ands	r6, r7
10065448:	d01f      	beq.n	1006548a <__arm_cp.0_5+0x28a>
1006544a:	9803      	ldr	r0, [sp, #12]
1006544c:	6720      	str	r0, [r4, #112]	@ 0x70
1006544e:	f7ed fd3b 	bl	10052ec8 <isr_Acl_Data_Indication_Queue_Full>
10065452:	2800      	cmp	r0, #0
10065454:	d01d      	beq.n	10065492 <__arm_cp.0_5+0x292>
10065456:	2002      	movs	r0, #2
10065458:	9010      	str	r0, [sp, #64]	@ 0x40
1006545a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
1006545c:	e02c      	b.n	100654b8 <__arm_cp.0_5+0x2b8>
1006545e:	980c      	ldr	r0, [sp, #48]	@ 0x30
10065460:	7800      	ldrb	r0, [r0, #0]
10065462:	2803      	cmp	r0, #3
10065464:	d108      	bne.n	10065478 <__arm_cp.0_5+0x278>
10065466:	2d27      	cmp	r5, #39	@ 0x27
10065468:	d106      	bne.n	10065478 <__arm_cp.0_5+0x278>
1006546a:	9811      	ldr	r0, [sp, #68]	@ 0x44
1006546c:	7840      	ldrb	r0, [r0, #1]
1006546e:	280b      	cmp	r0, #11
10065470:	d102      	bne.n	10065478 <__arm_cp.0_5+0x278>
10065472:	a80e      	add	r0, sp, #56	@ 0x38
10065474:	2101      	movs	r1, #1
10065476:	7741      	strb	r1, [r0, #29]
10065478:	a80e      	add	r0, sp, #56	@ 0x38
1006547a:	2101      	movs	r1, #1
1006547c:	7641      	strb	r1, [r0, #25]
1006547e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10065480:	6828      	ldr	r0, [r5, #0]
10065482:	2180      	movs	r1, #128	@ 0x80
10065484:	4301      	orrs	r1, r0
10065486:	6029      	str	r1, [r5, #0]
10065488:	e001      	b.n	1006548e <__arm_cp.0_5+0x28e>
1006548a:	9803      	ldr	r0, [sp, #12]
1006548c:	9010      	str	r0, [sp, #64]	@ 0x40
1006548e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
10065490:	e016      	b.n	100654c0 <__arm_cp.0_5+0x2c0>
10065492:	9805      	ldr	r0, [sp, #20]
10065494:	7800      	ldrb	r0, [r0, #0]
10065496:	0680      	lsls	r0, r0, #26
10065498:	0fc0      	lsrs	r0, r0, #31
1006549a:	1832      	adds	r2, r6, r0
1006549c:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
1006549e:	4628      	mov	r0, r5
100654a0:	f7ed fdea 	bl	10053078 <ACL_pkt_get>
100654a4:	6720      	str	r0, [r4, #112]	@ 0x70
100654a6:	2800      	cmp	r0, #0
100654a8:	d001      	beq.n	100654ae <__arm_cp.0_5+0x2ae>
100654aa:	4629      	mov	r1, r5
100654ac:	e000      	b.n	100654b0 <__arm_cp.0_5+0x2b0>
100654ae:	2102      	movs	r1, #2
100654b0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
100654b2:	9110      	str	r1, [sp, #64]	@ 0x40
100654b4:	0788      	lsls	r0, r1, #30
100654b6:	d503      	bpl.n	100654c0 <__arm_cp.0_5+0x2c0>
100654b8:	980c      	ldr	r0, [sp, #48]	@ 0x30
100654ba:	7d40      	ldrb	r0, [r0, #21]
100654bc:	f7e2 fb4a 	bl	10047b54 <BLEPLAT_CNTR_SmToggleNesn>
100654c0:	9811      	ldr	r0, [sp, #68]	@ 0x44
100654c2:	7800      	ldrb	r0, [r0, #0]
100654c4:	8aa9      	ldrh	r1, [r5, #20]
100654c6:	82e9      	strh	r1, [r5, #22]
100654c8:	2120      	movs	r1, #32
100654ca:	4001      	ands	r1, r0
100654cc:	a80e      	add	r0, sp, #56	@ 0x38
100654ce:	7581      	strb	r1, [r0, #22]
100654d0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
100654d2:	2101      	movs	r1, #1
100654d4:	4620      	mov	r0, r4
100654d6:	9104      	str	r1, [sp, #16]
100654d8:	f7f3 fad8 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
100654dc:	4607      	mov	r7, r0
100654de:	4620      	mov	r0, r4
100654e0:	3028      	adds	r0, #40	@ 0x28
100654e2:	9005      	str	r0, [sp, #20]
100654e4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
100654e6:	2b00      	cmp	r3, #0
100654e8:	d010      	beq.n	1006550c <__arm_cp.0_5+0x30c>
100654ea:	7a18      	ldrb	r0, [r3, #8]
100654ec:	0700      	lsls	r0, r0, #28
100654ee:	d50d      	bpl.n	1006550c <__arm_cp.0_5+0x30c>
100654f0:	69d8      	ldr	r0, [r3, #28]
100654f2:	2800      	cmp	r0, #0
100654f4:	d00a      	beq.n	1006550c <__arm_cp.0_5+0x30c>
100654f6:	42be      	cmp	r6, r7
100654f8:	d008      	beq.n	1006550c <__arm_cp.0_5+0x30c>
100654fa:	9805      	ldr	r0, [sp, #20]
100654fc:	4286      	cmp	r6, r0
100654fe:	d005      	beq.n	1006550c <__arm_cp.0_5+0x30c>
10065500:	990d      	ldr	r1, [sp, #52]	@ 0x34
10065502:	6808      	ldr	r0, [r1, #0]
10065504:	9a01      	ldr	r2, [sp, #4]
10065506:	4390      	bics	r0, r2
10065508:	6008      	str	r0, [r1, #0]
1006550a:	e003      	b.n	10065514 <__arm_cp.0_5+0x314>
1006550c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1006550e:	2800      	cmp	r0, #0
10065510:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065512:	d019      	beq.n	10065548 <__arm_cp.0_5+0x348>
10065514:	42be      	cmp	r6, r7
10065516:	d01a      	beq.n	1006554e <__arm_cp.0_5+0x34e>
10065518:	9f05      	ldr	r7, [sp, #20]
1006551a:	42be      	cmp	r6, r7
1006551c:	d027      	beq.n	1006556e <__arm_cp.0_5+0x36e>
1006551e:	6958      	ldr	r0, [r3, #20]
10065520:	6198      	str	r0, [r3, #24]
10065522:	7b19      	ldrb	r1, [r3, #12]
10065524:	9d03      	ldr	r5, [sp, #12]
10065526:	731d      	strb	r5, [r3, #12]
10065528:	8a1a      	ldrh	r2, [r3, #16]
1006552a:	1851      	adds	r1, r2, r1
1006552c:	8219      	strh	r1, [r3, #16]
1006552e:	b28a      	uxth	r2, r1
10065530:	461e      	mov	r6, r3
10065532:	885b      	ldrh	r3, [r3, #2]
10065534:	429a      	cmp	r2, r3
10065536:	d21c      	bcs.n	10065572 <__arm_cp.0_5+0x372>
10065538:	89f2      	ldrh	r2, [r6, #14]
1006553a:	1851      	adds	r1, r2, r1
1006553c:	06c9      	lsls	r1, r1, #27
1006553e:	9602      	str	r6, [sp, #8]
10065540:	d11a      	bne.n	10065578 <__arm_cp.0_5+0x378>
10065542:	6800      	ldr	r0, [r0, #0]
10065544:	61b0      	str	r0, [r6, #24]
10065546:	e017      	b.n	10065578 <__arm_cp.0_5+0x378>
10065548:	f7e1 fd85 	bl	10047056 <BLEPLAT_CNTR_GlobEnableBlue>
1006554c:	e0dd      	b.n	1006570a <__arm_cp.0_5+0x50a>
1006554e:	9302      	str	r3, [sp, #8]
10065550:	2103      	movs	r1, #3
10065552:	4620      	mov	r0, r4
10065554:	f7f3 fd5e 	bl	10059014 <llc_conn_set_tx_ctrl_pdu_state>
10065558:	4620      	mov	r0, r4
1006555a:	f7e1 fe44 	bl	100471e6 <BLEPLAT_CNTR_PacketClrCteSamplingEn>
1006555e:	78b8      	ldrb	r0, [r7, #2]
10065560:	2827      	cmp	r0, #39	@ 0x27
10065562:	d102      	bne.n	1006556a <__arm_cp.0_5+0x36a>
10065564:	a80e      	add	r0, sp, #56	@ 0x38
10065566:	2101      	movs	r1, #1
10065568:	7741      	strb	r1, [r0, #29]
1006556a:	9f05      	ldr	r7, [sp, #20]
1006556c:	e007      	b.n	1006557e <__arm_cp.0_5+0x37e>
1006556e:	9302      	str	r3, [sp, #8]
10065570:	e005      	b.n	1006557e <__arm_cp.0_5+0x37e>
10065572:	69f6      	ldr	r6, [r6, #28]
10065574:	9602      	str	r6, [sp, #8]
10065576:	2504      	movs	r5, #4
10065578:	9810      	ldr	r0, [sp, #64]	@ 0x40
1006557a:	4328      	orrs	r0, r5
1006557c:	9010      	str	r0, [sp, #64]	@ 0x40
1006557e:	4620      	mov	r0, r4
10065580:	f7f3 faa1 	bl	10058ac6 <llc_conn_get_tx_acl_blocked>
10065584:	4605      	mov	r5, r0
10065586:	4620      	mov	r0, r4
10065588:	f7f3 faa3 	bl	10058ad2 <llc_conn_get_tx_ctrl_pdu_state>
1006558c:	a90e      	add	r1, sp, #56	@ 0x38
1006558e:	7f0e      	ldrb	r6, [r1, #28]
10065590:	2e00      	cmp	r6, #0
10065592:	d122      	bne.n	100655da <__arm_cp.0_5+0x3da>
10065594:	2801      	cmp	r0, #1
10065596:	d120      	bne.n	100655da <__arm_cp.0_5+0x3da>
10065598:	2601      	movs	r6, #1
1006559a:	4620      	mov	r0, r4
1006559c:	4631      	mov	r1, r6
1006559e:	f7f3 fa75 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
100655a2:	4607      	mov	r7, r0
100655a4:	4620      	mov	r0, r4
100655a6:	4639      	mov	r1, r7
100655a8:	f7e1 fe85 	bl	100472b6 <BLEPLAT_CNTR_PacketSetDataPtr>
100655ac:	7838      	ldrb	r0, [r7, #0]
100655ae:	0680      	lsls	r0, r0, #26
100655b0:	d41f      	bmi.n	100655f2 <__arm_cp.0_5+0x3f2>
100655b2:	78b8      	ldrb	r0, [r7, #2]
100655b4:	2827      	cmp	r0, #39	@ 0x27
100655b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100655b8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100655ba:	d047      	beq.n	1006564c <__arm_cp.0_5+0x44c>
100655bc:	2802      	cmp	r0, #2
100655be:	d14b      	bne.n	10065658 <__arm_cp.0_5+0x458>
100655c0:	990d      	ldr	r1, [sp, #52]	@ 0x34
100655c2:	6808      	ldr	r0, [r1, #0]
100655c4:	4330      	orrs	r0, r6
100655c6:	6008      	str	r0, [r1, #0]
100655c8:	7d68      	ldrb	r0, [r5, #21]
100655ca:	211f      	movs	r1, #31
100655cc:	460a      	mov	r2, r1
100655ce:	f7f9 faa3 	bl	1005eb18 <LL_sched_set_priority>
100655d2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
100655d4:	9907      	ldr	r1, [sp, #28]
100655d6:	6008      	str	r0, [r1, #0]
100655d8:	e03e      	b.n	10065658 <__arm_cp.0_5+0x458>
100655da:	f7ed fc83 	bl	10052ee4 <isr_Acl_Data_TX_Cmpl_Queue_Full>
100655de:	2800      	cmp	r0, #0
100655e0:	d014      	beq.n	1006560c <__arm_cp.0_5+0x40c>
100655e2:	f7e1 fd38 	bl	10047056 <BLEPLAT_CNTR_GlobEnableBlue>
100655e6:	980e      	ldr	r0, [sp, #56]	@ 0x38
100655e8:	2800      	cmp	r0, #0
100655ea:	d007      	beq.n	100655fc <__arm_cp.0_5+0x3fc>
100655ec:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100655ee:	9804      	ldr	r0, [sp, #16]
100655f0:	e006      	b.n	10065600 <__arm_cp.0_5+0x400>
100655f2:	4620      	mov	r0, r4
100655f4:	f7e1 fe52 	bl	1004729c <BLEPLAT_CNTR_PacketSetCteSamplingEn>
100655f8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100655fa:	e02d      	b.n	10065658 <__arm_cp.0_5+0x458>
100655fc:	2011      	movs	r0, #17
100655fe:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065600:	8520      	strh	r0, [r4, #40]	@ 0x28
10065602:	4620      	mov	r0, r4
10065604:	4639      	mov	r1, r7
10065606:	f7e1 fe56 	bl	100472b6 <BLEPLAT_CNTR_PacketSetDataPtr>
1006560a:	e073      	b.n	100656f4 <__arm_cp.0_5+0x4f4>
1006560c:	9802      	ldr	r0, [sp, #8]
1006560e:	2800      	cmp	r0, #0
10065610:	d0e7      	beq.n	100655e2 <__arm_cp.0_5+0x3e2>
10065612:	2d01      	cmp	r5, #1
10065614:	d0e5      	beq.n	100655e2 <__arm_cp.0_5+0x3e2>
10065616:	2e01      	cmp	r6, #1
10065618:	d0e3      	beq.n	100655e2 <__arm_cp.0_5+0x3e2>
1006561a:	f7e1 fd1c 	bl	10047056 <BLEPLAT_CNTR_GlobEnableBlue>
1006561e:	487c      	ldr	r0, [pc, #496]	@ (10065810 <__arm_cp.0_2>)
10065620:	6800      	ldr	r0, [r0, #0]
10065622:	218c      	movs	r1, #140	@ 0x8c
10065624:	5840      	ldr	r0, [r0, r1]
10065626:	9d02      	ldr	r5, [sp, #8]
10065628:	8a29      	ldrh	r1, [r5, #16]
1006562a:	89ea      	ldrh	r2, [r5, #14]
1006562c:	1851      	adds	r1, r2, r1
1006562e:	221f      	movs	r2, #31
10065630:	400a      	ands	r2, r1
10065632:	1810      	adds	r0, r2, r0
10065634:	1c87      	adds	r7, r0, #2
10065636:	4620      	mov	r0, r4
10065638:	4639      	mov	r1, r7
1006563a:	f7e1 fe3c 	bl	100472b6 <BLEPLAT_CNTR_PacketSetDataPtr>
1006563e:	4620      	mov	r0, r4
10065640:	4629      	mov	r1, r5
10065642:	f7f3 f979 	bl	10058938 <llc_conn_copy_tx_data_packet>
10065646:	6765      	str	r5, [r4, #116]	@ 0x74
10065648:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1006564a:	e053      	b.n	100656f4 <__arm_cp.0_5+0x4f4>
1006564c:	7da8      	ldrb	r0, [r5, #22]
1006564e:	7178      	strb	r0, [r7, #5]
10065650:	7de8      	ldrb	r0, [r5, #23]
10065652:	71b8      	strb	r0, [r7, #6]
10065654:	2000      	movs	r0, #0
10065656:	8288      	strh	r0, [r1, #20]
10065658:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006565a:	6880      	ldr	r0, [r0, #8]
1006565c:	6800      	ldr	r0, [r0, #0]
1006565e:	0701      	lsls	r1, r0, #28
10065660:	d417      	bmi.n	10065692 <__arm_cp.0_5+0x492>
10065662:	0680      	lsls	r0, r0, #26
10065664:	d511      	bpl.n	1006568a <__arm_cp.0_5+0x48a>
10065666:	7d68      	ldrb	r0, [r5, #21]
10065668:	f7e1 ff63 	bl	10047532 <BLEPLAT_CNTR_SmEncOff>
1006566c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1006566e:	6898      	ldr	r0, [r3, #8]
10065670:	6801      	ldr	r1, [r0, #0]
10065672:	2220      	movs	r2, #32
10065674:	4391      	bics	r1, r2
10065676:	6001      	str	r1, [r0, #0]
10065678:	6818      	ldr	r0, [r3, #0]
1006567a:	2104      	movs	r1, #4
1006567c:	4388      	bics	r0, r1
1006567e:	6018      	str	r0, [r3, #0]
10065680:	2013      	movs	r0, #19
10065682:	f7fc fd0b 	bl	1006209c <tsk_notify_idx>
10065686:	f7de fc0a 	bl	10043e9e <BLE_STACK_ProcessRequest>
1006568a:	f7e1 fce4 	bl	10047056 <BLEPLAT_CNTR_GlobEnableBlue>
1006568e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10065690:	e020      	b.n	100656d4 <__arm_cp.0_5+0x4d4>
10065692:	2000      	movs	r0, #0
10065694:	9017      	str	r0, [sp, #92]	@ 0x5c
10065696:	9016      	str	r0, [sp, #88]	@ 0x58
10065698:	7d68      	ldrb	r0, [r5, #21]
1006569a:	f7e1 ff5e 	bl	1004755a <BLEPLAT_CNTR_SmEncOn>
1006569e:	7d68      	ldrb	r0, [r5, #21]
100656a0:	a916      	add	r1, sp, #88	@ 0x58
100656a2:	f7e2 f9af 	bl	10047a04 <BLEPLAT_CNTR_SmSetTxCount>
100656a6:	7828      	ldrb	r0, [r5, #0]
100656a8:	2802      	cmp	r0, #2
100656aa:	d102      	bne.n	100656b2 <__arm_cp.0_5+0x4b2>
100656ac:	7d68      	ldrb	r0, [r5, #21]
100656ae:	f7e2 f9c5 	bl	10047a3c <BLEPLAT_CNTR_SmSetTxCountDirectionBit>
100656b2:	f7e1 fcd0 	bl	10047056 <BLEPLAT_CNTR_GlobEnableBlue>
100656b6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
100656b8:	68a8      	ldr	r0, [r5, #8]
100656ba:	6801      	ldr	r1, [r0, #0]
100656bc:	2208      	movs	r2, #8
100656be:	4391      	bics	r1, r2
100656c0:	6001      	str	r1, [r0, #0]
100656c2:	6828      	ldr	r0, [r5, #0]
100656c4:	2104      	movs	r1, #4
100656c6:	4301      	orrs	r1, r0
100656c8:	6029      	str	r1, [r5, #0]
100656ca:	2013      	movs	r0, #19
100656cc:	f7fc fce6 	bl	1006209c <tsk_notify_idx>
100656d0:	f7de fbe5 	bl	10043e9e <BLE_STACK_ProcessRequest>
100656d4:	2102      	movs	r1, #2
100656d6:	4620      	mov	r0, r4
100656d8:	f7f3 fc9c 	bl	10059014 <llc_conn_set_tx_ctrl_pdu_state>
100656dc:	68a8      	ldr	r0, [r5, #8]
100656de:	6801      	ldr	r1, [r0, #0]
100656e0:	074a      	lsls	r2, r1, #29
100656e2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100656e4:	d506      	bpl.n	100656f4 <__arm_cp.0_5+0x4f4>
100656e6:	2204      	movs	r2, #4
100656e8:	4391      	bics	r1, r2
100656ea:	6001      	str	r1, [r0, #0]
100656ec:	9908      	ldr	r1, [sp, #32]
100656ee:	8808      	ldrh	r0, [r1, #0]
100656f0:	4330      	orrs	r0, r6
100656f2:	8008      	strh	r0, [r1, #0]
100656f4:	2101      	movs	r1, #1
100656f6:	4620      	mov	r0, r4
100656f8:	f7f3 f9ce 	bl	10058a98 <llc_conn_get_enc_on>
100656fc:	2801      	cmp	r0, #1
100656fe:	d104      	bne.n	1006570a <__arm_cp.0_5+0x50a>
10065700:	7878      	ldrb	r0, [r7, #1]
10065702:	2800      	cmp	r0, #0
10065704:	d001      	beq.n	1006570a <__arm_cp.0_5+0x50a>
10065706:	1d00      	adds	r0, r0, #4
10065708:	7078      	strb	r0, [r7, #1]
1006570a:	9810      	ldr	r0, [sp, #64]	@ 0x40
1006570c:	0781      	lsls	r1, r0, #30
1006570e:	990d      	ldr	r1, [sp, #52]	@ 0x34
10065710:	d506      	bpl.n	10065720 <__arm_cp.0_5+0x520>
10065712:	7809      	ldrb	r1, [r1, #0]
10065714:	0709      	lsls	r1, r1, #28
10065716:	d503      	bpl.n	10065720 <__arm_cp.0_5+0x520>
10065718:	7d68      	ldrb	r0, [r5, #21]
1006571a:	f000 f8f4 	bl	10065906 <llc_conn_decrement_enc_count_rx>
1006571e:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065720:	0741      	lsls	r1, r0, #29
10065722:	d506      	bpl.n	10065732 <__arm_cp.0_5+0x532>
10065724:	4620      	mov	r0, r4
10065726:	3078      	adds	r0, #120	@ 0x78
10065728:	f7fc fed4 	bl	100624d4 <ACL_list_remove_head>
1006572c:	f7ed fc04 	bl	10052f38 <Acl_Tx_Cmpl_Pkt_Handler>
10065730:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065732:	07c0      	lsls	r0, r0, #31
10065734:	d026      	beq.n	10065784 <__arm_cp.0_5+0x584>
10065736:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065738:	7845      	ldrb	r5, [r0, #1]
1006573a:	f7f2 fa48 	bl	10057bce <data_length_extension_csr_ucfg_weak>
1006573e:	2801      	cmp	r0, #1
10065740:	d001      	beq.n	10065746 <__arm_cp.0_5+0x546>
10065742:	221f      	movs	r2, #31
10065744:	e000      	b.n	10065748 <__arm_cp.0_5+0x548>
10065746:	22ff      	movs	r2, #255	@ 0xff
10065748:	402a      	ands	r2, r5
1006574a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
1006574c:	8042      	strh	r2, [r0, #2]
1006574e:	9911      	ldr	r1, [sp, #68]	@ 0x44
10065750:	780b      	ldrb	r3, [r1, #0]
10065752:	069b      	lsls	r3, r3, #26
10065754:	d402      	bmi.n	1006575c <__arm_cp.0_5+0x55c>
10065756:	2300      	movs	r3, #0
10065758:	7303      	strb	r3, [r0, #12]
1006575a:	e002      	b.n	10065762 <__arm_cp.0_5+0x562>
1006575c:	2301      	movs	r3, #1
1006575e:	7303      	strb	r3, [r0, #12]
10065760:	1c52      	adds	r2, r2, #1
10065762:	6840      	ldr	r0, [r0, #4]
10065764:	1c89      	adds	r1, r1, #2
10065766:	f7f9 fd6d 	bl	1005f244 <Mem_Buff_block_write>
1006576a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
1006576c:	2500      	movs	r5, #0
1006576e:	61c5      	str	r5, [r0, #28]
10065770:	9911      	ldr	r1, [sp, #68]	@ 0x44
10065772:	7809      	ldrb	r1, [r1, #0]
10065774:	2203      	movs	r2, #3
10065776:	400a      	ands	r2, r1
10065778:	7a01      	ldrb	r1, [r0, #8]
1006577a:	4311      	orrs	r1, r2
1006577c:	7201      	strb	r1, [r0, #8]
1006577e:	f7ed fbbf 	bl	10052f00 <Acl_Rcv_Pkt_Handler>
10065782:	6725      	str	r5, [r4, #112]	@ 0x70
10065784:	a80e      	add	r0, sp, #56	@ 0x38
10065786:	7e40      	ldrb	r0, [r0, #25]
10065788:	2801      	cmp	r0, #1
1006578a:	d131      	bne.n	100657f0 <__arm_cp.0_5+0x5f0>
1006578c:	2100      	movs	r1, #0
1006578e:	4620      	mov	r0, r4
10065790:	f7f3 f97c 	bl	10058a8c <llc_conn_get_ctrl_pdu_data_p>
10065794:	4606      	mov	r6, r0
10065796:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065798:	7801      	ldrb	r1, [r0, #0]
1006579a:	7840      	ldrb	r0, [r0, #1]
1006579c:	0200      	lsls	r0, r0, #8
1006579e:	1840      	adds	r0, r0, r1
100657a0:	8030      	strh	r0, [r6, #0]
100657a2:	f7f5 fab3 	bl	1005ad0c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100657a6:	4605      	mov	r5, r0
100657a8:	f7f5 faa6 	bl	1005acf8 <cis_csr_ucfg_weak>
100657ac:	4328      	orrs	r0, r5
100657ae:	b2c0      	uxtb	r0, r0
100657b0:	f7f8 ff06 	bl	1005e5c0 <LL_get_control_pdu_size>
100657b4:	a90e      	add	r1, sp, #56	@ 0x38
100657b6:	7d89      	ldrb	r1, [r1, #22]
100657b8:	2920      	cmp	r1, #32
100657ba:	d001      	beq.n	100657c0 <__arm_cp.0_5+0x5c0>
100657bc:	2102      	movs	r1, #2
100657be:	e000      	b.n	100657c2 <__arm_cp.0_5+0x5c2>
100657c0:	2103      	movs	r1, #3
100657c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
100657c4:	1851      	adds	r1, r2, r1
100657c6:	1f00      	subs	r0, r0, #4
100657c8:	b2c3      	uxtb	r3, r0
100657ca:	7852      	ldrb	r2, [r2, #1]
100657cc:	429a      	cmp	r2, r3
100657ce:	d300      	bcc.n	100657d2 <__arm_cp.0_5+0x5d2>
100657d0:	4602      	mov	r2, r0
100657d2:	b2d2      	uxtb	r2, r2
100657d4:	1cb0      	adds	r0, r6, #2
100657d6:	f7e0 fb4f 	bl	10045e78 <BLEPLAT_MemCpy>
100657da:	980d      	ldr	r0, [sp, #52]	@ 0x34
100657dc:	6840      	ldr	r0, [r0, #4]
100657de:	6801      	ldr	r1, [r0, #0]
100657e0:	2201      	movs	r2, #1
100657e2:	430a      	orrs	r2, r1
100657e4:	6002      	str	r2, [r0, #0]
100657e6:	2015      	movs	r0, #21
100657e8:	f7fc fc58 	bl	1006209c <tsk_notify_idx>
100657ec:	f7de fb57 	bl	10043e9e <BLE_STACK_ProcessRequest>
100657f0:	ad0e      	add	r5, sp, #56	@ 0x38
100657f2:	4620      	mov	r0, r4
100657f4:	4629      	mov	r1, r5
100657f6:	f000 f80d 	bl	10065814 <llc_conn_check_subrate_and_set_params_ucfg_weak>
100657fa:	7da8      	ldrb	r0, [r5, #22]
100657fc:	2820      	cmp	r0, #32
100657fe:	d000      	beq.n	10065802 <__arm_cp.0_5+0x602>
10065800:	e480      	b.n	10065104 <llc_conn_isr+0x310>
10065802:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065804:	7880      	ldrb	r0, [r0, #2]
10065806:	0981      	lsrs	r1, r0, #6
10065808:	4620      	mov	r0, r4
1006580a:	f7f5 fe46 	bl	1005b49a <llc_cte_process_rx_cte_ucfg_weak>
1006580e:	e479      	b.n	10065104 <llc_conn_isr+0x310>

10065810 <__arm_cp.0_2>:
10065810:	20001174 	.word	0x20001174

10065814 <llc_conn_check_subrate_and_set_params_ucfg_weak>:
10065814:	4770      	bx	lr

10065816 <llc_conn_close_event>:
10065816:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10065818:	4604      	mov	r4, r0
1006581a:	20f0      	movs	r0, #240	@ 0xf0
1006581c:	5820      	ldr	r0, [r4, r0]
1006581e:	4627      	mov	r7, r4
10065820:	3742      	adds	r7, #66	@ 0x42
10065822:	2800      	cmp	r0, #0
10065824:	d002      	beq.n	1006582c <llc_conn_close_event+0x16>
10065826:	8881      	ldrh	r1, [r0, #4]
10065828:	1c49      	adds	r1, r1, #1
1006582a:	8081      	strh	r1, [r0, #4]
1006582c:	4625      	mov	r5, r4
1006582e:	3580      	adds	r5, #128	@ 0x80
10065830:	4620      	mov	r0, r4
10065832:	f7f5 faf5 	bl	1005ae20 <llc_subrate_update_cont_counter_ucfg_weak>
10065836:	6c60      	ldr	r0, [r4, #68]	@ 0x44
10065838:	9001      	str	r0, [sp, #4]
1006583a:	883e      	ldrh	r6, [r7, #0]
1006583c:	4620      	mov	r0, r4
1006583e:	f7f3 f8c1 	bl	100589c4 <llc_conn_enhanced_get_latency>
10065842:	4602      	mov	r2, r0
10065844:	4620      	mov	r0, r4
10065846:	4631      	mov	r1, r6
10065848:	f7f3 fbf5 	bl	10059036 <llc_conn_calc_skip_ucfg_weak>
1006584c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
1006584e:	4342      	muls	r2, r0
10065850:	6c61      	ldr	r1, [r4, #68]	@ 0x44
10065852:	1889      	adds	r1, r1, r2
10065854:	6461      	str	r1, [r4, #68]	@ 0x44
10065856:	9000      	str	r0, [sp, #0]
10065858:	1830      	adds	r0, r6, r0
1006585a:	9002      	str	r0, [sp, #8]
1006585c:	b286      	uxth	r6, r0
1006585e:	8838      	ldrh	r0, [r7, #0]
10065860:	42b0      	cmp	r0, r6
10065862:	d906      	bls.n	10065872 <llc_conn_close_event+0x5c>
10065864:	4620      	mov	r0, r4
10065866:	30fe      	adds	r0, #254	@ 0xfe
10065868:	8800      	ldrh	r0, [r0, #0]
1006586a:	4621      	mov	r1, r4
1006586c:	31fc      	adds	r1, #252	@ 0xfc
1006586e:	f7f5 fad6 	bl	1005ae1e <llc_subrate_new_sr_base_event_ucfg_weak>
10065872:	6828      	ldr	r0, [r5, #0]
10065874:	2180      	movs	r1, #128	@ 0x80
10065876:	4388      	bics	r0, r1
10065878:	6028      	str	r0, [r5, #0]
1006587a:	4620      	mov	r0, r4
1006587c:	4631      	mov	r1, r6
1006587e:	f7f3 fc3f 	bl	10059100 <llc_conn_check_instant_and_set_params>
10065882:	4606      	mov	r6, r0
10065884:	9802      	ldr	r0, [sp, #8]
10065886:	8038      	strh	r0, [r7, #0]
10065888:	2e00      	cmp	r6, #0
1006588a:	d11a      	bne.n	100658c2 <llc_conn_close_event+0xac>
1006588c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1006588e:	9901      	ldr	r1, [sp, #4]
10065890:	1a47      	subs	r7, r0, r1
10065892:	4620      	mov	r0, r4
10065894:	4639      	mov	r1, r7
10065896:	f7f3 fcc5 	bl	10059224 <llc_conn_check_supervision_timer>
1006589a:	4606      	mov	r6, r0
1006589c:	2800      	cmp	r0, #0
1006589e:	d110      	bne.n	100658c2 <llc_conn_close_event+0xac>
100658a0:	2011      	movs	r0, #17
100658a2:	0100      	lsls	r0, r0, #4
100658a4:	1820      	adds	r0, r4, r0
100658a6:	4639      	mov	r1, r7
100658a8:	f7f4 fd31 	bl	1005a30e <llc_cpe_update_rsp_timer>
100658ac:	4606      	mov	r6, r0
100658ae:	2800      	cmp	r0, #0
100658b0:	d107      	bne.n	100658c2 <llc_conn_close_event+0xac>
100658b2:	4620      	mov	r0, r4
100658b4:	4639      	mov	r1, r7
100658b6:	9a00      	ldr	r2, [sp, #0]
100658b8:	f7f4 f908 	bl	10059acc <llc_conn_set_taskslot_params>
100658bc:	4606      	mov	r6, r0
100658be:	2800      	cmp	r0, #0
100658c0:	d00a      	beq.n	100658d8 <llc_conn_close_event+0xc2>
100658c2:	20c9      	movs	r0, #201	@ 0xc9
100658c4:	0040      	lsls	r0, r0, #1
100658c6:	1825      	adds	r5, r4, r0
100658c8:	4627      	mov	r7, r4
100658ca:	372d      	adds	r7, #45	@ 0x2d
100658cc:	7d38      	ldrb	r0, [r7, #20]
100658ce:	f7f9 f94d 	bl	1005eb6c <LL_sched_delete_taskslot>
100658d2:	703e      	strb	r6, [r7, #0]
100658d4:	2000      	movs	r0, #0
100658d6:	8028      	strh	r0, [r5, #0]
100658d8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
100658da:	2800      	cmp	r0, #0
100658dc:	d001      	beq.n	100658e2 <llc_conn_close_event+0xcc>
100658de:	69c6      	ldr	r6, [r0, #28]
100658e0:	e000      	b.n	100658e4 <llc_conn_close_event+0xce>
100658e2:	2600      	movs	r6, #0
100658e4:	3478      	adds	r4, #120	@ 0x78
100658e6:	2e00      	cmp	r6, #0
100658e8:	d00c      	beq.n	10065904 <llc_conn_close_event+0xee>
100658ea:	4635      	mov	r5, r6
100658ec:	69f6      	ldr	r6, [r6, #28]
100658ee:	7a28      	ldrb	r0, [r5, #8]
100658f0:	0700      	lsls	r0, r0, #28
100658f2:	d5f8      	bpl.n	100658e6 <llc_conn_close_event+0xd0>
100658f4:	4620      	mov	r0, r4
100658f6:	4629      	mov	r1, r5
100658f8:	f7fc fdd6 	bl	100624a8 <ACL_list_remove>
100658fc:	4628      	mov	r0, r5
100658fe:	f7ed fbdd 	bl	100530bc <ACL_pkt_release>
10065902:	e7f0      	b.n	100658e6 <llc_conn_close_event+0xd0>
10065904:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10065906 <llc_conn_decrement_enc_count_rx>:
10065906:	b51c      	push	{r2, r3, r4, lr}
10065908:	4604      	mov	r4, r0
1006590a:	4669      	mov	r1, sp
1006590c:	f7e1 fee3 	bl	100476d6 <BLEPLAT_CNTR_SmGetRxCount>
10065910:	9800      	ldr	r0, [sp, #0]
10065912:	1e41      	subs	r1, r0, #1
10065914:	9100      	str	r1, [sp, #0]
10065916:	2800      	cmp	r0, #0
10065918:	d102      	bne.n	10065920 <llc_conn_decrement_enc_count_rx+0x1a>
1006591a:	9801      	ldr	r0, [sp, #4]
1006591c:	1e40      	subs	r0, r0, #1
1006591e:	9001      	str	r0, [sp, #4]
10065920:	4669      	mov	r1, sp
10065922:	4620      	mov	r0, r4
10065924:	f7e1 fffa 	bl	1004791c <BLEPLAT_CNTR_SmSetRxCount>
10065928:	bd1c      	pop	{r2, r3, r4, pc}
	...

1006592c <llc_check_sreq_or_creq_tx_addr_res_off>:
1006592c:	b570      	push	{r4, r5, r6, lr}
1006592e:	b084      	sub	sp, #16
10065930:	4615      	mov	r5, r2
10065932:	460a      	mov	r2, r1
10065934:	4604      	mov	r4, r0
10065936:	2b00      	cmp	r3, #0
10065938:	d007      	beq.n	1006594a <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
1006593a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1006593c:	4282      	cmp	r2, r0
1006593e:	d11f      	bne.n	10065980 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
10065940:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10065942:	4068      	eors	r0, r5
10065944:	0200      	lsls	r0, r0, #8
10065946:	d11b      	bne.n	10065980 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
10065948:	e01b      	b.n	10065982 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1006594a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1006594c:	9908      	ldr	r1, [sp, #32]
1006594e:	2301      	movs	r3, #1
10065950:	2900      	cmp	r1, #0
10065952:	d002      	beq.n	1006595a <llc_check_sreq_or_creq_tx_addr_res_off+0x2e>
10065954:	4606      	mov	r6, r0
10065956:	401e      	ands	r6, r3
10065958:	d104      	bne.n	10065964 <llc_check_sreq_or_creq_tx_addr_res_off+0x38>
1006595a:	2900      	cmp	r1, #0
1006595c:	d111      	bne.n	10065982 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1006595e:	2102      	movs	r1, #2
10065960:	4008      	ands	r0, r1
10065962:	d00e      	beq.n	10065982 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10065964:	4808      	ldr	r0, [pc, #32]	@ (10065988 <__arm_cp.1_0>)
10065966:	6800      	ldr	r0, [r0, #0]
10065968:	2194      	movs	r1, #148	@ 0x94
1006596a:	5841      	ldr	r1, [r0, r1]
1006596c:	68c8      	ldr	r0, [r1, #12]
1006596e:	6909      	ldr	r1, [r1, #16]
10065970:	ae03      	add	r6, sp, #12
10065972:	9300      	str	r3, [sp, #0]
10065974:	9601      	str	r6, [sp, #4]
10065976:	462b      	mov	r3, r5
10065978:	f7fc fdc0 	bl	100624fc <addr8_list_search>
1006597c:	2800      	cmp	r0, #0
1006597e:	d100      	bne.n	10065982 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
10065980:	24ff      	movs	r4, #255	@ 0xff
10065982:	4620      	mov	r0, r4
10065984:	b004      	add	sp, #16
10065986:	bd70      	pop	{r4, r5, r6, pc}

10065988 <__arm_cp.1_0>:
10065988:	20001174 	.word	0x20001174

1006598c <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
1006598c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006598e:	b087      	sub	sp, #28
10065990:	1ecd      	subs	r5, r1, #3
10065992:	21ff      	movs	r1, #255	@ 0xff
10065994:	24fd      	movs	r4, #253	@ 0xfd
10065996:	4225      	tst	r5, r4
10065998:	d11c      	bne.n	100659d4 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1006599a:	2a00      	cmp	r2, #0
1006599c:	d01a      	beq.n	100659d4 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1006599e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
100659a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
100659a2:	680c      	ldr	r4, [r1, #0]
100659a4:	9405      	str	r4, [sp, #20]
100659a6:	9306      	str	r3, [sp, #24]
100659a8:	684b      	ldr	r3, [r1, #4]
100659aa:	c882      	ldmia	r0!, {r1, r7}
100659ac:	20ff      	movs	r0, #255	@ 0xff
100659ae:	0600      	lsls	r0, r0, #24
100659b0:	463c      	mov	r4, r7
100659b2:	4384      	bics	r4, r0
100659b4:	c612      	stmia	r6!, {r1, r4}
100659b6:	9303      	str	r3, [sp, #12]
100659b8:	9805      	ldr	r0, [sp, #20]
100659ba:	9002      	str	r0, [sp, #8]
100659bc:	9806      	ldr	r0, [sp, #24]
100659be:	9001      	str	r0, [sp, #4]
100659c0:	4268      	negs	r0, r5
100659c2:	4168      	adcs	r0, r5
100659c4:	9000      	str	r0, [sp, #0]
100659c6:	b2c8      	uxtb	r0, r1
100659c8:	0752      	lsls	r2, r2, #29
100659ca:	0fd3      	lsrs	r3, r2, #31
100659cc:	463a      	mov	r2, r7
100659ce:	f7ff ffad 	bl	1006592c <llc_check_sreq_or_creq_tx_addr_res_off>
100659d2:	4601      	mov	r1, r0
100659d4:	4608      	mov	r0, r1
100659d6:	b007      	add	sp, #28
100659d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100659dc <llc_wl_mem_allocate>:
100659dc:	b510      	push	{r4, lr}
100659de:	2401      	movs	r4, #1
100659e0:	4084      	lsls	r4, r0
100659e2:	2108      	movs	r1, #8
100659e4:	4620      	mov	r0, r4
100659e6:	f7f9 fab1 	bl	1005ef4c <csmem_mem_0_assign>
100659ea:	4903      	ldr	r1, [pc, #12]	@ (100659f8 <__arm_cp.0_0>)
100659ec:	6809      	ldr	r1, [r1, #0]
100659ee:	2294      	movs	r2, #148	@ 0x94
100659f0:	5889      	ldr	r1, [r1, r2]
100659f2:	744c      	strb	r4, [r1, #17]
100659f4:	60c8      	str	r0, [r1, #12]
100659f6:	bd10      	pop	{r4, pc}

100659f8 <__arm_cp.0_0>:
100659f8:	20001174 	.word	0x20001174

100659fc <llc_padv_mem_allocate_ucfg_weak>:
100659fc:	4770      	bx	lr

100659fe <llc_padv_init_ucfg_weak>:
100659fe:	4770      	bx	lr

10065a00 <llc_past_mem_allocate_ucfg_weak>:
10065a00:	4770      	bx	lr
	...

10065a04 <llc_priv_mem_allocate>:
10065a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065a06:	2800      	cmp	r0, #0
10065a08:	d046      	beq.n	10065a98 <llc_priv_mem_allocate+0x94>
10065a0a:	460e      	mov	r6, r1
10065a0c:	2501      	movs	r5, #1
10065a0e:	2168      	movs	r1, #104	@ 0x68
10065a10:	4628      	mov	r0, r5
10065a12:	f7f9 fa9b 	bl	1005ef4c <csmem_mem_0_assign>
10065a16:	4f21      	ldr	r7, [pc, #132]	@ (10065a9c <__arm_cp.0_0>)
10065a18:	6839      	ldr	r1, [r7, #0]
10065a1a:	2494      	movs	r4, #148	@ 0x94
10065a1c:	5909      	ldr	r1, [r1, r4]
10065a1e:	6088      	str	r0, [r1, #8]
10065a20:	40b5      	lsls	r5, r6
10065a22:	b2ee      	uxtb	r6, r5
10065a24:	2108      	movs	r1, #8
10065a26:	4630      	mov	r0, r6
10065a28:	f7f9 fa90 	bl	1005ef4c <csmem_mem_0_assign>
10065a2c:	6839      	ldr	r1, [r7, #0]
10065a2e:	5909      	ldr	r1, [r1, r4]
10065a30:	6889      	ldr	r1, [r1, #8]
10065a32:	724d      	strb	r5, [r1, #9]
10065a34:	6048      	str	r0, [r1, #4]
10065a36:	9600      	str	r6, [sp, #0]
10065a38:	0075      	lsls	r5, r6, #1
10065a3a:	2611      	movs	r6, #17
10065a3c:	2e21      	cmp	r6, #33	@ 0x21
10065a3e:	d00f      	beq.n	10065a60 <llc_priv_mem_allocate+0x5c>
10065a40:	2108      	movs	r1, #8
10065a42:	4628      	mov	r0, r5
10065a44:	f7f9 fa82 	bl	1005ef4c <csmem_mem_0_assign>
10065a48:	6839      	ldr	r1, [r7, #0]
10065a4a:	5909      	ldr	r1, [r1, r4]
10065a4c:	6889      	ldr	r1, [r1, #8]
10065a4e:	1989      	adds	r1, r1, r6
10065a50:	1f49      	subs	r1, r1, #5
10065a52:	6008      	str	r0, [r1, #0]
10065a54:	6838      	ldr	r0, [r7, #0]
10065a56:	5900      	ldr	r0, [r0, r4]
10065a58:	6880      	ldr	r0, [r0, #8]
10065a5a:	5585      	strb	r5, [r0, r6]
10065a5c:	3608      	adds	r6, #8
10065a5e:	e7ed      	b.n	10065a3c <llc_priv_mem_allocate+0x38>
10065a60:	2128      	movs	r1, #40	@ 0x28
10065a62:	9800      	ldr	r0, [sp, #0]
10065a64:	f7f9 fa72 	bl	1005ef4c <csmem_mem_0_assign>
10065a68:	6839      	ldr	r1, [r7, #0]
10065a6a:	5909      	ldr	r1, [r1, r4]
10065a6c:	6889      	ldr	r1, [r1, #8]
10065a6e:	6008      	str	r0, [r1, #0]
10065a70:	480b      	ldr	r0, [pc, #44]	@ (10065aa0 <__arm_cp.0_1>)
10065a72:	2502      	movs	r5, #2
10065a74:	2601      	movs	r6, #1
10065a76:	4629      	mov	r1, r5
10065a78:	4632      	mov	r2, r6
10065a7a:	f7f9 fa55 	bl	1005ef28 <csmem_mem_assign>
10065a7e:	6839      	ldr	r1, [r7, #0]
10065a80:	5909      	ldr	r1, [r1, r4]
10065a82:	6889      	ldr	r1, [r1, #8]
10065a84:	6488      	str	r0, [r1, #72]	@ 0x48
10065a86:	4806      	ldr	r0, [pc, #24]	@ (10065aa0 <__arm_cp.0_1>)
10065a88:	4631      	mov	r1, r6
10065a8a:	462a      	mov	r2, r5
10065a8c:	f7f9 fa4c 	bl	1005ef28 <csmem_mem_assign>
10065a90:	6839      	ldr	r1, [r7, #0]
10065a92:	5909      	ldr	r1, [r1, r4]
10065a94:	6889      	ldr	r1, [r1, #8]
10065a96:	64c8      	str	r0, [r1, #76]	@ 0x4c
10065a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065a9a:	46c0      	nop			@ (mov r8, r8)

10065a9c <__arm_cp.0_0>:
10065a9c:	20001174 	.word	0x20001174

10065aa0 <__arm_cp.0_1>:
10065aa0:	20001184 	.word	0x20001184

10065aa4 <llc_pscan_isr_ucfg_weak>:
10065aa4:	2000      	movs	r0, #0
10065aa6:	4770      	bx	lr

10065aa8 <llc_scan_isr_uncoded_ucfg_weak>:
10065aa8:	2000      	movs	r0, #0
10065aaa:	4770      	bx	lr

10065aac <llc_scan_isr_coded_ucfg_weak>:
10065aac:	2000      	movs	r0, #0
10065aae:	4770      	bx	lr

10065ab0 <smp_dep_gap_get_local_identity_address>:
10065ab0:	b580      	push	{r7, lr}
10065ab2:	4a0a      	ldr	r2, [pc, #40]	@ (10065adc <__arm_cp.0_0>)
10065ab4:	6812      	ldr	r2, [r2, #0]
10065ab6:	233d      	movs	r3, #61	@ 0x3d
10065ab8:	5cd2      	ldrb	r2, [r2, r3]
10065aba:	7002      	strb	r2, [r0, #0]
10065abc:	2a01      	cmp	r2, #1
10065abe:	d005      	beq.n	10065acc <smp_dep_gap_get_local_identity_address+0x1c>
10065ac0:	2a00      	cmp	r2, #0
10065ac2:	d108      	bne.n	10065ad6 <smp_dep_gap_get_local_identity_address+0x26>
10065ac4:	4608      	mov	r0, r1
10065ac6:	f7ee fe43 	bl	10054750 <GAP_get_public_address>
10065aca:	e002      	b.n	10065ad2 <smp_dep_gap_get_local_identity_address+0x22>
10065acc:	4608      	mov	r0, r1
10065ace:	f7ee fe49 	bl	10054764 <GAP_get_static_random_address>
10065ad2:	2000      	movs	r0, #0
10065ad4:	bd80      	pop	{r7, pc}
10065ad6:	2086      	movs	r0, #134	@ 0x86
10065ad8:	bd80      	pop	{r7, pc}
10065ada:	46c0      	nop			@ (mov r8, r8)

10065adc <__arm_cp.0_0>:
10065adc:	200011c0 	.word	0x200011c0

10065ae0 <smp_dep_l2c_send_acl_packet>:
10065ae0:	b570      	push	{r4, r5, r6, lr}
10065ae2:	460d      	mov	r5, r1
10065ae4:	4606      	mov	r6, r0
10065ae6:	2006      	movs	r0, #6
10065ae8:	f7f2 fab0 	bl	1005804c <L2C_send_frame>
10065aec:	4604      	mov	r4, r0
10065aee:	2800      	cmp	r0, #0
10065af0:	d003      	beq.n	10065afa <smp_dep_l2c_send_acl_packet+0x1a>
10065af2:	4628      	mov	r0, r5
10065af4:	f7ed fae2 	bl	100530bc <ACL_pkt_release>
10065af8:	e008      	b.n	10065b0c <smp_dep_l2c_send_acl_packet+0x2c>
10065afa:	8930      	ldrh	r0, [r6, #8]
10065afc:	f7fa fe66 	bl	100607cc <smp_get_remote_device_list_index>
10065b00:	4602      	mov	r2, r0
10065b02:	2000      	movs	r0, #0
10065b04:	4b02      	ldr	r3, [pc, #8]	@ (10065b10 <__arm_cp.0_0>)
10065b06:	4601      	mov	r1, r0
10065b08:	f7fb fce0 	bl	100614cc <smp_timer_reset>
10065b0c:	4620      	mov	r0, r4
10065b0e:	bd70      	pop	{r4, r5, r6, pc}

10065b10 <__arm_cp.0_0>:
10065b10:	00007530 	.word	0x00007530

10065b14 <smp_dep_l2c_send_acl_short_pdu>:
10065b14:	b5b0      	push	{r4, r5, r7, lr}
10065b16:	461c      	mov	r4, r3
10065b18:	4615      	mov	r5, r2
10065b1a:	2900      	cmp	r1, #0
10065b1c:	d107      	bne.n	10065b2e <smp_dep_l2c_send_acl_short_pdu+0x1a>
10065b1e:	8901      	ldrh	r1, [r0, #8]
10065b20:	2000      	movs	r0, #0
10065b22:	2206      	movs	r2, #6
10065b24:	f7ed faa8 	bl	10053078 <ACL_pkt_get>
10065b28:	4601      	mov	r1, r0
10065b2a:	2800      	cmp	r0, #0
10065b2c:	d009      	beq.n	10065b42 <smp_dep_l2c_send_acl_short_pdu+0x2e>
10065b2e:	2002      	movs	r0, #2
10065b30:	8048      	strh	r0, [r1, #2]
10065b32:	6848      	ldr	r0, [r1, #4]
10065b34:	7205      	strb	r5, [r0, #8]
10065b36:	6848      	ldr	r0, [r1, #4]
10065b38:	7244      	strb	r4, [r0, #9]
10065b3a:	2006      	movs	r0, #6
10065b3c:	f7f2 fa86 	bl	1005804c <L2C_send_frame>
10065b40:	bdb0      	pop	{r4, r5, r7, pc}
10065b42:	2088      	movs	r0, #136	@ 0x88
10065b44:	bdb0      	pop	{r4, r5, r7, pc}

10065b46 <smp_dep_sdb_get_bonding_records_count>:
10065b46:	b580      	push	{r7, lr}
10065b48:	f7f9 fe5c 	bl	1005f804 <sdb_sap_get_security_records_count>
10065b4c:	bd80      	pop	{r7, pc}

10065b4e <smp_dep_sdb_add_bonding_record>:
10065b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
10065b50:	b097      	sub	sp, #92	@ 0x5c
10065b52:	4604      	mov	r4, r0
10065b54:	ae03      	add	r6, sp, #12
10065b56:	2100      	movs	r1, #0
10065b58:	2250      	movs	r2, #80	@ 0x50
10065b5a:	4630      	mov	r0, r6
10065b5c:	f7e0 f99c 	bl	10045e98 <BLEPLAT_MemSet>
10065b60:	2059      	movs	r0, #89	@ 0x59
10065b62:	5c20      	ldrb	r0, [r4, r0]
10065b64:	7871      	ldrb	r1, [r6, #1]
10065b66:	4301      	orrs	r1, r0
10065b68:	7071      	strb	r1, [r6, #1]
10065b6a:	4630      	mov	r0, r6
10065b6c:	303e      	adds	r0, #62	@ 0x3e
10065b6e:	4621      	mov	r1, r4
10065b70:	315a      	adds	r1, #90	@ 0x5a
10065b72:	2506      	movs	r5, #6
10065b74:	462a      	mov	r2, r5
10065b76:	f7e0 f97f 	bl	10045e78 <BLEPLAT_MemCpy>
10065b7a:	7c20      	ldrb	r0, [r4, #16]
10065b7c:	70f0      	strb	r0, [r6, #3]
10065b7e:	7de0      	ldrb	r0, [r4, #23]
10065b80:	0701      	lsls	r1, r0, #28
10065b82:	d416      	bmi.n	10065bb2 <smp_dep_sdb_add_bonding_record+0x64>
10065b84:	2011      	movs	r0, #17
10065b86:	5620      	ldrsb	r0, [r4, r0]
10065b88:	2800      	cmp	r0, #0
10065b8a:	d504      	bpl.n	10065b96 <smp_dep_sdb_add_bonding_record+0x48>
10065b8c:	a803      	add	r0, sp, #12
10065b8e:	7841      	ldrb	r1, [r0, #1]
10065b90:	2280      	movs	r2, #128	@ 0x80
10065b92:	430a      	orrs	r2, r1
10065b94:	7042      	strb	r2, [r0, #1]
10065b96:	ae03      	add	r6, sp, #12
10065b98:	1d30      	adds	r0, r6, #4
10065b9a:	4621      	mov	r1, r4
10065b9c:	311e      	adds	r1, #30
10065b9e:	2202      	movs	r2, #2
10065ba0:	f7e0 f96a 	bl	10045e78 <BLEPLAT_MemCpy>
10065ba4:	1db0      	adds	r0, r6, #6
10065ba6:	4621      	mov	r1, r4
10065ba8:	3120      	adds	r1, #32
10065baa:	2208      	movs	r2, #8
10065bac:	f7e0 f964 	bl	10045e78 <BLEPLAT_MemCpy>
10065bb0:	e003      	b.n	10065bba <smp_dep_sdb_add_bonding_record+0x6c>
10065bb2:	21fe      	movs	r1, #254	@ 0xfe
10065bb4:	4008      	ands	r0, r1
10065bb6:	a903      	add	r1, sp, #12
10065bb8:	7088      	strb	r0, [r1, #2]
10065bba:	a803      	add	r0, sp, #12
10065bbc:	300e      	adds	r0, #14
10065bbe:	4621      	mov	r1, r4
10065bc0:	3128      	adds	r1, #40	@ 0x28
10065bc2:	2610      	movs	r6, #16
10065bc4:	4632      	mov	r2, r6
10065bc6:	f7e0 f957 	bl	10045e78 <BLEPLAT_MemCpy>
10065bca:	7c60      	ldrb	r0, [r4, #17]
10065bcc:	0681      	lsls	r1, r0, #26
10065bce:	d50c      	bpl.n	10065bea <smp_dep_sdb_add_bonding_record+0x9c>
10065bd0:	af03      	add	r7, sp, #12
10065bd2:	4638      	mov	r0, r7
10065bd4:	301e      	adds	r0, #30
10065bd6:	4621      	mov	r1, r4
10065bd8:	3138      	adds	r1, #56	@ 0x38
10065bda:	2210      	movs	r2, #16
10065bdc:	f7e0 f94c 	bl	10045e78 <BLEPLAT_MemCpy>
10065be0:	7878      	ldrb	r0, [r7, #1]
10065be2:	2120      	movs	r1, #32
10065be4:	4301      	orrs	r1, r0
10065be6:	7079      	strb	r1, [r7, #1]
10065be8:	7c60      	ldrb	r0, [r4, #17]
10065bea:	0640      	lsls	r0, r0, #25
10065bec:	d50b      	bpl.n	10065c06 <smp_dep_sdb_add_bonding_record+0xb8>
10065bee:	af03      	add	r7, sp, #12
10065bf0:	4638      	mov	r0, r7
10065bf2:	302e      	adds	r0, #46	@ 0x2e
10065bf4:	4621      	mov	r1, r4
10065bf6:	3148      	adds	r1, #72	@ 0x48
10065bf8:	2210      	movs	r2, #16
10065bfa:	f7e0 f93d 	bl	10045e78 <BLEPLAT_MemCpy>
10065bfe:	7878      	ldrb	r0, [r7, #1]
10065c00:	2140      	movs	r1, #64	@ 0x40
10065c02:	4301      	orrs	r1, r0
10065c04:	7079      	strb	r1, [r7, #1]
10065c06:	7ca0      	ldrb	r0, [r4, #18]
10065c08:	2105      	movs	r1, #5
10065c0a:	4208      	tst	r0, r1
10065c0c:	d00a      	beq.n	10065c24 <smp_dep_sdb_add_bonding_record+0xd6>
10065c0e:	af03      	add	r7, sp, #12
10065c10:	4638      	mov	r0, r7
10065c12:	3044      	adds	r0, #68	@ 0x44
10065c14:	4621      	mov	r1, r4
10065c16:	311c      	adds	r1, #28
10065c18:	2202      	movs	r2, #2
10065c1a:	f7e0 f92d 	bl	10045e78 <BLEPLAT_MemCpy>
10065c1e:	7878      	ldrb	r0, [r7, #1]
10065c20:	4330      	orrs	r0, r6
10065c22:	e001      	b.n	10065c28 <smp_dep_sdb_add_bonding_record+0xda>
10065c24:	a803      	add	r0, sp, #12
10065c26:	7840      	ldrb	r0, [r0, #1]
10065c28:	7ae1      	ldrb	r1, [r4, #11]
10065c2a:	4029      	ands	r1, r5
10065c2c:	4301      	orrs	r1, r0
10065c2e:	a803      	add	r0, sp, #12
10065c30:	7041      	strb	r1, [r0, #1]
10065c32:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
10065c34:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
10065c36:	9115      	str	r1, [sp, #84]	@ 0x54
10065c38:	9216      	str	r2, [sp, #88]	@ 0x58
10065c3a:	f7f9 fde7 	bl	1005f80c <sdb_sap_add_security_record>
10065c3e:	4605      	mov	r5, r0
10065c40:	2800      	cmp	r0, #0
10065c42:	d00c      	beq.n	10065c5e <smp_dep_sdb_add_bonding_record+0x110>
10065c44:	1ca1      	adds	r1, r4, #2
10065c46:	ac01      	add	r4, sp, #4
10065c48:	2206      	movs	r2, #6
10065c4a:	4620      	mov	r0, r4
10065c4c:	f7e0 f914 	bl	10045e78 <BLEPLAT_MemCpy>
10065c50:	71a5      	strb	r5, [r4, #6]
10065c52:	2042      	movs	r0, #66	@ 0x42
10065c54:	2105      	movs	r1, #5
10065c56:	2207      	movs	r2, #7
10065c58:	4623      	mov	r3, r4
10065c5a:	f7fd fe33 	bl	100638c4 <aci_hal_fw_error_event_push_noinline>
10065c5e:	4628      	mov	r0, r5
10065c60:	b017      	add	sp, #92	@ 0x5c
10065c62:	bdf0      	pop	{r4, r5, r6, r7, pc}

10065c64 <smp_dep_sdb_find_bonding_record_by_conn_addr>:
10065c64:	b570      	push	{r4, r5, r6, lr}
10065c66:	b094      	sub	sp, #80	@ 0x50
10065c68:	460e      	mov	r6, r1
10065c6a:	4604      	mov	r4, r0
10065c6c:	7841      	ldrb	r1, [r0, #1]
10065c6e:	1c80      	adds	r0, r0, #2
10065c70:	466a      	mov	r2, sp
10065c72:	f7f9 fdee 	bl	1005f852 <sdb_sap_read_security_record>
10065c76:	4605      	mov	r5, r0
10065c78:	2e00      	cmp	r6, #0
10065c7a:	d005      	beq.n	10065c88 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
10065c7c:	2d00      	cmp	r5, #0
10065c7e:	d103      	bne.n	10065c88 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
10065c80:	4668      	mov	r0, sp
10065c82:	4621      	mov	r1, r4
10065c84:	f000 f804 	bl	10065c90 <smp_dep_sdb_copy_bonding_record_data_to_remdev>
10065c88:	4628      	mov	r0, r5
10065c8a:	b014      	add	sp, #80	@ 0x50
10065c8c:	bd70      	pop	{r4, r5, r6, pc}
	...

10065c90 <smp_dep_sdb_copy_bonding_record_data_to_remdev>:
10065c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065c92:	460c      	mov	r4, r1
10065c94:	4605      	mov	r5, r0
10065c96:	2001      	movs	r0, #1
10065c98:	7388      	strb	r0, [r1, #14]
10065c9a:	78e8      	ldrb	r0, [r5, #3]
10065c9c:	7408      	strb	r0, [r1, #16]
10065c9e:	4608      	mov	r0, r1
10065ca0:	301c      	adds	r0, #28
10065ca2:	4629      	mov	r1, r5
10065ca4:	3144      	adds	r1, #68	@ 0x44
10065ca6:	2602      	movs	r6, #2
10065ca8:	4f19      	ldr	r7, [pc, #100]	@ (10065d10 <__arm_cp.3_0>)
10065caa:	4632      	mov	r2, r6
10065cac:	47b8      	blx	r7
10065cae:	4620      	mov	r0, r4
10065cb0:	301e      	adds	r0, #30
10065cb2:	1d29      	adds	r1, r5, #4
10065cb4:	4632      	mov	r2, r6
10065cb6:	47b8      	blx	r7
10065cb8:	4620      	mov	r0, r4
10065cba:	3020      	adds	r0, #32
10065cbc:	1da9      	adds	r1, r5, #6
10065cbe:	2208      	movs	r2, #8
10065cc0:	47b8      	blx	r7
10065cc2:	4620      	mov	r0, r4
10065cc4:	3028      	adds	r0, #40	@ 0x28
10065cc6:	4629      	mov	r1, r5
10065cc8:	310e      	adds	r1, #14
10065cca:	2610      	movs	r6, #16
10065ccc:	4632      	mov	r2, r6
10065cce:	47b8      	blx	r7
10065cd0:	4620      	mov	r0, r4
10065cd2:	3038      	adds	r0, #56	@ 0x38
10065cd4:	4629      	mov	r1, r5
10065cd6:	311e      	adds	r1, #30
10065cd8:	4632      	mov	r2, r6
10065cda:	47b8      	blx	r7
10065cdc:	4620      	mov	r0, r4
10065cde:	3048      	adds	r0, #72	@ 0x48
10065ce0:	4629      	mov	r1, r5
10065ce2:	312e      	adds	r1, #46	@ 0x2e
10065ce4:	4632      	mov	r2, r6
10065ce6:	47b8      	blx	r7
10065ce8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
10065cea:	66a0      	str	r0, [r4, #104]	@ 0x68
10065cec:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
10065cee:	66e0      	str	r0, [r4, #108]	@ 0x6c
10065cf0:	7868      	ldrb	r0, [r5, #1]
10065cf2:	2106      	movs	r1, #6
10065cf4:	4001      	ands	r1, r0
10065cf6:	72e1      	strb	r1, [r4, #11]
10065cf8:	21e0      	movs	r1, #224	@ 0xe0
10065cfa:	4001      	ands	r1, r0
10065cfc:	7c60      	ldrb	r0, [r4, #17]
10065cfe:	4308      	orrs	r0, r1
10065d00:	7460      	strb	r0, [r4, #17]
10065d02:	78a8      	ldrb	r0, [r5, #2]
10065d04:	0701      	lsls	r1, r0, #28
10065d06:	d502      	bpl.n	10065d0e <smp_dep_sdb_copy_bonding_record_data_to_remdev+0x7e>
10065d08:	21fe      	movs	r1, #254	@ 0xfe
10065d0a:	4008      	ands	r0, r1
10065d0c:	75e0      	strb	r0, [r4, #23]
10065d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10065d10 <__arm_cp.3_0>:
10065d10:	10045e79 	.word	0x10045e79

10065d14 <smp_dep_sdb_find_bonding_record_read_address>:
10065d14:	b570      	push	{r4, r5, r6, lr}
10065d16:	b094      	sub	sp, #80	@ 0x50
10065d18:	4614      	mov	r4, r2
10065d1a:	460e      	mov	r6, r1
10065d1c:	7841      	ldrb	r1, [r0, #1]
10065d1e:	1c80      	adds	r0, r0, #2
10065d20:	466a      	mov	r2, sp
10065d22:	f7f9 fd96 	bl	1005f852 <sdb_sap_read_security_record>
10065d26:	4605      	mov	r5, r0
10065d28:	2800      	cmp	r0, #0
10065d2a:	d107      	bne.n	10065d3c <smp_dep_sdb_find_bonding_record_read_address+0x28>
10065d2c:	2000      	movs	r0, #0
10065d2e:	7030      	strb	r0, [r6, #0]
10065d30:	4669      	mov	r1, sp
10065d32:	313e      	adds	r1, #62	@ 0x3e
10065d34:	2206      	movs	r2, #6
10065d36:	4620      	mov	r0, r4
10065d38:	f7e0 f89e 	bl	10045e78 <BLEPLAT_MemCpy>
10065d3c:	4628      	mov	r0, r5
10065d3e:	b014      	add	sp, #80	@ 0x50
10065d40:	bd70      	pop	{r4, r5, r6, pc}

10065d42 <smp_dep_sdb_find_matching_ltk_read_record>:
10065d42:	b5b0      	push	{r4, r5, r7, lr}
10065d44:	b094      	sub	sp, #80	@ 0x50
10065d46:	4614      	mov	r4, r2
10065d48:	466a      	mov	r2, sp
10065d4a:	f7f9 fdfb 	bl	1005f944 <sdb_sap_read_security_record_matching>
10065d4e:	4605      	mov	r5, r0
10065d50:	2800      	cmp	r0, #0
10065d52:	d103      	bne.n	10065d5c <smp_dep_sdb_find_matching_ltk_read_record+0x1a>
10065d54:	4668      	mov	r0, sp
10065d56:	4621      	mov	r1, r4
10065d58:	f7ff ff9a 	bl	10065c90 <smp_dep_sdb_copy_bonding_record_data_to_remdev>
10065d5c:	4628      	mov	r0, r5
10065d5e:	b014      	add	sp, #80	@ 0x50
10065d60:	bdb0      	pop	{r4, r5, r7, pc}

10065d62 <smp_start_encryption_ucfg_weak>:
10065d62:	201f      	movs	r0, #31
10065d64:	4770      	bx	lr
	...

10065d68 <smp_pp3_pairing_completed_successful>:
10065d68:	b570      	push	{r4, r5, r6, lr}
10065d6a:	4604      	mov	r4, r0
10065d6c:	7b80      	ldrb	r0, [r0, #14]
10065d6e:	2103      	movs	r1, #3
10065d70:	4001      	ands	r1, r0
10065d72:	8925      	ldrh	r5, [r4, #8]
10065d74:	2903      	cmp	r1, #3
10065d76:	d10a      	bne.n	10065d8e <smp_pp3_pairing_completed_successful+0x26>
10065d78:	4620      	mov	r0, r4
10065d7a:	f7ff fee8 	bl	10065b4e <smp_dep_sdb_add_bonding_record>
10065d7e:	2800      	cmp	r0, #0
10065d80:	d005      	beq.n	10065d8e <smp_pp3_pairing_completed_successful+0x26>
10065d82:	2108      	movs	r1, #8
10065d84:	2200      	movs	r2, #0
10065d86:	4620      	mov	r0, r4
10065d88:	f000 f826 	bl	10065dd8 <smp_pp3_pairing_process_abort>
10065d8c:	bd70      	pop	{r4, r5, r6, pc}
10065d8e:	4628      	mov	r0, r5
10065d90:	f7fa fd1c 	bl	100607cc <smp_get_remote_device_list_index>
10065d94:	4602      	mov	r2, r0
10065d96:	2001      	movs	r0, #1
10065d98:	2100      	movs	r1, #0
10065d9a:	4b0e      	ldr	r3, [pc, #56]	@ (10065dd4 <__arm_cp.0_0>)
10065d9c:	f7fb fb96 	bl	100614cc <smp_timer_reset>
10065da0:	7ce0      	ldrb	r0, [r4, #19]
10065da2:	2803      	cmp	r0, #3
10065da4:	d102      	bne.n	10065dac <smp_pp3_pairing_completed_successful+0x44>
10065da6:	2000      	movs	r0, #0
10065da8:	f7fa fd90 	bl	100608cc <smp_oob_clear_remote_data_entry>
10065dac:	4620      	mov	r0, r4
10065dae:	3018      	adds	r0, #24
10065db0:	2600      	movs	r6, #0
10065db2:	2204      	movs	r2, #4
10065db4:	4631      	mov	r1, r6
10065db6:	f7e0 f86f 	bl	10045e98 <BLEPLAT_MemSet>
10065dba:	4620      	mov	r0, r4
10065dbc:	4631      	mov	r1, r6
10065dbe:	f000 f83b 	bl	10065e38 <smp_pp3_pairing_completed_update_stats>
10065dc2:	20f1      	movs	r0, #241	@ 0xf1
10065dc4:	72a0      	strb	r0, [r4, #10]
10065dc6:	2002      	movs	r0, #2
10065dc8:	4629      	mov	r1, r5
10065dca:	4632      	mov	r2, r6
10065dcc:	4633      	mov	r3, r6
10065dce:	f7fd fded 	bl	100639ac <aci_gap_pairing_complete_event_push_noinline>
10065dd2:	bd70      	pop	{r4, r5, r6, pc}

10065dd4 <__arm_cp.0_0>:
10065dd4:	00007530 	.word	0x00007530

10065dd8 <smp_pp3_pairing_process_abort>:
10065dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065dda:	4616      	mov	r6, r2
10065ddc:	460c      	mov	r4, r1
10065dde:	4605      	mov	r5, r0
10065de0:	8900      	ldrh	r0, [r0, #8]
10065de2:	f7fa fcf3 	bl	100607cc <smp_get_remote_device_list_index>
10065de6:	4602      	mov	r2, r0
10065de8:	2001      	movs	r0, #1
10065dea:	2700      	movs	r7, #0
10065dec:	4b11      	ldr	r3, [pc, #68]	@ (10065e34 <__arm_cp.1_0>)
10065dee:	4639      	mov	r1, r7
10065df0:	f7fb fb6c 	bl	100614cc <smp_timer_reset>
10065df4:	8928      	ldrh	r0, [r5, #8]
10065df6:	f7fb fb31 	bl	1006145c <smp_rxp_flush_packet_queues>
10065dfa:	2102      	movs	r1, #2
10065dfc:	4628      	mov	r0, r5
10065dfe:	f000 f81b 	bl	10065e38 <smp_pp3_pairing_completed_update_stats>
10065e02:	4628      	mov	r0, r5
10065e04:	3018      	adds	r0, #24
10065e06:	2204      	movs	r2, #4
10065e08:	4639      	mov	r1, r7
10065e0a:	f7e0 f845 	bl	10045e98 <BLEPLAT_MemSet>
10065e0e:	7be8      	ldrb	r0, [r5, #15]
10065e10:	212f      	movs	r1, #47	@ 0x2f
10065e12:	4001      	ands	r1, r0
10065e14:	73e9      	strb	r1, [r5, #15]
10065e16:	2e00      	cmp	r6, #0
10065e18:	d004      	beq.n	10065e24 <smp_pp3_pairing_process_abort+0x4c>
10065e1a:	7868      	ldrb	r0, [r5, #1]
10065e1c:	1ca9      	adds	r1, r5, #2
10065e1e:	f000 fb09 	bl	10066434 <smp_cmn_repeated_attacks_protection_start>
10065e22:	27fb      	movs	r7, #251	@ 0xfb
10065e24:	72af      	strb	r7, [r5, #10]
10065e26:	8929      	ldrh	r1, [r5, #8]
10065e28:	2002      	movs	r0, #2
10065e2a:	4602      	mov	r2, r0
10065e2c:	4623      	mov	r3, r4
10065e2e:	f7fd fdbd 	bl	100639ac <aci_gap_pairing_complete_event_push_noinline>
10065e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10065e34 <__arm_cp.1_0>:
10065e34:	00007530 	.word	0x00007530

10065e38 <smp_pp3_pairing_completed_update_stats>:
10065e38:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10065e3a:	2260      	movs	r2, #96	@ 0x60
10065e3c:	5c82      	ldrb	r2, [r0, r2]
10065e3e:	07d2      	lsls	r2, r2, #31
10065e40:	7a82      	ldrb	r2, [r0, #10]
10065e42:	d104      	bne.n	10065e4e <smp_pp3_pairing_completed_update_stats+0x16>
10065e44:	3260      	adds	r2, #96	@ 0x60
10065e46:	b2d2      	uxtb	r2, r2
10065e48:	2a51      	cmp	r2, #81	@ 0x51
10065e4a:	d304      	bcc.n	10065e56 <smp_pp3_pairing_completed_update_stats+0x1e>
10065e4c:	e00f      	b.n	10065e6e <smp_pp3_pairing_completed_update_stats+0x36>
10065e4e:	3250      	adds	r2, #80	@ 0x50
10065e50:	b2d2      	uxtb	r2, r2
10065e52:	2a40      	cmp	r2, #64	@ 0x40
10065e54:	d80b      	bhi.n	10065e6e <smp_pp3_pairing_completed_update_stats+0x36>
10065e56:	4a09      	ldr	r2, [pc, #36]	@ (10065e7c <__arm_cp.2_0>)
10065e58:	6812      	ldr	r2, [r2, #0]
10065e5a:	23b1      	movs	r3, #177	@ 0xb1
10065e5c:	5cd3      	ldrb	r3, [r2, r3]
10065e5e:	2b00      	cmp	r3, #0
10065e60:	d005      	beq.n	10065e6e <smp_pp3_pairing_completed_update_stats+0x36>
10065e62:	32b1      	adds	r2, #177	@ 0xb1
10065e64:	7d04      	ldrb	r4, [r0, #20]
10065e66:	2501      	movs	r5, #1
10065e68:	40a5      	lsls	r5, r4
10065e6a:	43ab      	bics	r3, r5
10065e6c:	7013      	strb	r3, [r2, #0]
10065e6e:	466a      	mov	r2, sp
10065e70:	7111      	strb	r1, [r2, #4]
10065e72:	9000      	str	r0, [sp, #0]
10065e74:	4610      	mov	r0, r2
10065e76:	f7ec f913 	bl	100520a0 <smp_scp_stats_update_on_pairing_complete_ucfg>
10065e7a:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10065e7c <__arm_cp.2_0>:
10065e7c:	200011c0 	.word	0x200011c0

10065e80 <smp_pp3_pairing_failed_receive>:
10065e80:	b5b0      	push	{r4, r5, r7, lr}
10065e82:	460c      	mov	r4, r1
10065e84:	2160      	movs	r1, #96	@ 0x60
10065e86:	5c61      	ldrb	r1, [r4, r1]
10065e88:	2201      	movs	r2, #1
10065e8a:	400a      	ands	r2, r1
10065e8c:	7aa3      	ldrb	r3, [r4, #10]
10065e8e:	6840      	ldr	r0, [r0, #4]
10065e90:	7a41      	ldrb	r1, [r0, #9]
10065e92:	d102      	bne.n	10065e9a <smp_pp3_pairing_failed_receive+0x1a>
10065e94:	2b9f      	cmp	r3, #159	@ 0x9f
10065e96:	d802      	bhi.n	10065e9e <smp_pp3_pairing_failed_receive+0x1e>
10065e98:	bdb0      	pop	{r4, r5, r7, pc}
10065e9a:	2bb0      	cmp	r3, #176	@ 0xb0
10065e9c:	d314      	bcc.n	10065ec8 <smp_pp3_pairing_failed_receive+0x48>
10065e9e:	2bf0      	cmp	r3, #240	@ 0xf0
10065ea0:	d915      	bls.n	10065ece <smp_pp3_pairing_failed_receive+0x4e>
10065ea2:	2bf1      	cmp	r3, #241	@ 0xf1
10065ea4:	d10e      	bne.n	10065ec4 <smp_pp3_pairing_failed_receive+0x44>
10065ea6:	290f      	cmp	r1, #15
10065ea8:	d10c      	bne.n	10065ec4 <smp_pp3_pairing_failed_receive+0x44>
10065eaa:	4625      	mov	r5, r4
10065eac:	3559      	adds	r5, #89	@ 0x59
10065eae:	210f      	movs	r1, #15
10065eb0:	2201      	movs	r2, #1
10065eb2:	4620      	mov	r0, r4
10065eb4:	f7ff ff90 	bl	10065dd8 <smp_pp3_pairing_process_abort>
10065eb8:	7829      	ldrb	r1, [r5, #0]
10065eba:	345a      	adds	r4, #90	@ 0x5a
10065ebc:	4620      	mov	r0, r4
10065ebe:	f7f9 fd2f 	bl	1005f920 <sdb_sap_del_bonded_device>
10065ec2:	bdb0      	pop	{r4, r5, r7, pc}
10065ec4:	2a00      	cmp	r2, #0
10065ec6:	d0e7      	beq.n	10065e98 <smp_pp3_pairing_failed_receive+0x18>
10065ec8:	7e20      	ldrb	r0, [r4, #24]
10065eca:	0780      	lsls	r0, r0, #30
10065ecc:	d0e4      	beq.n	10065e98 <smp_pp3_pairing_failed_receive+0x18>
10065ece:	2201      	movs	r2, #1
10065ed0:	4620      	mov	r0, r4
10065ed2:	f7ff ff81 	bl	10065dd8 <smp_pp3_pairing_process_abort>
10065ed6:	bdb0      	pop	{r4, r5, r7, pc}

10065ed8 <smp_pp3_pairing_failed_send>:
10065ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065eda:	461f      	mov	r7, r3
10065edc:	4613      	mov	r3, r2
10065ede:	460c      	mov	r4, r1
10065ee0:	4605      	mov	r5, r0
10065ee2:	2205      	movs	r2, #5
10065ee4:	4619      	mov	r1, r3
10065ee6:	4623      	mov	r3, r4
10065ee8:	f7ff fe14 	bl	10065b14 <smp_dep_l2c_send_acl_short_pdu>
10065eec:	4606      	mov	r6, r0
10065eee:	2f00      	cmp	r7, #0
10065ef0:	d101      	bne.n	10065ef6 <smp_pp3_pairing_failed_send+0x1e>
10065ef2:	2e88      	cmp	r6, #136	@ 0x88
10065ef4:	d004      	beq.n	10065f00 <smp_pp3_pairing_failed_send+0x28>
10065ef6:	2201      	movs	r2, #1
10065ef8:	4628      	mov	r0, r5
10065efa:	4621      	mov	r1, r4
10065efc:	f7ff ff6c 	bl	10065dd8 <smp_pp3_pairing_process_abort>
10065f00:	4630      	mov	r0, r6
10065f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10065f04 <smp_pp1_per_rxp_pairing_request>:
10065f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10065f06:	460c      	mov	r4, r1
10065f08:	4607      	mov	r7, r0
10065f0a:	2501      	movs	r5, #1
10065f0c:	4628      	mov	r0, r5
10065f0e:	f7fa f855 	bl	1005ffbc <smp_pp1_get_next_free_pairing_idx>
10065f12:	2802      	cmp	r0, #2
10065f14:	d901      	bls.n	10065f1a <smp_pp1_per_rxp_pairing_request+0x16>
10065f16:	2038      	movs	r0, #56	@ 0x38
10065f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065f1a:	4606      	mov	r6, r0
10065f1c:	4638      	mov	r0, r7
10065f1e:	f7fa f86d 	bl	1005fffc <smp_pp1_reqrsp_pdu_params_check>
10065f22:	2800      	cmp	r0, #0
10065f24:	d010      	beq.n	10065f48 <smp_pp1_per_rxp_pairing_request+0x44>
10065f26:	4601      	mov	r1, r0
10065f28:	4810      	ldr	r0, [pc, #64]	@ (10065f6c <__arm_cp.1_0>)
10065f2a:	6800      	ldr	r0, [r0, #0]
10065f2c:	22b1      	movs	r2, #177	@ 0xb1
10065f2e:	5c82      	ldrb	r2, [r0, r2]
10065f30:	2a00      	cmp	r2, #0
10065f32:	d003      	beq.n	10065f3c <smp_pp1_per_rxp_pairing_request+0x38>
10065f34:	30b1      	adds	r0, #177	@ 0xb1
10065f36:	40b5      	lsls	r5, r6
10065f38:	43aa      	bics	r2, r5
10065f3a:	7002      	strb	r2, [r0, #0]
10065f3c:	2200      	movs	r2, #0
10065f3e:	2301      	movs	r3, #1
10065f40:	4620      	mov	r0, r4
10065f42:	f7ff ffc9 	bl	10065ed8 <smp_pp3_pairing_failed_send>
10065f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065f48:	7526      	strb	r6, [r4, #20]
10065f4a:	2101      	movs	r1, #1
10065f4c:	4638      	mov	r0, r7
10065f4e:	4622      	mov	r2, r4
10065f50:	f7fa f878 	bl	10060044 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
10065f54:	4620      	mov	r0, r4
10065f56:	f7fa f98d 	bl	10060274 <smp_pp1_hndl_pairing_response_mode_through_event>
10065f5a:	2800      	cmp	r0, #0
10065f5c:	d001      	beq.n	10065f62 <smp_pp1_per_rxp_pairing_request+0x5e>
10065f5e:	2000      	movs	r0, #0
10065f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065f62:	4620      	mov	r0, r4
10065f64:	f000 f804 	bl	10065f70 <smp_pp1_per_send_pairing_response>
10065f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10065f6a:	46c0      	nop			@ (mov r8, r8)

10065f6c <__arm_cp.1_0>:
10065f6c:	200011c0 	.word	0x200011c0

10065f70 <smp_pp1_per_send_pairing_response>:
10065f70:	b5f0      	push	{r4, r5, r6, r7, lr}
10065f72:	b087      	sub	sp, #28
10065f74:	4604      	mov	r4, r0
10065f76:	a806      	add	r0, sp, #24
10065f78:	2600      	movs	r6, #0
10065f7a:	7006      	strb	r6, [r0, #0]
10065f7c:	8921      	ldrh	r1, [r4, #8]
10065f7e:	220b      	movs	r2, #11
10065f80:	4630      	mov	r0, r6
10065f82:	f7ed f879 	bl	10053078 <ACL_pkt_get>
10065f86:	2800      	cmp	r0, #0
10065f88:	d01b      	beq.n	10065fc2 <smp_pp1_per_send_pairing_response+0x52>
10065f8a:	9005      	str	r0, [sp, #20]
10065f8c:	20b0      	movs	r0, #176	@ 0xb0
10065f8e:	72a0      	strb	r0, [r4, #10]
10065f90:	75e6      	strb	r6, [r4, #23]
10065f92:	7be0      	ldrb	r0, [r4, #15]
10065f94:	212f      	movs	r1, #47	@ 0x2f
10065f96:	4001      	ands	r1, r0
10065f98:	73e1      	strb	r1, [r4, #15]
10065f9a:	4f43      	ldr	r7, [pc, #268]	@ (100660a8 <__arm_cp.2_0>)
10065f9c:	683d      	ldr	r5, [r7, #0]
10065f9e:	7d20      	ldrb	r0, [r4, #20]
10065fa0:	2101      	movs	r1, #1
10065fa2:	9104      	str	r1, [sp, #16]
10065fa4:	f7fa f824 	bl	1005fff0 <smp_pp1_get_pairing_pdu_offset>
10065fa8:	1940      	adds	r0, r0, r5
10065faa:	21b7      	movs	r1, #183	@ 0xb7
10065fac:	5c45      	ldrb	r5, [r0, r1]
10065fae:	6838      	ldr	r0, [r7, #0]
10065fb0:	2132      	movs	r1, #50	@ 0x32
10065fb2:	5c40      	ldrb	r0, [r0, r1]
10065fb4:	2802      	cmp	r0, #2
10065fb6:	d106      	bne.n	10065fc6 <smp_pp1_per_send_pairing_response+0x56>
10065fb8:	2008      	movs	r0, #8
10065fba:	4028      	ands	r0, r5
10065fbc:	d103      	bne.n	10065fc6 <smp_pp1_per_send_pairing_response+0x56>
10065fbe:	2103      	movs	r1, #3
10065fc0:	e051      	b.n	10066066 <smp_pp1_per_send_pairing_response+0xf6>
10065fc2:	2688      	movs	r6, #136	@ 0x88
10065fc4:	e061      	b.n	1006608a <smp_pp1_per_send_pairing_response+0x11a>
10065fc6:	7e20      	ldrb	r0, [r4, #24]
10065fc8:	07c0      	lsls	r0, r0, #31
10065fca:	d105      	bne.n	10065fd8 <smp_pp1_per_send_pairing_response+0x68>
10065fcc:	af06      	add	r7, sp, #24
10065fce:	4638      	mov	r0, r7
10065fd0:	f7fa f936 	bl	10060240 <smp_pp1_auth_req_field_generate_from_device_config>
10065fd4:	7838      	ldrb	r0, [r7, #0]
10065fd6:	e002      	b.n	10065fde <smp_pp1_per_send_pairing_response+0x6e>
10065fd8:	7d60      	ldrb	r0, [r4, #21]
10065fda:	a906      	add	r1, sp, #24
10065fdc:	7008      	strb	r0, [r1, #0]
10065fde:	4005      	ands	r5, r0
10065fe0:	2018      	movs	r0, #24
10065fe2:	4028      	ands	r0, r5
10065fe4:	7de1      	ldrb	r1, [r4, #23]
10065fe6:	4301      	orrs	r1, r0
10065fe8:	75e1      	strb	r1, [r4, #23]
10065fea:	0708      	lsls	r0, r1, #28
10065fec:	d401      	bmi.n	10065ff2 <smp_pp1_per_send_pairing_response+0x82>
10065fee:	27b4      	movs	r7, #180	@ 0xb4
10065ff0:	e006      	b.n	10066000 <smp_pp1_per_send_pairing_response+0x90>
10065ff2:	4620      	mov	r0, r4
10065ff4:	f7ec f83a 	bl	1005206c <smp_scp_continue_on_exclusive_sc_pairing_ucfg>
10065ff8:	4601      	mov	r1, r0
10065ffa:	2800      	cmp	r0, #0
10065ffc:	d133      	bne.n	10066066 <smp_pp1_per_send_pairing_response+0xf6>
10065ffe:	27b2      	movs	r7, #178	@ 0xb2
10066000:	4620      	mov	r0, r4
10066002:	f7fa fc25 	bl	10060850 <smp_oob_check_is_remote_data_present>
10066006:	9806      	ldr	r0, [sp, #24]
10066008:	0741      	lsls	r1, r0, #29
1006600a:	0fc9      	lsrs	r1, r1, #31
1006600c:	73e1      	strb	r1, [r4, #15]
1006600e:	07c0      	lsls	r0, r0, #31
10066010:	0f80      	lsrs	r0, r0, #30
10066012:	73a0      	strb	r0, [r4, #14]
10066014:	4620      	mov	r0, r4
10066016:	f7fa f827 	bl	10060068 <smp_pp1_reqrsp_pdu_extract_from_pairing_data>
1006601a:	4620      	mov	r0, r4
1006601c:	f7fa f870 	bl	10060100 <smp_pp1_key_generation_method_selection>
10066020:	4601      	mov	r1, r0
10066022:	2800      	cmp	r0, #0
10066024:	d11f      	bne.n	10066066 <smp_pp1_per_send_pairing_response+0xf6>
10066026:	7ce0      	ldrb	r0, [r4, #19]
10066028:	2802      	cmp	r0, #2
1006602a:	d104      	bne.n	10066036 <smp_pp1_per_send_pairing_response+0xc6>
1006602c:	7be0      	ldrb	r0, [r4, #15]
1006602e:	06c0      	lsls	r0, r0, #27
10066030:	d401      	bmi.n	10066036 <smp_pp1_per_send_pairing_response+0xc6>
10066032:	204d      	movs	r0, #77	@ 0x4d
10066034:	43c7      	mvns	r7, r0
10066036:	481c      	ldr	r0, [pc, #112]	@ (100660a8 <__arm_cp.2_0>)
10066038:	6800      	ldr	r0, [r0, #0]
1006603a:	2135      	movs	r1, #53	@ 0x35
1006603c:	5c40      	ldrb	r0, [r0, r1]
1006603e:	a906      	add	r1, sp, #24
10066040:	780b      	ldrb	r3, [r1, #0]
10066042:	7b62      	ldrb	r2, [r4, #13]
10066044:	7c61      	ldrb	r1, [r4, #17]
10066046:	7ca5      	ldrb	r5, [r4, #18]
10066048:	9000      	str	r0, [sp, #0]
1006604a:	9101      	str	r1, [sp, #4]
1006604c:	9502      	str	r5, [sp, #8]
1006604e:	2102      	movs	r1, #2
10066050:	9d05      	ldr	r5, [sp, #20]
10066052:	4628      	mov	r0, r5
10066054:	f7fa f952 	bl	100602fc <smp_pp1_pairing_packet_build>
10066058:	4620      	mov	r0, r4
1006605a:	4629      	mov	r1, r5
1006605c:	f7ff fd40 	bl	10065ae0 <smp_dep_l2c_send_acl_packet>
10066060:	4601      	mov	r1, r0
10066062:	2800      	cmp	r0, #0
10066064:	d014      	beq.n	10066090 <smp_pp1_per_send_pairing_response+0x120>
10066066:	4810      	ldr	r0, [pc, #64]	@ (100660a8 <__arm_cp.2_0>)
10066068:	6800      	ldr	r0, [r0, #0]
1006606a:	22b1      	movs	r2, #177	@ 0xb1
1006606c:	5c82      	ldrb	r2, [r0, r2]
1006606e:	2a00      	cmp	r2, #0
10066070:	d005      	beq.n	1006607e <smp_pp1_per_send_pairing_response+0x10e>
10066072:	30b1      	adds	r0, #177	@ 0xb1
10066074:	7d23      	ldrb	r3, [r4, #20]
10066076:	9d04      	ldr	r5, [sp, #16]
10066078:	409d      	lsls	r5, r3
1006607a:	43aa      	bics	r2, r5
1006607c:	7002      	strb	r2, [r0, #0]
1006607e:	2301      	movs	r3, #1
10066080:	4620      	mov	r0, r4
10066082:	9a05      	ldr	r2, [sp, #20]
10066084:	f7ff ff28 	bl	10065ed8 <smp_pp3_pairing_failed_send>
10066088:	4606      	mov	r6, r0
1006608a:	4630      	mov	r0, r6
1006608c:	b007      	add	sp, #28
1006608e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066090:	7ae0      	ldrb	r0, [r4, #11]
10066092:	21f8      	movs	r1, #248	@ 0xf8
10066094:	4001      	ands	r1, r0
10066096:	72e1      	strb	r1, [r4, #11]
10066098:	9805      	ldr	r0, [sp, #20]
1006609a:	4631      	mov	r1, r6
1006609c:	4622      	mov	r2, r4
1006609e:	f7f9 ffd1 	bl	10060044 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
100660a2:	72a7      	strb	r7, [r4, #10]
100660a4:	e7f1      	b.n	1006608a <smp_pp1_per_send_pairing_response+0x11a>
100660a6:	46c0      	nop			@ (mov r8, r8)

100660a8 <__arm_cp.2_0>:
100660a8:	200011c0 	.word	0x200011c0

100660ac <smp_pp3_keys_distribution_start>:
100660ac:	b580      	push	{r7, lr}
100660ae:	2901      	cmp	r1, #1
100660b0:	d111      	bne.n	100660d6 <smp_pp3_keys_distribution_start+0x2a>
100660b2:	7c42      	ldrb	r2, [r0, #17]
100660b4:	0753      	lsls	r3, r2, #29
100660b6:	d005      	beq.n	100660c4 <smp_pp3_keys_distribution_start+0x18>
100660b8:	7dc3      	ldrb	r3, [r0, #23]
100660ba:	071b      	lsls	r3, r3, #28
100660bc:	d51d      	bpl.n	100660fa <smp_pp3_keys_distribution_start+0x4e>
100660be:	2306      	movs	r3, #6
100660c0:	401a      	ands	r2, r3
100660c2:	d11a      	bne.n	100660fa <smp_pp3_keys_distribution_start+0x4e>
100660c4:	2260      	movs	r2, #96	@ 0x60
100660c6:	5c83      	ldrb	r3, [r0, r2]
100660c8:	2201      	movs	r2, #1
100660ca:	401a      	ands	r2, r3
100660cc:	2900      	cmp	r1, #0
100660ce:	d006      	beq.n	100660de <smp_pp3_keys_distribution_start+0x32>
100660d0:	2a00      	cmp	r2, #0
100660d2:	d119      	bne.n	10066108 <smp_pp3_keys_distribution_start+0x5c>
100660d4:	e003      	b.n	100660de <smp_pp3_keys_distribution_start+0x32>
100660d6:	2900      	cmp	r1, #0
100660d8:	d000      	beq.n	100660dc <smp_pp3_keys_distribution_start+0x30>
100660da:	bd80      	pop	{r7, pc}
100660dc:	2200      	movs	r2, #0
100660de:	7c81      	ldrb	r1, [r0, #18]
100660e0:	07cb      	lsls	r3, r1, #31
100660e2:	d004      	beq.n	100660ee <smp_pp3_keys_distribution_start+0x42>
100660e4:	7dc3      	ldrb	r3, [r0, #23]
100660e6:	071b      	lsls	r3, r3, #28
100660e8:	d401      	bmi.n	100660ee <smp_pp3_keys_distribution_start+0x42>
100660ea:	21d1      	movs	r1, #209	@ 0xd1
100660ec:	e009      	b.n	10066102 <smp_pp3_keys_distribution_start+0x56>
100660ee:	078b      	lsls	r3, r1, #30
100660f0:	d406      	bmi.n	10066100 <smp_pp3_keys_distribution_start+0x54>
100660f2:	0749      	lsls	r1, r1, #29
100660f4:	d508      	bpl.n	10066108 <smp_pp3_keys_distribution_start+0x5c>
100660f6:	21d5      	movs	r1, #213	@ 0xd5
100660f8:	e003      	b.n	10066102 <smp_pp3_keys_distribution_start+0x56>
100660fa:	21d0      	movs	r1, #208	@ 0xd0
100660fc:	7281      	strb	r1, [r0, #10]
100660fe:	bd80      	pop	{r7, pc}
10066100:	21d3      	movs	r1, #211	@ 0xd3
10066102:	7281      	strb	r1, [r0, #10]
10066104:	2a00      	cmp	r2, #0
10066106:	d002      	beq.n	1006610e <smp_pp3_keys_distribution_start+0x62>
10066108:	f000 f804 	bl	10066114 <smp_pp3_keys_distribution_completed>
1006610c:	bd80      	pop	{r7, pc}
1006610e:	f000 f817 	bl	10066140 <smp_pp3_keys_distribution_send>
10066112:	bd80      	pop	{r7, pc}

10066114 <smp_pp3_keys_distribution_completed>:
10066114:	b580      	push	{r7, lr}
10066116:	2160      	movs	r1, #96	@ 0x60
10066118:	5c41      	ldrb	r1, [r0, r1]
1006611a:	07c9      	lsls	r1, r1, #31
1006611c:	d106      	bne.n	1006612c <smp_pp3_keys_distribution_completed+0x18>
1006611e:	2111      	movs	r1, #17
10066120:	5641      	ldrsb	r1, [r0, r1]
10066122:	2900      	cmp	r1, #0
10066124:	d502      	bpl.n	1006612c <smp_pp3_keys_distribution_completed+0x18>
10066126:	7e81      	ldrb	r1, [r0, #26]
10066128:	068a      	lsls	r2, r1, #26
1006612a:	d402      	bmi.n	10066132 <smp_pp3_keys_distribution_completed+0x1e>
1006612c:	f7ff fe1c 	bl	10065d68 <smp_pp3_pairing_completed_successful>
10066130:	bd80      	pop	{r7, pc}
10066132:	2204      	movs	r2, #4
10066134:	4311      	orrs	r1, r2
10066136:	7681      	strb	r1, [r0, #26]
10066138:	f7ff fe13 	bl	10065d62 <smp_start_encryption_ucfg_weak>
1006613c:	bd80      	pop	{r7, pc}
	...

10066140 <smp_pp3_keys_distribution_send>:
10066140:	b5f0      	push	{r4, r5, r6, r7, lr}
10066142:	b089      	sub	sp, #36	@ 0x24
10066144:	4604      	mov	r4, r0
10066146:	a808      	add	r0, sp, #32
10066148:	2600      	movs	r6, #0
1006614a:	8006      	strh	r6, [r0, #0]
1006614c:	8921      	ldrh	r1, [r4, #8]
1006614e:	2215      	movs	r2, #21
10066150:	4630      	mov	r0, r6
10066152:	f7ec ff91 	bl	10053078 <ACL_pkt_get>
10066156:	2800      	cmp	r0, #0
10066158:	d02d      	beq.n	100661b6 <smp_pp3_keys_distribution_send+0x76>
1006615a:	4605      	mov	r5, r0
1006615c:	2060      	movs	r0, #96	@ 0x60
1006615e:	5c20      	ldrb	r0, [r4, r0]
10066160:	06c0      	lsls	r0, r0, #27
10066162:	d40b      	bmi.n	1006617c <smp_pp3_keys_distribution_send+0x3c>
10066164:	4627      	mov	r7, r4
10066166:	3760      	adds	r7, #96	@ 0x60
10066168:	4620      	mov	r0, r4
1006616a:	301c      	adds	r0, #28
1006616c:	2102      	movs	r1, #2
1006616e:	2200      	movs	r2, #0
10066170:	f7fc fad8 	bl	10062724 <HAL_Generate_Random_Bytes_To>
10066174:	7838      	ldrb	r0, [r7, #0]
10066176:	2110      	movs	r1, #16
10066178:	4301      	orrs	r1, r0
1006617a:	7039      	strb	r1, [r7, #0]
1006617c:	7aa0      	ldrb	r0, [r4, #10]
1006617e:	38d1      	subs	r0, #209	@ 0xd1
10066180:	2804      	cmp	r0, #4
10066182:	d875      	bhi.n	10066270 <smp_pp3_keys_distribution_send+0x130>
10066184:	4478      	add	r0, pc
10066186:	7900      	ldrb	r0, [r0, #4]
10066188:	0040      	lsls	r0, r0, #1
1006618a:	4487      	add	pc, r0
1006618c:	4e381902 	.word	0x4e381902
10066190:	0060      	.short	0x0060
10066192:	483c      	ldr	r0, [pc, #240]	@ (10066284 <__arm_cp.2_0>)
10066194:	6800      	ldr	r0, [r0, #0]
10066196:	4621      	mov	r1, r4
10066198:	311c      	adds	r1, #28
1006619a:	3008      	adds	r0, #8
1006619c:	aa08      	add	r2, sp, #32
1006619e:	ae04      	add	r6, sp, #16
100661a0:	4633      	mov	r3, r6
100661a2:	f7f9 fc95 	bl	1005fad0 <smp_crt_diversify>
100661a6:	6868      	ldr	r0, [r5, #4]
100661a8:	2106      	movs	r1, #6
100661aa:	7201      	strb	r1, [r0, #8]
100661ac:	2011      	movs	r0, #17
100661ae:	8068      	strh	r0, [r5, #2]
100661b0:	7c22      	ldrb	r2, [r4, #16]
100661b2:	2105      	movs	r1, #5
100661b4:	e058      	b.n	10066268 <smp_pp3_keys_distribution_send+0x128>
100661b6:	200e      	movs	r0, #14
100661b8:	2100      	movs	r1, #0
100661ba:	f7fb ff81 	bl	100620c0 <tsk_wait_resource_idx>
100661be:	e05f      	b.n	10066280 <smp_pp3_keys_distribution_send+0x140>
100661c0:	ae04      	add	r6, sp, #16
100661c2:	2108      	movs	r1, #8
100661c4:	9102      	str	r1, [sp, #8]
100661c6:	2200      	movs	r2, #0
100661c8:	4630      	mov	r0, r6
100661ca:	9601      	str	r6, [sp, #4]
100661cc:	f7fc faaa 	bl	10062724 <HAL_Generate_Random_Bytes_To>
100661d0:	4620      	mov	r0, r4
100661d2:	301c      	adds	r0, #28
100661d4:	af08      	add	r7, sp, #32
100661d6:	4631      	mov	r1, r6
100661d8:	463a      	mov	r2, r7
100661da:	f7f9 fc43 	bl	1005fa64 <smp_sap_crt_generate_ediv>
100661de:	200b      	movs	r0, #11
100661e0:	8068      	strh	r0, [r5, #2]
100661e2:	6868      	ldr	r0, [r5, #4]
100661e4:	2607      	movs	r6, #7
100661e6:	7206      	strb	r6, [r0, #8]
100661e8:	2105      	movs	r1, #5
100661ea:	2202      	movs	r2, #2
100661ec:	4628      	mov	r0, r5
100661ee:	463b      	mov	r3, r7
100661f0:	f7ec ffa2 	bl	10053138 <ACL_pkt_write>
100661f4:	4628      	mov	r0, r5
100661f6:	4631      	mov	r1, r6
100661f8:	9a02      	ldr	r2, [sp, #8]
100661fa:	9b01      	ldr	r3, [sp, #4]
100661fc:	e036      	b.n	1006626c <smp_pp3_keys_distribution_send+0x12c>
100661fe:	2011      	movs	r0, #17
10066200:	8068      	strh	r0, [r5, #2]
10066202:	6868      	ldr	r0, [r5, #4]
10066204:	2108      	movs	r1, #8
10066206:	7201      	strb	r1, [r0, #8]
10066208:	a804      	add	r0, sp, #16
1006620a:	2100      	movs	r1, #0
1006620c:	2210      	movs	r2, #16
1006620e:	f7df fe43 	bl	10045e98 <BLEPLAT_MemSet>
10066212:	f7ee f9c5 	bl	100545a0 <GapIsPrivacySupported>
10066216:	2800      	cmp	r0, #0
10066218:	d002      	beq.n	10066220 <smp_pp3_keys_distribution_send+0xe0>
1006621a:	a804      	add	r0, sp, #16
1006621c:	f7f9 fc6c 	bl	1005faf8 <smp_sap_crt_generate_local_irk>
10066220:	2105      	movs	r1, #5
10066222:	2210      	movs	r2, #16
10066224:	ab04      	add	r3, sp, #16
10066226:	4628      	mov	r0, r5
10066228:	e020      	b.n	1006626c <smp_pp3_keys_distribution_send+0x12c>
1006622a:	a803      	add	r0, sp, #12
1006622c:	7006      	strb	r6, [r0, #0]
1006622e:	ae04      	add	r6, sp, #16
10066230:	4631      	mov	r1, r6
10066232:	f7ff fc3d 	bl	10065ab0 <smp_dep_gap_get_local_identity_address>
10066236:	2008      	movs	r0, #8
10066238:	8068      	strh	r0, [r5, #2]
1006623a:	6868      	ldr	r0, [r5, #4]
1006623c:	2109      	movs	r1, #9
1006623e:	7201      	strb	r1, [r0, #8]
10066240:	6868      	ldr	r0, [r5, #4]
10066242:	9903      	ldr	r1, [sp, #12]
10066244:	7241      	strb	r1, [r0, #9]
10066246:	2106      	movs	r1, #6
10066248:	4628      	mov	r0, r5
1006624a:	460a      	mov	r2, r1
1006624c:	e00d      	b.n	1006626a <smp_pp3_keys_distribution_send+0x12a>
1006624e:	2011      	movs	r0, #17
10066250:	8068      	strh	r0, [r5, #2]
10066252:	6868      	ldr	r0, [r5, #4]
10066254:	210a      	movs	r1, #10
10066256:	7201      	strb	r1, [r0, #8]
10066258:	4620      	mov	r0, r4
1006625a:	301c      	adds	r0, #28
1006625c:	ae04      	add	r6, sp, #16
1006625e:	4631      	mov	r1, r6
10066260:	f7f9 fccc 	bl	1005fbfc <smp_crt_generate_csrk>
10066264:	2105      	movs	r1, #5
10066266:	2210      	movs	r2, #16
10066268:	4628      	mov	r0, r5
1006626a:	4633      	mov	r3, r6
1006626c:	f7ec ff64 	bl	10053138 <ACL_pkt_write>
10066270:	4620      	mov	r0, r4
10066272:	4629      	mov	r1, r5
10066274:	f7ff fc34 	bl	10065ae0 <smp_dep_l2c_send_acl_packet>
10066278:	2800      	cmp	r0, #0
1006627a:	d101      	bne.n	10066280 <smp_pp3_keys_distribution_send+0x140>
1006627c:	20dd      	movs	r0, #221	@ 0xdd
1006627e:	72a0      	strb	r0, [r4, #10]
10066280:	b009      	add	sp, #36	@ 0x24
10066282:	bdf0      	pop	{r4, r5, r6, r7, pc}

10066284 <__arm_cp.2_0>:
10066284:	20001120 	.word	0x20001120

10066288 <smp_pp3_keys_distribution_signaling_ack>:
10066288:	b580      	push	{r7, lr}
1006628a:	7a82      	ldrb	r2, [r0, #10]
1006628c:	2add      	cmp	r2, #221	@ 0xdd
1006628e:	d123      	bne.n	100662d8 <smp_pp3_keys_distribution_signaling_ack+0x50>
10066290:	1f8a      	subs	r2, r1, #6
10066292:	2a04      	cmp	r2, #4
10066294:	d81e      	bhi.n	100662d4 <smp_pp3_keys_distribution_signaling_ack+0x4c>
10066296:	21d2      	movs	r1, #210	@ 0xd2
10066298:	447a      	add	r2, pc
1006629a:	7912      	ldrb	r2, [r2, #4]
1006629c:	0052      	lsls	r2, r2, #1
1006629e:	4497      	add	pc, r2
100662a0:	07110218 	.word	0x07110218
100662a4:	000a      	.short	0x000a
100662a6:	7c81      	ldrb	r1, [r0, #18]
100662a8:	078a      	lsls	r2, r1, #30
100662aa:	d502      	bpl.n	100662b2 <smp_pp3_keys_distribution_signaling_ack+0x2a>
100662ac:	21d3      	movs	r1, #211	@ 0xd3
100662ae:	e010      	b.n	100662d2 <smp_pp3_keys_distribution_signaling_ack+0x4a>
100662b0:	7c81      	ldrb	r1, [r0, #18]
100662b2:	0749      	lsls	r1, r1, #29
100662b4:	d40c      	bmi.n	100662d0 <smp_pp3_keys_distribution_signaling_ack+0x48>
100662b6:	2160      	movs	r1, #96	@ 0x60
100662b8:	5c41      	ldrb	r1, [r0, r1]
100662ba:	07c9      	lsls	r1, r1, #31
100662bc:	d104      	bne.n	100662c8 <smp_pp3_keys_distribution_signaling_ack+0x40>
100662be:	f7ff ff29 	bl	10066114 <smp_pp3_keys_distribution_completed>
100662c2:	bd80      	pop	{r7, pc}
100662c4:	21d4      	movs	r1, #212	@ 0xd4
100662c6:	e004      	b.n	100662d2 <smp_pp3_keys_distribution_signaling_ack+0x4a>
100662c8:	2101      	movs	r1, #1
100662ca:	f7ff feef 	bl	100660ac <smp_pp3_keys_distribution_start>
100662ce:	bd80      	pop	{r7, pc}
100662d0:	21d5      	movs	r1, #213	@ 0xd5
100662d2:	7281      	strb	r1, [r0, #10]
100662d4:	f7ff ff34 	bl	10066140 <smp_pp3_keys_distribution_send>
100662d8:	bd80      	pop	{r7, pc}
	...

100662dc <smp_pp3_keys_distribution_receive>:
100662dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100662de:	b085      	sub	sp, #20
100662e0:	4607      	mov	r7, r0
100662e2:	6840      	ldr	r0, [r0, #4]
100662e4:	7a05      	ldrb	r5, [r0, #8]
100662e6:	1fa8      	subs	r0, r5, #6
100662e8:	2804      	cmp	r0, #4
100662ea:	d823      	bhi.n	10066334 <smp_pp3_keys_distribution_receive+0x58>
100662ec:	460c      	mov	r4, r1
100662ee:	7a88      	ldrb	r0, [r1, #10]
100662f0:	2686      	movs	r6, #134	@ 0x86
100662f2:	28d0      	cmp	r0, #208	@ 0xd0
100662f4:	d11f      	bne.n	10066336 <smp_pp3_keys_distribution_receive+0x5a>
100662f6:	4620      	mov	r0, r4
100662f8:	3059      	adds	r0, #89	@ 0x59
100662fa:	9001      	str	r0, [sp, #4]
100662fc:	8920      	ldrh	r0, [r4, #8]
100662fe:	f7fa fa65 	bl	100607cc <smp_get_remote_device_list_index>
10066302:	4602      	mov	r2, r0
10066304:	2000      	movs	r0, #0
10066306:	4b44      	ldr	r3, [pc, #272]	@ (10066418 <__arm_cp.4_0>)
10066308:	9002      	str	r0, [sp, #8]
1006630a:	4601      	mov	r1, r0
1006630c:	f7fb f8de 	bl	100614cc <smp_timer_reset>
10066310:	2d06      	cmp	r5, #6
10066312:	d005      	beq.n	10066320 <smp_pp3_keys_distribution_receive+0x44>
10066314:	2d09      	cmp	r5, #9
10066316:	d011      	beq.n	1006633c <smp_pp3_keys_distribution_receive+0x60>
10066318:	2d08      	cmp	r5, #8
1006631a:	d034      	beq.n	10066386 <smp_pp3_keys_distribution_receive+0xaa>
1006631c:	2d07      	cmp	r5, #7
1006631e:	d13d      	bne.n	1006639c <smp_pp3_keys_distribution_receive+0xc0>
10066320:	7de0      	ldrb	r0, [r4, #23]
10066322:	0700      	lsls	r0, r0, #28
10066324:	d407      	bmi.n	10066336 <smp_pp3_keys_distribution_receive+0x5a>
10066326:	7c60      	ldrb	r0, [r4, #17]
10066328:	07c0      	lsls	r0, r0, #31
1006632a:	d004      	beq.n	10066336 <smp_pp3_keys_distribution_receive+0x5a>
1006632c:	2d06      	cmp	r5, #6
1006632e:	d144      	bne.n	100663ba <smp_pp3_keys_distribution_receive+0xde>
10066330:	3428      	adds	r4, #40	@ 0x28
10066332:	e02c      	b.n	1006638e <smp_pp3_keys_distribution_receive+0xb2>
10066334:	2684      	movs	r6, #132	@ 0x84
10066336:	4630      	mov	r0, r6
10066338:	b005      	add	sp, #20
1006633a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006633c:	7c60      	ldrb	r0, [r4, #17]
1006633e:	0780      	lsls	r0, r0, #30
10066340:	d5f9      	bpl.n	10066336 <smp_pp3_keys_distribution_receive+0x5a>
10066342:	ab03      	add	r3, sp, #12
10066344:	2600      	movs	r6, #0
10066346:	809e      	strh	r6, [r3, #4]
10066348:	9603      	str	r6, [sp, #12]
1006634a:	2106      	movs	r1, #6
1006634c:	4638      	mov	r0, r7
1006634e:	460a      	mov	r2, r1
10066350:	f7ec fec7 	bl	100530e2 <ACL_pkt_cmp>
10066354:	2800      	cmp	r0, #0
10066356:	d045      	beq.n	100663e4 <smp_pp3_keys_distribution_receive+0x108>
10066358:	6878      	ldr	r0, [r7, #4]
1006635a:	7a40      	ldrb	r0, [r0, #9]
1006635c:	9d01      	ldr	r5, [sp, #4]
1006635e:	7028      	strb	r0, [r5, #0]
10066360:	4623      	mov	r3, r4
10066362:	335a      	adds	r3, #90	@ 0x5a
10066364:	2106      	movs	r1, #6
10066366:	4638      	mov	r0, r7
10066368:	460a      	mov	r2, r1
1006636a:	f7ec fec3 	bl	100530f4 <ACL_pkt_read>
1006636e:	7828      	ldrb	r0, [r5, #0]
10066370:	2801      	cmp	r0, #1
10066372:	d103      	bne.n	1006637c <smp_pp3_keys_distribution_receive+0xa0>
10066374:	79a8      	ldrb	r0, [r5, #6]
10066376:	0980      	lsrs	r0, r0, #6
10066378:	2803      	cmp	r0, #3
1006637a:	d345      	bcc.n	10066408 <smp_pp3_keys_distribution_receive+0x12c>
1006637c:	7c61      	ldrb	r1, [r4, #17]
1006637e:	2020      	movs	r0, #32
10066380:	4308      	orrs	r0, r1
10066382:	7460      	strb	r0, [r4, #17]
10066384:	e02f      	b.n	100663e6 <smp_pp3_keys_distribution_receive+0x10a>
10066386:	7c60      	ldrb	r0, [r4, #17]
10066388:	0780      	lsls	r0, r0, #30
1006638a:	d5d4      	bpl.n	10066336 <smp_pp3_keys_distribution_receive+0x5a>
1006638c:	3438      	adds	r4, #56	@ 0x38
1006638e:	2105      	movs	r1, #5
10066390:	2210      	movs	r2, #16
10066392:	4638      	mov	r0, r7
10066394:	4623      	mov	r3, r4
10066396:	f7ec fead 	bl	100530f4 <ACL_pkt_read>
1006639a:	e033      	b.n	10066404 <smp_pp3_keys_distribution_receive+0x128>
1006639c:	7c60      	ldrb	r0, [r4, #17]
1006639e:	0740      	lsls	r0, r0, #29
100663a0:	d5c9      	bpl.n	10066336 <smp_pp3_keys_distribution_receive+0x5a>
100663a2:	4623      	mov	r3, r4
100663a4:	3348      	adds	r3, #72	@ 0x48
100663a6:	2105      	movs	r1, #5
100663a8:	2210      	movs	r2, #16
100663aa:	4638      	mov	r0, r7
100663ac:	f7ec fea2 	bl	100530f4 <ACL_pkt_read>
100663b0:	7c60      	ldrb	r0, [r4, #17]
100663b2:	2140      	movs	r1, #64	@ 0x40
100663b4:	4301      	orrs	r1, r0
100663b6:	7461      	strb	r1, [r4, #17]
100663b8:	e017      	b.n	100663ea <smp_pp3_keys_distribution_receive+0x10e>
100663ba:	6878      	ldr	r0, [r7, #4]
100663bc:	7a40      	ldrb	r0, [r0, #9]
100663be:	77a0      	strb	r0, [r4, #30]
100663c0:	6878      	ldr	r0, [r7, #4]
100663c2:	7a80      	ldrb	r0, [r0, #10]
100663c4:	77e0      	strb	r0, [r4, #31]
100663c6:	4623      	mov	r3, r4
100663c8:	3320      	adds	r3, #32
100663ca:	2107      	movs	r1, #7
100663cc:	2208      	movs	r2, #8
100663ce:	4638      	mov	r0, r7
100663d0:	f7ec fe90 	bl	100530f4 <ACL_pkt_read>
100663d4:	7c60      	ldrb	r0, [r4, #17]
100663d6:	2180      	movs	r1, #128	@ 0x80
100663d8:	4301      	orrs	r1, r0
100663da:	7461      	strb	r1, [r4, #17]
100663dc:	0740      	lsls	r0, r0, #29
100663de:	0f80      	lsrs	r0, r0, #30
100663e0:	d110      	bne.n	10066404 <smp_pp3_keys_distribution_receive+0x128>
100663e2:	e002      	b.n	100663ea <smp_pp3_keys_distribution_receive+0x10e>
100663e4:	7c60      	ldrb	r0, [r4, #17]
100663e6:	0740      	lsls	r0, r0, #29
100663e8:	d4a5      	bmi.n	10066336 <smp_pp3_keys_distribution_receive+0x5a>
100663ea:	9801      	ldr	r0, [sp, #4]
100663ec:	79c0      	ldrb	r0, [r0, #7]
100663ee:	07c0      	lsls	r0, r0, #31
100663f0:	d105      	bne.n	100663fe <smp_pp3_keys_distribution_receive+0x122>
100663f2:	2600      	movs	r6, #0
100663f4:	4620      	mov	r0, r4
100663f6:	4631      	mov	r1, r6
100663f8:	f7ff fe58 	bl	100660ac <smp_pp3_keys_distribution_start>
100663fc:	e79b      	b.n	10066336 <smp_pp3_keys_distribution_receive+0x5a>
100663fe:	4620      	mov	r0, r4
10066400:	f7ff fcb2 	bl	10065d68 <smp_pp3_pairing_completed_successful>
10066404:	9e02      	ldr	r6, [sp, #8]
10066406:	e796      	b.n	10066336 <smp_pp3_keys_distribution_receive+0x5a>
10066408:	2108      	movs	r1, #8
1006640a:	2200      	movs	r2, #0
1006640c:	2301      	movs	r3, #1
1006640e:	4620      	mov	r0, r4
10066410:	f7ff fd62 	bl	10065ed8 <smp_pp3_pairing_failed_send>
10066414:	4606      	mov	r6, r0
10066416:	e78e      	b.n	10066336 <smp_pp3_keys_distribution_receive+0x5a>

10066418 <__arm_cp.4_0>:
10066418:	00007530 	.word	0x00007530

1006641c <smp_cmn_rejectlist_init>:
1006641c:	b580      	push	{r7, lr}
1006641e:	2003      	movs	r0, #3
10066420:	2108      	movs	r1, #8
10066422:	f7f8 fd93 	bl	1005ef4c <csmem_mem_0_assign>
10066426:	4902      	ldr	r1, [pc, #8]	@ (10066430 <__arm_cp.0_0>)
10066428:	6809      	ldr	r1, [r1, #0]
1006642a:	22a8      	movs	r2, #168	@ 0xa8
1006642c:	5088      	str	r0, [r1, r2]
1006642e:	bd80      	pop	{r7, pc}

10066430 <__arm_cp.0_0>:
10066430:	200011c0 	.word	0x200011c0

10066434 <smp_cmn_repeated_attacks_protection_start>:
10066434:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10066436:	9101      	str	r1, [sp, #4]
10066438:	2003      	movs	r0, #3
1006643a:	9002      	str	r0, [sp, #8]
1006643c:	2700      	movs	r7, #0
1006643e:	4a30      	ldr	r2, [pc, #192]	@ (10066500 <__arm_cp.1_0>)
10066440:	463d      	mov	r5, r7
10066442:	4616      	mov	r6, r2
10066444:	6810      	ldr	r0, [r2, #0]
10066446:	24a8      	movs	r4, #168	@ 0xa8
10066448:	5900      	ldr	r0, [r0, r4]
1006644a:	19c0      	adds	r0, r0, r7
1006644c:	1c80      	adds	r0, r0, #2
1006644e:	2206      	movs	r2, #6
10066450:	9901      	ldr	r1, [sp, #4]
10066452:	f7df fd31 	bl	10045eb8 <BLEPLAT_MemCmp>
10066456:	2800      	cmp	r0, #0
10066458:	d031      	beq.n	100664be <smp_cmn_repeated_attacks_protection_start+0x8a>
1006645a:	9802      	ldr	r0, [sp, #8]
1006645c:	2803      	cmp	r0, #3
1006645e:	4632      	mov	r2, r6
10066460:	d109      	bne.n	10066476 <smp_cmn_repeated_attacks_protection_start+0x42>
10066462:	6810      	ldr	r0, [r2, #0]
10066464:	5900      	ldr	r0, [r0, r4]
10066466:	5dc0      	ldrb	r0, [r0, r7]
10066468:	0680      	lsls	r0, r0, #26
1006646a:	0f80      	lsrs	r0, r0, #30
1006646c:	d001      	beq.n	10066472 <smp_cmn_repeated_attacks_protection_start+0x3e>
1006646e:	2003      	movs	r0, #3
10066470:	e000      	b.n	10066474 <smp_cmn_repeated_attacks_protection_start+0x40>
10066472:	b2e8      	uxtb	r0, r5
10066474:	9002      	str	r0, [sp, #8]
10066476:	3708      	adds	r7, #8
10066478:	1c6d      	adds	r5, r5, #1
1006647a:	2d03      	cmp	r5, #3
1006647c:	d1e1      	bne.n	10066442 <smp_cmn_repeated_attacks_protection_start+0xe>
1006647e:	6810      	ldr	r0, [r2, #0]
10066480:	2541      	movs	r5, #65	@ 0x41
10066482:	5d41      	ldrb	r1, [r0, r5]
10066484:	30a8      	adds	r0, #168	@ 0xa8
10066486:	2902      	cmp	r1, #2
10066488:	d836      	bhi.n	100664f8 <smp_cmn_repeated_attacks_protection_start+0xc4>
1006648a:	9902      	ldr	r1, [sp, #8]
1006648c:	00cf      	lsls	r7, r1, #3
1006648e:	6800      	ldr	r0, [r0, #0]
10066490:	19c0      	adds	r0, r0, r7
10066492:	1c80      	adds	r0, r0, #2
10066494:	4616      	mov	r6, r2
10066496:	2206      	movs	r2, #6
10066498:	9901      	ldr	r1, [sp, #4]
1006649a:	f7df fced 	bl	10045e78 <BLEPLAT_MemCpy>
1006649e:	6830      	ldr	r0, [r6, #0]
100664a0:	5900      	ldr	r0, [r0, r4]
100664a2:	2110      	movs	r1, #16
100664a4:	55c1      	strb	r1, [r0, r7]
100664a6:	9802      	ldr	r0, [sp, #8]
100664a8:	b2c2      	uxtb	r2, r0
100664aa:	2000      	movs	r0, #0
100664ac:	2101      	movs	r1, #1
100664ae:	4b15      	ldr	r3, [pc, #84]	@ (10066504 <__arm_cp.1_1>)
100664b0:	f7fb f80c 	bl	100614cc <smp_timer_reset>
100664b4:	6830      	ldr	r0, [r6, #0]
100664b6:	5d41      	ldrb	r1, [r0, r5]
100664b8:	1c49      	adds	r1, r1, #1
100664ba:	5541      	strb	r1, [r0, r5]
100664bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100664be:	6830      	ldr	r0, [r6, #0]
100664c0:	5900      	ldr	r0, [r0, r4]
100664c2:	5dc3      	ldrb	r3, [r0, r7]
100664c4:	21cf      	movs	r1, #207	@ 0xcf
100664c6:	4019      	ands	r1, r3
100664c8:	3110      	adds	r1, #16
100664ca:	2203      	movs	r2, #3
100664cc:	401a      	ands	r2, r3
100664ce:	1c53      	adds	r3, r2, #1
100664d0:	2a03      	cmp	r2, #3
100664d2:	d002      	beq.n	100664da <smp_cmn_repeated_attacks_protection_start+0xa6>
100664d4:	24dc      	movs	r4, #220	@ 0xdc
100664d6:	4021      	ands	r1, r4
100664d8:	4319      	orrs	r1, r3
100664da:	55c1      	strb	r1, [r0, r7]
100664dc:	2a03      	cmp	r2, #3
100664de:	d100      	bne.n	100664e2 <smp_cmn_repeated_attacks_protection_start+0xae>
100664e0:	4613      	mov	r3, r2
100664e2:	a009      	add	r0, pc, #36	@ (adr r0, 10066508 <__arm_cp.1_1+0x4>)
100664e4:	5cc0      	ldrb	r0, [r0, r3]
100664e6:	217d      	movs	r1, #125	@ 0x7d
100664e8:	00cb      	lsls	r3, r1, #3
100664ea:	4343      	muls	r3, r0
100664ec:	b2ea      	uxtb	r2, r5
100664ee:	2000      	movs	r0, #0
100664f0:	2101      	movs	r1, #1
100664f2:	f7fa ffeb 	bl	100614cc <smp_timer_reset>
100664f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100664f8:	2101      	movs	r1, #1
100664fa:	7201      	strb	r1, [r0, #8]
100664fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100664fe:	46c0      	nop			@ (mov r8, r8)

10066500 <__arm_cp.1_0>:
10066500:	200011c0 	.word	0x200011c0

10066504 <__arm_cp.1_1>:
10066504:	00000bb8 	.word	0x00000bb8
10066508:	140a0503 	.word	0x140a0503

1006650c <smp_cmn_repeated_attacks_timer_cb>:
1006650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006650e:	4e29      	ldr	r6, [pc, #164]	@ (100665b4 <__arm_cp.2_0>)
10066510:	6831      	ldr	r1, [r6, #0]
10066512:	25a8      	movs	r5, #168	@ 0xa8
10066514:	5949      	ldr	r1, [r1, r5]
10066516:	00c4      	lsls	r4, r0, #3
10066518:	5d0a      	ldrb	r2, [r1, r4]
1006651a:	06d3      	lsls	r3, r2, #27
1006651c:	d40e      	bmi.n	1006653c <smp_cmn_repeated_attacks_timer_cb+0x30>
1006651e:	0693      	lsls	r3, r2, #26
10066520:	d546      	bpl.n	100665b0 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10066522:	1909      	adds	r1, r1, r4
10066524:	0793      	lsls	r3, r2, #30
10066526:	d035      	beq.n	10066594 <smp_cmn_repeated_attacks_timer_cb+0x88>
10066528:	23fc      	movs	r3, #252	@ 0xfc
1006652a:	4013      	ands	r3, r2
1006652c:	1e52      	subs	r2, r2, #1
1006652e:	2403      	movs	r4, #3
10066530:	4014      	ands	r4, r2
10066532:	18e2      	adds	r2, r4, r3
10066534:	700a      	strb	r2, [r1, #0]
10066536:	f000 f841 	bl	100665bc <smp_cmn_rejectlist_start_probation_timer2>
1006653a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006653c:	f000 f83e 	bl	100665bc <smp_cmn_rejectlist_start_probation_timer2>
10066540:	6830      	ldr	r0, [r6, #0]
10066542:	5940      	ldr	r0, [r0, r5]
10066544:	1900      	adds	r0, r0, r4
10066546:	1c84      	adds	r4, r0, #2
10066548:	2065      	movs	r0, #101	@ 0x65
1006654a:	43c6      	mvns	r6, r0
1006654c:	4637      	mov	r7, r6
1006654e:	3765      	adds	r7, #101	@ 0x65
10066550:	4819      	ldr	r0, [pc, #100]	@ (100665b8 <__arm_cp.2_1>)
10066552:	6800      	ldr	r0, [r0, #0]
10066554:	2134      	movs	r1, #52	@ 0x34
10066556:	5c40      	ldrb	r0, [r0, r1]
10066558:	1c7f      	adds	r7, r7, #1
1006655a:	4287      	cmp	r7, r0
1006655c:	d228      	bcs.n	100665b0 <smp_cmn_repeated_attacks_timer_cb+0xa4>
1006655e:	4815      	ldr	r0, [pc, #84]	@ (100665b4 <__arm_cp.2_0>)
10066560:	6800      	ldr	r0, [r0, #0]
10066562:	25a4      	movs	r5, #164	@ 0xa4
10066564:	5940      	ldr	r0, [r0, r5]
10066566:	1980      	adds	r0, r0, r6
10066568:	3670      	adds	r6, #112	@ 0x70
1006656a:	3068      	adds	r0, #104	@ 0x68
1006656c:	2206      	movs	r2, #6
1006656e:	4621      	mov	r1, r4
10066570:	f7df fca2 	bl	10045eb8 <BLEPLAT_MemCmp>
10066574:	2800      	cmp	r0, #0
10066576:	d1eb      	bne.n	10066550 <smp_cmn_repeated_attacks_timer_cb+0x44>
10066578:	480e      	ldr	r0, [pc, #56]	@ (100665b4 <__arm_cp.2_0>)
1006657a:	6800      	ldr	r0, [r0, #0]
1006657c:	5940      	ldr	r0, [r0, r5]
1006657e:	5d81      	ldrb	r1, [r0, r6]
10066580:	29fb      	cmp	r1, #251	@ 0xfb
10066582:	d115      	bne.n	100665b0 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10066584:	2110      	movs	r1, #16
10066586:	5581      	strb	r1, [r0, r6]
10066588:	200e      	movs	r0, #14
1006658a:	f7fb fd87 	bl	1006209c <tsk_notify_idx>
1006658e:	f7dd fc86 	bl	10043e9e <BLE_STACK_ProcessRequest>
10066592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066594:	4635      	mov	r5, r6
10066596:	2400      	movs	r4, #0
10066598:	2208      	movs	r2, #8
1006659a:	4608      	mov	r0, r1
1006659c:	4621      	mov	r1, r4
1006659e:	f7df fc7b 	bl	10045e98 <BLEPLAT_MemSet>
100665a2:	6830      	ldr	r0, [r6, #0]
100665a4:	21b0      	movs	r1, #176	@ 0xb0
100665a6:	5444      	strb	r4, [r0, r1]
100665a8:	2141      	movs	r1, #65	@ 0x41
100665aa:	5c42      	ldrb	r2, [r0, r1]
100665ac:	1e52      	subs	r2, r2, #1
100665ae:	5442      	strb	r2, [r0, r1]
100665b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100665b2:	46c0      	nop			@ (mov r8, r8)

100665b4 <__arm_cp.2_0>:
100665b4:	200011c0 	.word	0x200011c0

100665b8 <__arm_cp.2_1>:
100665b8:	20001120 	.word	0x20001120

100665bc <smp_cmn_rejectlist_start_probation_timer2>:
100665bc:	b510      	push	{r4, lr}
100665be:	4604      	mov	r4, r0
100665c0:	2000      	movs	r0, #0
100665c2:	2101      	movs	r1, #1
100665c4:	4b07      	ldr	r3, [pc, #28]	@ (100665e4 <__arm_cp.3_0>)
100665c6:	4622      	mov	r2, r4
100665c8:	f7fa ff80 	bl	100614cc <smp_timer_reset>
100665cc:	4806      	ldr	r0, [pc, #24]	@ (100665e8 <__arm_cp.3_1>)
100665ce:	6800      	ldr	r0, [r0, #0]
100665d0:	21a8      	movs	r1, #168	@ 0xa8
100665d2:	5840      	ldr	r0, [r0, r1]
100665d4:	00e1      	lsls	r1, r4, #3
100665d6:	5c42      	ldrb	r2, [r0, r1]
100665d8:	23cf      	movs	r3, #207	@ 0xcf
100665da:	4013      	ands	r3, r2
100665dc:	3320      	adds	r3, #32
100665de:	5443      	strb	r3, [r0, r1]
100665e0:	bd10      	pop	{r4, pc}
100665e2:	46c0      	nop			@ (mov r8, r8)

100665e4 <__arm_cp.3_0>:
100665e4:	00004e20 	.word	0x00004e20

100665e8 <__arm_cp.3_1>:
100665e8:	200011c0 	.word	0x200011c0

100665ec <smp_cmn_is_peer_rejectlisted>:
100665ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100665ee:	460c      	mov	r4, r1
100665f0:	2007      	movs	r0, #7
100665f2:	43c0      	mvns	r0, r0
100665f4:	4e0c      	ldr	r6, [pc, #48]	@ (10066628 <__arm_cp.4_0>)
100665f6:	4605      	mov	r5, r0
100665f8:	3508      	adds	r5, #8
100665fa:	2d18      	cmp	r5, #24
100665fc:	d010      	beq.n	10066620 <smp_cmn_is_peer_rejectlisted+0x34>
100665fe:	6831      	ldr	r1, [r6, #0]
10066600:	27a8      	movs	r7, #168	@ 0xa8
10066602:	59c9      	ldr	r1, [r1, r7]
10066604:	1808      	adds	r0, r1, r0
10066606:	300a      	adds	r0, #10
10066608:	2206      	movs	r2, #6
1006660a:	4621      	mov	r1, r4
1006660c:	f7df fc54 	bl	10045eb8 <BLEPLAT_MemCmp>
10066610:	2800      	cmp	r0, #0
10066612:	4628      	mov	r0, r5
10066614:	d1f0      	bne.n	100665f8 <smp_cmn_is_peer_rejectlisted+0xc>
10066616:	6830      	ldr	r0, [r6, #0]
10066618:	59c0      	ldr	r0, [r0, r7]
1006661a:	5d40      	ldrb	r0, [r0, r5]
1006661c:	06c0      	lsls	r0, r0, #27
1006661e:	d401      	bmi.n	10066624 <smp_cmn_is_peer_rejectlisted+0x38>
10066620:	2000      	movs	r0, #0
10066622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066624:	2001      	movs	r0, #1
10066626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10066628 <__arm_cp.4_0>:
10066628:	200011c0 	.word	0x200011c0

1006662c <__cvt>:
1006662c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006662e:	001f      	movs	r7, r3
10066630:	2300      	movs	r3, #0
10066632:	0016      	movs	r6, r2
10066634:	b08b      	sub	sp, #44	@ 0x2c
10066636:	429f      	cmp	r7, r3
10066638:	da04      	bge.n	10066644 <__cvt+0x18>
1006663a:	2180      	movs	r1, #128	@ 0x80
1006663c:	0609      	lsls	r1, r1, #24
1006663e:	187b      	adds	r3, r7, r1
10066640:	001f      	movs	r7, r3
10066642:	232d      	movs	r3, #45	@ 0x2d
10066644:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10066646:	9d14      	ldr	r5, [sp, #80]	@ 0x50
10066648:	7013      	strb	r3, [r2, #0]
1006664a:	2320      	movs	r3, #32
1006664c:	2203      	movs	r2, #3
1006664e:	439d      	bics	r5, r3
10066650:	2d46      	cmp	r5, #70	@ 0x46
10066652:	d007      	beq.n	10066664 <__cvt+0x38>
10066654:	002b      	movs	r3, r5
10066656:	3b45      	subs	r3, #69	@ 0x45
10066658:	4259      	negs	r1, r3
1006665a:	414b      	adcs	r3, r1
1006665c:	9910      	ldr	r1, [sp, #64]	@ 0x40
1006665e:	3a01      	subs	r2, #1
10066660:	18cb      	adds	r3, r1, r3
10066662:	9310      	str	r3, [sp, #64]	@ 0x40
10066664:	ab09      	add	r3, sp, #36	@ 0x24
10066666:	9304      	str	r3, [sp, #16]
10066668:	ab08      	add	r3, sp, #32
1006666a:	9303      	str	r3, [sp, #12]
1006666c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1006666e:	9200      	str	r2, [sp, #0]
10066670:	9302      	str	r3, [sp, #8]
10066672:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10066674:	0032      	movs	r2, r6
10066676:	9301      	str	r3, [sp, #4]
10066678:	003b      	movs	r3, r7
1006667a:	f001 fa5d 	bl	10067b38 <_dtoa_r>
1006667e:	0004      	movs	r4, r0
10066680:	2d47      	cmp	r5, #71	@ 0x47
10066682:	d11b      	bne.n	100666bc <__cvt+0x90>
10066684:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10066686:	07db      	lsls	r3, r3, #31
10066688:	d511      	bpl.n	100666ae <__cvt+0x82>
1006668a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1006668c:	18c3      	adds	r3, r0, r3
1006668e:	9307      	str	r3, [sp, #28]
10066690:	2200      	movs	r2, #0
10066692:	2300      	movs	r3, #0
10066694:	0030      	movs	r0, r6
10066696:	0039      	movs	r1, r7
10066698:	f7d9 ff78 	bl	1004058c <__aeabi_dcmpeq>
1006669c:	2800      	cmp	r0, #0
1006669e:	d001      	beq.n	100666a4 <__cvt+0x78>
100666a0:	9b07      	ldr	r3, [sp, #28]
100666a2:	9309      	str	r3, [sp, #36]	@ 0x24
100666a4:	2230      	movs	r2, #48	@ 0x30
100666a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100666a8:	9907      	ldr	r1, [sp, #28]
100666aa:	428b      	cmp	r3, r1
100666ac:	d320      	bcc.n	100666f0 <__cvt+0xc4>
100666ae:	0020      	movs	r0, r4
100666b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100666b2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100666b4:	1b1b      	subs	r3, r3, r4
100666b6:	6013      	str	r3, [r2, #0]
100666b8:	b00b      	add	sp, #44	@ 0x2c
100666ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100666bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100666be:	18c3      	adds	r3, r0, r3
100666c0:	9307      	str	r3, [sp, #28]
100666c2:	2d46      	cmp	r5, #70	@ 0x46
100666c4:	d1e4      	bne.n	10066690 <__cvt+0x64>
100666c6:	7803      	ldrb	r3, [r0, #0]
100666c8:	2b30      	cmp	r3, #48	@ 0x30
100666ca:	d10c      	bne.n	100666e6 <__cvt+0xba>
100666cc:	2200      	movs	r2, #0
100666ce:	2300      	movs	r3, #0
100666d0:	0030      	movs	r0, r6
100666d2:	0039      	movs	r1, r7
100666d4:	f7d9 ff5a 	bl	1004058c <__aeabi_dcmpeq>
100666d8:	2800      	cmp	r0, #0
100666da:	d104      	bne.n	100666e6 <__cvt+0xba>
100666dc:	2301      	movs	r3, #1
100666de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
100666e0:	1a9b      	subs	r3, r3, r2
100666e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
100666e4:	6013      	str	r3, [r2, #0]
100666e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100666e8:	9a07      	ldr	r2, [sp, #28]
100666ea:	681b      	ldr	r3, [r3, #0]
100666ec:	18d3      	adds	r3, r2, r3
100666ee:	e7ce      	b.n	1006668e <__cvt+0x62>
100666f0:	1c59      	adds	r1, r3, #1
100666f2:	9109      	str	r1, [sp, #36]	@ 0x24
100666f4:	701a      	strb	r2, [r3, #0]
100666f6:	e7d6      	b.n	100666a6 <__cvt+0x7a>

100666f8 <__exponent>:
100666f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100666fa:	232b      	movs	r3, #43	@ 0x2b
100666fc:	b085      	sub	sp, #20
100666fe:	0005      	movs	r5, r0
10066700:	1e0c      	subs	r4, r1, #0
10066702:	7002      	strb	r2, [r0, #0]
10066704:	da01      	bge.n	1006670a <__exponent+0x12>
10066706:	424c      	negs	r4, r1
10066708:	3302      	adds	r3, #2
1006670a:	706b      	strb	r3, [r5, #1]
1006670c:	2c09      	cmp	r4, #9
1006670e:	dd2c      	ble.n	1006676a <__exponent+0x72>
10066710:	ab02      	add	r3, sp, #8
10066712:	1dde      	adds	r6, r3, #7
10066714:	0020      	movs	r0, r4
10066716:	210a      	movs	r1, #10
10066718:	f7d9 ff16 	bl	10040548 <__aeabi_idivmod>
1006671c:	0037      	movs	r7, r6
1006671e:	3130      	adds	r1, #48	@ 0x30
10066720:	3e01      	subs	r6, #1
10066722:	0020      	movs	r0, r4
10066724:	7031      	strb	r1, [r6, #0]
10066726:	210a      	movs	r1, #10
10066728:	9401      	str	r4, [sp, #4]
1006672a:	f7d9 fe27 	bl	1004037c <__divsi3>
1006672e:	9b01      	ldr	r3, [sp, #4]
10066730:	0004      	movs	r4, r0
10066732:	2b63      	cmp	r3, #99	@ 0x63
10066734:	dcee      	bgt.n	10066714 <__exponent+0x1c>
10066736:	1eba      	subs	r2, r7, #2
10066738:	1ca8      	adds	r0, r5, #2
1006673a:	0001      	movs	r1, r0
1006673c:	0013      	movs	r3, r2
1006673e:	3430      	adds	r4, #48	@ 0x30
10066740:	7014      	strb	r4, [r2, #0]
10066742:	ac02      	add	r4, sp, #8
10066744:	3407      	adds	r4, #7
10066746:	429c      	cmp	r4, r3
10066748:	d80a      	bhi.n	10066760 <__exponent+0x68>
1006674a:	2300      	movs	r3, #0
1006674c:	4294      	cmp	r4, r2
1006674e:	d303      	bcc.n	10066758 <__exponent+0x60>
10066750:	3309      	adds	r3, #9
10066752:	aa02      	add	r2, sp, #8
10066754:	189b      	adds	r3, r3, r2
10066756:	1bdb      	subs	r3, r3, r7
10066758:	18c0      	adds	r0, r0, r3
1006675a:	1b40      	subs	r0, r0, r5
1006675c:	b005      	add	sp, #20
1006675e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066760:	781c      	ldrb	r4, [r3, #0]
10066762:	3301      	adds	r3, #1
10066764:	700c      	strb	r4, [r1, #0]
10066766:	3101      	adds	r1, #1
10066768:	e7eb      	b.n	10066742 <__exponent+0x4a>
1006676a:	2330      	movs	r3, #48	@ 0x30
1006676c:	18e4      	adds	r4, r4, r3
1006676e:	70ab      	strb	r3, [r5, #2]
10066770:	1d28      	adds	r0, r5, #4
10066772:	70ec      	strb	r4, [r5, #3]
10066774:	e7f1      	b.n	1006675a <__exponent+0x62>
	...

10066778 <_printf_float>:
10066778:	b5f0      	push	{r4, r5, r6, r7, lr}
1006677a:	b097      	sub	sp, #92	@ 0x5c
1006677c:	000d      	movs	r5, r1
1006677e:	920a      	str	r2, [sp, #40]	@ 0x28
10066780:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
10066782:	930b      	str	r3, [sp, #44]	@ 0x2c
10066784:	9009      	str	r0, [sp, #36]	@ 0x24
10066786:	f001 f8d5 	bl	10067934 <_localeconv_r>
1006678a:	6803      	ldr	r3, [r0, #0]
1006678c:	0018      	movs	r0, r3
1006678e:	930d      	str	r3, [sp, #52]	@ 0x34
10066790:	f7d9 fd4e 	bl	10040230 <strlen>
10066794:	2300      	movs	r3, #0
10066796:	900f      	str	r0, [sp, #60]	@ 0x3c
10066798:	9314      	str	r3, [sp, #80]	@ 0x50
1006679a:	7e2b      	ldrb	r3, [r5, #24]
1006679c:	2207      	movs	r2, #7
1006679e:	930c      	str	r3, [sp, #48]	@ 0x30
100667a0:	682b      	ldr	r3, [r5, #0]
100667a2:	930e      	str	r3, [sp, #56]	@ 0x38
100667a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
100667a6:	6823      	ldr	r3, [r4, #0]
100667a8:	05c9      	lsls	r1, r1, #23
100667aa:	d545      	bpl.n	10066838 <_printf_float+0xc0>
100667ac:	189b      	adds	r3, r3, r2
100667ae:	4393      	bics	r3, r2
100667b0:	001a      	movs	r2, r3
100667b2:	3208      	adds	r2, #8
100667b4:	6022      	str	r2, [r4, #0]
100667b6:	2201      	movs	r2, #1
100667b8:	681e      	ldr	r6, [r3, #0]
100667ba:	685f      	ldr	r7, [r3, #4]
100667bc:	007b      	lsls	r3, r7, #1
100667be:	085b      	lsrs	r3, r3, #1
100667c0:	9311      	str	r3, [sp, #68]	@ 0x44
100667c2:	9610      	str	r6, [sp, #64]	@ 0x40
100667c4:	64ae      	str	r6, [r5, #72]	@ 0x48
100667c6:	64ef      	str	r7, [r5, #76]	@ 0x4c
100667c8:	9810      	ldr	r0, [sp, #64]	@ 0x40
100667ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
100667cc:	4ba7      	ldr	r3, [pc, #668]	@ (10066a6c <_printf_float+0x2f4>)
100667ce:	4252      	negs	r2, r2
100667d0:	f7db ffa0 	bl	10042714 <__aeabi_dcmpun>
100667d4:	2800      	cmp	r0, #0
100667d6:	d131      	bne.n	1006683c <_printf_float+0xc4>
100667d8:	9810      	ldr	r0, [sp, #64]	@ 0x40
100667da:	9911      	ldr	r1, [sp, #68]	@ 0x44
100667dc:	2201      	movs	r2, #1
100667de:	4ba3      	ldr	r3, [pc, #652]	@ (10066a6c <_printf_float+0x2f4>)
100667e0:	4252      	negs	r2, r2
100667e2:	f7d9 fee3 	bl	100405ac <__aeabi_dcmple>
100667e6:	2800      	cmp	r0, #0
100667e8:	d128      	bne.n	1006683c <_printf_float+0xc4>
100667ea:	2200      	movs	r2, #0
100667ec:	2300      	movs	r3, #0
100667ee:	0030      	movs	r0, r6
100667f0:	0039      	movs	r1, r7
100667f2:	f7d9 fed1 	bl	10040598 <__aeabi_dcmplt>
100667f6:	2800      	cmp	r0, #0
100667f8:	d003      	beq.n	10066802 <_printf_float+0x8a>
100667fa:	002b      	movs	r3, r5
100667fc:	222d      	movs	r2, #45	@ 0x2d
100667fe:	3343      	adds	r3, #67	@ 0x43
10066800:	701a      	strb	r2, [r3, #0]
10066802:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10066804:	4f9a      	ldr	r7, [pc, #616]	@ (10066a70 <_printf_float+0x2f8>)
10066806:	2b47      	cmp	r3, #71	@ 0x47
10066808:	d800      	bhi.n	1006680c <_printf_float+0x94>
1006680a:	4f9a      	ldr	r7, [pc, #616]	@ (10066a74 <_printf_float+0x2fc>)
1006680c:	2303      	movs	r3, #3
1006680e:	2400      	movs	r4, #0
10066810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10066812:	612b      	str	r3, [r5, #16]
10066814:	3301      	adds	r3, #1
10066816:	439a      	bics	r2, r3
10066818:	602a      	str	r2, [r5, #0]
1006681a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1006681c:	0029      	movs	r1, r5
1006681e:	9300      	str	r3, [sp, #0]
10066820:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10066824:	aa15      	add	r2, sp, #84	@ 0x54
10066826:	f000 f9e5 	bl	10066bf4 <_printf_common>
1006682a:	3001      	adds	r0, #1
1006682c:	d000      	beq.n	10066830 <_printf_float+0xb8>
1006682e:	e09e      	b.n	1006696e <_printf_float+0x1f6>
10066830:	2001      	movs	r0, #1
10066832:	4240      	negs	r0, r0
10066834:	b017      	add	sp, #92	@ 0x5c
10066836:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066838:	3307      	adds	r3, #7
1006683a:	e7b8      	b.n	100667ae <_printf_float+0x36>
1006683c:	0032      	movs	r2, r6
1006683e:	003b      	movs	r3, r7
10066840:	0030      	movs	r0, r6
10066842:	0039      	movs	r1, r7
10066844:	f7db ff66 	bl	10042714 <__aeabi_dcmpun>
10066848:	2800      	cmp	r0, #0
1006684a:	d00b      	beq.n	10066864 <_printf_float+0xec>
1006684c:	2f00      	cmp	r7, #0
1006684e:	da03      	bge.n	10066858 <_printf_float+0xe0>
10066850:	002b      	movs	r3, r5
10066852:	222d      	movs	r2, #45	@ 0x2d
10066854:	3343      	adds	r3, #67	@ 0x43
10066856:	701a      	strb	r2, [r3, #0]
10066858:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1006685a:	4f87      	ldr	r7, [pc, #540]	@ (10066a78 <_printf_float+0x300>)
1006685c:	2b47      	cmp	r3, #71	@ 0x47
1006685e:	d8d5      	bhi.n	1006680c <_printf_float+0x94>
10066860:	4f86      	ldr	r7, [pc, #536]	@ (10066a7c <_printf_float+0x304>)
10066862:	e7d3      	b.n	1006680c <_printf_float+0x94>
10066864:	2220      	movs	r2, #32
10066866:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10066868:	686b      	ldr	r3, [r5, #4]
1006686a:	4394      	bics	r4, r2
1006686c:	1c5a      	adds	r2, r3, #1
1006686e:	d146      	bne.n	100668fe <_printf_float+0x186>
10066870:	3307      	adds	r3, #7
10066872:	606b      	str	r3, [r5, #4]
10066874:	2380      	movs	r3, #128	@ 0x80
10066876:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10066878:	00db      	lsls	r3, r3, #3
1006687a:	4313      	orrs	r3, r2
1006687c:	2200      	movs	r2, #0
1006687e:	602b      	str	r3, [r5, #0]
10066880:	9206      	str	r2, [sp, #24]
10066882:	aa14      	add	r2, sp, #80	@ 0x50
10066884:	9205      	str	r2, [sp, #20]
10066886:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10066888:	a90a      	add	r1, sp, #40	@ 0x28
1006688a:	9204      	str	r2, [sp, #16]
1006688c:	aa13      	add	r2, sp, #76	@ 0x4c
1006688e:	9203      	str	r2, [sp, #12]
10066890:	2223      	movs	r2, #35	@ 0x23
10066892:	1852      	adds	r2, r2, r1
10066894:	9202      	str	r2, [sp, #8]
10066896:	9301      	str	r3, [sp, #4]
10066898:	686b      	ldr	r3, [r5, #4]
1006689a:	0032      	movs	r2, r6
1006689c:	9300      	str	r3, [sp, #0]
1006689e:	9809      	ldr	r0, [sp, #36]	@ 0x24
100668a0:	003b      	movs	r3, r7
100668a2:	f7ff fec3 	bl	1006662c <__cvt>
100668a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
100668a8:	0007      	movs	r7, r0
100668aa:	2c47      	cmp	r4, #71	@ 0x47
100668ac:	d12d      	bne.n	1006690a <_printf_float+0x192>
100668ae:	1cd3      	adds	r3, r2, #3
100668b0:	db02      	blt.n	100668b8 <_printf_float+0x140>
100668b2:	686b      	ldr	r3, [r5, #4]
100668b4:	429a      	cmp	r2, r3
100668b6:	dd47      	ble.n	10066948 <_printf_float+0x1d0>
100668b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100668ba:	3b02      	subs	r3, #2
100668bc:	b2db      	uxtb	r3, r3
100668be:	930c      	str	r3, [sp, #48]	@ 0x30
100668c0:	0028      	movs	r0, r5
100668c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
100668c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100668c6:	3901      	subs	r1, #1
100668c8:	3050      	adds	r0, #80	@ 0x50
100668ca:	9113      	str	r1, [sp, #76]	@ 0x4c
100668cc:	f7ff ff14 	bl	100666f8 <__exponent>
100668d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
100668d2:	0004      	movs	r4, r0
100668d4:	1813      	adds	r3, r2, r0
100668d6:	612b      	str	r3, [r5, #16]
100668d8:	2a01      	cmp	r2, #1
100668da:	dc02      	bgt.n	100668e2 <_printf_float+0x16a>
100668dc:	682a      	ldr	r2, [r5, #0]
100668de:	07d2      	lsls	r2, r2, #31
100668e0:	d501      	bpl.n	100668e6 <_printf_float+0x16e>
100668e2:	3301      	adds	r3, #1
100668e4:	612b      	str	r3, [r5, #16]
100668e6:	2323      	movs	r3, #35	@ 0x23
100668e8:	aa0a      	add	r2, sp, #40	@ 0x28
100668ea:	189b      	adds	r3, r3, r2
100668ec:	781b      	ldrb	r3, [r3, #0]
100668ee:	2b00      	cmp	r3, #0
100668f0:	d100      	bne.n	100668f4 <_printf_float+0x17c>
100668f2:	e792      	b.n	1006681a <_printf_float+0xa2>
100668f4:	002b      	movs	r3, r5
100668f6:	222d      	movs	r2, #45	@ 0x2d
100668f8:	3343      	adds	r3, #67	@ 0x43
100668fa:	701a      	strb	r2, [r3, #0]
100668fc:	e78d      	b.n	1006681a <_printf_float+0xa2>
100668fe:	2c47      	cmp	r4, #71	@ 0x47
10066900:	d1b8      	bne.n	10066874 <_printf_float+0xfc>
10066902:	2b00      	cmp	r3, #0
10066904:	d1b6      	bne.n	10066874 <_printf_float+0xfc>
10066906:	3301      	adds	r3, #1
10066908:	e7b3      	b.n	10066872 <_printf_float+0xfa>
1006690a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1006690c:	2b65      	cmp	r3, #101	@ 0x65
1006690e:	d9d7      	bls.n	100668c0 <_printf_float+0x148>
10066910:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10066912:	2b66      	cmp	r3, #102	@ 0x66
10066914:	d11a      	bne.n	1006694c <_printf_float+0x1d4>
10066916:	686b      	ldr	r3, [r5, #4]
10066918:	2a00      	cmp	r2, #0
1006691a:	dd09      	ble.n	10066930 <_printf_float+0x1b8>
1006691c:	612a      	str	r2, [r5, #16]
1006691e:	2b00      	cmp	r3, #0
10066920:	d102      	bne.n	10066928 <_printf_float+0x1b0>
10066922:	6829      	ldr	r1, [r5, #0]
10066924:	07c9      	lsls	r1, r1, #31
10066926:	d50b      	bpl.n	10066940 <_printf_float+0x1c8>
10066928:	3301      	adds	r3, #1
1006692a:	189b      	adds	r3, r3, r2
1006692c:	612b      	str	r3, [r5, #16]
1006692e:	e007      	b.n	10066940 <_printf_float+0x1c8>
10066930:	2b00      	cmp	r3, #0
10066932:	d103      	bne.n	1006693c <_printf_float+0x1c4>
10066934:	2201      	movs	r2, #1
10066936:	6829      	ldr	r1, [r5, #0]
10066938:	4211      	tst	r1, r2
1006693a:	d000      	beq.n	1006693e <_printf_float+0x1c6>
1006693c:	1c9a      	adds	r2, r3, #2
1006693e:	612a      	str	r2, [r5, #16]
10066940:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10066942:	2400      	movs	r4, #0
10066944:	65ab      	str	r3, [r5, #88]	@ 0x58
10066946:	e7ce      	b.n	100668e6 <_printf_float+0x16e>
10066948:	2367      	movs	r3, #103	@ 0x67
1006694a:	930c      	str	r3, [sp, #48]	@ 0x30
1006694c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1006694e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
10066950:	4299      	cmp	r1, r3
10066952:	db06      	blt.n	10066962 <_printf_float+0x1ea>
10066954:	682b      	ldr	r3, [r5, #0]
10066956:	6129      	str	r1, [r5, #16]
10066958:	07db      	lsls	r3, r3, #31
1006695a:	d5f1      	bpl.n	10066940 <_printf_float+0x1c8>
1006695c:	3101      	adds	r1, #1
1006695e:	6129      	str	r1, [r5, #16]
10066960:	e7ee      	b.n	10066940 <_printf_float+0x1c8>
10066962:	2201      	movs	r2, #1
10066964:	2900      	cmp	r1, #0
10066966:	dce0      	bgt.n	1006692a <_printf_float+0x1b2>
10066968:	1892      	adds	r2, r2, r2
1006696a:	1a52      	subs	r2, r2, r1
1006696c:	e7dd      	b.n	1006692a <_printf_float+0x1b2>
1006696e:	682a      	ldr	r2, [r5, #0]
10066970:	0553      	lsls	r3, r2, #21
10066972:	d408      	bmi.n	10066986 <_printf_float+0x20e>
10066974:	692b      	ldr	r3, [r5, #16]
10066976:	003a      	movs	r2, r7
10066978:	990a      	ldr	r1, [sp, #40]	@ 0x28
1006697a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1006697c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
1006697e:	47a0      	blx	r4
10066980:	3001      	adds	r0, #1
10066982:	d129      	bne.n	100669d8 <_printf_float+0x260>
10066984:	e754      	b.n	10066830 <_printf_float+0xb8>
10066986:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10066988:	2b65      	cmp	r3, #101	@ 0x65
1006698a:	d800      	bhi.n	1006698e <_printf_float+0x216>
1006698c:	e0db      	b.n	10066b46 <_printf_float+0x3ce>
1006698e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
10066990:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
10066992:	2200      	movs	r2, #0
10066994:	2300      	movs	r3, #0
10066996:	f7d9 fdf9 	bl	1004058c <__aeabi_dcmpeq>
1006699a:	2800      	cmp	r0, #0
1006699c:	d033      	beq.n	10066a06 <_printf_float+0x28e>
1006699e:	2301      	movs	r3, #1
100669a0:	4a37      	ldr	r2, [pc, #220]	@ (10066a80 <_printf_float+0x308>)
100669a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
100669a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
100669a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100669a8:	47a0      	blx	r4
100669aa:	3001      	adds	r0, #1
100669ac:	d100      	bne.n	100669b0 <_printf_float+0x238>
100669ae:	e73f      	b.n	10066830 <_printf_float+0xb8>
100669b0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
100669b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
100669b4:	42b3      	cmp	r3, r6
100669b6:	db02      	blt.n	100669be <_printf_float+0x246>
100669b8:	682b      	ldr	r3, [r5, #0]
100669ba:	07db      	lsls	r3, r3, #31
100669bc:	d50c      	bpl.n	100669d8 <_printf_float+0x260>
100669be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100669c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100669c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100669c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
100669c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
100669c8:	47a0      	blx	r4
100669ca:	2400      	movs	r4, #0
100669cc:	3001      	adds	r0, #1
100669ce:	d100      	bne.n	100669d2 <_printf_float+0x25a>
100669d0:	e72e      	b.n	10066830 <_printf_float+0xb8>
100669d2:	1e73      	subs	r3, r6, #1
100669d4:	42a3      	cmp	r3, r4
100669d6:	dc0a      	bgt.n	100669ee <_printf_float+0x276>
100669d8:	682b      	ldr	r3, [r5, #0]
100669da:	079b      	lsls	r3, r3, #30
100669dc:	d500      	bpl.n	100669e0 <_printf_float+0x268>
100669de:	e106      	b.n	10066bee <_printf_float+0x476>
100669e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
100669e2:	68e8      	ldr	r0, [r5, #12]
100669e4:	4298      	cmp	r0, r3
100669e6:	db00      	blt.n	100669ea <_printf_float+0x272>
100669e8:	e724      	b.n	10066834 <_printf_float+0xbc>
100669ea:	0018      	movs	r0, r3
100669ec:	e722      	b.n	10066834 <_printf_float+0xbc>
100669ee:	002a      	movs	r2, r5
100669f0:	2301      	movs	r3, #1
100669f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
100669f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
100669f6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
100669f8:	321a      	adds	r2, #26
100669fa:	47b8      	blx	r7
100669fc:	3001      	adds	r0, #1
100669fe:	d100      	bne.n	10066a02 <_printf_float+0x28a>
10066a00:	e716      	b.n	10066830 <_printf_float+0xb8>
10066a02:	3401      	adds	r4, #1
10066a04:	e7e5      	b.n	100669d2 <_printf_float+0x25a>
10066a06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10066a08:	2b00      	cmp	r3, #0
10066a0a:	dc3b      	bgt.n	10066a84 <_printf_float+0x30c>
10066a0c:	2301      	movs	r3, #1
10066a0e:	4a1c      	ldr	r2, [pc, #112]	@ (10066a80 <_printf_float+0x308>)
10066a10:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066a14:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10066a16:	47a0      	blx	r4
10066a18:	3001      	adds	r0, #1
10066a1a:	d100      	bne.n	10066a1e <_printf_float+0x2a6>
10066a1c:	e708      	b.n	10066830 <_printf_float+0xb8>
10066a1e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
10066a20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10066a22:	4333      	orrs	r3, r6
10066a24:	d102      	bne.n	10066a2c <_printf_float+0x2b4>
10066a26:	682b      	ldr	r3, [r5, #0]
10066a28:	07db      	lsls	r3, r3, #31
10066a2a:	d5d5      	bpl.n	100669d8 <_printf_float+0x260>
10066a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10066a2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10066a30:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066a34:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10066a36:	47a0      	blx	r4
10066a38:	2300      	movs	r3, #0
10066a3a:	3001      	adds	r0, #1
10066a3c:	d100      	bne.n	10066a40 <_printf_float+0x2c8>
10066a3e:	e6f7      	b.n	10066830 <_printf_float+0xb8>
10066a40:	930c      	str	r3, [sp, #48]	@ 0x30
10066a42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10066a44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10066a46:	425b      	negs	r3, r3
10066a48:	4293      	cmp	r3, r2
10066a4a:	dc01      	bgt.n	10066a50 <_printf_float+0x2d8>
10066a4c:	0033      	movs	r3, r6
10066a4e:	e792      	b.n	10066976 <_printf_float+0x1fe>
10066a50:	002a      	movs	r2, r5
10066a52:	2301      	movs	r3, #1
10066a54:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066a56:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066a58:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10066a5a:	321a      	adds	r2, #26
10066a5c:	47a0      	blx	r4
10066a5e:	3001      	adds	r0, #1
10066a60:	d100      	bne.n	10066a64 <_printf_float+0x2ec>
10066a62:	e6e5      	b.n	10066830 <_printf_float+0xb8>
10066a64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10066a66:	3301      	adds	r3, #1
10066a68:	e7ea      	b.n	10066a40 <_printf_float+0x2c8>
10066a6a:	46c0      	nop			@ (mov r8, r8)
10066a6c:	7fefffff 	.word	0x7fefffff
10066a70:	1006d1fc 	.word	0x1006d1fc
10066a74:	1006d1f8 	.word	0x1006d1f8
10066a78:	1006d204 	.word	0x1006d204
10066a7c:	1006d200 	.word	0x1006d200
10066a80:	1006d208 	.word	0x1006d208
10066a84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
10066a86:	6dae      	ldr	r6, [r5, #88]	@ 0x58
10066a88:	930c      	str	r3, [sp, #48]	@ 0x30
10066a8a:	429e      	cmp	r6, r3
10066a8c:	dd00      	ble.n	10066a90 <_printf_float+0x318>
10066a8e:	001e      	movs	r6, r3
10066a90:	2e00      	cmp	r6, #0
10066a92:	dc31      	bgt.n	10066af8 <_printf_float+0x380>
10066a94:	43f3      	mvns	r3, r6
10066a96:	2400      	movs	r4, #0
10066a98:	17db      	asrs	r3, r3, #31
10066a9a:	4033      	ands	r3, r6
10066a9c:	930e      	str	r3, [sp, #56]	@ 0x38
10066a9e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
10066aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10066aa2:	1af3      	subs	r3, r6, r3
10066aa4:	42a3      	cmp	r3, r4
10066aa6:	dc30      	bgt.n	10066b0a <_printf_float+0x392>
10066aa8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10066aaa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10066aac:	429a      	cmp	r2, r3
10066aae:	dc38      	bgt.n	10066b22 <_printf_float+0x3aa>
10066ab0:	682b      	ldr	r3, [r5, #0]
10066ab2:	07db      	lsls	r3, r3, #31
10066ab4:	d435      	bmi.n	10066b22 <_printf_float+0x3aa>
10066ab6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
10066ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10066aba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10066abc:	1b9b      	subs	r3, r3, r6
10066abe:	1b14      	subs	r4, r2, r4
10066ac0:	429c      	cmp	r4, r3
10066ac2:	dd00      	ble.n	10066ac6 <_printf_float+0x34e>
10066ac4:	001c      	movs	r4, r3
10066ac6:	2c00      	cmp	r4, #0
10066ac8:	dc34      	bgt.n	10066b34 <_printf_float+0x3bc>
10066aca:	43e3      	mvns	r3, r4
10066acc:	2600      	movs	r6, #0
10066ace:	17db      	asrs	r3, r3, #31
10066ad0:	401c      	ands	r4, r3
10066ad2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10066ad4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10066ad6:	1ad3      	subs	r3, r2, r3
10066ad8:	1b1b      	subs	r3, r3, r4
10066ada:	42b3      	cmp	r3, r6
10066adc:	dc00      	bgt.n	10066ae0 <_printf_float+0x368>
10066ade:	e77b      	b.n	100669d8 <_printf_float+0x260>
10066ae0:	002a      	movs	r2, r5
10066ae2:	2301      	movs	r3, #1
10066ae4:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066ae8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
10066aea:	321a      	adds	r2, #26
10066aec:	47b8      	blx	r7
10066aee:	3001      	adds	r0, #1
10066af0:	d100      	bne.n	10066af4 <_printf_float+0x37c>
10066af2:	e69d      	b.n	10066830 <_printf_float+0xb8>
10066af4:	3601      	adds	r6, #1
10066af6:	e7ec      	b.n	10066ad2 <_printf_float+0x35a>
10066af8:	0033      	movs	r3, r6
10066afa:	003a      	movs	r2, r7
10066afc:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066b00:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10066b02:	47a0      	blx	r4
10066b04:	3001      	adds	r0, #1
10066b06:	d1c5      	bne.n	10066a94 <_printf_float+0x31c>
10066b08:	e692      	b.n	10066830 <_printf_float+0xb8>
10066b0a:	002a      	movs	r2, r5
10066b0c:	2301      	movs	r3, #1
10066b0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066b10:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066b12:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10066b14:	321a      	adds	r2, #26
10066b16:	47b0      	blx	r6
10066b18:	3001      	adds	r0, #1
10066b1a:	d100      	bne.n	10066b1e <_printf_float+0x3a6>
10066b1c:	e688      	b.n	10066830 <_printf_float+0xb8>
10066b1e:	3401      	adds	r4, #1
10066b20:	e7bd      	b.n	10066a9e <_printf_float+0x326>
10066b22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10066b24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10066b26:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066b28:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066b2a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10066b2c:	47a0      	blx	r4
10066b2e:	3001      	adds	r0, #1
10066b30:	d1c1      	bne.n	10066ab6 <_printf_float+0x33e>
10066b32:	e67d      	b.n	10066830 <_printf_float+0xb8>
10066b34:	19ba      	adds	r2, r7, r6
10066b36:	0023      	movs	r3, r4
10066b38:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066b3c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10066b3e:	47b0      	blx	r6
10066b40:	3001      	adds	r0, #1
10066b42:	d1c2      	bne.n	10066aca <_printf_float+0x352>
10066b44:	e674      	b.n	10066830 <_printf_float+0xb8>
10066b46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
10066b48:	930c      	str	r3, [sp, #48]	@ 0x30
10066b4a:	2b01      	cmp	r3, #1
10066b4c:	dc02      	bgt.n	10066b54 <_printf_float+0x3dc>
10066b4e:	2301      	movs	r3, #1
10066b50:	421a      	tst	r2, r3
10066b52:	d039      	beq.n	10066bc8 <_printf_float+0x450>
10066b54:	2301      	movs	r3, #1
10066b56:	003a      	movs	r2, r7
10066b58:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066b5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10066b5e:	47b0      	blx	r6
10066b60:	3001      	adds	r0, #1
10066b62:	d100      	bne.n	10066b66 <_printf_float+0x3ee>
10066b64:	e664      	b.n	10066830 <_printf_float+0xb8>
10066b66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10066b68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10066b6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066b6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066b6e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10066b70:	47b0      	blx	r6
10066b72:	3001      	adds	r0, #1
10066b74:	d100      	bne.n	10066b78 <_printf_float+0x400>
10066b76:	e65b      	b.n	10066830 <_printf_float+0xb8>
10066b78:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
10066b7a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
10066b7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10066b7e:	2200      	movs	r2, #0
10066b80:	3b01      	subs	r3, #1
10066b82:	930c      	str	r3, [sp, #48]	@ 0x30
10066b84:	2300      	movs	r3, #0
10066b86:	f7d9 fd01 	bl	1004058c <__aeabi_dcmpeq>
10066b8a:	2800      	cmp	r0, #0
10066b8c:	d11a      	bne.n	10066bc4 <_printf_float+0x44c>
10066b8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10066b90:	1c7a      	adds	r2, r7, #1
10066b92:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066b94:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066b96:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10066b98:	47b0      	blx	r6
10066b9a:	3001      	adds	r0, #1
10066b9c:	d10e      	bne.n	10066bbc <_printf_float+0x444>
10066b9e:	e647      	b.n	10066830 <_printf_float+0xb8>
10066ba0:	002a      	movs	r2, r5
10066ba2:	2301      	movs	r3, #1
10066ba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066ba8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
10066baa:	321a      	adds	r2, #26
10066bac:	47b8      	blx	r7
10066bae:	3001      	adds	r0, #1
10066bb0:	d100      	bne.n	10066bb4 <_printf_float+0x43c>
10066bb2:	e63d      	b.n	10066830 <_printf_float+0xb8>
10066bb4:	3601      	adds	r6, #1
10066bb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10066bb8:	429e      	cmp	r6, r3
10066bba:	dbf1      	blt.n	10066ba0 <_printf_float+0x428>
10066bbc:	002a      	movs	r2, r5
10066bbe:	0023      	movs	r3, r4
10066bc0:	3250      	adds	r2, #80	@ 0x50
10066bc2:	e6d9      	b.n	10066978 <_printf_float+0x200>
10066bc4:	2600      	movs	r6, #0
10066bc6:	e7f6      	b.n	10066bb6 <_printf_float+0x43e>
10066bc8:	003a      	movs	r2, r7
10066bca:	e7e2      	b.n	10066b92 <_printf_float+0x41a>
10066bcc:	002a      	movs	r2, r5
10066bce:	2301      	movs	r3, #1
10066bd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
10066bd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
10066bd4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10066bd6:	3219      	adds	r2, #25
10066bd8:	47b0      	blx	r6
10066bda:	3001      	adds	r0, #1
10066bdc:	d100      	bne.n	10066be0 <_printf_float+0x468>
10066bde:	e627      	b.n	10066830 <_printf_float+0xb8>
10066be0:	3401      	adds	r4, #1
10066be2:	68eb      	ldr	r3, [r5, #12]
10066be4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10066be6:	1a9b      	subs	r3, r3, r2
10066be8:	42a3      	cmp	r3, r4
10066bea:	dcef      	bgt.n	10066bcc <_printf_float+0x454>
10066bec:	e6f8      	b.n	100669e0 <_printf_float+0x268>
10066bee:	2400      	movs	r4, #0
10066bf0:	e7f7      	b.n	10066be2 <_printf_float+0x46a>
10066bf2:	46c0      	nop			@ (mov r8, r8)

10066bf4 <_printf_common>:
10066bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10066bf6:	0016      	movs	r6, r2
10066bf8:	9301      	str	r3, [sp, #4]
10066bfa:	688a      	ldr	r2, [r1, #8]
10066bfc:	690b      	ldr	r3, [r1, #16]
10066bfe:	000c      	movs	r4, r1
10066c00:	9000      	str	r0, [sp, #0]
10066c02:	4293      	cmp	r3, r2
10066c04:	da00      	bge.n	10066c08 <_printf_common+0x14>
10066c06:	0013      	movs	r3, r2
10066c08:	0022      	movs	r2, r4
10066c0a:	6033      	str	r3, [r6, #0]
10066c0c:	3243      	adds	r2, #67	@ 0x43
10066c0e:	7812      	ldrb	r2, [r2, #0]
10066c10:	2a00      	cmp	r2, #0
10066c12:	d001      	beq.n	10066c18 <_printf_common+0x24>
10066c14:	3301      	adds	r3, #1
10066c16:	6033      	str	r3, [r6, #0]
10066c18:	6823      	ldr	r3, [r4, #0]
10066c1a:	069b      	lsls	r3, r3, #26
10066c1c:	d502      	bpl.n	10066c24 <_printf_common+0x30>
10066c1e:	6833      	ldr	r3, [r6, #0]
10066c20:	3302      	adds	r3, #2
10066c22:	6033      	str	r3, [r6, #0]
10066c24:	6822      	ldr	r2, [r4, #0]
10066c26:	2306      	movs	r3, #6
10066c28:	0015      	movs	r5, r2
10066c2a:	401d      	ands	r5, r3
10066c2c:	421a      	tst	r2, r3
10066c2e:	d027      	beq.n	10066c80 <_printf_common+0x8c>
10066c30:	0023      	movs	r3, r4
10066c32:	3343      	adds	r3, #67	@ 0x43
10066c34:	781b      	ldrb	r3, [r3, #0]
10066c36:	1e5a      	subs	r2, r3, #1
10066c38:	4193      	sbcs	r3, r2
10066c3a:	6822      	ldr	r2, [r4, #0]
10066c3c:	0692      	lsls	r2, r2, #26
10066c3e:	d430      	bmi.n	10066ca2 <_printf_common+0xae>
10066c40:	0022      	movs	r2, r4
10066c42:	9901      	ldr	r1, [sp, #4]
10066c44:	9800      	ldr	r0, [sp, #0]
10066c46:	9d08      	ldr	r5, [sp, #32]
10066c48:	3243      	adds	r2, #67	@ 0x43
10066c4a:	47a8      	blx	r5
10066c4c:	3001      	adds	r0, #1
10066c4e:	d025      	beq.n	10066c9c <_printf_common+0xa8>
10066c50:	2206      	movs	r2, #6
10066c52:	6823      	ldr	r3, [r4, #0]
10066c54:	2500      	movs	r5, #0
10066c56:	4013      	ands	r3, r2
10066c58:	2b04      	cmp	r3, #4
10066c5a:	d105      	bne.n	10066c68 <_printf_common+0x74>
10066c5c:	6833      	ldr	r3, [r6, #0]
10066c5e:	68e5      	ldr	r5, [r4, #12]
10066c60:	1aed      	subs	r5, r5, r3
10066c62:	43eb      	mvns	r3, r5
10066c64:	17db      	asrs	r3, r3, #31
10066c66:	401d      	ands	r5, r3
10066c68:	68a3      	ldr	r3, [r4, #8]
10066c6a:	6922      	ldr	r2, [r4, #16]
10066c6c:	4293      	cmp	r3, r2
10066c6e:	dd01      	ble.n	10066c74 <_printf_common+0x80>
10066c70:	1a9b      	subs	r3, r3, r2
10066c72:	18ed      	adds	r5, r5, r3
10066c74:	2600      	movs	r6, #0
10066c76:	42b5      	cmp	r5, r6
10066c78:	d120      	bne.n	10066cbc <_printf_common+0xc8>
10066c7a:	2000      	movs	r0, #0
10066c7c:	e010      	b.n	10066ca0 <_printf_common+0xac>
10066c7e:	3501      	adds	r5, #1
10066c80:	68e3      	ldr	r3, [r4, #12]
10066c82:	6832      	ldr	r2, [r6, #0]
10066c84:	1a9b      	subs	r3, r3, r2
10066c86:	42ab      	cmp	r3, r5
10066c88:	ddd2      	ble.n	10066c30 <_printf_common+0x3c>
10066c8a:	0022      	movs	r2, r4
10066c8c:	2301      	movs	r3, #1
10066c8e:	9901      	ldr	r1, [sp, #4]
10066c90:	9800      	ldr	r0, [sp, #0]
10066c92:	9f08      	ldr	r7, [sp, #32]
10066c94:	3219      	adds	r2, #25
10066c96:	47b8      	blx	r7
10066c98:	3001      	adds	r0, #1
10066c9a:	d1f0      	bne.n	10066c7e <_printf_common+0x8a>
10066c9c:	2001      	movs	r0, #1
10066c9e:	4240      	negs	r0, r0
10066ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10066ca2:	2030      	movs	r0, #48	@ 0x30
10066ca4:	18e1      	adds	r1, r4, r3
10066ca6:	3143      	adds	r1, #67	@ 0x43
10066ca8:	7008      	strb	r0, [r1, #0]
10066caa:	0021      	movs	r1, r4
10066cac:	1c5a      	adds	r2, r3, #1
10066cae:	3145      	adds	r1, #69	@ 0x45
10066cb0:	7809      	ldrb	r1, [r1, #0]
10066cb2:	18a2      	adds	r2, r4, r2
10066cb4:	3243      	adds	r2, #67	@ 0x43
10066cb6:	3302      	adds	r3, #2
10066cb8:	7011      	strb	r1, [r2, #0]
10066cba:	e7c1      	b.n	10066c40 <_printf_common+0x4c>
10066cbc:	0022      	movs	r2, r4
10066cbe:	2301      	movs	r3, #1
10066cc0:	9901      	ldr	r1, [sp, #4]
10066cc2:	9800      	ldr	r0, [sp, #0]
10066cc4:	9f08      	ldr	r7, [sp, #32]
10066cc6:	321a      	adds	r2, #26
10066cc8:	47b8      	blx	r7
10066cca:	3001      	adds	r0, #1
10066ccc:	d0e6      	beq.n	10066c9c <_printf_common+0xa8>
10066cce:	3601      	adds	r6, #1
10066cd0:	e7d1      	b.n	10066c76 <_printf_common+0x82>
	...

10066cd4 <_printf_i>:
10066cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10066cd6:	b08b      	sub	sp, #44	@ 0x2c
10066cd8:	9206      	str	r2, [sp, #24]
10066cda:	000a      	movs	r2, r1
10066cdc:	3243      	adds	r2, #67	@ 0x43
10066cde:	9307      	str	r3, [sp, #28]
10066ce0:	9005      	str	r0, [sp, #20]
10066ce2:	9203      	str	r2, [sp, #12]
10066ce4:	7e0a      	ldrb	r2, [r1, #24]
10066ce6:	000c      	movs	r4, r1
10066ce8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10066cea:	2a78      	cmp	r2, #120	@ 0x78
10066cec:	d809      	bhi.n	10066d02 <_printf_i+0x2e>
10066cee:	2a62      	cmp	r2, #98	@ 0x62
10066cf0:	d80b      	bhi.n	10066d0a <_printf_i+0x36>
10066cf2:	2a00      	cmp	r2, #0
10066cf4:	d100      	bne.n	10066cf8 <_printf_i+0x24>
10066cf6:	e0ba      	b.n	10066e6e <_printf_i+0x19a>
10066cf8:	497a      	ldr	r1, [pc, #488]	@ (10066ee4 <_printf_i+0x210>)
10066cfa:	9104      	str	r1, [sp, #16]
10066cfc:	2a58      	cmp	r2, #88	@ 0x58
10066cfe:	d100      	bne.n	10066d02 <_printf_i+0x2e>
10066d00:	e08e      	b.n	10066e20 <_printf_i+0x14c>
10066d02:	0025      	movs	r5, r4
10066d04:	3542      	adds	r5, #66	@ 0x42
10066d06:	702a      	strb	r2, [r5, #0]
10066d08:	e022      	b.n	10066d50 <_printf_i+0x7c>
10066d0a:	0010      	movs	r0, r2
10066d0c:	3863      	subs	r0, #99	@ 0x63
10066d0e:	2815      	cmp	r0, #21
10066d10:	d8f7      	bhi.n	10066d02 <_printf_i+0x2e>
10066d12:	f7d9 fa9f 	bl	10040254 <__gnu_thumb1_case_shi>
10066d16:	0016      	.short	0x0016
10066d18:	fff6001f 	.word	0xfff6001f
10066d1c:	fff6fff6 	.word	0xfff6fff6
10066d20:	001ffff6 	.word	0x001ffff6
10066d24:	fff6fff6 	.word	0xfff6fff6
10066d28:	fff6fff6 	.word	0xfff6fff6
10066d2c:	0036009f 	.word	0x0036009f
10066d30:	fff6007e 	.word	0xfff6007e
10066d34:	00b0fff6 	.word	0x00b0fff6
10066d38:	0036fff6 	.word	0x0036fff6
10066d3c:	fff6fff6 	.word	0xfff6fff6
10066d40:	0082      	.short	0x0082
10066d42:	0025      	movs	r5, r4
10066d44:	681a      	ldr	r2, [r3, #0]
10066d46:	3542      	adds	r5, #66	@ 0x42
10066d48:	1d11      	adds	r1, r2, #4
10066d4a:	6019      	str	r1, [r3, #0]
10066d4c:	6813      	ldr	r3, [r2, #0]
10066d4e:	702b      	strb	r3, [r5, #0]
10066d50:	2301      	movs	r3, #1
10066d52:	e09e      	b.n	10066e92 <_printf_i+0x1be>
10066d54:	6818      	ldr	r0, [r3, #0]
10066d56:	6809      	ldr	r1, [r1, #0]
10066d58:	1d02      	adds	r2, r0, #4
10066d5a:	060d      	lsls	r5, r1, #24
10066d5c:	d50b      	bpl.n	10066d76 <_printf_i+0xa2>
10066d5e:	6806      	ldr	r6, [r0, #0]
10066d60:	601a      	str	r2, [r3, #0]
10066d62:	2e00      	cmp	r6, #0
10066d64:	da03      	bge.n	10066d6e <_printf_i+0x9a>
10066d66:	232d      	movs	r3, #45	@ 0x2d
10066d68:	9a03      	ldr	r2, [sp, #12]
10066d6a:	4276      	negs	r6, r6
10066d6c:	7013      	strb	r3, [r2, #0]
10066d6e:	4b5d      	ldr	r3, [pc, #372]	@ (10066ee4 <_printf_i+0x210>)
10066d70:	270a      	movs	r7, #10
10066d72:	9304      	str	r3, [sp, #16]
10066d74:	e018      	b.n	10066da8 <_printf_i+0xd4>
10066d76:	6806      	ldr	r6, [r0, #0]
10066d78:	601a      	str	r2, [r3, #0]
10066d7a:	0649      	lsls	r1, r1, #25
10066d7c:	d5f1      	bpl.n	10066d62 <_printf_i+0x8e>
10066d7e:	b236      	sxth	r6, r6
10066d80:	e7ef      	b.n	10066d62 <_printf_i+0x8e>
10066d82:	6808      	ldr	r0, [r1, #0]
10066d84:	6819      	ldr	r1, [r3, #0]
10066d86:	c940      	ldmia	r1!, {r6}
10066d88:	0605      	lsls	r5, r0, #24
10066d8a:	d402      	bmi.n	10066d92 <_printf_i+0xbe>
10066d8c:	0640      	lsls	r0, r0, #25
10066d8e:	d500      	bpl.n	10066d92 <_printf_i+0xbe>
10066d90:	b2b6      	uxth	r6, r6
10066d92:	6019      	str	r1, [r3, #0]
10066d94:	4b53      	ldr	r3, [pc, #332]	@ (10066ee4 <_printf_i+0x210>)
10066d96:	270a      	movs	r7, #10
10066d98:	9304      	str	r3, [sp, #16]
10066d9a:	2a6f      	cmp	r2, #111	@ 0x6f
10066d9c:	d100      	bne.n	10066da0 <_printf_i+0xcc>
10066d9e:	3f02      	subs	r7, #2
10066da0:	0023      	movs	r3, r4
10066da2:	2200      	movs	r2, #0
10066da4:	3343      	adds	r3, #67	@ 0x43
10066da6:	701a      	strb	r2, [r3, #0]
10066da8:	6863      	ldr	r3, [r4, #4]
10066daa:	60a3      	str	r3, [r4, #8]
10066dac:	2b00      	cmp	r3, #0
10066dae:	db06      	blt.n	10066dbe <_printf_i+0xea>
10066db0:	2104      	movs	r1, #4
10066db2:	6822      	ldr	r2, [r4, #0]
10066db4:	9d03      	ldr	r5, [sp, #12]
10066db6:	438a      	bics	r2, r1
10066db8:	6022      	str	r2, [r4, #0]
10066dba:	4333      	orrs	r3, r6
10066dbc:	d00c      	beq.n	10066dd8 <_printf_i+0x104>
10066dbe:	9d03      	ldr	r5, [sp, #12]
10066dc0:	0030      	movs	r0, r6
10066dc2:	0039      	movs	r1, r7
10066dc4:	f7d9 fad6 	bl	10040374 <__aeabi_uidivmod>
10066dc8:	9b04      	ldr	r3, [sp, #16]
10066dca:	3d01      	subs	r5, #1
10066dcc:	5c5b      	ldrb	r3, [r3, r1]
10066dce:	702b      	strb	r3, [r5, #0]
10066dd0:	0033      	movs	r3, r6
10066dd2:	0006      	movs	r6, r0
10066dd4:	429f      	cmp	r7, r3
10066dd6:	d9f3      	bls.n	10066dc0 <_printf_i+0xec>
10066dd8:	2f08      	cmp	r7, #8
10066dda:	d109      	bne.n	10066df0 <_printf_i+0x11c>
10066ddc:	6823      	ldr	r3, [r4, #0]
10066dde:	07db      	lsls	r3, r3, #31
10066de0:	d506      	bpl.n	10066df0 <_printf_i+0x11c>
10066de2:	6862      	ldr	r2, [r4, #4]
10066de4:	6923      	ldr	r3, [r4, #16]
10066de6:	429a      	cmp	r2, r3
10066de8:	dc02      	bgt.n	10066df0 <_printf_i+0x11c>
10066dea:	2330      	movs	r3, #48	@ 0x30
10066dec:	3d01      	subs	r5, #1
10066dee:	702b      	strb	r3, [r5, #0]
10066df0:	9b03      	ldr	r3, [sp, #12]
10066df2:	1b5b      	subs	r3, r3, r5
10066df4:	6123      	str	r3, [r4, #16]
10066df6:	9b07      	ldr	r3, [sp, #28]
10066df8:	0021      	movs	r1, r4
10066dfa:	9300      	str	r3, [sp, #0]
10066dfc:	9805      	ldr	r0, [sp, #20]
10066dfe:	9b06      	ldr	r3, [sp, #24]
10066e00:	aa09      	add	r2, sp, #36	@ 0x24
10066e02:	f7ff fef7 	bl	10066bf4 <_printf_common>
10066e06:	3001      	adds	r0, #1
10066e08:	d148      	bne.n	10066e9c <_printf_i+0x1c8>
10066e0a:	2001      	movs	r0, #1
10066e0c:	4240      	negs	r0, r0
10066e0e:	b00b      	add	sp, #44	@ 0x2c
10066e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066e12:	2220      	movs	r2, #32
10066e14:	6809      	ldr	r1, [r1, #0]
10066e16:	430a      	orrs	r2, r1
10066e18:	6022      	str	r2, [r4, #0]
10066e1a:	2278      	movs	r2, #120	@ 0x78
10066e1c:	4932      	ldr	r1, [pc, #200]	@ (10066ee8 <_printf_i+0x214>)
10066e1e:	9104      	str	r1, [sp, #16]
10066e20:	0021      	movs	r1, r4
10066e22:	3145      	adds	r1, #69	@ 0x45
10066e24:	700a      	strb	r2, [r1, #0]
10066e26:	6819      	ldr	r1, [r3, #0]
10066e28:	6822      	ldr	r2, [r4, #0]
10066e2a:	c940      	ldmia	r1!, {r6}
10066e2c:	0610      	lsls	r0, r2, #24
10066e2e:	d402      	bmi.n	10066e36 <_printf_i+0x162>
10066e30:	0650      	lsls	r0, r2, #25
10066e32:	d500      	bpl.n	10066e36 <_printf_i+0x162>
10066e34:	b2b6      	uxth	r6, r6
10066e36:	6019      	str	r1, [r3, #0]
10066e38:	07d3      	lsls	r3, r2, #31
10066e3a:	d502      	bpl.n	10066e42 <_printf_i+0x16e>
10066e3c:	2320      	movs	r3, #32
10066e3e:	4313      	orrs	r3, r2
10066e40:	6023      	str	r3, [r4, #0]
10066e42:	2e00      	cmp	r6, #0
10066e44:	d001      	beq.n	10066e4a <_printf_i+0x176>
10066e46:	2710      	movs	r7, #16
10066e48:	e7aa      	b.n	10066da0 <_printf_i+0xcc>
10066e4a:	2220      	movs	r2, #32
10066e4c:	6823      	ldr	r3, [r4, #0]
10066e4e:	4393      	bics	r3, r2
10066e50:	6023      	str	r3, [r4, #0]
10066e52:	e7f8      	b.n	10066e46 <_printf_i+0x172>
10066e54:	681a      	ldr	r2, [r3, #0]
10066e56:	680d      	ldr	r5, [r1, #0]
10066e58:	1d10      	adds	r0, r2, #4
10066e5a:	6949      	ldr	r1, [r1, #20]
10066e5c:	6018      	str	r0, [r3, #0]
10066e5e:	6813      	ldr	r3, [r2, #0]
10066e60:	062e      	lsls	r6, r5, #24
10066e62:	d501      	bpl.n	10066e68 <_printf_i+0x194>
10066e64:	6019      	str	r1, [r3, #0]
10066e66:	e002      	b.n	10066e6e <_printf_i+0x19a>
10066e68:	066d      	lsls	r5, r5, #25
10066e6a:	d5fb      	bpl.n	10066e64 <_printf_i+0x190>
10066e6c:	8019      	strh	r1, [r3, #0]
10066e6e:	2300      	movs	r3, #0
10066e70:	9d03      	ldr	r5, [sp, #12]
10066e72:	6123      	str	r3, [r4, #16]
10066e74:	e7bf      	b.n	10066df6 <_printf_i+0x122>
10066e76:	681a      	ldr	r2, [r3, #0]
10066e78:	1d11      	adds	r1, r2, #4
10066e7a:	6019      	str	r1, [r3, #0]
10066e7c:	6815      	ldr	r5, [r2, #0]
10066e7e:	2100      	movs	r1, #0
10066e80:	0028      	movs	r0, r5
10066e82:	6862      	ldr	r2, [r4, #4]
10066e84:	f000 fdba 	bl	100679fc <memchr>
10066e88:	2800      	cmp	r0, #0
10066e8a:	d001      	beq.n	10066e90 <_printf_i+0x1bc>
10066e8c:	1b40      	subs	r0, r0, r5
10066e8e:	6060      	str	r0, [r4, #4]
10066e90:	6863      	ldr	r3, [r4, #4]
10066e92:	6123      	str	r3, [r4, #16]
10066e94:	2300      	movs	r3, #0
10066e96:	9a03      	ldr	r2, [sp, #12]
10066e98:	7013      	strb	r3, [r2, #0]
10066e9a:	e7ac      	b.n	10066df6 <_printf_i+0x122>
10066e9c:	002a      	movs	r2, r5
10066e9e:	6923      	ldr	r3, [r4, #16]
10066ea0:	9906      	ldr	r1, [sp, #24]
10066ea2:	9805      	ldr	r0, [sp, #20]
10066ea4:	9d07      	ldr	r5, [sp, #28]
10066ea6:	47a8      	blx	r5
10066ea8:	3001      	adds	r0, #1
10066eaa:	d0ae      	beq.n	10066e0a <_printf_i+0x136>
10066eac:	6823      	ldr	r3, [r4, #0]
10066eae:	079b      	lsls	r3, r3, #30
10066eb0:	d415      	bmi.n	10066ede <_printf_i+0x20a>
10066eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10066eb4:	68e0      	ldr	r0, [r4, #12]
10066eb6:	4298      	cmp	r0, r3
10066eb8:	daa9      	bge.n	10066e0e <_printf_i+0x13a>
10066eba:	0018      	movs	r0, r3
10066ebc:	e7a7      	b.n	10066e0e <_printf_i+0x13a>
10066ebe:	0022      	movs	r2, r4
10066ec0:	2301      	movs	r3, #1
10066ec2:	9906      	ldr	r1, [sp, #24]
10066ec4:	9805      	ldr	r0, [sp, #20]
10066ec6:	9e07      	ldr	r6, [sp, #28]
10066ec8:	3219      	adds	r2, #25
10066eca:	47b0      	blx	r6
10066ecc:	3001      	adds	r0, #1
10066ece:	d09c      	beq.n	10066e0a <_printf_i+0x136>
10066ed0:	3501      	adds	r5, #1
10066ed2:	68e3      	ldr	r3, [r4, #12]
10066ed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10066ed6:	1a9b      	subs	r3, r3, r2
10066ed8:	42ab      	cmp	r3, r5
10066eda:	dcf0      	bgt.n	10066ebe <_printf_i+0x1ea>
10066edc:	e7e9      	b.n	10066eb2 <_printf_i+0x1de>
10066ede:	2500      	movs	r5, #0
10066ee0:	e7f7      	b.n	10066ed2 <_printf_i+0x1fe>
10066ee2:	46c0      	nop			@ (mov r8, r8)
10066ee4:	1006d20a 	.word	0x1006d20a
10066ee8:	1006d21b 	.word	0x1006d21b

10066eec <_scanf_float>:
10066eec:	b5f0      	push	{r4, r5, r6, r7, lr}
10066eee:	b08b      	sub	sp, #44	@ 0x2c
10066ef0:	0016      	movs	r6, r2
10066ef2:	9003      	str	r0, [sp, #12]
10066ef4:	22ae      	movs	r2, #174	@ 0xae
10066ef6:	2000      	movs	r0, #0
10066ef8:	9307      	str	r3, [sp, #28]
10066efa:	688b      	ldr	r3, [r1, #8]
10066efc:	000c      	movs	r4, r1
10066efe:	1e59      	subs	r1, r3, #1
10066f00:	0052      	lsls	r2, r2, #1
10066f02:	9006      	str	r0, [sp, #24]
10066f04:	4291      	cmp	r1, r2
10066f06:	d905      	bls.n	10066f14 <_scanf_float+0x28>
10066f08:	3b5e      	subs	r3, #94	@ 0x5e
10066f0a:	3bff      	subs	r3, #255	@ 0xff
10066f0c:	9306      	str	r3, [sp, #24]
10066f0e:	235e      	movs	r3, #94	@ 0x5e
10066f10:	33ff      	adds	r3, #255	@ 0xff
10066f12:	60a3      	str	r3, [r4, #8]
10066f14:	23f0      	movs	r3, #240	@ 0xf0
10066f16:	6822      	ldr	r2, [r4, #0]
10066f18:	00db      	lsls	r3, r3, #3
10066f1a:	4313      	orrs	r3, r2
10066f1c:	6023      	str	r3, [r4, #0]
10066f1e:	0023      	movs	r3, r4
10066f20:	2500      	movs	r5, #0
10066f22:	331c      	adds	r3, #28
10066f24:	001f      	movs	r7, r3
10066f26:	9304      	str	r3, [sp, #16]
10066f28:	9502      	str	r5, [sp, #8]
10066f2a:	9509      	str	r5, [sp, #36]	@ 0x24
10066f2c:	9508      	str	r5, [sp, #32]
10066f2e:	9501      	str	r5, [sp, #4]
10066f30:	9505      	str	r5, [sp, #20]
10066f32:	68a2      	ldr	r2, [r4, #8]
10066f34:	2a00      	cmp	r2, #0
10066f36:	d00a      	beq.n	10066f4e <_scanf_float+0x62>
10066f38:	6833      	ldr	r3, [r6, #0]
10066f3a:	781b      	ldrb	r3, [r3, #0]
10066f3c:	2b4e      	cmp	r3, #78	@ 0x4e
10066f3e:	d844      	bhi.n	10066fca <_scanf_float+0xde>
10066f40:	0018      	movs	r0, r3
10066f42:	2b40      	cmp	r3, #64	@ 0x40
10066f44:	d82c      	bhi.n	10066fa0 <_scanf_float+0xb4>
10066f46:	382b      	subs	r0, #43	@ 0x2b
10066f48:	b2c1      	uxtb	r1, r0
10066f4a:	290e      	cmp	r1, #14
10066f4c:	d92a      	bls.n	10066fa4 <_scanf_float+0xb8>
10066f4e:	9b01      	ldr	r3, [sp, #4]
10066f50:	2b00      	cmp	r3, #0
10066f52:	d003      	beq.n	10066f5c <_scanf_float+0x70>
10066f54:	6823      	ldr	r3, [r4, #0]
10066f56:	4aa6      	ldr	r2, [pc, #664]	@ (100671f0 <_scanf_float+0x304>)
10066f58:	4013      	ands	r3, r2
10066f5a:	6023      	str	r3, [r4, #0]
10066f5c:	9b02      	ldr	r3, [sp, #8]
10066f5e:	3b01      	subs	r3, #1
10066f60:	2b01      	cmp	r3, #1
10066f62:	d900      	bls.n	10066f66 <_scanf_float+0x7a>
10066f64:	e0fe      	b.n	10067164 <_scanf_float+0x278>
10066f66:	25be      	movs	r5, #190	@ 0xbe
10066f68:	006d      	lsls	r5, r5, #1
10066f6a:	9b04      	ldr	r3, [sp, #16]
10066f6c:	429f      	cmp	r7, r3
10066f6e:	d900      	bls.n	10066f72 <_scanf_float+0x86>
10066f70:	e0ee      	b.n	10067150 <_scanf_float+0x264>
10066f72:	2001      	movs	r0, #1
10066f74:	b00b      	add	sp, #44	@ 0x2c
10066f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066f78:	0018      	movs	r0, r3
10066f7a:	3861      	subs	r0, #97	@ 0x61
10066f7c:	280d      	cmp	r0, #13
10066f7e:	d8e6      	bhi.n	10066f4e <_scanf_float+0x62>
10066f80:	f7d9 f968 	bl	10040254 <__gnu_thumb1_case_shi>
10066f84:	ffe50089 	.word	0xffe50089
10066f88:	ffe5ffe5 	.word	0xffe5ffe5
10066f8c:	00a700bb 	.word	0x00a700bb
10066f90:	ffe5ffe5 	.word	0xffe5ffe5
10066f94:	ffe5008f 	.word	0xffe5008f
10066f98:	ffe5ffe5 	.word	0xffe5ffe5
10066f9c:	006bffe5 	.word	0x006bffe5
10066fa0:	3841      	subs	r0, #65	@ 0x41
10066fa2:	e7eb      	b.n	10066f7c <_scanf_float+0x90>
10066fa4:	280e      	cmp	r0, #14
10066fa6:	d8d2      	bhi.n	10066f4e <_scanf_float+0x62>
10066fa8:	f7d9 f954 	bl	10040254 <__gnu_thumb1_case_shi>
10066fac:	ffd1004f 	.word	0xffd1004f
10066fb0:	009d004f 	.word	0x009d004f
10066fb4:	0021ffd1 	.word	0x0021ffd1
10066fb8:	00410041 	.word	0x00410041
10066fbc:	00410041 	.word	0x00410041
10066fc0:	00410041 	.word	0x00410041
10066fc4:	00410041 	.word	0x00410041
10066fc8:	0041      	.short	0x0041
10066fca:	2b6e      	cmp	r3, #110	@ 0x6e
10066fcc:	d80a      	bhi.n	10066fe4 <_scanf_float+0xf8>
10066fce:	2b60      	cmp	r3, #96	@ 0x60
10066fd0:	d8d2      	bhi.n	10066f78 <_scanf_float+0x8c>
10066fd2:	2b54      	cmp	r3, #84	@ 0x54
10066fd4:	d100      	bne.n	10066fd8 <_scanf_float+0xec>
10066fd6:	e081      	b.n	100670dc <_scanf_float+0x1f0>
10066fd8:	2b59      	cmp	r3, #89	@ 0x59
10066fda:	d1b8      	bne.n	10066f4e <_scanf_float+0x62>
10066fdc:	2d07      	cmp	r5, #7
10066fde:	d1b6      	bne.n	10066f4e <_scanf_float+0x62>
10066fe0:	2508      	movs	r5, #8
10066fe2:	e02f      	b.n	10067044 <_scanf_float+0x158>
10066fe4:	2b74      	cmp	r3, #116	@ 0x74
10066fe6:	d079      	beq.n	100670dc <_scanf_float+0x1f0>
10066fe8:	2b79      	cmp	r3, #121	@ 0x79
10066fea:	d0f7      	beq.n	10066fdc <_scanf_float+0xf0>
10066fec:	e7af      	b.n	10066f4e <_scanf_float+0x62>
10066fee:	6821      	ldr	r1, [r4, #0]
10066ff0:	05c8      	lsls	r0, r1, #23
10066ff2:	d51c      	bpl.n	1006702e <_scanf_float+0x142>
10066ff4:	2380      	movs	r3, #128	@ 0x80
10066ff6:	4399      	bics	r1, r3
10066ff8:	9b01      	ldr	r3, [sp, #4]
10066ffa:	6021      	str	r1, [r4, #0]
10066ffc:	3301      	adds	r3, #1
10066ffe:	9301      	str	r3, [sp, #4]
10067000:	9b06      	ldr	r3, [sp, #24]
10067002:	2b00      	cmp	r3, #0
10067004:	d003      	beq.n	1006700e <_scanf_float+0x122>
10067006:	3b01      	subs	r3, #1
10067008:	3201      	adds	r2, #1
1006700a:	9306      	str	r3, [sp, #24]
1006700c:	60a2      	str	r2, [r4, #8]
1006700e:	68a3      	ldr	r3, [r4, #8]
10067010:	3b01      	subs	r3, #1
10067012:	60a3      	str	r3, [r4, #8]
10067014:	6923      	ldr	r3, [r4, #16]
10067016:	3301      	adds	r3, #1
10067018:	6123      	str	r3, [r4, #16]
1006701a:	6873      	ldr	r3, [r6, #4]
1006701c:	3b01      	subs	r3, #1
1006701e:	6073      	str	r3, [r6, #4]
10067020:	2b00      	cmp	r3, #0
10067022:	dc00      	bgt.n	10067026 <_scanf_float+0x13a>
10067024:	e08a      	b.n	1006713c <_scanf_float+0x250>
10067026:	6833      	ldr	r3, [r6, #0]
10067028:	3301      	adds	r3, #1
1006702a:	6033      	str	r3, [r6, #0]
1006702c:	e781      	b.n	10066f32 <_scanf_float+0x46>
1006702e:	9a02      	ldr	r2, [sp, #8]
10067030:	1951      	adds	r1, r2, r5
10067032:	2900      	cmp	r1, #0
10067034:	d000      	beq.n	10067038 <_scanf_float+0x14c>
10067036:	e78a      	b.n	10066f4e <_scanf_float+0x62>
10067038:	000d      	movs	r5, r1
1006703a:	6822      	ldr	r2, [r4, #0]
1006703c:	486d      	ldr	r0, [pc, #436]	@ (100671f4 <_scanf_float+0x308>)
1006703e:	9102      	str	r1, [sp, #8]
10067040:	4002      	ands	r2, r0
10067042:	6022      	str	r2, [r4, #0]
10067044:	703b      	strb	r3, [r7, #0]
10067046:	3701      	adds	r7, #1
10067048:	e7e1      	b.n	1006700e <_scanf_float+0x122>
1006704a:	2180      	movs	r1, #128	@ 0x80
1006704c:	6822      	ldr	r2, [r4, #0]
1006704e:	420a      	tst	r2, r1
10067050:	d100      	bne.n	10067054 <_scanf_float+0x168>
10067052:	e77c      	b.n	10066f4e <_scanf_float+0x62>
10067054:	438a      	bics	r2, r1
10067056:	6022      	str	r2, [r4, #0]
10067058:	e7f4      	b.n	10067044 <_scanf_float+0x158>
1006705a:	9a02      	ldr	r2, [sp, #8]
1006705c:	2a00      	cmp	r2, #0
1006705e:	d10f      	bne.n	10067080 <_scanf_float+0x194>
10067060:	9a01      	ldr	r2, [sp, #4]
10067062:	2a00      	cmp	r2, #0
10067064:	d10f      	bne.n	10067086 <_scanf_float+0x19a>
10067066:	6822      	ldr	r2, [r4, #0]
10067068:	21e0      	movs	r1, #224	@ 0xe0
1006706a:	0010      	movs	r0, r2
1006706c:	00c9      	lsls	r1, r1, #3
1006706e:	4008      	ands	r0, r1
10067070:	4288      	cmp	r0, r1
10067072:	d108      	bne.n	10067086 <_scanf_float+0x19a>
10067074:	4960      	ldr	r1, [pc, #384]	@ (100671f8 <_scanf_float+0x30c>)
10067076:	400a      	ands	r2, r1
10067078:	6022      	str	r2, [r4, #0]
1006707a:	2201      	movs	r2, #1
1006707c:	9202      	str	r2, [sp, #8]
1006707e:	e7e1      	b.n	10067044 <_scanf_float+0x158>
10067080:	9a02      	ldr	r2, [sp, #8]
10067082:	2a02      	cmp	r2, #2
10067084:	d058      	beq.n	10067138 <_scanf_float+0x24c>
10067086:	2d01      	cmp	r5, #1
10067088:	d002      	beq.n	10067090 <_scanf_float+0x1a4>
1006708a:	2d04      	cmp	r5, #4
1006708c:	d000      	beq.n	10067090 <_scanf_float+0x1a4>
1006708e:	e75e      	b.n	10066f4e <_scanf_float+0x62>
10067090:	3501      	adds	r5, #1
10067092:	b2ed      	uxtb	r5, r5
10067094:	e7d6      	b.n	10067044 <_scanf_float+0x158>
10067096:	9a02      	ldr	r2, [sp, #8]
10067098:	2a01      	cmp	r2, #1
1006709a:	d000      	beq.n	1006709e <_scanf_float+0x1b2>
1006709c:	e757      	b.n	10066f4e <_scanf_float+0x62>
1006709e:	2202      	movs	r2, #2
100670a0:	e7ec      	b.n	1006707c <_scanf_float+0x190>
100670a2:	2d00      	cmp	r5, #0
100670a4:	d110      	bne.n	100670c8 <_scanf_float+0x1dc>
100670a6:	9a01      	ldr	r2, [sp, #4]
100670a8:	2a00      	cmp	r2, #0
100670aa:	d000      	beq.n	100670ae <_scanf_float+0x1c2>
100670ac:	e752      	b.n	10066f54 <_scanf_float+0x68>
100670ae:	6822      	ldr	r2, [r4, #0]
100670b0:	21e0      	movs	r1, #224	@ 0xe0
100670b2:	0010      	movs	r0, r2
100670b4:	00c9      	lsls	r1, r1, #3
100670b6:	4008      	ands	r0, r1
100670b8:	4288      	cmp	r0, r1
100670ba:	d000      	beq.n	100670be <_scanf_float+0x1d2>
100670bc:	e11b      	b.n	100672f6 <_scanf_float+0x40a>
100670be:	494e      	ldr	r1, [pc, #312]	@ (100671f8 <_scanf_float+0x30c>)
100670c0:	3501      	adds	r5, #1
100670c2:	400a      	ands	r2, r1
100670c4:	6022      	str	r2, [r4, #0]
100670c6:	e7bd      	b.n	10067044 <_scanf_float+0x158>
100670c8:	21fd      	movs	r1, #253	@ 0xfd
100670ca:	1eea      	subs	r2, r5, #3
100670cc:	420a      	tst	r2, r1
100670ce:	d0df      	beq.n	10067090 <_scanf_float+0x1a4>
100670d0:	e73d      	b.n	10066f4e <_scanf_float+0x62>
100670d2:	2d02      	cmp	r5, #2
100670d4:	d000      	beq.n	100670d8 <_scanf_float+0x1ec>
100670d6:	e73a      	b.n	10066f4e <_scanf_float+0x62>
100670d8:	2503      	movs	r5, #3
100670da:	e7b3      	b.n	10067044 <_scanf_float+0x158>
100670dc:	2d06      	cmp	r5, #6
100670de:	d000      	beq.n	100670e2 <_scanf_float+0x1f6>
100670e0:	e735      	b.n	10066f4e <_scanf_float+0x62>
100670e2:	2507      	movs	r5, #7
100670e4:	e7ae      	b.n	10067044 <_scanf_float+0x158>
100670e6:	6822      	ldr	r2, [r4, #0]
100670e8:	0591      	lsls	r1, r2, #22
100670ea:	d400      	bmi.n	100670ee <_scanf_float+0x202>
100670ec:	e72f      	b.n	10066f4e <_scanf_float+0x62>
100670ee:	4943      	ldr	r1, [pc, #268]	@ (100671fc <_scanf_float+0x310>)
100670f0:	400a      	ands	r2, r1
100670f2:	6022      	str	r2, [r4, #0]
100670f4:	9a01      	ldr	r2, [sp, #4]
100670f6:	9205      	str	r2, [sp, #20]
100670f8:	e7a4      	b.n	10067044 <_scanf_float+0x158>
100670fa:	21a0      	movs	r1, #160	@ 0xa0
100670fc:	2080      	movs	r0, #128	@ 0x80
100670fe:	6822      	ldr	r2, [r4, #0]
10067100:	00c9      	lsls	r1, r1, #3
10067102:	4011      	ands	r1, r2
10067104:	00c0      	lsls	r0, r0, #3
10067106:	4281      	cmp	r1, r0
10067108:	d006      	beq.n	10067118 <_scanf_float+0x22c>
1006710a:	4202      	tst	r2, r0
1006710c:	d100      	bne.n	10067110 <_scanf_float+0x224>
1006710e:	e71e      	b.n	10066f4e <_scanf_float+0x62>
10067110:	9901      	ldr	r1, [sp, #4]
10067112:	2900      	cmp	r1, #0
10067114:	d100      	bne.n	10067118 <_scanf_float+0x22c>
10067116:	e0ee      	b.n	100672f6 <_scanf_float+0x40a>
10067118:	0591      	lsls	r1, r2, #22
1006711a:	d404      	bmi.n	10067126 <_scanf_float+0x23a>
1006711c:	9901      	ldr	r1, [sp, #4]
1006711e:	9805      	ldr	r0, [sp, #20]
10067120:	9709      	str	r7, [sp, #36]	@ 0x24
10067122:	1a09      	subs	r1, r1, r0
10067124:	9108      	str	r1, [sp, #32]
10067126:	4934      	ldr	r1, [pc, #208]	@ (100671f8 <_scanf_float+0x30c>)
10067128:	400a      	ands	r2, r1
1006712a:	21c0      	movs	r1, #192	@ 0xc0
1006712c:	0049      	lsls	r1, r1, #1
1006712e:	430a      	orrs	r2, r1
10067130:	6022      	str	r2, [r4, #0]
10067132:	2200      	movs	r2, #0
10067134:	9201      	str	r2, [sp, #4]
10067136:	e785      	b.n	10067044 <_scanf_float+0x158>
10067138:	2203      	movs	r2, #3
1006713a:	e79f      	b.n	1006707c <_scanf_float+0x190>
1006713c:	23c0      	movs	r3, #192	@ 0xc0
1006713e:	005b      	lsls	r3, r3, #1
10067140:	0031      	movs	r1, r6
10067142:	58e3      	ldr	r3, [r4, r3]
10067144:	9803      	ldr	r0, [sp, #12]
10067146:	4798      	blx	r3
10067148:	2800      	cmp	r0, #0
1006714a:	d100      	bne.n	1006714e <_scanf_float+0x262>
1006714c:	e6f1      	b.n	10066f32 <_scanf_float+0x46>
1006714e:	e6fe      	b.n	10066f4e <_scanf_float+0x62>
10067150:	3f01      	subs	r7, #1
10067152:	5963      	ldr	r3, [r4, r5]
10067154:	0032      	movs	r2, r6
10067156:	7839      	ldrb	r1, [r7, #0]
10067158:	9803      	ldr	r0, [sp, #12]
1006715a:	4798      	blx	r3
1006715c:	6923      	ldr	r3, [r4, #16]
1006715e:	3b01      	subs	r3, #1
10067160:	6123      	str	r3, [r4, #16]
10067162:	e702      	b.n	10066f6a <_scanf_float+0x7e>
10067164:	1e6b      	subs	r3, r5, #1
10067166:	2b06      	cmp	r3, #6
10067168:	d80e      	bhi.n	10067188 <_scanf_float+0x29c>
1006716a:	9702      	str	r7, [sp, #8]
1006716c:	2d02      	cmp	r5, #2
1006716e:	d920      	bls.n	100671b2 <_scanf_float+0x2c6>
10067170:	1beb      	subs	r3, r5, r7
10067172:	b2db      	uxtb	r3, r3
10067174:	9306      	str	r3, [sp, #24]
10067176:	9b02      	ldr	r3, [sp, #8]
10067178:	9a06      	ldr	r2, [sp, #24]
1006717a:	189b      	adds	r3, r3, r2
1006717c:	b2db      	uxtb	r3, r3
1006717e:	2b03      	cmp	r3, #3
10067180:	d127      	bne.n	100671d2 <_scanf_float+0x2e6>
10067182:	3d03      	subs	r5, #3
10067184:	b2ed      	uxtb	r5, r5
10067186:	1b7f      	subs	r7, r7, r5
10067188:	6823      	ldr	r3, [r4, #0]
1006718a:	05da      	lsls	r2, r3, #23
1006718c:	d553      	bpl.n	10067236 <_scanf_float+0x34a>
1006718e:	055b      	lsls	r3, r3, #21
10067190:	d536      	bpl.n	10067200 <_scanf_float+0x314>
10067192:	25be      	movs	r5, #190	@ 0xbe
10067194:	006d      	lsls	r5, r5, #1
10067196:	9b04      	ldr	r3, [sp, #16]
10067198:	429f      	cmp	r7, r3
1006719a:	d800      	bhi.n	1006719e <_scanf_float+0x2b2>
1006719c:	e6e9      	b.n	10066f72 <_scanf_float+0x86>
1006719e:	3f01      	subs	r7, #1
100671a0:	5963      	ldr	r3, [r4, r5]
100671a2:	0032      	movs	r2, r6
100671a4:	7839      	ldrb	r1, [r7, #0]
100671a6:	9803      	ldr	r0, [sp, #12]
100671a8:	4798      	blx	r3
100671aa:	6923      	ldr	r3, [r4, #16]
100671ac:	3b01      	subs	r3, #1
100671ae:	6123      	str	r3, [r4, #16]
100671b0:	e7f1      	b.n	10067196 <_scanf_float+0x2aa>
100671b2:	25be      	movs	r5, #190	@ 0xbe
100671b4:	006d      	lsls	r5, r5, #1
100671b6:	9b04      	ldr	r3, [sp, #16]
100671b8:	429f      	cmp	r7, r3
100671ba:	d800      	bhi.n	100671be <_scanf_float+0x2d2>
100671bc:	e6d9      	b.n	10066f72 <_scanf_float+0x86>
100671be:	3f01      	subs	r7, #1
100671c0:	5963      	ldr	r3, [r4, r5]
100671c2:	0032      	movs	r2, r6
100671c4:	7839      	ldrb	r1, [r7, #0]
100671c6:	9803      	ldr	r0, [sp, #12]
100671c8:	4798      	blx	r3
100671ca:	6923      	ldr	r3, [r4, #16]
100671cc:	3b01      	subs	r3, #1
100671ce:	6123      	str	r3, [r4, #16]
100671d0:	e7f1      	b.n	100671b6 <_scanf_float+0x2ca>
100671d2:	9b02      	ldr	r3, [sp, #8]
100671d4:	0032      	movs	r2, r6
100671d6:	3b01      	subs	r3, #1
100671d8:	7819      	ldrb	r1, [r3, #0]
100671da:	9302      	str	r3, [sp, #8]
100671dc:	23be      	movs	r3, #190	@ 0xbe
100671de:	005b      	lsls	r3, r3, #1
100671e0:	58e3      	ldr	r3, [r4, r3]
100671e2:	9803      	ldr	r0, [sp, #12]
100671e4:	4798      	blx	r3
100671e6:	6923      	ldr	r3, [r4, #16]
100671e8:	3b01      	subs	r3, #1
100671ea:	6123      	str	r3, [r4, #16]
100671ec:	e7c3      	b.n	10067176 <_scanf_float+0x28a>
100671ee:	46c0      	nop			@ (mov r8, r8)
100671f0:	fffffeff 	.word	0xfffffeff
100671f4:	fffffe7f 	.word	0xfffffe7f
100671f8:	fffff87f 	.word	0xfffff87f
100671fc:	fffffd7f 	.word	0xfffffd7f
10067200:	6923      	ldr	r3, [r4, #16]
10067202:	1e7d      	subs	r5, r7, #1
10067204:	7829      	ldrb	r1, [r5, #0]
10067206:	3b01      	subs	r3, #1
10067208:	6123      	str	r3, [r4, #16]
1006720a:	2965      	cmp	r1, #101	@ 0x65
1006720c:	d00c      	beq.n	10067228 <_scanf_float+0x33c>
1006720e:	2945      	cmp	r1, #69	@ 0x45
10067210:	d00a      	beq.n	10067228 <_scanf_float+0x33c>
10067212:	23be      	movs	r3, #190	@ 0xbe
10067214:	005b      	lsls	r3, r3, #1
10067216:	58e3      	ldr	r3, [r4, r3]
10067218:	0032      	movs	r2, r6
1006721a:	9803      	ldr	r0, [sp, #12]
1006721c:	4798      	blx	r3
1006721e:	6923      	ldr	r3, [r4, #16]
10067220:	1ebd      	subs	r5, r7, #2
10067222:	3b01      	subs	r3, #1
10067224:	7829      	ldrb	r1, [r5, #0]
10067226:	6123      	str	r3, [r4, #16]
10067228:	23be      	movs	r3, #190	@ 0xbe
1006722a:	005b      	lsls	r3, r3, #1
1006722c:	0032      	movs	r2, r6
1006722e:	58e3      	ldr	r3, [r4, r3]
10067230:	9803      	ldr	r0, [sp, #12]
10067232:	4798      	blx	r3
10067234:	002f      	movs	r7, r5
10067236:	6821      	ldr	r1, [r4, #0]
10067238:	2310      	movs	r3, #16
1006723a:	000a      	movs	r2, r1
1006723c:	401a      	ands	r2, r3
1006723e:	4219      	tst	r1, r3
10067240:	d001      	beq.n	10067246 <_scanf_float+0x35a>
10067242:	2000      	movs	r0, #0
10067244:	e696      	b.n	10066f74 <_scanf_float+0x88>
10067246:	21c0      	movs	r1, #192	@ 0xc0
10067248:	703a      	strb	r2, [r7, #0]
1006724a:	6823      	ldr	r3, [r4, #0]
1006724c:	00c9      	lsls	r1, r1, #3
1006724e:	400b      	ands	r3, r1
10067250:	2180      	movs	r1, #128	@ 0x80
10067252:	00c9      	lsls	r1, r1, #3
10067254:	428b      	cmp	r3, r1
10067256:	d126      	bne.n	100672a6 <_scanf_float+0x3ba>
10067258:	9b05      	ldr	r3, [sp, #20]
1006725a:	9a01      	ldr	r2, [sp, #4]
1006725c:	4293      	cmp	r3, r2
1006725e:	d00c      	beq.n	1006727a <_scanf_float+0x38e>
10067260:	1a9a      	subs	r2, r3, r2
10067262:	0023      	movs	r3, r4
10067264:	3370      	adds	r3, #112	@ 0x70
10067266:	33ff      	adds	r3, #255	@ 0xff
10067268:	429f      	cmp	r7, r3
1006726a:	d302      	bcc.n	10067272 <_scanf_float+0x386>
1006726c:	0027      	movs	r7, r4
1006726e:	376f      	adds	r7, #111	@ 0x6f
10067270:	37ff      	adds	r7, #255	@ 0xff
10067272:	0038      	movs	r0, r7
10067274:	4921      	ldr	r1, [pc, #132]	@ (100672fc <_scanf_float+0x410>)
10067276:	f000 fa39 	bl	100676ec <siprintf>
1006727a:	2200      	movs	r2, #0
1006727c:	9904      	ldr	r1, [sp, #16]
1006727e:	9803      	ldr	r0, [sp, #12]
10067280:	f002 fe28 	bl	10069ed4 <_strtod_r>
10067284:	9b07      	ldr	r3, [sp, #28]
10067286:	6822      	ldr	r2, [r4, #0]
10067288:	0006      	movs	r6, r0
1006728a:	000f      	movs	r7, r1
1006728c:	681b      	ldr	r3, [r3, #0]
1006728e:	0791      	lsls	r1, r2, #30
10067290:	d516      	bpl.n	100672c0 <_scanf_float+0x3d4>
10067292:	9907      	ldr	r1, [sp, #28]
10067294:	1d1a      	adds	r2, r3, #4
10067296:	600a      	str	r2, [r1, #0]
10067298:	681b      	ldr	r3, [r3, #0]
1006729a:	601e      	str	r6, [r3, #0]
1006729c:	605f      	str	r7, [r3, #4]
1006729e:	68e3      	ldr	r3, [r4, #12]
100672a0:	3301      	adds	r3, #1
100672a2:	60e3      	str	r3, [r4, #12]
100672a4:	e7cd      	b.n	10067242 <_scanf_float+0x356>
100672a6:	9b08      	ldr	r3, [sp, #32]
100672a8:	2b00      	cmp	r3, #0
100672aa:	d0e6      	beq.n	1006727a <_scanf_float+0x38e>
100672ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100672ae:	9803      	ldr	r0, [sp, #12]
100672b0:	1c59      	adds	r1, r3, #1
100672b2:	230a      	movs	r3, #10
100672b4:	f002 fea0 	bl	10069ff8 <_strtol_r>
100672b8:	9b08      	ldr	r3, [sp, #32]
100672ba:	9f09      	ldr	r7, [sp, #36]	@ 0x24
100672bc:	1ac2      	subs	r2, r0, r3
100672be:	e7d0      	b.n	10067262 <_scanf_float+0x376>
100672c0:	1d19      	adds	r1, r3, #4
100672c2:	0752      	lsls	r2, r2, #29
100672c4:	d502      	bpl.n	100672cc <_scanf_float+0x3e0>
100672c6:	9a07      	ldr	r2, [sp, #28]
100672c8:	6011      	str	r1, [r2, #0]
100672ca:	e7e5      	b.n	10067298 <_scanf_float+0x3ac>
100672cc:	9a07      	ldr	r2, [sp, #28]
100672ce:	0030      	movs	r0, r6
100672d0:	6011      	str	r1, [r2, #0]
100672d2:	681d      	ldr	r5, [r3, #0]
100672d4:	0032      	movs	r2, r6
100672d6:	003b      	movs	r3, r7
100672d8:	0039      	movs	r1, r7
100672da:	f7db fa1b 	bl	10042714 <__aeabi_dcmpun>
100672de:	2800      	cmp	r0, #0
100672e0:	d004      	beq.n	100672ec <_scanf_float+0x400>
100672e2:	4807      	ldr	r0, [pc, #28]	@ (10067300 <_scanf_float+0x414>)
100672e4:	f000 fb9e 	bl	10067a24 <nanf>
100672e8:	6028      	str	r0, [r5, #0]
100672ea:	e7d8      	b.n	1006729e <_scanf_float+0x3b2>
100672ec:	0030      	movs	r0, r6
100672ee:	0039      	movs	r1, r7
100672f0:	f7db fac0 	bl	10042874 <__aeabi_d2f>
100672f4:	e7f8      	b.n	100672e8 <_scanf_float+0x3fc>
100672f6:	2300      	movs	r3, #0
100672f8:	9301      	str	r3, [sp, #4]
100672fa:	e62f      	b.n	10066f5c <_scanf_float+0x70>
100672fc:	1006d22c 	.word	0x1006d22c
10067300:	1006d36d 	.word	0x1006d36d

10067304 <std>:
10067304:	2300      	movs	r3, #0
10067306:	b510      	push	{r4, lr}
10067308:	0004      	movs	r4, r0
1006730a:	6003      	str	r3, [r0, #0]
1006730c:	6043      	str	r3, [r0, #4]
1006730e:	6083      	str	r3, [r0, #8]
10067310:	8181      	strh	r1, [r0, #12]
10067312:	6643      	str	r3, [r0, #100]	@ 0x64
10067314:	81c2      	strh	r2, [r0, #14]
10067316:	6103      	str	r3, [r0, #16]
10067318:	6143      	str	r3, [r0, #20]
1006731a:	6183      	str	r3, [r0, #24]
1006731c:	0019      	movs	r1, r3
1006731e:	2208      	movs	r2, #8
10067320:	305c      	adds	r0, #92	@ 0x5c
10067322:	f000 faff 	bl	10067924 <memset>
10067326:	4b0b      	ldr	r3, [pc, #44]	@ (10067354 <std+0x50>)
10067328:	6224      	str	r4, [r4, #32]
1006732a:	6263      	str	r3, [r4, #36]	@ 0x24
1006732c:	4b0a      	ldr	r3, [pc, #40]	@ (10067358 <std+0x54>)
1006732e:	62a3      	str	r3, [r4, #40]	@ 0x28
10067330:	4b0a      	ldr	r3, [pc, #40]	@ (1006735c <std+0x58>)
10067332:	62e3      	str	r3, [r4, #44]	@ 0x2c
10067334:	4b0a      	ldr	r3, [pc, #40]	@ (10067360 <std+0x5c>)
10067336:	6323      	str	r3, [r4, #48]	@ 0x30
10067338:	4b0a      	ldr	r3, [pc, #40]	@ (10067364 <std+0x60>)
1006733a:	429c      	cmp	r4, r3
1006733c:	d005      	beq.n	1006734a <std+0x46>
1006733e:	4b0a      	ldr	r3, [pc, #40]	@ (10067368 <std+0x64>)
10067340:	429c      	cmp	r4, r3
10067342:	d002      	beq.n	1006734a <std+0x46>
10067344:	4b09      	ldr	r3, [pc, #36]	@ (1006736c <std+0x68>)
10067346:	429c      	cmp	r4, r3
10067348:	d103      	bne.n	10067352 <std+0x4e>
1006734a:	0020      	movs	r0, r4
1006734c:	3058      	adds	r0, #88	@ 0x58
1006734e:	f000 fb49 	bl	100679e4 <__retarget_lock_init_recursive>
10067352:	bd10      	pop	{r4, pc}
10067354:	10067731 	.word	0x10067731
10067358:	10067759 	.word	0x10067759
1006735c:	10067791 	.word	0x10067791
10067360:	100677bd 	.word	0x100677bd
10067364:	200011cc 	.word	0x200011cc
10067368:	20001234 	.word	0x20001234
1006736c:	2000129c 	.word	0x2000129c

10067370 <stdio_exit_handler>:
10067370:	b510      	push	{r4, lr}
10067372:	4a03      	ldr	r2, [pc, #12]	@ (10067380 <stdio_exit_handler+0x10>)
10067374:	4903      	ldr	r1, [pc, #12]	@ (10067384 <stdio_exit_handler+0x14>)
10067376:	4804      	ldr	r0, [pc, #16]	@ (10067388 <stdio_exit_handler+0x18>)
10067378:	f000 f86c 	bl	10067454 <_fwalk_sglue>
1006737c:	bd10      	pop	{r4, pc}
1006737e:	46c0      	nop			@ (mov r8, r8)
10067380:	20001524 	.word	0x20001524
10067384:	1006a651 	.word	0x1006a651
10067388:	20001534 	.word	0x20001534

1006738c <cleanup_stdio>:
1006738c:	6841      	ldr	r1, [r0, #4]
1006738e:	4b0b      	ldr	r3, [pc, #44]	@ (100673bc <cleanup_stdio+0x30>)
10067390:	b510      	push	{r4, lr}
10067392:	0004      	movs	r4, r0
10067394:	4299      	cmp	r1, r3
10067396:	d001      	beq.n	1006739c <cleanup_stdio+0x10>
10067398:	f003 f95a 	bl	1006a650 <_fflush_r>
1006739c:	68a1      	ldr	r1, [r4, #8]
1006739e:	4b08      	ldr	r3, [pc, #32]	@ (100673c0 <cleanup_stdio+0x34>)
100673a0:	4299      	cmp	r1, r3
100673a2:	d002      	beq.n	100673aa <cleanup_stdio+0x1e>
100673a4:	0020      	movs	r0, r4
100673a6:	f003 f953 	bl	1006a650 <_fflush_r>
100673aa:	68e1      	ldr	r1, [r4, #12]
100673ac:	4b05      	ldr	r3, [pc, #20]	@ (100673c4 <cleanup_stdio+0x38>)
100673ae:	4299      	cmp	r1, r3
100673b0:	d002      	beq.n	100673b8 <cleanup_stdio+0x2c>
100673b2:	0020      	movs	r0, r4
100673b4:	f003 f94c 	bl	1006a650 <_fflush_r>
100673b8:	bd10      	pop	{r4, pc}
100673ba:	46c0      	nop			@ (mov r8, r8)
100673bc:	200011cc 	.word	0x200011cc
100673c0:	20001234 	.word	0x20001234
100673c4:	2000129c 	.word	0x2000129c

100673c8 <global_stdio_init.part.0>:
100673c8:	b510      	push	{r4, lr}
100673ca:	4b09      	ldr	r3, [pc, #36]	@ (100673f0 <global_stdio_init.part.0+0x28>)
100673cc:	4a09      	ldr	r2, [pc, #36]	@ (100673f4 <global_stdio_init.part.0+0x2c>)
100673ce:	2104      	movs	r1, #4
100673d0:	601a      	str	r2, [r3, #0]
100673d2:	4809      	ldr	r0, [pc, #36]	@ (100673f8 <global_stdio_init.part.0+0x30>)
100673d4:	2200      	movs	r2, #0
100673d6:	f7ff ff95 	bl	10067304 <std>
100673da:	2201      	movs	r2, #1
100673dc:	2109      	movs	r1, #9
100673de:	4807      	ldr	r0, [pc, #28]	@ (100673fc <global_stdio_init.part.0+0x34>)
100673e0:	f7ff ff90 	bl	10067304 <std>
100673e4:	2202      	movs	r2, #2
100673e6:	2112      	movs	r1, #18
100673e8:	4805      	ldr	r0, [pc, #20]	@ (10067400 <global_stdio_init.part.0+0x38>)
100673ea:	f7ff ff8b 	bl	10067304 <std>
100673ee:	bd10      	pop	{r4, pc}
100673f0:	20001304 	.word	0x20001304
100673f4:	10067371 	.word	0x10067371
100673f8:	200011cc 	.word	0x200011cc
100673fc:	20001234 	.word	0x20001234
10067400:	2000129c 	.word	0x2000129c

10067404 <__sfp_lock_acquire>:
10067404:	b510      	push	{r4, lr}
10067406:	4802      	ldr	r0, [pc, #8]	@ (10067410 <__sfp_lock_acquire+0xc>)
10067408:	f000 faed 	bl	100679e6 <__retarget_lock_acquire_recursive>
1006740c:	bd10      	pop	{r4, pc}
1006740e:	46c0      	nop			@ (mov r8, r8)
10067410:	2000130d 	.word	0x2000130d

10067414 <__sfp_lock_release>:
10067414:	b510      	push	{r4, lr}
10067416:	4802      	ldr	r0, [pc, #8]	@ (10067420 <__sfp_lock_release+0xc>)
10067418:	f000 fae6 	bl	100679e8 <__retarget_lock_release_recursive>
1006741c:	bd10      	pop	{r4, pc}
1006741e:	46c0      	nop			@ (mov r8, r8)
10067420:	2000130d 	.word	0x2000130d

10067424 <__sinit>:
10067424:	b510      	push	{r4, lr}
10067426:	0004      	movs	r4, r0
10067428:	f7ff ffec 	bl	10067404 <__sfp_lock_acquire>
1006742c:	6a23      	ldr	r3, [r4, #32]
1006742e:	2b00      	cmp	r3, #0
10067430:	d002      	beq.n	10067438 <__sinit+0x14>
10067432:	f7ff ffef 	bl	10067414 <__sfp_lock_release>
10067436:	bd10      	pop	{r4, pc}
10067438:	4b04      	ldr	r3, [pc, #16]	@ (1006744c <__sinit+0x28>)
1006743a:	6223      	str	r3, [r4, #32]
1006743c:	4b04      	ldr	r3, [pc, #16]	@ (10067450 <__sinit+0x2c>)
1006743e:	681b      	ldr	r3, [r3, #0]
10067440:	2b00      	cmp	r3, #0
10067442:	d1f6      	bne.n	10067432 <__sinit+0xe>
10067444:	f7ff ffc0 	bl	100673c8 <global_stdio_init.part.0>
10067448:	e7f3      	b.n	10067432 <__sinit+0xe>
1006744a:	46c0      	nop			@ (mov r8, r8)
1006744c:	1006738d 	.word	0x1006738d
10067450:	20001304 	.word	0x20001304

10067454 <_fwalk_sglue>:
10067454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10067456:	0014      	movs	r4, r2
10067458:	2600      	movs	r6, #0
1006745a:	9000      	str	r0, [sp, #0]
1006745c:	9101      	str	r1, [sp, #4]
1006745e:	68a5      	ldr	r5, [r4, #8]
10067460:	6867      	ldr	r7, [r4, #4]
10067462:	3f01      	subs	r7, #1
10067464:	d504      	bpl.n	10067470 <_fwalk_sglue+0x1c>
10067466:	6824      	ldr	r4, [r4, #0]
10067468:	2c00      	cmp	r4, #0
1006746a:	d1f8      	bne.n	1006745e <_fwalk_sglue+0xa>
1006746c:	0030      	movs	r0, r6
1006746e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067470:	89ab      	ldrh	r3, [r5, #12]
10067472:	2b01      	cmp	r3, #1
10067474:	d908      	bls.n	10067488 <_fwalk_sglue+0x34>
10067476:	220e      	movs	r2, #14
10067478:	5eab      	ldrsh	r3, [r5, r2]
1006747a:	3301      	adds	r3, #1
1006747c:	d004      	beq.n	10067488 <_fwalk_sglue+0x34>
1006747e:	0029      	movs	r1, r5
10067480:	9800      	ldr	r0, [sp, #0]
10067482:	9b01      	ldr	r3, [sp, #4]
10067484:	4798      	blx	r3
10067486:	4306      	orrs	r6, r0
10067488:	3568      	adds	r5, #104	@ 0x68
1006748a:	e7ea      	b.n	10067462 <_fwalk_sglue+0xe>

1006748c <iprintf>:
1006748c:	b40f      	push	{r0, r1, r2, r3}
1006748e:	b507      	push	{r0, r1, r2, lr}
10067490:	4905      	ldr	r1, [pc, #20]	@ (100674a8 <iprintf+0x1c>)
10067492:	ab04      	add	r3, sp, #16
10067494:	6808      	ldr	r0, [r1, #0]
10067496:	cb04      	ldmia	r3!, {r2}
10067498:	6881      	ldr	r1, [r0, #8]
1006749a:	9301      	str	r3, [sp, #4]
1006749c:	f002 ff36 	bl	1006a30c <_vfiprintf_r>
100674a0:	b003      	add	sp, #12
100674a2:	bc08      	pop	{r3}
100674a4:	b004      	add	sp, #16
100674a6:	4718      	bx	r3
100674a8:	20001530 	.word	0x20001530

100674ac <putchar>:
100674ac:	b510      	push	{r4, lr}
100674ae:	4b03      	ldr	r3, [pc, #12]	@ (100674bc <putchar+0x10>)
100674b0:	0001      	movs	r1, r0
100674b2:	6818      	ldr	r0, [r3, #0]
100674b4:	6882      	ldr	r2, [r0, #8]
100674b6:	f003 f962 	bl	1006a77e <_putc_r>
100674ba:	bd10      	pop	{r4, pc}
100674bc:	20001530 	.word	0x20001530

100674c0 <_puts_r>:
100674c0:	6a03      	ldr	r3, [r0, #32]
100674c2:	b570      	push	{r4, r5, r6, lr}
100674c4:	0005      	movs	r5, r0
100674c6:	000e      	movs	r6, r1
100674c8:	6884      	ldr	r4, [r0, #8]
100674ca:	2b00      	cmp	r3, #0
100674cc:	d101      	bne.n	100674d2 <_puts_r+0x12>
100674ce:	f7ff ffa9 	bl	10067424 <__sinit>
100674d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100674d4:	07db      	lsls	r3, r3, #31
100674d6:	d405      	bmi.n	100674e4 <_puts_r+0x24>
100674d8:	89a3      	ldrh	r3, [r4, #12]
100674da:	059b      	lsls	r3, r3, #22
100674dc:	d402      	bmi.n	100674e4 <_puts_r+0x24>
100674de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100674e0:	f000 fa81 	bl	100679e6 <__retarget_lock_acquire_recursive>
100674e4:	89a3      	ldrh	r3, [r4, #12]
100674e6:	071b      	lsls	r3, r3, #28
100674e8:	d502      	bpl.n	100674f0 <_puts_r+0x30>
100674ea:	6923      	ldr	r3, [r4, #16]
100674ec:	2b00      	cmp	r3, #0
100674ee:	d11f      	bne.n	10067530 <_puts_r+0x70>
100674f0:	0021      	movs	r1, r4
100674f2:	0028      	movs	r0, r5
100674f4:	f000 f9aa 	bl	1006784c <__swsetup_r>
100674f8:	2800      	cmp	r0, #0
100674fa:	d019      	beq.n	10067530 <_puts_r+0x70>
100674fc:	2501      	movs	r5, #1
100674fe:	426d      	negs	r5, r5
10067500:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10067502:	07db      	lsls	r3, r3, #31
10067504:	d405      	bmi.n	10067512 <_puts_r+0x52>
10067506:	89a3      	ldrh	r3, [r4, #12]
10067508:	059b      	lsls	r3, r3, #22
1006750a:	d402      	bmi.n	10067512 <_puts_r+0x52>
1006750c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1006750e:	f000 fa6b 	bl	100679e8 <__retarget_lock_release_recursive>
10067512:	0028      	movs	r0, r5
10067514:	bd70      	pop	{r4, r5, r6, pc}
10067516:	3601      	adds	r6, #1
10067518:	60a3      	str	r3, [r4, #8]
1006751a:	2b00      	cmp	r3, #0
1006751c:	da04      	bge.n	10067528 <_puts_r+0x68>
1006751e:	69a2      	ldr	r2, [r4, #24]
10067520:	429a      	cmp	r2, r3
10067522:	dc16      	bgt.n	10067552 <_puts_r+0x92>
10067524:	290a      	cmp	r1, #10
10067526:	d014      	beq.n	10067552 <_puts_r+0x92>
10067528:	6823      	ldr	r3, [r4, #0]
1006752a:	1c5a      	adds	r2, r3, #1
1006752c:	6022      	str	r2, [r4, #0]
1006752e:	7019      	strb	r1, [r3, #0]
10067530:	68a3      	ldr	r3, [r4, #8]
10067532:	7831      	ldrb	r1, [r6, #0]
10067534:	3b01      	subs	r3, #1
10067536:	2900      	cmp	r1, #0
10067538:	d1ed      	bne.n	10067516 <_puts_r+0x56>
1006753a:	60a3      	str	r3, [r4, #8]
1006753c:	2b00      	cmp	r3, #0
1006753e:	da0f      	bge.n	10067560 <_puts_r+0xa0>
10067540:	0022      	movs	r2, r4
10067542:	0028      	movs	r0, r5
10067544:	310a      	adds	r1, #10
10067546:	f000 f93f 	bl	100677c8 <__swbuf_r>
1006754a:	3001      	adds	r0, #1
1006754c:	d0d6      	beq.n	100674fc <_puts_r+0x3c>
1006754e:	250a      	movs	r5, #10
10067550:	e7d6      	b.n	10067500 <_puts_r+0x40>
10067552:	0022      	movs	r2, r4
10067554:	0028      	movs	r0, r5
10067556:	f000 f937 	bl	100677c8 <__swbuf_r>
1006755a:	3001      	adds	r0, #1
1006755c:	d1e8      	bne.n	10067530 <_puts_r+0x70>
1006755e:	e7cd      	b.n	100674fc <_puts_r+0x3c>
10067560:	6823      	ldr	r3, [r4, #0]
10067562:	1c5a      	adds	r2, r3, #1
10067564:	6022      	str	r2, [r4, #0]
10067566:	220a      	movs	r2, #10
10067568:	701a      	strb	r2, [r3, #0]
1006756a:	e7f0      	b.n	1006754e <_puts_r+0x8e>

1006756c <puts>:
1006756c:	b510      	push	{r4, lr}
1006756e:	4b03      	ldr	r3, [pc, #12]	@ (1006757c <puts+0x10>)
10067570:	0001      	movs	r1, r0
10067572:	6818      	ldr	r0, [r3, #0]
10067574:	f7ff ffa4 	bl	100674c0 <_puts_r>
10067578:	bd10      	pop	{r4, pc}
1006757a:	46c0      	nop			@ (mov r8, r8)
1006757c:	20001530 	.word	0x20001530

10067580 <setvbuf>:
10067580:	b5f0      	push	{r4, r5, r6, r7, lr}
10067582:	001d      	movs	r5, r3
10067584:	4b57      	ldr	r3, [pc, #348]	@ (100676e4 <setvbuf+0x164>)
10067586:	b085      	sub	sp, #20
10067588:	681e      	ldr	r6, [r3, #0]
1006758a:	0004      	movs	r4, r0
1006758c:	000f      	movs	r7, r1
1006758e:	9200      	str	r2, [sp, #0]
10067590:	2e00      	cmp	r6, #0
10067592:	d005      	beq.n	100675a0 <setvbuf+0x20>
10067594:	6a33      	ldr	r3, [r6, #32]
10067596:	2b00      	cmp	r3, #0
10067598:	d102      	bne.n	100675a0 <setvbuf+0x20>
1006759a:	0030      	movs	r0, r6
1006759c:	f7ff ff42 	bl	10067424 <__sinit>
100675a0:	9b00      	ldr	r3, [sp, #0]
100675a2:	2b02      	cmp	r3, #2
100675a4:	d005      	beq.n	100675b2 <setvbuf+0x32>
100675a6:	2b01      	cmp	r3, #1
100675a8:	d900      	bls.n	100675ac <setvbuf+0x2c>
100675aa:	e097      	b.n	100676dc <setvbuf+0x15c>
100675ac:	2d00      	cmp	r5, #0
100675ae:	da00      	bge.n	100675b2 <setvbuf+0x32>
100675b0:	e094      	b.n	100676dc <setvbuf+0x15c>
100675b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100675b4:	07db      	lsls	r3, r3, #31
100675b6:	d405      	bmi.n	100675c4 <setvbuf+0x44>
100675b8:	89a3      	ldrh	r3, [r4, #12]
100675ba:	059b      	lsls	r3, r3, #22
100675bc:	d402      	bmi.n	100675c4 <setvbuf+0x44>
100675be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100675c0:	f000 fa11 	bl	100679e6 <__retarget_lock_acquire_recursive>
100675c4:	0021      	movs	r1, r4
100675c6:	0030      	movs	r0, r6
100675c8:	f003 f842 	bl	1006a650 <_fflush_r>
100675cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
100675ce:	2900      	cmp	r1, #0
100675d0:	d008      	beq.n	100675e4 <setvbuf+0x64>
100675d2:	0023      	movs	r3, r4
100675d4:	3344      	adds	r3, #68	@ 0x44
100675d6:	4299      	cmp	r1, r3
100675d8:	d002      	beq.n	100675e0 <setvbuf+0x60>
100675da:	0030      	movs	r0, r6
100675dc:	f001 f89c 	bl	10068718 <_free_r>
100675e0:	2300      	movs	r3, #0
100675e2:	6363      	str	r3, [r4, #52]	@ 0x34
100675e4:	2300      	movs	r3, #0
100675e6:	61a3      	str	r3, [r4, #24]
100675e8:	6063      	str	r3, [r4, #4]
100675ea:	89a3      	ldrh	r3, [r4, #12]
100675ec:	061b      	lsls	r3, r3, #24
100675ee:	d503      	bpl.n	100675f8 <setvbuf+0x78>
100675f0:	0030      	movs	r0, r6
100675f2:	6921      	ldr	r1, [r4, #16]
100675f4:	f001 f890 	bl	10068718 <_free_r>
100675f8:	89a3      	ldrh	r3, [r4, #12]
100675fa:	4a3b      	ldr	r2, [pc, #236]	@ (100676e8 <setvbuf+0x168>)
100675fc:	4013      	ands	r3, r2
100675fe:	81a3      	strh	r3, [r4, #12]
10067600:	9b00      	ldr	r3, [sp, #0]
10067602:	2b02      	cmp	r3, #2
10067604:	d060      	beq.n	100676c8 <setvbuf+0x148>
10067606:	ab03      	add	r3, sp, #12
10067608:	0021      	movs	r1, r4
1006760a:	0030      	movs	r0, r6
1006760c:	aa02      	add	r2, sp, #8
1006760e:	f003 f84b 	bl	1006a6a8 <__swhatbuf_r>
10067612:	89a3      	ldrh	r3, [r4, #12]
10067614:	4303      	orrs	r3, r0
10067616:	81a3      	strh	r3, [r4, #12]
10067618:	2d00      	cmp	r5, #0
1006761a:	d124      	bne.n	10067666 <setvbuf+0xe6>
1006761c:	9d02      	ldr	r5, [sp, #8]
1006761e:	0028      	movs	r0, r5
10067620:	f001 f8c4 	bl	100687ac <malloc>
10067624:	9501      	str	r5, [sp, #4]
10067626:	1e07      	subs	r7, r0, #0
10067628:	d148      	bne.n	100676bc <setvbuf+0x13c>
1006762a:	9b02      	ldr	r3, [sp, #8]
1006762c:	9301      	str	r3, [sp, #4]
1006762e:	42ab      	cmp	r3, r5
10067630:	d13f      	bne.n	100676b2 <setvbuf+0x132>
10067632:	2501      	movs	r5, #1
10067634:	426d      	negs	r5, r5
10067636:	220c      	movs	r2, #12
10067638:	5ea3      	ldrsh	r3, [r4, r2]
1006763a:	2202      	movs	r2, #2
1006763c:	431a      	orrs	r2, r3
1006763e:	81a2      	strh	r2, [r4, #12]
10067640:	2200      	movs	r2, #0
10067642:	60a2      	str	r2, [r4, #8]
10067644:	0022      	movs	r2, r4
10067646:	3247      	adds	r2, #71	@ 0x47
10067648:	6022      	str	r2, [r4, #0]
1006764a:	6122      	str	r2, [r4, #16]
1006764c:	2201      	movs	r2, #1
1006764e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
10067650:	6162      	str	r2, [r4, #20]
10067652:	4211      	tst	r1, r2
10067654:	d104      	bne.n	10067660 <setvbuf+0xe0>
10067656:	059b      	lsls	r3, r3, #22
10067658:	d402      	bmi.n	10067660 <setvbuf+0xe0>
1006765a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1006765c:	f000 f9c4 	bl	100679e8 <__retarget_lock_release_recursive>
10067660:	0028      	movs	r0, r5
10067662:	b005      	add	sp, #20
10067664:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067666:	2f00      	cmp	r7, #0
10067668:	d0d9      	beq.n	1006761e <setvbuf+0x9e>
1006766a:	6a33      	ldr	r3, [r6, #32]
1006766c:	2b00      	cmp	r3, #0
1006766e:	d102      	bne.n	10067676 <setvbuf+0xf6>
10067670:	0030      	movs	r0, r6
10067672:	f7ff fed7 	bl	10067424 <__sinit>
10067676:	9b00      	ldr	r3, [sp, #0]
10067678:	2b01      	cmp	r3, #1
1006767a:	d103      	bne.n	10067684 <setvbuf+0x104>
1006767c:	89a3      	ldrh	r3, [r4, #12]
1006767e:	9a00      	ldr	r2, [sp, #0]
10067680:	431a      	orrs	r2, r3
10067682:	81a2      	strh	r2, [r4, #12]
10067684:	220c      	movs	r2, #12
10067686:	5ea3      	ldrsh	r3, [r4, r2]
10067688:	2208      	movs	r2, #8
1006768a:	0019      	movs	r1, r3
1006768c:	6027      	str	r7, [r4, #0]
1006768e:	6127      	str	r7, [r4, #16]
10067690:	6165      	str	r5, [r4, #20]
10067692:	4011      	ands	r1, r2
10067694:	4213      	tst	r3, r2
10067696:	d01b      	beq.n	100676d0 <setvbuf+0x150>
10067698:	07da      	lsls	r2, r3, #31
1006769a:	d517      	bpl.n	100676cc <setvbuf+0x14c>
1006769c:	2200      	movs	r2, #0
1006769e:	426d      	negs	r5, r5
100676a0:	60a2      	str	r2, [r4, #8]
100676a2:	61a5      	str	r5, [r4, #24]
100676a4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100676a6:	07d2      	lsls	r2, r2, #31
100676a8:	d401      	bmi.n	100676ae <setvbuf+0x12e>
100676aa:	059b      	lsls	r3, r3, #22
100676ac:	d512      	bpl.n	100676d4 <setvbuf+0x154>
100676ae:	2500      	movs	r5, #0
100676b0:	e7d6      	b.n	10067660 <setvbuf+0xe0>
100676b2:	9801      	ldr	r0, [sp, #4]
100676b4:	f001 f87a 	bl	100687ac <malloc>
100676b8:	1e07      	subs	r7, r0, #0
100676ba:	d0ba      	beq.n	10067632 <setvbuf+0xb2>
100676bc:	2380      	movs	r3, #128	@ 0x80
100676be:	89a2      	ldrh	r2, [r4, #12]
100676c0:	9d01      	ldr	r5, [sp, #4]
100676c2:	4313      	orrs	r3, r2
100676c4:	81a3      	strh	r3, [r4, #12]
100676c6:	e7d0      	b.n	1006766a <setvbuf+0xea>
100676c8:	2500      	movs	r5, #0
100676ca:	e7b4      	b.n	10067636 <setvbuf+0xb6>
100676cc:	60a5      	str	r5, [r4, #8]
100676ce:	e7e9      	b.n	100676a4 <setvbuf+0x124>
100676d0:	60a1      	str	r1, [r4, #8]
100676d2:	e7e7      	b.n	100676a4 <setvbuf+0x124>
100676d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100676d6:	f000 f987 	bl	100679e8 <__retarget_lock_release_recursive>
100676da:	e7e8      	b.n	100676ae <setvbuf+0x12e>
100676dc:	2501      	movs	r5, #1
100676de:	426d      	negs	r5, r5
100676e0:	e7be      	b.n	10067660 <setvbuf+0xe0>
100676e2:	46c0      	nop			@ (mov r8, r8)
100676e4:	20001530 	.word	0x20001530
100676e8:	fffff35c 	.word	0xfffff35c

100676ec <siprintf>:
100676ec:	b40e      	push	{r1, r2, r3}
100676ee:	b510      	push	{r4, lr}
100676f0:	2400      	movs	r4, #0
100676f2:	490c      	ldr	r1, [pc, #48]	@ (10067724 <siprintf+0x38>)
100676f4:	b09d      	sub	sp, #116	@ 0x74
100676f6:	ab1f      	add	r3, sp, #124	@ 0x7c
100676f8:	9002      	str	r0, [sp, #8]
100676fa:	9006      	str	r0, [sp, #24]
100676fc:	9107      	str	r1, [sp, #28]
100676fe:	9104      	str	r1, [sp, #16]
10067700:	4809      	ldr	r0, [pc, #36]	@ (10067728 <siprintf+0x3c>)
10067702:	490a      	ldr	r1, [pc, #40]	@ (1006772c <siprintf+0x40>)
10067704:	cb04      	ldmia	r3!, {r2}
10067706:	9105      	str	r1, [sp, #20]
10067708:	6800      	ldr	r0, [r0, #0]
1006770a:	a902      	add	r1, sp, #8
1006770c:	9301      	str	r3, [sp, #4]
1006770e:	941b      	str	r4, [sp, #108]	@ 0x6c
10067710:	f002 fcd6 	bl	1006a0c0 <_svfiprintf_r>
10067714:	9b02      	ldr	r3, [sp, #8]
10067716:	701c      	strb	r4, [r3, #0]
10067718:	b01d      	add	sp, #116	@ 0x74
1006771a:	bc10      	pop	{r4}
1006771c:	bc08      	pop	{r3}
1006771e:	b003      	add	sp, #12
10067720:	4718      	bx	r3
10067722:	46c0      	nop			@ (mov r8, r8)
10067724:	7fffffff 	.word	0x7fffffff
10067728:	20001530 	.word	0x20001530
1006772c:	ffff0208 	.word	0xffff0208

10067730 <__sread>:
10067730:	b570      	push	{r4, r5, r6, lr}
10067732:	000c      	movs	r4, r1
10067734:	250e      	movs	r5, #14
10067736:	5f49      	ldrsh	r1, [r1, r5]
10067738:	f000 f926 	bl	10067988 <_read_r>
1006773c:	2800      	cmp	r0, #0
1006773e:	db03      	blt.n	10067748 <__sread+0x18>
10067740:	6d63      	ldr	r3, [r4, #84]	@ 0x54
10067742:	181b      	adds	r3, r3, r0
10067744:	6563      	str	r3, [r4, #84]	@ 0x54
10067746:	bd70      	pop	{r4, r5, r6, pc}
10067748:	89a3      	ldrh	r3, [r4, #12]
1006774a:	4a02      	ldr	r2, [pc, #8]	@ (10067754 <__sread+0x24>)
1006774c:	4013      	ands	r3, r2
1006774e:	81a3      	strh	r3, [r4, #12]
10067750:	e7f9      	b.n	10067746 <__sread+0x16>
10067752:	46c0      	nop			@ (mov r8, r8)
10067754:	ffffefff 	.word	0xffffefff

10067758 <__swrite>:
10067758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006775a:	001f      	movs	r7, r3
1006775c:	898b      	ldrh	r3, [r1, #12]
1006775e:	0005      	movs	r5, r0
10067760:	000c      	movs	r4, r1
10067762:	0016      	movs	r6, r2
10067764:	05db      	lsls	r3, r3, #23
10067766:	d505      	bpl.n	10067774 <__swrite+0x1c>
10067768:	230e      	movs	r3, #14
1006776a:	5ec9      	ldrsh	r1, [r1, r3]
1006776c:	2200      	movs	r2, #0
1006776e:	2302      	movs	r3, #2
10067770:	f000 f8f6 	bl	10067960 <_lseek_r>
10067774:	89a3      	ldrh	r3, [r4, #12]
10067776:	4a05      	ldr	r2, [pc, #20]	@ (1006778c <__swrite+0x34>)
10067778:	0028      	movs	r0, r5
1006777a:	4013      	ands	r3, r2
1006777c:	81a3      	strh	r3, [r4, #12]
1006777e:	0032      	movs	r2, r6
10067780:	230e      	movs	r3, #14
10067782:	5ee1      	ldrsh	r1, [r4, r3]
10067784:	003b      	movs	r3, r7
10067786:	f000 f913 	bl	100679b0 <_write_r>
1006778a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006778c:	ffffefff 	.word	0xffffefff

10067790 <__sseek>:
10067790:	b570      	push	{r4, r5, r6, lr}
10067792:	000c      	movs	r4, r1
10067794:	250e      	movs	r5, #14
10067796:	5f49      	ldrsh	r1, [r1, r5]
10067798:	f000 f8e2 	bl	10067960 <_lseek_r>
1006779c:	89a3      	ldrh	r3, [r4, #12]
1006779e:	1c42      	adds	r2, r0, #1
100677a0:	d103      	bne.n	100677aa <__sseek+0x1a>
100677a2:	4a05      	ldr	r2, [pc, #20]	@ (100677b8 <__sseek+0x28>)
100677a4:	4013      	ands	r3, r2
100677a6:	81a3      	strh	r3, [r4, #12]
100677a8:	bd70      	pop	{r4, r5, r6, pc}
100677aa:	2280      	movs	r2, #128	@ 0x80
100677ac:	0152      	lsls	r2, r2, #5
100677ae:	4313      	orrs	r3, r2
100677b0:	81a3      	strh	r3, [r4, #12]
100677b2:	6560      	str	r0, [r4, #84]	@ 0x54
100677b4:	e7f8      	b.n	100677a8 <__sseek+0x18>
100677b6:	46c0      	nop			@ (mov r8, r8)
100677b8:	ffffefff 	.word	0xffffefff

100677bc <__sclose>:
100677bc:	b510      	push	{r4, lr}
100677be:	230e      	movs	r3, #14
100677c0:	5ec9      	ldrsh	r1, [r1, r3]
100677c2:	f000 f8bb 	bl	1006793c <_close_r>
100677c6:	bd10      	pop	{r4, pc}

100677c8 <__swbuf_r>:
100677c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100677ca:	0006      	movs	r6, r0
100677cc:	000d      	movs	r5, r1
100677ce:	0014      	movs	r4, r2
100677d0:	2800      	cmp	r0, #0
100677d2:	d004      	beq.n	100677de <__swbuf_r+0x16>
100677d4:	6a03      	ldr	r3, [r0, #32]
100677d6:	2b00      	cmp	r3, #0
100677d8:	d101      	bne.n	100677de <__swbuf_r+0x16>
100677da:	f7ff fe23 	bl	10067424 <__sinit>
100677de:	69a3      	ldr	r3, [r4, #24]
100677e0:	60a3      	str	r3, [r4, #8]
100677e2:	89a3      	ldrh	r3, [r4, #12]
100677e4:	071b      	lsls	r3, r3, #28
100677e6:	d502      	bpl.n	100677ee <__swbuf_r+0x26>
100677e8:	6923      	ldr	r3, [r4, #16]
100677ea:	2b00      	cmp	r3, #0
100677ec:	d109      	bne.n	10067802 <__swbuf_r+0x3a>
100677ee:	0021      	movs	r1, r4
100677f0:	0030      	movs	r0, r6
100677f2:	f000 f82b 	bl	1006784c <__swsetup_r>
100677f6:	2800      	cmp	r0, #0
100677f8:	d003      	beq.n	10067802 <__swbuf_r+0x3a>
100677fa:	2501      	movs	r5, #1
100677fc:	426d      	negs	r5, r5
100677fe:	0028      	movs	r0, r5
10067800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067802:	6923      	ldr	r3, [r4, #16]
10067804:	6820      	ldr	r0, [r4, #0]
10067806:	b2ef      	uxtb	r7, r5
10067808:	1ac0      	subs	r0, r0, r3
1006780a:	6963      	ldr	r3, [r4, #20]
1006780c:	b2ed      	uxtb	r5, r5
1006780e:	4283      	cmp	r3, r0
10067810:	dc05      	bgt.n	1006781e <__swbuf_r+0x56>
10067812:	0021      	movs	r1, r4
10067814:	0030      	movs	r0, r6
10067816:	f002 ff1b 	bl	1006a650 <_fflush_r>
1006781a:	2800      	cmp	r0, #0
1006781c:	d1ed      	bne.n	100677fa <__swbuf_r+0x32>
1006781e:	68a3      	ldr	r3, [r4, #8]
10067820:	3001      	adds	r0, #1
10067822:	3b01      	subs	r3, #1
10067824:	60a3      	str	r3, [r4, #8]
10067826:	6823      	ldr	r3, [r4, #0]
10067828:	1c5a      	adds	r2, r3, #1
1006782a:	6022      	str	r2, [r4, #0]
1006782c:	701f      	strb	r7, [r3, #0]
1006782e:	6963      	ldr	r3, [r4, #20]
10067830:	4283      	cmp	r3, r0
10067832:	d004      	beq.n	1006783e <__swbuf_r+0x76>
10067834:	89a3      	ldrh	r3, [r4, #12]
10067836:	07db      	lsls	r3, r3, #31
10067838:	d5e1      	bpl.n	100677fe <__swbuf_r+0x36>
1006783a:	2d0a      	cmp	r5, #10
1006783c:	d1df      	bne.n	100677fe <__swbuf_r+0x36>
1006783e:	0021      	movs	r1, r4
10067840:	0030      	movs	r0, r6
10067842:	f002 ff05 	bl	1006a650 <_fflush_r>
10067846:	2800      	cmp	r0, #0
10067848:	d0d9      	beq.n	100677fe <__swbuf_r+0x36>
1006784a:	e7d6      	b.n	100677fa <__swbuf_r+0x32>

1006784c <__swsetup_r>:
1006784c:	4b2d      	ldr	r3, [pc, #180]	@ (10067904 <__swsetup_r+0xb8>)
1006784e:	b570      	push	{r4, r5, r6, lr}
10067850:	0005      	movs	r5, r0
10067852:	6818      	ldr	r0, [r3, #0]
10067854:	000c      	movs	r4, r1
10067856:	2800      	cmp	r0, #0
10067858:	d004      	beq.n	10067864 <__swsetup_r+0x18>
1006785a:	6a03      	ldr	r3, [r0, #32]
1006785c:	2b00      	cmp	r3, #0
1006785e:	d101      	bne.n	10067864 <__swsetup_r+0x18>
10067860:	f7ff fde0 	bl	10067424 <__sinit>
10067864:	220c      	movs	r2, #12
10067866:	5ea3      	ldrsh	r3, [r4, r2]
10067868:	071a      	lsls	r2, r3, #28
1006786a:	d423      	bmi.n	100678b4 <__swsetup_r+0x68>
1006786c:	06da      	lsls	r2, r3, #27
1006786e:	d407      	bmi.n	10067880 <__swsetup_r+0x34>
10067870:	2209      	movs	r2, #9
10067872:	602a      	str	r2, [r5, #0]
10067874:	2240      	movs	r2, #64	@ 0x40
10067876:	2001      	movs	r0, #1
10067878:	4313      	orrs	r3, r2
1006787a:	81a3      	strh	r3, [r4, #12]
1006787c:	4240      	negs	r0, r0
1006787e:	e03a      	b.n	100678f6 <__swsetup_r+0xaa>
10067880:	075b      	lsls	r3, r3, #29
10067882:	d513      	bpl.n	100678ac <__swsetup_r+0x60>
10067884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10067886:	2900      	cmp	r1, #0
10067888:	d008      	beq.n	1006789c <__swsetup_r+0x50>
1006788a:	0023      	movs	r3, r4
1006788c:	3344      	adds	r3, #68	@ 0x44
1006788e:	4299      	cmp	r1, r3
10067890:	d002      	beq.n	10067898 <__swsetup_r+0x4c>
10067892:	0028      	movs	r0, r5
10067894:	f000 ff40 	bl	10068718 <_free_r>
10067898:	2300      	movs	r3, #0
1006789a:	6363      	str	r3, [r4, #52]	@ 0x34
1006789c:	2224      	movs	r2, #36	@ 0x24
1006789e:	89a3      	ldrh	r3, [r4, #12]
100678a0:	4393      	bics	r3, r2
100678a2:	81a3      	strh	r3, [r4, #12]
100678a4:	2300      	movs	r3, #0
100678a6:	6063      	str	r3, [r4, #4]
100678a8:	6923      	ldr	r3, [r4, #16]
100678aa:	6023      	str	r3, [r4, #0]
100678ac:	2308      	movs	r3, #8
100678ae:	89a2      	ldrh	r2, [r4, #12]
100678b0:	4313      	orrs	r3, r2
100678b2:	81a3      	strh	r3, [r4, #12]
100678b4:	6923      	ldr	r3, [r4, #16]
100678b6:	2b00      	cmp	r3, #0
100678b8:	d10b      	bne.n	100678d2 <__swsetup_r+0x86>
100678ba:	21a0      	movs	r1, #160	@ 0xa0
100678bc:	2280      	movs	r2, #128	@ 0x80
100678be:	89a3      	ldrh	r3, [r4, #12]
100678c0:	0089      	lsls	r1, r1, #2
100678c2:	0092      	lsls	r2, r2, #2
100678c4:	400b      	ands	r3, r1
100678c6:	4293      	cmp	r3, r2
100678c8:	d003      	beq.n	100678d2 <__swsetup_r+0x86>
100678ca:	0021      	movs	r1, r4
100678cc:	0028      	movs	r0, r5
100678ce:	f002 ff15 	bl	1006a6fc <__smakebuf_r>
100678d2:	220c      	movs	r2, #12
100678d4:	5ea3      	ldrsh	r3, [r4, r2]
100678d6:	2101      	movs	r1, #1
100678d8:	001a      	movs	r2, r3
100678da:	400a      	ands	r2, r1
100678dc:	420b      	tst	r3, r1
100678de:	d00b      	beq.n	100678f8 <__swsetup_r+0xac>
100678e0:	2200      	movs	r2, #0
100678e2:	60a2      	str	r2, [r4, #8]
100678e4:	6962      	ldr	r2, [r4, #20]
100678e6:	4252      	negs	r2, r2
100678e8:	61a2      	str	r2, [r4, #24]
100678ea:	2000      	movs	r0, #0
100678ec:	6922      	ldr	r2, [r4, #16]
100678ee:	4282      	cmp	r2, r0
100678f0:	d101      	bne.n	100678f6 <__swsetup_r+0xaa>
100678f2:	061a      	lsls	r2, r3, #24
100678f4:	d4be      	bmi.n	10067874 <__swsetup_r+0x28>
100678f6:	bd70      	pop	{r4, r5, r6, pc}
100678f8:	0799      	lsls	r1, r3, #30
100678fa:	d400      	bmi.n	100678fe <__swsetup_r+0xb2>
100678fc:	6962      	ldr	r2, [r4, #20]
100678fe:	60a2      	str	r2, [r4, #8]
10067900:	e7f3      	b.n	100678ea <__swsetup_r+0x9e>
10067902:	46c0      	nop			@ (mov r8, r8)
10067904:	20001530 	.word	0x20001530

10067908 <memcmp>:
10067908:	b530      	push	{r4, r5, lr}
1006790a:	2400      	movs	r4, #0
1006790c:	3901      	subs	r1, #1
1006790e:	42a2      	cmp	r2, r4
10067910:	d101      	bne.n	10067916 <memcmp+0xe>
10067912:	2000      	movs	r0, #0
10067914:	e005      	b.n	10067922 <memcmp+0x1a>
10067916:	5d03      	ldrb	r3, [r0, r4]
10067918:	3401      	adds	r4, #1
1006791a:	5d0d      	ldrb	r5, [r1, r4]
1006791c:	42ab      	cmp	r3, r5
1006791e:	d0f6      	beq.n	1006790e <memcmp+0x6>
10067920:	1b58      	subs	r0, r3, r5
10067922:	bd30      	pop	{r4, r5, pc}

10067924 <memset>:
10067924:	0003      	movs	r3, r0
10067926:	1882      	adds	r2, r0, r2
10067928:	4293      	cmp	r3, r2
1006792a:	d100      	bne.n	1006792e <memset+0xa>
1006792c:	4770      	bx	lr
1006792e:	7019      	strb	r1, [r3, #0]
10067930:	3301      	adds	r3, #1
10067932:	e7f9      	b.n	10067928 <memset+0x4>

10067934 <_localeconv_r>:
10067934:	4800      	ldr	r0, [pc, #0]	@ (10067938 <_localeconv_r+0x4>)
10067936:	4770      	bx	lr
10067938:	20001670 	.word	0x20001670

1006793c <_close_r>:
1006793c:	2300      	movs	r3, #0
1006793e:	b570      	push	{r4, r5, r6, lr}
10067940:	4d06      	ldr	r5, [pc, #24]	@ (1006795c <_close_r+0x20>)
10067942:	0004      	movs	r4, r0
10067944:	0008      	movs	r0, r1
10067946:	602b      	str	r3, [r5, #0]
10067948:	f7dc f839 	bl	100439be <_close>
1006794c:	1c43      	adds	r3, r0, #1
1006794e:	d103      	bne.n	10067958 <_close_r+0x1c>
10067950:	682b      	ldr	r3, [r5, #0]
10067952:	2b00      	cmp	r3, #0
10067954:	d000      	beq.n	10067958 <_close_r+0x1c>
10067956:	6023      	str	r3, [r4, #0]
10067958:	bd70      	pop	{r4, r5, r6, pc}
1006795a:	46c0      	nop			@ (mov r8, r8)
1006795c:	20001308 	.word	0x20001308

10067960 <_lseek_r>:
10067960:	b570      	push	{r4, r5, r6, lr}
10067962:	0004      	movs	r4, r0
10067964:	0008      	movs	r0, r1
10067966:	0011      	movs	r1, r2
10067968:	001a      	movs	r2, r3
1006796a:	2300      	movs	r3, #0
1006796c:	4d05      	ldr	r5, [pc, #20]	@ (10067984 <_lseek_r+0x24>)
1006796e:	602b      	str	r3, [r5, #0]
10067970:	f7dc f846 	bl	10043a00 <_lseek>
10067974:	1c43      	adds	r3, r0, #1
10067976:	d103      	bne.n	10067980 <_lseek_r+0x20>
10067978:	682b      	ldr	r3, [r5, #0]
1006797a:	2b00      	cmp	r3, #0
1006797c:	d000      	beq.n	10067980 <_lseek_r+0x20>
1006797e:	6023      	str	r3, [r4, #0]
10067980:	bd70      	pop	{r4, r5, r6, pc}
10067982:	46c0      	nop			@ (mov r8, r8)
10067984:	20001308 	.word	0x20001308

10067988 <_read_r>:
10067988:	b570      	push	{r4, r5, r6, lr}
1006798a:	0004      	movs	r4, r0
1006798c:	0008      	movs	r0, r1
1006798e:	0011      	movs	r1, r2
10067990:	001a      	movs	r2, r3
10067992:	2300      	movs	r3, #0
10067994:	4d05      	ldr	r5, [pc, #20]	@ (100679ac <_read_r+0x24>)
10067996:	602b      	str	r3, [r5, #0]
10067998:	f7db ffd8 	bl	1004394c <_read>
1006799c:	1c43      	adds	r3, r0, #1
1006799e:	d103      	bne.n	100679a8 <_read_r+0x20>
100679a0:	682b      	ldr	r3, [r5, #0]
100679a2:	2b00      	cmp	r3, #0
100679a4:	d000      	beq.n	100679a8 <_read_r+0x20>
100679a6:	6023      	str	r3, [r4, #0]
100679a8:	bd70      	pop	{r4, r5, r6, pc}
100679aa:	46c0      	nop			@ (mov r8, r8)
100679ac:	20001308 	.word	0x20001308

100679b0 <_write_r>:
100679b0:	b570      	push	{r4, r5, r6, lr}
100679b2:	0004      	movs	r4, r0
100679b4:	0008      	movs	r0, r1
100679b6:	0011      	movs	r1, r2
100679b8:	001a      	movs	r2, r3
100679ba:	2300      	movs	r3, #0
100679bc:	4d05      	ldr	r5, [pc, #20]	@ (100679d4 <_write_r+0x24>)
100679be:	602b      	str	r3, [r5, #0]
100679c0:	f7db ffe1 	bl	10043986 <_write>
100679c4:	1c43      	adds	r3, r0, #1
100679c6:	d103      	bne.n	100679d0 <_write_r+0x20>
100679c8:	682b      	ldr	r3, [r5, #0]
100679ca:	2b00      	cmp	r3, #0
100679cc:	d000      	beq.n	100679d0 <_write_r+0x20>
100679ce:	6023      	str	r3, [r4, #0]
100679d0:	bd70      	pop	{r4, r5, r6, pc}
100679d2:	46c0      	nop			@ (mov r8, r8)
100679d4:	20001308 	.word	0x20001308

100679d8 <__errno>:
100679d8:	4b01      	ldr	r3, [pc, #4]	@ (100679e0 <__errno+0x8>)
100679da:	6818      	ldr	r0, [r3, #0]
100679dc:	4770      	bx	lr
100679de:	46c0      	nop			@ (mov r8, r8)
100679e0:	20001530 	.word	0x20001530

100679e4 <__retarget_lock_init_recursive>:
100679e4:	4770      	bx	lr

100679e6 <__retarget_lock_acquire_recursive>:
100679e6:	4770      	bx	lr

100679e8 <__retarget_lock_release_recursive>:
100679e8:	4770      	bx	lr

100679ea <__aeabi_memcpy>:
100679ea:	b510      	push	{r4, lr}
100679ec:	f000 f811 	bl	10067a12 <memcpy>
100679f0:	bd10      	pop	{r4, pc}

100679f2 <__aeabi_memclr>:
100679f2:	b510      	push	{r4, lr}
100679f4:	2200      	movs	r2, #0
100679f6:	f002 ff51 	bl	1006a89c <__aeabi_memset>
100679fa:	bd10      	pop	{r4, pc}

100679fc <memchr>:
100679fc:	b2c9      	uxtb	r1, r1
100679fe:	1882      	adds	r2, r0, r2
10067a00:	4290      	cmp	r0, r2
10067a02:	d101      	bne.n	10067a08 <memchr+0xc>
10067a04:	2000      	movs	r0, #0
10067a06:	4770      	bx	lr
10067a08:	7803      	ldrb	r3, [r0, #0]
10067a0a:	428b      	cmp	r3, r1
10067a0c:	d0fb      	beq.n	10067a06 <memchr+0xa>
10067a0e:	3001      	adds	r0, #1
10067a10:	e7f6      	b.n	10067a00 <memchr+0x4>

10067a12 <memcpy>:
10067a12:	2300      	movs	r3, #0
10067a14:	b510      	push	{r4, lr}
10067a16:	429a      	cmp	r2, r3
10067a18:	d100      	bne.n	10067a1c <memcpy+0xa>
10067a1a:	bd10      	pop	{r4, pc}
10067a1c:	5ccc      	ldrb	r4, [r1, r3]
10067a1e:	54c4      	strb	r4, [r0, r3]
10067a20:	3301      	adds	r3, #1
10067a22:	e7f8      	b.n	10067a16 <memcpy+0x4>

10067a24 <nanf>:
10067a24:	4800      	ldr	r0, [pc, #0]	@ (10067a28 <nanf+0x4>)
10067a26:	4770      	bx	lr
10067a28:	7fc00000 	.word	0x7fc00000

10067a2c <quorem>:
10067a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
10067a2e:	6903      	ldr	r3, [r0, #16]
10067a30:	690c      	ldr	r4, [r1, #16]
10067a32:	b089      	sub	sp, #36	@ 0x24
10067a34:	9003      	str	r0, [sp, #12]
10067a36:	9106      	str	r1, [sp, #24]
10067a38:	2000      	movs	r0, #0
10067a3a:	42a3      	cmp	r3, r4
10067a3c:	db63      	blt.n	10067b06 <quorem+0xda>
10067a3e:	000b      	movs	r3, r1
10067a40:	3c01      	subs	r4, #1
10067a42:	3314      	adds	r3, #20
10067a44:	00a5      	lsls	r5, r4, #2
10067a46:	9304      	str	r3, [sp, #16]
10067a48:	195b      	adds	r3, r3, r5
10067a4a:	9305      	str	r3, [sp, #20]
10067a4c:	9b03      	ldr	r3, [sp, #12]
10067a4e:	3314      	adds	r3, #20
10067a50:	9301      	str	r3, [sp, #4]
10067a52:	195d      	adds	r5, r3, r5
10067a54:	9b05      	ldr	r3, [sp, #20]
10067a56:	682f      	ldr	r7, [r5, #0]
10067a58:	681e      	ldr	r6, [r3, #0]
10067a5a:	0038      	movs	r0, r7
10067a5c:	3601      	adds	r6, #1
10067a5e:	0031      	movs	r1, r6
10067a60:	f7d8 fc02 	bl	10040268 <__udivsi3>
10067a64:	9002      	str	r0, [sp, #8]
10067a66:	42b7      	cmp	r7, r6
10067a68:	d327      	bcc.n	10067aba <quorem+0x8e>
10067a6a:	9b04      	ldr	r3, [sp, #16]
10067a6c:	2700      	movs	r7, #0
10067a6e:	469c      	mov	ip, r3
10067a70:	9e01      	ldr	r6, [sp, #4]
10067a72:	9707      	str	r7, [sp, #28]
10067a74:	4662      	mov	r2, ip
10067a76:	ca08      	ldmia	r2!, {r3}
10067a78:	6830      	ldr	r0, [r6, #0]
10067a7a:	4694      	mov	ip, r2
10067a7c:	9a02      	ldr	r2, [sp, #8]
10067a7e:	b299      	uxth	r1, r3
10067a80:	4351      	muls	r1, r2
10067a82:	0c1b      	lsrs	r3, r3, #16
10067a84:	4353      	muls	r3, r2
10067a86:	19c9      	adds	r1, r1, r7
10067a88:	0c0a      	lsrs	r2, r1, #16
10067a8a:	189b      	adds	r3, r3, r2
10067a8c:	b289      	uxth	r1, r1
10067a8e:	b282      	uxth	r2, r0
10067a90:	1a52      	subs	r2, r2, r1
10067a92:	9907      	ldr	r1, [sp, #28]
10067a94:	0c1f      	lsrs	r7, r3, #16
10067a96:	1852      	adds	r2, r2, r1
10067a98:	0c00      	lsrs	r0, r0, #16
10067a9a:	b29b      	uxth	r3, r3
10067a9c:	1411      	asrs	r1, r2, #16
10067a9e:	1ac3      	subs	r3, r0, r3
10067aa0:	185b      	adds	r3, r3, r1
10067aa2:	1419      	asrs	r1, r3, #16
10067aa4:	b292      	uxth	r2, r2
10067aa6:	041b      	lsls	r3, r3, #16
10067aa8:	431a      	orrs	r2, r3
10067aaa:	9b05      	ldr	r3, [sp, #20]
10067aac:	9107      	str	r1, [sp, #28]
10067aae:	c604      	stmia	r6!, {r2}
10067ab0:	4563      	cmp	r3, ip
10067ab2:	d2df      	bcs.n	10067a74 <quorem+0x48>
10067ab4:	682b      	ldr	r3, [r5, #0]
10067ab6:	2b00      	cmp	r3, #0
10067ab8:	d02b      	beq.n	10067b12 <quorem+0xe6>
10067aba:	9906      	ldr	r1, [sp, #24]
10067abc:	9803      	ldr	r0, [sp, #12]
10067abe:	f001 fa03 	bl	10068ec8 <__mcmp>
10067ac2:	2800      	cmp	r0, #0
10067ac4:	db1e      	blt.n	10067b04 <quorem+0xd8>
10067ac6:	2600      	movs	r6, #0
10067ac8:	9d01      	ldr	r5, [sp, #4]
10067aca:	9904      	ldr	r1, [sp, #16]
10067acc:	c901      	ldmia	r1!, {r0}
10067ace:	682b      	ldr	r3, [r5, #0]
10067ad0:	b287      	uxth	r7, r0
10067ad2:	b29a      	uxth	r2, r3
10067ad4:	1bd2      	subs	r2, r2, r7
10067ad6:	1992      	adds	r2, r2, r6
10067ad8:	0c00      	lsrs	r0, r0, #16
10067ada:	0c1b      	lsrs	r3, r3, #16
10067adc:	1a1b      	subs	r3, r3, r0
10067ade:	1410      	asrs	r0, r2, #16
10067ae0:	181b      	adds	r3, r3, r0
10067ae2:	141e      	asrs	r6, r3, #16
10067ae4:	b292      	uxth	r2, r2
10067ae6:	041b      	lsls	r3, r3, #16
10067ae8:	431a      	orrs	r2, r3
10067aea:	9b05      	ldr	r3, [sp, #20]
10067aec:	c504      	stmia	r5!, {r2}
10067aee:	428b      	cmp	r3, r1
10067af0:	d2ec      	bcs.n	10067acc <quorem+0xa0>
10067af2:	9a01      	ldr	r2, [sp, #4]
10067af4:	00a3      	lsls	r3, r4, #2
10067af6:	18d3      	adds	r3, r2, r3
10067af8:	681a      	ldr	r2, [r3, #0]
10067afa:	2a00      	cmp	r2, #0
10067afc:	d014      	beq.n	10067b28 <quorem+0xfc>
10067afe:	9b02      	ldr	r3, [sp, #8]
10067b00:	3301      	adds	r3, #1
10067b02:	9302      	str	r3, [sp, #8]
10067b04:	9802      	ldr	r0, [sp, #8]
10067b06:	b009      	add	sp, #36	@ 0x24
10067b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067b0a:	682b      	ldr	r3, [r5, #0]
10067b0c:	2b00      	cmp	r3, #0
10067b0e:	d104      	bne.n	10067b1a <quorem+0xee>
10067b10:	3c01      	subs	r4, #1
10067b12:	9b01      	ldr	r3, [sp, #4]
10067b14:	3d04      	subs	r5, #4
10067b16:	42ab      	cmp	r3, r5
10067b18:	d3f7      	bcc.n	10067b0a <quorem+0xde>
10067b1a:	9b03      	ldr	r3, [sp, #12]
10067b1c:	611c      	str	r4, [r3, #16]
10067b1e:	e7cc      	b.n	10067aba <quorem+0x8e>
10067b20:	681a      	ldr	r2, [r3, #0]
10067b22:	2a00      	cmp	r2, #0
10067b24:	d104      	bne.n	10067b30 <quorem+0x104>
10067b26:	3c01      	subs	r4, #1
10067b28:	9a01      	ldr	r2, [sp, #4]
10067b2a:	3b04      	subs	r3, #4
10067b2c:	429a      	cmp	r2, r3
10067b2e:	d3f7      	bcc.n	10067b20 <quorem+0xf4>
10067b30:	9b03      	ldr	r3, [sp, #12]
10067b32:	611c      	str	r4, [r3, #16]
10067b34:	e7e3      	b.n	10067afe <quorem+0xd2>
	...

10067b38 <_dtoa_r>:
10067b38:	b5f0      	push	{r4, r5, r6, r7, lr}
10067b3a:	0014      	movs	r4, r2
10067b3c:	001d      	movs	r5, r3
10067b3e:	69c6      	ldr	r6, [r0, #28]
10067b40:	b09d      	sub	sp, #116	@ 0x74
10067b42:	940a      	str	r4, [sp, #40]	@ 0x28
10067b44:	950b      	str	r5, [sp, #44]	@ 0x2c
10067b46:	9f25      	ldr	r7, [sp, #148]	@ 0x94
10067b48:	9003      	str	r0, [sp, #12]
10067b4a:	2e00      	cmp	r6, #0
10067b4c:	d10f      	bne.n	10067b6e <_dtoa_r+0x36>
10067b4e:	2010      	movs	r0, #16
10067b50:	f000 fe2c 	bl	100687ac <malloc>
10067b54:	9b03      	ldr	r3, [sp, #12]
10067b56:	1e02      	subs	r2, r0, #0
10067b58:	61d8      	str	r0, [r3, #28]
10067b5a:	d104      	bne.n	10067b66 <_dtoa_r+0x2e>
10067b5c:	21ef      	movs	r1, #239	@ 0xef
10067b5e:	4bc7      	ldr	r3, [pc, #796]	@ (10067e7c <_dtoa_r+0x344>)
10067b60:	48c7      	ldr	r0, [pc, #796]	@ (10067e80 <_dtoa_r+0x348>)
10067b62:	f002 fea9 	bl	1006a8b8 <__assert_func>
10067b66:	6046      	str	r6, [r0, #4]
10067b68:	6086      	str	r6, [r0, #8]
10067b6a:	6006      	str	r6, [r0, #0]
10067b6c:	60c6      	str	r6, [r0, #12]
10067b6e:	9b03      	ldr	r3, [sp, #12]
10067b70:	69db      	ldr	r3, [r3, #28]
10067b72:	6819      	ldr	r1, [r3, #0]
10067b74:	2900      	cmp	r1, #0
10067b76:	d00b      	beq.n	10067b90 <_dtoa_r+0x58>
10067b78:	685a      	ldr	r2, [r3, #4]
10067b7a:	2301      	movs	r3, #1
10067b7c:	4093      	lsls	r3, r2
10067b7e:	604a      	str	r2, [r1, #4]
10067b80:	608b      	str	r3, [r1, #8]
10067b82:	9803      	ldr	r0, [sp, #12]
10067b84:	f000 ff12 	bl	100689ac <_Bfree>
10067b88:	2200      	movs	r2, #0
10067b8a:	9b03      	ldr	r3, [sp, #12]
10067b8c:	69db      	ldr	r3, [r3, #28]
10067b8e:	601a      	str	r2, [r3, #0]
10067b90:	2d00      	cmp	r5, #0
10067b92:	da1e      	bge.n	10067bd2 <_dtoa_r+0x9a>
10067b94:	2301      	movs	r3, #1
10067b96:	603b      	str	r3, [r7, #0]
10067b98:	006b      	lsls	r3, r5, #1
10067b9a:	085b      	lsrs	r3, r3, #1
10067b9c:	930b      	str	r3, [sp, #44]	@ 0x2c
10067b9e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
10067ba0:	4bb8      	ldr	r3, [pc, #736]	@ (10067e84 <_dtoa_r+0x34c>)
10067ba2:	4ab8      	ldr	r2, [pc, #736]	@ (10067e84 <_dtoa_r+0x34c>)
10067ba4:	403b      	ands	r3, r7
10067ba6:	4293      	cmp	r3, r2
10067ba8:	d116      	bne.n	10067bd8 <_dtoa_r+0xa0>
10067baa:	4bb7      	ldr	r3, [pc, #732]	@ (10067e88 <_dtoa_r+0x350>)
10067bac:	9a24      	ldr	r2, [sp, #144]	@ 0x90
10067bae:	6013      	str	r3, [r2, #0]
10067bb0:	033b      	lsls	r3, r7, #12
10067bb2:	0b1b      	lsrs	r3, r3, #12
10067bb4:	4323      	orrs	r3, r4
10067bb6:	d101      	bne.n	10067bbc <_dtoa_r+0x84>
10067bb8:	f000 fd80 	bl	100686bc <_dtoa_r+0xb84>
10067bbc:	4bb3      	ldr	r3, [pc, #716]	@ (10067e8c <_dtoa_r+0x354>)
10067bbe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
10067bc0:	9308      	str	r3, [sp, #32]
10067bc2:	2a00      	cmp	r2, #0
10067bc4:	d002      	beq.n	10067bcc <_dtoa_r+0x94>
10067bc6:	4bb2      	ldr	r3, [pc, #712]	@ (10067e90 <_dtoa_r+0x358>)
10067bc8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
10067bca:	6013      	str	r3, [r2, #0]
10067bcc:	9808      	ldr	r0, [sp, #32]
10067bce:	b01d      	add	sp, #116	@ 0x74
10067bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067bd2:	2300      	movs	r3, #0
10067bd4:	603b      	str	r3, [r7, #0]
10067bd6:	e7e2      	b.n	10067b9e <_dtoa_r+0x66>
10067bd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10067bda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10067bdc:	9212      	str	r2, [sp, #72]	@ 0x48
10067bde:	9313      	str	r3, [sp, #76]	@ 0x4c
10067be0:	9812      	ldr	r0, [sp, #72]	@ 0x48
10067be2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
10067be4:	2200      	movs	r2, #0
10067be6:	2300      	movs	r3, #0
10067be8:	f7d8 fcd0 	bl	1004058c <__aeabi_dcmpeq>
10067bec:	1e06      	subs	r6, r0, #0
10067bee:	d00b      	beq.n	10067c08 <_dtoa_r+0xd0>
10067bf0:	2301      	movs	r3, #1
10067bf2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
10067bf4:	6013      	str	r3, [r2, #0]
10067bf6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
10067bf8:	2b00      	cmp	r3, #0
10067bfa:	d002      	beq.n	10067c02 <_dtoa_r+0xca>
10067bfc:	4ba5      	ldr	r3, [pc, #660]	@ (10067e94 <_dtoa_r+0x35c>)
10067bfe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
10067c00:	6013      	str	r3, [r2, #0]
10067c02:	4ba5      	ldr	r3, [pc, #660]	@ (10067e98 <_dtoa_r+0x360>)
10067c04:	9308      	str	r3, [sp, #32]
10067c06:	e7e1      	b.n	10067bcc <_dtoa_r+0x94>
10067c08:	ab1a      	add	r3, sp, #104	@ 0x68
10067c0a:	9301      	str	r3, [sp, #4]
10067c0c:	ab1b      	add	r3, sp, #108	@ 0x6c
10067c0e:	9300      	str	r3, [sp, #0]
10067c10:	9803      	ldr	r0, [sp, #12]
10067c12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
10067c14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10067c16:	f001 fa79 	bl	1006910c <__d2b>
10067c1a:	007a      	lsls	r2, r7, #1
10067c1c:	9005      	str	r0, [sp, #20]
10067c1e:	0d52      	lsrs	r2, r2, #21
10067c20:	d100      	bne.n	10067c24 <_dtoa_r+0xec>
10067c22:	e07b      	b.n	10067d1c <_dtoa_r+0x1e4>
10067c24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10067c26:	9618      	str	r6, [sp, #96]	@ 0x60
10067c28:	0319      	lsls	r1, r3, #12
10067c2a:	4b9c      	ldr	r3, [pc, #624]	@ (10067e9c <_dtoa_r+0x364>)
10067c2c:	0b09      	lsrs	r1, r1, #12
10067c2e:	430b      	orrs	r3, r1
10067c30:	499b      	ldr	r1, [pc, #620]	@ (10067ea0 <_dtoa_r+0x368>)
10067c32:	1857      	adds	r7, r2, r1
10067c34:	9812      	ldr	r0, [sp, #72]	@ 0x48
10067c36:	9913      	ldr	r1, [sp, #76]	@ 0x4c
10067c38:	0019      	movs	r1, r3
10067c3a:	2200      	movs	r2, #0
10067c3c:	4b99      	ldr	r3, [pc, #612]	@ (10067ea4 <_dtoa_r+0x36c>)
10067c3e:	f7da f95f 	bl	10041f00 <__aeabi_dsub>
10067c42:	4a99      	ldr	r2, [pc, #612]	@ (10067ea8 <_dtoa_r+0x370>)
10067c44:	4b99      	ldr	r3, [pc, #612]	@ (10067eac <_dtoa_r+0x374>)
10067c46:	f7d9 fe75 	bl	10041934 <__aeabi_dmul>
10067c4a:	4a99      	ldr	r2, [pc, #612]	@ (10067eb0 <_dtoa_r+0x378>)
10067c4c:	4b99      	ldr	r3, [pc, #612]	@ (10067eb4 <_dtoa_r+0x37c>)
10067c4e:	f7d8 fe71 	bl	10040934 <__aeabi_dadd>
10067c52:	0004      	movs	r4, r0
10067c54:	0038      	movs	r0, r7
10067c56:	000d      	movs	r5, r1
10067c58:	f7da fdba 	bl	100427d0 <__aeabi_i2d>
10067c5c:	4a96      	ldr	r2, [pc, #600]	@ (10067eb8 <_dtoa_r+0x380>)
10067c5e:	4b97      	ldr	r3, [pc, #604]	@ (10067ebc <_dtoa_r+0x384>)
10067c60:	f7d9 fe68 	bl	10041934 <__aeabi_dmul>
10067c64:	0002      	movs	r2, r0
10067c66:	000b      	movs	r3, r1
10067c68:	0020      	movs	r0, r4
10067c6a:	0029      	movs	r1, r5
10067c6c:	f7d8 fe62 	bl	10040934 <__aeabi_dadd>
10067c70:	0004      	movs	r4, r0
10067c72:	000d      	movs	r5, r1
10067c74:	f7da fd70 	bl	10042758 <__aeabi_d2iz>
10067c78:	2200      	movs	r2, #0
10067c7a:	9004      	str	r0, [sp, #16]
10067c7c:	2300      	movs	r3, #0
10067c7e:	0020      	movs	r0, r4
10067c80:	0029      	movs	r1, r5
10067c82:	f7d8 fc89 	bl	10040598 <__aeabi_dcmplt>
10067c86:	2800      	cmp	r0, #0
10067c88:	d00b      	beq.n	10067ca2 <_dtoa_r+0x16a>
10067c8a:	9804      	ldr	r0, [sp, #16]
10067c8c:	f7da fda0 	bl	100427d0 <__aeabi_i2d>
10067c90:	002b      	movs	r3, r5
10067c92:	0022      	movs	r2, r4
10067c94:	f7d8 fc7a 	bl	1004058c <__aeabi_dcmpeq>
10067c98:	4243      	negs	r3, r0
10067c9a:	4158      	adcs	r0, r3
10067c9c:	9b04      	ldr	r3, [sp, #16]
10067c9e:	1a1b      	subs	r3, r3, r0
10067ca0:	9304      	str	r3, [sp, #16]
10067ca2:	2301      	movs	r3, #1
10067ca4:	9315      	str	r3, [sp, #84]	@ 0x54
10067ca6:	9b04      	ldr	r3, [sp, #16]
10067ca8:	2b16      	cmp	r3, #22
10067caa:	d810      	bhi.n	10067cce <_dtoa_r+0x196>
10067cac:	9812      	ldr	r0, [sp, #72]	@ 0x48
10067cae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
10067cb0:	9a04      	ldr	r2, [sp, #16]
10067cb2:	4b83      	ldr	r3, [pc, #524]	@ (10067ec0 <_dtoa_r+0x388>)
10067cb4:	00d2      	lsls	r2, r2, #3
10067cb6:	189b      	adds	r3, r3, r2
10067cb8:	681a      	ldr	r2, [r3, #0]
10067cba:	685b      	ldr	r3, [r3, #4]
10067cbc:	f7d8 fc6c 	bl	10040598 <__aeabi_dcmplt>
10067cc0:	2800      	cmp	r0, #0
10067cc2:	d047      	beq.n	10067d54 <_dtoa_r+0x21c>
10067cc4:	9b04      	ldr	r3, [sp, #16]
10067cc6:	3b01      	subs	r3, #1
10067cc8:	9304      	str	r3, [sp, #16]
10067cca:	2300      	movs	r3, #0
10067ccc:	9315      	str	r3, [sp, #84]	@ 0x54
10067cce:	2200      	movs	r2, #0
10067cd0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
10067cd2:	9206      	str	r2, [sp, #24]
10067cd4:	1bdb      	subs	r3, r3, r7
10067cd6:	1e5a      	subs	r2, r3, #1
10067cd8:	d53e      	bpl.n	10067d58 <_dtoa_r+0x220>
10067cda:	2201      	movs	r2, #1
10067cdc:	1ad3      	subs	r3, r2, r3
10067cde:	9306      	str	r3, [sp, #24]
10067ce0:	2300      	movs	r3, #0
10067ce2:	930d      	str	r3, [sp, #52]	@ 0x34
10067ce4:	9b04      	ldr	r3, [sp, #16]
10067ce6:	2b00      	cmp	r3, #0
10067ce8:	db38      	blt.n	10067d5c <_dtoa_r+0x224>
10067cea:	9a04      	ldr	r2, [sp, #16]
10067cec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10067cee:	4694      	mov	ip, r2
10067cf0:	4463      	add	r3, ip
10067cf2:	930d      	str	r3, [sp, #52]	@ 0x34
10067cf4:	2300      	movs	r3, #0
10067cf6:	9214      	str	r2, [sp, #80]	@ 0x50
10067cf8:	930f      	str	r3, [sp, #60]	@ 0x3c
10067cfa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
10067cfc:	2401      	movs	r4, #1
10067cfe:	2b09      	cmp	r3, #9
10067d00:	d862      	bhi.n	10067dc8 <_dtoa_r+0x290>
10067d02:	2b05      	cmp	r3, #5
10067d04:	dd02      	ble.n	10067d0c <_dtoa_r+0x1d4>
10067d06:	2400      	movs	r4, #0
10067d08:	3b04      	subs	r3, #4
10067d0a:	9322      	str	r3, [sp, #136]	@ 0x88
10067d0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
10067d0e:	1e98      	subs	r0, r3, #2
10067d10:	2803      	cmp	r0, #3
10067d12:	d863      	bhi.n	10067ddc <_dtoa_r+0x2a4>
10067d14:	f7d8 fa94 	bl	10040240 <__gnu_thumb1_case_uqi>
10067d18:	2b385654 	.word	0x2b385654
10067d1c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
10067d1e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
10067d20:	18f6      	adds	r6, r6, r3
10067d22:	4b68      	ldr	r3, [pc, #416]	@ (10067ec4 <_dtoa_r+0x38c>)
10067d24:	18f2      	adds	r2, r6, r3
10067d26:	2a20      	cmp	r2, #32
10067d28:	dd0f      	ble.n	10067d4a <_dtoa_r+0x212>
10067d2a:	2340      	movs	r3, #64	@ 0x40
10067d2c:	1a9b      	subs	r3, r3, r2
10067d2e:	409f      	lsls	r7, r3
10067d30:	4b65      	ldr	r3, [pc, #404]	@ (10067ec8 <_dtoa_r+0x390>)
10067d32:	0038      	movs	r0, r7
10067d34:	18f3      	adds	r3, r6, r3
10067d36:	40dc      	lsrs	r4, r3
10067d38:	4320      	orrs	r0, r4
10067d3a:	f7da fd77 	bl	1004282c <__aeabi_ui2d>
10067d3e:	2201      	movs	r2, #1
10067d40:	4b62      	ldr	r3, [pc, #392]	@ (10067ecc <_dtoa_r+0x394>)
10067d42:	1e77      	subs	r7, r6, #1
10067d44:	18cb      	adds	r3, r1, r3
10067d46:	9218      	str	r2, [sp, #96]	@ 0x60
10067d48:	e776      	b.n	10067c38 <_dtoa_r+0x100>
10067d4a:	2320      	movs	r3, #32
10067d4c:	0020      	movs	r0, r4
10067d4e:	1a9b      	subs	r3, r3, r2
10067d50:	4098      	lsls	r0, r3
10067d52:	e7f2      	b.n	10067d3a <_dtoa_r+0x202>
10067d54:	9015      	str	r0, [sp, #84]	@ 0x54
10067d56:	e7ba      	b.n	10067cce <_dtoa_r+0x196>
10067d58:	920d      	str	r2, [sp, #52]	@ 0x34
10067d5a:	e7c3      	b.n	10067ce4 <_dtoa_r+0x1ac>
10067d5c:	9b06      	ldr	r3, [sp, #24]
10067d5e:	9a04      	ldr	r2, [sp, #16]
10067d60:	1a9b      	subs	r3, r3, r2
10067d62:	9306      	str	r3, [sp, #24]
10067d64:	4253      	negs	r3, r2
10067d66:	930f      	str	r3, [sp, #60]	@ 0x3c
10067d68:	2300      	movs	r3, #0
10067d6a:	9314      	str	r3, [sp, #80]	@ 0x50
10067d6c:	e7c5      	b.n	10067cfa <_dtoa_r+0x1c2>
10067d6e:	2301      	movs	r3, #1
10067d70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
10067d72:	9310      	str	r3, [sp, #64]	@ 0x40
10067d74:	4694      	mov	ip, r2
10067d76:	9b04      	ldr	r3, [sp, #16]
10067d78:	4463      	add	r3, ip
10067d7a:	930e      	str	r3, [sp, #56]	@ 0x38
10067d7c:	3301      	adds	r3, #1
10067d7e:	9309      	str	r3, [sp, #36]	@ 0x24
10067d80:	2b00      	cmp	r3, #0
10067d82:	dc08      	bgt.n	10067d96 <_dtoa_r+0x25e>
10067d84:	2301      	movs	r3, #1
10067d86:	e006      	b.n	10067d96 <_dtoa_r+0x25e>
10067d88:	2301      	movs	r3, #1
10067d8a:	9310      	str	r3, [sp, #64]	@ 0x40
10067d8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
10067d8e:	2b00      	cmp	r3, #0
10067d90:	dd28      	ble.n	10067de4 <_dtoa_r+0x2ac>
10067d92:	930e      	str	r3, [sp, #56]	@ 0x38
10067d94:	9309      	str	r3, [sp, #36]	@ 0x24
10067d96:	9a03      	ldr	r2, [sp, #12]
10067d98:	2100      	movs	r1, #0
10067d9a:	69d0      	ldr	r0, [r2, #28]
10067d9c:	2204      	movs	r2, #4
10067d9e:	0015      	movs	r5, r2
10067da0:	3514      	adds	r5, #20
10067da2:	429d      	cmp	r5, r3
10067da4:	d923      	bls.n	10067dee <_dtoa_r+0x2b6>
10067da6:	6041      	str	r1, [r0, #4]
10067da8:	9803      	ldr	r0, [sp, #12]
10067daa:	f000 fdbb 	bl	10068924 <_Balloc>
10067dae:	9008      	str	r0, [sp, #32]
10067db0:	2800      	cmp	r0, #0
10067db2:	d11f      	bne.n	10067df4 <_dtoa_r+0x2bc>
10067db4:	21b0      	movs	r1, #176	@ 0xb0
10067db6:	4b46      	ldr	r3, [pc, #280]	@ (10067ed0 <_dtoa_r+0x398>)
10067db8:	4831      	ldr	r0, [pc, #196]	@ (10067e80 <_dtoa_r+0x348>)
10067dba:	9a08      	ldr	r2, [sp, #32]
10067dbc:	31ff      	adds	r1, #255	@ 0xff
10067dbe:	e6d0      	b.n	10067b62 <_dtoa_r+0x2a>
10067dc0:	2300      	movs	r3, #0
10067dc2:	e7e2      	b.n	10067d8a <_dtoa_r+0x252>
10067dc4:	2300      	movs	r3, #0
10067dc6:	e7d3      	b.n	10067d70 <_dtoa_r+0x238>
10067dc8:	2300      	movs	r3, #0
10067dca:	9410      	str	r4, [sp, #64]	@ 0x40
10067dcc:	9322      	str	r3, [sp, #136]	@ 0x88
10067dce:	3b01      	subs	r3, #1
10067dd0:	2200      	movs	r2, #0
10067dd2:	930e      	str	r3, [sp, #56]	@ 0x38
10067dd4:	9309      	str	r3, [sp, #36]	@ 0x24
10067dd6:	3313      	adds	r3, #19
10067dd8:	9223      	str	r2, [sp, #140]	@ 0x8c
10067dda:	e7dc      	b.n	10067d96 <_dtoa_r+0x25e>
10067ddc:	2301      	movs	r3, #1
10067dde:	9310      	str	r3, [sp, #64]	@ 0x40
10067de0:	3b02      	subs	r3, #2
10067de2:	e7f5      	b.n	10067dd0 <_dtoa_r+0x298>
10067de4:	2301      	movs	r3, #1
10067de6:	001a      	movs	r2, r3
10067de8:	930e      	str	r3, [sp, #56]	@ 0x38
10067dea:	9309      	str	r3, [sp, #36]	@ 0x24
10067dec:	e7f4      	b.n	10067dd8 <_dtoa_r+0x2a0>
10067dee:	3101      	adds	r1, #1
10067df0:	0052      	lsls	r2, r2, #1
10067df2:	e7d4      	b.n	10067d9e <_dtoa_r+0x266>
10067df4:	9b03      	ldr	r3, [sp, #12]
10067df6:	9a08      	ldr	r2, [sp, #32]
10067df8:	69db      	ldr	r3, [r3, #28]
10067dfa:	601a      	str	r2, [r3, #0]
10067dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10067dfe:	2b0e      	cmp	r3, #14
10067e00:	d900      	bls.n	10067e04 <_dtoa_r+0x2cc>
10067e02:	e0d6      	b.n	10067fb2 <_dtoa_r+0x47a>
10067e04:	2c00      	cmp	r4, #0
10067e06:	d100      	bne.n	10067e0a <_dtoa_r+0x2d2>
10067e08:	e0d3      	b.n	10067fb2 <_dtoa_r+0x47a>
10067e0a:	9b04      	ldr	r3, [sp, #16]
10067e0c:	2b00      	cmp	r3, #0
10067e0e:	dd63      	ble.n	10067ed8 <_dtoa_r+0x3a0>
10067e10:	210f      	movs	r1, #15
10067e12:	9a04      	ldr	r2, [sp, #16]
10067e14:	4b2a      	ldr	r3, [pc, #168]	@ (10067ec0 <_dtoa_r+0x388>)
10067e16:	400a      	ands	r2, r1
10067e18:	00d2      	lsls	r2, r2, #3
10067e1a:	189b      	adds	r3, r3, r2
10067e1c:	681e      	ldr	r6, [r3, #0]
10067e1e:	685f      	ldr	r7, [r3, #4]
10067e20:	9b04      	ldr	r3, [sp, #16]
10067e22:	2402      	movs	r4, #2
10067e24:	111d      	asrs	r5, r3, #4
10067e26:	05db      	lsls	r3, r3, #23
10067e28:	d50a      	bpl.n	10067e40 <_dtoa_r+0x308>
10067e2a:	4b2a      	ldr	r3, [pc, #168]	@ (10067ed4 <_dtoa_r+0x39c>)
10067e2c:	400d      	ands	r5, r1
10067e2e:	6a1a      	ldr	r2, [r3, #32]
10067e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10067e32:	9812      	ldr	r0, [sp, #72]	@ 0x48
10067e34:	9913      	ldr	r1, [sp, #76]	@ 0x4c
10067e36:	f7d9 f943 	bl	100410c0 <__aeabi_ddiv>
10067e3a:	900a      	str	r0, [sp, #40]	@ 0x28
10067e3c:	910b      	str	r1, [sp, #44]	@ 0x2c
10067e3e:	3401      	adds	r4, #1
10067e40:	4b24      	ldr	r3, [pc, #144]	@ (10067ed4 <_dtoa_r+0x39c>)
10067e42:	930c      	str	r3, [sp, #48]	@ 0x30
10067e44:	2d00      	cmp	r5, #0
10067e46:	d108      	bne.n	10067e5a <_dtoa_r+0x322>
10067e48:	980a      	ldr	r0, [sp, #40]	@ 0x28
10067e4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10067e4c:	0032      	movs	r2, r6
10067e4e:	003b      	movs	r3, r7
10067e50:	f7d9 f936 	bl	100410c0 <__aeabi_ddiv>
10067e54:	900a      	str	r0, [sp, #40]	@ 0x28
10067e56:	910b      	str	r1, [sp, #44]	@ 0x2c
10067e58:	e059      	b.n	10067f0e <_dtoa_r+0x3d6>
10067e5a:	2301      	movs	r3, #1
10067e5c:	421d      	tst	r5, r3
10067e5e:	d009      	beq.n	10067e74 <_dtoa_r+0x33c>
10067e60:	18e4      	adds	r4, r4, r3
10067e62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10067e64:	0030      	movs	r0, r6
10067e66:	681a      	ldr	r2, [r3, #0]
10067e68:	685b      	ldr	r3, [r3, #4]
10067e6a:	0039      	movs	r1, r7
10067e6c:	f7d9 fd62 	bl	10041934 <__aeabi_dmul>
10067e70:	0006      	movs	r6, r0
10067e72:	000f      	movs	r7, r1
10067e74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10067e76:	106d      	asrs	r5, r5, #1
10067e78:	3308      	adds	r3, #8
10067e7a:	e7e2      	b.n	10067e42 <_dtoa_r+0x30a>
10067e7c:	1006d23e 	.word	0x1006d23e
10067e80:	1006d255 	.word	0x1006d255
10067e84:	7ff00000 	.word	0x7ff00000
10067e88:	0000270f 	.word	0x0000270f
10067e8c:	1006d23a 	.word	0x1006d23a
10067e90:	1006d23d 	.word	0x1006d23d
10067e94:	1006d209 	.word	0x1006d209
10067e98:	1006d208 	.word	0x1006d208
10067e9c:	3ff00000 	.word	0x3ff00000
10067ea0:	fffffc01 	.word	0xfffffc01
10067ea4:	3ff80000 	.word	0x3ff80000
10067ea8:	636f4361 	.word	0x636f4361
10067eac:	3fd287a7 	.word	0x3fd287a7
10067eb0:	8b60c8b3 	.word	0x8b60c8b3
10067eb4:	3fc68a28 	.word	0x3fc68a28
10067eb8:	509f79fb 	.word	0x509f79fb
10067ebc:	3fd34413 	.word	0x3fd34413
10067ec0:	1006d408 	.word	0x1006d408
10067ec4:	00000432 	.word	0x00000432
10067ec8:	00000412 	.word	0x00000412
10067ecc:	fe100000 	.word	0xfe100000
10067ed0:	1006d2ad 	.word	0x1006d2ad
10067ed4:	1006d3e0 	.word	0x1006d3e0
10067ed8:	9b04      	ldr	r3, [sp, #16]
10067eda:	2402      	movs	r4, #2
10067edc:	2b00      	cmp	r3, #0
10067ede:	d016      	beq.n	10067f0e <_dtoa_r+0x3d6>
10067ee0:	9812      	ldr	r0, [sp, #72]	@ 0x48
10067ee2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
10067ee4:	220f      	movs	r2, #15
10067ee6:	425d      	negs	r5, r3
10067ee8:	402a      	ands	r2, r5
10067eea:	4bd5      	ldr	r3, [pc, #852]	@ (10068240 <_dtoa_r+0x708>)
10067eec:	00d2      	lsls	r2, r2, #3
10067eee:	189b      	adds	r3, r3, r2
10067ef0:	681a      	ldr	r2, [r3, #0]
10067ef2:	685b      	ldr	r3, [r3, #4]
10067ef4:	f7d9 fd1e 	bl	10041934 <__aeabi_dmul>
10067ef8:	2701      	movs	r7, #1
10067efa:	2300      	movs	r3, #0
10067efc:	900a      	str	r0, [sp, #40]	@ 0x28
10067efe:	910b      	str	r1, [sp, #44]	@ 0x2c
10067f00:	4ed0      	ldr	r6, [pc, #832]	@ (10068244 <_dtoa_r+0x70c>)
10067f02:	112d      	asrs	r5, r5, #4
10067f04:	2d00      	cmp	r5, #0
10067f06:	d000      	beq.n	10067f0a <_dtoa_r+0x3d2>
10067f08:	e095      	b.n	10068036 <_dtoa_r+0x4fe>
10067f0a:	2b00      	cmp	r3, #0
10067f0c:	d1a2      	bne.n	10067e54 <_dtoa_r+0x31c>
10067f0e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10067f10:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
10067f12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10067f14:	2b00      	cmp	r3, #0
10067f16:	d100      	bne.n	10067f1a <_dtoa_r+0x3e2>
10067f18:	e098      	b.n	1006804c <_dtoa_r+0x514>
10067f1a:	2200      	movs	r2, #0
10067f1c:	0030      	movs	r0, r6
10067f1e:	0039      	movs	r1, r7
10067f20:	4bc9      	ldr	r3, [pc, #804]	@ (10068248 <_dtoa_r+0x710>)
10067f22:	f7d8 fb39 	bl	10040598 <__aeabi_dcmplt>
10067f26:	2800      	cmp	r0, #0
10067f28:	d100      	bne.n	10067f2c <_dtoa_r+0x3f4>
10067f2a:	e08f      	b.n	1006804c <_dtoa_r+0x514>
10067f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10067f2e:	2b00      	cmp	r3, #0
10067f30:	d100      	bne.n	10067f34 <_dtoa_r+0x3fc>
10067f32:	e08b      	b.n	1006804c <_dtoa_r+0x514>
10067f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10067f36:	2b00      	cmp	r3, #0
10067f38:	dd37      	ble.n	10067faa <_dtoa_r+0x472>
10067f3a:	9b04      	ldr	r3, [sp, #16]
10067f3c:	2200      	movs	r2, #0
10067f3e:	3b01      	subs	r3, #1
10067f40:	930c      	str	r3, [sp, #48]	@ 0x30
10067f42:	0030      	movs	r0, r6
10067f44:	4bc1      	ldr	r3, [pc, #772]	@ (1006824c <_dtoa_r+0x714>)
10067f46:	0039      	movs	r1, r7
10067f48:	f7d9 fcf4 	bl	10041934 <__aeabi_dmul>
10067f4c:	900a      	str	r0, [sp, #40]	@ 0x28
10067f4e:	910b      	str	r1, [sp, #44]	@ 0x2c
10067f50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10067f52:	3401      	adds	r4, #1
10067f54:	0020      	movs	r0, r4
10067f56:	9311      	str	r3, [sp, #68]	@ 0x44
10067f58:	f7da fc3a 	bl	100427d0 <__aeabi_i2d>
10067f5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10067f5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10067f60:	f7d9 fce8 	bl	10041934 <__aeabi_dmul>
10067f64:	4bba      	ldr	r3, [pc, #744]	@ (10068250 <_dtoa_r+0x718>)
10067f66:	2200      	movs	r2, #0
10067f68:	f7d8 fce4 	bl	10040934 <__aeabi_dadd>
10067f6c:	4bb9      	ldr	r3, [pc, #740]	@ (10068254 <_dtoa_r+0x71c>)
10067f6e:	0006      	movs	r6, r0
10067f70:	18cf      	adds	r7, r1, r3
10067f72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10067f74:	2b00      	cmp	r3, #0
10067f76:	d16d      	bne.n	10068054 <_dtoa_r+0x51c>
10067f78:	980a      	ldr	r0, [sp, #40]	@ 0x28
10067f7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10067f7c:	2200      	movs	r2, #0
10067f7e:	4bb6      	ldr	r3, [pc, #728]	@ (10068258 <_dtoa_r+0x720>)
10067f80:	f7d9 ffbe 	bl	10041f00 <__aeabi_dsub>
10067f84:	0032      	movs	r2, r6
10067f86:	003b      	movs	r3, r7
10067f88:	0004      	movs	r4, r0
10067f8a:	000d      	movs	r5, r1
10067f8c:	f7d8 fb18 	bl	100405c0 <__aeabi_dcmpgt>
10067f90:	2800      	cmp	r0, #0
10067f92:	d000      	beq.n	10067f96 <_dtoa_r+0x45e>
10067f94:	e2b6      	b.n	10068504 <_dtoa_r+0x9cc>
10067f96:	2180      	movs	r1, #128	@ 0x80
10067f98:	0609      	lsls	r1, r1, #24
10067f9a:	187b      	adds	r3, r7, r1
10067f9c:	0032      	movs	r2, r6
10067f9e:	0020      	movs	r0, r4
10067fa0:	0029      	movs	r1, r5
10067fa2:	f7d8 faf9 	bl	10040598 <__aeabi_dcmplt>
10067fa6:	2800      	cmp	r0, #0
10067fa8:	d128      	bne.n	10067ffc <_dtoa_r+0x4c4>
10067faa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10067fac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
10067fae:	930a      	str	r3, [sp, #40]	@ 0x28
10067fb0:	940b      	str	r4, [sp, #44]	@ 0x2c
10067fb2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
10067fb4:	2b00      	cmp	r3, #0
10067fb6:	da00      	bge.n	10067fba <_dtoa_r+0x482>
10067fb8:	e174      	b.n	100682a4 <_dtoa_r+0x76c>
10067fba:	9a04      	ldr	r2, [sp, #16]
10067fbc:	2a0e      	cmp	r2, #14
10067fbe:	dd00      	ble.n	10067fc2 <_dtoa_r+0x48a>
10067fc0:	e170      	b.n	100682a4 <_dtoa_r+0x76c>
10067fc2:	4b9f      	ldr	r3, [pc, #636]	@ (10068240 <_dtoa_r+0x708>)
10067fc4:	00d2      	lsls	r2, r2, #3
10067fc6:	189b      	adds	r3, r3, r2
10067fc8:	685c      	ldr	r4, [r3, #4]
10067fca:	681b      	ldr	r3, [r3, #0]
10067fcc:	9306      	str	r3, [sp, #24]
10067fce:	9407      	str	r4, [sp, #28]
10067fd0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
10067fd2:	2b00      	cmp	r3, #0
10067fd4:	db00      	blt.n	10067fd8 <_dtoa_r+0x4a0>
10067fd6:	e0e7      	b.n	100681a8 <_dtoa_r+0x670>
10067fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10067fda:	2b00      	cmp	r3, #0
10067fdc:	dd00      	ble.n	10067fe0 <_dtoa_r+0x4a8>
10067fde:	e0e3      	b.n	100681a8 <_dtoa_r+0x670>
10067fe0:	d10c      	bne.n	10067ffc <_dtoa_r+0x4c4>
10067fe2:	9806      	ldr	r0, [sp, #24]
10067fe4:	9907      	ldr	r1, [sp, #28]
10067fe6:	2200      	movs	r2, #0
10067fe8:	4b9b      	ldr	r3, [pc, #620]	@ (10068258 <_dtoa_r+0x720>)
10067fea:	f7d9 fca3 	bl	10041934 <__aeabi_dmul>
10067fee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10067ff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10067ff2:	f7d8 faef 	bl	100405d4 <__aeabi_dcmpge>
10067ff6:	2800      	cmp	r0, #0
10067ff8:	d100      	bne.n	10067ffc <_dtoa_r+0x4c4>
10067ffa:	e286      	b.n	1006850a <_dtoa_r+0x9d2>
10067ffc:	2600      	movs	r6, #0
10067ffe:	0037      	movs	r7, r6
10068000:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
10068002:	9c08      	ldr	r4, [sp, #32]
10068004:	43db      	mvns	r3, r3
10068006:	930c      	str	r3, [sp, #48]	@ 0x30
10068008:	9704      	str	r7, [sp, #16]
1006800a:	2700      	movs	r7, #0
1006800c:	0031      	movs	r1, r6
1006800e:	9803      	ldr	r0, [sp, #12]
10068010:	f000 fccc 	bl	100689ac <_Bfree>
10068014:	9b04      	ldr	r3, [sp, #16]
10068016:	2b00      	cmp	r3, #0
10068018:	d100      	bne.n	1006801c <_dtoa_r+0x4e4>
1006801a:	e0bb      	b.n	10068194 <_dtoa_r+0x65c>
1006801c:	2f00      	cmp	r7, #0
1006801e:	d005      	beq.n	1006802c <_dtoa_r+0x4f4>
10068020:	429f      	cmp	r7, r3
10068022:	d003      	beq.n	1006802c <_dtoa_r+0x4f4>
10068024:	0039      	movs	r1, r7
10068026:	9803      	ldr	r0, [sp, #12]
10068028:	f000 fcc0 	bl	100689ac <_Bfree>
1006802c:	9904      	ldr	r1, [sp, #16]
1006802e:	9803      	ldr	r0, [sp, #12]
10068030:	f000 fcbc 	bl	100689ac <_Bfree>
10068034:	e0ae      	b.n	10068194 <_dtoa_r+0x65c>
10068036:	423d      	tst	r5, r7
10068038:	d005      	beq.n	10068046 <_dtoa_r+0x50e>
1006803a:	6832      	ldr	r2, [r6, #0]
1006803c:	6873      	ldr	r3, [r6, #4]
1006803e:	f7d9 fc79 	bl	10041934 <__aeabi_dmul>
10068042:	003b      	movs	r3, r7
10068044:	3401      	adds	r4, #1
10068046:	106d      	asrs	r5, r5, #1
10068048:	3608      	adds	r6, #8
1006804a:	e75b      	b.n	10067f04 <_dtoa_r+0x3cc>
1006804c:	9b04      	ldr	r3, [sp, #16]
1006804e:	930c      	str	r3, [sp, #48]	@ 0x30
10068050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10068052:	e77f      	b.n	10067f54 <_dtoa_r+0x41c>
10068054:	9a11      	ldr	r2, [sp, #68]	@ 0x44
10068056:	4b7a      	ldr	r3, [pc, #488]	@ (10068240 <_dtoa_r+0x708>)
10068058:	3a01      	subs	r2, #1
1006805a:	00d2      	lsls	r2, r2, #3
1006805c:	9910      	ldr	r1, [sp, #64]	@ 0x40
1006805e:	189b      	adds	r3, r3, r2
10068060:	681a      	ldr	r2, [r3, #0]
10068062:	685b      	ldr	r3, [r3, #4]
10068064:	2900      	cmp	r1, #0
10068066:	d04c      	beq.n	10068102 <_dtoa_r+0x5ca>
10068068:	2000      	movs	r0, #0
1006806a:	497c      	ldr	r1, [pc, #496]	@ (1006825c <_dtoa_r+0x724>)
1006806c:	f7d9 f828 	bl	100410c0 <__aeabi_ddiv>
10068070:	0032      	movs	r2, r6
10068072:	003b      	movs	r3, r7
10068074:	f7d9 ff44 	bl	10041f00 <__aeabi_dsub>
10068078:	9a08      	ldr	r2, [sp, #32]
1006807a:	0006      	movs	r6, r0
1006807c:	4694      	mov	ip, r2
1006807e:	000f      	movs	r7, r1
10068080:	9b08      	ldr	r3, [sp, #32]
10068082:	9316      	str	r3, [sp, #88]	@ 0x58
10068084:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10068086:	4463      	add	r3, ip
10068088:	9311      	str	r3, [sp, #68]	@ 0x44
1006808a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1006808c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1006808e:	f7da fb63 	bl	10042758 <__aeabi_d2iz>
10068092:	0005      	movs	r5, r0
10068094:	f7da fb9c 	bl	100427d0 <__aeabi_i2d>
10068098:	0002      	movs	r2, r0
1006809a:	000b      	movs	r3, r1
1006809c:	980a      	ldr	r0, [sp, #40]	@ 0x28
1006809e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100680a0:	f7d9 ff2e 	bl	10041f00 <__aeabi_dsub>
100680a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
100680a6:	3530      	adds	r5, #48	@ 0x30
100680a8:	1c5c      	adds	r4, r3, #1
100680aa:	701d      	strb	r5, [r3, #0]
100680ac:	0032      	movs	r2, r6
100680ae:	003b      	movs	r3, r7
100680b0:	900a      	str	r0, [sp, #40]	@ 0x28
100680b2:	910b      	str	r1, [sp, #44]	@ 0x2c
100680b4:	f7d8 fa70 	bl	10040598 <__aeabi_dcmplt>
100680b8:	2800      	cmp	r0, #0
100680ba:	d16b      	bne.n	10068194 <_dtoa_r+0x65c>
100680bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100680be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100680c0:	2000      	movs	r0, #0
100680c2:	4961      	ldr	r1, [pc, #388]	@ (10068248 <_dtoa_r+0x710>)
100680c4:	f7d9 ff1c 	bl	10041f00 <__aeabi_dsub>
100680c8:	0032      	movs	r2, r6
100680ca:	003b      	movs	r3, r7
100680cc:	f7d8 fa64 	bl	10040598 <__aeabi_dcmplt>
100680d0:	2800      	cmp	r0, #0
100680d2:	d000      	beq.n	100680d6 <_dtoa_r+0x59e>
100680d4:	e0c6      	b.n	10068264 <_dtoa_r+0x72c>
100680d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
100680d8:	42a3      	cmp	r3, r4
100680da:	d100      	bne.n	100680de <_dtoa_r+0x5a6>
100680dc:	e765      	b.n	10067faa <_dtoa_r+0x472>
100680de:	2200      	movs	r2, #0
100680e0:	0030      	movs	r0, r6
100680e2:	0039      	movs	r1, r7
100680e4:	4b59      	ldr	r3, [pc, #356]	@ (1006824c <_dtoa_r+0x714>)
100680e6:	f7d9 fc25 	bl	10041934 <__aeabi_dmul>
100680ea:	2200      	movs	r2, #0
100680ec:	0006      	movs	r6, r0
100680ee:	000f      	movs	r7, r1
100680f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
100680f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100680f4:	4b55      	ldr	r3, [pc, #340]	@ (1006824c <_dtoa_r+0x714>)
100680f6:	f7d9 fc1d 	bl	10041934 <__aeabi_dmul>
100680fa:	9416      	str	r4, [sp, #88]	@ 0x58
100680fc:	900a      	str	r0, [sp, #40]	@ 0x28
100680fe:	910b      	str	r1, [sp, #44]	@ 0x2c
10068100:	e7c3      	b.n	1006808a <_dtoa_r+0x552>
10068102:	0030      	movs	r0, r6
10068104:	0039      	movs	r1, r7
10068106:	f7d9 fc15 	bl	10041934 <__aeabi_dmul>
1006810a:	9d08      	ldr	r5, [sp, #32]
1006810c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
1006810e:	002b      	movs	r3, r5
10068110:	4694      	mov	ip, r2
10068112:	9016      	str	r0, [sp, #88]	@ 0x58
10068114:	9117      	str	r1, [sp, #92]	@ 0x5c
10068116:	4463      	add	r3, ip
10068118:	9319      	str	r3, [sp, #100]	@ 0x64
1006811a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1006811c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1006811e:	f7da fb1b 	bl	10042758 <__aeabi_d2iz>
10068122:	0004      	movs	r4, r0
10068124:	f7da fb54 	bl	100427d0 <__aeabi_i2d>
10068128:	000b      	movs	r3, r1
1006812a:	0002      	movs	r2, r0
1006812c:	980a      	ldr	r0, [sp, #40]	@ 0x28
1006812e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10068130:	f7d9 fee6 	bl	10041f00 <__aeabi_dsub>
10068134:	3430      	adds	r4, #48	@ 0x30
10068136:	9b19      	ldr	r3, [sp, #100]	@ 0x64
10068138:	702c      	strb	r4, [r5, #0]
1006813a:	3501      	adds	r5, #1
1006813c:	0006      	movs	r6, r0
1006813e:	000f      	movs	r7, r1
10068140:	42ab      	cmp	r3, r5
10068142:	d12a      	bne.n	1006819a <_dtoa_r+0x662>
10068144:	9816      	ldr	r0, [sp, #88]	@ 0x58
10068146:	9917      	ldr	r1, [sp, #92]	@ 0x5c
10068148:	9b08      	ldr	r3, [sp, #32]
1006814a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1006814c:	469c      	mov	ip, r3
1006814e:	2200      	movs	r2, #0
10068150:	4b42      	ldr	r3, [pc, #264]	@ (1006825c <_dtoa_r+0x724>)
10068152:	4464      	add	r4, ip
10068154:	f7d8 fbee 	bl	10040934 <__aeabi_dadd>
10068158:	0002      	movs	r2, r0
1006815a:	000b      	movs	r3, r1
1006815c:	0030      	movs	r0, r6
1006815e:	0039      	movs	r1, r7
10068160:	f7d8 fa2e 	bl	100405c0 <__aeabi_dcmpgt>
10068164:	2800      	cmp	r0, #0
10068166:	d000      	beq.n	1006816a <_dtoa_r+0x632>
10068168:	e07c      	b.n	10068264 <_dtoa_r+0x72c>
1006816a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
1006816c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1006816e:	2000      	movs	r0, #0
10068170:	493a      	ldr	r1, [pc, #232]	@ (1006825c <_dtoa_r+0x724>)
10068172:	f7d9 fec5 	bl	10041f00 <__aeabi_dsub>
10068176:	0002      	movs	r2, r0
10068178:	000b      	movs	r3, r1
1006817a:	0030      	movs	r0, r6
1006817c:	0039      	movs	r1, r7
1006817e:	f7d8 fa0b 	bl	10040598 <__aeabi_dcmplt>
10068182:	2800      	cmp	r0, #0
10068184:	d100      	bne.n	10068188 <_dtoa_r+0x650>
10068186:	e710      	b.n	10067faa <_dtoa_r+0x472>
10068188:	0023      	movs	r3, r4
1006818a:	3c01      	subs	r4, #1
1006818c:	7822      	ldrb	r2, [r4, #0]
1006818e:	2a30      	cmp	r2, #48	@ 0x30
10068190:	d0fa      	beq.n	10068188 <_dtoa_r+0x650>
10068192:	001c      	movs	r4, r3
10068194:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10068196:	9304      	str	r3, [sp, #16]
10068198:	e042      	b.n	10068220 <_dtoa_r+0x6e8>
1006819a:	2200      	movs	r2, #0
1006819c:	4b2b      	ldr	r3, [pc, #172]	@ (1006824c <_dtoa_r+0x714>)
1006819e:	f7d9 fbc9 	bl	10041934 <__aeabi_dmul>
100681a2:	900a      	str	r0, [sp, #40]	@ 0x28
100681a4:	910b      	str	r1, [sp, #44]	@ 0x2c
100681a6:	e7b8      	b.n	1006811a <_dtoa_r+0x5e2>
100681a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100681aa:	9d08      	ldr	r5, [sp, #32]
100681ac:	3b01      	subs	r3, #1
100681ae:	195b      	adds	r3, r3, r5
100681b0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
100681b2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
100681b4:	930a      	str	r3, [sp, #40]	@ 0x28
100681b6:	9a06      	ldr	r2, [sp, #24]
100681b8:	9b07      	ldr	r3, [sp, #28]
100681ba:	0030      	movs	r0, r6
100681bc:	0039      	movs	r1, r7
100681be:	f7d8 ff7f 	bl	100410c0 <__aeabi_ddiv>
100681c2:	f7da fac9 	bl	10042758 <__aeabi_d2iz>
100681c6:	9009      	str	r0, [sp, #36]	@ 0x24
100681c8:	f7da fb02 	bl	100427d0 <__aeabi_i2d>
100681cc:	9a06      	ldr	r2, [sp, #24]
100681ce:	9b07      	ldr	r3, [sp, #28]
100681d0:	f7d9 fbb0 	bl	10041934 <__aeabi_dmul>
100681d4:	0002      	movs	r2, r0
100681d6:	000b      	movs	r3, r1
100681d8:	0030      	movs	r0, r6
100681da:	0039      	movs	r1, r7
100681dc:	f7d9 fe90 	bl	10041f00 <__aeabi_dsub>
100681e0:	002b      	movs	r3, r5
100681e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100681e4:	3501      	adds	r5, #1
100681e6:	3230      	adds	r2, #48	@ 0x30
100681e8:	701a      	strb	r2, [r3, #0]
100681ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100681ec:	002c      	movs	r4, r5
100681ee:	429a      	cmp	r2, r3
100681f0:	d14b      	bne.n	1006828a <_dtoa_r+0x752>
100681f2:	0002      	movs	r2, r0
100681f4:	000b      	movs	r3, r1
100681f6:	f7d8 fb9d 	bl	10040934 <__aeabi_dadd>
100681fa:	9a06      	ldr	r2, [sp, #24]
100681fc:	9b07      	ldr	r3, [sp, #28]
100681fe:	0006      	movs	r6, r0
10068200:	000f      	movs	r7, r1
10068202:	f7d8 f9dd 	bl	100405c0 <__aeabi_dcmpgt>
10068206:	2800      	cmp	r0, #0
10068208:	d12a      	bne.n	10068260 <_dtoa_r+0x728>
1006820a:	9a06      	ldr	r2, [sp, #24]
1006820c:	9b07      	ldr	r3, [sp, #28]
1006820e:	0030      	movs	r0, r6
10068210:	0039      	movs	r1, r7
10068212:	f7d8 f9bb 	bl	1004058c <__aeabi_dcmpeq>
10068216:	2800      	cmp	r0, #0
10068218:	d002      	beq.n	10068220 <_dtoa_r+0x6e8>
1006821a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1006821c:	07dd      	lsls	r5, r3, #31
1006821e:	d41f      	bmi.n	10068260 <_dtoa_r+0x728>
10068220:	9905      	ldr	r1, [sp, #20]
10068222:	9803      	ldr	r0, [sp, #12]
10068224:	f000 fbc2 	bl	100689ac <_Bfree>
10068228:	2300      	movs	r3, #0
1006822a:	7023      	strb	r3, [r4, #0]
1006822c:	9b04      	ldr	r3, [sp, #16]
1006822e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
10068230:	3301      	adds	r3, #1
10068232:	6013      	str	r3, [r2, #0]
10068234:	9b26      	ldr	r3, [sp, #152]	@ 0x98
10068236:	2b00      	cmp	r3, #0
10068238:	d100      	bne.n	1006823c <_dtoa_r+0x704>
1006823a:	e4c7      	b.n	10067bcc <_dtoa_r+0x94>
1006823c:	601c      	str	r4, [r3, #0]
1006823e:	e4c5      	b.n	10067bcc <_dtoa_r+0x94>
10068240:	1006d408 	.word	0x1006d408
10068244:	1006d3e0 	.word	0x1006d3e0
10068248:	3ff00000 	.word	0x3ff00000
1006824c:	40240000 	.word	0x40240000
10068250:	401c0000 	.word	0x401c0000
10068254:	fcc00000 	.word	0xfcc00000
10068258:	40140000 	.word	0x40140000
1006825c:	3fe00000 	.word	0x3fe00000
10068260:	9b04      	ldr	r3, [sp, #16]
10068262:	930c      	str	r3, [sp, #48]	@ 0x30
10068264:	0023      	movs	r3, r4
10068266:	001c      	movs	r4, r3
10068268:	3b01      	subs	r3, #1
1006826a:	781a      	ldrb	r2, [r3, #0]
1006826c:	2a39      	cmp	r2, #57	@ 0x39
1006826e:	d108      	bne.n	10068282 <_dtoa_r+0x74a>
10068270:	9a08      	ldr	r2, [sp, #32]
10068272:	429a      	cmp	r2, r3
10068274:	d1f7      	bne.n	10068266 <_dtoa_r+0x72e>
10068276:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10068278:	9908      	ldr	r1, [sp, #32]
1006827a:	3201      	adds	r2, #1
1006827c:	920c      	str	r2, [sp, #48]	@ 0x30
1006827e:	2230      	movs	r2, #48	@ 0x30
10068280:	700a      	strb	r2, [r1, #0]
10068282:	781a      	ldrb	r2, [r3, #0]
10068284:	3201      	adds	r2, #1
10068286:	701a      	strb	r2, [r3, #0]
10068288:	e784      	b.n	10068194 <_dtoa_r+0x65c>
1006828a:	2200      	movs	r2, #0
1006828c:	4bc6      	ldr	r3, [pc, #792]	@ (100685a8 <_dtoa_r+0xa70>)
1006828e:	f7d9 fb51 	bl	10041934 <__aeabi_dmul>
10068292:	2200      	movs	r2, #0
10068294:	2300      	movs	r3, #0
10068296:	0006      	movs	r6, r0
10068298:	000f      	movs	r7, r1
1006829a:	f7d8 f977 	bl	1004058c <__aeabi_dcmpeq>
1006829e:	2800      	cmp	r0, #0
100682a0:	d089      	beq.n	100681b6 <_dtoa_r+0x67e>
100682a2:	e7bd      	b.n	10068220 <_dtoa_r+0x6e8>
100682a4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
100682a6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
100682a8:	9c06      	ldr	r4, [sp, #24]
100682aa:	2f00      	cmp	r7, #0
100682ac:	d014      	beq.n	100682d8 <_dtoa_r+0x7a0>
100682ae:	9a22      	ldr	r2, [sp, #136]	@ 0x88
100682b0:	2a01      	cmp	r2, #1
100682b2:	dd00      	ble.n	100682b6 <_dtoa_r+0x77e>
100682b4:	e0e4      	b.n	10068480 <_dtoa_r+0x948>
100682b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
100682b8:	2a00      	cmp	r2, #0
100682ba:	d100      	bne.n	100682be <_dtoa_r+0x786>
100682bc:	e0da      	b.n	10068474 <_dtoa_r+0x93c>
100682be:	4abb      	ldr	r2, [pc, #748]	@ (100685ac <_dtoa_r+0xa74>)
100682c0:	189b      	adds	r3, r3, r2
100682c2:	9a06      	ldr	r2, [sp, #24]
100682c4:	2101      	movs	r1, #1
100682c6:	18d2      	adds	r2, r2, r3
100682c8:	9206      	str	r2, [sp, #24]
100682ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100682cc:	9803      	ldr	r0, [sp, #12]
100682ce:	18d3      	adds	r3, r2, r3
100682d0:	930d      	str	r3, [sp, #52]	@ 0x34
100682d2:	f000 fc6f 	bl	10068bb4 <__i2b>
100682d6:	0007      	movs	r7, r0
100682d8:	2c00      	cmp	r4, #0
100682da:	d00e      	beq.n	100682fa <_dtoa_r+0x7c2>
100682dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100682de:	2b00      	cmp	r3, #0
100682e0:	dd0b      	ble.n	100682fa <_dtoa_r+0x7c2>
100682e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100682e4:	0023      	movs	r3, r4
100682e6:	4294      	cmp	r4, r2
100682e8:	dd00      	ble.n	100682ec <_dtoa_r+0x7b4>
100682ea:	0013      	movs	r3, r2
100682ec:	9a06      	ldr	r2, [sp, #24]
100682ee:	1ae4      	subs	r4, r4, r3
100682f0:	1ad2      	subs	r2, r2, r3
100682f2:	9206      	str	r2, [sp, #24]
100682f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100682f6:	1ad3      	subs	r3, r2, r3
100682f8:	930d      	str	r3, [sp, #52]	@ 0x34
100682fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100682fc:	2b00      	cmp	r3, #0
100682fe:	d021      	beq.n	10068344 <_dtoa_r+0x80c>
10068300:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10068302:	2b00      	cmp	r3, #0
10068304:	d100      	bne.n	10068308 <_dtoa_r+0x7d0>
10068306:	e0d3      	b.n	100684b0 <_dtoa_r+0x978>
10068308:	9e05      	ldr	r6, [sp, #20]
1006830a:	2d00      	cmp	r5, #0
1006830c:	d014      	beq.n	10068338 <_dtoa_r+0x800>
1006830e:	0039      	movs	r1, r7
10068310:	002a      	movs	r2, r5
10068312:	9803      	ldr	r0, [sp, #12]
10068314:	f000 fd10 	bl	10068d38 <__pow5mult>
10068318:	9a05      	ldr	r2, [sp, #20]
1006831a:	0001      	movs	r1, r0
1006831c:	0007      	movs	r7, r0
1006831e:	9803      	ldr	r0, [sp, #12]
10068320:	f000 fc60 	bl	10068be4 <__multiply>
10068324:	0006      	movs	r6, r0
10068326:	9905      	ldr	r1, [sp, #20]
10068328:	9803      	ldr	r0, [sp, #12]
1006832a:	f000 fb3f 	bl	100689ac <_Bfree>
1006832e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10068330:	9605      	str	r6, [sp, #20]
10068332:	1b5b      	subs	r3, r3, r5
10068334:	930f      	str	r3, [sp, #60]	@ 0x3c
10068336:	d005      	beq.n	10068344 <_dtoa_r+0x80c>
10068338:	0031      	movs	r1, r6
1006833a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1006833c:	9803      	ldr	r0, [sp, #12]
1006833e:	f000 fcfb 	bl	10068d38 <__pow5mult>
10068342:	9005      	str	r0, [sp, #20]
10068344:	2101      	movs	r1, #1
10068346:	9803      	ldr	r0, [sp, #12]
10068348:	f000 fc34 	bl	10068bb4 <__i2b>
1006834c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
1006834e:	0006      	movs	r6, r0
10068350:	2b00      	cmp	r3, #0
10068352:	d100      	bne.n	10068356 <_dtoa_r+0x81e>
10068354:	e1bc      	b.n	100686d0 <_dtoa_r+0xb98>
10068356:	001a      	movs	r2, r3
10068358:	0001      	movs	r1, r0
1006835a:	9803      	ldr	r0, [sp, #12]
1006835c:	f000 fcec 	bl	10068d38 <__pow5mult>
10068360:	9b22      	ldr	r3, [sp, #136]	@ 0x88
10068362:	0006      	movs	r6, r0
10068364:	2500      	movs	r5, #0
10068366:	2b01      	cmp	r3, #1
10068368:	dc16      	bgt.n	10068398 <_dtoa_r+0x860>
1006836a:	2500      	movs	r5, #0
1006836c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1006836e:	42ab      	cmp	r3, r5
10068370:	d10e      	bne.n	10068390 <_dtoa_r+0x858>
10068372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10068374:	031b      	lsls	r3, r3, #12
10068376:	42ab      	cmp	r3, r5
10068378:	d10a      	bne.n	10068390 <_dtoa_r+0x858>
1006837a:	4b8d      	ldr	r3, [pc, #564]	@ (100685b0 <_dtoa_r+0xa78>)
1006837c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1006837e:	4213      	tst	r3, r2
10068380:	d006      	beq.n	10068390 <_dtoa_r+0x858>
10068382:	9b06      	ldr	r3, [sp, #24]
10068384:	3501      	adds	r5, #1
10068386:	3301      	adds	r3, #1
10068388:	9306      	str	r3, [sp, #24]
1006838a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1006838c:	3301      	adds	r3, #1
1006838e:	930d      	str	r3, [sp, #52]	@ 0x34
10068390:	9b14      	ldr	r3, [sp, #80]	@ 0x50
10068392:	2001      	movs	r0, #1
10068394:	2b00      	cmp	r3, #0
10068396:	d008      	beq.n	100683aa <_dtoa_r+0x872>
10068398:	6933      	ldr	r3, [r6, #16]
1006839a:	3303      	adds	r3, #3
1006839c:	009b      	lsls	r3, r3, #2
1006839e:	18f3      	adds	r3, r6, r3
100683a0:	6858      	ldr	r0, [r3, #4]
100683a2:	f000 fbb7 	bl	10068b14 <__hi0bits>
100683a6:	2320      	movs	r3, #32
100683a8:	1a18      	subs	r0, r3, r0
100683aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100683ac:	1818      	adds	r0, r3, r0
100683ae:	0002      	movs	r2, r0
100683b0:	231f      	movs	r3, #31
100683b2:	401a      	ands	r2, r3
100683b4:	4218      	tst	r0, r3
100683b6:	d100      	bne.n	100683ba <_dtoa_r+0x882>
100683b8:	e081      	b.n	100684be <_dtoa_r+0x986>
100683ba:	3301      	adds	r3, #1
100683bc:	1a9b      	subs	r3, r3, r2
100683be:	2b04      	cmp	r3, #4
100683c0:	dd79      	ble.n	100684b6 <_dtoa_r+0x97e>
100683c2:	231c      	movs	r3, #28
100683c4:	1a9b      	subs	r3, r3, r2
100683c6:	9a06      	ldr	r2, [sp, #24]
100683c8:	18e4      	adds	r4, r4, r3
100683ca:	18d2      	adds	r2, r2, r3
100683cc:	9206      	str	r2, [sp, #24]
100683ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
100683d0:	18d3      	adds	r3, r2, r3
100683d2:	930d      	str	r3, [sp, #52]	@ 0x34
100683d4:	9b06      	ldr	r3, [sp, #24]
100683d6:	2b00      	cmp	r3, #0
100683d8:	dd05      	ble.n	100683e6 <_dtoa_r+0x8ae>
100683da:	001a      	movs	r2, r3
100683dc:	9905      	ldr	r1, [sp, #20]
100683de:	9803      	ldr	r0, [sp, #12]
100683e0:	f000 fd06 	bl	10068df0 <__lshift>
100683e4:	9005      	str	r0, [sp, #20]
100683e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100683e8:	2b00      	cmp	r3, #0
100683ea:	dd05      	ble.n	100683f8 <_dtoa_r+0x8c0>
100683ec:	0031      	movs	r1, r6
100683ee:	001a      	movs	r2, r3
100683f0:	9803      	ldr	r0, [sp, #12]
100683f2:	f000 fcfd 	bl	10068df0 <__lshift>
100683f6:	0006      	movs	r6, r0
100683f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
100683fa:	2b00      	cmp	r3, #0
100683fc:	d061      	beq.n	100684c2 <_dtoa_r+0x98a>
100683fe:	0031      	movs	r1, r6
10068400:	9805      	ldr	r0, [sp, #20]
10068402:	f000 fd61 	bl	10068ec8 <__mcmp>
10068406:	2800      	cmp	r0, #0
10068408:	da5b      	bge.n	100684c2 <_dtoa_r+0x98a>
1006840a:	9b04      	ldr	r3, [sp, #16]
1006840c:	220a      	movs	r2, #10
1006840e:	3b01      	subs	r3, #1
10068410:	930c      	str	r3, [sp, #48]	@ 0x30
10068412:	9905      	ldr	r1, [sp, #20]
10068414:	2300      	movs	r3, #0
10068416:	9803      	ldr	r0, [sp, #12]
10068418:	f000 faec 	bl	100689f4 <__multadd>
1006841c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1006841e:	9005      	str	r0, [sp, #20]
10068420:	2b00      	cmp	r3, #0
10068422:	d100      	bne.n	10068426 <_dtoa_r+0x8ee>
10068424:	e15b      	b.n	100686de <_dtoa_r+0xba6>
10068426:	2300      	movs	r3, #0
10068428:	0039      	movs	r1, r7
1006842a:	220a      	movs	r2, #10
1006842c:	9803      	ldr	r0, [sp, #12]
1006842e:	f000 fae1 	bl	100689f4 <__multadd>
10068432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10068434:	0007      	movs	r7, r0
10068436:	2b00      	cmp	r3, #0
10068438:	dc4d      	bgt.n	100684d6 <_dtoa_r+0x99e>
1006843a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
1006843c:	2b02      	cmp	r3, #2
1006843e:	dd46      	ble.n	100684ce <_dtoa_r+0x996>
10068440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10068442:	2b00      	cmp	r3, #0
10068444:	d000      	beq.n	10068448 <_dtoa_r+0x910>
10068446:	e5db      	b.n	10068000 <_dtoa_r+0x4c8>
10068448:	0031      	movs	r1, r6
1006844a:	2205      	movs	r2, #5
1006844c:	9803      	ldr	r0, [sp, #12]
1006844e:	f000 fad1 	bl	100689f4 <__multadd>
10068452:	0006      	movs	r6, r0
10068454:	0001      	movs	r1, r0
10068456:	9805      	ldr	r0, [sp, #20]
10068458:	f000 fd36 	bl	10068ec8 <__mcmp>
1006845c:	2800      	cmp	r0, #0
1006845e:	dc00      	bgt.n	10068462 <_dtoa_r+0x92a>
10068460:	e5ce      	b.n	10068000 <_dtoa_r+0x4c8>
10068462:	9b08      	ldr	r3, [sp, #32]
10068464:	9a08      	ldr	r2, [sp, #32]
10068466:	1c5c      	adds	r4, r3, #1
10068468:	2331      	movs	r3, #49	@ 0x31
1006846a:	7013      	strb	r3, [r2, #0]
1006846c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1006846e:	3301      	adds	r3, #1
10068470:	930c      	str	r3, [sp, #48]	@ 0x30
10068472:	e5c9      	b.n	10068008 <_dtoa_r+0x4d0>
10068474:	2336      	movs	r3, #54	@ 0x36
10068476:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
10068478:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1006847a:	1a9b      	subs	r3, r3, r2
1006847c:	9c06      	ldr	r4, [sp, #24]
1006847e:	e720      	b.n	100682c2 <_dtoa_r+0x78a>
10068480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10068482:	1e5d      	subs	r5, r3, #1
10068484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10068486:	42ab      	cmp	r3, r5
10068488:	db08      	blt.n	1006849c <_dtoa_r+0x964>
1006848a:	1b5d      	subs	r5, r3, r5
1006848c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1006848e:	2b00      	cmp	r3, #0
10068490:	daf4      	bge.n	1006847c <_dtoa_r+0x944>
10068492:	9b06      	ldr	r3, [sp, #24]
10068494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10068496:	1a9c      	subs	r4, r3, r2
10068498:	2300      	movs	r3, #0
1006849a:	e712      	b.n	100682c2 <_dtoa_r+0x78a>
1006849c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1006849e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
100684a0:	1aeb      	subs	r3, r5, r3
100684a2:	18d3      	adds	r3, r2, r3
100684a4:	9314      	str	r3, [sp, #80]	@ 0x50
100684a6:	950f      	str	r5, [sp, #60]	@ 0x3c
100684a8:	9c06      	ldr	r4, [sp, #24]
100684aa:	2500      	movs	r5, #0
100684ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100684ae:	e708      	b.n	100682c2 <_dtoa_r+0x78a>
100684b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
100684b2:	9905      	ldr	r1, [sp, #20]
100684b4:	e742      	b.n	1006833c <_dtoa_r+0x804>
100684b6:	2b04      	cmp	r3, #4
100684b8:	d08c      	beq.n	100683d4 <_dtoa_r+0x89c>
100684ba:	331c      	adds	r3, #28
100684bc:	e783      	b.n	100683c6 <_dtoa_r+0x88e>
100684be:	0013      	movs	r3, r2
100684c0:	e7fb      	b.n	100684ba <_dtoa_r+0x982>
100684c2:	9b04      	ldr	r3, [sp, #16]
100684c4:	930c      	str	r3, [sp, #48]	@ 0x30
100684c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100684c8:	930e      	str	r3, [sp, #56]	@ 0x38
100684ca:	2b00      	cmp	r3, #0
100684cc:	ddb5      	ble.n	1006843a <_dtoa_r+0x902>
100684ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100684d0:	2b00      	cmp	r3, #0
100684d2:	d100      	bne.n	100684d6 <_dtoa_r+0x99e>
100684d4:	e107      	b.n	100686e6 <_dtoa_r+0xbae>
100684d6:	2c00      	cmp	r4, #0
100684d8:	dd05      	ble.n	100684e6 <_dtoa_r+0x9ae>
100684da:	0039      	movs	r1, r7
100684dc:	0022      	movs	r2, r4
100684de:	9803      	ldr	r0, [sp, #12]
100684e0:	f000 fc86 	bl	10068df0 <__lshift>
100684e4:	0007      	movs	r7, r0
100684e6:	9704      	str	r7, [sp, #16]
100684e8:	2d00      	cmp	r5, #0
100684ea:	d020      	beq.n	1006852e <_dtoa_r+0x9f6>
100684ec:	6879      	ldr	r1, [r7, #4]
100684ee:	9803      	ldr	r0, [sp, #12]
100684f0:	f000 fa18 	bl	10068924 <_Balloc>
100684f4:	1e04      	subs	r4, r0, #0
100684f6:	d10c      	bne.n	10068512 <_dtoa_r+0x9da>
100684f8:	0022      	movs	r2, r4
100684fa:	4b2e      	ldr	r3, [pc, #184]	@ (100685b4 <_dtoa_r+0xa7c>)
100684fc:	482e      	ldr	r0, [pc, #184]	@ (100685b8 <_dtoa_r+0xa80>)
100684fe:	492f      	ldr	r1, [pc, #188]	@ (100685bc <_dtoa_r+0xa84>)
10068500:	f7ff fb2f 	bl	10067b62 <_dtoa_r+0x2a>
10068504:	9e11      	ldr	r6, [sp, #68]	@ 0x44
10068506:	0037      	movs	r7, r6
10068508:	e7ab      	b.n	10068462 <_dtoa_r+0x92a>
1006850a:	9b04      	ldr	r3, [sp, #16]
1006850c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1006850e:	930c      	str	r3, [sp, #48]	@ 0x30
10068510:	e7f9      	b.n	10068506 <_dtoa_r+0x9ce>
10068512:	0039      	movs	r1, r7
10068514:	693a      	ldr	r2, [r7, #16]
10068516:	310c      	adds	r1, #12
10068518:	3202      	adds	r2, #2
1006851a:	0092      	lsls	r2, r2, #2
1006851c:	300c      	adds	r0, #12
1006851e:	f7ff fa78 	bl	10067a12 <memcpy>
10068522:	2201      	movs	r2, #1
10068524:	0021      	movs	r1, r4
10068526:	9803      	ldr	r0, [sp, #12]
10068528:	f000 fc62 	bl	10068df0 <__lshift>
1006852c:	9004      	str	r0, [sp, #16]
1006852e:	9b08      	ldr	r3, [sp, #32]
10068530:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10068532:	9306      	str	r3, [sp, #24]
10068534:	3b01      	subs	r3, #1
10068536:	189b      	adds	r3, r3, r2
10068538:	2201      	movs	r2, #1
1006853a:	930f      	str	r3, [sp, #60]	@ 0x3c
1006853c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1006853e:	4013      	ands	r3, r2
10068540:	930e      	str	r3, [sp, #56]	@ 0x38
10068542:	0031      	movs	r1, r6
10068544:	9805      	ldr	r0, [sp, #20]
10068546:	f7ff fa71 	bl	10067a2c <quorem>
1006854a:	0039      	movs	r1, r7
1006854c:	0005      	movs	r5, r0
1006854e:	900a      	str	r0, [sp, #40]	@ 0x28
10068550:	9805      	ldr	r0, [sp, #20]
10068552:	f000 fcb9 	bl	10068ec8 <__mcmp>
10068556:	9a04      	ldr	r2, [sp, #16]
10068558:	900d      	str	r0, [sp, #52]	@ 0x34
1006855a:	0031      	movs	r1, r6
1006855c:	9803      	ldr	r0, [sp, #12]
1006855e:	f000 fccf 	bl	10068f00 <__mdiff>
10068562:	2201      	movs	r2, #1
10068564:	68c3      	ldr	r3, [r0, #12]
10068566:	0004      	movs	r4, r0
10068568:	3530      	adds	r5, #48	@ 0x30
1006856a:	9209      	str	r2, [sp, #36]	@ 0x24
1006856c:	2b00      	cmp	r3, #0
1006856e:	d104      	bne.n	1006857a <_dtoa_r+0xa42>
10068570:	0001      	movs	r1, r0
10068572:	9805      	ldr	r0, [sp, #20]
10068574:	f000 fca8 	bl	10068ec8 <__mcmp>
10068578:	9009      	str	r0, [sp, #36]	@ 0x24
1006857a:	0021      	movs	r1, r4
1006857c:	9803      	ldr	r0, [sp, #12]
1006857e:	f000 fa15 	bl	100689ac <_Bfree>
10068582:	9b06      	ldr	r3, [sp, #24]
10068584:	9a22      	ldr	r2, [sp, #136]	@ 0x88
10068586:	1c5c      	adds	r4, r3, #1
10068588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1006858a:	4313      	orrs	r3, r2
1006858c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1006858e:	4313      	orrs	r3, r2
10068590:	d116      	bne.n	100685c0 <_dtoa_r+0xa88>
10068592:	2d39      	cmp	r5, #57	@ 0x39
10068594:	d02f      	beq.n	100685f6 <_dtoa_r+0xabe>
10068596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10068598:	2b00      	cmp	r3, #0
1006859a:	dd01      	ble.n	100685a0 <_dtoa_r+0xa68>
1006859c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1006859e:	3531      	adds	r5, #49	@ 0x31
100685a0:	9b06      	ldr	r3, [sp, #24]
100685a2:	701d      	strb	r5, [r3, #0]
100685a4:	e532      	b.n	1006800c <_dtoa_r+0x4d4>
100685a6:	46c0      	nop			@ (mov r8, r8)
100685a8:	40240000 	.word	0x40240000
100685ac:	00000433 	.word	0x00000433
100685b0:	7ff00000 	.word	0x7ff00000
100685b4:	1006d2ad 	.word	0x1006d2ad
100685b8:	1006d255 	.word	0x1006d255
100685bc:	000002ef 	.word	0x000002ef
100685c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100685c2:	2b00      	cmp	r3, #0
100685c4:	db04      	blt.n	100685d0 <_dtoa_r+0xa98>
100685c6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
100685c8:	4313      	orrs	r3, r2
100685ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100685cc:	4313      	orrs	r3, r2
100685ce:	d11e      	bne.n	1006860e <_dtoa_r+0xad6>
100685d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100685d2:	2b00      	cmp	r3, #0
100685d4:	dde4      	ble.n	100685a0 <_dtoa_r+0xa68>
100685d6:	9905      	ldr	r1, [sp, #20]
100685d8:	2201      	movs	r2, #1
100685da:	9803      	ldr	r0, [sp, #12]
100685dc:	f000 fc08 	bl	10068df0 <__lshift>
100685e0:	0031      	movs	r1, r6
100685e2:	9005      	str	r0, [sp, #20]
100685e4:	f000 fc70 	bl	10068ec8 <__mcmp>
100685e8:	2800      	cmp	r0, #0
100685ea:	dc02      	bgt.n	100685f2 <_dtoa_r+0xaba>
100685ec:	d1d8      	bne.n	100685a0 <_dtoa_r+0xa68>
100685ee:	07eb      	lsls	r3, r5, #31
100685f0:	d5d6      	bpl.n	100685a0 <_dtoa_r+0xa68>
100685f2:	2d39      	cmp	r5, #57	@ 0x39
100685f4:	d1d2      	bne.n	1006859c <_dtoa_r+0xa64>
100685f6:	2339      	movs	r3, #57	@ 0x39
100685f8:	9a06      	ldr	r2, [sp, #24]
100685fa:	7013      	strb	r3, [r2, #0]
100685fc:	0023      	movs	r3, r4
100685fe:	001c      	movs	r4, r3
10068600:	3b01      	subs	r3, #1
10068602:	781a      	ldrb	r2, [r3, #0]
10068604:	2a39      	cmp	r2, #57	@ 0x39
10068606:	d050      	beq.n	100686aa <_dtoa_r+0xb72>
10068608:	3201      	adds	r2, #1
1006860a:	701a      	strb	r2, [r3, #0]
1006860c:	e4fe      	b.n	1006800c <_dtoa_r+0x4d4>
1006860e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10068610:	2b00      	cmp	r3, #0
10068612:	dd03      	ble.n	1006861c <_dtoa_r+0xae4>
10068614:	2d39      	cmp	r5, #57	@ 0x39
10068616:	d0ee      	beq.n	100685f6 <_dtoa_r+0xabe>
10068618:	3501      	adds	r5, #1
1006861a:	e7c1      	b.n	100685a0 <_dtoa_r+0xa68>
1006861c:	9b06      	ldr	r3, [sp, #24]
1006861e:	9a06      	ldr	r2, [sp, #24]
10068620:	701d      	strb	r5, [r3, #0]
10068622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10068624:	4293      	cmp	r3, r2
10068626:	d02b      	beq.n	10068680 <_dtoa_r+0xb48>
10068628:	2300      	movs	r3, #0
1006862a:	220a      	movs	r2, #10
1006862c:	9905      	ldr	r1, [sp, #20]
1006862e:	9803      	ldr	r0, [sp, #12]
10068630:	f000 f9e0 	bl	100689f4 <__multadd>
10068634:	9b04      	ldr	r3, [sp, #16]
10068636:	9005      	str	r0, [sp, #20]
10068638:	429f      	cmp	r7, r3
1006863a:	d109      	bne.n	10068650 <_dtoa_r+0xb18>
1006863c:	0039      	movs	r1, r7
1006863e:	2300      	movs	r3, #0
10068640:	220a      	movs	r2, #10
10068642:	9803      	ldr	r0, [sp, #12]
10068644:	f000 f9d6 	bl	100689f4 <__multadd>
10068648:	0007      	movs	r7, r0
1006864a:	9004      	str	r0, [sp, #16]
1006864c:	9406      	str	r4, [sp, #24]
1006864e:	e778      	b.n	10068542 <_dtoa_r+0xa0a>
10068650:	0039      	movs	r1, r7
10068652:	2300      	movs	r3, #0
10068654:	220a      	movs	r2, #10
10068656:	9803      	ldr	r0, [sp, #12]
10068658:	f000 f9cc 	bl	100689f4 <__multadd>
1006865c:	2300      	movs	r3, #0
1006865e:	0007      	movs	r7, r0
10068660:	220a      	movs	r2, #10
10068662:	9904      	ldr	r1, [sp, #16]
10068664:	9803      	ldr	r0, [sp, #12]
10068666:	f000 f9c5 	bl	100689f4 <__multadd>
1006866a:	9004      	str	r0, [sp, #16]
1006866c:	e7ee      	b.n	1006864c <_dtoa_r+0xb14>
1006866e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10068670:	2401      	movs	r4, #1
10068672:	2b00      	cmp	r3, #0
10068674:	dd00      	ble.n	10068678 <_dtoa_r+0xb40>
10068676:	001c      	movs	r4, r3
10068678:	9704      	str	r7, [sp, #16]
1006867a:	2700      	movs	r7, #0
1006867c:	9b08      	ldr	r3, [sp, #32]
1006867e:	191c      	adds	r4, r3, r4
10068680:	9905      	ldr	r1, [sp, #20]
10068682:	2201      	movs	r2, #1
10068684:	9803      	ldr	r0, [sp, #12]
10068686:	f000 fbb3 	bl	10068df0 <__lshift>
1006868a:	0031      	movs	r1, r6
1006868c:	9005      	str	r0, [sp, #20]
1006868e:	f000 fc1b 	bl	10068ec8 <__mcmp>
10068692:	2800      	cmp	r0, #0
10068694:	dcb2      	bgt.n	100685fc <_dtoa_r+0xac4>
10068696:	d101      	bne.n	1006869c <_dtoa_r+0xb64>
10068698:	07ed      	lsls	r5, r5, #31
1006869a:	d4af      	bmi.n	100685fc <_dtoa_r+0xac4>
1006869c:	0023      	movs	r3, r4
1006869e:	001c      	movs	r4, r3
100686a0:	3b01      	subs	r3, #1
100686a2:	781a      	ldrb	r2, [r3, #0]
100686a4:	2a30      	cmp	r2, #48	@ 0x30
100686a6:	d0fa      	beq.n	1006869e <_dtoa_r+0xb66>
100686a8:	e4b0      	b.n	1006800c <_dtoa_r+0x4d4>
100686aa:	9a08      	ldr	r2, [sp, #32]
100686ac:	429a      	cmp	r2, r3
100686ae:	d1a6      	bne.n	100685fe <_dtoa_r+0xac6>
100686b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100686b2:	3301      	adds	r3, #1
100686b4:	930c      	str	r3, [sp, #48]	@ 0x30
100686b6:	2331      	movs	r3, #49	@ 0x31
100686b8:	7013      	strb	r3, [r2, #0]
100686ba:	e4a7      	b.n	1006800c <_dtoa_r+0x4d4>
100686bc:	4b14      	ldr	r3, [pc, #80]	@ (10068710 <_dtoa_r+0xbd8>)
100686be:	9a26      	ldr	r2, [sp, #152]	@ 0x98
100686c0:	9308      	str	r3, [sp, #32]
100686c2:	4b14      	ldr	r3, [pc, #80]	@ (10068714 <_dtoa_r+0xbdc>)
100686c4:	2a00      	cmp	r2, #0
100686c6:	d001      	beq.n	100686cc <_dtoa_r+0xb94>
100686c8:	f7ff fa7e 	bl	10067bc8 <_dtoa_r+0x90>
100686cc:	f7ff fa7e 	bl	10067bcc <_dtoa_r+0x94>
100686d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
100686d2:	2b01      	cmp	r3, #1
100686d4:	dc00      	bgt.n	100686d8 <_dtoa_r+0xba0>
100686d6:	e648      	b.n	1006836a <_dtoa_r+0x832>
100686d8:	2001      	movs	r0, #1
100686da:	9d14      	ldr	r5, [sp, #80]	@ 0x50
100686dc:	e665      	b.n	100683aa <_dtoa_r+0x872>
100686de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100686e0:	2b00      	cmp	r3, #0
100686e2:	dc00      	bgt.n	100686e6 <_dtoa_r+0xbae>
100686e4:	e6a9      	b.n	1006843a <_dtoa_r+0x902>
100686e6:	2400      	movs	r4, #0
100686e8:	0031      	movs	r1, r6
100686ea:	9805      	ldr	r0, [sp, #20]
100686ec:	f7ff f99e 	bl	10067a2c <quorem>
100686f0:	9b08      	ldr	r3, [sp, #32]
100686f2:	3030      	adds	r0, #48	@ 0x30
100686f4:	5518      	strb	r0, [r3, r4]
100686f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100686f8:	3401      	adds	r4, #1
100686fa:	0005      	movs	r5, r0
100686fc:	42a3      	cmp	r3, r4
100686fe:	ddb6      	ble.n	1006866e <_dtoa_r+0xb36>
10068700:	2300      	movs	r3, #0
10068702:	220a      	movs	r2, #10
10068704:	9905      	ldr	r1, [sp, #20]
10068706:	9803      	ldr	r0, [sp, #12]
10068708:	f000 f974 	bl	100689f4 <__multadd>
1006870c:	9005      	str	r0, [sp, #20]
1006870e:	e7eb      	b.n	100686e8 <_dtoa_r+0xbb0>
10068710:	1006d231 	.word	0x1006d231
10068714:	1006d239 	.word	0x1006d239

10068718 <_free_r>:
10068718:	b570      	push	{r4, r5, r6, lr}
1006871a:	0005      	movs	r5, r0
1006871c:	1e0c      	subs	r4, r1, #0
1006871e:	d010      	beq.n	10068742 <_free_r+0x2a>
10068720:	3c04      	subs	r4, #4
10068722:	6823      	ldr	r3, [r4, #0]
10068724:	2b00      	cmp	r3, #0
10068726:	da00      	bge.n	1006872a <_free_r+0x12>
10068728:	18e4      	adds	r4, r4, r3
1006872a:	0028      	movs	r0, r5
1006872c:	f000 f8ea 	bl	10068904 <__malloc_lock>
10068730:	4a1d      	ldr	r2, [pc, #116]	@ (100687a8 <_free_r+0x90>)
10068732:	6813      	ldr	r3, [r2, #0]
10068734:	2b00      	cmp	r3, #0
10068736:	d105      	bne.n	10068744 <_free_r+0x2c>
10068738:	6063      	str	r3, [r4, #4]
1006873a:	6014      	str	r4, [r2, #0]
1006873c:	0028      	movs	r0, r5
1006873e:	f000 f8e9 	bl	10068914 <__malloc_unlock>
10068742:	bd70      	pop	{r4, r5, r6, pc}
10068744:	42a3      	cmp	r3, r4
10068746:	d908      	bls.n	1006875a <_free_r+0x42>
10068748:	6820      	ldr	r0, [r4, #0]
1006874a:	1821      	adds	r1, r4, r0
1006874c:	428b      	cmp	r3, r1
1006874e:	d1f3      	bne.n	10068738 <_free_r+0x20>
10068750:	6819      	ldr	r1, [r3, #0]
10068752:	685b      	ldr	r3, [r3, #4]
10068754:	1809      	adds	r1, r1, r0
10068756:	6021      	str	r1, [r4, #0]
10068758:	e7ee      	b.n	10068738 <_free_r+0x20>
1006875a:	001a      	movs	r2, r3
1006875c:	685b      	ldr	r3, [r3, #4]
1006875e:	2b00      	cmp	r3, #0
10068760:	d001      	beq.n	10068766 <_free_r+0x4e>
10068762:	42a3      	cmp	r3, r4
10068764:	d9f9      	bls.n	1006875a <_free_r+0x42>
10068766:	6811      	ldr	r1, [r2, #0]
10068768:	1850      	adds	r0, r2, r1
1006876a:	42a0      	cmp	r0, r4
1006876c:	d10b      	bne.n	10068786 <_free_r+0x6e>
1006876e:	6820      	ldr	r0, [r4, #0]
10068770:	1809      	adds	r1, r1, r0
10068772:	1850      	adds	r0, r2, r1
10068774:	6011      	str	r1, [r2, #0]
10068776:	4283      	cmp	r3, r0
10068778:	d1e0      	bne.n	1006873c <_free_r+0x24>
1006877a:	6818      	ldr	r0, [r3, #0]
1006877c:	685b      	ldr	r3, [r3, #4]
1006877e:	1841      	adds	r1, r0, r1
10068780:	6011      	str	r1, [r2, #0]
10068782:	6053      	str	r3, [r2, #4]
10068784:	e7da      	b.n	1006873c <_free_r+0x24>
10068786:	42a0      	cmp	r0, r4
10068788:	d902      	bls.n	10068790 <_free_r+0x78>
1006878a:	230c      	movs	r3, #12
1006878c:	602b      	str	r3, [r5, #0]
1006878e:	e7d5      	b.n	1006873c <_free_r+0x24>
10068790:	6820      	ldr	r0, [r4, #0]
10068792:	1821      	adds	r1, r4, r0
10068794:	428b      	cmp	r3, r1
10068796:	d103      	bne.n	100687a0 <_free_r+0x88>
10068798:	6819      	ldr	r1, [r3, #0]
1006879a:	685b      	ldr	r3, [r3, #4]
1006879c:	1809      	adds	r1, r1, r0
1006879e:	6021      	str	r1, [r4, #0]
100687a0:	6063      	str	r3, [r4, #4]
100687a2:	6054      	str	r4, [r2, #4]
100687a4:	e7ca      	b.n	1006873c <_free_r+0x24>
100687a6:	46c0      	nop			@ (mov r8, r8)
100687a8:	20001314 	.word	0x20001314

100687ac <malloc>:
100687ac:	b510      	push	{r4, lr}
100687ae:	4b03      	ldr	r3, [pc, #12]	@ (100687bc <malloc+0x10>)
100687b0:	0001      	movs	r1, r0
100687b2:	6818      	ldr	r0, [r3, #0]
100687b4:	f000 f826 	bl	10068804 <_malloc_r>
100687b8:	bd10      	pop	{r4, pc}
100687ba:	46c0      	nop			@ (mov r8, r8)
100687bc:	20001530 	.word	0x20001530

100687c0 <sbrk_aligned>:
100687c0:	b570      	push	{r4, r5, r6, lr}
100687c2:	4e0f      	ldr	r6, [pc, #60]	@ (10068800 <sbrk_aligned+0x40>)
100687c4:	000d      	movs	r5, r1
100687c6:	6831      	ldr	r1, [r6, #0]
100687c8:	0004      	movs	r4, r0
100687ca:	2900      	cmp	r1, #0
100687cc:	d102      	bne.n	100687d4 <sbrk_aligned+0x14>
100687ce:	f002 f853 	bl	1006a878 <_sbrk_r>
100687d2:	6030      	str	r0, [r6, #0]
100687d4:	0029      	movs	r1, r5
100687d6:	0020      	movs	r0, r4
100687d8:	f002 f84e 	bl	1006a878 <_sbrk_r>
100687dc:	1c43      	adds	r3, r0, #1
100687de:	d103      	bne.n	100687e8 <sbrk_aligned+0x28>
100687e0:	2501      	movs	r5, #1
100687e2:	426d      	negs	r5, r5
100687e4:	0028      	movs	r0, r5
100687e6:	bd70      	pop	{r4, r5, r6, pc}
100687e8:	2303      	movs	r3, #3
100687ea:	1cc5      	adds	r5, r0, #3
100687ec:	439d      	bics	r5, r3
100687ee:	42a8      	cmp	r0, r5
100687f0:	d0f8      	beq.n	100687e4 <sbrk_aligned+0x24>
100687f2:	1a29      	subs	r1, r5, r0
100687f4:	0020      	movs	r0, r4
100687f6:	f002 f83f 	bl	1006a878 <_sbrk_r>
100687fa:	3001      	adds	r0, #1
100687fc:	d1f2      	bne.n	100687e4 <sbrk_aligned+0x24>
100687fe:	e7ef      	b.n	100687e0 <sbrk_aligned+0x20>
10068800:	20001310 	.word	0x20001310

10068804 <_malloc_r>:
10068804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10068806:	2203      	movs	r2, #3
10068808:	1ccb      	adds	r3, r1, #3
1006880a:	4393      	bics	r3, r2
1006880c:	3308      	adds	r3, #8
1006880e:	0005      	movs	r5, r0
10068810:	001f      	movs	r7, r3
10068812:	2b0c      	cmp	r3, #12
10068814:	d234      	bcs.n	10068880 <_malloc_r+0x7c>
10068816:	270c      	movs	r7, #12
10068818:	42b9      	cmp	r1, r7
1006881a:	d833      	bhi.n	10068884 <_malloc_r+0x80>
1006881c:	0028      	movs	r0, r5
1006881e:	f000 f871 	bl	10068904 <__malloc_lock>
10068822:	4e37      	ldr	r6, [pc, #220]	@ (10068900 <_malloc_r+0xfc>)
10068824:	6833      	ldr	r3, [r6, #0]
10068826:	001c      	movs	r4, r3
10068828:	2c00      	cmp	r4, #0
1006882a:	d12f      	bne.n	1006888c <_malloc_r+0x88>
1006882c:	0039      	movs	r1, r7
1006882e:	0028      	movs	r0, r5
10068830:	f7ff ffc6 	bl	100687c0 <sbrk_aligned>
10068834:	0004      	movs	r4, r0
10068836:	1c43      	adds	r3, r0, #1
10068838:	d15f      	bne.n	100688fa <_malloc_r+0xf6>
1006883a:	6834      	ldr	r4, [r6, #0]
1006883c:	9400      	str	r4, [sp, #0]
1006883e:	9b00      	ldr	r3, [sp, #0]
10068840:	2b00      	cmp	r3, #0
10068842:	d14a      	bne.n	100688da <_malloc_r+0xd6>
10068844:	2c00      	cmp	r4, #0
10068846:	d052      	beq.n	100688ee <_malloc_r+0xea>
10068848:	6823      	ldr	r3, [r4, #0]
1006884a:	0028      	movs	r0, r5
1006884c:	18e3      	adds	r3, r4, r3
1006884e:	9900      	ldr	r1, [sp, #0]
10068850:	9301      	str	r3, [sp, #4]
10068852:	f002 f811 	bl	1006a878 <_sbrk_r>
10068856:	9b01      	ldr	r3, [sp, #4]
10068858:	4283      	cmp	r3, r0
1006885a:	d148      	bne.n	100688ee <_malloc_r+0xea>
1006885c:	6823      	ldr	r3, [r4, #0]
1006885e:	0028      	movs	r0, r5
10068860:	1aff      	subs	r7, r7, r3
10068862:	0039      	movs	r1, r7
10068864:	f7ff ffac 	bl	100687c0 <sbrk_aligned>
10068868:	3001      	adds	r0, #1
1006886a:	d040      	beq.n	100688ee <_malloc_r+0xea>
1006886c:	6823      	ldr	r3, [r4, #0]
1006886e:	19db      	adds	r3, r3, r7
10068870:	6023      	str	r3, [r4, #0]
10068872:	6833      	ldr	r3, [r6, #0]
10068874:	685a      	ldr	r2, [r3, #4]
10068876:	2a00      	cmp	r2, #0
10068878:	d133      	bne.n	100688e2 <_malloc_r+0xde>
1006887a:	9b00      	ldr	r3, [sp, #0]
1006887c:	6033      	str	r3, [r6, #0]
1006887e:	e019      	b.n	100688b4 <_malloc_r+0xb0>
10068880:	2b00      	cmp	r3, #0
10068882:	dac9      	bge.n	10068818 <_malloc_r+0x14>
10068884:	230c      	movs	r3, #12
10068886:	602b      	str	r3, [r5, #0]
10068888:	2000      	movs	r0, #0
1006888a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006888c:	6821      	ldr	r1, [r4, #0]
1006888e:	1bc9      	subs	r1, r1, r7
10068890:	d420      	bmi.n	100688d4 <_malloc_r+0xd0>
10068892:	290b      	cmp	r1, #11
10068894:	d90a      	bls.n	100688ac <_malloc_r+0xa8>
10068896:	19e2      	adds	r2, r4, r7
10068898:	6027      	str	r7, [r4, #0]
1006889a:	42a3      	cmp	r3, r4
1006889c:	d104      	bne.n	100688a8 <_malloc_r+0xa4>
1006889e:	6032      	str	r2, [r6, #0]
100688a0:	6863      	ldr	r3, [r4, #4]
100688a2:	6011      	str	r1, [r2, #0]
100688a4:	6053      	str	r3, [r2, #4]
100688a6:	e005      	b.n	100688b4 <_malloc_r+0xb0>
100688a8:	605a      	str	r2, [r3, #4]
100688aa:	e7f9      	b.n	100688a0 <_malloc_r+0x9c>
100688ac:	6862      	ldr	r2, [r4, #4]
100688ae:	42a3      	cmp	r3, r4
100688b0:	d10e      	bne.n	100688d0 <_malloc_r+0xcc>
100688b2:	6032      	str	r2, [r6, #0]
100688b4:	0028      	movs	r0, r5
100688b6:	f000 f82d 	bl	10068914 <__malloc_unlock>
100688ba:	0020      	movs	r0, r4
100688bc:	2207      	movs	r2, #7
100688be:	300b      	adds	r0, #11
100688c0:	1d23      	adds	r3, r4, #4
100688c2:	4390      	bics	r0, r2
100688c4:	1ac2      	subs	r2, r0, r3
100688c6:	4298      	cmp	r0, r3
100688c8:	d0df      	beq.n	1006888a <_malloc_r+0x86>
100688ca:	1a1b      	subs	r3, r3, r0
100688cc:	50a3      	str	r3, [r4, r2]
100688ce:	e7dc      	b.n	1006888a <_malloc_r+0x86>
100688d0:	605a      	str	r2, [r3, #4]
100688d2:	e7ef      	b.n	100688b4 <_malloc_r+0xb0>
100688d4:	0023      	movs	r3, r4
100688d6:	6864      	ldr	r4, [r4, #4]
100688d8:	e7a6      	b.n	10068828 <_malloc_r+0x24>
100688da:	9c00      	ldr	r4, [sp, #0]
100688dc:	6863      	ldr	r3, [r4, #4]
100688de:	9300      	str	r3, [sp, #0]
100688e0:	e7ad      	b.n	1006883e <_malloc_r+0x3a>
100688e2:	001a      	movs	r2, r3
100688e4:	685b      	ldr	r3, [r3, #4]
100688e6:	42a3      	cmp	r3, r4
100688e8:	d1fb      	bne.n	100688e2 <_malloc_r+0xde>
100688ea:	2300      	movs	r3, #0
100688ec:	e7da      	b.n	100688a4 <_malloc_r+0xa0>
100688ee:	230c      	movs	r3, #12
100688f0:	0028      	movs	r0, r5
100688f2:	602b      	str	r3, [r5, #0]
100688f4:	f000 f80e 	bl	10068914 <__malloc_unlock>
100688f8:	e7c6      	b.n	10068888 <_malloc_r+0x84>
100688fa:	6007      	str	r7, [r0, #0]
100688fc:	e7da      	b.n	100688b4 <_malloc_r+0xb0>
100688fe:	46c0      	nop			@ (mov r8, r8)
10068900:	20001314 	.word	0x20001314

10068904 <__malloc_lock>:
10068904:	b510      	push	{r4, lr}
10068906:	4802      	ldr	r0, [pc, #8]	@ (10068910 <__malloc_lock+0xc>)
10068908:	f7ff f86d 	bl	100679e6 <__retarget_lock_acquire_recursive>
1006890c:	bd10      	pop	{r4, pc}
1006890e:	46c0      	nop			@ (mov r8, r8)
10068910:	2000130c 	.word	0x2000130c

10068914 <__malloc_unlock>:
10068914:	b510      	push	{r4, lr}
10068916:	4802      	ldr	r0, [pc, #8]	@ (10068920 <__malloc_unlock+0xc>)
10068918:	f7ff f866 	bl	100679e8 <__retarget_lock_release_recursive>
1006891c:	bd10      	pop	{r4, pc}
1006891e:	46c0      	nop			@ (mov r8, r8)
10068920:	2000130c 	.word	0x2000130c

10068924 <_Balloc>:
10068924:	b570      	push	{r4, r5, r6, lr}
10068926:	69c5      	ldr	r5, [r0, #28]
10068928:	0006      	movs	r6, r0
1006892a:	000c      	movs	r4, r1
1006892c:	2d00      	cmp	r5, #0
1006892e:	d10e      	bne.n	1006894e <_Balloc+0x2a>
10068930:	2010      	movs	r0, #16
10068932:	f7ff ff3b 	bl	100687ac <malloc>
10068936:	1e02      	subs	r2, r0, #0
10068938:	61f0      	str	r0, [r6, #28]
1006893a:	d104      	bne.n	10068946 <_Balloc+0x22>
1006893c:	216b      	movs	r1, #107	@ 0x6b
1006893e:	4b19      	ldr	r3, [pc, #100]	@ (100689a4 <_Balloc+0x80>)
10068940:	4819      	ldr	r0, [pc, #100]	@ (100689a8 <_Balloc+0x84>)
10068942:	f001 ffb9 	bl	1006a8b8 <__assert_func>
10068946:	6045      	str	r5, [r0, #4]
10068948:	6085      	str	r5, [r0, #8]
1006894a:	6005      	str	r5, [r0, #0]
1006894c:	60c5      	str	r5, [r0, #12]
1006894e:	69f5      	ldr	r5, [r6, #28]
10068950:	68eb      	ldr	r3, [r5, #12]
10068952:	2b00      	cmp	r3, #0
10068954:	d013      	beq.n	1006897e <_Balloc+0x5a>
10068956:	69f3      	ldr	r3, [r6, #28]
10068958:	00a2      	lsls	r2, r4, #2
1006895a:	68db      	ldr	r3, [r3, #12]
1006895c:	189b      	adds	r3, r3, r2
1006895e:	6818      	ldr	r0, [r3, #0]
10068960:	2800      	cmp	r0, #0
10068962:	d118      	bne.n	10068996 <_Balloc+0x72>
10068964:	2101      	movs	r1, #1
10068966:	000d      	movs	r5, r1
10068968:	40a5      	lsls	r5, r4
1006896a:	1d6a      	adds	r2, r5, #5
1006896c:	0030      	movs	r0, r6
1006896e:	0092      	lsls	r2, r2, #2
10068970:	f001 ffc0 	bl	1006a8f4 <_calloc_r>
10068974:	2800      	cmp	r0, #0
10068976:	d00c      	beq.n	10068992 <_Balloc+0x6e>
10068978:	6044      	str	r4, [r0, #4]
1006897a:	6085      	str	r5, [r0, #8]
1006897c:	e00d      	b.n	1006899a <_Balloc+0x76>
1006897e:	2221      	movs	r2, #33	@ 0x21
10068980:	2104      	movs	r1, #4
10068982:	0030      	movs	r0, r6
10068984:	f001 ffb6 	bl	1006a8f4 <_calloc_r>
10068988:	69f3      	ldr	r3, [r6, #28]
1006898a:	60e8      	str	r0, [r5, #12]
1006898c:	68db      	ldr	r3, [r3, #12]
1006898e:	2b00      	cmp	r3, #0
10068990:	d1e1      	bne.n	10068956 <_Balloc+0x32>
10068992:	2000      	movs	r0, #0
10068994:	bd70      	pop	{r4, r5, r6, pc}
10068996:	6802      	ldr	r2, [r0, #0]
10068998:	601a      	str	r2, [r3, #0]
1006899a:	2300      	movs	r3, #0
1006899c:	6103      	str	r3, [r0, #16]
1006899e:	60c3      	str	r3, [r0, #12]
100689a0:	e7f8      	b.n	10068994 <_Balloc+0x70>
100689a2:	46c0      	nop			@ (mov r8, r8)
100689a4:	1006d23e 	.word	0x1006d23e
100689a8:	1006d2be 	.word	0x1006d2be

100689ac <_Bfree>:
100689ac:	b570      	push	{r4, r5, r6, lr}
100689ae:	69c6      	ldr	r6, [r0, #28]
100689b0:	0005      	movs	r5, r0
100689b2:	000c      	movs	r4, r1
100689b4:	2e00      	cmp	r6, #0
100689b6:	d10e      	bne.n	100689d6 <_Bfree+0x2a>
100689b8:	2010      	movs	r0, #16
100689ba:	f7ff fef7 	bl	100687ac <malloc>
100689be:	1e02      	subs	r2, r0, #0
100689c0:	61e8      	str	r0, [r5, #28]
100689c2:	d104      	bne.n	100689ce <_Bfree+0x22>
100689c4:	218f      	movs	r1, #143	@ 0x8f
100689c6:	4b09      	ldr	r3, [pc, #36]	@ (100689ec <_Bfree+0x40>)
100689c8:	4809      	ldr	r0, [pc, #36]	@ (100689f0 <_Bfree+0x44>)
100689ca:	f001 ff75 	bl	1006a8b8 <__assert_func>
100689ce:	6046      	str	r6, [r0, #4]
100689d0:	6086      	str	r6, [r0, #8]
100689d2:	6006      	str	r6, [r0, #0]
100689d4:	60c6      	str	r6, [r0, #12]
100689d6:	2c00      	cmp	r4, #0
100689d8:	d007      	beq.n	100689ea <_Bfree+0x3e>
100689da:	69eb      	ldr	r3, [r5, #28]
100689dc:	6862      	ldr	r2, [r4, #4]
100689de:	68db      	ldr	r3, [r3, #12]
100689e0:	0092      	lsls	r2, r2, #2
100689e2:	189b      	adds	r3, r3, r2
100689e4:	681a      	ldr	r2, [r3, #0]
100689e6:	6022      	str	r2, [r4, #0]
100689e8:	601c      	str	r4, [r3, #0]
100689ea:	bd70      	pop	{r4, r5, r6, pc}
100689ec:	1006d23e 	.word	0x1006d23e
100689f0:	1006d2be 	.word	0x1006d2be

100689f4 <__multadd>:
100689f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100689f6:	000f      	movs	r7, r1
100689f8:	9001      	str	r0, [sp, #4]
100689fa:	000c      	movs	r4, r1
100689fc:	001e      	movs	r6, r3
100689fe:	2000      	movs	r0, #0
10068a00:	690d      	ldr	r5, [r1, #16]
10068a02:	3714      	adds	r7, #20
10068a04:	683b      	ldr	r3, [r7, #0]
10068a06:	3001      	adds	r0, #1
10068a08:	b299      	uxth	r1, r3
10068a0a:	4351      	muls	r1, r2
10068a0c:	0c1b      	lsrs	r3, r3, #16
10068a0e:	4353      	muls	r3, r2
10068a10:	1989      	adds	r1, r1, r6
10068a12:	0c0e      	lsrs	r6, r1, #16
10068a14:	199b      	adds	r3, r3, r6
10068a16:	0c1e      	lsrs	r6, r3, #16
10068a18:	b289      	uxth	r1, r1
10068a1a:	041b      	lsls	r3, r3, #16
10068a1c:	185b      	adds	r3, r3, r1
10068a1e:	c708      	stmia	r7!, {r3}
10068a20:	4285      	cmp	r5, r0
10068a22:	dcef      	bgt.n	10068a04 <__multadd+0x10>
10068a24:	2e00      	cmp	r6, #0
10068a26:	d022      	beq.n	10068a6e <__multadd+0x7a>
10068a28:	68a3      	ldr	r3, [r4, #8]
10068a2a:	42ab      	cmp	r3, r5
10068a2c:	dc19      	bgt.n	10068a62 <__multadd+0x6e>
10068a2e:	6861      	ldr	r1, [r4, #4]
10068a30:	9801      	ldr	r0, [sp, #4]
10068a32:	3101      	adds	r1, #1
10068a34:	f7ff ff76 	bl	10068924 <_Balloc>
10068a38:	1e07      	subs	r7, r0, #0
10068a3a:	d105      	bne.n	10068a48 <__multadd+0x54>
10068a3c:	003a      	movs	r2, r7
10068a3e:	21ba      	movs	r1, #186	@ 0xba
10068a40:	4b0c      	ldr	r3, [pc, #48]	@ (10068a74 <__multadd+0x80>)
10068a42:	480d      	ldr	r0, [pc, #52]	@ (10068a78 <__multadd+0x84>)
10068a44:	f001 ff38 	bl	1006a8b8 <__assert_func>
10068a48:	0021      	movs	r1, r4
10068a4a:	6922      	ldr	r2, [r4, #16]
10068a4c:	310c      	adds	r1, #12
10068a4e:	3202      	adds	r2, #2
10068a50:	0092      	lsls	r2, r2, #2
10068a52:	300c      	adds	r0, #12
10068a54:	f7fe ffdd 	bl	10067a12 <memcpy>
10068a58:	0021      	movs	r1, r4
10068a5a:	9801      	ldr	r0, [sp, #4]
10068a5c:	f7ff ffa6 	bl	100689ac <_Bfree>
10068a60:	003c      	movs	r4, r7
10068a62:	1d2b      	adds	r3, r5, #4
10068a64:	009b      	lsls	r3, r3, #2
10068a66:	18e3      	adds	r3, r4, r3
10068a68:	3501      	adds	r5, #1
10068a6a:	605e      	str	r6, [r3, #4]
10068a6c:	6125      	str	r5, [r4, #16]
10068a6e:	0020      	movs	r0, r4
10068a70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10068a72:	46c0      	nop			@ (mov r8, r8)
10068a74:	1006d2ad 	.word	0x1006d2ad
10068a78:	1006d2be 	.word	0x1006d2be

10068a7c <__s2b>:
10068a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10068a7e:	0007      	movs	r7, r0
10068a80:	0018      	movs	r0, r3
10068a82:	000c      	movs	r4, r1
10068a84:	3008      	adds	r0, #8
10068a86:	2109      	movs	r1, #9
10068a88:	9301      	str	r3, [sp, #4]
10068a8a:	0015      	movs	r5, r2
10068a8c:	f7d7 fc76 	bl	1004037c <__divsi3>
10068a90:	2301      	movs	r3, #1
10068a92:	2100      	movs	r1, #0
10068a94:	4283      	cmp	r3, r0
10068a96:	db0a      	blt.n	10068aae <__s2b+0x32>
10068a98:	0038      	movs	r0, r7
10068a9a:	f7ff ff43 	bl	10068924 <_Balloc>
10068a9e:	1e01      	subs	r1, r0, #0
10068aa0:	d108      	bne.n	10068ab4 <__s2b+0x38>
10068aa2:	000a      	movs	r2, r1
10068aa4:	4b19      	ldr	r3, [pc, #100]	@ (10068b0c <__s2b+0x90>)
10068aa6:	481a      	ldr	r0, [pc, #104]	@ (10068b10 <__s2b+0x94>)
10068aa8:	31d3      	adds	r1, #211	@ 0xd3
10068aaa:	f001 ff05 	bl	1006a8b8 <__assert_func>
10068aae:	005b      	lsls	r3, r3, #1
10068ab0:	3101      	adds	r1, #1
10068ab2:	e7ef      	b.n	10068a94 <__s2b+0x18>
10068ab4:	9b08      	ldr	r3, [sp, #32]
10068ab6:	6143      	str	r3, [r0, #20]
10068ab8:	2301      	movs	r3, #1
10068aba:	6103      	str	r3, [r0, #16]
10068abc:	2d09      	cmp	r5, #9
10068abe:	dd18      	ble.n	10068af2 <__s2b+0x76>
10068ac0:	0023      	movs	r3, r4
10068ac2:	3309      	adds	r3, #9
10068ac4:	001e      	movs	r6, r3
10068ac6:	9300      	str	r3, [sp, #0]
10068ac8:	1964      	adds	r4, r4, r5
10068aca:	7833      	ldrb	r3, [r6, #0]
10068acc:	220a      	movs	r2, #10
10068ace:	0038      	movs	r0, r7
10068ad0:	3b30      	subs	r3, #48	@ 0x30
10068ad2:	f7ff ff8f 	bl	100689f4 <__multadd>
10068ad6:	3601      	adds	r6, #1
10068ad8:	0001      	movs	r1, r0
10068ada:	42a6      	cmp	r6, r4
10068adc:	d1f5      	bne.n	10068aca <__s2b+0x4e>
10068ade:	002c      	movs	r4, r5
10068ae0:	9b00      	ldr	r3, [sp, #0]
10068ae2:	3c08      	subs	r4, #8
10068ae4:	191c      	adds	r4, r3, r4
10068ae6:	002e      	movs	r6, r5
10068ae8:	9b01      	ldr	r3, [sp, #4]
10068aea:	429e      	cmp	r6, r3
10068aec:	db04      	blt.n	10068af8 <__s2b+0x7c>
10068aee:	0008      	movs	r0, r1
10068af0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10068af2:	2509      	movs	r5, #9
10068af4:	340a      	adds	r4, #10
10068af6:	e7f6      	b.n	10068ae6 <__s2b+0x6a>
10068af8:	1b63      	subs	r3, r4, r5
10068afa:	5d9b      	ldrb	r3, [r3, r6]
10068afc:	220a      	movs	r2, #10
10068afe:	0038      	movs	r0, r7
10068b00:	3b30      	subs	r3, #48	@ 0x30
10068b02:	f7ff ff77 	bl	100689f4 <__multadd>
10068b06:	3601      	adds	r6, #1
10068b08:	0001      	movs	r1, r0
10068b0a:	e7ed      	b.n	10068ae8 <__s2b+0x6c>
10068b0c:	1006d2ad 	.word	0x1006d2ad
10068b10:	1006d2be 	.word	0x1006d2be

10068b14 <__hi0bits>:
10068b14:	2280      	movs	r2, #128	@ 0x80
10068b16:	0003      	movs	r3, r0
10068b18:	0252      	lsls	r2, r2, #9
10068b1a:	2000      	movs	r0, #0
10068b1c:	4293      	cmp	r3, r2
10068b1e:	d201      	bcs.n	10068b24 <__hi0bits+0x10>
10068b20:	041b      	lsls	r3, r3, #16
10068b22:	3010      	adds	r0, #16
10068b24:	2280      	movs	r2, #128	@ 0x80
10068b26:	0452      	lsls	r2, r2, #17
10068b28:	4293      	cmp	r3, r2
10068b2a:	d201      	bcs.n	10068b30 <__hi0bits+0x1c>
10068b2c:	3008      	adds	r0, #8
10068b2e:	021b      	lsls	r3, r3, #8
10068b30:	2280      	movs	r2, #128	@ 0x80
10068b32:	0552      	lsls	r2, r2, #21
10068b34:	4293      	cmp	r3, r2
10068b36:	d201      	bcs.n	10068b3c <__hi0bits+0x28>
10068b38:	3004      	adds	r0, #4
10068b3a:	011b      	lsls	r3, r3, #4
10068b3c:	2280      	movs	r2, #128	@ 0x80
10068b3e:	05d2      	lsls	r2, r2, #23
10068b40:	4293      	cmp	r3, r2
10068b42:	d201      	bcs.n	10068b48 <__hi0bits+0x34>
10068b44:	3002      	adds	r0, #2
10068b46:	009b      	lsls	r3, r3, #2
10068b48:	2b00      	cmp	r3, #0
10068b4a:	db03      	blt.n	10068b54 <__hi0bits+0x40>
10068b4c:	3001      	adds	r0, #1
10068b4e:	4213      	tst	r3, r2
10068b50:	d100      	bne.n	10068b54 <__hi0bits+0x40>
10068b52:	2020      	movs	r0, #32
10068b54:	4770      	bx	lr

10068b56 <__lo0bits>:
10068b56:	6803      	ldr	r3, [r0, #0]
10068b58:	0001      	movs	r1, r0
10068b5a:	2207      	movs	r2, #7
10068b5c:	0018      	movs	r0, r3
10068b5e:	4010      	ands	r0, r2
10068b60:	4213      	tst	r3, r2
10068b62:	d00d      	beq.n	10068b80 <__lo0bits+0x2a>
10068b64:	3a06      	subs	r2, #6
10068b66:	2000      	movs	r0, #0
10068b68:	4213      	tst	r3, r2
10068b6a:	d105      	bne.n	10068b78 <__lo0bits+0x22>
10068b6c:	3002      	adds	r0, #2
10068b6e:	4203      	tst	r3, r0
10068b70:	d003      	beq.n	10068b7a <__lo0bits+0x24>
10068b72:	40d3      	lsrs	r3, r2
10068b74:	0010      	movs	r0, r2
10068b76:	600b      	str	r3, [r1, #0]
10068b78:	4770      	bx	lr
10068b7a:	089b      	lsrs	r3, r3, #2
10068b7c:	600b      	str	r3, [r1, #0]
10068b7e:	e7fb      	b.n	10068b78 <__lo0bits+0x22>
10068b80:	b29a      	uxth	r2, r3
10068b82:	2a00      	cmp	r2, #0
10068b84:	d101      	bne.n	10068b8a <__lo0bits+0x34>
10068b86:	2010      	movs	r0, #16
10068b88:	0c1b      	lsrs	r3, r3, #16
10068b8a:	b2da      	uxtb	r2, r3
10068b8c:	2a00      	cmp	r2, #0
10068b8e:	d101      	bne.n	10068b94 <__lo0bits+0x3e>
10068b90:	3008      	adds	r0, #8
10068b92:	0a1b      	lsrs	r3, r3, #8
10068b94:	071a      	lsls	r2, r3, #28
10068b96:	d101      	bne.n	10068b9c <__lo0bits+0x46>
10068b98:	3004      	adds	r0, #4
10068b9a:	091b      	lsrs	r3, r3, #4
10068b9c:	079a      	lsls	r2, r3, #30
10068b9e:	d101      	bne.n	10068ba4 <__lo0bits+0x4e>
10068ba0:	3002      	adds	r0, #2
10068ba2:	089b      	lsrs	r3, r3, #2
10068ba4:	07da      	lsls	r2, r3, #31
10068ba6:	d4e9      	bmi.n	10068b7c <__lo0bits+0x26>
10068ba8:	3001      	adds	r0, #1
10068baa:	085b      	lsrs	r3, r3, #1
10068bac:	d1e6      	bne.n	10068b7c <__lo0bits+0x26>
10068bae:	2020      	movs	r0, #32
10068bb0:	e7e2      	b.n	10068b78 <__lo0bits+0x22>
	...

10068bb4 <__i2b>:
10068bb4:	b510      	push	{r4, lr}
10068bb6:	000c      	movs	r4, r1
10068bb8:	2101      	movs	r1, #1
10068bba:	f7ff feb3 	bl	10068924 <_Balloc>
10068bbe:	2800      	cmp	r0, #0
10068bc0:	d107      	bne.n	10068bd2 <__i2b+0x1e>
10068bc2:	2146      	movs	r1, #70	@ 0x46
10068bc4:	4c05      	ldr	r4, [pc, #20]	@ (10068bdc <__i2b+0x28>)
10068bc6:	0002      	movs	r2, r0
10068bc8:	4b05      	ldr	r3, [pc, #20]	@ (10068be0 <__i2b+0x2c>)
10068bca:	0020      	movs	r0, r4
10068bcc:	31ff      	adds	r1, #255	@ 0xff
10068bce:	f001 fe73 	bl	1006a8b8 <__assert_func>
10068bd2:	2301      	movs	r3, #1
10068bd4:	6144      	str	r4, [r0, #20]
10068bd6:	6103      	str	r3, [r0, #16]
10068bd8:	bd10      	pop	{r4, pc}
10068bda:	46c0      	nop			@ (mov r8, r8)
10068bdc:	1006d2be 	.word	0x1006d2be
10068be0:	1006d2ad 	.word	0x1006d2ad

10068be4 <__multiply>:
10068be4:	b5f0      	push	{r4, r5, r6, r7, lr}
10068be6:	0014      	movs	r4, r2
10068be8:	690a      	ldr	r2, [r1, #16]
10068bea:	6923      	ldr	r3, [r4, #16]
10068bec:	000d      	movs	r5, r1
10068bee:	b089      	sub	sp, #36	@ 0x24
10068bf0:	429a      	cmp	r2, r3
10068bf2:	db02      	blt.n	10068bfa <__multiply+0x16>
10068bf4:	0023      	movs	r3, r4
10068bf6:	000c      	movs	r4, r1
10068bf8:	001d      	movs	r5, r3
10068bfa:	6927      	ldr	r7, [r4, #16]
10068bfc:	692e      	ldr	r6, [r5, #16]
10068bfe:	6861      	ldr	r1, [r4, #4]
10068c00:	19bb      	adds	r3, r7, r6
10068c02:	9300      	str	r3, [sp, #0]
10068c04:	68a3      	ldr	r3, [r4, #8]
10068c06:	19ba      	adds	r2, r7, r6
10068c08:	4293      	cmp	r3, r2
10068c0a:	da00      	bge.n	10068c0e <__multiply+0x2a>
10068c0c:	3101      	adds	r1, #1
10068c0e:	f7ff fe89 	bl	10068924 <_Balloc>
10068c12:	4684      	mov	ip, r0
10068c14:	2800      	cmp	r0, #0
10068c16:	d106      	bne.n	10068c26 <__multiply+0x42>
10068c18:	21b1      	movs	r1, #177	@ 0xb1
10068c1a:	4662      	mov	r2, ip
10068c1c:	4b44      	ldr	r3, [pc, #272]	@ (10068d30 <__multiply+0x14c>)
10068c1e:	4845      	ldr	r0, [pc, #276]	@ (10068d34 <__multiply+0x150>)
10068c20:	0049      	lsls	r1, r1, #1
10068c22:	f001 fe49 	bl	1006a8b8 <__assert_func>
10068c26:	0002      	movs	r2, r0
10068c28:	19bb      	adds	r3, r7, r6
10068c2a:	3214      	adds	r2, #20
10068c2c:	009b      	lsls	r3, r3, #2
10068c2e:	18d3      	adds	r3, r2, r3
10068c30:	9301      	str	r3, [sp, #4]
10068c32:	2100      	movs	r1, #0
10068c34:	0013      	movs	r3, r2
10068c36:	9801      	ldr	r0, [sp, #4]
10068c38:	4283      	cmp	r3, r0
10068c3a:	d328      	bcc.n	10068c8e <__multiply+0xaa>
10068c3c:	0023      	movs	r3, r4
10068c3e:	00bf      	lsls	r7, r7, #2
10068c40:	3314      	adds	r3, #20
10068c42:	9304      	str	r3, [sp, #16]
10068c44:	3514      	adds	r5, #20
10068c46:	19db      	adds	r3, r3, r7
10068c48:	00b6      	lsls	r6, r6, #2
10068c4a:	9302      	str	r3, [sp, #8]
10068c4c:	19ab      	adds	r3, r5, r6
10068c4e:	9307      	str	r3, [sp, #28]
10068c50:	2304      	movs	r3, #4
10068c52:	9305      	str	r3, [sp, #20]
10068c54:	0023      	movs	r3, r4
10068c56:	9902      	ldr	r1, [sp, #8]
10068c58:	3315      	adds	r3, #21
10068c5a:	4299      	cmp	r1, r3
10068c5c:	d305      	bcc.n	10068c6a <__multiply+0x86>
10068c5e:	1b0c      	subs	r4, r1, r4
10068c60:	3c15      	subs	r4, #21
10068c62:	08a4      	lsrs	r4, r4, #2
10068c64:	3401      	adds	r4, #1
10068c66:	00a3      	lsls	r3, r4, #2
10068c68:	9305      	str	r3, [sp, #20]
10068c6a:	9b07      	ldr	r3, [sp, #28]
10068c6c:	429d      	cmp	r5, r3
10068c6e:	d310      	bcc.n	10068c92 <__multiply+0xae>
10068c70:	9b00      	ldr	r3, [sp, #0]
10068c72:	2b00      	cmp	r3, #0
10068c74:	dd05      	ble.n	10068c82 <__multiply+0x9e>
10068c76:	9b01      	ldr	r3, [sp, #4]
10068c78:	3b04      	subs	r3, #4
10068c7a:	9301      	str	r3, [sp, #4]
10068c7c:	681b      	ldr	r3, [r3, #0]
10068c7e:	2b00      	cmp	r3, #0
10068c80:	d052      	beq.n	10068d28 <__multiply+0x144>
10068c82:	4663      	mov	r3, ip
10068c84:	4660      	mov	r0, ip
10068c86:	9a00      	ldr	r2, [sp, #0]
10068c88:	611a      	str	r2, [r3, #16]
10068c8a:	b009      	add	sp, #36	@ 0x24
10068c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068c8e:	c302      	stmia	r3!, {r1}
10068c90:	e7d1      	b.n	10068c36 <__multiply+0x52>
10068c92:	682c      	ldr	r4, [r5, #0]
10068c94:	b2a4      	uxth	r4, r4
10068c96:	2c00      	cmp	r4, #0
10068c98:	d01f      	beq.n	10068cda <__multiply+0xf6>
10068c9a:	2300      	movs	r3, #0
10068c9c:	0017      	movs	r7, r2
10068c9e:	9e04      	ldr	r6, [sp, #16]
10068ca0:	9303      	str	r3, [sp, #12]
10068ca2:	ce08      	ldmia	r6!, {r3}
10068ca4:	6839      	ldr	r1, [r7, #0]
10068ca6:	9306      	str	r3, [sp, #24]
10068ca8:	466b      	mov	r3, sp
10068caa:	8b1b      	ldrh	r3, [r3, #24]
10068cac:	b288      	uxth	r0, r1
10068cae:	4363      	muls	r3, r4
10068cb0:	181b      	adds	r3, r3, r0
10068cb2:	9803      	ldr	r0, [sp, #12]
10068cb4:	0c09      	lsrs	r1, r1, #16
10068cb6:	181b      	adds	r3, r3, r0
10068cb8:	9806      	ldr	r0, [sp, #24]
10068cba:	0c00      	lsrs	r0, r0, #16
10068cbc:	4360      	muls	r0, r4
10068cbe:	1840      	adds	r0, r0, r1
10068cc0:	0c19      	lsrs	r1, r3, #16
10068cc2:	1841      	adds	r1, r0, r1
10068cc4:	0c08      	lsrs	r0, r1, #16
10068cc6:	b29b      	uxth	r3, r3
10068cc8:	0409      	lsls	r1, r1, #16
10068cca:	4319      	orrs	r1, r3
10068ccc:	9b02      	ldr	r3, [sp, #8]
10068cce:	9003      	str	r0, [sp, #12]
10068cd0:	c702      	stmia	r7!, {r1}
10068cd2:	42b3      	cmp	r3, r6
10068cd4:	d8e5      	bhi.n	10068ca2 <__multiply+0xbe>
10068cd6:	9b05      	ldr	r3, [sp, #20]
10068cd8:	50d0      	str	r0, [r2, r3]
10068cda:	682c      	ldr	r4, [r5, #0]
10068cdc:	0c24      	lsrs	r4, r4, #16
10068cde:	d020      	beq.n	10068d22 <__multiply+0x13e>
10068ce0:	2100      	movs	r1, #0
10068ce2:	0010      	movs	r0, r2
10068ce4:	6813      	ldr	r3, [r2, #0]
10068ce6:	9e04      	ldr	r6, [sp, #16]
10068ce8:	9103      	str	r1, [sp, #12]
10068cea:	6831      	ldr	r1, [r6, #0]
10068cec:	6807      	ldr	r7, [r0, #0]
10068cee:	b289      	uxth	r1, r1
10068cf0:	4361      	muls	r1, r4
10068cf2:	0c3f      	lsrs	r7, r7, #16
10068cf4:	19c9      	adds	r1, r1, r7
10068cf6:	9f03      	ldr	r7, [sp, #12]
10068cf8:	b29b      	uxth	r3, r3
10068cfa:	19c9      	adds	r1, r1, r7
10068cfc:	040f      	lsls	r7, r1, #16
10068cfe:	431f      	orrs	r7, r3
10068d00:	6007      	str	r7, [r0, #0]
10068d02:	ce80      	ldmia	r6!, {r7}
10068d04:	6843      	ldr	r3, [r0, #4]
10068d06:	0c3f      	lsrs	r7, r7, #16
10068d08:	4367      	muls	r7, r4
10068d0a:	b29b      	uxth	r3, r3
10068d0c:	0c09      	lsrs	r1, r1, #16
10068d0e:	18fb      	adds	r3, r7, r3
10068d10:	185b      	adds	r3, r3, r1
10068d12:	0c19      	lsrs	r1, r3, #16
10068d14:	9103      	str	r1, [sp, #12]
10068d16:	9902      	ldr	r1, [sp, #8]
10068d18:	3004      	adds	r0, #4
10068d1a:	42b1      	cmp	r1, r6
10068d1c:	d8e5      	bhi.n	10068cea <__multiply+0x106>
10068d1e:	9905      	ldr	r1, [sp, #20]
10068d20:	5053      	str	r3, [r2, r1]
10068d22:	3504      	adds	r5, #4
10068d24:	3204      	adds	r2, #4
10068d26:	e7a0      	b.n	10068c6a <__multiply+0x86>
10068d28:	9b00      	ldr	r3, [sp, #0]
10068d2a:	3b01      	subs	r3, #1
10068d2c:	9300      	str	r3, [sp, #0]
10068d2e:	e79f      	b.n	10068c70 <__multiply+0x8c>
10068d30:	1006d2ad 	.word	0x1006d2ad
10068d34:	1006d2be 	.word	0x1006d2be

10068d38 <__pow5mult>:
10068d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10068d3a:	2303      	movs	r3, #3
10068d3c:	0015      	movs	r5, r2
10068d3e:	0007      	movs	r7, r0
10068d40:	000e      	movs	r6, r1
10068d42:	401a      	ands	r2, r3
10068d44:	421d      	tst	r5, r3
10068d46:	d008      	beq.n	10068d5a <__pow5mult+0x22>
10068d48:	4925      	ldr	r1, [pc, #148]	@ (10068de0 <__pow5mult+0xa8>)
10068d4a:	3a01      	subs	r2, #1
10068d4c:	0092      	lsls	r2, r2, #2
10068d4e:	5852      	ldr	r2, [r2, r1]
10068d50:	2300      	movs	r3, #0
10068d52:	0031      	movs	r1, r6
10068d54:	f7ff fe4e 	bl	100689f4 <__multadd>
10068d58:	0006      	movs	r6, r0
10068d5a:	10ad      	asrs	r5, r5, #2
10068d5c:	d03d      	beq.n	10068dda <__pow5mult+0xa2>
10068d5e:	69fc      	ldr	r4, [r7, #28]
10068d60:	2c00      	cmp	r4, #0
10068d62:	d10f      	bne.n	10068d84 <__pow5mult+0x4c>
10068d64:	2010      	movs	r0, #16
10068d66:	f7ff fd21 	bl	100687ac <malloc>
10068d6a:	1e02      	subs	r2, r0, #0
10068d6c:	61f8      	str	r0, [r7, #28]
10068d6e:	d105      	bne.n	10068d7c <__pow5mult+0x44>
10068d70:	21b4      	movs	r1, #180	@ 0xb4
10068d72:	4b1c      	ldr	r3, [pc, #112]	@ (10068de4 <__pow5mult+0xac>)
10068d74:	481c      	ldr	r0, [pc, #112]	@ (10068de8 <__pow5mult+0xb0>)
10068d76:	31ff      	adds	r1, #255	@ 0xff
10068d78:	f001 fd9e 	bl	1006a8b8 <__assert_func>
10068d7c:	6044      	str	r4, [r0, #4]
10068d7e:	6084      	str	r4, [r0, #8]
10068d80:	6004      	str	r4, [r0, #0]
10068d82:	60c4      	str	r4, [r0, #12]
10068d84:	69fb      	ldr	r3, [r7, #28]
10068d86:	689c      	ldr	r4, [r3, #8]
10068d88:	9301      	str	r3, [sp, #4]
10068d8a:	2c00      	cmp	r4, #0
10068d8c:	d108      	bne.n	10068da0 <__pow5mult+0x68>
10068d8e:	0038      	movs	r0, r7
10068d90:	4916      	ldr	r1, [pc, #88]	@ (10068dec <__pow5mult+0xb4>)
10068d92:	f7ff ff0f 	bl	10068bb4 <__i2b>
10068d96:	9b01      	ldr	r3, [sp, #4]
10068d98:	0004      	movs	r4, r0
10068d9a:	6098      	str	r0, [r3, #8]
10068d9c:	2300      	movs	r3, #0
10068d9e:	6003      	str	r3, [r0, #0]
10068da0:	2301      	movs	r3, #1
10068da2:	421d      	tst	r5, r3
10068da4:	d00a      	beq.n	10068dbc <__pow5mult+0x84>
10068da6:	0031      	movs	r1, r6
10068da8:	0022      	movs	r2, r4
10068daa:	0038      	movs	r0, r7
10068dac:	f7ff ff1a 	bl	10068be4 <__multiply>
10068db0:	0031      	movs	r1, r6
10068db2:	9001      	str	r0, [sp, #4]
10068db4:	0038      	movs	r0, r7
10068db6:	f7ff fdf9 	bl	100689ac <_Bfree>
10068dba:	9e01      	ldr	r6, [sp, #4]
10068dbc:	106d      	asrs	r5, r5, #1
10068dbe:	d00c      	beq.n	10068dda <__pow5mult+0xa2>
10068dc0:	6820      	ldr	r0, [r4, #0]
10068dc2:	2800      	cmp	r0, #0
10068dc4:	d107      	bne.n	10068dd6 <__pow5mult+0x9e>
10068dc6:	0022      	movs	r2, r4
10068dc8:	0021      	movs	r1, r4
10068dca:	0038      	movs	r0, r7
10068dcc:	f7ff ff0a 	bl	10068be4 <__multiply>
10068dd0:	2300      	movs	r3, #0
10068dd2:	6020      	str	r0, [r4, #0]
10068dd4:	6003      	str	r3, [r0, #0]
10068dd6:	0004      	movs	r4, r0
10068dd8:	e7e2      	b.n	10068da0 <__pow5mult+0x68>
10068dda:	0030      	movs	r0, r6
10068ddc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10068dde:	46c0      	nop			@ (mov r8, r8)
10068de0:	1006d3d0 	.word	0x1006d3d0
10068de4:	1006d23e 	.word	0x1006d23e
10068de8:	1006d2be 	.word	0x1006d2be
10068dec:	00000271 	.word	0x00000271

10068df0 <__lshift>:
10068df0:	b5f0      	push	{r4, r5, r6, r7, lr}
10068df2:	000c      	movs	r4, r1
10068df4:	0016      	movs	r6, r2
10068df6:	6923      	ldr	r3, [r4, #16]
10068df8:	1157      	asrs	r7, r2, #5
10068dfa:	b085      	sub	sp, #20
10068dfc:	18fb      	adds	r3, r7, r3
10068dfe:	9301      	str	r3, [sp, #4]
10068e00:	3301      	adds	r3, #1
10068e02:	9300      	str	r3, [sp, #0]
10068e04:	6849      	ldr	r1, [r1, #4]
10068e06:	68a3      	ldr	r3, [r4, #8]
10068e08:	9002      	str	r0, [sp, #8]
10068e0a:	9a00      	ldr	r2, [sp, #0]
10068e0c:	4293      	cmp	r3, r2
10068e0e:	db10      	blt.n	10068e32 <__lshift+0x42>
10068e10:	9802      	ldr	r0, [sp, #8]
10068e12:	f7ff fd87 	bl	10068924 <_Balloc>
10068e16:	2300      	movs	r3, #0
10068e18:	0001      	movs	r1, r0
10068e1a:	0005      	movs	r5, r0
10068e1c:	001a      	movs	r2, r3
10068e1e:	3114      	adds	r1, #20
10068e20:	4298      	cmp	r0, r3
10068e22:	d10c      	bne.n	10068e3e <__lshift+0x4e>
10068e24:	21ef      	movs	r1, #239	@ 0xef
10068e26:	002a      	movs	r2, r5
10068e28:	4b25      	ldr	r3, [pc, #148]	@ (10068ec0 <__lshift+0xd0>)
10068e2a:	4826      	ldr	r0, [pc, #152]	@ (10068ec4 <__lshift+0xd4>)
10068e2c:	0049      	lsls	r1, r1, #1
10068e2e:	f001 fd43 	bl	1006a8b8 <__assert_func>
10068e32:	3101      	adds	r1, #1
10068e34:	005b      	lsls	r3, r3, #1
10068e36:	e7e8      	b.n	10068e0a <__lshift+0x1a>
10068e38:	0098      	lsls	r0, r3, #2
10068e3a:	500a      	str	r2, [r1, r0]
10068e3c:	3301      	adds	r3, #1
10068e3e:	42bb      	cmp	r3, r7
10068e40:	dbfa      	blt.n	10068e38 <__lshift+0x48>
10068e42:	43fb      	mvns	r3, r7
10068e44:	17db      	asrs	r3, r3, #31
10068e46:	401f      	ands	r7, r3
10068e48:	00bf      	lsls	r7, r7, #2
10068e4a:	0023      	movs	r3, r4
10068e4c:	201f      	movs	r0, #31
10068e4e:	19c9      	adds	r1, r1, r7
10068e50:	0037      	movs	r7, r6
10068e52:	6922      	ldr	r2, [r4, #16]
10068e54:	3314      	adds	r3, #20
10068e56:	0092      	lsls	r2, r2, #2
10068e58:	189a      	adds	r2, r3, r2
10068e5a:	4007      	ands	r7, r0
10068e5c:	4206      	tst	r6, r0
10068e5e:	d029      	beq.n	10068eb4 <__lshift+0xc4>
10068e60:	3001      	adds	r0, #1
10068e62:	1bc0      	subs	r0, r0, r7
10068e64:	9003      	str	r0, [sp, #12]
10068e66:	468c      	mov	ip, r1
10068e68:	2000      	movs	r0, #0
10068e6a:	681e      	ldr	r6, [r3, #0]
10068e6c:	40be      	lsls	r6, r7
10068e6e:	4306      	orrs	r6, r0
10068e70:	4660      	mov	r0, ip
10068e72:	c040      	stmia	r0!, {r6}
10068e74:	4684      	mov	ip, r0
10068e76:	9e03      	ldr	r6, [sp, #12]
10068e78:	cb01      	ldmia	r3!, {r0}
10068e7a:	40f0      	lsrs	r0, r6
10068e7c:	429a      	cmp	r2, r3
10068e7e:	d8f4      	bhi.n	10068e6a <__lshift+0x7a>
10068e80:	0026      	movs	r6, r4
10068e82:	3615      	adds	r6, #21
10068e84:	2304      	movs	r3, #4
10068e86:	42b2      	cmp	r2, r6
10068e88:	d304      	bcc.n	10068e94 <__lshift+0xa4>
10068e8a:	1b13      	subs	r3, r2, r4
10068e8c:	3b15      	subs	r3, #21
10068e8e:	089b      	lsrs	r3, r3, #2
10068e90:	3301      	adds	r3, #1
10068e92:	009b      	lsls	r3, r3, #2
10068e94:	50c8      	str	r0, [r1, r3]
10068e96:	2800      	cmp	r0, #0
10068e98:	d002      	beq.n	10068ea0 <__lshift+0xb0>
10068e9a:	9b01      	ldr	r3, [sp, #4]
10068e9c:	3302      	adds	r3, #2
10068e9e:	9300      	str	r3, [sp, #0]
10068ea0:	9b00      	ldr	r3, [sp, #0]
10068ea2:	9802      	ldr	r0, [sp, #8]
10068ea4:	3b01      	subs	r3, #1
10068ea6:	0021      	movs	r1, r4
10068ea8:	612b      	str	r3, [r5, #16]
10068eaa:	f7ff fd7f 	bl	100689ac <_Bfree>
10068eae:	0028      	movs	r0, r5
10068eb0:	b005      	add	sp, #20
10068eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068eb4:	cb01      	ldmia	r3!, {r0}
10068eb6:	c101      	stmia	r1!, {r0}
10068eb8:	429a      	cmp	r2, r3
10068eba:	d8fb      	bhi.n	10068eb4 <__lshift+0xc4>
10068ebc:	e7f0      	b.n	10068ea0 <__lshift+0xb0>
10068ebe:	46c0      	nop			@ (mov r8, r8)
10068ec0:	1006d2ad 	.word	0x1006d2ad
10068ec4:	1006d2be 	.word	0x1006d2be

10068ec8 <__mcmp>:
10068ec8:	b530      	push	{r4, r5, lr}
10068eca:	690b      	ldr	r3, [r1, #16]
10068ecc:	6904      	ldr	r4, [r0, #16]
10068ece:	0002      	movs	r2, r0
10068ed0:	1ae0      	subs	r0, r4, r3
10068ed2:	429c      	cmp	r4, r3
10068ed4:	d10f      	bne.n	10068ef6 <__mcmp+0x2e>
10068ed6:	3214      	adds	r2, #20
10068ed8:	009b      	lsls	r3, r3, #2
10068eda:	3114      	adds	r1, #20
10068edc:	0014      	movs	r4, r2
10068ede:	18c9      	adds	r1, r1, r3
10068ee0:	18d2      	adds	r2, r2, r3
10068ee2:	3a04      	subs	r2, #4
10068ee4:	3904      	subs	r1, #4
10068ee6:	6815      	ldr	r5, [r2, #0]
10068ee8:	680b      	ldr	r3, [r1, #0]
10068eea:	429d      	cmp	r5, r3
10068eec:	d004      	beq.n	10068ef8 <__mcmp+0x30>
10068eee:	2001      	movs	r0, #1
10068ef0:	429d      	cmp	r5, r3
10068ef2:	d200      	bcs.n	10068ef6 <__mcmp+0x2e>
10068ef4:	3802      	subs	r0, #2
10068ef6:	bd30      	pop	{r4, r5, pc}
10068ef8:	4294      	cmp	r4, r2
10068efa:	d3f2      	bcc.n	10068ee2 <__mcmp+0x1a>
10068efc:	e7fb      	b.n	10068ef6 <__mcmp+0x2e>
	...

10068f00 <__mdiff>:
10068f00:	b5f0      	push	{r4, r5, r6, r7, lr}
10068f02:	000c      	movs	r4, r1
10068f04:	b087      	sub	sp, #28
10068f06:	9000      	str	r0, [sp, #0]
10068f08:	0011      	movs	r1, r2
10068f0a:	0020      	movs	r0, r4
10068f0c:	0017      	movs	r7, r2
10068f0e:	f7ff ffdb 	bl	10068ec8 <__mcmp>
10068f12:	1e05      	subs	r5, r0, #0
10068f14:	d110      	bne.n	10068f38 <__mdiff+0x38>
10068f16:	0001      	movs	r1, r0
10068f18:	9800      	ldr	r0, [sp, #0]
10068f1a:	f7ff fd03 	bl	10068924 <_Balloc>
10068f1e:	1e02      	subs	r2, r0, #0
10068f20:	d104      	bne.n	10068f2c <__mdiff+0x2c>
10068f22:	4b40      	ldr	r3, [pc, #256]	@ (10069024 <__mdiff+0x124>)
10068f24:	4840      	ldr	r0, [pc, #256]	@ (10069028 <__mdiff+0x128>)
10068f26:	4941      	ldr	r1, [pc, #260]	@ (1006902c <__mdiff+0x12c>)
10068f28:	f001 fcc6 	bl	1006a8b8 <__assert_func>
10068f2c:	2301      	movs	r3, #1
10068f2e:	6145      	str	r5, [r0, #20]
10068f30:	6103      	str	r3, [r0, #16]
10068f32:	0010      	movs	r0, r2
10068f34:	b007      	add	sp, #28
10068f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068f38:	2600      	movs	r6, #0
10068f3a:	42b0      	cmp	r0, r6
10068f3c:	da03      	bge.n	10068f46 <__mdiff+0x46>
10068f3e:	0023      	movs	r3, r4
10068f40:	003c      	movs	r4, r7
10068f42:	001f      	movs	r7, r3
10068f44:	3601      	adds	r6, #1
10068f46:	6861      	ldr	r1, [r4, #4]
10068f48:	9800      	ldr	r0, [sp, #0]
10068f4a:	f7ff fceb 	bl	10068924 <_Balloc>
10068f4e:	1e02      	subs	r2, r0, #0
10068f50:	d103      	bne.n	10068f5a <__mdiff+0x5a>
10068f52:	4b34      	ldr	r3, [pc, #208]	@ (10069024 <__mdiff+0x124>)
10068f54:	4834      	ldr	r0, [pc, #208]	@ (10069028 <__mdiff+0x128>)
10068f56:	4936      	ldr	r1, [pc, #216]	@ (10069030 <__mdiff+0x130>)
10068f58:	e7e6      	b.n	10068f28 <__mdiff+0x28>
10068f5a:	6923      	ldr	r3, [r4, #16]
10068f5c:	3414      	adds	r4, #20
10068f5e:	9300      	str	r3, [sp, #0]
10068f60:	009b      	lsls	r3, r3, #2
10068f62:	18e3      	adds	r3, r4, r3
10068f64:	0021      	movs	r1, r4
10068f66:	9401      	str	r4, [sp, #4]
10068f68:	003c      	movs	r4, r7
10068f6a:	9302      	str	r3, [sp, #8]
10068f6c:	693b      	ldr	r3, [r7, #16]
10068f6e:	3414      	adds	r4, #20
10068f70:	009b      	lsls	r3, r3, #2
10068f72:	18e3      	adds	r3, r4, r3
10068f74:	9303      	str	r3, [sp, #12]
10068f76:	0003      	movs	r3, r0
10068f78:	60c6      	str	r6, [r0, #12]
10068f7a:	468c      	mov	ip, r1
10068f7c:	2000      	movs	r0, #0
10068f7e:	3314      	adds	r3, #20
10068f80:	9304      	str	r3, [sp, #16]
10068f82:	9305      	str	r3, [sp, #20]
10068f84:	4663      	mov	r3, ip
10068f86:	cb20      	ldmia	r3!, {r5}
10068f88:	b2a9      	uxth	r1, r5
10068f8a:	000e      	movs	r6, r1
10068f8c:	469c      	mov	ip, r3
10068f8e:	cc08      	ldmia	r4!, {r3}
10068f90:	0c2d      	lsrs	r5, r5, #16
10068f92:	b299      	uxth	r1, r3
10068f94:	1a71      	subs	r1, r6, r1
10068f96:	1809      	adds	r1, r1, r0
10068f98:	0c1b      	lsrs	r3, r3, #16
10068f9a:	1408      	asrs	r0, r1, #16
10068f9c:	1aeb      	subs	r3, r5, r3
10068f9e:	181b      	adds	r3, r3, r0
10068fa0:	1418      	asrs	r0, r3, #16
10068fa2:	b289      	uxth	r1, r1
10068fa4:	041b      	lsls	r3, r3, #16
10068fa6:	4319      	orrs	r1, r3
10068fa8:	9b05      	ldr	r3, [sp, #20]
10068faa:	c302      	stmia	r3!, {r1}
10068fac:	9305      	str	r3, [sp, #20]
10068fae:	9b03      	ldr	r3, [sp, #12]
10068fb0:	42a3      	cmp	r3, r4
10068fb2:	d8e7      	bhi.n	10068f84 <__mdiff+0x84>
10068fb4:	0039      	movs	r1, r7
10068fb6:	9c03      	ldr	r4, [sp, #12]
10068fb8:	3115      	adds	r1, #21
10068fba:	2304      	movs	r3, #4
10068fbc:	428c      	cmp	r4, r1
10068fbe:	d304      	bcc.n	10068fca <__mdiff+0xca>
10068fc0:	1be3      	subs	r3, r4, r7
10068fc2:	3b15      	subs	r3, #21
10068fc4:	089b      	lsrs	r3, r3, #2
10068fc6:	3301      	adds	r3, #1
10068fc8:	009b      	lsls	r3, r3, #2
10068fca:	9901      	ldr	r1, [sp, #4]
10068fcc:	18cd      	adds	r5, r1, r3
10068fce:	9904      	ldr	r1, [sp, #16]
10068fd0:	002e      	movs	r6, r5
10068fd2:	18cb      	adds	r3, r1, r3
10068fd4:	001f      	movs	r7, r3
10068fd6:	9902      	ldr	r1, [sp, #8]
10068fd8:	428e      	cmp	r6, r1
10068fda:	d311      	bcc.n	10069000 <__mdiff+0x100>
10068fdc:	9c02      	ldr	r4, [sp, #8]
10068fde:	1ee9      	subs	r1, r5, #3
10068fe0:	2000      	movs	r0, #0
10068fe2:	428c      	cmp	r4, r1
10068fe4:	d304      	bcc.n	10068ff0 <__mdiff+0xf0>
10068fe6:	0021      	movs	r1, r4
10068fe8:	3103      	adds	r1, #3
10068fea:	1b49      	subs	r1, r1, r5
10068fec:	0889      	lsrs	r1, r1, #2
10068fee:	0088      	lsls	r0, r1, #2
10068ff0:	181b      	adds	r3, r3, r0
10068ff2:	3b04      	subs	r3, #4
10068ff4:	6819      	ldr	r1, [r3, #0]
10068ff6:	2900      	cmp	r1, #0
10068ff8:	d010      	beq.n	1006901c <__mdiff+0x11c>
10068ffa:	9b00      	ldr	r3, [sp, #0]
10068ffc:	6113      	str	r3, [r2, #16]
10068ffe:	e798      	b.n	10068f32 <__mdiff+0x32>
10069000:	4684      	mov	ip, r0
10069002:	ce02      	ldmia	r6!, {r1}
10069004:	b288      	uxth	r0, r1
10069006:	4460      	add	r0, ip
10069008:	1400      	asrs	r0, r0, #16
1006900a:	0c0c      	lsrs	r4, r1, #16
1006900c:	1904      	adds	r4, r0, r4
1006900e:	4461      	add	r1, ip
10069010:	1420      	asrs	r0, r4, #16
10069012:	b289      	uxth	r1, r1
10069014:	0424      	lsls	r4, r4, #16
10069016:	4321      	orrs	r1, r4
10069018:	c702      	stmia	r7!, {r1}
1006901a:	e7dc      	b.n	10068fd6 <__mdiff+0xd6>
1006901c:	9900      	ldr	r1, [sp, #0]
1006901e:	3901      	subs	r1, #1
10069020:	9100      	str	r1, [sp, #0]
10069022:	e7e6      	b.n	10068ff2 <__mdiff+0xf2>
10069024:	1006d2ad 	.word	0x1006d2ad
10069028:	1006d2be 	.word	0x1006d2be
1006902c:	00000237 	.word	0x00000237
10069030:	00000245 	.word	0x00000245

10069034 <__ulp>:
10069034:	b510      	push	{r4, lr}
10069036:	2400      	movs	r4, #0
10069038:	4b0c      	ldr	r3, [pc, #48]	@ (1006906c <__ulp+0x38>)
1006903a:	4a0d      	ldr	r2, [pc, #52]	@ (10069070 <__ulp+0x3c>)
1006903c:	400b      	ands	r3, r1
1006903e:	189b      	adds	r3, r3, r2
10069040:	42a3      	cmp	r3, r4
10069042:	dc06      	bgt.n	10069052 <__ulp+0x1e>
10069044:	425b      	negs	r3, r3
10069046:	151a      	asrs	r2, r3, #20
10069048:	2a13      	cmp	r2, #19
1006904a:	dc05      	bgt.n	10069058 <__ulp+0x24>
1006904c:	2380      	movs	r3, #128	@ 0x80
1006904e:	031b      	lsls	r3, r3, #12
10069050:	4113      	asrs	r3, r2
10069052:	0019      	movs	r1, r3
10069054:	0020      	movs	r0, r4
10069056:	bd10      	pop	{r4, pc}
10069058:	3a14      	subs	r2, #20
1006905a:	2401      	movs	r4, #1
1006905c:	2a1e      	cmp	r2, #30
1006905e:	dc02      	bgt.n	10069066 <__ulp+0x32>
10069060:	2480      	movs	r4, #128	@ 0x80
10069062:	0624      	lsls	r4, r4, #24
10069064:	40d4      	lsrs	r4, r2
10069066:	2300      	movs	r3, #0
10069068:	e7f3      	b.n	10069052 <__ulp+0x1e>
1006906a:	46c0      	nop			@ (mov r8, r8)
1006906c:	7ff00000 	.word	0x7ff00000
10069070:	fcc00000 	.word	0xfcc00000

10069074 <__b2d>:
10069074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10069076:	0006      	movs	r6, r0
10069078:	6903      	ldr	r3, [r0, #16]
1006907a:	3614      	adds	r6, #20
1006907c:	009b      	lsls	r3, r3, #2
1006907e:	18f3      	adds	r3, r6, r3
10069080:	1f1d      	subs	r5, r3, #4
10069082:	682c      	ldr	r4, [r5, #0]
10069084:	000f      	movs	r7, r1
10069086:	0020      	movs	r0, r4
10069088:	9301      	str	r3, [sp, #4]
1006908a:	f7ff fd43 	bl	10068b14 <__hi0bits>
1006908e:	2220      	movs	r2, #32
10069090:	1a12      	subs	r2, r2, r0
10069092:	603a      	str	r2, [r7, #0]
10069094:	0003      	movs	r3, r0
10069096:	4a1c      	ldr	r2, [pc, #112]	@ (10069108 <__b2d+0x94>)
10069098:	280a      	cmp	r0, #10
1006909a:	dc15      	bgt.n	100690c8 <__b2d+0x54>
1006909c:	210b      	movs	r1, #11
1006909e:	0027      	movs	r7, r4
100690a0:	1a09      	subs	r1, r1, r0
100690a2:	40cf      	lsrs	r7, r1
100690a4:	433a      	orrs	r2, r7
100690a6:	468c      	mov	ip, r1
100690a8:	0011      	movs	r1, r2
100690aa:	2200      	movs	r2, #0
100690ac:	42ae      	cmp	r6, r5
100690ae:	d202      	bcs.n	100690b6 <__b2d+0x42>
100690b0:	9a01      	ldr	r2, [sp, #4]
100690b2:	3a08      	subs	r2, #8
100690b4:	6812      	ldr	r2, [r2, #0]
100690b6:	3315      	adds	r3, #21
100690b8:	409c      	lsls	r4, r3
100690ba:	4663      	mov	r3, ip
100690bc:	0027      	movs	r7, r4
100690be:	40da      	lsrs	r2, r3
100690c0:	4317      	orrs	r7, r2
100690c2:	0038      	movs	r0, r7
100690c4:	b003      	add	sp, #12
100690c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100690c8:	2700      	movs	r7, #0
100690ca:	42ae      	cmp	r6, r5
100690cc:	d202      	bcs.n	100690d4 <__b2d+0x60>
100690ce:	9d01      	ldr	r5, [sp, #4]
100690d0:	3d08      	subs	r5, #8
100690d2:	682f      	ldr	r7, [r5, #0]
100690d4:	210b      	movs	r1, #11
100690d6:	4249      	negs	r1, r1
100690d8:	468c      	mov	ip, r1
100690da:	449c      	add	ip, r3
100690dc:	2b0b      	cmp	r3, #11
100690de:	d010      	beq.n	10069102 <__b2d+0x8e>
100690e0:	4661      	mov	r1, ip
100690e2:	2320      	movs	r3, #32
100690e4:	408c      	lsls	r4, r1
100690e6:	1a5b      	subs	r3, r3, r1
100690e8:	0039      	movs	r1, r7
100690ea:	40d9      	lsrs	r1, r3
100690ec:	430c      	orrs	r4, r1
100690ee:	4322      	orrs	r2, r4
100690f0:	0011      	movs	r1, r2
100690f2:	2200      	movs	r2, #0
100690f4:	42b5      	cmp	r5, r6
100690f6:	d901      	bls.n	100690fc <__b2d+0x88>
100690f8:	3d04      	subs	r5, #4
100690fa:	682a      	ldr	r2, [r5, #0]
100690fc:	4664      	mov	r4, ip
100690fe:	40a7      	lsls	r7, r4
10069100:	e7dd      	b.n	100690be <__b2d+0x4a>
10069102:	4322      	orrs	r2, r4
10069104:	0011      	movs	r1, r2
10069106:	e7dc      	b.n	100690c2 <__b2d+0x4e>
10069108:	3ff00000 	.word	0x3ff00000

1006910c <__d2b>:
1006910c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006910e:	2101      	movs	r1, #1
10069110:	0016      	movs	r6, r2
10069112:	001f      	movs	r7, r3
10069114:	f7ff fc06 	bl	10068924 <_Balloc>
10069118:	1e04      	subs	r4, r0, #0
1006911a:	d105      	bne.n	10069128 <__d2b+0x1c>
1006911c:	0022      	movs	r2, r4
1006911e:	4b25      	ldr	r3, [pc, #148]	@ (100691b4 <__d2b+0xa8>)
10069120:	4825      	ldr	r0, [pc, #148]	@ (100691b8 <__d2b+0xac>)
10069122:	4926      	ldr	r1, [pc, #152]	@ (100691bc <__d2b+0xb0>)
10069124:	f001 fbc8 	bl	1006a8b8 <__assert_func>
10069128:	033b      	lsls	r3, r7, #12
1006912a:	007d      	lsls	r5, r7, #1
1006912c:	0b1b      	lsrs	r3, r3, #12
1006912e:	0d6d      	lsrs	r5, r5, #21
10069130:	d002      	beq.n	10069138 <__d2b+0x2c>
10069132:	2280      	movs	r2, #128	@ 0x80
10069134:	0352      	lsls	r2, r2, #13
10069136:	4313      	orrs	r3, r2
10069138:	9301      	str	r3, [sp, #4]
1006913a:	2e00      	cmp	r6, #0
1006913c:	d025      	beq.n	1006918a <__d2b+0x7e>
1006913e:	4668      	mov	r0, sp
10069140:	9600      	str	r6, [sp, #0]
10069142:	f7ff fd08 	bl	10068b56 <__lo0bits>
10069146:	9b01      	ldr	r3, [sp, #4]
10069148:	9900      	ldr	r1, [sp, #0]
1006914a:	2800      	cmp	r0, #0
1006914c:	d01b      	beq.n	10069186 <__d2b+0x7a>
1006914e:	2220      	movs	r2, #32
10069150:	001e      	movs	r6, r3
10069152:	1a12      	subs	r2, r2, r0
10069154:	4096      	lsls	r6, r2
10069156:	0032      	movs	r2, r6
10069158:	40c3      	lsrs	r3, r0
1006915a:	430a      	orrs	r2, r1
1006915c:	6162      	str	r2, [r4, #20]
1006915e:	9301      	str	r3, [sp, #4]
10069160:	9e01      	ldr	r6, [sp, #4]
10069162:	61a6      	str	r6, [r4, #24]
10069164:	1e73      	subs	r3, r6, #1
10069166:	419e      	sbcs	r6, r3
10069168:	3601      	adds	r6, #1
1006916a:	6126      	str	r6, [r4, #16]
1006916c:	2d00      	cmp	r5, #0
1006916e:	d014      	beq.n	1006919a <__d2b+0x8e>
10069170:	2635      	movs	r6, #53	@ 0x35
10069172:	4b13      	ldr	r3, [pc, #76]	@ (100691c0 <__d2b+0xb4>)
10069174:	18ed      	adds	r5, r5, r3
10069176:	9b08      	ldr	r3, [sp, #32]
10069178:	182d      	adds	r5, r5, r0
1006917a:	601d      	str	r5, [r3, #0]
1006917c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1006917e:	1a36      	subs	r6, r6, r0
10069180:	601e      	str	r6, [r3, #0]
10069182:	0020      	movs	r0, r4
10069184:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10069186:	6161      	str	r1, [r4, #20]
10069188:	e7ea      	b.n	10069160 <__d2b+0x54>
1006918a:	a801      	add	r0, sp, #4
1006918c:	f7ff fce3 	bl	10068b56 <__lo0bits>
10069190:	9b01      	ldr	r3, [sp, #4]
10069192:	2601      	movs	r6, #1
10069194:	6163      	str	r3, [r4, #20]
10069196:	3020      	adds	r0, #32
10069198:	e7e7      	b.n	1006916a <__d2b+0x5e>
1006919a:	4b0a      	ldr	r3, [pc, #40]	@ (100691c4 <__d2b+0xb8>)
1006919c:	18c0      	adds	r0, r0, r3
1006919e:	9b08      	ldr	r3, [sp, #32]
100691a0:	6018      	str	r0, [r3, #0]
100691a2:	4b09      	ldr	r3, [pc, #36]	@ (100691c8 <__d2b+0xbc>)
100691a4:	18f3      	adds	r3, r6, r3
100691a6:	009b      	lsls	r3, r3, #2
100691a8:	18e3      	adds	r3, r4, r3
100691aa:	6958      	ldr	r0, [r3, #20]
100691ac:	f7ff fcb2 	bl	10068b14 <__hi0bits>
100691b0:	0176      	lsls	r6, r6, #5
100691b2:	e7e3      	b.n	1006917c <__d2b+0x70>
100691b4:	1006d2ad 	.word	0x1006d2ad
100691b8:	1006d2be 	.word	0x1006d2be
100691bc:	0000030f 	.word	0x0000030f
100691c0:	fffffbcd 	.word	0xfffffbcd
100691c4:	fffffbce 	.word	0xfffffbce
100691c8:	3fffffff 	.word	0x3fffffff

100691cc <__ratio>:
100691cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100691ce:	b087      	sub	sp, #28
100691d0:	000f      	movs	r7, r1
100691d2:	a904      	add	r1, sp, #16
100691d4:	0006      	movs	r6, r0
100691d6:	f7ff ff4d 	bl	10069074 <__b2d>
100691da:	9000      	str	r0, [sp, #0]
100691dc:	9101      	str	r1, [sp, #4]
100691de:	9b00      	ldr	r3, [sp, #0]
100691e0:	9c01      	ldr	r4, [sp, #4]
100691e2:	0038      	movs	r0, r7
100691e4:	a905      	add	r1, sp, #20
100691e6:	9302      	str	r3, [sp, #8]
100691e8:	9403      	str	r4, [sp, #12]
100691ea:	f7ff ff43 	bl	10069074 <__b2d>
100691ee:	000d      	movs	r5, r1
100691f0:	0002      	movs	r2, r0
100691f2:	000b      	movs	r3, r1
100691f4:	6930      	ldr	r0, [r6, #16]
100691f6:	6939      	ldr	r1, [r7, #16]
100691f8:	9e04      	ldr	r6, [sp, #16]
100691fa:	1a40      	subs	r0, r0, r1
100691fc:	9905      	ldr	r1, [sp, #20]
100691fe:	0140      	lsls	r0, r0, #5
10069200:	1a71      	subs	r1, r6, r1
10069202:	1841      	adds	r1, r0, r1
10069204:	0508      	lsls	r0, r1, #20
10069206:	2900      	cmp	r1, #0
10069208:	dd08      	ble.n	1006921c <__ratio+0x50>
1006920a:	9901      	ldr	r1, [sp, #4]
1006920c:	1841      	adds	r1, r0, r1
1006920e:	9103      	str	r1, [sp, #12]
10069210:	9802      	ldr	r0, [sp, #8]
10069212:	9903      	ldr	r1, [sp, #12]
10069214:	f7d7 ff54 	bl	100410c0 <__aeabi_ddiv>
10069218:	b007      	add	sp, #28
1006921a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006921c:	1a2b      	subs	r3, r5, r0
1006921e:	e7f7      	b.n	10069210 <__ratio+0x44>

10069220 <__copybits>:
10069220:	b570      	push	{r4, r5, r6, lr}
10069222:	0014      	movs	r4, r2
10069224:	0005      	movs	r5, r0
10069226:	3901      	subs	r1, #1
10069228:	6913      	ldr	r3, [r2, #16]
1006922a:	1149      	asrs	r1, r1, #5
1006922c:	3101      	adds	r1, #1
1006922e:	0089      	lsls	r1, r1, #2
10069230:	3414      	adds	r4, #20
10069232:	009b      	lsls	r3, r3, #2
10069234:	1841      	adds	r1, r0, r1
10069236:	18e3      	adds	r3, r4, r3
10069238:	42a3      	cmp	r3, r4
1006923a:	d80d      	bhi.n	10069258 <__copybits+0x38>
1006923c:	0014      	movs	r4, r2
1006923e:	3411      	adds	r4, #17
10069240:	2500      	movs	r5, #0
10069242:	42a3      	cmp	r3, r4
10069244:	d303      	bcc.n	1006924e <__copybits+0x2e>
10069246:	1a9b      	subs	r3, r3, r2
10069248:	3b11      	subs	r3, #17
1006924a:	089b      	lsrs	r3, r3, #2
1006924c:	009d      	lsls	r5, r3, #2
1006924e:	2300      	movs	r3, #0
10069250:	1940      	adds	r0, r0, r5
10069252:	4281      	cmp	r1, r0
10069254:	d803      	bhi.n	1006925e <__copybits+0x3e>
10069256:	bd70      	pop	{r4, r5, r6, pc}
10069258:	cc40      	ldmia	r4!, {r6}
1006925a:	c540      	stmia	r5!, {r6}
1006925c:	e7ec      	b.n	10069238 <__copybits+0x18>
1006925e:	c008      	stmia	r0!, {r3}
10069260:	e7f7      	b.n	10069252 <__copybits+0x32>

10069262 <__any_on>:
10069262:	0002      	movs	r2, r0
10069264:	6900      	ldr	r0, [r0, #16]
10069266:	b510      	push	{r4, lr}
10069268:	3214      	adds	r2, #20
1006926a:	114b      	asrs	r3, r1, #5
1006926c:	4298      	cmp	r0, r3
1006926e:	db13      	blt.n	10069298 <__any_on+0x36>
10069270:	dd0c      	ble.n	1006928c <__any_on+0x2a>
10069272:	241f      	movs	r4, #31
10069274:	0008      	movs	r0, r1
10069276:	4020      	ands	r0, r4
10069278:	4221      	tst	r1, r4
1006927a:	d007      	beq.n	1006928c <__any_on+0x2a>
1006927c:	0099      	lsls	r1, r3, #2
1006927e:	588c      	ldr	r4, [r1, r2]
10069280:	0021      	movs	r1, r4
10069282:	40c1      	lsrs	r1, r0
10069284:	4081      	lsls	r1, r0
10069286:	2001      	movs	r0, #1
10069288:	428c      	cmp	r4, r1
1006928a:	d104      	bne.n	10069296 <__any_on+0x34>
1006928c:	009b      	lsls	r3, r3, #2
1006928e:	18d3      	adds	r3, r2, r3
10069290:	4293      	cmp	r3, r2
10069292:	d803      	bhi.n	1006929c <__any_on+0x3a>
10069294:	2000      	movs	r0, #0
10069296:	bd10      	pop	{r4, pc}
10069298:	0003      	movs	r3, r0
1006929a:	e7f7      	b.n	1006928c <__any_on+0x2a>
1006929c:	3b04      	subs	r3, #4
1006929e:	6819      	ldr	r1, [r3, #0]
100692a0:	2900      	cmp	r1, #0
100692a2:	d0f5      	beq.n	10069290 <__any_on+0x2e>
100692a4:	2001      	movs	r0, #1
100692a6:	e7f6      	b.n	10069296 <__any_on+0x34>

100692a8 <sulp>:
100692a8:	b570      	push	{r4, r5, r6, lr}
100692aa:	0016      	movs	r6, r2
100692ac:	000d      	movs	r5, r1
100692ae:	f7ff fec1 	bl	10069034 <__ulp>
100692b2:	2e00      	cmp	r6, #0
100692b4:	d00d      	beq.n	100692d2 <sulp+0x2a>
100692b6:	236b      	movs	r3, #107	@ 0x6b
100692b8:	006a      	lsls	r2, r5, #1
100692ba:	0d52      	lsrs	r2, r2, #21
100692bc:	1a9b      	subs	r3, r3, r2
100692be:	2b00      	cmp	r3, #0
100692c0:	dd07      	ble.n	100692d2 <sulp+0x2a>
100692c2:	2400      	movs	r4, #0
100692c4:	4a03      	ldr	r2, [pc, #12]	@ (100692d4 <sulp+0x2c>)
100692c6:	051b      	lsls	r3, r3, #20
100692c8:	189d      	adds	r5, r3, r2
100692ca:	002b      	movs	r3, r5
100692cc:	0022      	movs	r2, r4
100692ce:	f7d8 fb31 	bl	10041934 <__aeabi_dmul>
100692d2:	bd70      	pop	{r4, r5, r6, pc}
100692d4:	3ff00000 	.word	0x3ff00000

100692d8 <_strtod_l>:
100692d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100692da:	b0a3      	sub	sp, #140	@ 0x8c
100692dc:	921b      	str	r2, [sp, #108]	@ 0x6c
100692de:	2200      	movs	r2, #0
100692e0:	2600      	movs	r6, #0
100692e2:	2700      	movs	r7, #0
100692e4:	9005      	str	r0, [sp, #20]
100692e6:	9109      	str	r1, [sp, #36]	@ 0x24
100692e8:	921e      	str	r2, [sp, #120]	@ 0x78
100692ea:	911d      	str	r1, [sp, #116]	@ 0x74
100692ec:	780a      	ldrb	r2, [r1, #0]
100692ee:	2a2b      	cmp	r2, #43	@ 0x2b
100692f0:	d053      	beq.n	1006939a <_strtod_l+0xc2>
100692f2:	d83f      	bhi.n	10069374 <_strtod_l+0x9c>
100692f4:	2a0d      	cmp	r2, #13
100692f6:	d839      	bhi.n	1006936c <_strtod_l+0x94>
100692f8:	2a08      	cmp	r2, #8
100692fa:	d839      	bhi.n	10069370 <_strtod_l+0x98>
100692fc:	2a00      	cmp	r2, #0
100692fe:	d042      	beq.n	10069386 <_strtod_l+0xae>
10069300:	2200      	movs	r2, #0
10069302:	9212      	str	r2, [sp, #72]	@ 0x48
10069304:	2100      	movs	r1, #0
10069306:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
10069308:	910c      	str	r1, [sp, #48]	@ 0x30
1006930a:	782a      	ldrb	r2, [r5, #0]
1006930c:	2a30      	cmp	r2, #48	@ 0x30
1006930e:	d000      	beq.n	10069312 <_strtod_l+0x3a>
10069310:	e083      	b.n	1006941a <_strtod_l+0x142>
10069312:	786a      	ldrb	r2, [r5, #1]
10069314:	3120      	adds	r1, #32
10069316:	438a      	bics	r2, r1
10069318:	2a58      	cmp	r2, #88	@ 0x58
1006931a:	d000      	beq.n	1006931e <_strtod_l+0x46>
1006931c:	e073      	b.n	10069406 <_strtod_l+0x12e>
1006931e:	9302      	str	r3, [sp, #8]
10069320:	9b12      	ldr	r3, [sp, #72]	@ 0x48
10069322:	4a9b      	ldr	r2, [pc, #620]	@ (10069590 <_strtod_l+0x2b8>)
10069324:	9301      	str	r3, [sp, #4]
10069326:	ab1e      	add	r3, sp, #120	@ 0x78
10069328:	9300      	str	r3, [sp, #0]
1006932a:	9805      	ldr	r0, [sp, #20]
1006932c:	ab1f      	add	r3, sp, #124	@ 0x7c
1006932e:	a91d      	add	r1, sp, #116	@ 0x74
10069330:	f001 fb76 	bl	1006aa20 <__gethex>
10069334:	230f      	movs	r3, #15
10069336:	0002      	movs	r2, r0
10069338:	401a      	ands	r2, r3
1006933a:	0004      	movs	r4, r0
1006933c:	9206      	str	r2, [sp, #24]
1006933e:	4218      	tst	r0, r3
10069340:	d005      	beq.n	1006934e <_strtod_l+0x76>
10069342:	2a06      	cmp	r2, #6
10069344:	d12b      	bne.n	1006939e <_strtod_l+0xc6>
10069346:	2300      	movs	r3, #0
10069348:	3501      	adds	r5, #1
1006934a:	951d      	str	r5, [sp, #116]	@ 0x74
1006934c:	9312      	str	r3, [sp, #72]	@ 0x48
1006934e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
10069350:	2b00      	cmp	r3, #0
10069352:	d002      	beq.n	1006935a <_strtod_l+0x82>
10069354:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
10069356:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
10069358:	6013      	str	r3, [r2, #0]
1006935a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1006935c:	2b00      	cmp	r3, #0
1006935e:	d019      	beq.n	10069394 <_strtod_l+0xbc>
10069360:	2380      	movs	r3, #128	@ 0x80
10069362:	0030      	movs	r0, r6
10069364:	061b      	lsls	r3, r3, #24
10069366:	18f9      	adds	r1, r7, r3
10069368:	b023      	add	sp, #140	@ 0x8c
1006936a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006936c:	2a20      	cmp	r2, #32
1006936e:	d1c7      	bne.n	10069300 <_strtod_l+0x28>
10069370:	3101      	adds	r1, #1
10069372:	e7ba      	b.n	100692ea <_strtod_l+0x12>
10069374:	2a2d      	cmp	r2, #45	@ 0x2d
10069376:	d1c3      	bne.n	10069300 <_strtod_l+0x28>
10069378:	3a2c      	subs	r2, #44	@ 0x2c
1006937a:	9212      	str	r2, [sp, #72]	@ 0x48
1006937c:	1c4a      	adds	r2, r1, #1
1006937e:	921d      	str	r2, [sp, #116]	@ 0x74
10069380:	784a      	ldrb	r2, [r1, #1]
10069382:	2a00      	cmp	r2, #0
10069384:	d1be      	bne.n	10069304 <_strtod_l+0x2c>
10069386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10069388:	931d      	str	r3, [sp, #116]	@ 0x74
1006938a:	2300      	movs	r3, #0
1006938c:	9312      	str	r3, [sp, #72]	@ 0x48
1006938e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
10069390:	2b00      	cmp	r3, #0
10069392:	d1df      	bne.n	10069354 <_strtod_l+0x7c>
10069394:	0030      	movs	r0, r6
10069396:	0039      	movs	r1, r7
10069398:	e7e6      	b.n	10069368 <_strtod_l+0x90>
1006939a:	2200      	movs	r2, #0
1006939c:	e7ed      	b.n	1006937a <_strtod_l+0xa2>
1006939e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
100693a0:	2a00      	cmp	r2, #0
100693a2:	d007      	beq.n	100693b4 <_strtod_l+0xdc>
100693a4:	2135      	movs	r1, #53	@ 0x35
100693a6:	a820      	add	r0, sp, #128	@ 0x80
100693a8:	f7ff ff3a 	bl	10069220 <__copybits>
100693ac:	991e      	ldr	r1, [sp, #120]	@ 0x78
100693ae:	9805      	ldr	r0, [sp, #20]
100693b0:	f7ff fafc 	bl	100689ac <_Bfree>
100693b4:	9806      	ldr	r0, [sp, #24]
100693b6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
100693b8:	3801      	subs	r0, #1
100693ba:	2804      	cmp	r0, #4
100693bc:	d806      	bhi.n	100693cc <_strtod_l+0xf4>
100693be:	f7d6 ff3f 	bl	10040240 <__gnu_thumb1_case_uqi>
100693c2:	0312      	.short	0x0312
100693c4:	1e1c      	.short	0x1e1c
100693c6:	12          	.byte	0x12
100693c7:	00          	.byte	0x00
100693c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
100693ca:	9f21      	ldr	r7, [sp, #132]	@ 0x84
100693cc:	05e4      	lsls	r4, r4, #23
100693ce:	d502      	bpl.n	100693d6 <_strtod_l+0xfe>
100693d0:	2380      	movs	r3, #128	@ 0x80
100693d2:	061b      	lsls	r3, r3, #24
100693d4:	431f      	orrs	r7, r3
100693d6:	4b6f      	ldr	r3, [pc, #444]	@ (10069594 <_strtod_l+0x2bc>)
100693d8:	423b      	tst	r3, r7
100693da:	d1b8      	bne.n	1006934e <_strtod_l+0x76>
100693dc:	f7fe fafc 	bl	100679d8 <__errno>
100693e0:	2322      	movs	r3, #34	@ 0x22
100693e2:	6003      	str	r3, [r0, #0]
100693e4:	e7b3      	b.n	1006934e <_strtod_l+0x76>
100693e6:	496c      	ldr	r1, [pc, #432]	@ (10069598 <_strtod_l+0x2c0>)
100693e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
100693ea:	9e20      	ldr	r6, [sp, #128]	@ 0x80
100693ec:	400a      	ands	r2, r1
100693ee:	496b      	ldr	r1, [pc, #428]	@ (1006959c <_strtod_l+0x2c4>)
100693f0:	185b      	adds	r3, r3, r1
100693f2:	051b      	lsls	r3, r3, #20
100693f4:	431a      	orrs	r2, r3
100693f6:	0017      	movs	r7, r2
100693f8:	e7e8      	b.n	100693cc <_strtod_l+0xf4>
100693fa:	4f66      	ldr	r7, [pc, #408]	@ (10069594 <_strtod_l+0x2bc>)
100693fc:	e7e6      	b.n	100693cc <_strtod_l+0xf4>
100693fe:	2601      	movs	r6, #1
10069400:	4f67      	ldr	r7, [pc, #412]	@ (100695a0 <_strtod_l+0x2c8>)
10069402:	4276      	negs	r6, r6
10069404:	e7e2      	b.n	100693cc <_strtod_l+0xf4>
10069406:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
10069408:	1c5a      	adds	r2, r3, #1
1006940a:	921d      	str	r2, [sp, #116]	@ 0x74
1006940c:	785b      	ldrb	r3, [r3, #1]
1006940e:	2b30      	cmp	r3, #48	@ 0x30
10069410:	d0f9      	beq.n	10069406 <_strtod_l+0x12e>
10069412:	2b00      	cmp	r3, #0
10069414:	d09b      	beq.n	1006934e <_strtod_l+0x76>
10069416:	2301      	movs	r3, #1
10069418:	930c      	str	r3, [sp, #48]	@ 0x30
1006941a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1006941c:	220a      	movs	r2, #10
1006941e:	9313      	str	r3, [sp, #76]	@ 0x4c
10069420:	2300      	movs	r3, #0
10069422:	9310      	str	r3, [sp, #64]	@ 0x40
10069424:	930d      	str	r3, [sp, #52]	@ 0x34
10069426:	9308      	str	r3, [sp, #32]
10069428:	981d      	ldr	r0, [sp, #116]	@ 0x74
1006942a:	7804      	ldrb	r4, [r0, #0]
1006942c:	0023      	movs	r3, r4
1006942e:	3b30      	subs	r3, #48	@ 0x30
10069430:	b2d9      	uxtb	r1, r3
10069432:	2909      	cmp	r1, #9
10069434:	d927      	bls.n	10069486 <_strtod_l+0x1ae>
10069436:	2201      	movs	r2, #1
10069438:	495a      	ldr	r1, [pc, #360]	@ (100695a4 <_strtod_l+0x2cc>)
1006943a:	f001 f9e8 	bl	1006a80e <strncmp>
1006943e:	2800      	cmp	r0, #0
10069440:	d033      	beq.n	100694aa <_strtod_l+0x1d2>
10069442:	2000      	movs	r0, #0
10069444:	0023      	movs	r3, r4
10069446:	4684      	mov	ip, r0
10069448:	9a08      	ldr	r2, [sp, #32]
1006944a:	900e      	str	r0, [sp, #56]	@ 0x38
1006944c:	9206      	str	r2, [sp, #24]
1006944e:	2220      	movs	r2, #32
10069450:	0019      	movs	r1, r3
10069452:	4391      	bics	r1, r2
10069454:	000a      	movs	r2, r1
10069456:	2100      	movs	r1, #0
10069458:	9107      	str	r1, [sp, #28]
1006945a:	2a45      	cmp	r2, #69	@ 0x45
1006945c:	d000      	beq.n	10069460 <_strtod_l+0x188>
1006945e:	e0cb      	b.n	100695f8 <_strtod_l+0x320>
10069460:	9b06      	ldr	r3, [sp, #24]
10069462:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10069464:	4303      	orrs	r3, r0
10069466:	4313      	orrs	r3, r2
10069468:	428b      	cmp	r3, r1
1006946a:	d08c      	beq.n	10069386 <_strtod_l+0xae>
1006946c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1006946e:	9309      	str	r3, [sp, #36]	@ 0x24
10069470:	3301      	adds	r3, #1
10069472:	931d      	str	r3, [sp, #116]	@ 0x74
10069474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10069476:	785b      	ldrb	r3, [r3, #1]
10069478:	2b2b      	cmp	r3, #43	@ 0x2b
1006947a:	d07b      	beq.n	10069574 <_strtod_l+0x29c>
1006947c:	000c      	movs	r4, r1
1006947e:	2b2d      	cmp	r3, #45	@ 0x2d
10069480:	d17e      	bne.n	10069580 <_strtod_l+0x2a8>
10069482:	2401      	movs	r4, #1
10069484:	e077      	b.n	10069576 <_strtod_l+0x29e>
10069486:	9908      	ldr	r1, [sp, #32]
10069488:	2908      	cmp	r1, #8
1006948a:	dc09      	bgt.n	100694a0 <_strtod_l+0x1c8>
1006948c:	990d      	ldr	r1, [sp, #52]	@ 0x34
1006948e:	4351      	muls	r1, r2
10069490:	185b      	adds	r3, r3, r1
10069492:	930d      	str	r3, [sp, #52]	@ 0x34
10069494:	9b08      	ldr	r3, [sp, #32]
10069496:	3001      	adds	r0, #1
10069498:	3301      	adds	r3, #1
1006949a:	9308      	str	r3, [sp, #32]
1006949c:	901d      	str	r0, [sp, #116]	@ 0x74
1006949e:	e7c3      	b.n	10069428 <_strtod_l+0x150>
100694a0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
100694a2:	4355      	muls	r5, r2
100694a4:	195b      	adds	r3, r3, r5
100694a6:	9310      	str	r3, [sp, #64]	@ 0x40
100694a8:	e7f4      	b.n	10069494 <_strtod_l+0x1bc>
100694aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100694ac:	1c5a      	adds	r2, r3, #1
100694ae:	921d      	str	r2, [sp, #116]	@ 0x74
100694b0:	9a08      	ldr	r2, [sp, #32]
100694b2:	785b      	ldrb	r3, [r3, #1]
100694b4:	2a00      	cmp	r2, #0
100694b6:	d03e      	beq.n	10069536 <_strtod_l+0x25e>
100694b8:	900e      	str	r0, [sp, #56]	@ 0x38
100694ba:	9206      	str	r2, [sp, #24]
100694bc:	001a      	movs	r2, r3
100694be:	3a30      	subs	r2, #48	@ 0x30
100694c0:	2a09      	cmp	r2, #9
100694c2:	d912      	bls.n	100694ea <_strtod_l+0x212>
100694c4:	2201      	movs	r2, #1
100694c6:	4694      	mov	ip, r2
100694c8:	e7c1      	b.n	1006944e <_strtod_l+0x176>
100694ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100694cc:	3001      	adds	r0, #1
100694ce:	1c5a      	adds	r2, r3, #1
100694d0:	921d      	str	r2, [sp, #116]	@ 0x74
100694d2:	785b      	ldrb	r3, [r3, #1]
100694d4:	2b30      	cmp	r3, #48	@ 0x30
100694d6:	d0f8      	beq.n	100694ca <_strtod_l+0x1f2>
100694d8:	001a      	movs	r2, r3
100694da:	3a31      	subs	r2, #49	@ 0x31
100694dc:	2a08      	cmp	r2, #8
100694de:	d844      	bhi.n	1006956a <_strtod_l+0x292>
100694e0:	900e      	str	r0, [sp, #56]	@ 0x38
100694e2:	2000      	movs	r0, #0
100694e4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
100694e6:	9006      	str	r0, [sp, #24]
100694e8:	9213      	str	r2, [sp, #76]	@ 0x4c
100694ea:	001c      	movs	r4, r3
100694ec:	1c42      	adds	r2, r0, #1
100694ee:	3c30      	subs	r4, #48	@ 0x30
100694f0:	2b30      	cmp	r3, #48	@ 0x30
100694f2:	d01a      	beq.n	1006952a <_strtod_l+0x252>
100694f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
100694f6:	9906      	ldr	r1, [sp, #24]
100694f8:	189b      	adds	r3, r3, r2
100694fa:	930e      	str	r3, [sp, #56]	@ 0x38
100694fc:	230a      	movs	r3, #10
100694fe:	469c      	mov	ip, r3
10069500:	9d06      	ldr	r5, [sp, #24]
10069502:	1c4b      	adds	r3, r1, #1
10069504:	1b5d      	subs	r5, r3, r5
10069506:	42aa      	cmp	r2, r5
10069508:	dc17      	bgt.n	1006953a <_strtod_l+0x262>
1006950a:	43c3      	mvns	r3, r0
1006950c:	9a06      	ldr	r2, [sp, #24]
1006950e:	17db      	asrs	r3, r3, #31
10069510:	4003      	ands	r3, r0
10069512:	18d1      	adds	r1, r2, r3
10069514:	3201      	adds	r2, #1
10069516:	18d3      	adds	r3, r2, r3
10069518:	9306      	str	r3, [sp, #24]
1006951a:	2908      	cmp	r1, #8
1006951c:	dc1c      	bgt.n	10069558 <_strtod_l+0x280>
1006951e:	230a      	movs	r3, #10
10069520:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10069522:	4353      	muls	r3, r2
10069524:	2200      	movs	r2, #0
10069526:	18e3      	adds	r3, r4, r3
10069528:	930d      	str	r3, [sp, #52]	@ 0x34
1006952a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1006952c:	0010      	movs	r0, r2
1006952e:	1c59      	adds	r1, r3, #1
10069530:	911d      	str	r1, [sp, #116]	@ 0x74
10069532:	785b      	ldrb	r3, [r3, #1]
10069534:	e7c2      	b.n	100694bc <_strtod_l+0x1e4>
10069536:	9808      	ldr	r0, [sp, #32]
10069538:	e7cc      	b.n	100694d4 <_strtod_l+0x1fc>
1006953a:	2908      	cmp	r1, #8
1006953c:	dc05      	bgt.n	1006954a <_strtod_l+0x272>
1006953e:	4665      	mov	r5, ip
10069540:	990d      	ldr	r1, [sp, #52]	@ 0x34
10069542:	4369      	muls	r1, r5
10069544:	910d      	str	r1, [sp, #52]	@ 0x34
10069546:	0019      	movs	r1, r3
10069548:	e7da      	b.n	10069500 <_strtod_l+0x228>
1006954a:	2b10      	cmp	r3, #16
1006954c:	dcfb      	bgt.n	10069546 <_strtod_l+0x26e>
1006954e:	4661      	mov	r1, ip
10069550:	9d10      	ldr	r5, [sp, #64]	@ 0x40
10069552:	434d      	muls	r5, r1
10069554:	9510      	str	r5, [sp, #64]	@ 0x40
10069556:	e7f6      	b.n	10069546 <_strtod_l+0x26e>
10069558:	2200      	movs	r2, #0
1006955a:	290f      	cmp	r1, #15
1006955c:	dce5      	bgt.n	1006952a <_strtod_l+0x252>
1006955e:	230a      	movs	r3, #10
10069560:	9d10      	ldr	r5, [sp, #64]	@ 0x40
10069562:	435d      	muls	r5, r3
10069564:	1963      	adds	r3, r4, r5
10069566:	9310      	str	r3, [sp, #64]	@ 0x40
10069568:	e7df      	b.n	1006952a <_strtod_l+0x252>
1006956a:	2200      	movs	r2, #0
1006956c:	920e      	str	r2, [sp, #56]	@ 0x38
1006956e:	9206      	str	r2, [sp, #24]
10069570:	3201      	adds	r2, #1
10069572:	e7a8      	b.n	100694c6 <_strtod_l+0x1ee>
10069574:	2400      	movs	r4, #0
10069576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10069578:	3302      	adds	r3, #2
1006957a:	931d      	str	r3, [sp, #116]	@ 0x74
1006957c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1006957e:	789b      	ldrb	r3, [r3, #2]
10069580:	001a      	movs	r2, r3
10069582:	3a30      	subs	r2, #48	@ 0x30
10069584:	2a09      	cmp	r2, #9
10069586:	d913      	bls.n	100695b0 <_strtod_l+0x2d8>
10069588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1006958a:	921d      	str	r2, [sp, #116]	@ 0x74
1006958c:	2200      	movs	r2, #0
1006958e:	e032      	b.n	100695f6 <_strtod_l+0x31e>
10069590:	1006d4e4 	.word	0x1006d4e4
10069594:	7ff00000 	.word	0x7ff00000
10069598:	ffefffff 	.word	0xffefffff
1006959c:	00000433 	.word	0x00000433
100695a0:	7fffffff 	.word	0x7fffffff
100695a4:	1006d317 	.word	0x1006d317
100695a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100695aa:	1c5a      	adds	r2, r3, #1
100695ac:	921d      	str	r2, [sp, #116]	@ 0x74
100695ae:	785b      	ldrb	r3, [r3, #1]
100695b0:	2b30      	cmp	r3, #48	@ 0x30
100695b2:	d0f9      	beq.n	100695a8 <_strtod_l+0x2d0>
100695b4:	2200      	movs	r2, #0
100695b6:	9207      	str	r2, [sp, #28]
100695b8:	001a      	movs	r2, r3
100695ba:	3a31      	subs	r2, #49	@ 0x31
100695bc:	2a08      	cmp	r2, #8
100695be:	d81b      	bhi.n	100695f8 <_strtod_l+0x320>
100695c0:	3b30      	subs	r3, #48	@ 0x30
100695c2:	001a      	movs	r2, r3
100695c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100695c6:	9307      	str	r3, [sp, #28]
100695c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
100695ca:	1c59      	adds	r1, r3, #1
100695cc:	911d      	str	r1, [sp, #116]	@ 0x74
100695ce:	785b      	ldrb	r3, [r3, #1]
100695d0:	001d      	movs	r5, r3
100695d2:	3d30      	subs	r5, #48	@ 0x30
100695d4:	2d09      	cmp	r5, #9
100695d6:	d93a      	bls.n	1006964e <_strtod_l+0x376>
100695d8:	9d07      	ldr	r5, [sp, #28]
100695da:	1b49      	subs	r1, r1, r5
100695dc:	000d      	movs	r5, r1
100695de:	49b3      	ldr	r1, [pc, #716]	@ (100698ac <_strtod_l+0x5d4>)
100695e0:	9107      	str	r1, [sp, #28]
100695e2:	2d08      	cmp	r5, #8
100695e4:	dc03      	bgt.n	100695ee <_strtod_l+0x316>
100695e6:	9207      	str	r2, [sp, #28]
100695e8:	428a      	cmp	r2, r1
100695ea:	dd00      	ble.n	100695ee <_strtod_l+0x316>
100695ec:	9107      	str	r1, [sp, #28]
100695ee:	2c00      	cmp	r4, #0
100695f0:	d002      	beq.n	100695f8 <_strtod_l+0x320>
100695f2:	9a07      	ldr	r2, [sp, #28]
100695f4:	4252      	negs	r2, r2
100695f6:	9207      	str	r2, [sp, #28]
100695f8:	9a06      	ldr	r2, [sp, #24]
100695fa:	2a00      	cmp	r2, #0
100695fc:	d14b      	bne.n	10069696 <_strtod_l+0x3be>
100695fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10069600:	4310      	orrs	r0, r2
10069602:	d000      	beq.n	10069606 <_strtod_l+0x32e>
10069604:	e6a3      	b.n	1006934e <_strtod_l+0x76>
10069606:	4662      	mov	r2, ip
10069608:	2a00      	cmp	r2, #0
1006960a:	d000      	beq.n	1006960e <_strtod_l+0x336>
1006960c:	e6bb      	b.n	10069386 <_strtod_l+0xae>
1006960e:	2b69      	cmp	r3, #105	@ 0x69
10069610:	d025      	beq.n	1006965e <_strtod_l+0x386>
10069612:	dc21      	bgt.n	10069658 <_strtod_l+0x380>
10069614:	2b49      	cmp	r3, #73	@ 0x49
10069616:	d022      	beq.n	1006965e <_strtod_l+0x386>
10069618:	2b4e      	cmp	r3, #78	@ 0x4e
1006961a:	d000      	beq.n	1006961e <_strtod_l+0x346>
1006961c:	e6b3      	b.n	10069386 <_strtod_l+0xae>
1006961e:	49a4      	ldr	r1, [pc, #656]	@ (100698b0 <_strtod_l+0x5d8>)
10069620:	a81d      	add	r0, sp, #116	@ 0x74
10069622:	f001 fc33 	bl	1006ae8c <__match>
10069626:	2800      	cmp	r0, #0
10069628:	d100      	bne.n	1006962c <_strtod_l+0x354>
1006962a:	e6ac      	b.n	10069386 <_strtod_l+0xae>
1006962c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1006962e:	781b      	ldrb	r3, [r3, #0]
10069630:	2b28      	cmp	r3, #40	@ 0x28
10069632:	d12a      	bne.n	1006968a <_strtod_l+0x3b2>
10069634:	499f      	ldr	r1, [pc, #636]	@ (100698b4 <_strtod_l+0x5dc>)
10069636:	aa20      	add	r2, sp, #128	@ 0x80
10069638:	a81d      	add	r0, sp, #116	@ 0x74
1006963a:	f001 fc3b 	bl	1006aeb4 <__hexnan>
1006963e:	2805      	cmp	r0, #5
10069640:	d123      	bne.n	1006968a <_strtod_l+0x3b2>
10069642:	9b21      	ldr	r3, [sp, #132]	@ 0x84
10069644:	4a9c      	ldr	r2, [pc, #624]	@ (100698b8 <_strtod_l+0x5e0>)
10069646:	9e20      	ldr	r6, [sp, #128]	@ 0x80
10069648:	431a      	orrs	r2, r3
1006964a:	0017      	movs	r7, r2
1006964c:	e67f      	b.n	1006934e <_strtod_l+0x76>
1006964e:	210a      	movs	r1, #10
10069650:	434a      	muls	r2, r1
10069652:	18d2      	adds	r2, r2, r3
10069654:	3a30      	subs	r2, #48	@ 0x30
10069656:	e7b7      	b.n	100695c8 <_strtod_l+0x2f0>
10069658:	2b6e      	cmp	r3, #110	@ 0x6e
1006965a:	d0e0      	beq.n	1006961e <_strtod_l+0x346>
1006965c:	e693      	b.n	10069386 <_strtod_l+0xae>
1006965e:	4997      	ldr	r1, [pc, #604]	@ (100698bc <_strtod_l+0x5e4>)
10069660:	a81d      	add	r0, sp, #116	@ 0x74
10069662:	f001 fc13 	bl	1006ae8c <__match>
10069666:	2800      	cmp	r0, #0
10069668:	d100      	bne.n	1006966c <_strtod_l+0x394>
1006966a:	e68c      	b.n	10069386 <_strtod_l+0xae>
1006966c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1006966e:	4994      	ldr	r1, [pc, #592]	@ (100698c0 <_strtod_l+0x5e8>)
10069670:	3b01      	subs	r3, #1
10069672:	a81d      	add	r0, sp, #116	@ 0x74
10069674:	931d      	str	r3, [sp, #116]	@ 0x74
10069676:	f001 fc09 	bl	1006ae8c <__match>
1006967a:	2800      	cmp	r0, #0
1006967c:	d102      	bne.n	10069684 <_strtod_l+0x3ac>
1006967e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
10069680:	3301      	adds	r3, #1
10069682:	931d      	str	r3, [sp, #116]	@ 0x74
10069684:	2600      	movs	r6, #0
10069686:	4f8c      	ldr	r7, [pc, #560]	@ (100698b8 <_strtod_l+0x5e0>)
10069688:	e661      	b.n	1006934e <_strtod_l+0x76>
1006968a:	488e      	ldr	r0, [pc, #568]	@ (100698c4 <_strtod_l+0x5ec>)
1006968c:	f001 f90e 	bl	1006a8ac <nan>
10069690:	0006      	movs	r6, r0
10069692:	000f      	movs	r7, r1
10069694:	e65b      	b.n	1006934e <_strtod_l+0x76>
10069696:	9b07      	ldr	r3, [sp, #28]
10069698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1006969a:	1a9b      	subs	r3, r3, r2
1006969c:	930c      	str	r3, [sp, #48]	@ 0x30
1006969e:	9b08      	ldr	r3, [sp, #32]
100696a0:	2b00      	cmp	r3, #0
100696a2:	d101      	bne.n	100696a8 <_strtod_l+0x3d0>
100696a4:	9b06      	ldr	r3, [sp, #24]
100696a6:	9308      	str	r3, [sp, #32]
100696a8:	9c06      	ldr	r4, [sp, #24]
100696aa:	2c10      	cmp	r4, #16
100696ac:	dd00      	ble.n	100696b0 <_strtod_l+0x3d8>
100696ae:	2410      	movs	r4, #16
100696b0:	980d      	ldr	r0, [sp, #52]	@ 0x34
100696b2:	f7d9 f8bb 	bl	1004282c <__aeabi_ui2d>
100696b6:	9b06      	ldr	r3, [sp, #24]
100696b8:	0006      	movs	r6, r0
100696ba:	000f      	movs	r7, r1
100696bc:	2b09      	cmp	r3, #9
100696be:	dc13      	bgt.n	100696e8 <_strtod_l+0x410>
100696c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100696c2:	2b00      	cmp	r3, #0
100696c4:	d100      	bne.n	100696c8 <_strtod_l+0x3f0>
100696c6:	e642      	b.n	1006934e <_strtod_l+0x76>
100696c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100696ca:	2b00      	cmp	r3, #0
100696cc:	dc00      	bgt.n	100696d0 <_strtod_l+0x3f8>
100696ce:	e07e      	b.n	100697ce <_strtod_l+0x4f6>
100696d0:	2b16      	cmp	r3, #22
100696d2:	dc63      	bgt.n	1006979c <_strtod_l+0x4c4>
100696d4:	497c      	ldr	r1, [pc, #496]	@ (100698c8 <_strtod_l+0x5f0>)
100696d6:	00db      	lsls	r3, r3, #3
100696d8:	18c9      	adds	r1, r1, r3
100696da:	0032      	movs	r2, r6
100696dc:	6808      	ldr	r0, [r1, #0]
100696de:	6849      	ldr	r1, [r1, #4]
100696e0:	003b      	movs	r3, r7
100696e2:	f7d8 f927 	bl	10041934 <__aeabi_dmul>
100696e6:	e7d3      	b.n	10069690 <_strtod_l+0x3b8>
100696e8:	0022      	movs	r2, r4
100696ea:	4b77      	ldr	r3, [pc, #476]	@ (100698c8 <_strtod_l+0x5f0>)
100696ec:	3a09      	subs	r2, #9
100696ee:	00d2      	lsls	r2, r2, #3
100696f0:	189b      	adds	r3, r3, r2
100696f2:	681a      	ldr	r2, [r3, #0]
100696f4:	685b      	ldr	r3, [r3, #4]
100696f6:	f7d8 f91d 	bl	10041934 <__aeabi_dmul>
100696fa:	0006      	movs	r6, r0
100696fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
100696fe:	000f      	movs	r7, r1
10069700:	f7d9 f894 	bl	1004282c <__aeabi_ui2d>
10069704:	000b      	movs	r3, r1
10069706:	0002      	movs	r2, r0
10069708:	0039      	movs	r1, r7
1006970a:	0030      	movs	r0, r6
1006970c:	f7d7 f912 	bl	10040934 <__aeabi_dadd>
10069710:	9b06      	ldr	r3, [sp, #24]
10069712:	0006      	movs	r6, r0
10069714:	000f      	movs	r7, r1
10069716:	2b0f      	cmp	r3, #15
10069718:	ddd2      	ble.n	100696c0 <_strtod_l+0x3e8>
1006971a:	9b06      	ldr	r3, [sp, #24]
1006971c:	1b1c      	subs	r4, r3, r4
1006971e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10069720:	18e4      	adds	r4, r4, r3
10069722:	2c00      	cmp	r4, #0
10069724:	dc00      	bgt.n	10069728 <_strtod_l+0x450>
10069726:	e09b      	b.n	10069860 <_strtod_l+0x588>
10069728:	220f      	movs	r2, #15
1006972a:	0023      	movs	r3, r4
1006972c:	4013      	ands	r3, r2
1006972e:	4214      	tst	r4, r2
10069730:	d00a      	beq.n	10069748 <_strtod_l+0x470>
10069732:	4965      	ldr	r1, [pc, #404]	@ (100698c8 <_strtod_l+0x5f0>)
10069734:	00db      	lsls	r3, r3, #3
10069736:	18c9      	adds	r1, r1, r3
10069738:	0032      	movs	r2, r6
1006973a:	6808      	ldr	r0, [r1, #0]
1006973c:	6849      	ldr	r1, [r1, #4]
1006973e:	003b      	movs	r3, r7
10069740:	f7d8 f8f8 	bl	10041934 <__aeabi_dmul>
10069744:	0006      	movs	r6, r0
10069746:	000f      	movs	r7, r1
10069748:	230f      	movs	r3, #15
1006974a:	439c      	bics	r4, r3
1006974c:	d073      	beq.n	10069836 <_strtod_l+0x55e>
1006974e:	3326      	adds	r3, #38	@ 0x26
10069750:	33ff      	adds	r3, #255	@ 0xff
10069752:	429c      	cmp	r4, r3
10069754:	dd4b      	ble.n	100697ee <_strtod_l+0x516>
10069756:	2300      	movs	r3, #0
10069758:	9306      	str	r3, [sp, #24]
1006975a:	9307      	str	r3, [sp, #28]
1006975c:	930d      	str	r3, [sp, #52]	@ 0x34
1006975e:	9308      	str	r3, [sp, #32]
10069760:	2322      	movs	r3, #34	@ 0x22
10069762:	2600      	movs	r6, #0
10069764:	9a05      	ldr	r2, [sp, #20]
10069766:	4f54      	ldr	r7, [pc, #336]	@ (100698b8 <_strtod_l+0x5e0>)
10069768:	6013      	str	r3, [r2, #0]
1006976a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1006976c:	42b3      	cmp	r3, r6
1006976e:	d100      	bne.n	10069772 <_strtod_l+0x49a>
10069770:	e5ed      	b.n	1006934e <_strtod_l+0x76>
10069772:	991e      	ldr	r1, [sp, #120]	@ 0x78
10069774:	9805      	ldr	r0, [sp, #20]
10069776:	f7ff f919 	bl	100689ac <_Bfree>
1006977a:	9908      	ldr	r1, [sp, #32]
1006977c:	9805      	ldr	r0, [sp, #20]
1006977e:	f7ff f915 	bl	100689ac <_Bfree>
10069782:	9907      	ldr	r1, [sp, #28]
10069784:	9805      	ldr	r0, [sp, #20]
10069786:	f7ff f911 	bl	100689ac <_Bfree>
1006978a:	990d      	ldr	r1, [sp, #52]	@ 0x34
1006978c:	9805      	ldr	r0, [sp, #20]
1006978e:	f7ff f90d 	bl	100689ac <_Bfree>
10069792:	9906      	ldr	r1, [sp, #24]
10069794:	9805      	ldr	r0, [sp, #20]
10069796:	f7ff f909 	bl	100689ac <_Bfree>
1006979a:	e5d8      	b.n	1006934e <_strtod_l+0x76>
1006979c:	2325      	movs	r3, #37	@ 0x25
1006979e:	9a06      	ldr	r2, [sp, #24]
100697a0:	1a9b      	subs	r3, r3, r2
100697a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100697a4:	4293      	cmp	r3, r2
100697a6:	dbb8      	blt.n	1006971a <_strtod_l+0x442>
100697a8:	240f      	movs	r4, #15
100697aa:	9b06      	ldr	r3, [sp, #24]
100697ac:	4d46      	ldr	r5, [pc, #280]	@ (100698c8 <_strtod_l+0x5f0>)
100697ae:	1ae4      	subs	r4, r4, r3
100697b0:	00e1      	lsls	r1, r4, #3
100697b2:	1869      	adds	r1, r5, r1
100697b4:	0032      	movs	r2, r6
100697b6:	6808      	ldr	r0, [r1, #0]
100697b8:	6849      	ldr	r1, [r1, #4]
100697ba:	003b      	movs	r3, r7
100697bc:	f7d8 f8ba 	bl	10041934 <__aeabi_dmul>
100697c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100697c2:	1b1c      	subs	r4, r3, r4
100697c4:	00e4      	lsls	r4, r4, #3
100697c6:	192d      	adds	r5, r5, r4
100697c8:	682a      	ldr	r2, [r5, #0]
100697ca:	686b      	ldr	r3, [r5, #4]
100697cc:	e789      	b.n	100696e2 <_strtod_l+0x40a>
100697ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
100697d0:	3316      	adds	r3, #22
100697d2:	dba2      	blt.n	1006971a <_strtod_l+0x442>
100697d4:	9907      	ldr	r1, [sp, #28]
100697d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100697d8:	4b3b      	ldr	r3, [pc, #236]	@ (100698c8 <_strtod_l+0x5f0>)
100697da:	1a52      	subs	r2, r2, r1
100697dc:	00d2      	lsls	r2, r2, #3
100697de:	189b      	adds	r3, r3, r2
100697e0:	0030      	movs	r0, r6
100697e2:	681a      	ldr	r2, [r3, #0]
100697e4:	685b      	ldr	r3, [r3, #4]
100697e6:	0039      	movs	r1, r7
100697e8:	f7d7 fc6a 	bl	100410c0 <__aeabi_ddiv>
100697ec:	e750      	b.n	10069690 <_strtod_l+0x3b8>
100697ee:	2300      	movs	r3, #0
100697f0:	0030      	movs	r0, r6
100697f2:	0039      	movs	r1, r7
100697f4:	4d35      	ldr	r5, [pc, #212]	@ (100698cc <_strtod_l+0x5f4>)
100697f6:	1124      	asrs	r4, r4, #4
100697f8:	9309      	str	r3, [sp, #36]	@ 0x24
100697fa:	2c01      	cmp	r4, #1
100697fc:	dc1e      	bgt.n	1006983c <_strtod_l+0x564>
100697fe:	2b00      	cmp	r3, #0
10069800:	d001      	beq.n	10069806 <_strtod_l+0x52e>
10069802:	0006      	movs	r6, r0
10069804:	000f      	movs	r7, r1
10069806:	4b32      	ldr	r3, [pc, #200]	@ (100698d0 <_strtod_l+0x5f8>)
10069808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1006980a:	18ff      	adds	r7, r7, r3
1006980c:	4b2f      	ldr	r3, [pc, #188]	@ (100698cc <_strtod_l+0x5f4>)
1006980e:	00d5      	lsls	r5, r2, #3
10069810:	195d      	adds	r5, r3, r5
10069812:	0032      	movs	r2, r6
10069814:	6828      	ldr	r0, [r5, #0]
10069816:	6869      	ldr	r1, [r5, #4]
10069818:	003b      	movs	r3, r7
1006981a:	f7d8 f88b 	bl	10041934 <__aeabi_dmul>
1006981e:	4b26      	ldr	r3, [pc, #152]	@ (100698b8 <_strtod_l+0x5e0>)
10069820:	4a2c      	ldr	r2, [pc, #176]	@ (100698d4 <_strtod_l+0x5fc>)
10069822:	0006      	movs	r6, r0
10069824:	400b      	ands	r3, r1
10069826:	4293      	cmp	r3, r2
10069828:	d895      	bhi.n	10069756 <_strtod_l+0x47e>
1006982a:	4a2b      	ldr	r2, [pc, #172]	@ (100698d8 <_strtod_l+0x600>)
1006982c:	4293      	cmp	r3, r2
1006982e:	d913      	bls.n	10069858 <_strtod_l+0x580>
10069830:	2601      	movs	r6, #1
10069832:	4f2a      	ldr	r7, [pc, #168]	@ (100698dc <_strtod_l+0x604>)
10069834:	4276      	negs	r6, r6
10069836:	2300      	movs	r3, #0
10069838:	9309      	str	r3, [sp, #36]	@ 0x24
1006983a:	e086      	b.n	1006994a <_strtod_l+0x672>
1006983c:	2201      	movs	r2, #1
1006983e:	4214      	tst	r4, r2
10069840:	d004      	beq.n	1006984c <_strtod_l+0x574>
10069842:	682a      	ldr	r2, [r5, #0]
10069844:	686b      	ldr	r3, [r5, #4]
10069846:	f7d8 f875 	bl	10041934 <__aeabi_dmul>
1006984a:	2301      	movs	r3, #1
1006984c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1006984e:	1064      	asrs	r4, r4, #1
10069850:	3201      	adds	r2, #1
10069852:	9209      	str	r2, [sp, #36]	@ 0x24
10069854:	3508      	adds	r5, #8
10069856:	e7d0      	b.n	100697fa <_strtod_l+0x522>
10069858:	23d4      	movs	r3, #212	@ 0xd4
1006985a:	049b      	lsls	r3, r3, #18
1006985c:	18cf      	adds	r7, r1, r3
1006985e:	e7ea      	b.n	10069836 <_strtod_l+0x55e>
10069860:	2c00      	cmp	r4, #0
10069862:	d0e8      	beq.n	10069836 <_strtod_l+0x55e>
10069864:	4264      	negs	r4, r4
10069866:	230f      	movs	r3, #15
10069868:	0022      	movs	r2, r4
1006986a:	401a      	ands	r2, r3
1006986c:	421c      	tst	r4, r3
1006986e:	d00a      	beq.n	10069886 <_strtod_l+0x5ae>
10069870:	4b15      	ldr	r3, [pc, #84]	@ (100698c8 <_strtod_l+0x5f0>)
10069872:	00d2      	lsls	r2, r2, #3
10069874:	189b      	adds	r3, r3, r2
10069876:	0030      	movs	r0, r6
10069878:	681a      	ldr	r2, [r3, #0]
1006987a:	685b      	ldr	r3, [r3, #4]
1006987c:	0039      	movs	r1, r7
1006987e:	f7d7 fc1f 	bl	100410c0 <__aeabi_ddiv>
10069882:	0006      	movs	r6, r0
10069884:	000f      	movs	r7, r1
10069886:	1124      	asrs	r4, r4, #4
10069888:	d0d5      	beq.n	10069836 <_strtod_l+0x55e>
1006988a:	2c1f      	cmp	r4, #31
1006988c:	dd28      	ble.n	100698e0 <_strtod_l+0x608>
1006988e:	2300      	movs	r3, #0
10069890:	9306      	str	r3, [sp, #24]
10069892:	9307      	str	r3, [sp, #28]
10069894:	930d      	str	r3, [sp, #52]	@ 0x34
10069896:	9308      	str	r3, [sp, #32]
10069898:	2322      	movs	r3, #34	@ 0x22
1006989a:	9a05      	ldr	r2, [sp, #20]
1006989c:	2600      	movs	r6, #0
1006989e:	6013      	str	r3, [r2, #0]
100698a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
100698a2:	2700      	movs	r7, #0
100698a4:	2b00      	cmp	r3, #0
100698a6:	d000      	beq.n	100698aa <_strtod_l+0x5d2>
100698a8:	e763      	b.n	10069772 <_strtod_l+0x49a>
100698aa:	e550      	b.n	1006934e <_strtod_l+0x76>
100698ac:	00004e1f 	.word	0x00004e1f
100698b0:	1006d205 	.word	0x1006d205
100698b4:	1006d4d0 	.word	0x1006d4d0
100698b8:	7ff00000 	.word	0x7ff00000
100698bc:	1006d1fd 	.word	0x1006d1fd
100698c0:	1006d234 	.word	0x1006d234
100698c4:	1006d36d 	.word	0x1006d36d
100698c8:	1006d408 	.word	0x1006d408
100698cc:	1006d3e0 	.word	0x1006d3e0
100698d0:	fcb00000 	.word	0xfcb00000
100698d4:	7ca00000 	.word	0x7ca00000
100698d8:	7c900000 	.word	0x7c900000
100698dc:	7fefffff 	.word	0x7fefffff
100698e0:	2310      	movs	r3, #16
100698e2:	0022      	movs	r2, r4
100698e4:	401a      	ands	r2, r3
100698e6:	9209      	str	r2, [sp, #36]	@ 0x24
100698e8:	421c      	tst	r4, r3
100698ea:	d001      	beq.n	100698f0 <_strtod_l+0x618>
100698ec:	335a      	adds	r3, #90	@ 0x5a
100698ee:	9309      	str	r3, [sp, #36]	@ 0x24
100698f0:	0030      	movs	r0, r6
100698f2:	0039      	movs	r1, r7
100698f4:	2300      	movs	r3, #0
100698f6:	4dc0      	ldr	r5, [pc, #768]	@ (10069bf8 <_strtod_l+0x920>)
100698f8:	2201      	movs	r2, #1
100698fa:	4214      	tst	r4, r2
100698fc:	d004      	beq.n	10069908 <_strtod_l+0x630>
100698fe:	682a      	ldr	r2, [r5, #0]
10069900:	686b      	ldr	r3, [r5, #4]
10069902:	f7d8 f817 	bl	10041934 <__aeabi_dmul>
10069906:	2301      	movs	r3, #1
10069908:	1064      	asrs	r4, r4, #1
1006990a:	3508      	adds	r5, #8
1006990c:	2c00      	cmp	r4, #0
1006990e:	d1f3      	bne.n	100698f8 <_strtod_l+0x620>
10069910:	2b00      	cmp	r3, #0
10069912:	d001      	beq.n	10069918 <_strtod_l+0x640>
10069914:	0006      	movs	r6, r0
10069916:	000f      	movs	r7, r1
10069918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1006991a:	2b00      	cmp	r3, #0
1006991c:	d00d      	beq.n	1006993a <_strtod_l+0x662>
1006991e:	236b      	movs	r3, #107	@ 0x6b
10069920:	007a      	lsls	r2, r7, #1
10069922:	0d52      	lsrs	r2, r2, #21
10069924:	0039      	movs	r1, r7
10069926:	1a9b      	subs	r3, r3, r2
10069928:	2b00      	cmp	r3, #0
1006992a:	dd06      	ble.n	1006993a <_strtod_l+0x662>
1006992c:	2b1f      	cmp	r3, #31
1006992e:	dd5c      	ble.n	100699ea <_strtod_l+0x712>
10069930:	2600      	movs	r6, #0
10069932:	2b34      	cmp	r3, #52	@ 0x34
10069934:	dd52      	ble.n	100699dc <_strtod_l+0x704>
10069936:	27dc      	movs	r7, #220	@ 0xdc
10069938:	04bf      	lsls	r7, r7, #18
1006993a:	2200      	movs	r2, #0
1006993c:	2300      	movs	r3, #0
1006993e:	0030      	movs	r0, r6
10069940:	0039      	movs	r1, r7
10069942:	f7d6 fe23 	bl	1004058c <__aeabi_dcmpeq>
10069946:	2800      	cmp	r0, #0
10069948:	d1a1      	bne.n	1006988e <_strtod_l+0x5b6>
1006994a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1006994c:	9a08      	ldr	r2, [sp, #32]
1006994e:	9300      	str	r3, [sp, #0]
10069950:	9913      	ldr	r1, [sp, #76]	@ 0x4c
10069952:	9b06      	ldr	r3, [sp, #24]
10069954:	9805      	ldr	r0, [sp, #20]
10069956:	f7ff f891 	bl	10068a7c <__s2b>
1006995a:	900d      	str	r0, [sp, #52]	@ 0x34
1006995c:	2800      	cmp	r0, #0
1006995e:	d100      	bne.n	10069962 <_strtod_l+0x68a>
10069960:	e6f9      	b.n	10069756 <_strtod_l+0x47e>
10069962:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10069964:	9907      	ldr	r1, [sp, #28]
10069966:	43db      	mvns	r3, r3
10069968:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1006996a:	17db      	asrs	r3, r3, #31
1006996c:	1a52      	subs	r2, r2, r1
1006996e:	9214      	str	r2, [sp, #80]	@ 0x50
10069970:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10069972:	9914      	ldr	r1, [sp, #80]	@ 0x50
10069974:	17d2      	asrs	r2, r2, #31
10069976:	4011      	ands	r1, r2
10069978:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1006997a:	9114      	str	r1, [sp, #80]	@ 0x50
1006997c:	401a      	ands	r2, r3
1006997e:	2300      	movs	r3, #0
10069980:	921a      	str	r2, [sp, #104]	@ 0x68
10069982:	9306      	str	r3, [sp, #24]
10069984:	9307      	str	r3, [sp, #28]
10069986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
10069988:	9805      	ldr	r0, [sp, #20]
1006998a:	6859      	ldr	r1, [r3, #4]
1006998c:	f7fe ffca 	bl	10068924 <_Balloc>
10069990:	9008      	str	r0, [sp, #32]
10069992:	2800      	cmp	r0, #0
10069994:	d100      	bne.n	10069998 <_strtod_l+0x6c0>
10069996:	e6e3      	b.n	10069760 <_strtod_l+0x488>
10069998:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1006999a:	300c      	adds	r0, #12
1006999c:	0019      	movs	r1, r3
1006999e:	691a      	ldr	r2, [r3, #16]
100699a0:	310c      	adds	r1, #12
100699a2:	3202      	adds	r2, #2
100699a4:	0092      	lsls	r2, r2, #2
100699a6:	f7fe f834 	bl	10067a12 <memcpy>
100699aa:	ab20      	add	r3, sp, #128	@ 0x80
100699ac:	9301      	str	r3, [sp, #4]
100699ae:	ab1f      	add	r3, sp, #124	@ 0x7c
100699b0:	9300      	str	r3, [sp, #0]
100699b2:	0032      	movs	r2, r6
100699b4:	003b      	movs	r3, r7
100699b6:	9805      	ldr	r0, [sp, #20]
100699b8:	9610      	str	r6, [sp, #64]	@ 0x40
100699ba:	9711      	str	r7, [sp, #68]	@ 0x44
100699bc:	f7ff fba6 	bl	1006910c <__d2b>
100699c0:	901e      	str	r0, [sp, #120]	@ 0x78
100699c2:	2800      	cmp	r0, #0
100699c4:	d100      	bne.n	100699c8 <_strtod_l+0x6f0>
100699c6:	e6cb      	b.n	10069760 <_strtod_l+0x488>
100699c8:	2101      	movs	r1, #1
100699ca:	9805      	ldr	r0, [sp, #20]
100699cc:	f7ff f8f2 	bl	10068bb4 <__i2b>
100699d0:	9007      	str	r0, [sp, #28]
100699d2:	2800      	cmp	r0, #0
100699d4:	d10e      	bne.n	100699f4 <_strtod_l+0x71c>
100699d6:	2300      	movs	r3, #0
100699d8:	9307      	str	r3, [sp, #28]
100699da:	e6c1      	b.n	10069760 <_strtod_l+0x488>
100699dc:	234b      	movs	r3, #75	@ 0x4b
100699de:	1a9a      	subs	r2, r3, r2
100699e0:	3b4c      	subs	r3, #76	@ 0x4c
100699e2:	4093      	lsls	r3, r2
100699e4:	4019      	ands	r1, r3
100699e6:	000f      	movs	r7, r1
100699e8:	e7a7      	b.n	1006993a <_strtod_l+0x662>
100699ea:	2201      	movs	r2, #1
100699ec:	4252      	negs	r2, r2
100699ee:	409a      	lsls	r2, r3
100699f0:	4016      	ands	r6, r2
100699f2:	e7a2      	b.n	1006993a <_strtod_l+0x662>
100699f4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
100699f6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
100699f8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
100699fa:	1ad4      	subs	r4, r2, r3
100699fc:	2b00      	cmp	r3, #0
100699fe:	db01      	blt.n	10069a04 <_strtod_l+0x72c>
10069a00:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
10069a02:	195d      	adds	r5, r3, r5
10069a04:	9909      	ldr	r1, [sp, #36]	@ 0x24
10069a06:	9a20      	ldr	r2, [sp, #128]	@ 0x80
10069a08:	1a5b      	subs	r3, r3, r1
10069a0a:	2136      	movs	r1, #54	@ 0x36
10069a0c:	189b      	adds	r3, r3, r2
10069a0e:	1a8a      	subs	r2, r1, r2
10069a10:	497a      	ldr	r1, [pc, #488]	@ (10069bfc <_strtod_l+0x924>)
10069a12:	2001      	movs	r0, #1
10069a14:	468c      	mov	ip, r1
10069a16:	2100      	movs	r1, #0
10069a18:	3b01      	subs	r3, #1
10069a1a:	9115      	str	r1, [sp, #84]	@ 0x54
10069a1c:	9016      	str	r0, [sp, #88]	@ 0x58
10069a1e:	4563      	cmp	r3, ip
10069a20:	da06      	bge.n	10069a30 <_strtod_l+0x758>
10069a22:	4661      	mov	r1, ip
10069a24:	1ac9      	subs	r1, r1, r3
10069a26:	1a52      	subs	r2, r2, r1
10069a28:	291f      	cmp	r1, #31
10069a2a:	dc3f      	bgt.n	10069aac <_strtod_l+0x7d4>
10069a2c:	4088      	lsls	r0, r1
10069a2e:	9016      	str	r0, [sp, #88]	@ 0x58
10069a30:	18ab      	adds	r3, r5, r2
10069a32:	930e      	str	r3, [sp, #56]	@ 0x38
10069a34:	18a4      	adds	r4, r4, r2
10069a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10069a38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10069a3a:	191c      	adds	r4, r3, r4
10069a3c:	002b      	movs	r3, r5
10069a3e:	4295      	cmp	r5, r2
10069a40:	dd00      	ble.n	10069a44 <_strtod_l+0x76c>
10069a42:	0013      	movs	r3, r2
10069a44:	42a3      	cmp	r3, r4
10069a46:	dd00      	ble.n	10069a4a <_strtod_l+0x772>
10069a48:	0023      	movs	r3, r4
10069a4a:	2b00      	cmp	r3, #0
10069a4c:	dd04      	ble.n	10069a58 <_strtod_l+0x780>
10069a4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10069a50:	1ae4      	subs	r4, r4, r3
10069a52:	1ad2      	subs	r2, r2, r3
10069a54:	920e      	str	r2, [sp, #56]	@ 0x38
10069a56:	1aed      	subs	r5, r5, r3
10069a58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
10069a5a:	2b00      	cmp	r3, #0
10069a5c:	dd16      	ble.n	10069a8c <_strtod_l+0x7b4>
10069a5e:	001a      	movs	r2, r3
10069a60:	9907      	ldr	r1, [sp, #28]
10069a62:	9805      	ldr	r0, [sp, #20]
10069a64:	f7ff f968 	bl	10068d38 <__pow5mult>
10069a68:	9007      	str	r0, [sp, #28]
10069a6a:	2800      	cmp	r0, #0
10069a6c:	d0b3      	beq.n	100699d6 <_strtod_l+0x6fe>
10069a6e:	0001      	movs	r1, r0
10069a70:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
10069a72:	9805      	ldr	r0, [sp, #20]
10069a74:	f7ff f8b6 	bl	10068be4 <__multiply>
10069a78:	9013      	str	r0, [sp, #76]	@ 0x4c
10069a7a:	2800      	cmp	r0, #0
10069a7c:	d100      	bne.n	10069a80 <_strtod_l+0x7a8>
10069a7e:	e66f      	b.n	10069760 <_strtod_l+0x488>
10069a80:	991e      	ldr	r1, [sp, #120]	@ 0x78
10069a82:	9805      	ldr	r0, [sp, #20]
10069a84:	f7fe ff92 	bl	100689ac <_Bfree>
10069a88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10069a8a:	931e      	str	r3, [sp, #120]	@ 0x78
10069a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10069a8e:	2b00      	cmp	r3, #0
10069a90:	dc12      	bgt.n	10069ab8 <_strtod_l+0x7e0>
10069a92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10069a94:	2b00      	cmp	r3, #0
10069a96:	dd18      	ble.n	10069aca <_strtod_l+0x7f2>
10069a98:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
10069a9a:	9908      	ldr	r1, [sp, #32]
10069a9c:	9805      	ldr	r0, [sp, #20]
10069a9e:	f7ff f94b 	bl	10068d38 <__pow5mult>
10069aa2:	9008      	str	r0, [sp, #32]
10069aa4:	2800      	cmp	r0, #0
10069aa6:	d110      	bne.n	10069aca <_strtod_l+0x7f2>
10069aa8:	2300      	movs	r3, #0
10069aaa:	e658      	b.n	1006975e <_strtod_l+0x486>
10069aac:	4954      	ldr	r1, [pc, #336]	@ (10069c00 <_strtod_l+0x928>)
10069aae:	1acb      	subs	r3, r1, r3
10069ab0:	0001      	movs	r1, r0
10069ab2:	4099      	lsls	r1, r3
10069ab4:	9115      	str	r1, [sp, #84]	@ 0x54
10069ab6:	e7ba      	b.n	10069a2e <_strtod_l+0x756>
10069ab8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10069aba:	991e      	ldr	r1, [sp, #120]	@ 0x78
10069abc:	9805      	ldr	r0, [sp, #20]
10069abe:	f7ff f997 	bl	10068df0 <__lshift>
10069ac2:	901e      	str	r0, [sp, #120]	@ 0x78
10069ac4:	2800      	cmp	r0, #0
10069ac6:	d1e4      	bne.n	10069a92 <_strtod_l+0x7ba>
10069ac8:	e64a      	b.n	10069760 <_strtod_l+0x488>
10069aca:	2c00      	cmp	r4, #0
10069acc:	dd07      	ble.n	10069ade <_strtod_l+0x806>
10069ace:	0022      	movs	r2, r4
10069ad0:	9908      	ldr	r1, [sp, #32]
10069ad2:	9805      	ldr	r0, [sp, #20]
10069ad4:	f7ff f98c 	bl	10068df0 <__lshift>
10069ad8:	9008      	str	r0, [sp, #32]
10069ada:	2800      	cmp	r0, #0
10069adc:	d0e4      	beq.n	10069aa8 <_strtod_l+0x7d0>
10069ade:	2d00      	cmp	r5, #0
10069ae0:	dd08      	ble.n	10069af4 <_strtod_l+0x81c>
10069ae2:	002a      	movs	r2, r5
10069ae4:	9907      	ldr	r1, [sp, #28]
10069ae6:	9805      	ldr	r0, [sp, #20]
10069ae8:	f7ff f982 	bl	10068df0 <__lshift>
10069aec:	9007      	str	r0, [sp, #28]
10069aee:	2800      	cmp	r0, #0
10069af0:	d100      	bne.n	10069af4 <_strtod_l+0x81c>
10069af2:	e635      	b.n	10069760 <_strtod_l+0x488>
10069af4:	9a08      	ldr	r2, [sp, #32]
10069af6:	991e      	ldr	r1, [sp, #120]	@ 0x78
10069af8:	9805      	ldr	r0, [sp, #20]
10069afa:	f7ff fa01 	bl	10068f00 <__mdiff>
10069afe:	9006      	str	r0, [sp, #24]
10069b00:	2800      	cmp	r0, #0
10069b02:	d100      	bne.n	10069b06 <_strtod_l+0x82e>
10069b04:	e62c      	b.n	10069760 <_strtod_l+0x488>
10069b06:	68c3      	ldr	r3, [r0, #12]
10069b08:	9907      	ldr	r1, [sp, #28]
10069b0a:	9313      	str	r3, [sp, #76]	@ 0x4c
10069b0c:	2300      	movs	r3, #0
10069b0e:	60c3      	str	r3, [r0, #12]
10069b10:	f7ff f9da 	bl	10068ec8 <__mcmp>
10069b14:	2800      	cmp	r0, #0
10069b16:	da3b      	bge.n	10069b90 <_strtod_l+0x8b8>
10069b18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10069b1a:	4333      	orrs	r3, r6
10069b1c:	d167      	bne.n	10069bee <_strtod_l+0x916>
10069b1e:	033b      	lsls	r3, r7, #12
10069b20:	d165      	bne.n	10069bee <_strtod_l+0x916>
10069b22:	22d6      	movs	r2, #214	@ 0xd6
10069b24:	4b37      	ldr	r3, [pc, #220]	@ (10069c04 <_strtod_l+0x92c>)
10069b26:	04d2      	lsls	r2, r2, #19
10069b28:	403b      	ands	r3, r7
10069b2a:	4293      	cmp	r3, r2
10069b2c:	d95f      	bls.n	10069bee <_strtod_l+0x916>
10069b2e:	9b06      	ldr	r3, [sp, #24]
10069b30:	695b      	ldr	r3, [r3, #20]
10069b32:	2b00      	cmp	r3, #0
10069b34:	d103      	bne.n	10069b3e <_strtod_l+0x866>
10069b36:	9b06      	ldr	r3, [sp, #24]
10069b38:	691b      	ldr	r3, [r3, #16]
10069b3a:	2b01      	cmp	r3, #1
10069b3c:	dd57      	ble.n	10069bee <_strtod_l+0x916>
10069b3e:	9906      	ldr	r1, [sp, #24]
10069b40:	2201      	movs	r2, #1
10069b42:	9805      	ldr	r0, [sp, #20]
10069b44:	f7ff f954 	bl	10068df0 <__lshift>
10069b48:	9907      	ldr	r1, [sp, #28]
10069b4a:	9006      	str	r0, [sp, #24]
10069b4c:	f7ff f9bc 	bl	10068ec8 <__mcmp>
10069b50:	2800      	cmp	r0, #0
10069b52:	dd4c      	ble.n	10069bee <_strtod_l+0x916>
10069b54:	4b2b      	ldr	r3, [pc, #172]	@ (10069c04 <_strtod_l+0x92c>)
10069b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10069b58:	403b      	ands	r3, r7
10069b5a:	2a00      	cmp	r2, #0
10069b5c:	d074      	beq.n	10069c48 <_strtod_l+0x970>
10069b5e:	22d6      	movs	r2, #214	@ 0xd6
10069b60:	04d2      	lsls	r2, r2, #19
10069b62:	4293      	cmp	r3, r2
10069b64:	d870      	bhi.n	10069c48 <_strtod_l+0x970>
10069b66:	22dc      	movs	r2, #220	@ 0xdc
10069b68:	0492      	lsls	r2, r2, #18
10069b6a:	4293      	cmp	r3, r2
10069b6c:	d800      	bhi.n	10069b70 <_strtod_l+0x898>
10069b6e:	e693      	b.n	10069898 <_strtod_l+0x5c0>
10069b70:	0030      	movs	r0, r6
10069b72:	0039      	movs	r1, r7
10069b74:	4b24      	ldr	r3, [pc, #144]	@ (10069c08 <_strtod_l+0x930>)
10069b76:	2200      	movs	r2, #0
10069b78:	f7d7 fedc 	bl	10041934 <__aeabi_dmul>
10069b7c:	4b21      	ldr	r3, [pc, #132]	@ (10069c04 <_strtod_l+0x92c>)
10069b7e:	0006      	movs	r6, r0
10069b80:	000f      	movs	r7, r1
10069b82:	420b      	tst	r3, r1
10069b84:	d000      	beq.n	10069b88 <_strtod_l+0x8b0>
10069b86:	e5f4      	b.n	10069772 <_strtod_l+0x49a>
10069b88:	2322      	movs	r3, #34	@ 0x22
10069b8a:	9a05      	ldr	r2, [sp, #20]
10069b8c:	6013      	str	r3, [r2, #0]
10069b8e:	e5f0      	b.n	10069772 <_strtod_l+0x49a>
10069b90:	970e      	str	r7, [sp, #56]	@ 0x38
10069b92:	2800      	cmp	r0, #0
10069b94:	d175      	bne.n	10069c82 <_strtod_l+0x9aa>
10069b96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
10069b98:	033b      	lsls	r3, r7, #12
10069b9a:	0b1b      	lsrs	r3, r3, #12
10069b9c:	2a00      	cmp	r2, #0
10069b9e:	d039      	beq.n	10069c14 <_strtod_l+0x93c>
10069ba0:	4a1a      	ldr	r2, [pc, #104]	@ (10069c0c <_strtod_l+0x934>)
10069ba2:	4293      	cmp	r3, r2
10069ba4:	d138      	bne.n	10069c18 <_strtod_l+0x940>
10069ba6:	2101      	movs	r1, #1
10069ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10069baa:	4249      	negs	r1, r1
10069bac:	0032      	movs	r2, r6
10069bae:	0008      	movs	r0, r1
10069bb0:	2b00      	cmp	r3, #0
10069bb2:	d00b      	beq.n	10069bcc <_strtod_l+0x8f4>
10069bb4:	24d4      	movs	r4, #212	@ 0xd4
10069bb6:	4b13      	ldr	r3, [pc, #76]	@ (10069c04 <_strtod_l+0x92c>)
10069bb8:	0008      	movs	r0, r1
10069bba:	403b      	ands	r3, r7
10069bbc:	04e4      	lsls	r4, r4, #19
10069bbe:	42a3      	cmp	r3, r4
10069bc0:	d804      	bhi.n	10069bcc <_strtod_l+0x8f4>
10069bc2:	306c      	adds	r0, #108	@ 0x6c
10069bc4:	0d1b      	lsrs	r3, r3, #20
10069bc6:	1ac3      	subs	r3, r0, r3
10069bc8:	4099      	lsls	r1, r3
10069bca:	0008      	movs	r0, r1
10069bcc:	4282      	cmp	r2, r0
10069bce:	d123      	bne.n	10069c18 <_strtod_l+0x940>
10069bd0:	4b0f      	ldr	r3, [pc, #60]	@ (10069c10 <_strtod_l+0x938>)
10069bd2:	990e      	ldr	r1, [sp, #56]	@ 0x38
10069bd4:	4299      	cmp	r1, r3
10069bd6:	d102      	bne.n	10069bde <_strtod_l+0x906>
10069bd8:	3201      	adds	r2, #1
10069bda:	d100      	bne.n	10069bde <_strtod_l+0x906>
10069bdc:	e5c0      	b.n	10069760 <_strtod_l+0x488>
10069bde:	4b09      	ldr	r3, [pc, #36]	@ (10069c04 <_strtod_l+0x92c>)
10069be0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10069be2:	2600      	movs	r6, #0
10069be4:	401a      	ands	r2, r3
10069be6:	0013      	movs	r3, r2
10069be8:	2280      	movs	r2, #128	@ 0x80
10069bea:	0352      	lsls	r2, r2, #13
10069bec:	189f      	adds	r7, r3, r2
10069bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10069bf0:	2b00      	cmp	r3, #0
10069bf2:	d1bd      	bne.n	10069b70 <_strtod_l+0x898>
10069bf4:	e5bd      	b.n	10069772 <_strtod_l+0x49a>
10069bf6:	46c0      	nop			@ (mov r8, r8)
10069bf8:	1006d4f8 	.word	0x1006d4f8
10069bfc:	fffffc02 	.word	0xfffffc02
10069c00:	fffffbe2 	.word	0xfffffbe2
10069c04:	7ff00000 	.word	0x7ff00000
10069c08:	39500000 	.word	0x39500000
10069c0c:	000fffff 	.word	0x000fffff
10069c10:	7fefffff 	.word	0x7fefffff
10069c14:	4333      	orrs	r3, r6
10069c16:	d09d      	beq.n	10069b54 <_strtod_l+0x87c>
10069c18:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10069c1a:	2b00      	cmp	r3, #0
10069c1c:	d01c      	beq.n	10069c58 <_strtod_l+0x980>
10069c1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10069c20:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10069c22:	4213      	tst	r3, r2
10069c24:	d0e3      	beq.n	10069bee <_strtod_l+0x916>
10069c26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10069c28:	0030      	movs	r0, r6
10069c2a:	0039      	movs	r1, r7
10069c2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10069c2e:	2b00      	cmp	r3, #0
10069c30:	d016      	beq.n	10069c60 <_strtod_l+0x988>
10069c32:	f7ff fb39 	bl	100692a8 <sulp>
10069c36:	0002      	movs	r2, r0
10069c38:	000b      	movs	r3, r1
10069c3a:	9810      	ldr	r0, [sp, #64]	@ 0x40
10069c3c:	9911      	ldr	r1, [sp, #68]	@ 0x44
10069c3e:	f7d6 fe79 	bl	10040934 <__aeabi_dadd>
10069c42:	0006      	movs	r6, r0
10069c44:	000f      	movs	r7, r1
10069c46:	e7d2      	b.n	10069bee <_strtod_l+0x916>
10069c48:	2601      	movs	r6, #1
10069c4a:	4a92      	ldr	r2, [pc, #584]	@ (10069e94 <_strtod_l+0xbbc>)
10069c4c:	4276      	negs	r6, r6
10069c4e:	189b      	adds	r3, r3, r2
10069c50:	4a91      	ldr	r2, [pc, #580]	@ (10069e98 <_strtod_l+0xbc0>)
10069c52:	431a      	orrs	r2, r3
10069c54:	0017      	movs	r7, r2
10069c56:	e7ca      	b.n	10069bee <_strtod_l+0x916>
10069c58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
10069c5a:	4233      	tst	r3, r6
10069c5c:	d0c7      	beq.n	10069bee <_strtod_l+0x916>
10069c5e:	e7e2      	b.n	10069c26 <_strtod_l+0x94e>
10069c60:	f7ff fb22 	bl	100692a8 <sulp>
10069c64:	0002      	movs	r2, r0
10069c66:	000b      	movs	r3, r1
10069c68:	9810      	ldr	r0, [sp, #64]	@ 0x40
10069c6a:	9911      	ldr	r1, [sp, #68]	@ 0x44
10069c6c:	f7d8 f948 	bl	10041f00 <__aeabi_dsub>
10069c70:	2200      	movs	r2, #0
10069c72:	2300      	movs	r3, #0
10069c74:	0006      	movs	r6, r0
10069c76:	000f      	movs	r7, r1
10069c78:	f7d6 fc88 	bl	1004058c <__aeabi_dcmpeq>
10069c7c:	2800      	cmp	r0, #0
10069c7e:	d0b6      	beq.n	10069bee <_strtod_l+0x916>
10069c80:	e60a      	b.n	10069898 <_strtod_l+0x5c0>
10069c82:	9907      	ldr	r1, [sp, #28]
10069c84:	9806      	ldr	r0, [sp, #24]
10069c86:	f7ff faa1 	bl	100691cc <__ratio>
10069c8a:	2380      	movs	r3, #128	@ 0x80
10069c8c:	2200      	movs	r2, #0
10069c8e:	05db      	lsls	r3, r3, #23
10069c90:	0004      	movs	r4, r0
10069c92:	000d      	movs	r5, r1
10069c94:	f7d6 fc8a 	bl	100405ac <__aeabi_dcmple>
10069c98:	2800      	cmp	r0, #0
10069c9a:	d06c      	beq.n	10069d76 <_strtod_l+0xa9e>
10069c9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10069c9e:	2b00      	cmp	r3, #0
10069ca0:	d177      	bne.n	10069d92 <_strtod_l+0xaba>
10069ca2:	2e00      	cmp	r6, #0
10069ca4:	d157      	bne.n	10069d56 <_strtod_l+0xa7e>
10069ca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10069ca8:	031b      	lsls	r3, r3, #12
10069caa:	d15a      	bne.n	10069d62 <_strtod_l+0xa8a>
10069cac:	2200      	movs	r2, #0
10069cae:	0020      	movs	r0, r4
10069cb0:	0029      	movs	r1, r5
10069cb2:	4b7a      	ldr	r3, [pc, #488]	@ (10069e9c <_strtod_l+0xbc4>)
10069cb4:	f7d6 fc70 	bl	10040598 <__aeabi_dcmplt>
10069cb8:	2800      	cmp	r0, #0
10069cba:	d159      	bne.n	10069d70 <_strtod_l+0xa98>
10069cbc:	0020      	movs	r0, r4
10069cbe:	0029      	movs	r1, r5
10069cc0:	2200      	movs	r2, #0
10069cc2:	4b77      	ldr	r3, [pc, #476]	@ (10069ea0 <_strtod_l+0xbc8>)
10069cc4:	f7d7 fe36 	bl	10041934 <__aeabi_dmul>
10069cc8:	0004      	movs	r4, r0
10069cca:	000d      	movs	r5, r1
10069ccc:	2380      	movs	r3, #128	@ 0x80
10069cce:	061b      	lsls	r3, r3, #24
10069cd0:	18eb      	adds	r3, r5, r3
10069cd2:	940a      	str	r4, [sp, #40]	@ 0x28
10069cd4:	930b      	str	r3, [sp, #44]	@ 0x2c
10069cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10069cd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10069cda:	9216      	str	r2, [sp, #88]	@ 0x58
10069cdc:	9317      	str	r3, [sp, #92]	@ 0x5c
10069cde:	4a71      	ldr	r2, [pc, #452]	@ (10069ea4 <_strtod_l+0xbcc>)
10069ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10069ce2:	4013      	ands	r3, r2
10069ce4:	9315      	str	r3, [sp, #84]	@ 0x54
10069ce6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10069ce8:	4b6f      	ldr	r3, [pc, #444]	@ (10069ea8 <_strtod_l+0xbd0>)
10069cea:	429a      	cmp	r2, r3
10069cec:	d000      	beq.n	10069cf0 <_strtod_l+0xa18>
10069cee:	e087      	b.n	10069e00 <_strtod_l+0xb28>
10069cf0:	4a6e      	ldr	r2, [pc, #440]	@ (10069eac <_strtod_l+0xbd4>)
10069cf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10069cf4:	4694      	mov	ip, r2
10069cf6:	4463      	add	r3, ip
10069cf8:	001f      	movs	r7, r3
10069cfa:	0030      	movs	r0, r6
10069cfc:	0019      	movs	r1, r3
10069cfe:	f7ff f999 	bl	10069034 <__ulp>
10069d02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10069d04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10069d06:	f7d7 fe15 	bl	10041934 <__aeabi_dmul>
10069d0a:	0032      	movs	r2, r6
10069d0c:	003b      	movs	r3, r7
10069d0e:	f7d6 fe11 	bl	10040934 <__aeabi_dadd>
10069d12:	4a64      	ldr	r2, [pc, #400]	@ (10069ea4 <_strtod_l+0xbcc>)
10069d14:	4b66      	ldr	r3, [pc, #408]	@ (10069eb0 <_strtod_l+0xbd8>)
10069d16:	0006      	movs	r6, r0
10069d18:	400a      	ands	r2, r1
10069d1a:	429a      	cmp	r2, r3
10069d1c:	d940      	bls.n	10069da0 <_strtod_l+0xac8>
10069d1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10069d20:	4a64      	ldr	r2, [pc, #400]	@ (10069eb4 <_strtod_l+0xbdc>)
10069d22:	4293      	cmp	r3, r2
10069d24:	d103      	bne.n	10069d2e <_strtod_l+0xa56>
10069d26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10069d28:	3301      	adds	r3, #1
10069d2a:	d100      	bne.n	10069d2e <_strtod_l+0xa56>
10069d2c:	e518      	b.n	10069760 <_strtod_l+0x488>
10069d2e:	2601      	movs	r6, #1
10069d30:	4f60      	ldr	r7, [pc, #384]	@ (10069eb4 <_strtod_l+0xbdc>)
10069d32:	4276      	negs	r6, r6
10069d34:	991e      	ldr	r1, [sp, #120]	@ 0x78
10069d36:	9805      	ldr	r0, [sp, #20]
10069d38:	f7fe fe38 	bl	100689ac <_Bfree>
10069d3c:	9908      	ldr	r1, [sp, #32]
10069d3e:	9805      	ldr	r0, [sp, #20]
10069d40:	f7fe fe34 	bl	100689ac <_Bfree>
10069d44:	9907      	ldr	r1, [sp, #28]
10069d46:	9805      	ldr	r0, [sp, #20]
10069d48:	f7fe fe30 	bl	100689ac <_Bfree>
10069d4c:	9906      	ldr	r1, [sp, #24]
10069d4e:	9805      	ldr	r0, [sp, #20]
10069d50:	f7fe fe2c 	bl	100689ac <_Bfree>
10069d54:	e617      	b.n	10069986 <_strtod_l+0x6ae>
10069d56:	2e01      	cmp	r6, #1
10069d58:	d103      	bne.n	10069d62 <_strtod_l+0xa8a>
10069d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10069d5c:	2b00      	cmp	r3, #0
10069d5e:	d100      	bne.n	10069d62 <_strtod_l+0xa8a>
10069d60:	e59a      	b.n	10069898 <_strtod_l+0x5c0>
10069d62:	2300      	movs	r3, #0
10069d64:	4c54      	ldr	r4, [pc, #336]	@ (10069eb8 <_strtod_l+0xbe0>)
10069d66:	4d4d      	ldr	r5, [pc, #308]	@ (10069e9c <_strtod_l+0xbc4>)
10069d68:	930a      	str	r3, [sp, #40]	@ 0x28
10069d6a:	940b      	str	r4, [sp, #44]	@ 0x2c
10069d6c:	2400      	movs	r4, #0
10069d6e:	e7b2      	b.n	10069cd6 <_strtod_l+0x9fe>
10069d70:	2400      	movs	r4, #0
10069d72:	4d4b      	ldr	r5, [pc, #300]	@ (10069ea0 <_strtod_l+0xbc8>)
10069d74:	e7aa      	b.n	10069ccc <_strtod_l+0x9f4>
10069d76:	0020      	movs	r0, r4
10069d78:	0029      	movs	r1, r5
10069d7a:	4b49      	ldr	r3, [pc, #292]	@ (10069ea0 <_strtod_l+0xbc8>)
10069d7c:	2200      	movs	r2, #0
10069d7e:	f7d7 fdd9 	bl	10041934 <__aeabi_dmul>
10069d82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10069d84:	0004      	movs	r4, r0
10069d86:	000d      	movs	r5, r1
10069d88:	2b00      	cmp	r3, #0
10069d8a:	d09f      	beq.n	10069ccc <_strtod_l+0x9f4>
10069d8c:	940a      	str	r4, [sp, #40]	@ 0x28
10069d8e:	950b      	str	r5, [sp, #44]	@ 0x2c
10069d90:	e7a1      	b.n	10069cd6 <_strtod_l+0x9fe>
10069d92:	2300      	movs	r3, #0
10069d94:	4c41      	ldr	r4, [pc, #260]	@ (10069e9c <_strtod_l+0xbc4>)
10069d96:	0025      	movs	r5, r4
10069d98:	930a      	str	r3, [sp, #40]	@ 0x28
10069d9a:	940b      	str	r4, [sp, #44]	@ 0x2c
10069d9c:	001c      	movs	r4, r3
10069d9e:	e79a      	b.n	10069cd6 <_strtod_l+0x9fe>
10069da0:	23d4      	movs	r3, #212	@ 0xd4
10069da2:	049b      	lsls	r3, r3, #18
10069da4:	18cf      	adds	r7, r1, r3
10069da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10069da8:	9710      	str	r7, [sp, #64]	@ 0x40
10069daa:	2b00      	cmp	r3, #0
10069dac:	d1c2      	bne.n	10069d34 <_strtod_l+0xa5c>
10069dae:	4b3d      	ldr	r3, [pc, #244]	@ (10069ea4 <_strtod_l+0xbcc>)
10069db0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10069db2:	403b      	ands	r3, r7
10069db4:	429a      	cmp	r2, r3
10069db6:	d1bd      	bne.n	10069d34 <_strtod_l+0xa5c>
10069db8:	0020      	movs	r0, r4
10069dba:	0029      	movs	r1, r5
10069dbc:	f7d6 fc9e 	bl	100406fc <__aeabi_d2lz>
10069dc0:	f7d6 fcd6 	bl	10040770 <__aeabi_l2d>
10069dc4:	0002      	movs	r2, r0
10069dc6:	000b      	movs	r3, r1
10069dc8:	0020      	movs	r0, r4
10069dca:	0029      	movs	r1, r5
10069dcc:	f7d8 f898 	bl	10041f00 <__aeabi_dsub>
10069dd0:	033c      	lsls	r4, r7, #12
10069dd2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10069dd4:	0b24      	lsrs	r4, r4, #12
10069dd6:	4334      	orrs	r4, r6
10069dd8:	900e      	str	r0, [sp, #56]	@ 0x38
10069dda:	910f      	str	r1, [sp, #60]	@ 0x3c
10069ddc:	4a37      	ldr	r2, [pc, #220]	@ (10069ebc <_strtod_l+0xbe4>)
10069dde:	431c      	orrs	r4, r3
10069de0:	d052      	beq.n	10069e88 <_strtod_l+0xbb0>
10069de2:	4b37      	ldr	r3, [pc, #220]	@ (10069ec0 <_strtod_l+0xbe8>)
10069de4:	f7d6 fbd8 	bl	10040598 <__aeabi_dcmplt>
10069de8:	2800      	cmp	r0, #0
10069dea:	d000      	beq.n	10069dee <_strtod_l+0xb16>
10069dec:	e4c1      	b.n	10069772 <_strtod_l+0x49a>
10069dee:	980e      	ldr	r0, [sp, #56]	@ 0x38
10069df0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10069df2:	4a34      	ldr	r2, [pc, #208]	@ (10069ec4 <_strtod_l+0xbec>)
10069df4:	4b2a      	ldr	r3, [pc, #168]	@ (10069ea0 <_strtod_l+0xbc8>)
10069df6:	f7d6 fbe3 	bl	100405c0 <__aeabi_dcmpgt>
10069dfa:	2800      	cmp	r0, #0
10069dfc:	d09a      	beq.n	10069d34 <_strtod_l+0xa5c>
10069dfe:	e4b8      	b.n	10069772 <_strtod_l+0x49a>
10069e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10069e02:	2b00      	cmp	r3, #0
10069e04:	d02a      	beq.n	10069e5c <_strtod_l+0xb84>
10069e06:	23d4      	movs	r3, #212	@ 0xd4
10069e08:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10069e0a:	04db      	lsls	r3, r3, #19
10069e0c:	429a      	cmp	r2, r3
10069e0e:	d825      	bhi.n	10069e5c <_strtod_l+0xb84>
10069e10:	0020      	movs	r0, r4
10069e12:	0029      	movs	r1, r5
10069e14:	4a2c      	ldr	r2, [pc, #176]	@ (10069ec8 <_strtod_l+0xbf0>)
10069e16:	4b2d      	ldr	r3, [pc, #180]	@ (10069ecc <_strtod_l+0xbf4>)
10069e18:	f7d6 fbc8 	bl	100405ac <__aeabi_dcmple>
10069e1c:	2800      	cmp	r0, #0
10069e1e:	d016      	beq.n	10069e4e <_strtod_l+0xb76>
10069e20:	0020      	movs	r0, r4
10069e22:	0029      	movs	r1, r5
10069e24:	f7d6 fc4c 	bl	100406c0 <__aeabi_d2uiz>
10069e28:	2800      	cmp	r0, #0
10069e2a:	d100      	bne.n	10069e2e <_strtod_l+0xb56>
10069e2c:	3001      	adds	r0, #1
10069e2e:	f7d8 fcfd 	bl	1004282c <__aeabi_ui2d>
10069e32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
10069e34:	0004      	movs	r4, r0
10069e36:	000d      	movs	r5, r1
10069e38:	2b00      	cmp	r3, #0
10069e3a:	d122      	bne.n	10069e82 <_strtod_l+0xbaa>
10069e3c:	2380      	movs	r3, #128	@ 0x80
10069e3e:	061b      	lsls	r3, r3, #24
10069e40:	18cb      	adds	r3, r1, r3
10069e42:	9018      	str	r0, [sp, #96]	@ 0x60
10069e44:	9319      	str	r3, [sp, #100]	@ 0x64
10069e46:	9a18      	ldr	r2, [sp, #96]	@ 0x60
10069e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
10069e4a:	9216      	str	r2, [sp, #88]	@ 0x58
10069e4c:	9317      	str	r3, [sp, #92]	@ 0x5c
10069e4e:	22d6      	movs	r2, #214	@ 0xd6
10069e50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
10069e52:	04d2      	lsls	r2, r2, #19
10069e54:	189b      	adds	r3, r3, r2
10069e56:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10069e58:	1a9b      	subs	r3, r3, r2
10069e5a:	9317      	str	r3, [sp, #92]	@ 0x5c
10069e5c:	9810      	ldr	r0, [sp, #64]	@ 0x40
10069e5e:	9911      	ldr	r1, [sp, #68]	@ 0x44
10069e60:	9e16      	ldr	r6, [sp, #88]	@ 0x58
10069e62:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
10069e64:	f7ff f8e6 	bl	10069034 <__ulp>
10069e68:	0002      	movs	r2, r0
10069e6a:	000b      	movs	r3, r1
10069e6c:	0030      	movs	r0, r6
10069e6e:	0039      	movs	r1, r7
10069e70:	f7d7 fd60 	bl	10041934 <__aeabi_dmul>
10069e74:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10069e76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10069e78:	f7d6 fd5c 	bl	10040934 <__aeabi_dadd>
10069e7c:	0006      	movs	r6, r0
10069e7e:	000f      	movs	r7, r1
10069e80:	e791      	b.n	10069da6 <_strtod_l+0xace>
10069e82:	9418      	str	r4, [sp, #96]	@ 0x60
10069e84:	9519      	str	r5, [sp, #100]	@ 0x64
10069e86:	e7de      	b.n	10069e46 <_strtod_l+0xb6e>
10069e88:	4b11      	ldr	r3, [pc, #68]	@ (10069ed0 <_strtod_l+0xbf8>)
10069e8a:	980e      	ldr	r0, [sp, #56]	@ 0x38
10069e8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
10069e8e:	f7d6 fb83 	bl	10040598 <__aeabi_dcmplt>
10069e92:	e7b2      	b.n	10069dfa <_strtod_l+0xb22>
10069e94:	fff00000 	.word	0xfff00000
10069e98:	000fffff 	.word	0x000fffff
10069e9c:	3ff00000 	.word	0x3ff00000
10069ea0:	3fe00000 	.word	0x3fe00000
10069ea4:	7ff00000 	.word	0x7ff00000
10069ea8:	7fe00000 	.word	0x7fe00000
10069eac:	fcb00000 	.word	0xfcb00000
10069eb0:	7c9fffff 	.word	0x7c9fffff
10069eb4:	7fefffff 	.word	0x7fefffff
10069eb8:	bff00000 	.word	0xbff00000
10069ebc:	94a03595 	.word	0x94a03595
10069ec0:	3fdfffff 	.word	0x3fdfffff
10069ec4:	35afe535 	.word	0x35afe535
10069ec8:	ffc00000 	.word	0xffc00000
10069ecc:	41dfffff 	.word	0x41dfffff
10069ed0:	3fcfffff 	.word	0x3fcfffff

10069ed4 <_strtod_r>:
10069ed4:	b510      	push	{r4, lr}
10069ed6:	4b02      	ldr	r3, [pc, #8]	@ (10069ee0 <_strtod_r+0xc>)
10069ed8:	f7ff f9fe 	bl	100692d8 <_strtod_l>
10069edc:	bd10      	pop	{r4, pc}
10069ede:	46c0      	nop			@ (mov r8, r8)
10069ee0:	20001580 	.word	0x20001580

10069ee4 <_strtol_l.isra.0>:
10069ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
10069ee6:	b085      	sub	sp, #20
10069ee8:	0017      	movs	r7, r2
10069eea:	001e      	movs	r6, r3
10069eec:	9003      	str	r0, [sp, #12]
10069eee:	9101      	str	r1, [sp, #4]
10069ef0:	2b24      	cmp	r3, #36	@ 0x24
10069ef2:	d823      	bhi.n	10069f3c <_strtol_l.isra.0+0x58>
10069ef4:	000c      	movs	r4, r1
10069ef6:	2b01      	cmp	r3, #1
10069ef8:	d020      	beq.n	10069f3c <_strtol_l.isra.0+0x58>
10069efa:	4b3d      	ldr	r3, [pc, #244]	@ (10069ff0 <_strtol_l.isra.0+0x10c>)
10069efc:	2208      	movs	r2, #8
10069efe:	469c      	mov	ip, r3
10069f00:	0023      	movs	r3, r4
10069f02:	4661      	mov	r1, ip
10069f04:	781d      	ldrb	r5, [r3, #0]
10069f06:	3401      	adds	r4, #1
10069f08:	5d48      	ldrb	r0, [r1, r5]
10069f0a:	0001      	movs	r1, r0
10069f0c:	4011      	ands	r1, r2
10069f0e:	4210      	tst	r0, r2
10069f10:	d1f6      	bne.n	10069f00 <_strtol_l.isra.0+0x1c>
10069f12:	2d2d      	cmp	r5, #45	@ 0x2d
10069f14:	d119      	bne.n	10069f4a <_strtol_l.isra.0+0x66>
10069f16:	7825      	ldrb	r5, [r4, #0]
10069f18:	1c9c      	adds	r4, r3, #2
10069f1a:	2301      	movs	r3, #1
10069f1c:	9300      	str	r3, [sp, #0]
10069f1e:	2210      	movs	r2, #16
10069f20:	0033      	movs	r3, r6
10069f22:	4393      	bics	r3, r2
10069f24:	d11d      	bne.n	10069f62 <_strtol_l.isra.0+0x7e>
10069f26:	2d30      	cmp	r5, #48	@ 0x30
10069f28:	d115      	bne.n	10069f56 <_strtol_l.isra.0+0x72>
10069f2a:	2120      	movs	r1, #32
10069f2c:	7823      	ldrb	r3, [r4, #0]
10069f2e:	438b      	bics	r3, r1
10069f30:	2b58      	cmp	r3, #88	@ 0x58
10069f32:	d110      	bne.n	10069f56 <_strtol_l.isra.0+0x72>
10069f34:	7865      	ldrb	r5, [r4, #1]
10069f36:	3402      	adds	r4, #2
10069f38:	2610      	movs	r6, #16
10069f3a:	e012      	b.n	10069f62 <_strtol_l.isra.0+0x7e>
10069f3c:	f7fd fd4c 	bl	100679d8 <__errno>
10069f40:	2316      	movs	r3, #22
10069f42:	6003      	str	r3, [r0, #0]
10069f44:	2000      	movs	r0, #0
10069f46:	b005      	add	sp, #20
10069f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
10069f4a:	9100      	str	r1, [sp, #0]
10069f4c:	2d2b      	cmp	r5, #43	@ 0x2b
10069f4e:	d1e6      	bne.n	10069f1e <_strtol_l.isra.0+0x3a>
10069f50:	7825      	ldrb	r5, [r4, #0]
10069f52:	1c9c      	adds	r4, r3, #2
10069f54:	e7e3      	b.n	10069f1e <_strtol_l.isra.0+0x3a>
10069f56:	2e00      	cmp	r6, #0
10069f58:	d1ee      	bne.n	10069f38 <_strtol_l.isra.0+0x54>
10069f5a:	360a      	adds	r6, #10
10069f5c:	2d30      	cmp	r5, #48	@ 0x30
10069f5e:	d100      	bne.n	10069f62 <_strtol_l.isra.0+0x7e>
10069f60:	3e02      	subs	r6, #2
10069f62:	4a24      	ldr	r2, [pc, #144]	@ (10069ff4 <_strtol_l.isra.0+0x110>)
10069f64:	9b00      	ldr	r3, [sp, #0]
10069f66:	4694      	mov	ip, r2
10069f68:	4463      	add	r3, ip
10069f6a:	0031      	movs	r1, r6
10069f6c:	0018      	movs	r0, r3
10069f6e:	9302      	str	r3, [sp, #8]
10069f70:	f7d6 fa00 	bl	10040374 <__aeabi_uidivmod>
10069f74:	2200      	movs	r2, #0
10069f76:	4684      	mov	ip, r0
10069f78:	0010      	movs	r0, r2
10069f7a:	002b      	movs	r3, r5
10069f7c:	3b30      	subs	r3, #48	@ 0x30
10069f7e:	2b09      	cmp	r3, #9
10069f80:	d811      	bhi.n	10069fa6 <_strtol_l.isra.0+0xc2>
10069f82:	001d      	movs	r5, r3
10069f84:	42ae      	cmp	r6, r5
10069f86:	dd1d      	ble.n	10069fc4 <_strtol_l.isra.0+0xe0>
10069f88:	1c53      	adds	r3, r2, #1
10069f8a:	d009      	beq.n	10069fa0 <_strtol_l.isra.0+0xbc>
10069f8c:	2201      	movs	r2, #1
10069f8e:	4252      	negs	r2, r2
10069f90:	4584      	cmp	ip, r0
10069f92:	d305      	bcc.n	10069fa0 <_strtol_l.isra.0+0xbc>
10069f94:	d101      	bne.n	10069f9a <_strtol_l.isra.0+0xb6>
10069f96:	42a9      	cmp	r1, r5
10069f98:	db11      	blt.n	10069fbe <_strtol_l.isra.0+0xda>
10069f9a:	2201      	movs	r2, #1
10069f9c:	4370      	muls	r0, r6
10069f9e:	1828      	adds	r0, r5, r0
10069fa0:	7825      	ldrb	r5, [r4, #0]
10069fa2:	3401      	adds	r4, #1
10069fa4:	e7e9      	b.n	10069f7a <_strtol_l.isra.0+0x96>
10069fa6:	002b      	movs	r3, r5
10069fa8:	3b41      	subs	r3, #65	@ 0x41
10069faa:	2b19      	cmp	r3, #25
10069fac:	d801      	bhi.n	10069fb2 <_strtol_l.isra.0+0xce>
10069fae:	3d37      	subs	r5, #55	@ 0x37
10069fb0:	e7e8      	b.n	10069f84 <_strtol_l.isra.0+0xa0>
10069fb2:	002b      	movs	r3, r5
10069fb4:	3b61      	subs	r3, #97	@ 0x61
10069fb6:	2b19      	cmp	r3, #25
10069fb8:	d804      	bhi.n	10069fc4 <_strtol_l.isra.0+0xe0>
10069fba:	3d57      	subs	r5, #87	@ 0x57
10069fbc:	e7e2      	b.n	10069f84 <_strtol_l.isra.0+0xa0>
10069fbe:	2201      	movs	r2, #1
10069fc0:	4252      	negs	r2, r2
10069fc2:	e7ed      	b.n	10069fa0 <_strtol_l.isra.0+0xbc>
10069fc4:	1c53      	adds	r3, r2, #1
10069fc6:	d108      	bne.n	10069fda <_strtol_l.isra.0+0xf6>
10069fc8:	2322      	movs	r3, #34	@ 0x22
10069fca:	9a03      	ldr	r2, [sp, #12]
10069fcc:	9802      	ldr	r0, [sp, #8]
10069fce:	6013      	str	r3, [r2, #0]
10069fd0:	2f00      	cmp	r7, #0
10069fd2:	d0b8      	beq.n	10069f46 <_strtol_l.isra.0+0x62>
10069fd4:	1e63      	subs	r3, r4, #1
10069fd6:	9301      	str	r3, [sp, #4]
10069fd8:	e007      	b.n	10069fea <_strtol_l.isra.0+0x106>
10069fda:	9b00      	ldr	r3, [sp, #0]
10069fdc:	2b00      	cmp	r3, #0
10069fde:	d000      	beq.n	10069fe2 <_strtol_l.isra.0+0xfe>
10069fe0:	4240      	negs	r0, r0
10069fe2:	2f00      	cmp	r7, #0
10069fe4:	d0af      	beq.n	10069f46 <_strtol_l.isra.0+0x62>
10069fe6:	2a00      	cmp	r2, #0
10069fe8:	d1f4      	bne.n	10069fd4 <_strtol_l.isra.0+0xf0>
10069fea:	9b01      	ldr	r3, [sp, #4]
10069fec:	603b      	str	r3, [r7, #0]
10069fee:	e7aa      	b.n	10069f46 <_strtol_l.isra.0+0x62>
10069ff0:	1006d521 	.word	0x1006d521
10069ff4:	7fffffff 	.word	0x7fffffff

10069ff8 <_strtol_r>:
10069ff8:	b510      	push	{r4, lr}
10069ffa:	f7ff ff73 	bl	10069ee4 <_strtol_l.isra.0>
10069ffe:	bd10      	pop	{r4, pc}

1006a000 <__ssputs_r>:
1006a000:	b5f0      	push	{r4, r5, r6, r7, lr}
1006a002:	688e      	ldr	r6, [r1, #8]
1006a004:	b085      	sub	sp, #20
1006a006:	001f      	movs	r7, r3
1006a008:	000c      	movs	r4, r1
1006a00a:	680b      	ldr	r3, [r1, #0]
1006a00c:	9002      	str	r0, [sp, #8]
1006a00e:	9203      	str	r2, [sp, #12]
1006a010:	42be      	cmp	r6, r7
1006a012:	d830      	bhi.n	1006a076 <__ssputs_r+0x76>
1006a014:	210c      	movs	r1, #12
1006a016:	5e62      	ldrsh	r2, [r4, r1]
1006a018:	2190      	movs	r1, #144	@ 0x90
1006a01a:	00c9      	lsls	r1, r1, #3
1006a01c:	420a      	tst	r2, r1
1006a01e:	d028      	beq.n	1006a072 <__ssputs_r+0x72>
1006a020:	2003      	movs	r0, #3
1006a022:	6921      	ldr	r1, [r4, #16]
1006a024:	1a5b      	subs	r3, r3, r1
1006a026:	9301      	str	r3, [sp, #4]
1006a028:	6963      	ldr	r3, [r4, #20]
1006a02a:	4343      	muls	r3, r0
1006a02c:	9801      	ldr	r0, [sp, #4]
1006a02e:	0fdd      	lsrs	r5, r3, #31
1006a030:	18ed      	adds	r5, r5, r3
1006a032:	1c7b      	adds	r3, r7, #1
1006a034:	181b      	adds	r3, r3, r0
1006a036:	106d      	asrs	r5, r5, #1
1006a038:	42ab      	cmp	r3, r5
1006a03a:	d900      	bls.n	1006a03e <__ssputs_r+0x3e>
1006a03c:	001d      	movs	r5, r3
1006a03e:	0552      	lsls	r2, r2, #21
1006a040:	d528      	bpl.n	1006a094 <__ssputs_r+0x94>
1006a042:	0029      	movs	r1, r5
1006a044:	9802      	ldr	r0, [sp, #8]
1006a046:	f7fe fbdd 	bl	10068804 <_malloc_r>
1006a04a:	1e06      	subs	r6, r0, #0
1006a04c:	d02c      	beq.n	1006a0a8 <__ssputs_r+0xa8>
1006a04e:	9a01      	ldr	r2, [sp, #4]
1006a050:	6921      	ldr	r1, [r4, #16]
1006a052:	f7fd fcde 	bl	10067a12 <memcpy>
1006a056:	89a2      	ldrh	r2, [r4, #12]
1006a058:	4b18      	ldr	r3, [pc, #96]	@ (1006a0bc <__ssputs_r+0xbc>)
1006a05a:	401a      	ands	r2, r3
1006a05c:	2380      	movs	r3, #128	@ 0x80
1006a05e:	4313      	orrs	r3, r2
1006a060:	81a3      	strh	r3, [r4, #12]
1006a062:	9b01      	ldr	r3, [sp, #4]
1006a064:	6126      	str	r6, [r4, #16]
1006a066:	18f6      	adds	r6, r6, r3
1006a068:	6026      	str	r6, [r4, #0]
1006a06a:	003e      	movs	r6, r7
1006a06c:	6165      	str	r5, [r4, #20]
1006a06e:	1aed      	subs	r5, r5, r3
1006a070:	60a5      	str	r5, [r4, #8]
1006a072:	42be      	cmp	r6, r7
1006a074:	d900      	bls.n	1006a078 <__ssputs_r+0x78>
1006a076:	003e      	movs	r6, r7
1006a078:	0032      	movs	r2, r6
1006a07a:	9903      	ldr	r1, [sp, #12]
1006a07c:	6820      	ldr	r0, [r4, #0]
1006a07e:	f000 fbb4 	bl	1006a7ea <memmove>
1006a082:	2000      	movs	r0, #0
1006a084:	68a3      	ldr	r3, [r4, #8]
1006a086:	1b9b      	subs	r3, r3, r6
1006a088:	60a3      	str	r3, [r4, #8]
1006a08a:	6823      	ldr	r3, [r4, #0]
1006a08c:	199b      	adds	r3, r3, r6
1006a08e:	6023      	str	r3, [r4, #0]
1006a090:	b005      	add	sp, #20
1006a092:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006a094:	002a      	movs	r2, r5
1006a096:	9802      	ldr	r0, [sp, #8]
1006a098:	f000 ffc6 	bl	1006b028 <_realloc_r>
1006a09c:	1e06      	subs	r6, r0, #0
1006a09e:	d1e0      	bne.n	1006a062 <__ssputs_r+0x62>
1006a0a0:	6921      	ldr	r1, [r4, #16]
1006a0a2:	9802      	ldr	r0, [sp, #8]
1006a0a4:	f7fe fb38 	bl	10068718 <_free_r>
1006a0a8:	230c      	movs	r3, #12
1006a0aa:	2001      	movs	r0, #1
1006a0ac:	9a02      	ldr	r2, [sp, #8]
1006a0ae:	4240      	negs	r0, r0
1006a0b0:	6013      	str	r3, [r2, #0]
1006a0b2:	89a2      	ldrh	r2, [r4, #12]
1006a0b4:	3334      	adds	r3, #52	@ 0x34
1006a0b6:	4313      	orrs	r3, r2
1006a0b8:	81a3      	strh	r3, [r4, #12]
1006a0ba:	e7e9      	b.n	1006a090 <__ssputs_r+0x90>
1006a0bc:	fffffb7f 	.word	0xfffffb7f

1006a0c0 <_svfiprintf_r>:
1006a0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1006a0c2:	b0a1      	sub	sp, #132	@ 0x84
1006a0c4:	9003      	str	r0, [sp, #12]
1006a0c6:	001d      	movs	r5, r3
1006a0c8:	898b      	ldrh	r3, [r1, #12]
1006a0ca:	000f      	movs	r7, r1
1006a0cc:	0016      	movs	r6, r2
1006a0ce:	061b      	lsls	r3, r3, #24
1006a0d0:	d511      	bpl.n	1006a0f6 <_svfiprintf_r+0x36>
1006a0d2:	690b      	ldr	r3, [r1, #16]
1006a0d4:	2b00      	cmp	r3, #0
1006a0d6:	d10e      	bne.n	1006a0f6 <_svfiprintf_r+0x36>
1006a0d8:	2140      	movs	r1, #64	@ 0x40
1006a0da:	f7fe fb93 	bl	10068804 <_malloc_r>
1006a0de:	6038      	str	r0, [r7, #0]
1006a0e0:	6138      	str	r0, [r7, #16]
1006a0e2:	2800      	cmp	r0, #0
1006a0e4:	d105      	bne.n	1006a0f2 <_svfiprintf_r+0x32>
1006a0e6:	230c      	movs	r3, #12
1006a0e8:	9a03      	ldr	r2, [sp, #12]
1006a0ea:	6013      	str	r3, [r2, #0]
1006a0ec:	2001      	movs	r0, #1
1006a0ee:	4240      	negs	r0, r0
1006a0f0:	e0cf      	b.n	1006a292 <_svfiprintf_r+0x1d2>
1006a0f2:	2340      	movs	r3, #64	@ 0x40
1006a0f4:	617b      	str	r3, [r7, #20]
1006a0f6:	2300      	movs	r3, #0
1006a0f8:	ac08      	add	r4, sp, #32
1006a0fa:	6163      	str	r3, [r4, #20]
1006a0fc:	3320      	adds	r3, #32
1006a0fe:	7663      	strb	r3, [r4, #25]
1006a100:	3310      	adds	r3, #16
1006a102:	76a3      	strb	r3, [r4, #26]
1006a104:	9507      	str	r5, [sp, #28]
1006a106:	0035      	movs	r5, r6
1006a108:	782b      	ldrb	r3, [r5, #0]
1006a10a:	2b00      	cmp	r3, #0
1006a10c:	d001      	beq.n	1006a112 <_svfiprintf_r+0x52>
1006a10e:	2b25      	cmp	r3, #37	@ 0x25
1006a110:	d148      	bne.n	1006a1a4 <_svfiprintf_r+0xe4>
1006a112:	1bab      	subs	r3, r5, r6
1006a114:	9305      	str	r3, [sp, #20]
1006a116:	42b5      	cmp	r5, r6
1006a118:	d00b      	beq.n	1006a132 <_svfiprintf_r+0x72>
1006a11a:	0032      	movs	r2, r6
1006a11c:	0039      	movs	r1, r7
1006a11e:	9803      	ldr	r0, [sp, #12]
1006a120:	f7ff ff6e 	bl	1006a000 <__ssputs_r>
1006a124:	3001      	adds	r0, #1
1006a126:	d100      	bne.n	1006a12a <_svfiprintf_r+0x6a>
1006a128:	e0ae      	b.n	1006a288 <_svfiprintf_r+0x1c8>
1006a12a:	6963      	ldr	r3, [r4, #20]
1006a12c:	9a05      	ldr	r2, [sp, #20]
1006a12e:	189b      	adds	r3, r3, r2
1006a130:	6163      	str	r3, [r4, #20]
1006a132:	782b      	ldrb	r3, [r5, #0]
1006a134:	2b00      	cmp	r3, #0
1006a136:	d100      	bne.n	1006a13a <_svfiprintf_r+0x7a>
1006a138:	e0a6      	b.n	1006a288 <_svfiprintf_r+0x1c8>
1006a13a:	2201      	movs	r2, #1
1006a13c:	2300      	movs	r3, #0
1006a13e:	4252      	negs	r2, r2
1006a140:	6062      	str	r2, [r4, #4]
1006a142:	a904      	add	r1, sp, #16
1006a144:	3254      	adds	r2, #84	@ 0x54
1006a146:	1852      	adds	r2, r2, r1
1006a148:	1c6e      	adds	r6, r5, #1
1006a14a:	6023      	str	r3, [r4, #0]
1006a14c:	60e3      	str	r3, [r4, #12]
1006a14e:	60a3      	str	r3, [r4, #8]
1006a150:	7013      	strb	r3, [r2, #0]
1006a152:	65a3      	str	r3, [r4, #88]	@ 0x58
1006a154:	4b54      	ldr	r3, [pc, #336]	@ (1006a2a8 <_svfiprintf_r+0x1e8>)
1006a156:	2205      	movs	r2, #5
1006a158:	0018      	movs	r0, r3
1006a15a:	7831      	ldrb	r1, [r6, #0]
1006a15c:	9305      	str	r3, [sp, #20]
1006a15e:	f7fd fc4d 	bl	100679fc <memchr>
1006a162:	1c75      	adds	r5, r6, #1
1006a164:	2800      	cmp	r0, #0
1006a166:	d11f      	bne.n	1006a1a8 <_svfiprintf_r+0xe8>
1006a168:	6822      	ldr	r2, [r4, #0]
1006a16a:	06d3      	lsls	r3, r2, #27
1006a16c:	d504      	bpl.n	1006a178 <_svfiprintf_r+0xb8>
1006a16e:	2353      	movs	r3, #83	@ 0x53
1006a170:	a904      	add	r1, sp, #16
1006a172:	185b      	adds	r3, r3, r1
1006a174:	2120      	movs	r1, #32
1006a176:	7019      	strb	r1, [r3, #0]
1006a178:	0713      	lsls	r3, r2, #28
1006a17a:	d504      	bpl.n	1006a186 <_svfiprintf_r+0xc6>
1006a17c:	2353      	movs	r3, #83	@ 0x53
1006a17e:	a904      	add	r1, sp, #16
1006a180:	185b      	adds	r3, r3, r1
1006a182:	212b      	movs	r1, #43	@ 0x2b
1006a184:	7019      	strb	r1, [r3, #0]
1006a186:	7833      	ldrb	r3, [r6, #0]
1006a188:	2b2a      	cmp	r3, #42	@ 0x2a
1006a18a:	d016      	beq.n	1006a1ba <_svfiprintf_r+0xfa>
1006a18c:	0035      	movs	r5, r6
1006a18e:	2100      	movs	r1, #0
1006a190:	200a      	movs	r0, #10
1006a192:	68e3      	ldr	r3, [r4, #12]
1006a194:	782a      	ldrb	r2, [r5, #0]
1006a196:	1c6e      	adds	r6, r5, #1
1006a198:	3a30      	subs	r2, #48	@ 0x30
1006a19a:	2a09      	cmp	r2, #9
1006a19c:	d950      	bls.n	1006a240 <_svfiprintf_r+0x180>
1006a19e:	2900      	cmp	r1, #0
1006a1a0:	d111      	bne.n	1006a1c6 <_svfiprintf_r+0x106>
1006a1a2:	e017      	b.n	1006a1d4 <_svfiprintf_r+0x114>
1006a1a4:	3501      	adds	r5, #1
1006a1a6:	e7af      	b.n	1006a108 <_svfiprintf_r+0x48>
1006a1a8:	9b05      	ldr	r3, [sp, #20]
1006a1aa:	6822      	ldr	r2, [r4, #0]
1006a1ac:	1ac0      	subs	r0, r0, r3
1006a1ae:	2301      	movs	r3, #1
1006a1b0:	4083      	lsls	r3, r0
1006a1b2:	4313      	orrs	r3, r2
1006a1b4:	002e      	movs	r6, r5
1006a1b6:	6023      	str	r3, [r4, #0]
1006a1b8:	e7cc      	b.n	1006a154 <_svfiprintf_r+0x94>
1006a1ba:	9b07      	ldr	r3, [sp, #28]
1006a1bc:	1d19      	adds	r1, r3, #4
1006a1be:	681b      	ldr	r3, [r3, #0]
1006a1c0:	9107      	str	r1, [sp, #28]
1006a1c2:	2b00      	cmp	r3, #0
1006a1c4:	db01      	blt.n	1006a1ca <_svfiprintf_r+0x10a>
1006a1c6:	930b      	str	r3, [sp, #44]	@ 0x2c
1006a1c8:	e004      	b.n	1006a1d4 <_svfiprintf_r+0x114>
1006a1ca:	425b      	negs	r3, r3
1006a1cc:	60e3      	str	r3, [r4, #12]
1006a1ce:	2302      	movs	r3, #2
1006a1d0:	4313      	orrs	r3, r2
1006a1d2:	6023      	str	r3, [r4, #0]
1006a1d4:	782b      	ldrb	r3, [r5, #0]
1006a1d6:	2b2e      	cmp	r3, #46	@ 0x2e
1006a1d8:	d10c      	bne.n	1006a1f4 <_svfiprintf_r+0x134>
1006a1da:	786b      	ldrb	r3, [r5, #1]
1006a1dc:	2b2a      	cmp	r3, #42	@ 0x2a
1006a1de:	d134      	bne.n	1006a24a <_svfiprintf_r+0x18a>
1006a1e0:	9b07      	ldr	r3, [sp, #28]
1006a1e2:	3502      	adds	r5, #2
1006a1e4:	1d1a      	adds	r2, r3, #4
1006a1e6:	681b      	ldr	r3, [r3, #0]
1006a1e8:	9207      	str	r2, [sp, #28]
1006a1ea:	2b00      	cmp	r3, #0
1006a1ec:	da01      	bge.n	1006a1f2 <_svfiprintf_r+0x132>
1006a1ee:	2301      	movs	r3, #1
1006a1f0:	425b      	negs	r3, r3
1006a1f2:	9309      	str	r3, [sp, #36]	@ 0x24
1006a1f4:	4e2d      	ldr	r6, [pc, #180]	@ (1006a2ac <_svfiprintf_r+0x1ec>)
1006a1f6:	2203      	movs	r2, #3
1006a1f8:	0030      	movs	r0, r6
1006a1fa:	7829      	ldrb	r1, [r5, #0]
1006a1fc:	f7fd fbfe 	bl	100679fc <memchr>
1006a200:	2800      	cmp	r0, #0
1006a202:	d006      	beq.n	1006a212 <_svfiprintf_r+0x152>
1006a204:	2340      	movs	r3, #64	@ 0x40
1006a206:	1b80      	subs	r0, r0, r6
1006a208:	4083      	lsls	r3, r0
1006a20a:	6822      	ldr	r2, [r4, #0]
1006a20c:	3501      	adds	r5, #1
1006a20e:	4313      	orrs	r3, r2
1006a210:	6023      	str	r3, [r4, #0]
1006a212:	7829      	ldrb	r1, [r5, #0]
1006a214:	2206      	movs	r2, #6
1006a216:	4826      	ldr	r0, [pc, #152]	@ (1006a2b0 <_svfiprintf_r+0x1f0>)
1006a218:	1c6e      	adds	r6, r5, #1
1006a21a:	7621      	strb	r1, [r4, #24]
1006a21c:	f7fd fbee 	bl	100679fc <memchr>
1006a220:	2800      	cmp	r0, #0
1006a222:	d038      	beq.n	1006a296 <_svfiprintf_r+0x1d6>
1006a224:	4b23      	ldr	r3, [pc, #140]	@ (1006a2b4 <_svfiprintf_r+0x1f4>)
1006a226:	2b00      	cmp	r3, #0
1006a228:	d122      	bne.n	1006a270 <_svfiprintf_r+0x1b0>
1006a22a:	2207      	movs	r2, #7
1006a22c:	9b07      	ldr	r3, [sp, #28]
1006a22e:	3307      	adds	r3, #7
1006a230:	4393      	bics	r3, r2
1006a232:	3308      	adds	r3, #8
1006a234:	9307      	str	r3, [sp, #28]
1006a236:	6963      	ldr	r3, [r4, #20]
1006a238:	9a04      	ldr	r2, [sp, #16]
1006a23a:	189b      	adds	r3, r3, r2
1006a23c:	6163      	str	r3, [r4, #20]
1006a23e:	e762      	b.n	1006a106 <_svfiprintf_r+0x46>
1006a240:	4343      	muls	r3, r0
1006a242:	0035      	movs	r5, r6
1006a244:	2101      	movs	r1, #1
1006a246:	189b      	adds	r3, r3, r2
1006a248:	e7a4      	b.n	1006a194 <_svfiprintf_r+0xd4>
1006a24a:	2300      	movs	r3, #0
1006a24c:	200a      	movs	r0, #10
1006a24e:	0019      	movs	r1, r3
1006a250:	3501      	adds	r5, #1
1006a252:	6063      	str	r3, [r4, #4]
1006a254:	782a      	ldrb	r2, [r5, #0]
1006a256:	1c6e      	adds	r6, r5, #1
1006a258:	3a30      	subs	r2, #48	@ 0x30
1006a25a:	2a09      	cmp	r2, #9
1006a25c:	d903      	bls.n	1006a266 <_svfiprintf_r+0x1a6>
1006a25e:	2b00      	cmp	r3, #0
1006a260:	d0c8      	beq.n	1006a1f4 <_svfiprintf_r+0x134>
1006a262:	9109      	str	r1, [sp, #36]	@ 0x24
1006a264:	e7c6      	b.n	1006a1f4 <_svfiprintf_r+0x134>
1006a266:	4341      	muls	r1, r0
1006a268:	0035      	movs	r5, r6
1006a26a:	2301      	movs	r3, #1
1006a26c:	1889      	adds	r1, r1, r2
1006a26e:	e7f1      	b.n	1006a254 <_svfiprintf_r+0x194>
1006a270:	aa07      	add	r2, sp, #28
1006a272:	9200      	str	r2, [sp, #0]
1006a274:	0021      	movs	r1, r4
1006a276:	003a      	movs	r2, r7
1006a278:	4b0f      	ldr	r3, [pc, #60]	@ (1006a2b8 <_svfiprintf_r+0x1f8>)
1006a27a:	9803      	ldr	r0, [sp, #12]
1006a27c:	f7fc fa7c 	bl	10066778 <_printf_float>
1006a280:	9004      	str	r0, [sp, #16]
1006a282:	9b04      	ldr	r3, [sp, #16]
1006a284:	3301      	adds	r3, #1
1006a286:	d1d6      	bne.n	1006a236 <_svfiprintf_r+0x176>
1006a288:	89bb      	ldrh	r3, [r7, #12]
1006a28a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006a28c:	065b      	lsls	r3, r3, #25
1006a28e:	d500      	bpl.n	1006a292 <_svfiprintf_r+0x1d2>
1006a290:	e72c      	b.n	1006a0ec <_svfiprintf_r+0x2c>
1006a292:	b021      	add	sp, #132	@ 0x84
1006a294:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006a296:	aa07      	add	r2, sp, #28
1006a298:	9200      	str	r2, [sp, #0]
1006a29a:	0021      	movs	r1, r4
1006a29c:	003a      	movs	r2, r7
1006a29e:	4b06      	ldr	r3, [pc, #24]	@ (1006a2b8 <_svfiprintf_r+0x1f8>)
1006a2a0:	9803      	ldr	r0, [sp, #12]
1006a2a2:	f7fc fd17 	bl	10066cd4 <_printf_i>
1006a2a6:	e7eb      	b.n	1006a280 <_svfiprintf_r+0x1c0>
1006a2a8:	1006d319 	.word	0x1006d319
1006a2ac:	1006d31f 	.word	0x1006d31f
1006a2b0:	1006d323 	.word	0x1006d323
1006a2b4:	10066779 	.word	0x10066779
1006a2b8:	1006a001 	.word	0x1006a001

1006a2bc <__sfputc_r>:
1006a2bc:	6893      	ldr	r3, [r2, #8]
1006a2be:	b510      	push	{r4, lr}
1006a2c0:	3b01      	subs	r3, #1
1006a2c2:	6093      	str	r3, [r2, #8]
1006a2c4:	2b00      	cmp	r3, #0
1006a2c6:	da04      	bge.n	1006a2d2 <__sfputc_r+0x16>
1006a2c8:	6994      	ldr	r4, [r2, #24]
1006a2ca:	42a3      	cmp	r3, r4
1006a2cc:	db07      	blt.n	1006a2de <__sfputc_r+0x22>
1006a2ce:	290a      	cmp	r1, #10
1006a2d0:	d005      	beq.n	1006a2de <__sfputc_r+0x22>
1006a2d2:	6813      	ldr	r3, [r2, #0]
1006a2d4:	1c58      	adds	r0, r3, #1
1006a2d6:	6010      	str	r0, [r2, #0]
1006a2d8:	7019      	strb	r1, [r3, #0]
1006a2da:	0008      	movs	r0, r1
1006a2dc:	bd10      	pop	{r4, pc}
1006a2de:	f7fd fa73 	bl	100677c8 <__swbuf_r>
1006a2e2:	0001      	movs	r1, r0
1006a2e4:	e7f9      	b.n	1006a2da <__sfputc_r+0x1e>

1006a2e6 <__sfputs_r>:
1006a2e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006a2e8:	0006      	movs	r6, r0
1006a2ea:	000f      	movs	r7, r1
1006a2ec:	0014      	movs	r4, r2
1006a2ee:	18d5      	adds	r5, r2, r3
1006a2f0:	42ac      	cmp	r4, r5
1006a2f2:	d101      	bne.n	1006a2f8 <__sfputs_r+0x12>
1006a2f4:	2000      	movs	r0, #0
1006a2f6:	e007      	b.n	1006a308 <__sfputs_r+0x22>
1006a2f8:	7821      	ldrb	r1, [r4, #0]
1006a2fa:	003a      	movs	r2, r7
1006a2fc:	0030      	movs	r0, r6
1006a2fe:	f7ff ffdd 	bl	1006a2bc <__sfputc_r>
1006a302:	3401      	adds	r4, #1
1006a304:	1c43      	adds	r3, r0, #1
1006a306:	d1f3      	bne.n	1006a2f0 <__sfputs_r+0xa>
1006a308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1006a30c <_vfiprintf_r>:
1006a30c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006a30e:	b0a1      	sub	sp, #132	@ 0x84
1006a310:	000f      	movs	r7, r1
1006a312:	0015      	movs	r5, r2
1006a314:	001e      	movs	r6, r3
1006a316:	9003      	str	r0, [sp, #12]
1006a318:	2800      	cmp	r0, #0
1006a31a:	d004      	beq.n	1006a326 <_vfiprintf_r+0x1a>
1006a31c:	6a03      	ldr	r3, [r0, #32]
1006a31e:	2b00      	cmp	r3, #0
1006a320:	d101      	bne.n	1006a326 <_vfiprintf_r+0x1a>
1006a322:	f7fd f87f 	bl	10067424 <__sinit>
1006a326:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1006a328:	07db      	lsls	r3, r3, #31
1006a32a:	d405      	bmi.n	1006a338 <_vfiprintf_r+0x2c>
1006a32c:	89bb      	ldrh	r3, [r7, #12]
1006a32e:	059b      	lsls	r3, r3, #22
1006a330:	d402      	bmi.n	1006a338 <_vfiprintf_r+0x2c>
1006a332:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1006a334:	f7fd fb57 	bl	100679e6 <__retarget_lock_acquire_recursive>
1006a338:	89bb      	ldrh	r3, [r7, #12]
1006a33a:	071b      	lsls	r3, r3, #28
1006a33c:	d502      	bpl.n	1006a344 <_vfiprintf_r+0x38>
1006a33e:	693b      	ldr	r3, [r7, #16]
1006a340:	2b00      	cmp	r3, #0
1006a342:	d113      	bne.n	1006a36c <_vfiprintf_r+0x60>
1006a344:	0039      	movs	r1, r7
1006a346:	9803      	ldr	r0, [sp, #12]
1006a348:	f7fd fa80 	bl	1006784c <__swsetup_r>
1006a34c:	2800      	cmp	r0, #0
1006a34e:	d00d      	beq.n	1006a36c <_vfiprintf_r+0x60>
1006a350:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1006a352:	07db      	lsls	r3, r3, #31
1006a354:	d503      	bpl.n	1006a35e <_vfiprintf_r+0x52>
1006a356:	2001      	movs	r0, #1
1006a358:	4240      	negs	r0, r0
1006a35a:	b021      	add	sp, #132	@ 0x84
1006a35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006a35e:	89bb      	ldrh	r3, [r7, #12]
1006a360:	059b      	lsls	r3, r3, #22
1006a362:	d4f8      	bmi.n	1006a356 <_vfiprintf_r+0x4a>
1006a364:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1006a366:	f7fd fb3f 	bl	100679e8 <__retarget_lock_release_recursive>
1006a36a:	e7f4      	b.n	1006a356 <_vfiprintf_r+0x4a>
1006a36c:	2300      	movs	r3, #0
1006a36e:	ac08      	add	r4, sp, #32
1006a370:	6163      	str	r3, [r4, #20]
1006a372:	3320      	adds	r3, #32
1006a374:	7663      	strb	r3, [r4, #25]
1006a376:	3310      	adds	r3, #16
1006a378:	76a3      	strb	r3, [r4, #26]
1006a37a:	9607      	str	r6, [sp, #28]
1006a37c:	002e      	movs	r6, r5
1006a37e:	7833      	ldrb	r3, [r6, #0]
1006a380:	2b00      	cmp	r3, #0
1006a382:	d001      	beq.n	1006a388 <_vfiprintf_r+0x7c>
1006a384:	2b25      	cmp	r3, #37	@ 0x25
1006a386:	d148      	bne.n	1006a41a <_vfiprintf_r+0x10e>
1006a388:	1b73      	subs	r3, r6, r5
1006a38a:	9305      	str	r3, [sp, #20]
1006a38c:	42ae      	cmp	r6, r5
1006a38e:	d00b      	beq.n	1006a3a8 <_vfiprintf_r+0x9c>
1006a390:	002a      	movs	r2, r5
1006a392:	0039      	movs	r1, r7
1006a394:	9803      	ldr	r0, [sp, #12]
1006a396:	f7ff ffa6 	bl	1006a2e6 <__sfputs_r>
1006a39a:	3001      	adds	r0, #1
1006a39c:	d100      	bne.n	1006a3a0 <_vfiprintf_r+0x94>
1006a39e:	e0ae      	b.n	1006a4fe <_vfiprintf_r+0x1f2>
1006a3a0:	6963      	ldr	r3, [r4, #20]
1006a3a2:	9a05      	ldr	r2, [sp, #20]
1006a3a4:	189b      	adds	r3, r3, r2
1006a3a6:	6163      	str	r3, [r4, #20]
1006a3a8:	7833      	ldrb	r3, [r6, #0]
1006a3aa:	2b00      	cmp	r3, #0
1006a3ac:	d100      	bne.n	1006a3b0 <_vfiprintf_r+0xa4>
1006a3ae:	e0a6      	b.n	1006a4fe <_vfiprintf_r+0x1f2>
1006a3b0:	2201      	movs	r2, #1
1006a3b2:	2300      	movs	r3, #0
1006a3b4:	4252      	negs	r2, r2
1006a3b6:	6062      	str	r2, [r4, #4]
1006a3b8:	a904      	add	r1, sp, #16
1006a3ba:	3254      	adds	r2, #84	@ 0x54
1006a3bc:	1852      	adds	r2, r2, r1
1006a3be:	1c75      	adds	r5, r6, #1
1006a3c0:	6023      	str	r3, [r4, #0]
1006a3c2:	60e3      	str	r3, [r4, #12]
1006a3c4:	60a3      	str	r3, [r4, #8]
1006a3c6:	7013      	strb	r3, [r2, #0]
1006a3c8:	65a3      	str	r3, [r4, #88]	@ 0x58
1006a3ca:	4b59      	ldr	r3, [pc, #356]	@ (1006a530 <_vfiprintf_r+0x224>)
1006a3cc:	2205      	movs	r2, #5
1006a3ce:	0018      	movs	r0, r3
1006a3d0:	7829      	ldrb	r1, [r5, #0]
1006a3d2:	9305      	str	r3, [sp, #20]
1006a3d4:	f7fd fb12 	bl	100679fc <memchr>
1006a3d8:	1c6e      	adds	r6, r5, #1
1006a3da:	2800      	cmp	r0, #0
1006a3dc:	d11f      	bne.n	1006a41e <_vfiprintf_r+0x112>
1006a3de:	6822      	ldr	r2, [r4, #0]
1006a3e0:	06d3      	lsls	r3, r2, #27
1006a3e2:	d504      	bpl.n	1006a3ee <_vfiprintf_r+0xe2>
1006a3e4:	2353      	movs	r3, #83	@ 0x53
1006a3e6:	a904      	add	r1, sp, #16
1006a3e8:	185b      	adds	r3, r3, r1
1006a3ea:	2120      	movs	r1, #32
1006a3ec:	7019      	strb	r1, [r3, #0]
1006a3ee:	0713      	lsls	r3, r2, #28
1006a3f0:	d504      	bpl.n	1006a3fc <_vfiprintf_r+0xf0>
1006a3f2:	2353      	movs	r3, #83	@ 0x53
1006a3f4:	a904      	add	r1, sp, #16
1006a3f6:	185b      	adds	r3, r3, r1
1006a3f8:	212b      	movs	r1, #43	@ 0x2b
1006a3fa:	7019      	strb	r1, [r3, #0]
1006a3fc:	782b      	ldrb	r3, [r5, #0]
1006a3fe:	2b2a      	cmp	r3, #42	@ 0x2a
1006a400:	d016      	beq.n	1006a430 <_vfiprintf_r+0x124>
1006a402:	002e      	movs	r6, r5
1006a404:	2100      	movs	r1, #0
1006a406:	200a      	movs	r0, #10
1006a408:	68e3      	ldr	r3, [r4, #12]
1006a40a:	7832      	ldrb	r2, [r6, #0]
1006a40c:	1c75      	adds	r5, r6, #1
1006a40e:	3a30      	subs	r2, #48	@ 0x30
1006a410:	2a09      	cmp	r2, #9
1006a412:	d950      	bls.n	1006a4b6 <_vfiprintf_r+0x1aa>
1006a414:	2900      	cmp	r1, #0
1006a416:	d111      	bne.n	1006a43c <_vfiprintf_r+0x130>
1006a418:	e017      	b.n	1006a44a <_vfiprintf_r+0x13e>
1006a41a:	3601      	adds	r6, #1
1006a41c:	e7af      	b.n	1006a37e <_vfiprintf_r+0x72>
1006a41e:	9b05      	ldr	r3, [sp, #20]
1006a420:	6822      	ldr	r2, [r4, #0]
1006a422:	1ac0      	subs	r0, r0, r3
1006a424:	2301      	movs	r3, #1
1006a426:	4083      	lsls	r3, r0
1006a428:	4313      	orrs	r3, r2
1006a42a:	0035      	movs	r5, r6
1006a42c:	6023      	str	r3, [r4, #0]
1006a42e:	e7cc      	b.n	1006a3ca <_vfiprintf_r+0xbe>
1006a430:	9b07      	ldr	r3, [sp, #28]
1006a432:	1d19      	adds	r1, r3, #4
1006a434:	681b      	ldr	r3, [r3, #0]
1006a436:	9107      	str	r1, [sp, #28]
1006a438:	2b00      	cmp	r3, #0
1006a43a:	db01      	blt.n	1006a440 <_vfiprintf_r+0x134>
1006a43c:	930b      	str	r3, [sp, #44]	@ 0x2c
1006a43e:	e004      	b.n	1006a44a <_vfiprintf_r+0x13e>
1006a440:	425b      	negs	r3, r3
1006a442:	60e3      	str	r3, [r4, #12]
1006a444:	2302      	movs	r3, #2
1006a446:	4313      	orrs	r3, r2
1006a448:	6023      	str	r3, [r4, #0]
1006a44a:	7833      	ldrb	r3, [r6, #0]
1006a44c:	2b2e      	cmp	r3, #46	@ 0x2e
1006a44e:	d10c      	bne.n	1006a46a <_vfiprintf_r+0x15e>
1006a450:	7873      	ldrb	r3, [r6, #1]
1006a452:	2b2a      	cmp	r3, #42	@ 0x2a
1006a454:	d134      	bne.n	1006a4c0 <_vfiprintf_r+0x1b4>
1006a456:	9b07      	ldr	r3, [sp, #28]
1006a458:	3602      	adds	r6, #2
1006a45a:	1d1a      	adds	r2, r3, #4
1006a45c:	681b      	ldr	r3, [r3, #0]
1006a45e:	9207      	str	r2, [sp, #28]
1006a460:	2b00      	cmp	r3, #0
1006a462:	da01      	bge.n	1006a468 <_vfiprintf_r+0x15c>
1006a464:	2301      	movs	r3, #1
1006a466:	425b      	negs	r3, r3
1006a468:	9309      	str	r3, [sp, #36]	@ 0x24
1006a46a:	4d32      	ldr	r5, [pc, #200]	@ (1006a534 <_vfiprintf_r+0x228>)
1006a46c:	2203      	movs	r2, #3
1006a46e:	0028      	movs	r0, r5
1006a470:	7831      	ldrb	r1, [r6, #0]
1006a472:	f7fd fac3 	bl	100679fc <memchr>
1006a476:	2800      	cmp	r0, #0
1006a478:	d006      	beq.n	1006a488 <_vfiprintf_r+0x17c>
1006a47a:	2340      	movs	r3, #64	@ 0x40
1006a47c:	1b40      	subs	r0, r0, r5
1006a47e:	4083      	lsls	r3, r0
1006a480:	6822      	ldr	r2, [r4, #0]
1006a482:	3601      	adds	r6, #1
1006a484:	4313      	orrs	r3, r2
1006a486:	6023      	str	r3, [r4, #0]
1006a488:	7831      	ldrb	r1, [r6, #0]
1006a48a:	2206      	movs	r2, #6
1006a48c:	482a      	ldr	r0, [pc, #168]	@ (1006a538 <_vfiprintf_r+0x22c>)
1006a48e:	1c75      	adds	r5, r6, #1
1006a490:	7621      	strb	r1, [r4, #24]
1006a492:	f7fd fab3 	bl	100679fc <memchr>
1006a496:	2800      	cmp	r0, #0
1006a498:	d040      	beq.n	1006a51c <_vfiprintf_r+0x210>
1006a49a:	4b28      	ldr	r3, [pc, #160]	@ (1006a53c <_vfiprintf_r+0x230>)
1006a49c:	2b00      	cmp	r3, #0
1006a49e:	d122      	bne.n	1006a4e6 <_vfiprintf_r+0x1da>
1006a4a0:	2207      	movs	r2, #7
1006a4a2:	9b07      	ldr	r3, [sp, #28]
1006a4a4:	3307      	adds	r3, #7
1006a4a6:	4393      	bics	r3, r2
1006a4a8:	3308      	adds	r3, #8
1006a4aa:	9307      	str	r3, [sp, #28]
1006a4ac:	6963      	ldr	r3, [r4, #20]
1006a4ae:	9a04      	ldr	r2, [sp, #16]
1006a4b0:	189b      	adds	r3, r3, r2
1006a4b2:	6163      	str	r3, [r4, #20]
1006a4b4:	e762      	b.n	1006a37c <_vfiprintf_r+0x70>
1006a4b6:	4343      	muls	r3, r0
1006a4b8:	002e      	movs	r6, r5
1006a4ba:	2101      	movs	r1, #1
1006a4bc:	189b      	adds	r3, r3, r2
1006a4be:	e7a4      	b.n	1006a40a <_vfiprintf_r+0xfe>
1006a4c0:	2300      	movs	r3, #0
1006a4c2:	200a      	movs	r0, #10
1006a4c4:	0019      	movs	r1, r3
1006a4c6:	3601      	adds	r6, #1
1006a4c8:	6063      	str	r3, [r4, #4]
1006a4ca:	7832      	ldrb	r2, [r6, #0]
1006a4cc:	1c75      	adds	r5, r6, #1
1006a4ce:	3a30      	subs	r2, #48	@ 0x30
1006a4d0:	2a09      	cmp	r2, #9
1006a4d2:	d903      	bls.n	1006a4dc <_vfiprintf_r+0x1d0>
1006a4d4:	2b00      	cmp	r3, #0
1006a4d6:	d0c8      	beq.n	1006a46a <_vfiprintf_r+0x15e>
1006a4d8:	9109      	str	r1, [sp, #36]	@ 0x24
1006a4da:	e7c6      	b.n	1006a46a <_vfiprintf_r+0x15e>
1006a4dc:	4341      	muls	r1, r0
1006a4de:	002e      	movs	r6, r5
1006a4e0:	2301      	movs	r3, #1
1006a4e2:	1889      	adds	r1, r1, r2
1006a4e4:	e7f1      	b.n	1006a4ca <_vfiprintf_r+0x1be>
1006a4e6:	aa07      	add	r2, sp, #28
1006a4e8:	9200      	str	r2, [sp, #0]
1006a4ea:	0021      	movs	r1, r4
1006a4ec:	003a      	movs	r2, r7
1006a4ee:	4b14      	ldr	r3, [pc, #80]	@ (1006a540 <_vfiprintf_r+0x234>)
1006a4f0:	9803      	ldr	r0, [sp, #12]
1006a4f2:	f7fc f941 	bl	10066778 <_printf_float>
1006a4f6:	9004      	str	r0, [sp, #16]
1006a4f8:	9b04      	ldr	r3, [sp, #16]
1006a4fa:	3301      	adds	r3, #1
1006a4fc:	d1d6      	bne.n	1006a4ac <_vfiprintf_r+0x1a0>
1006a4fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1006a500:	07db      	lsls	r3, r3, #31
1006a502:	d405      	bmi.n	1006a510 <_vfiprintf_r+0x204>
1006a504:	89bb      	ldrh	r3, [r7, #12]
1006a506:	059b      	lsls	r3, r3, #22
1006a508:	d402      	bmi.n	1006a510 <_vfiprintf_r+0x204>
1006a50a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1006a50c:	f7fd fa6c 	bl	100679e8 <__retarget_lock_release_recursive>
1006a510:	89bb      	ldrh	r3, [r7, #12]
1006a512:	065b      	lsls	r3, r3, #25
1006a514:	d500      	bpl.n	1006a518 <_vfiprintf_r+0x20c>
1006a516:	e71e      	b.n	1006a356 <_vfiprintf_r+0x4a>
1006a518:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006a51a:	e71e      	b.n	1006a35a <_vfiprintf_r+0x4e>
1006a51c:	aa07      	add	r2, sp, #28
1006a51e:	9200      	str	r2, [sp, #0]
1006a520:	0021      	movs	r1, r4
1006a522:	003a      	movs	r2, r7
1006a524:	4b06      	ldr	r3, [pc, #24]	@ (1006a540 <_vfiprintf_r+0x234>)
1006a526:	9803      	ldr	r0, [sp, #12]
1006a528:	f7fc fbd4 	bl	10066cd4 <_printf_i>
1006a52c:	e7e3      	b.n	1006a4f6 <_vfiprintf_r+0x1ea>
1006a52e:	46c0      	nop			@ (mov r8, r8)
1006a530:	1006d319 	.word	0x1006d319
1006a534:	1006d31f 	.word	0x1006d31f
1006a538:	1006d323 	.word	0x1006d323
1006a53c:	10066779 	.word	0x10066779
1006a540:	1006a2e7 	.word	0x1006a2e7

1006a544 <__sflush_r>:
1006a544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006a546:	220c      	movs	r2, #12
1006a548:	5e8b      	ldrsh	r3, [r1, r2]
1006a54a:	0005      	movs	r5, r0
1006a54c:	000c      	movs	r4, r1
1006a54e:	071a      	lsls	r2, r3, #28
1006a550:	d456      	bmi.n	1006a600 <__sflush_r+0xbc>
1006a552:	684a      	ldr	r2, [r1, #4]
1006a554:	2a00      	cmp	r2, #0
1006a556:	dc02      	bgt.n	1006a55e <__sflush_r+0x1a>
1006a558:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
1006a55a:	2a00      	cmp	r2, #0
1006a55c:	dd4e      	ble.n	1006a5fc <__sflush_r+0xb8>
1006a55e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1006a560:	2f00      	cmp	r7, #0
1006a562:	d04b      	beq.n	1006a5fc <__sflush_r+0xb8>
1006a564:	2200      	movs	r2, #0
1006a566:	2080      	movs	r0, #128	@ 0x80
1006a568:	682e      	ldr	r6, [r5, #0]
1006a56a:	602a      	str	r2, [r5, #0]
1006a56c:	001a      	movs	r2, r3
1006a56e:	0140      	lsls	r0, r0, #5
1006a570:	6a21      	ldr	r1, [r4, #32]
1006a572:	4002      	ands	r2, r0
1006a574:	4203      	tst	r3, r0
1006a576:	d033      	beq.n	1006a5e0 <__sflush_r+0x9c>
1006a578:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1006a57a:	89a3      	ldrh	r3, [r4, #12]
1006a57c:	075b      	lsls	r3, r3, #29
1006a57e:	d506      	bpl.n	1006a58e <__sflush_r+0x4a>
1006a580:	6863      	ldr	r3, [r4, #4]
1006a582:	1ad2      	subs	r2, r2, r3
1006a584:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1006a586:	2b00      	cmp	r3, #0
1006a588:	d001      	beq.n	1006a58e <__sflush_r+0x4a>
1006a58a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1006a58c:	1ad2      	subs	r2, r2, r3
1006a58e:	2300      	movs	r3, #0
1006a590:	0028      	movs	r0, r5
1006a592:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1006a594:	6a21      	ldr	r1, [r4, #32]
1006a596:	47b8      	blx	r7
1006a598:	89a2      	ldrh	r2, [r4, #12]
1006a59a:	1c43      	adds	r3, r0, #1
1006a59c:	d106      	bne.n	1006a5ac <__sflush_r+0x68>
1006a59e:	6829      	ldr	r1, [r5, #0]
1006a5a0:	291d      	cmp	r1, #29
1006a5a2:	d846      	bhi.n	1006a632 <__sflush_r+0xee>
1006a5a4:	4b29      	ldr	r3, [pc, #164]	@ (1006a64c <__sflush_r+0x108>)
1006a5a6:	40cb      	lsrs	r3, r1
1006a5a8:	07db      	lsls	r3, r3, #31
1006a5aa:	d542      	bpl.n	1006a632 <__sflush_r+0xee>
1006a5ac:	2300      	movs	r3, #0
1006a5ae:	6063      	str	r3, [r4, #4]
1006a5b0:	6923      	ldr	r3, [r4, #16]
1006a5b2:	6023      	str	r3, [r4, #0]
1006a5b4:	04d2      	lsls	r2, r2, #19
1006a5b6:	d505      	bpl.n	1006a5c4 <__sflush_r+0x80>
1006a5b8:	1c43      	adds	r3, r0, #1
1006a5ba:	d102      	bne.n	1006a5c2 <__sflush_r+0x7e>
1006a5bc:	682b      	ldr	r3, [r5, #0]
1006a5be:	2b00      	cmp	r3, #0
1006a5c0:	d100      	bne.n	1006a5c4 <__sflush_r+0x80>
1006a5c2:	6560      	str	r0, [r4, #84]	@ 0x54
1006a5c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1006a5c6:	602e      	str	r6, [r5, #0]
1006a5c8:	2900      	cmp	r1, #0
1006a5ca:	d017      	beq.n	1006a5fc <__sflush_r+0xb8>
1006a5cc:	0023      	movs	r3, r4
1006a5ce:	3344      	adds	r3, #68	@ 0x44
1006a5d0:	4299      	cmp	r1, r3
1006a5d2:	d002      	beq.n	1006a5da <__sflush_r+0x96>
1006a5d4:	0028      	movs	r0, r5
1006a5d6:	f7fe f89f 	bl	10068718 <_free_r>
1006a5da:	2300      	movs	r3, #0
1006a5dc:	6363      	str	r3, [r4, #52]	@ 0x34
1006a5de:	e00d      	b.n	1006a5fc <__sflush_r+0xb8>
1006a5e0:	2301      	movs	r3, #1
1006a5e2:	0028      	movs	r0, r5
1006a5e4:	47b8      	blx	r7
1006a5e6:	0002      	movs	r2, r0
1006a5e8:	1c43      	adds	r3, r0, #1
1006a5ea:	d1c6      	bne.n	1006a57a <__sflush_r+0x36>
1006a5ec:	682b      	ldr	r3, [r5, #0]
1006a5ee:	2b00      	cmp	r3, #0
1006a5f0:	d0c3      	beq.n	1006a57a <__sflush_r+0x36>
1006a5f2:	2b1d      	cmp	r3, #29
1006a5f4:	d001      	beq.n	1006a5fa <__sflush_r+0xb6>
1006a5f6:	2b16      	cmp	r3, #22
1006a5f8:	d11a      	bne.n	1006a630 <__sflush_r+0xec>
1006a5fa:	602e      	str	r6, [r5, #0]
1006a5fc:	2000      	movs	r0, #0
1006a5fe:	e01e      	b.n	1006a63e <__sflush_r+0xfa>
1006a600:	690e      	ldr	r6, [r1, #16]
1006a602:	2e00      	cmp	r6, #0
1006a604:	d0fa      	beq.n	1006a5fc <__sflush_r+0xb8>
1006a606:	680f      	ldr	r7, [r1, #0]
1006a608:	600e      	str	r6, [r1, #0]
1006a60a:	1bba      	subs	r2, r7, r6
1006a60c:	9201      	str	r2, [sp, #4]
1006a60e:	2200      	movs	r2, #0
1006a610:	079b      	lsls	r3, r3, #30
1006a612:	d100      	bne.n	1006a616 <__sflush_r+0xd2>
1006a614:	694a      	ldr	r2, [r1, #20]
1006a616:	60a2      	str	r2, [r4, #8]
1006a618:	9b01      	ldr	r3, [sp, #4]
1006a61a:	2b00      	cmp	r3, #0
1006a61c:	ddee      	ble.n	1006a5fc <__sflush_r+0xb8>
1006a61e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
1006a620:	0032      	movs	r2, r6
1006a622:	001f      	movs	r7, r3
1006a624:	0028      	movs	r0, r5
1006a626:	9b01      	ldr	r3, [sp, #4]
1006a628:	6a21      	ldr	r1, [r4, #32]
1006a62a:	47b8      	blx	r7
1006a62c:	2800      	cmp	r0, #0
1006a62e:	dc07      	bgt.n	1006a640 <__sflush_r+0xfc>
1006a630:	89a2      	ldrh	r2, [r4, #12]
1006a632:	2340      	movs	r3, #64	@ 0x40
1006a634:	2001      	movs	r0, #1
1006a636:	4313      	orrs	r3, r2
1006a638:	b21b      	sxth	r3, r3
1006a63a:	81a3      	strh	r3, [r4, #12]
1006a63c:	4240      	negs	r0, r0
1006a63e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006a640:	9b01      	ldr	r3, [sp, #4]
1006a642:	1836      	adds	r6, r6, r0
1006a644:	1a1b      	subs	r3, r3, r0
1006a646:	9301      	str	r3, [sp, #4]
1006a648:	e7e6      	b.n	1006a618 <__sflush_r+0xd4>
1006a64a:	46c0      	nop			@ (mov r8, r8)
1006a64c:	20400001 	.word	0x20400001

1006a650 <_fflush_r>:
1006a650:	690b      	ldr	r3, [r1, #16]
1006a652:	b570      	push	{r4, r5, r6, lr}
1006a654:	0005      	movs	r5, r0
1006a656:	000c      	movs	r4, r1
1006a658:	2b00      	cmp	r3, #0
1006a65a:	d102      	bne.n	1006a662 <_fflush_r+0x12>
1006a65c:	2500      	movs	r5, #0
1006a65e:	0028      	movs	r0, r5
1006a660:	bd70      	pop	{r4, r5, r6, pc}
1006a662:	2800      	cmp	r0, #0
1006a664:	d004      	beq.n	1006a670 <_fflush_r+0x20>
1006a666:	6a03      	ldr	r3, [r0, #32]
1006a668:	2b00      	cmp	r3, #0
1006a66a:	d101      	bne.n	1006a670 <_fflush_r+0x20>
1006a66c:	f7fc feda 	bl	10067424 <__sinit>
1006a670:	220c      	movs	r2, #12
1006a672:	5ea3      	ldrsh	r3, [r4, r2]
1006a674:	2b00      	cmp	r3, #0
1006a676:	d0f1      	beq.n	1006a65c <_fflush_r+0xc>
1006a678:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1006a67a:	07d2      	lsls	r2, r2, #31
1006a67c:	d404      	bmi.n	1006a688 <_fflush_r+0x38>
1006a67e:	059b      	lsls	r3, r3, #22
1006a680:	d402      	bmi.n	1006a688 <_fflush_r+0x38>
1006a682:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1006a684:	f7fd f9af 	bl	100679e6 <__retarget_lock_acquire_recursive>
1006a688:	0028      	movs	r0, r5
1006a68a:	0021      	movs	r1, r4
1006a68c:	f7ff ff5a 	bl	1006a544 <__sflush_r>
1006a690:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1006a692:	0005      	movs	r5, r0
1006a694:	07db      	lsls	r3, r3, #31
1006a696:	d4e2      	bmi.n	1006a65e <_fflush_r+0xe>
1006a698:	89a3      	ldrh	r3, [r4, #12]
1006a69a:	059b      	lsls	r3, r3, #22
1006a69c:	d4df      	bmi.n	1006a65e <_fflush_r+0xe>
1006a69e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1006a6a0:	f7fd f9a2 	bl	100679e8 <__retarget_lock_release_recursive>
1006a6a4:	e7db      	b.n	1006a65e <_fflush_r+0xe>
	...

1006a6a8 <__swhatbuf_r>:
1006a6a8:	b570      	push	{r4, r5, r6, lr}
1006a6aa:	000e      	movs	r6, r1
1006a6ac:	001d      	movs	r5, r3
1006a6ae:	230e      	movs	r3, #14
1006a6b0:	5ec9      	ldrsh	r1, [r1, r3]
1006a6b2:	0014      	movs	r4, r2
1006a6b4:	b096      	sub	sp, #88	@ 0x58
1006a6b6:	2900      	cmp	r1, #0
1006a6b8:	da0c      	bge.n	1006a6d4 <__swhatbuf_r+0x2c>
1006a6ba:	89b2      	ldrh	r2, [r6, #12]
1006a6bc:	2380      	movs	r3, #128	@ 0x80
1006a6be:	0011      	movs	r1, r2
1006a6c0:	4019      	ands	r1, r3
1006a6c2:	421a      	tst	r2, r3
1006a6c4:	d114      	bne.n	1006a6f0 <__swhatbuf_r+0x48>
1006a6c6:	2380      	movs	r3, #128	@ 0x80
1006a6c8:	00db      	lsls	r3, r3, #3
1006a6ca:	2000      	movs	r0, #0
1006a6cc:	6029      	str	r1, [r5, #0]
1006a6ce:	6023      	str	r3, [r4, #0]
1006a6d0:	b016      	add	sp, #88	@ 0x58
1006a6d2:	bd70      	pop	{r4, r5, r6, pc}
1006a6d4:	466a      	mov	r2, sp
1006a6d6:	f000 f8ab 	bl	1006a830 <_fstat_r>
1006a6da:	2800      	cmp	r0, #0
1006a6dc:	dbed      	blt.n	1006a6ba <__swhatbuf_r+0x12>
1006a6de:	23f0      	movs	r3, #240	@ 0xf0
1006a6e0:	9901      	ldr	r1, [sp, #4]
1006a6e2:	021b      	lsls	r3, r3, #8
1006a6e4:	4019      	ands	r1, r3
1006a6e6:	4b04      	ldr	r3, [pc, #16]	@ (1006a6f8 <__swhatbuf_r+0x50>)
1006a6e8:	18c9      	adds	r1, r1, r3
1006a6ea:	424b      	negs	r3, r1
1006a6ec:	4159      	adcs	r1, r3
1006a6ee:	e7ea      	b.n	1006a6c6 <__swhatbuf_r+0x1e>
1006a6f0:	2100      	movs	r1, #0
1006a6f2:	2340      	movs	r3, #64	@ 0x40
1006a6f4:	e7e9      	b.n	1006a6ca <__swhatbuf_r+0x22>
1006a6f6:	46c0      	nop			@ (mov r8, r8)
1006a6f8:	ffffe000 	.word	0xffffe000

1006a6fc <__smakebuf_r>:
1006a6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1006a6fe:	2602      	movs	r6, #2
1006a700:	898b      	ldrh	r3, [r1, #12]
1006a702:	0005      	movs	r5, r0
1006a704:	000c      	movs	r4, r1
1006a706:	b085      	sub	sp, #20
1006a708:	4233      	tst	r3, r6
1006a70a:	d007      	beq.n	1006a71c <__smakebuf_r+0x20>
1006a70c:	0023      	movs	r3, r4
1006a70e:	3347      	adds	r3, #71	@ 0x47
1006a710:	6023      	str	r3, [r4, #0]
1006a712:	6123      	str	r3, [r4, #16]
1006a714:	2301      	movs	r3, #1
1006a716:	6163      	str	r3, [r4, #20]
1006a718:	b005      	add	sp, #20
1006a71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006a71c:	ab03      	add	r3, sp, #12
1006a71e:	aa02      	add	r2, sp, #8
1006a720:	f7ff ffc2 	bl	1006a6a8 <__swhatbuf_r>
1006a724:	9f02      	ldr	r7, [sp, #8]
1006a726:	9001      	str	r0, [sp, #4]
1006a728:	0039      	movs	r1, r7
1006a72a:	0028      	movs	r0, r5
1006a72c:	f7fe f86a 	bl	10068804 <_malloc_r>
1006a730:	2800      	cmp	r0, #0
1006a732:	d108      	bne.n	1006a746 <__smakebuf_r+0x4a>
1006a734:	220c      	movs	r2, #12
1006a736:	5ea3      	ldrsh	r3, [r4, r2]
1006a738:	059a      	lsls	r2, r3, #22
1006a73a:	d4ed      	bmi.n	1006a718 <__smakebuf_r+0x1c>
1006a73c:	2203      	movs	r2, #3
1006a73e:	4393      	bics	r3, r2
1006a740:	431e      	orrs	r6, r3
1006a742:	81a6      	strh	r6, [r4, #12]
1006a744:	e7e2      	b.n	1006a70c <__smakebuf_r+0x10>
1006a746:	2380      	movs	r3, #128	@ 0x80
1006a748:	89a2      	ldrh	r2, [r4, #12]
1006a74a:	6020      	str	r0, [r4, #0]
1006a74c:	4313      	orrs	r3, r2
1006a74e:	81a3      	strh	r3, [r4, #12]
1006a750:	9b03      	ldr	r3, [sp, #12]
1006a752:	6120      	str	r0, [r4, #16]
1006a754:	6167      	str	r7, [r4, #20]
1006a756:	2b00      	cmp	r3, #0
1006a758:	d00c      	beq.n	1006a774 <__smakebuf_r+0x78>
1006a75a:	0028      	movs	r0, r5
1006a75c:	230e      	movs	r3, #14
1006a75e:	5ee1      	ldrsh	r1, [r4, r3]
1006a760:	f000 f878 	bl	1006a854 <_isatty_r>
1006a764:	2800      	cmp	r0, #0
1006a766:	d005      	beq.n	1006a774 <__smakebuf_r+0x78>
1006a768:	2303      	movs	r3, #3
1006a76a:	89a2      	ldrh	r2, [r4, #12]
1006a76c:	439a      	bics	r2, r3
1006a76e:	3b02      	subs	r3, #2
1006a770:	4313      	orrs	r3, r2
1006a772:	81a3      	strh	r3, [r4, #12]
1006a774:	89a3      	ldrh	r3, [r4, #12]
1006a776:	9a01      	ldr	r2, [sp, #4]
1006a778:	4313      	orrs	r3, r2
1006a77a:	81a3      	strh	r3, [r4, #12]
1006a77c:	e7cc      	b.n	1006a718 <__smakebuf_r+0x1c>

1006a77e <_putc_r>:
1006a77e:	b570      	push	{r4, r5, r6, lr}
1006a780:	0006      	movs	r6, r0
1006a782:	000d      	movs	r5, r1
1006a784:	0014      	movs	r4, r2
1006a786:	2800      	cmp	r0, #0
1006a788:	d004      	beq.n	1006a794 <_putc_r+0x16>
1006a78a:	6a03      	ldr	r3, [r0, #32]
1006a78c:	2b00      	cmp	r3, #0
1006a78e:	d101      	bne.n	1006a794 <_putc_r+0x16>
1006a790:	f7fc fe48 	bl	10067424 <__sinit>
1006a794:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1006a796:	07db      	lsls	r3, r3, #31
1006a798:	d405      	bmi.n	1006a7a6 <_putc_r+0x28>
1006a79a:	89a3      	ldrh	r3, [r4, #12]
1006a79c:	059b      	lsls	r3, r3, #22
1006a79e:	d402      	bmi.n	1006a7a6 <_putc_r+0x28>
1006a7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1006a7a2:	f7fd f920 	bl	100679e6 <__retarget_lock_acquire_recursive>
1006a7a6:	68a3      	ldr	r3, [r4, #8]
1006a7a8:	3b01      	subs	r3, #1
1006a7aa:	60a3      	str	r3, [r4, #8]
1006a7ac:	2b00      	cmp	r3, #0
1006a7ae:	da05      	bge.n	1006a7bc <_putc_r+0x3e>
1006a7b0:	69a2      	ldr	r2, [r4, #24]
1006a7b2:	4293      	cmp	r3, r2
1006a7b4:	db12      	blt.n	1006a7dc <_putc_r+0x5e>
1006a7b6:	b2eb      	uxtb	r3, r5
1006a7b8:	2b0a      	cmp	r3, #10
1006a7ba:	d00f      	beq.n	1006a7dc <_putc_r+0x5e>
1006a7bc:	6823      	ldr	r3, [r4, #0]
1006a7be:	1c5a      	adds	r2, r3, #1
1006a7c0:	6022      	str	r2, [r4, #0]
1006a7c2:	701d      	strb	r5, [r3, #0]
1006a7c4:	b2ed      	uxtb	r5, r5
1006a7c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1006a7c8:	07db      	lsls	r3, r3, #31
1006a7ca:	d405      	bmi.n	1006a7d8 <_putc_r+0x5a>
1006a7cc:	89a3      	ldrh	r3, [r4, #12]
1006a7ce:	059b      	lsls	r3, r3, #22
1006a7d0:	d402      	bmi.n	1006a7d8 <_putc_r+0x5a>
1006a7d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1006a7d4:	f7fd f908 	bl	100679e8 <__retarget_lock_release_recursive>
1006a7d8:	0028      	movs	r0, r5
1006a7da:	bd70      	pop	{r4, r5, r6, pc}
1006a7dc:	0029      	movs	r1, r5
1006a7de:	0022      	movs	r2, r4
1006a7e0:	0030      	movs	r0, r6
1006a7e2:	f7fc fff1 	bl	100677c8 <__swbuf_r>
1006a7e6:	0005      	movs	r5, r0
1006a7e8:	e7ed      	b.n	1006a7c6 <_putc_r+0x48>

1006a7ea <memmove>:
1006a7ea:	b510      	push	{r4, lr}
1006a7ec:	4288      	cmp	r0, r1
1006a7ee:	d902      	bls.n	1006a7f6 <memmove+0xc>
1006a7f0:	188b      	adds	r3, r1, r2
1006a7f2:	4298      	cmp	r0, r3
1006a7f4:	d308      	bcc.n	1006a808 <memmove+0x1e>
1006a7f6:	2300      	movs	r3, #0
1006a7f8:	429a      	cmp	r2, r3
1006a7fa:	d007      	beq.n	1006a80c <memmove+0x22>
1006a7fc:	5ccc      	ldrb	r4, [r1, r3]
1006a7fe:	54c4      	strb	r4, [r0, r3]
1006a800:	3301      	adds	r3, #1
1006a802:	e7f9      	b.n	1006a7f8 <memmove+0xe>
1006a804:	5c8b      	ldrb	r3, [r1, r2]
1006a806:	5483      	strb	r3, [r0, r2]
1006a808:	3a01      	subs	r2, #1
1006a80a:	d2fb      	bcs.n	1006a804 <memmove+0x1a>
1006a80c:	bd10      	pop	{r4, pc}

1006a80e <strncmp>:
1006a80e:	b530      	push	{r4, r5, lr}
1006a810:	0005      	movs	r5, r0
1006a812:	1e10      	subs	r0, r2, #0
1006a814:	d00b      	beq.n	1006a82e <strncmp+0x20>
1006a816:	2400      	movs	r4, #0
1006a818:	3a01      	subs	r2, #1
1006a81a:	5d2b      	ldrb	r3, [r5, r4]
1006a81c:	5d08      	ldrb	r0, [r1, r4]
1006a81e:	4283      	cmp	r3, r0
1006a820:	d104      	bne.n	1006a82c <strncmp+0x1e>
1006a822:	4294      	cmp	r4, r2
1006a824:	d002      	beq.n	1006a82c <strncmp+0x1e>
1006a826:	3401      	adds	r4, #1
1006a828:	2b00      	cmp	r3, #0
1006a82a:	d1f6      	bne.n	1006a81a <strncmp+0xc>
1006a82c:	1a18      	subs	r0, r3, r0
1006a82e:	bd30      	pop	{r4, r5, pc}

1006a830 <_fstat_r>:
1006a830:	2300      	movs	r3, #0
1006a832:	b570      	push	{r4, r5, r6, lr}
1006a834:	4d06      	ldr	r5, [pc, #24]	@ (1006a850 <_fstat_r+0x20>)
1006a836:	0004      	movs	r4, r0
1006a838:	0008      	movs	r0, r1
1006a83a:	0011      	movs	r1, r2
1006a83c:	602b      	str	r3, [r5, #0]
1006a83e:	f7d9 f8c8 	bl	100439d2 <_fstat>
1006a842:	1c43      	adds	r3, r0, #1
1006a844:	d103      	bne.n	1006a84e <_fstat_r+0x1e>
1006a846:	682b      	ldr	r3, [r5, #0]
1006a848:	2b00      	cmp	r3, #0
1006a84a:	d000      	beq.n	1006a84e <_fstat_r+0x1e>
1006a84c:	6023      	str	r3, [r4, #0]
1006a84e:	bd70      	pop	{r4, r5, r6, pc}
1006a850:	20001308 	.word	0x20001308

1006a854 <_isatty_r>:
1006a854:	2300      	movs	r3, #0
1006a856:	b570      	push	{r4, r5, r6, lr}
1006a858:	4d06      	ldr	r5, [pc, #24]	@ (1006a874 <_isatty_r+0x20>)
1006a85a:	0004      	movs	r4, r0
1006a85c:	0008      	movs	r0, r1
1006a85e:	602b      	str	r3, [r5, #0]
1006a860:	f7d9 f8c5 	bl	100439ee <_isatty>
1006a864:	1c43      	adds	r3, r0, #1
1006a866:	d103      	bne.n	1006a870 <_isatty_r+0x1c>
1006a868:	682b      	ldr	r3, [r5, #0]
1006a86a:	2b00      	cmp	r3, #0
1006a86c:	d000      	beq.n	1006a870 <_isatty_r+0x1c>
1006a86e:	6023      	str	r3, [r4, #0]
1006a870:	bd70      	pop	{r4, r5, r6, pc}
1006a872:	46c0      	nop			@ (mov r8, r8)
1006a874:	20001308 	.word	0x20001308

1006a878 <_sbrk_r>:
1006a878:	2300      	movs	r3, #0
1006a87a:	b570      	push	{r4, r5, r6, lr}
1006a87c:	4d06      	ldr	r5, [pc, #24]	@ (1006a898 <_sbrk_r+0x20>)
1006a87e:	0004      	movs	r4, r0
1006a880:	0008      	movs	r0, r1
1006a882:	602b      	str	r3, [r5, #0]
1006a884:	f7d9 f8c8 	bl	10043a18 <_sbrk>
1006a888:	1c43      	adds	r3, r0, #1
1006a88a:	d103      	bne.n	1006a894 <_sbrk_r+0x1c>
1006a88c:	682b      	ldr	r3, [r5, #0]
1006a88e:	2b00      	cmp	r3, #0
1006a890:	d000      	beq.n	1006a894 <_sbrk_r+0x1c>
1006a892:	6023      	str	r3, [r4, #0]
1006a894:	bd70      	pop	{r4, r5, r6, pc}
1006a896:	46c0      	nop			@ (mov r8, r8)
1006a898:	20001308 	.word	0x20001308

1006a89c <__aeabi_memset>:
1006a89c:	000b      	movs	r3, r1
1006a89e:	b510      	push	{r4, lr}
1006a8a0:	0011      	movs	r1, r2
1006a8a2:	001a      	movs	r2, r3
1006a8a4:	f7fd f83e 	bl	10067924 <memset>
1006a8a8:	bd10      	pop	{r4, pc}
	...

1006a8ac <nan>:
1006a8ac:	2000      	movs	r0, #0
1006a8ae:	4901      	ldr	r1, [pc, #4]	@ (1006a8b4 <nan+0x8>)
1006a8b0:	4770      	bx	lr
1006a8b2:	46c0      	nop			@ (mov r8, r8)
1006a8b4:	7ff80000 	.word	0x7ff80000

1006a8b8 <__assert_func>:
1006a8b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
1006a8ba:	0014      	movs	r4, r2
1006a8bc:	001a      	movs	r2, r3
1006a8be:	4b09      	ldr	r3, [pc, #36]	@ (1006a8e4 <__assert_func+0x2c>)
1006a8c0:	0005      	movs	r5, r0
1006a8c2:	681b      	ldr	r3, [r3, #0]
1006a8c4:	000e      	movs	r6, r1
1006a8c6:	68d8      	ldr	r0, [r3, #12]
1006a8c8:	4b07      	ldr	r3, [pc, #28]	@ (1006a8e8 <__assert_func+0x30>)
1006a8ca:	2c00      	cmp	r4, #0
1006a8cc:	d101      	bne.n	1006a8d2 <__assert_func+0x1a>
1006a8ce:	4b07      	ldr	r3, [pc, #28]	@ (1006a8ec <__assert_func+0x34>)
1006a8d0:	001c      	movs	r4, r3
1006a8d2:	4907      	ldr	r1, [pc, #28]	@ (1006a8f0 <__assert_func+0x38>)
1006a8d4:	9301      	str	r3, [sp, #4]
1006a8d6:	9402      	str	r4, [sp, #8]
1006a8d8:	002b      	movs	r3, r5
1006a8da:	9600      	str	r6, [sp, #0]
1006a8dc:	f000 fbe2 	bl	1006b0a4 <fiprintf>
1006a8e0:	f000 fbf0 	bl	1006b0c4 <abort>
1006a8e4:	20001530 	.word	0x20001530
1006a8e8:	1006d332 	.word	0x1006d332
1006a8ec:	1006d36d 	.word	0x1006d36d
1006a8f0:	1006d33f 	.word	0x1006d33f

1006a8f4 <_calloc_r>:
1006a8f4:	b570      	push	{r4, r5, r6, lr}
1006a8f6:	0c0b      	lsrs	r3, r1, #16
1006a8f8:	0c15      	lsrs	r5, r2, #16
1006a8fa:	2b00      	cmp	r3, #0
1006a8fc:	d11e      	bne.n	1006a93c <_calloc_r+0x48>
1006a8fe:	2d00      	cmp	r5, #0
1006a900:	d10c      	bne.n	1006a91c <_calloc_r+0x28>
1006a902:	b289      	uxth	r1, r1
1006a904:	b294      	uxth	r4, r2
1006a906:	434c      	muls	r4, r1
1006a908:	0021      	movs	r1, r4
1006a90a:	f7fd ff7b 	bl	10068804 <_malloc_r>
1006a90e:	1e05      	subs	r5, r0, #0
1006a910:	d01b      	beq.n	1006a94a <_calloc_r+0x56>
1006a912:	0022      	movs	r2, r4
1006a914:	2100      	movs	r1, #0
1006a916:	f7fd f805 	bl	10067924 <memset>
1006a91a:	e016      	b.n	1006a94a <_calloc_r+0x56>
1006a91c:	1c2b      	adds	r3, r5, #0
1006a91e:	1c0c      	adds	r4, r1, #0
1006a920:	b289      	uxth	r1, r1
1006a922:	b292      	uxth	r2, r2
1006a924:	434a      	muls	r2, r1
1006a926:	b29b      	uxth	r3, r3
1006a928:	b2a1      	uxth	r1, r4
1006a92a:	4359      	muls	r1, r3
1006a92c:	0c14      	lsrs	r4, r2, #16
1006a92e:	190c      	adds	r4, r1, r4
1006a930:	0c23      	lsrs	r3, r4, #16
1006a932:	d107      	bne.n	1006a944 <_calloc_r+0x50>
1006a934:	0424      	lsls	r4, r4, #16
1006a936:	b292      	uxth	r2, r2
1006a938:	4314      	orrs	r4, r2
1006a93a:	e7e5      	b.n	1006a908 <_calloc_r+0x14>
1006a93c:	2d00      	cmp	r5, #0
1006a93e:	d101      	bne.n	1006a944 <_calloc_r+0x50>
1006a940:	1c14      	adds	r4, r2, #0
1006a942:	e7ed      	b.n	1006a920 <_calloc_r+0x2c>
1006a944:	230c      	movs	r3, #12
1006a946:	2500      	movs	r5, #0
1006a948:	6003      	str	r3, [r0, #0]
1006a94a:	0028      	movs	r0, r5
1006a94c:	bd70      	pop	{r4, r5, r6, pc}

1006a94e <rshift>:
1006a94e:	0002      	movs	r2, r0
1006a950:	b5f0      	push	{r4, r5, r6, r7, lr}
1006a952:	6904      	ldr	r4, [r0, #16]
1006a954:	b085      	sub	sp, #20
1006a956:	3214      	adds	r2, #20
1006a958:	114b      	asrs	r3, r1, #5
1006a95a:	0016      	movs	r6, r2
1006a95c:	9302      	str	r3, [sp, #8]
1006a95e:	429c      	cmp	r4, r3
1006a960:	dd31      	ble.n	1006a9c6 <rshift+0x78>
1006a962:	261f      	movs	r6, #31
1006a964:	000f      	movs	r7, r1
1006a966:	009b      	lsls	r3, r3, #2
1006a968:	00a5      	lsls	r5, r4, #2
1006a96a:	18d3      	adds	r3, r2, r3
1006a96c:	4037      	ands	r7, r6
1006a96e:	1955      	adds	r5, r2, r5
1006a970:	9300      	str	r3, [sp, #0]
1006a972:	9701      	str	r7, [sp, #4]
1006a974:	4231      	tst	r1, r6
1006a976:	d10d      	bne.n	1006a994 <rshift+0x46>
1006a978:	0016      	movs	r6, r2
1006a97a:	0019      	movs	r1, r3
1006a97c:	428d      	cmp	r5, r1
1006a97e:	d836      	bhi.n	1006a9ee <rshift+0xa0>
1006a980:	9b00      	ldr	r3, [sp, #0]
1006a982:	2600      	movs	r6, #0
1006a984:	3b03      	subs	r3, #3
1006a986:	429d      	cmp	r5, r3
1006a988:	d302      	bcc.n	1006a990 <rshift+0x42>
1006a98a:	9b02      	ldr	r3, [sp, #8]
1006a98c:	1ae4      	subs	r4, r4, r3
1006a98e:	00a6      	lsls	r6, r4, #2
1006a990:	1996      	adds	r6, r2, r6
1006a992:	e018      	b.n	1006a9c6 <rshift+0x78>
1006a994:	2120      	movs	r1, #32
1006a996:	9e01      	ldr	r6, [sp, #4]
1006a998:	9f01      	ldr	r7, [sp, #4]
1006a99a:	1b89      	subs	r1, r1, r6
1006a99c:	9e00      	ldr	r6, [sp, #0]
1006a99e:	9103      	str	r1, [sp, #12]
1006a9a0:	ce02      	ldmia	r6!, {r1}
1006a9a2:	4694      	mov	ip, r2
1006a9a4:	40f9      	lsrs	r1, r7
1006a9a6:	42b5      	cmp	r5, r6
1006a9a8:	d816      	bhi.n	1006a9d8 <rshift+0x8a>
1006a9aa:	9b00      	ldr	r3, [sp, #0]
1006a9ac:	2600      	movs	r6, #0
1006a9ae:	3301      	adds	r3, #1
1006a9b0:	429d      	cmp	r5, r3
1006a9b2:	d303      	bcc.n	1006a9bc <rshift+0x6e>
1006a9b4:	9b02      	ldr	r3, [sp, #8]
1006a9b6:	1ae4      	subs	r4, r4, r3
1006a9b8:	00a6      	lsls	r6, r4, #2
1006a9ba:	3e04      	subs	r6, #4
1006a9bc:	1996      	adds	r6, r2, r6
1006a9be:	6031      	str	r1, [r6, #0]
1006a9c0:	2900      	cmp	r1, #0
1006a9c2:	d000      	beq.n	1006a9c6 <rshift+0x78>
1006a9c4:	3604      	adds	r6, #4
1006a9c6:	1ab1      	subs	r1, r6, r2
1006a9c8:	1089      	asrs	r1, r1, #2
1006a9ca:	6101      	str	r1, [r0, #16]
1006a9cc:	4296      	cmp	r6, r2
1006a9ce:	d101      	bne.n	1006a9d4 <rshift+0x86>
1006a9d0:	2300      	movs	r3, #0
1006a9d2:	6143      	str	r3, [r0, #20]
1006a9d4:	b005      	add	sp, #20
1006a9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006a9d8:	6837      	ldr	r7, [r6, #0]
1006a9da:	9b03      	ldr	r3, [sp, #12]
1006a9dc:	409f      	lsls	r7, r3
1006a9de:	430f      	orrs	r7, r1
1006a9e0:	4661      	mov	r1, ip
1006a9e2:	c180      	stmia	r1!, {r7}
1006a9e4:	468c      	mov	ip, r1
1006a9e6:	9b01      	ldr	r3, [sp, #4]
1006a9e8:	ce02      	ldmia	r6!, {r1}
1006a9ea:	40d9      	lsrs	r1, r3
1006a9ec:	e7db      	b.n	1006a9a6 <rshift+0x58>
1006a9ee:	c980      	ldmia	r1!, {r7}
1006a9f0:	c680      	stmia	r6!, {r7}
1006a9f2:	e7c3      	b.n	1006a97c <rshift+0x2e>

1006a9f4 <__hexdig_fun>:
1006a9f4:	0002      	movs	r2, r0
1006a9f6:	3a30      	subs	r2, #48	@ 0x30
1006a9f8:	0003      	movs	r3, r0
1006a9fa:	2a09      	cmp	r2, #9
1006a9fc:	d802      	bhi.n	1006aa04 <__hexdig_fun+0x10>
1006a9fe:	3b20      	subs	r3, #32
1006aa00:	b2d8      	uxtb	r0, r3
1006aa02:	4770      	bx	lr
1006aa04:	0002      	movs	r2, r0
1006aa06:	3a61      	subs	r2, #97	@ 0x61
1006aa08:	2a05      	cmp	r2, #5
1006aa0a:	d801      	bhi.n	1006aa10 <__hexdig_fun+0x1c>
1006aa0c:	3b47      	subs	r3, #71	@ 0x47
1006aa0e:	e7f7      	b.n	1006aa00 <__hexdig_fun+0xc>
1006aa10:	001a      	movs	r2, r3
1006aa12:	3a41      	subs	r2, #65	@ 0x41
1006aa14:	2000      	movs	r0, #0
1006aa16:	2a05      	cmp	r2, #5
1006aa18:	d8f3      	bhi.n	1006aa02 <__hexdig_fun+0xe>
1006aa1a:	3b27      	subs	r3, #39	@ 0x27
1006aa1c:	e7f0      	b.n	1006aa00 <__hexdig_fun+0xc>
	...

1006aa20 <__gethex>:
1006aa20:	b5f0      	push	{r4, r5, r6, r7, lr}
1006aa22:	b089      	sub	sp, #36	@ 0x24
1006aa24:	9307      	str	r3, [sp, #28]
1006aa26:	680b      	ldr	r3, [r1, #0]
1006aa28:	9201      	str	r2, [sp, #4]
1006aa2a:	9003      	str	r0, [sp, #12]
1006aa2c:	9106      	str	r1, [sp, #24]
1006aa2e:	1c9a      	adds	r2, r3, #2
1006aa30:	0011      	movs	r1, r2
1006aa32:	3201      	adds	r2, #1
1006aa34:	1e50      	subs	r0, r2, #1
1006aa36:	7800      	ldrb	r0, [r0, #0]
1006aa38:	2830      	cmp	r0, #48	@ 0x30
1006aa3a:	d0f9      	beq.n	1006aa30 <__gethex+0x10>
1006aa3c:	1acb      	subs	r3, r1, r3
1006aa3e:	3b02      	subs	r3, #2
1006aa40:	9305      	str	r3, [sp, #20]
1006aa42:	9100      	str	r1, [sp, #0]
1006aa44:	f7ff ffd6 	bl	1006a9f4 <__hexdig_fun>
1006aa48:	2300      	movs	r3, #0
1006aa4a:	001d      	movs	r5, r3
1006aa4c:	9302      	str	r3, [sp, #8]
1006aa4e:	4298      	cmp	r0, r3
1006aa50:	d11e      	bne.n	1006aa90 <__gethex+0x70>
1006aa52:	2201      	movs	r2, #1
1006aa54:	49a6      	ldr	r1, [pc, #664]	@ (1006acf0 <__gethex+0x2d0>)
1006aa56:	9800      	ldr	r0, [sp, #0]
1006aa58:	f7ff fed9 	bl	1006a80e <strncmp>
1006aa5c:	0007      	movs	r7, r0
1006aa5e:	42a8      	cmp	r0, r5
1006aa60:	d000      	beq.n	1006aa64 <__gethex+0x44>
1006aa62:	e06a      	b.n	1006ab3a <__gethex+0x11a>
1006aa64:	9b00      	ldr	r3, [sp, #0]
1006aa66:	7858      	ldrb	r0, [r3, #1]
1006aa68:	1c5c      	adds	r4, r3, #1
1006aa6a:	f7ff ffc3 	bl	1006a9f4 <__hexdig_fun>
1006aa6e:	2301      	movs	r3, #1
1006aa70:	9302      	str	r3, [sp, #8]
1006aa72:	42a8      	cmp	r0, r5
1006aa74:	d02f      	beq.n	1006aad6 <__gethex+0xb6>
1006aa76:	9400      	str	r4, [sp, #0]
1006aa78:	9b00      	ldr	r3, [sp, #0]
1006aa7a:	7818      	ldrb	r0, [r3, #0]
1006aa7c:	2830      	cmp	r0, #48	@ 0x30
1006aa7e:	d009      	beq.n	1006aa94 <__gethex+0x74>
1006aa80:	f7ff ffb8 	bl	1006a9f4 <__hexdig_fun>
1006aa84:	4242      	negs	r2, r0
1006aa86:	4142      	adcs	r2, r0
1006aa88:	2301      	movs	r3, #1
1006aa8a:	0025      	movs	r5, r4
1006aa8c:	9202      	str	r2, [sp, #8]
1006aa8e:	9305      	str	r3, [sp, #20]
1006aa90:	9c00      	ldr	r4, [sp, #0]
1006aa92:	e004      	b.n	1006aa9e <__gethex+0x7e>
1006aa94:	9b00      	ldr	r3, [sp, #0]
1006aa96:	3301      	adds	r3, #1
1006aa98:	9300      	str	r3, [sp, #0]
1006aa9a:	e7ed      	b.n	1006aa78 <__gethex+0x58>
1006aa9c:	3401      	adds	r4, #1
1006aa9e:	7820      	ldrb	r0, [r4, #0]
1006aaa0:	f7ff ffa8 	bl	1006a9f4 <__hexdig_fun>
1006aaa4:	1e07      	subs	r7, r0, #0
1006aaa6:	d1f9      	bne.n	1006aa9c <__gethex+0x7c>
1006aaa8:	2201      	movs	r2, #1
1006aaaa:	0020      	movs	r0, r4
1006aaac:	4990      	ldr	r1, [pc, #576]	@ (1006acf0 <__gethex+0x2d0>)
1006aaae:	f7ff feae 	bl	1006a80e <strncmp>
1006aab2:	2800      	cmp	r0, #0
1006aab4:	d10d      	bne.n	1006aad2 <__gethex+0xb2>
1006aab6:	2d00      	cmp	r5, #0
1006aab8:	d106      	bne.n	1006aac8 <__gethex+0xa8>
1006aaba:	3401      	adds	r4, #1
1006aabc:	0025      	movs	r5, r4
1006aabe:	7820      	ldrb	r0, [r4, #0]
1006aac0:	f7ff ff98 	bl	1006a9f4 <__hexdig_fun>
1006aac4:	2800      	cmp	r0, #0
1006aac6:	d102      	bne.n	1006aace <__gethex+0xae>
1006aac8:	1b2d      	subs	r5, r5, r4
1006aaca:	00af      	lsls	r7, r5, #2
1006aacc:	e003      	b.n	1006aad6 <__gethex+0xb6>
1006aace:	3401      	adds	r4, #1
1006aad0:	e7f5      	b.n	1006aabe <__gethex+0x9e>
1006aad2:	2d00      	cmp	r5, #0
1006aad4:	d1f8      	bne.n	1006aac8 <__gethex+0xa8>
1006aad6:	2220      	movs	r2, #32
1006aad8:	7823      	ldrb	r3, [r4, #0]
1006aada:	0026      	movs	r6, r4
1006aadc:	4393      	bics	r3, r2
1006aade:	2b50      	cmp	r3, #80	@ 0x50
1006aae0:	d11d      	bne.n	1006ab1e <__gethex+0xfe>
1006aae2:	7863      	ldrb	r3, [r4, #1]
1006aae4:	2b2b      	cmp	r3, #43	@ 0x2b
1006aae6:	d02d      	beq.n	1006ab44 <__gethex+0x124>
1006aae8:	2b2d      	cmp	r3, #45	@ 0x2d
1006aaea:	d02f      	beq.n	1006ab4c <__gethex+0x12c>
1006aaec:	2300      	movs	r3, #0
1006aaee:	1c66      	adds	r6, r4, #1
1006aaf0:	9304      	str	r3, [sp, #16]
1006aaf2:	7830      	ldrb	r0, [r6, #0]
1006aaf4:	f7ff ff7e 	bl	1006a9f4 <__hexdig_fun>
1006aaf8:	1e43      	subs	r3, r0, #1
1006aafa:	b2db      	uxtb	r3, r3
1006aafc:	0005      	movs	r5, r0
1006aafe:	2b18      	cmp	r3, #24
1006ab00:	d82a      	bhi.n	1006ab58 <__gethex+0x138>
1006ab02:	7870      	ldrb	r0, [r6, #1]
1006ab04:	f7ff ff76 	bl	1006a9f4 <__hexdig_fun>
1006ab08:	1e43      	subs	r3, r0, #1
1006ab0a:	b2db      	uxtb	r3, r3
1006ab0c:	3601      	adds	r6, #1
1006ab0e:	3d10      	subs	r5, #16
1006ab10:	2b18      	cmp	r3, #24
1006ab12:	d91d      	bls.n	1006ab50 <__gethex+0x130>
1006ab14:	9b04      	ldr	r3, [sp, #16]
1006ab16:	2b00      	cmp	r3, #0
1006ab18:	d000      	beq.n	1006ab1c <__gethex+0xfc>
1006ab1a:	426d      	negs	r5, r5
1006ab1c:	197f      	adds	r7, r7, r5
1006ab1e:	9b06      	ldr	r3, [sp, #24]
1006ab20:	601e      	str	r6, [r3, #0]
1006ab22:	9b02      	ldr	r3, [sp, #8]
1006ab24:	2b00      	cmp	r3, #0
1006ab26:	d019      	beq.n	1006ab5c <__gethex+0x13c>
1006ab28:	9b05      	ldr	r3, [sp, #20]
1006ab2a:	2606      	movs	r6, #6
1006ab2c:	425a      	negs	r2, r3
1006ab2e:	4153      	adcs	r3, r2
1006ab30:	425b      	negs	r3, r3
1006ab32:	401e      	ands	r6, r3
1006ab34:	0030      	movs	r0, r6
1006ab36:	b009      	add	sp, #36	@ 0x24
1006ab38:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006ab3a:	2301      	movs	r3, #1
1006ab3c:	2700      	movs	r7, #0
1006ab3e:	9c00      	ldr	r4, [sp, #0]
1006ab40:	9302      	str	r3, [sp, #8]
1006ab42:	e7c8      	b.n	1006aad6 <__gethex+0xb6>
1006ab44:	2300      	movs	r3, #0
1006ab46:	9304      	str	r3, [sp, #16]
1006ab48:	1ca6      	adds	r6, r4, #2
1006ab4a:	e7d2      	b.n	1006aaf2 <__gethex+0xd2>
1006ab4c:	2301      	movs	r3, #1
1006ab4e:	e7fa      	b.n	1006ab46 <__gethex+0x126>
1006ab50:	230a      	movs	r3, #10
1006ab52:	435d      	muls	r5, r3
1006ab54:	182d      	adds	r5, r5, r0
1006ab56:	e7d4      	b.n	1006ab02 <__gethex+0xe2>
1006ab58:	0026      	movs	r6, r4
1006ab5a:	e7e0      	b.n	1006ab1e <__gethex+0xfe>
1006ab5c:	9b00      	ldr	r3, [sp, #0]
1006ab5e:	9902      	ldr	r1, [sp, #8]
1006ab60:	1ae3      	subs	r3, r4, r3
1006ab62:	3b01      	subs	r3, #1
1006ab64:	2b07      	cmp	r3, #7
1006ab66:	dc0a      	bgt.n	1006ab7e <__gethex+0x15e>
1006ab68:	9803      	ldr	r0, [sp, #12]
1006ab6a:	f7fd fedb 	bl	10068924 <_Balloc>
1006ab6e:	1e05      	subs	r5, r0, #0
1006ab70:	d108      	bne.n	1006ab84 <__gethex+0x164>
1006ab72:	002a      	movs	r2, r5
1006ab74:	21e4      	movs	r1, #228	@ 0xe4
1006ab76:	4b5f      	ldr	r3, [pc, #380]	@ (1006acf4 <__gethex+0x2d4>)
1006ab78:	485f      	ldr	r0, [pc, #380]	@ (1006acf8 <__gethex+0x2d8>)
1006ab7a:	f7ff fe9d 	bl	1006a8b8 <__assert_func>
1006ab7e:	3101      	adds	r1, #1
1006ab80:	105b      	asrs	r3, r3, #1
1006ab82:	e7ef      	b.n	1006ab64 <__gethex+0x144>
1006ab84:	0003      	movs	r3, r0
1006ab86:	3314      	adds	r3, #20
1006ab88:	9302      	str	r3, [sp, #8]
1006ab8a:	9305      	str	r3, [sp, #20]
1006ab8c:	2300      	movs	r3, #0
1006ab8e:	001e      	movs	r6, r3
1006ab90:	9304      	str	r3, [sp, #16]
1006ab92:	9b00      	ldr	r3, [sp, #0]
1006ab94:	42a3      	cmp	r3, r4
1006ab96:	d338      	bcc.n	1006ac0a <__gethex+0x1ea>
1006ab98:	9c05      	ldr	r4, [sp, #20]
1006ab9a:	9b02      	ldr	r3, [sp, #8]
1006ab9c:	c440      	stmia	r4!, {r6}
1006ab9e:	1ae4      	subs	r4, r4, r3
1006aba0:	10a4      	asrs	r4, r4, #2
1006aba2:	0030      	movs	r0, r6
1006aba4:	612c      	str	r4, [r5, #16]
1006aba6:	f7fd ffb5 	bl	10068b14 <__hi0bits>
1006abaa:	9b01      	ldr	r3, [sp, #4]
1006abac:	0164      	lsls	r4, r4, #5
1006abae:	681b      	ldr	r3, [r3, #0]
1006abb0:	1a26      	subs	r6, r4, r0
1006abb2:	9300      	str	r3, [sp, #0]
1006abb4:	429e      	cmp	r6, r3
1006abb6:	dd52      	ble.n	1006ac5e <__gethex+0x23e>
1006abb8:	1af6      	subs	r6, r6, r3
1006abba:	0031      	movs	r1, r6
1006abbc:	0028      	movs	r0, r5
1006abbe:	f7fe fb50 	bl	10069262 <__any_on>
1006abc2:	1e04      	subs	r4, r0, #0
1006abc4:	d00f      	beq.n	1006abe6 <__gethex+0x1c6>
1006abc6:	2401      	movs	r4, #1
1006abc8:	211f      	movs	r1, #31
1006abca:	0020      	movs	r0, r4
1006abcc:	1e73      	subs	r3, r6, #1
1006abce:	4019      	ands	r1, r3
1006abd0:	4088      	lsls	r0, r1
1006abd2:	0001      	movs	r1, r0
1006abd4:	115a      	asrs	r2, r3, #5
1006abd6:	9802      	ldr	r0, [sp, #8]
1006abd8:	0092      	lsls	r2, r2, #2
1006abda:	5812      	ldr	r2, [r2, r0]
1006abdc:	420a      	tst	r2, r1
1006abde:	d002      	beq.n	1006abe6 <__gethex+0x1c6>
1006abe0:	42a3      	cmp	r3, r4
1006abe2:	dc34      	bgt.n	1006ac4e <__gethex+0x22e>
1006abe4:	2402      	movs	r4, #2
1006abe6:	0031      	movs	r1, r6
1006abe8:	0028      	movs	r0, r5
1006abea:	f7ff feb0 	bl	1006a94e <rshift>
1006abee:	19bf      	adds	r7, r7, r6
1006abf0:	9b01      	ldr	r3, [sp, #4]
1006abf2:	689b      	ldr	r3, [r3, #8]
1006abf4:	42bb      	cmp	r3, r7
1006abf6:	da42      	bge.n	1006ac7e <__gethex+0x25e>
1006abf8:	0029      	movs	r1, r5
1006abfa:	9803      	ldr	r0, [sp, #12]
1006abfc:	f7fd fed6 	bl	100689ac <_Bfree>
1006ac00:	2300      	movs	r3, #0
1006ac02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1006ac04:	26a3      	movs	r6, #163	@ 0xa3
1006ac06:	6013      	str	r3, [r2, #0]
1006ac08:	e794      	b.n	1006ab34 <__gethex+0x114>
1006ac0a:	3c01      	subs	r4, #1
1006ac0c:	7823      	ldrb	r3, [r4, #0]
1006ac0e:	2b2e      	cmp	r3, #46	@ 0x2e
1006ac10:	d012      	beq.n	1006ac38 <__gethex+0x218>
1006ac12:	9b04      	ldr	r3, [sp, #16]
1006ac14:	2b20      	cmp	r3, #32
1006ac16:	d104      	bne.n	1006ac22 <__gethex+0x202>
1006ac18:	9b05      	ldr	r3, [sp, #20]
1006ac1a:	c340      	stmia	r3!, {r6}
1006ac1c:	2600      	movs	r6, #0
1006ac1e:	9305      	str	r3, [sp, #20]
1006ac20:	9604      	str	r6, [sp, #16]
1006ac22:	7820      	ldrb	r0, [r4, #0]
1006ac24:	f7ff fee6 	bl	1006a9f4 <__hexdig_fun>
1006ac28:	230f      	movs	r3, #15
1006ac2a:	4018      	ands	r0, r3
1006ac2c:	9b04      	ldr	r3, [sp, #16]
1006ac2e:	4098      	lsls	r0, r3
1006ac30:	3304      	adds	r3, #4
1006ac32:	4306      	orrs	r6, r0
1006ac34:	9304      	str	r3, [sp, #16]
1006ac36:	e7ac      	b.n	1006ab92 <__gethex+0x172>
1006ac38:	9b00      	ldr	r3, [sp, #0]
1006ac3a:	42a3      	cmp	r3, r4
1006ac3c:	d8e9      	bhi.n	1006ac12 <__gethex+0x1f2>
1006ac3e:	2201      	movs	r2, #1
1006ac40:	0020      	movs	r0, r4
1006ac42:	492b      	ldr	r1, [pc, #172]	@ (1006acf0 <__gethex+0x2d0>)
1006ac44:	f7ff fde3 	bl	1006a80e <strncmp>
1006ac48:	2800      	cmp	r0, #0
1006ac4a:	d1e2      	bne.n	1006ac12 <__gethex+0x1f2>
1006ac4c:	e7a1      	b.n	1006ab92 <__gethex+0x172>
1006ac4e:	0028      	movs	r0, r5
1006ac50:	1eb1      	subs	r1, r6, #2
1006ac52:	f7fe fb06 	bl	10069262 <__any_on>
1006ac56:	2800      	cmp	r0, #0
1006ac58:	d0c4      	beq.n	1006abe4 <__gethex+0x1c4>
1006ac5a:	2403      	movs	r4, #3
1006ac5c:	e7c3      	b.n	1006abe6 <__gethex+0x1c6>
1006ac5e:	9b00      	ldr	r3, [sp, #0]
1006ac60:	2400      	movs	r4, #0
1006ac62:	429e      	cmp	r6, r3
1006ac64:	dac4      	bge.n	1006abf0 <__gethex+0x1d0>
1006ac66:	1b9e      	subs	r6, r3, r6
1006ac68:	0029      	movs	r1, r5
1006ac6a:	0032      	movs	r2, r6
1006ac6c:	9803      	ldr	r0, [sp, #12]
1006ac6e:	f7fe f8bf 	bl	10068df0 <__lshift>
1006ac72:	0003      	movs	r3, r0
1006ac74:	3314      	adds	r3, #20
1006ac76:	0005      	movs	r5, r0
1006ac78:	1bbf      	subs	r7, r7, r6
1006ac7a:	9302      	str	r3, [sp, #8]
1006ac7c:	e7b8      	b.n	1006abf0 <__gethex+0x1d0>
1006ac7e:	9b01      	ldr	r3, [sp, #4]
1006ac80:	685e      	ldr	r6, [r3, #4]
1006ac82:	42be      	cmp	r6, r7
1006ac84:	dd6f      	ble.n	1006ad66 <__gethex+0x346>
1006ac86:	9b00      	ldr	r3, [sp, #0]
1006ac88:	1bf6      	subs	r6, r6, r7
1006ac8a:	42b3      	cmp	r3, r6
1006ac8c:	dc36      	bgt.n	1006acfc <__gethex+0x2dc>
1006ac8e:	9b01      	ldr	r3, [sp, #4]
1006ac90:	68db      	ldr	r3, [r3, #12]
1006ac92:	2b02      	cmp	r3, #2
1006ac94:	d024      	beq.n	1006ace0 <__gethex+0x2c0>
1006ac96:	2b03      	cmp	r3, #3
1006ac98:	d026      	beq.n	1006ace8 <__gethex+0x2c8>
1006ac9a:	2b01      	cmp	r3, #1
1006ac9c:	d117      	bne.n	1006acce <__gethex+0x2ae>
1006ac9e:	9b00      	ldr	r3, [sp, #0]
1006aca0:	42b3      	cmp	r3, r6
1006aca2:	d114      	bne.n	1006acce <__gethex+0x2ae>
1006aca4:	2b01      	cmp	r3, #1
1006aca6:	d10b      	bne.n	1006acc0 <__gethex+0x2a0>
1006aca8:	9b01      	ldr	r3, [sp, #4]
1006acaa:	9a07      	ldr	r2, [sp, #28]
1006acac:	685b      	ldr	r3, [r3, #4]
1006acae:	2662      	movs	r6, #98	@ 0x62
1006acb0:	6013      	str	r3, [r2, #0]
1006acb2:	2301      	movs	r3, #1
1006acb4:	9a02      	ldr	r2, [sp, #8]
1006acb6:	612b      	str	r3, [r5, #16]
1006acb8:	6013      	str	r3, [r2, #0]
1006acba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1006acbc:	601d      	str	r5, [r3, #0]
1006acbe:	e739      	b.n	1006ab34 <__gethex+0x114>
1006acc0:	9900      	ldr	r1, [sp, #0]
1006acc2:	0028      	movs	r0, r5
1006acc4:	3901      	subs	r1, #1
1006acc6:	f7fe facc 	bl	10069262 <__any_on>
1006acca:	2800      	cmp	r0, #0
1006accc:	d1ec      	bne.n	1006aca8 <__gethex+0x288>
1006acce:	0029      	movs	r1, r5
1006acd0:	9803      	ldr	r0, [sp, #12]
1006acd2:	f7fd fe6b 	bl	100689ac <_Bfree>
1006acd6:	2300      	movs	r3, #0
1006acd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1006acda:	2650      	movs	r6, #80	@ 0x50
1006acdc:	6013      	str	r3, [r2, #0]
1006acde:	e729      	b.n	1006ab34 <__gethex+0x114>
1006ace0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1006ace2:	2b00      	cmp	r3, #0
1006ace4:	d1f3      	bne.n	1006acce <__gethex+0x2ae>
1006ace6:	e7df      	b.n	1006aca8 <__gethex+0x288>
1006ace8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1006acea:	2b00      	cmp	r3, #0
1006acec:	d1dc      	bne.n	1006aca8 <__gethex+0x288>
1006acee:	e7ee      	b.n	1006acce <__gethex+0x2ae>
1006acf0:	1006d317 	.word	0x1006d317
1006acf4:	1006d2ad 	.word	0x1006d2ad
1006acf8:	1006d36e 	.word	0x1006d36e
1006acfc:	1e77      	subs	r7, r6, #1
1006acfe:	2c00      	cmp	r4, #0
1006ad00:	d12f      	bne.n	1006ad62 <__gethex+0x342>
1006ad02:	2f00      	cmp	r7, #0
1006ad04:	d004      	beq.n	1006ad10 <__gethex+0x2f0>
1006ad06:	0039      	movs	r1, r7
1006ad08:	0028      	movs	r0, r5
1006ad0a:	f7fe faaa 	bl	10069262 <__any_on>
1006ad0e:	0004      	movs	r4, r0
1006ad10:	231f      	movs	r3, #31
1006ad12:	117a      	asrs	r2, r7, #5
1006ad14:	401f      	ands	r7, r3
1006ad16:	3b1e      	subs	r3, #30
1006ad18:	40bb      	lsls	r3, r7
1006ad1a:	9902      	ldr	r1, [sp, #8]
1006ad1c:	0092      	lsls	r2, r2, #2
1006ad1e:	5852      	ldr	r2, [r2, r1]
1006ad20:	421a      	tst	r2, r3
1006ad22:	d001      	beq.n	1006ad28 <__gethex+0x308>
1006ad24:	2302      	movs	r3, #2
1006ad26:	431c      	orrs	r4, r3
1006ad28:	9b00      	ldr	r3, [sp, #0]
1006ad2a:	0031      	movs	r1, r6
1006ad2c:	1b9b      	subs	r3, r3, r6
1006ad2e:	2602      	movs	r6, #2
1006ad30:	0028      	movs	r0, r5
1006ad32:	9300      	str	r3, [sp, #0]
1006ad34:	f7ff fe0b 	bl	1006a94e <rshift>
1006ad38:	9b01      	ldr	r3, [sp, #4]
1006ad3a:	685f      	ldr	r7, [r3, #4]
1006ad3c:	2c00      	cmp	r4, #0
1006ad3e:	d03f      	beq.n	1006adc0 <__gethex+0x3a0>
1006ad40:	9b01      	ldr	r3, [sp, #4]
1006ad42:	68db      	ldr	r3, [r3, #12]
1006ad44:	2b02      	cmp	r3, #2
1006ad46:	d010      	beq.n	1006ad6a <__gethex+0x34a>
1006ad48:	2b03      	cmp	r3, #3
1006ad4a:	d012      	beq.n	1006ad72 <__gethex+0x352>
1006ad4c:	2b01      	cmp	r3, #1
1006ad4e:	d106      	bne.n	1006ad5e <__gethex+0x33e>
1006ad50:	07a2      	lsls	r2, r4, #30
1006ad52:	d504      	bpl.n	1006ad5e <__gethex+0x33e>
1006ad54:	9a02      	ldr	r2, [sp, #8]
1006ad56:	6812      	ldr	r2, [r2, #0]
1006ad58:	4314      	orrs	r4, r2
1006ad5a:	421c      	tst	r4, r3
1006ad5c:	d10c      	bne.n	1006ad78 <__gethex+0x358>
1006ad5e:	2310      	movs	r3, #16
1006ad60:	e02d      	b.n	1006adbe <__gethex+0x39e>
1006ad62:	2401      	movs	r4, #1
1006ad64:	e7d4      	b.n	1006ad10 <__gethex+0x2f0>
1006ad66:	2601      	movs	r6, #1
1006ad68:	e7e8      	b.n	1006ad3c <__gethex+0x31c>
1006ad6a:	2301      	movs	r3, #1
1006ad6c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1006ad6e:	1a9b      	subs	r3, r3, r2
1006ad70:	930f      	str	r3, [sp, #60]	@ 0x3c
1006ad72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1006ad74:	2b00      	cmp	r3, #0
1006ad76:	d0f2      	beq.n	1006ad5e <__gethex+0x33e>
1006ad78:	692b      	ldr	r3, [r5, #16]
1006ad7a:	2000      	movs	r0, #0
1006ad7c:	9302      	str	r3, [sp, #8]
1006ad7e:	009b      	lsls	r3, r3, #2
1006ad80:	9304      	str	r3, [sp, #16]
1006ad82:	002b      	movs	r3, r5
1006ad84:	9a04      	ldr	r2, [sp, #16]
1006ad86:	3314      	adds	r3, #20
1006ad88:	1899      	adds	r1, r3, r2
1006ad8a:	681a      	ldr	r2, [r3, #0]
1006ad8c:	1c54      	adds	r4, r2, #1
1006ad8e:	d01c      	beq.n	1006adca <__gethex+0x3aa>
1006ad90:	3201      	adds	r2, #1
1006ad92:	601a      	str	r2, [r3, #0]
1006ad94:	002b      	movs	r3, r5
1006ad96:	3314      	adds	r3, #20
1006ad98:	2e02      	cmp	r6, #2
1006ad9a:	d13f      	bne.n	1006ae1c <__gethex+0x3fc>
1006ad9c:	9a01      	ldr	r2, [sp, #4]
1006ad9e:	9900      	ldr	r1, [sp, #0]
1006ada0:	6812      	ldr	r2, [r2, #0]
1006ada2:	3a01      	subs	r2, #1
1006ada4:	428a      	cmp	r2, r1
1006ada6:	d109      	bne.n	1006adbc <__gethex+0x39c>
1006ada8:	000a      	movs	r2, r1
1006adaa:	201f      	movs	r0, #31
1006adac:	4010      	ands	r0, r2
1006adae:	2201      	movs	r2, #1
1006adb0:	4082      	lsls	r2, r0
1006adb2:	1149      	asrs	r1, r1, #5
1006adb4:	0089      	lsls	r1, r1, #2
1006adb6:	58cb      	ldr	r3, [r1, r3]
1006adb8:	4213      	tst	r3, r2
1006adba:	d13d      	bne.n	1006ae38 <__gethex+0x418>
1006adbc:	2320      	movs	r3, #32
1006adbe:	431e      	orrs	r6, r3
1006adc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1006adc2:	601d      	str	r5, [r3, #0]
1006adc4:	9b07      	ldr	r3, [sp, #28]
1006adc6:	601f      	str	r7, [r3, #0]
1006adc8:	e6b4      	b.n	1006ab34 <__gethex+0x114>
1006adca:	c301      	stmia	r3!, {r0}
1006adcc:	4299      	cmp	r1, r3
1006adce:	d8dc      	bhi.n	1006ad8a <__gethex+0x36a>
1006add0:	68ab      	ldr	r3, [r5, #8]
1006add2:	9a02      	ldr	r2, [sp, #8]
1006add4:	429a      	cmp	r2, r3
1006add6:	db18      	blt.n	1006ae0a <__gethex+0x3ea>
1006add8:	6869      	ldr	r1, [r5, #4]
1006adda:	9803      	ldr	r0, [sp, #12]
1006addc:	3101      	adds	r1, #1
1006adde:	f7fd fda1 	bl	10068924 <_Balloc>
1006ade2:	1e04      	subs	r4, r0, #0
1006ade4:	d104      	bne.n	1006adf0 <__gethex+0x3d0>
1006ade6:	0022      	movs	r2, r4
1006ade8:	2184      	movs	r1, #132	@ 0x84
1006adea:	4b1d      	ldr	r3, [pc, #116]	@ (1006ae60 <__gethex+0x440>)
1006adec:	481d      	ldr	r0, [pc, #116]	@ (1006ae64 <__gethex+0x444>)
1006adee:	e6c4      	b.n	1006ab7a <__gethex+0x15a>
1006adf0:	0029      	movs	r1, r5
1006adf2:	692a      	ldr	r2, [r5, #16]
1006adf4:	310c      	adds	r1, #12
1006adf6:	3202      	adds	r2, #2
1006adf8:	0092      	lsls	r2, r2, #2
1006adfa:	300c      	adds	r0, #12
1006adfc:	f7fc fe09 	bl	10067a12 <memcpy>
1006ae00:	0029      	movs	r1, r5
1006ae02:	9803      	ldr	r0, [sp, #12]
1006ae04:	f7fd fdd2 	bl	100689ac <_Bfree>
1006ae08:	0025      	movs	r5, r4
1006ae0a:	692b      	ldr	r3, [r5, #16]
1006ae0c:	1c5a      	adds	r2, r3, #1
1006ae0e:	612a      	str	r2, [r5, #16]
1006ae10:	2201      	movs	r2, #1
1006ae12:	3304      	adds	r3, #4
1006ae14:	009b      	lsls	r3, r3, #2
1006ae16:	18eb      	adds	r3, r5, r3
1006ae18:	605a      	str	r2, [r3, #4]
1006ae1a:	e7bb      	b.n	1006ad94 <__gethex+0x374>
1006ae1c:	692a      	ldr	r2, [r5, #16]
1006ae1e:	9902      	ldr	r1, [sp, #8]
1006ae20:	428a      	cmp	r2, r1
1006ae22:	dd0b      	ble.n	1006ae3c <__gethex+0x41c>
1006ae24:	2101      	movs	r1, #1
1006ae26:	0028      	movs	r0, r5
1006ae28:	f7ff fd91 	bl	1006a94e <rshift>
1006ae2c:	9b01      	ldr	r3, [sp, #4]
1006ae2e:	3701      	adds	r7, #1
1006ae30:	689b      	ldr	r3, [r3, #8]
1006ae32:	42bb      	cmp	r3, r7
1006ae34:	da00      	bge.n	1006ae38 <__gethex+0x418>
1006ae36:	e6df      	b.n	1006abf8 <__gethex+0x1d8>
1006ae38:	2601      	movs	r6, #1
1006ae3a:	e7bf      	b.n	1006adbc <__gethex+0x39c>
1006ae3c:	221f      	movs	r2, #31
1006ae3e:	9c00      	ldr	r4, [sp, #0]
1006ae40:	9900      	ldr	r1, [sp, #0]
1006ae42:	4014      	ands	r4, r2
1006ae44:	4211      	tst	r1, r2
1006ae46:	d0f7      	beq.n	1006ae38 <__gethex+0x418>
1006ae48:	9a04      	ldr	r2, [sp, #16]
1006ae4a:	189b      	adds	r3, r3, r2
1006ae4c:	3b04      	subs	r3, #4
1006ae4e:	6818      	ldr	r0, [r3, #0]
1006ae50:	f7fd fe60 	bl	10068b14 <__hi0bits>
1006ae54:	2320      	movs	r3, #32
1006ae56:	1b1b      	subs	r3, r3, r4
1006ae58:	4298      	cmp	r0, r3
1006ae5a:	dbe3      	blt.n	1006ae24 <__gethex+0x404>
1006ae5c:	e7ec      	b.n	1006ae38 <__gethex+0x418>
1006ae5e:	46c0      	nop			@ (mov r8, r8)
1006ae60:	1006d2ad 	.word	0x1006d2ad
1006ae64:	1006d36e 	.word	0x1006d36e

1006ae68 <L_shift>:
1006ae68:	2308      	movs	r3, #8
1006ae6a:	b570      	push	{r4, r5, r6, lr}
1006ae6c:	2520      	movs	r5, #32
1006ae6e:	1a9a      	subs	r2, r3, r2
1006ae70:	0092      	lsls	r2, r2, #2
1006ae72:	1aad      	subs	r5, r5, r2
1006ae74:	6843      	ldr	r3, [r0, #4]
1006ae76:	6804      	ldr	r4, [r0, #0]
1006ae78:	001e      	movs	r6, r3
1006ae7a:	40ae      	lsls	r6, r5
1006ae7c:	40d3      	lsrs	r3, r2
1006ae7e:	4334      	orrs	r4, r6
1006ae80:	6004      	str	r4, [r0, #0]
1006ae82:	6043      	str	r3, [r0, #4]
1006ae84:	3004      	adds	r0, #4
1006ae86:	4288      	cmp	r0, r1
1006ae88:	d3f4      	bcc.n	1006ae74 <L_shift+0xc>
1006ae8a:	bd70      	pop	{r4, r5, r6, pc}

1006ae8c <__match>:
1006ae8c:	b530      	push	{r4, r5, lr}
1006ae8e:	6803      	ldr	r3, [r0, #0]
1006ae90:	780c      	ldrb	r4, [r1, #0]
1006ae92:	3301      	adds	r3, #1
1006ae94:	2c00      	cmp	r4, #0
1006ae96:	d102      	bne.n	1006ae9e <__match+0x12>
1006ae98:	6003      	str	r3, [r0, #0]
1006ae9a:	2001      	movs	r0, #1
1006ae9c:	bd30      	pop	{r4, r5, pc}
1006ae9e:	781a      	ldrb	r2, [r3, #0]
1006aea0:	0015      	movs	r5, r2
1006aea2:	3d41      	subs	r5, #65	@ 0x41
1006aea4:	2d19      	cmp	r5, #25
1006aea6:	d800      	bhi.n	1006aeaa <__match+0x1e>
1006aea8:	3220      	adds	r2, #32
1006aeaa:	3101      	adds	r1, #1
1006aeac:	42a2      	cmp	r2, r4
1006aeae:	d0ef      	beq.n	1006ae90 <__match+0x4>
1006aeb0:	2000      	movs	r0, #0
1006aeb2:	e7f3      	b.n	1006ae9c <__match+0x10>

1006aeb4 <__hexnan>:
1006aeb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1006aeb6:	680b      	ldr	r3, [r1, #0]
1006aeb8:	b08b      	sub	sp, #44	@ 0x2c
1006aeba:	9201      	str	r2, [sp, #4]
1006aebc:	9901      	ldr	r1, [sp, #4]
1006aebe:	115a      	asrs	r2, r3, #5
1006aec0:	0092      	lsls	r2, r2, #2
1006aec2:	188a      	adds	r2, r1, r2
1006aec4:	9202      	str	r2, [sp, #8]
1006aec6:	0019      	movs	r1, r3
1006aec8:	221f      	movs	r2, #31
1006aeca:	4011      	ands	r1, r2
1006aecc:	9008      	str	r0, [sp, #32]
1006aece:	9106      	str	r1, [sp, #24]
1006aed0:	4213      	tst	r3, r2
1006aed2:	d002      	beq.n	1006aeda <__hexnan+0x26>
1006aed4:	9b02      	ldr	r3, [sp, #8]
1006aed6:	3304      	adds	r3, #4
1006aed8:	9302      	str	r3, [sp, #8]
1006aeda:	9b02      	ldr	r3, [sp, #8]
1006aedc:	2500      	movs	r5, #0
1006aede:	1f1f      	subs	r7, r3, #4
1006aee0:	003e      	movs	r6, r7
1006aee2:	003c      	movs	r4, r7
1006aee4:	9b08      	ldr	r3, [sp, #32]
1006aee6:	603d      	str	r5, [r7, #0]
1006aee8:	681b      	ldr	r3, [r3, #0]
1006aeea:	9507      	str	r5, [sp, #28]
1006aeec:	9305      	str	r3, [sp, #20]
1006aeee:	9503      	str	r5, [sp, #12]
1006aef0:	9b05      	ldr	r3, [sp, #20]
1006aef2:	3301      	adds	r3, #1
1006aef4:	9309      	str	r3, [sp, #36]	@ 0x24
1006aef6:	9b05      	ldr	r3, [sp, #20]
1006aef8:	785b      	ldrb	r3, [r3, #1]
1006aefa:	9304      	str	r3, [sp, #16]
1006aefc:	2b00      	cmp	r3, #0
1006aefe:	d028      	beq.n	1006af52 <__hexnan+0x9e>
1006af00:	9804      	ldr	r0, [sp, #16]
1006af02:	f7ff fd77 	bl	1006a9f4 <__hexdig_fun>
1006af06:	2800      	cmp	r0, #0
1006af08:	d155      	bne.n	1006afb6 <__hexnan+0x102>
1006af0a:	9b04      	ldr	r3, [sp, #16]
1006af0c:	2b20      	cmp	r3, #32
1006af0e:	d819      	bhi.n	1006af44 <__hexnan+0x90>
1006af10:	9b03      	ldr	r3, [sp, #12]
1006af12:	9a07      	ldr	r2, [sp, #28]
1006af14:	4293      	cmp	r3, r2
1006af16:	dd12      	ble.n	1006af3e <__hexnan+0x8a>
1006af18:	42b4      	cmp	r4, r6
1006af1a:	d206      	bcs.n	1006af2a <__hexnan+0x76>
1006af1c:	2d07      	cmp	r5, #7
1006af1e:	dc04      	bgt.n	1006af2a <__hexnan+0x76>
1006af20:	002a      	movs	r2, r5
1006af22:	0031      	movs	r1, r6
1006af24:	0020      	movs	r0, r4
1006af26:	f7ff ff9f 	bl	1006ae68 <L_shift>
1006af2a:	9b01      	ldr	r3, [sp, #4]
1006af2c:	2508      	movs	r5, #8
1006af2e:	429c      	cmp	r4, r3
1006af30:	d905      	bls.n	1006af3e <__hexnan+0x8a>
1006af32:	1f26      	subs	r6, r4, #4
1006af34:	2500      	movs	r5, #0
1006af36:	0034      	movs	r4, r6
1006af38:	9b03      	ldr	r3, [sp, #12]
1006af3a:	6035      	str	r5, [r6, #0]
1006af3c:	9307      	str	r3, [sp, #28]
1006af3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1006af40:	9305      	str	r3, [sp, #20]
1006af42:	e7d5      	b.n	1006aef0 <__hexnan+0x3c>
1006af44:	9b04      	ldr	r3, [sp, #16]
1006af46:	2b29      	cmp	r3, #41	@ 0x29
1006af48:	d15a      	bne.n	1006b000 <__hexnan+0x14c>
1006af4a:	9b05      	ldr	r3, [sp, #20]
1006af4c:	9a08      	ldr	r2, [sp, #32]
1006af4e:	3302      	adds	r3, #2
1006af50:	6013      	str	r3, [r2, #0]
1006af52:	9b03      	ldr	r3, [sp, #12]
1006af54:	2b00      	cmp	r3, #0
1006af56:	d053      	beq.n	1006b000 <__hexnan+0x14c>
1006af58:	42b4      	cmp	r4, r6
1006af5a:	d206      	bcs.n	1006af6a <__hexnan+0xb6>
1006af5c:	2d07      	cmp	r5, #7
1006af5e:	dc04      	bgt.n	1006af6a <__hexnan+0xb6>
1006af60:	002a      	movs	r2, r5
1006af62:	0031      	movs	r1, r6
1006af64:	0020      	movs	r0, r4
1006af66:	f7ff ff7f 	bl	1006ae68 <L_shift>
1006af6a:	9b01      	ldr	r3, [sp, #4]
1006af6c:	429c      	cmp	r4, r3
1006af6e:	d936      	bls.n	1006afde <__hexnan+0x12a>
1006af70:	001a      	movs	r2, r3
1006af72:	0023      	movs	r3, r4
1006af74:	cb02      	ldmia	r3!, {r1}
1006af76:	c202      	stmia	r2!, {r1}
1006af78:	429f      	cmp	r7, r3
1006af7a:	d2fb      	bcs.n	1006af74 <__hexnan+0xc0>
1006af7c:	9b02      	ldr	r3, [sp, #8]
1006af7e:	1c62      	adds	r2, r4, #1
1006af80:	1ed9      	subs	r1, r3, #3
1006af82:	2304      	movs	r3, #4
1006af84:	4291      	cmp	r1, r2
1006af86:	d305      	bcc.n	1006af94 <__hexnan+0xe0>
1006af88:	9b02      	ldr	r3, [sp, #8]
1006af8a:	3b04      	subs	r3, #4
1006af8c:	1b1b      	subs	r3, r3, r4
1006af8e:	089b      	lsrs	r3, r3, #2
1006af90:	3301      	adds	r3, #1
1006af92:	009b      	lsls	r3, r3, #2
1006af94:	9a01      	ldr	r2, [sp, #4]
1006af96:	18d3      	adds	r3, r2, r3
1006af98:	2200      	movs	r2, #0
1006af9a:	c304      	stmia	r3!, {r2}
1006af9c:	429f      	cmp	r7, r3
1006af9e:	d2fc      	bcs.n	1006af9a <__hexnan+0xe6>
1006afa0:	683b      	ldr	r3, [r7, #0]
1006afa2:	2b00      	cmp	r3, #0
1006afa4:	d104      	bne.n	1006afb0 <__hexnan+0xfc>
1006afa6:	9b01      	ldr	r3, [sp, #4]
1006afa8:	429f      	cmp	r7, r3
1006afaa:	d127      	bne.n	1006affc <__hexnan+0x148>
1006afac:	2301      	movs	r3, #1
1006afae:	603b      	str	r3, [r7, #0]
1006afb0:	2005      	movs	r0, #5
1006afb2:	b00b      	add	sp, #44	@ 0x2c
1006afb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006afb6:	9b03      	ldr	r3, [sp, #12]
1006afb8:	3501      	adds	r5, #1
1006afba:	3301      	adds	r3, #1
1006afbc:	9303      	str	r3, [sp, #12]
1006afbe:	2d08      	cmp	r5, #8
1006afc0:	dd06      	ble.n	1006afd0 <__hexnan+0x11c>
1006afc2:	9b01      	ldr	r3, [sp, #4]
1006afc4:	429c      	cmp	r4, r3
1006afc6:	d9ba      	bls.n	1006af3e <__hexnan+0x8a>
1006afc8:	2300      	movs	r3, #0
1006afca:	2501      	movs	r5, #1
1006afcc:	3c04      	subs	r4, #4
1006afce:	6023      	str	r3, [r4, #0]
1006afd0:	220f      	movs	r2, #15
1006afd2:	6823      	ldr	r3, [r4, #0]
1006afd4:	4010      	ands	r0, r2
1006afd6:	011b      	lsls	r3, r3, #4
1006afd8:	4303      	orrs	r3, r0
1006afda:	6023      	str	r3, [r4, #0]
1006afdc:	e7af      	b.n	1006af3e <__hexnan+0x8a>
1006afde:	9b06      	ldr	r3, [sp, #24]
1006afe0:	2b00      	cmp	r3, #0
1006afe2:	d0dd      	beq.n	1006afa0 <__hexnan+0xec>
1006afe4:	2320      	movs	r3, #32
1006afe6:	9a06      	ldr	r2, [sp, #24]
1006afe8:	9902      	ldr	r1, [sp, #8]
1006afea:	1a9b      	subs	r3, r3, r2
1006afec:	2201      	movs	r2, #1
1006afee:	4252      	negs	r2, r2
1006aff0:	40da      	lsrs	r2, r3
1006aff2:	3904      	subs	r1, #4
1006aff4:	680b      	ldr	r3, [r1, #0]
1006aff6:	4013      	ands	r3, r2
1006aff8:	600b      	str	r3, [r1, #0]
1006affa:	e7d1      	b.n	1006afa0 <__hexnan+0xec>
1006affc:	3f04      	subs	r7, #4
1006affe:	e7cf      	b.n	1006afa0 <__hexnan+0xec>
1006b000:	2004      	movs	r0, #4
1006b002:	e7d6      	b.n	1006afb2 <__hexnan+0xfe>

1006b004 <__ascii_mbtowc>:
1006b004:	b082      	sub	sp, #8
1006b006:	2900      	cmp	r1, #0
1006b008:	d100      	bne.n	1006b00c <__ascii_mbtowc+0x8>
1006b00a:	a901      	add	r1, sp, #4
1006b00c:	1e10      	subs	r0, r2, #0
1006b00e:	d006      	beq.n	1006b01e <__ascii_mbtowc+0x1a>
1006b010:	2b00      	cmp	r3, #0
1006b012:	d006      	beq.n	1006b022 <__ascii_mbtowc+0x1e>
1006b014:	7813      	ldrb	r3, [r2, #0]
1006b016:	600b      	str	r3, [r1, #0]
1006b018:	7810      	ldrb	r0, [r2, #0]
1006b01a:	1e43      	subs	r3, r0, #1
1006b01c:	4198      	sbcs	r0, r3
1006b01e:	b002      	add	sp, #8
1006b020:	4770      	bx	lr
1006b022:	2002      	movs	r0, #2
1006b024:	4240      	negs	r0, r0
1006b026:	e7fa      	b.n	1006b01e <__ascii_mbtowc+0x1a>

1006b028 <_realloc_r>:
1006b028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006b02a:	0006      	movs	r6, r0
1006b02c:	000c      	movs	r4, r1
1006b02e:	0015      	movs	r5, r2
1006b030:	2900      	cmp	r1, #0
1006b032:	d105      	bne.n	1006b040 <_realloc_r+0x18>
1006b034:	0011      	movs	r1, r2
1006b036:	f7fd fbe5 	bl	10068804 <_malloc_r>
1006b03a:	0004      	movs	r4, r0
1006b03c:	0020      	movs	r0, r4
1006b03e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006b040:	2a00      	cmp	r2, #0
1006b042:	d103      	bne.n	1006b04c <_realloc_r+0x24>
1006b044:	f7fd fb68 	bl	10068718 <_free_r>
1006b048:	002c      	movs	r4, r5
1006b04a:	e7f7      	b.n	1006b03c <_realloc_r+0x14>
1006b04c:	f000 f841 	bl	1006b0d2 <_malloc_usable_size_r>
1006b050:	0007      	movs	r7, r0
1006b052:	4285      	cmp	r5, r0
1006b054:	d802      	bhi.n	1006b05c <_realloc_r+0x34>
1006b056:	0843      	lsrs	r3, r0, #1
1006b058:	42ab      	cmp	r3, r5
1006b05a:	d3ef      	bcc.n	1006b03c <_realloc_r+0x14>
1006b05c:	0029      	movs	r1, r5
1006b05e:	0030      	movs	r0, r6
1006b060:	f7fd fbd0 	bl	10068804 <_malloc_r>
1006b064:	9001      	str	r0, [sp, #4]
1006b066:	2800      	cmp	r0, #0
1006b068:	d101      	bne.n	1006b06e <_realloc_r+0x46>
1006b06a:	9c01      	ldr	r4, [sp, #4]
1006b06c:	e7e6      	b.n	1006b03c <_realloc_r+0x14>
1006b06e:	002a      	movs	r2, r5
1006b070:	42bd      	cmp	r5, r7
1006b072:	d900      	bls.n	1006b076 <_realloc_r+0x4e>
1006b074:	003a      	movs	r2, r7
1006b076:	0021      	movs	r1, r4
1006b078:	9801      	ldr	r0, [sp, #4]
1006b07a:	f7fc fcca 	bl	10067a12 <memcpy>
1006b07e:	0021      	movs	r1, r4
1006b080:	0030      	movs	r0, r6
1006b082:	f7fd fb49 	bl	10068718 <_free_r>
1006b086:	e7f0      	b.n	1006b06a <_realloc_r+0x42>

1006b088 <__ascii_wctomb>:
1006b088:	0003      	movs	r3, r0
1006b08a:	1e08      	subs	r0, r1, #0
1006b08c:	d005      	beq.n	1006b09a <__ascii_wctomb+0x12>
1006b08e:	2aff      	cmp	r2, #255	@ 0xff
1006b090:	d904      	bls.n	1006b09c <__ascii_wctomb+0x14>
1006b092:	228a      	movs	r2, #138	@ 0x8a
1006b094:	2001      	movs	r0, #1
1006b096:	601a      	str	r2, [r3, #0]
1006b098:	4240      	negs	r0, r0
1006b09a:	4770      	bx	lr
1006b09c:	2001      	movs	r0, #1
1006b09e:	700a      	strb	r2, [r1, #0]
1006b0a0:	e7fb      	b.n	1006b09a <__ascii_wctomb+0x12>
	...

1006b0a4 <fiprintf>:
1006b0a4:	b40e      	push	{r1, r2, r3}
1006b0a6:	b517      	push	{r0, r1, r2, r4, lr}
1006b0a8:	4c05      	ldr	r4, [pc, #20]	@ (1006b0c0 <fiprintf+0x1c>)
1006b0aa:	ab05      	add	r3, sp, #20
1006b0ac:	cb04      	ldmia	r3!, {r2}
1006b0ae:	0001      	movs	r1, r0
1006b0b0:	6820      	ldr	r0, [r4, #0]
1006b0b2:	9301      	str	r3, [sp, #4]
1006b0b4:	f7ff f92a 	bl	1006a30c <_vfiprintf_r>
1006b0b8:	bc1e      	pop	{r1, r2, r3, r4}
1006b0ba:	bc08      	pop	{r3}
1006b0bc:	b003      	add	sp, #12
1006b0be:	4718      	bx	r3
1006b0c0:	20001530 	.word	0x20001530

1006b0c4 <abort>:
1006b0c4:	2006      	movs	r0, #6
1006b0c6:	b510      	push	{r4, lr}
1006b0c8:	f000 f834 	bl	1006b134 <raise>
1006b0cc:	2001      	movs	r0, #1
1006b0ce:	f7d8 fc31 	bl	10043934 <_exit>

1006b0d2 <_malloc_usable_size_r>:
1006b0d2:	1f0b      	subs	r3, r1, #4
1006b0d4:	681b      	ldr	r3, [r3, #0]
1006b0d6:	1f18      	subs	r0, r3, #4
1006b0d8:	2b00      	cmp	r3, #0
1006b0da:	da01      	bge.n	1006b0e0 <_malloc_usable_size_r+0xe>
1006b0dc:	580b      	ldr	r3, [r1, r0]
1006b0de:	18c0      	adds	r0, r0, r3
1006b0e0:	4770      	bx	lr

1006b0e2 <_raise_r>:
1006b0e2:	b570      	push	{r4, r5, r6, lr}
1006b0e4:	0004      	movs	r4, r0
1006b0e6:	000d      	movs	r5, r1
1006b0e8:	291f      	cmp	r1, #31
1006b0ea:	d904      	bls.n	1006b0f6 <_raise_r+0x14>
1006b0ec:	2316      	movs	r3, #22
1006b0ee:	6003      	str	r3, [r0, #0]
1006b0f0:	2001      	movs	r0, #1
1006b0f2:	4240      	negs	r0, r0
1006b0f4:	bd70      	pop	{r4, r5, r6, pc}
1006b0f6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
1006b0f8:	2b00      	cmp	r3, #0
1006b0fa:	d004      	beq.n	1006b106 <_raise_r+0x24>
1006b0fc:	008a      	lsls	r2, r1, #2
1006b0fe:	189b      	adds	r3, r3, r2
1006b100:	681a      	ldr	r2, [r3, #0]
1006b102:	2a00      	cmp	r2, #0
1006b104:	d108      	bne.n	1006b118 <_raise_r+0x36>
1006b106:	0020      	movs	r0, r4
1006b108:	f000 f830 	bl	1006b16c <_getpid_r>
1006b10c:	002a      	movs	r2, r5
1006b10e:	0001      	movs	r1, r0
1006b110:	0020      	movs	r0, r4
1006b112:	f000 f819 	bl	1006b148 <_kill_r>
1006b116:	e7ed      	b.n	1006b0f4 <_raise_r+0x12>
1006b118:	2a01      	cmp	r2, #1
1006b11a:	d009      	beq.n	1006b130 <_raise_r+0x4e>
1006b11c:	1c51      	adds	r1, r2, #1
1006b11e:	d103      	bne.n	1006b128 <_raise_r+0x46>
1006b120:	2316      	movs	r3, #22
1006b122:	6003      	str	r3, [r0, #0]
1006b124:	2001      	movs	r0, #1
1006b126:	e7e5      	b.n	1006b0f4 <_raise_r+0x12>
1006b128:	2100      	movs	r1, #0
1006b12a:	0028      	movs	r0, r5
1006b12c:	6019      	str	r1, [r3, #0]
1006b12e:	4790      	blx	r2
1006b130:	2000      	movs	r0, #0
1006b132:	e7df      	b.n	1006b0f4 <_raise_r+0x12>

1006b134 <raise>:
1006b134:	b510      	push	{r4, lr}
1006b136:	4b03      	ldr	r3, [pc, #12]	@ (1006b144 <raise+0x10>)
1006b138:	0001      	movs	r1, r0
1006b13a:	6818      	ldr	r0, [r3, #0]
1006b13c:	f7ff ffd1 	bl	1006b0e2 <_raise_r>
1006b140:	bd10      	pop	{r4, pc}
1006b142:	46c0      	nop			@ (mov r8, r8)
1006b144:	20001530 	.word	0x20001530

1006b148 <_kill_r>:
1006b148:	2300      	movs	r3, #0
1006b14a:	b570      	push	{r4, r5, r6, lr}
1006b14c:	4d06      	ldr	r5, [pc, #24]	@ (1006b168 <_kill_r+0x20>)
1006b14e:	0004      	movs	r4, r0
1006b150:	0008      	movs	r0, r1
1006b152:	0011      	movs	r1, r2
1006b154:	602b      	str	r3, [r5, #0]
1006b156:	f7d8 fbdd 	bl	10043914 <_kill>
1006b15a:	1c43      	adds	r3, r0, #1
1006b15c:	d103      	bne.n	1006b166 <_kill_r+0x1e>
1006b15e:	682b      	ldr	r3, [r5, #0]
1006b160:	2b00      	cmp	r3, #0
1006b162:	d000      	beq.n	1006b166 <_kill_r+0x1e>
1006b164:	6023      	str	r3, [r4, #0]
1006b166:	bd70      	pop	{r4, r5, r6, pc}
1006b168:	20001308 	.word	0x20001308

1006b16c <_getpid_r>:
1006b16c:	b510      	push	{r4, lr}
1006b16e:	f7d8 fbcb 	bl	10043908 <_getpid>
1006b172:	bd10      	pop	{r4, pc}

1006b174 <AES_CMAC_Encrypt_Append>:
1006b174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006b176:	2500      	movs	r5, #0
1006b178:	b08a      	sub	sp, #40	@ 0x28
1006b17a:	460e      	mov	r6, r1
1006b17c:	4604      	mov	r4, r0
1006b17e:	2800      	cmp	r0, #0
1006b180:	d004      	beq.n	1006b18c <AES_CMAC_Encrypt_Append+0x18>
1006b182:	2e00      	cmp	r6, #0
1006b184:	d106      	bne.n	1006b194 <AES_CMAC_Encrypt_Append+0x20>
1006b186:	980c      	ldr	r0, [sp, #48]	@ 0x30
1006b188:	2800      	cmp	r0, #0
1006b18a:	dd03      	ble.n	1006b194 <AES_CMAC_Encrypt_Append+0x20>
1006b18c:	2061      	movs	r0, #97	@ 0x61
1006b18e:	0140      	lsls	r0, r0, #5
1006b190:	b00d      	add	sp, #52	@ 0x34
1006b192:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006b194:	980c      	ldr	r0, [sp, #48]	@ 0x30
1006b196:	2800      	cmp	r0, #0
1006b198:	db04      	blt.n	1006b1a4 <AES_CMAC_Encrypt_Append+0x30>
1006b19a:	2810      	cmp	r0, #16
1006b19c:	da04      	bge.n	1006b1a8 <AES_CMAC_Encrypt_Append+0x34>
1006b19e:	7920      	ldrb	r0, [r4, #4]
1006b1a0:	0680      	lsls	r0, r0, #26
1006b1a2:	d401      	bmi.n	1006b1a8 <AES_CMAC_Encrypt_Append+0x34>
1006b1a4:	488c      	ldr	r0, [pc, #560]	@ (1006b3d8 <AES_CMAC_Encrypt_Append+0x264>)
1006b1a6:	e7f3      	b.n	1006b190 <AES_CMAC_Encrypt_Append+0x1c>
1006b1a8:	7920      	ldrb	r0, [r4, #4]
1006b1aa:	0741      	lsls	r1, r0, #29
1006b1ac:	d401      	bmi.n	1006b1b2 <AES_CMAC_Encrypt_Append+0x3e>
1006b1ae:	0781      	lsls	r1, r0, #30
1006b1b0:	d502      	bpl.n	1006b1b8 <AES_CMAC_Encrypt_Append+0x44>
1006b1b2:	4889      	ldr	r0, [pc, #548]	@ (1006b3d8 <AES_CMAC_Encrypt_Append+0x264>)
1006b1b4:	1c40      	adds	r0, r0, #1
1006b1b6:	e7eb      	b.n	1006b190 <AES_CMAC_Encrypt_Append+0x1c>
1006b1b8:	2140      	movs	r1, #64	@ 0x40
1006b1ba:	4308      	orrs	r0, r1
1006b1bc:	7120      	strb	r0, [r4, #4]
1006b1be:	4620      	mov	r0, r4
1006b1c0:	3014      	adds	r0, #20
1006b1c2:	9008      	str	r0, [sp, #32]
1006b1c4:	e01c      	b.n	1006b200 <AES_CMAC_Encrypt_Append+0x8c>
1006b1c6:	2000      	movs	r0, #0
1006b1c8:	0081      	lsls	r1, r0, #2
1006b1ca:	194a      	adds	r2, r1, r5
1006b1cc:	1992      	adds	r2, r2, r6
1006b1ce:	7853      	ldrb	r3, [r2, #1]
1006b1d0:	7817      	ldrb	r7, [r2, #0]
1006b1d2:	021b      	lsls	r3, r3, #8
1006b1d4:	433b      	orrs	r3, r7
1006b1d6:	7897      	ldrb	r7, [r2, #2]
1006b1d8:	ba5b      	rev16	r3, r3
1006b1da:	041b      	lsls	r3, r3, #16
1006b1dc:	023f      	lsls	r7, r7, #8
1006b1de:	78d2      	ldrb	r2, [r2, #3]
1006b1e0:	433b      	orrs	r3, r7
1006b1e2:	4313      	orrs	r3, r2
1006b1e4:	190a      	adds	r2, r1, r4
1006b1e6:	6952      	ldr	r2, [r2, #20]
1006b1e8:	1c40      	adds	r0, r0, #1
1006b1ea:	4053      	eors	r3, r2
1006b1ec:	aa04      	add	r2, sp, #16
1006b1ee:	5053      	str	r3, [r2, r1]
1006b1f0:	2804      	cmp	r0, #4
1006b1f2:	dbe9      	blt.n	1006b1c8 <AES_CMAC_Encrypt_Append+0x54>
1006b1f4:	68a2      	ldr	r2, [r4, #8]
1006b1f6:	a804      	add	r0, sp, #16
1006b1f8:	9908      	ldr	r1, [sp, #32]
1006b1fa:	f7dc fd17 	bl	10047c2c <AES_128_HW_enc>
1006b1fe:	9d00      	ldr	r5, [sp, #0]
1006b200:	990c      	ldr	r1, [sp, #48]	@ 0x30
1006b202:	4628      	mov	r0, r5
1006b204:	3010      	adds	r0, #16
1006b206:	9000      	str	r0, [sp, #0]
1006b208:	4288      	cmp	r0, r1
1006b20a:	dbdc      	blt.n	1006b1c6 <AES_CMAC_Encrypt_Append+0x52>
1006b20c:	7920      	ldrb	r0, [r4, #4]
1006b20e:	0680      	lsls	r0, r0, #26
1006b210:	d41e      	bmi.n	1006b250 <AES_CMAC_Encrypt_Append+0xdc>
1006b212:	2900      	cmp	r1, #0
1006b214:	dd1c      	ble.n	1006b250 <AES_CMAC_Encrypt_Append+0xdc>
1006b216:	2000      	movs	r0, #0
1006b218:	0081      	lsls	r1, r0, #2
1006b21a:	194a      	adds	r2, r1, r5
1006b21c:	1992      	adds	r2, r2, r6
1006b21e:	7853      	ldrb	r3, [r2, #1]
1006b220:	7817      	ldrb	r7, [r2, #0]
1006b222:	021b      	lsls	r3, r3, #8
1006b224:	433b      	orrs	r3, r7
1006b226:	7897      	ldrb	r7, [r2, #2]
1006b228:	ba5b      	rev16	r3, r3
1006b22a:	041b      	lsls	r3, r3, #16
1006b22c:	023f      	lsls	r7, r7, #8
1006b22e:	78d2      	ldrb	r2, [r2, #3]
1006b230:	433b      	orrs	r3, r7
1006b232:	4313      	orrs	r3, r2
1006b234:	190a      	adds	r2, r1, r4
1006b236:	6952      	ldr	r2, [r2, #20]
1006b238:	1c40      	adds	r0, r0, #1
1006b23a:	4053      	eors	r3, r2
1006b23c:	aa04      	add	r2, sp, #16
1006b23e:	5053      	str	r3, [r2, r1]
1006b240:	2804      	cmp	r0, #4
1006b242:	dbe9      	blt.n	1006b218 <AES_CMAC_Encrypt_Append+0xa4>
1006b244:	68a2      	ldr	r2, [r4, #8]
1006b246:	a804      	add	r0, sp, #16
1006b248:	9908      	ldr	r1, [sp, #32]
1006b24a:	f7dc fcef 	bl	10047c2c <AES_128_HW_enc>
1006b24e:	e0c0      	b.n	1006b3d2 <AES_CMAC_Encrypt_Append+0x25e>
1006b250:	2000      	movs	r0, #0
1006b252:	9000      	str	r0, [sp, #0]
1006b254:	9001      	str	r0, [sp, #4]
1006b256:	9002      	str	r0, [sp, #8]
1006b258:	9003      	str	r0, [sp, #12]
1006b25a:	4669      	mov	r1, sp
1006b25c:	4608      	mov	r0, r1
1006b25e:	68a2      	ldr	r2, [r4, #8]
1006b260:	f7dc fce4 	bl	10047c2c <AES_128_HW_enc>
1006b264:	9900      	ldr	r1, [sp, #0]
1006b266:	2287      	movs	r2, #135	@ 0x87
1006b268:	0fc8      	lsrs	r0, r1, #31
1006b26a:	4350      	muls	r0, r2
1006b26c:	9a01      	ldr	r2, [sp, #4]
1006b26e:	0049      	lsls	r1, r1, #1
1006b270:	0fd2      	lsrs	r2, r2, #31
1006b272:	4311      	orrs	r1, r2
1006b274:	9100      	str	r1, [sp, #0]
1006b276:	9901      	ldr	r1, [sp, #4]
1006b278:	9a02      	ldr	r2, [sp, #8]
1006b27a:	0049      	lsls	r1, r1, #1
1006b27c:	0fd2      	lsrs	r2, r2, #31
1006b27e:	4311      	orrs	r1, r2
1006b280:	9101      	str	r1, [sp, #4]
1006b282:	9902      	ldr	r1, [sp, #8]
1006b284:	9a03      	ldr	r2, [sp, #12]
1006b286:	0049      	lsls	r1, r1, #1
1006b288:	0fd2      	lsrs	r2, r2, #31
1006b28a:	4311      	orrs	r1, r2
1006b28c:	9102      	str	r1, [sp, #8]
1006b28e:	9903      	ldr	r1, [sp, #12]
1006b290:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1006b292:	0049      	lsls	r1, r1, #1
1006b294:	4041      	eors	r1, r0
1006b296:	4628      	mov	r0, r5
1006b298:	3010      	adds	r0, #16
1006b29a:	9103      	str	r1, [sp, #12]
1006b29c:	4290      	cmp	r0, r2
1006b29e:	d11a      	bne.n	1006b2d6 <AES_CMAC_Encrypt_Append+0x162>
1006b2a0:	2000      	movs	r0, #0
1006b2a2:	0081      	lsls	r1, r0, #2
1006b2a4:	194a      	adds	r2, r1, r5
1006b2a6:	1993      	adds	r3, r2, r6
1006b2a8:	785a      	ldrb	r2, [r3, #1]
1006b2aa:	781f      	ldrb	r7, [r3, #0]
1006b2ac:	0212      	lsls	r2, r2, #8
1006b2ae:	433a      	orrs	r2, r7
1006b2b0:	789f      	ldrb	r7, [r3, #2]
1006b2b2:	ba52      	rev16	r2, r2
1006b2b4:	0412      	lsls	r2, r2, #16
1006b2b6:	023f      	lsls	r7, r7, #8
1006b2b8:	433a      	orrs	r2, r7
1006b2ba:	78db      	ldrb	r3, [r3, #3]
1006b2bc:	466f      	mov	r7, sp
1006b2be:	431a      	orrs	r2, r3
1006b2c0:	190b      	adds	r3, r1, r4
1006b2c2:	695b      	ldr	r3, [r3, #20]
1006b2c4:	587f      	ldr	r7, [r7, r1]
1006b2c6:	1c40      	adds	r0, r0, #1
1006b2c8:	407b      	eors	r3, r7
1006b2ca:	405a      	eors	r2, r3
1006b2cc:	ab04      	add	r3, sp, #16
1006b2ce:	505a      	str	r2, [r3, r1]
1006b2d0:	2804      	cmp	r0, #4
1006b2d2:	dbe6      	blt.n	1006b2a2 <AES_CMAC_Encrypt_Append+0x12e>
1006b2d4:	e074      	b.n	1006b3c0 <AES_CMAC_Encrypt_Append+0x24c>
1006b2d6:	9a00      	ldr	r2, [sp, #0]
1006b2d8:	2387      	movs	r3, #135	@ 0x87
1006b2da:	0fd0      	lsrs	r0, r2, #31
1006b2dc:	4358      	muls	r0, r3
1006b2de:	9b01      	ldr	r3, [sp, #4]
1006b2e0:	0052      	lsls	r2, r2, #1
1006b2e2:	0fdb      	lsrs	r3, r3, #31
1006b2e4:	431a      	orrs	r2, r3
1006b2e6:	9200      	str	r2, [sp, #0]
1006b2e8:	9a01      	ldr	r2, [sp, #4]
1006b2ea:	9b02      	ldr	r3, [sp, #8]
1006b2ec:	0052      	lsls	r2, r2, #1
1006b2ee:	0fdb      	lsrs	r3, r3, #31
1006b2f0:	431a      	orrs	r2, r3
1006b2f2:	9201      	str	r2, [sp, #4]
1006b2f4:	9a02      	ldr	r2, [sp, #8]
1006b2f6:	0fcb      	lsrs	r3, r1, #31
1006b2f8:	0052      	lsls	r2, r2, #1
1006b2fa:	431a      	orrs	r2, r3
1006b2fc:	9202      	str	r2, [sp, #8]
1006b2fe:	004a      	lsls	r2, r1, #1
1006b300:	4042      	eors	r2, r0
1006b302:	9203      	str	r2, [sp, #12]
1006b304:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1006b306:	2000      	movs	r0, #0
1006b308:	1b53      	subs	r3, r2, r5
1006b30a:	17da      	asrs	r2, r3, #31
1006b30c:	469c      	mov	ip, r3
1006b30e:	0f92      	lsrs	r2, r2, #30
1006b310:	4462      	add	r2, ip
1006b312:	1092      	asrs	r2, r2, #2
1006b314:	4696      	mov	lr, r2
1006b316:	e016      	b.n	1006b346 <AES_CMAC_Encrypt_Append+0x1d2>
1006b318:	0081      	lsls	r1, r0, #2
1006b31a:	194a      	adds	r2, r1, r5
1006b31c:	1993      	adds	r3, r2, r6
1006b31e:	785a      	ldrb	r2, [r3, #1]
1006b320:	781f      	ldrb	r7, [r3, #0]
1006b322:	0212      	lsls	r2, r2, #8
1006b324:	433a      	orrs	r2, r7
1006b326:	789f      	ldrb	r7, [r3, #2]
1006b328:	ba52      	rev16	r2, r2
1006b32a:	0412      	lsls	r2, r2, #16
1006b32c:	023f      	lsls	r7, r7, #8
1006b32e:	433a      	orrs	r2, r7
1006b330:	78db      	ldrb	r3, [r3, #3]
1006b332:	466f      	mov	r7, sp
1006b334:	431a      	orrs	r2, r3
1006b336:	190b      	adds	r3, r1, r4
1006b338:	695b      	ldr	r3, [r3, #20]
1006b33a:	587f      	ldr	r7, [r7, r1]
1006b33c:	407b      	eors	r3, r7
1006b33e:	405a      	eors	r2, r3
1006b340:	ab04      	add	r3, sp, #16
1006b342:	505a      	str	r2, [r3, r1]
1006b344:	1c40      	adds	r0, r0, #1
1006b346:	4586      	cmp	lr, r0
1006b348:	dce6      	bgt.n	1006b318 <AES_CMAC_Encrypt_Append+0x1a4>
1006b34a:	0081      	lsls	r1, r0, #2
1006b34c:	190a      	adds	r2, r1, r4
1006b34e:	466b      	mov	r3, sp
1006b350:	6952      	ldr	r2, [r2, #20]
1006b352:	585b      	ldr	r3, [r3, r1]
1006b354:	4667      	mov	r7, ip
1006b356:	405a      	eors	r2, r3
1006b358:	ab04      	add	r3, sp, #16
1006b35a:	505a      	str	r2, [r3, r1]
1006b35c:	1a7f      	subs	r7, r7, r1
1006b35e:	2200      	movs	r2, #0
1006b360:	194b      	adds	r3, r1, r5
1006b362:	46bc      	mov	ip, r7
1006b364:	469e      	mov	lr, r3
1006b366:	e00b      	b.n	1006b380 <AES_CMAC_Encrypt_Append+0x20c>
1006b368:	4673      	mov	r3, lr
1006b36a:	189b      	adds	r3, r3, r2
1006b36c:	5cf3      	ldrb	r3, [r6, r3]
1006b36e:	00d7      	lsls	r7, r2, #3
1006b370:	2518      	movs	r5, #24
1006b372:	1bed      	subs	r5, r5, r7
1006b374:	40ab      	lsls	r3, r5
1006b376:	ad04      	add	r5, sp, #16
1006b378:	586f      	ldr	r7, [r5, r1]
1006b37a:	407b      	eors	r3, r7
1006b37c:	506b      	str	r3, [r5, r1]
1006b37e:	1c52      	adds	r2, r2, #1
1006b380:	4594      	cmp	ip, r2
1006b382:	dcf1      	bgt.n	1006b368 <AES_CMAC_Encrypt_Append+0x1f4>
1006b384:	2a00      	cmp	r2, #0
1006b386:	d009      	beq.n	1006b39c <AES_CMAC_Encrypt_Append+0x228>
1006b388:	00d6      	lsls	r6, r2, #3
1006b38a:	2218      	movs	r2, #24
1006b38c:	ab04      	add	r3, sp, #16
1006b38e:	1b96      	subs	r6, r2, r6
1006b390:	585d      	ldr	r5, [r3, r1]
1006b392:	2280      	movs	r2, #128	@ 0x80
1006b394:	40b2      	lsls	r2, r6
1006b396:	4055      	eors	r5, r2
1006b398:	505d      	str	r5, [r3, r1]
1006b39a:	e005      	b.n	1006b3a8 <AES_CMAC_Encrypt_Append+0x234>
1006b39c:	aa04      	add	r2, sp, #16
1006b39e:	5853      	ldr	r3, [r2, r1]
1006b3a0:	2501      	movs	r5, #1
1006b3a2:	07ed      	lsls	r5, r5, #31
1006b3a4:	406b      	eors	r3, r5
1006b3a6:	5053      	str	r3, [r2, r1]
1006b3a8:	ab04      	add	r3, sp, #16
1006b3aa:	466a      	mov	r2, sp
1006b3ac:	e005      	b.n	1006b3ba <AES_CMAC_Encrypt_Append+0x246>
1006b3ae:	0081      	lsls	r1, r0, #2
1006b3b0:	190d      	adds	r5, r1, r4
1006b3b2:	696d      	ldr	r5, [r5, #20]
1006b3b4:	5856      	ldr	r6, [r2, r1]
1006b3b6:	4075      	eors	r5, r6
1006b3b8:	505d      	str	r5, [r3, r1]
1006b3ba:	1c40      	adds	r0, r0, #1
1006b3bc:	2804      	cmp	r0, #4
1006b3be:	dbf6      	blt.n	1006b3ae <AES_CMAC_Encrypt_Append+0x23a>
1006b3c0:	68a2      	ldr	r2, [r4, #8]
1006b3c2:	4618      	mov	r0, r3
1006b3c4:	9908      	ldr	r1, [sp, #32]
1006b3c6:	f7dc fc31 	bl	10047c2c <AES_128_HW_enc>
1006b3ca:	7920      	ldrb	r0, [r4, #4]
1006b3cc:	2104      	movs	r1, #4
1006b3ce:	4308      	orrs	r0, r1
1006b3d0:	7120      	strb	r0, [r4, #4]
1006b3d2:	2000      	movs	r0, #0
1006b3d4:	e6dc      	b.n	1006b190 <AES_CMAC_Encrypt_Append+0x1c>
1006b3d6:	0000      	.short	0x0000
1006b3d8:	00000c1d 	.word	0x00000c1d

1006b3dc <AES_CMAC_Encrypt_Finish>:
1006b3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006b3de:	4616      	mov	r6, r2
1006b3e0:	460f      	mov	r7, r1
1006b3e2:	0004      	movs	r4, r0
1006b3e4:	d009      	beq.n	1006b3fa <AES_CMAC_Encrypt_Finish+0x1e>
1006b3e6:	2e00      	cmp	r6, #0
1006b3e8:	d007      	beq.n	1006b3fa <AES_CMAC_Encrypt_Finish+0x1e>
1006b3ea:	4625      	mov	r5, r4
1006b3ec:	3580      	adds	r5, #128	@ 0x80
1006b3ee:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
1006b3f0:	1e40      	subs	r0, r0, #1
1006b3f2:	2810      	cmp	r0, #16
1006b3f4:	d304      	bcc.n	1006b400 <AES_CMAC_Encrypt_Finish+0x24>
1006b3f6:	4813      	ldr	r0, [pc, #76]	@ (1006b444 <AES_CMAC_Encrypt_Finish+0x68>)
1006b3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006b3fa:	2061      	movs	r0, #97	@ 0x61
1006b3fc:	0140      	lsls	r0, r0, #5
1006b3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006b400:	7920      	ldrb	r0, [r4, #4]
1006b402:	0640      	lsls	r0, r0, #25
1006b404:	d404      	bmi.n	1006b410 <AES_CMAC_Encrypt_Finish+0x34>
1006b406:	2200      	movs	r2, #0
1006b408:	4611      	mov	r1, r2
1006b40a:	4620      	mov	r0, r4
1006b40c:	f7ff feb2 	bl	1006b174 <AES_CMAC_Encrypt_Append>
1006b410:	7920      	ldrb	r0, [r4, #4]
1006b412:	2102      	movs	r1, #2
1006b414:	4308      	orrs	r0, r1
1006b416:	7120      	strb	r0, [r4, #4]
1006b418:	2000      	movs	r0, #0
1006b41a:	2118      	movs	r1, #24
1006b41c:	e00c      	b.n	1006b438 <AES_CMAC_Encrypt_Finish+0x5c>
1006b41e:	17c2      	asrs	r2, r0, #31
1006b420:	0f92      	lsrs	r2, r2, #30
1006b422:	1812      	adds	r2, r2, r0
1006b424:	0892      	lsrs	r2, r2, #2
1006b426:	0092      	lsls	r2, r2, #2
1006b428:	1912      	adds	r2, r2, r4
1006b42a:	0783      	lsls	r3, r0, #30
1006b42c:	6952      	ldr	r2, [r2, #20]
1006b42e:	0edb      	lsrs	r3, r3, #27
1006b430:	1acb      	subs	r3, r1, r3
1006b432:	40da      	lsrs	r2, r3
1006b434:	543a      	strb	r2, [r7, r0]
1006b436:	1c40      	adds	r0, r0, #1
1006b438:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
1006b43a:	4282      	cmp	r2, r0
1006b43c:	dcef      	bgt.n	1006b41e <AES_CMAC_Encrypt_Finish+0x42>
1006b43e:	2000      	movs	r0, #0
1006b440:	6032      	str	r2, [r6, #0]
1006b442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006b444:	00000c1f 	.word	0x00000c1f

1006b448 <AES_CMAC_Encrypt_Init>:
1006b448:	b510      	push	{r4, lr}
1006b44a:	0004      	movs	r4, r0
1006b44c:	d007      	beq.n	1006b45e <AES_CMAC_Encrypt_Init+0x16>
1006b44e:	2302      	movs	r3, #2
1006b450:	2200      	movs	r2, #0
1006b452:	68a1      	ldr	r1, [r4, #8]
1006b454:	f000 f81a 	bl	1006b48c <AESstdInitEnc>
1006b458:	0001      	movs	r1, r0
1006b45a:	d003      	beq.n	1006b464 <AES_CMAC_Encrypt_Init+0x1c>
1006b45c:	e00c      	b.n	1006b478 <AES_CMAC_Encrypt_Init+0x30>
1006b45e:	2061      	movs	r0, #97	@ 0x61
1006b460:	0140      	lsls	r0, r0, #5
1006b462:	bd10      	pop	{r4, pc}
1006b464:	2000      	movs	r0, #0
1006b466:	2210      	movs	r2, #16
1006b468:	6122      	str	r2, [r4, #16]
1006b46a:	4602      	mov	r2, r0
1006b46c:	0083      	lsls	r3, r0, #2
1006b46e:	191b      	adds	r3, r3, r4
1006b470:	1c40      	adds	r0, r0, #1
1006b472:	615a      	str	r2, [r3, #20]
1006b474:	2804      	cmp	r0, #4
1006b476:	dbf9      	blt.n	1006b46c <AES_CMAC_Encrypt_Init+0x24>
1006b478:	6a60      	ldr	r0, [r4, #36]	@ 0x24
1006b47a:	2810      	cmp	r0, #16
1006b47c:	d001      	beq.n	1006b482 <AES_CMAC_Encrypt_Init+0x3a>
1006b47e:	4802      	ldr	r0, [pc, #8]	@ (1006b488 <AES_CMAC_Encrypt_Init+0x40>)
1006b480:	bd10      	pop	{r4, pc}
1006b482:	4608      	mov	r0, r1
1006b484:	bd10      	pop	{r4, pc}
1006b486:	0000      	.short	0x0000
1006b488:	00000c1d 	.word	0x00000c1d

1006b48c <AESstdInitEnc>:
1006b48c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006b48e:	2800      	cmp	r0, #0
1006b490:	d007      	beq.n	1006b4a2 <AESstdInitEnc+0x16>
1006b492:	2900      	cmp	r1, #0
1006b494:	d005      	beq.n	1006b4a2 <AESstdInitEnc+0x16>
1006b496:	075b      	lsls	r3, r3, #29
1006b498:	0f9c      	lsrs	r4, r3, #30
1006b49a:	2a00      	cmp	r2, #0
1006b49c:	d104      	bne.n	1006b4a8 <AESstdInitEnc+0x1c>
1006b49e:	2c01      	cmp	r4, #1
1006b4a0:	d002      	beq.n	1006b4a8 <AESstdInitEnc+0x1c>
1006b4a2:	2061      	movs	r0, #97	@ 0x61
1006b4a4:	0140      	lsls	r0, r0, #5
1006b4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006b4a8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
1006b4aa:	2b10      	cmp	r3, #16
1006b4ac:	d003      	beq.n	1006b4b6 <AESstdInitEnc+0x2a>
1006b4ae:	2b18      	cmp	r3, #24
1006b4b0:	d001      	beq.n	1006b4b6 <AESstdInitEnc+0x2a>
1006b4b2:	2b20      	cmp	r3, #32
1006b4b4:	d105      	bne.n	1006b4c2 <AESstdInitEnc+0x36>
1006b4b6:	2c01      	cmp	r4, #1
1006b4b8:	d005      	beq.n	1006b4c6 <AESstdInitEnc+0x3a>
1006b4ba:	6905      	ldr	r5, [r0, #16]
1006b4bc:	1e6d      	subs	r5, r5, #1
1006b4be:	2d10      	cmp	r5, #16
1006b4c0:	d301      	bcc.n	1006b4c6 <AESstdInitEnc+0x3a>
1006b4c2:	481a      	ldr	r0, [pc, #104]	@ (1006b52c <AESstdInitEnc+0xa0>)
1006b4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006b4c6:	2b10      	cmp	r3, #16
1006b4c8:	d002      	beq.n	1006b4d0 <AESstdInitEnc+0x44>
1006b4ca:	4818      	ldr	r0, [pc, #96]	@ (1006b52c <AESstdInitEnc+0xa0>)
1006b4cc:	1e80      	subs	r0, r0, #2
1006b4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006b4d0:	60c2      	str	r2, [r0, #12]
1006b4d2:	7903      	ldrb	r3, [r0, #4]
1006b4d4:	25f9      	movs	r5, #249	@ 0xf9
1006b4d6:	402b      	ands	r3, r5
1006b4d8:	7103      	strb	r3, [r0, #4]
1006b4da:	2c01      	cmp	r4, #1
1006b4dc:	d020      	beq.n	1006b520 <AESstdInitEnc+0x94>
1006b4de:	2300      	movs	r3, #0
1006b4e0:	461c      	mov	r4, r3
1006b4e2:	009d      	lsls	r5, r3, #2
1006b4e4:	182d      	adds	r5, r5, r0
1006b4e6:	1c5b      	adds	r3, r3, #1
1006b4e8:	616c      	str	r4, [r5, #20]
1006b4ea:	2b04      	cmp	r3, #4
1006b4ec:	dbf9      	blt.n	1006b4e2 <AESstdInitEnc+0x56>
1006b4ee:	2300      	movs	r3, #0
1006b4f0:	e013      	b.n	1006b51a <AESstdInitEnc+0x8e>
1006b4f2:	17dc      	asrs	r4, r3, #31
1006b4f4:	0fa4      	lsrs	r4, r4, #30
1006b4f6:	18e4      	adds	r4, r4, r3
1006b4f8:	08a4      	lsrs	r4, r4, #2
1006b4fa:	00a4      	lsls	r4, r4, #2
1006b4fc:	1825      	adds	r5, r4, r0
1006b4fe:	462e      	mov	r6, r5
1006b500:	3614      	adds	r6, #20
1006b502:	46b4      	mov	ip, r6
1006b504:	1b1c      	subs	r4, r3, r4
1006b506:	5cd6      	ldrb	r6, [r2, r3]
1006b508:	00e4      	lsls	r4, r4, #3
1006b50a:	2718      	movs	r7, #24
1006b50c:	696d      	ldr	r5, [r5, #20]
1006b50e:	1b3c      	subs	r4, r7, r4
1006b510:	40a6      	lsls	r6, r4
1006b512:	4335      	orrs	r5, r6
1006b514:	4666      	mov	r6, ip
1006b516:	1c5b      	adds	r3, r3, #1
1006b518:	6035      	str	r5, [r6, #0]
1006b51a:	6904      	ldr	r4, [r0, #16]
1006b51c:	429c      	cmp	r4, r3
1006b51e:	dce8      	bgt.n	1006b4f2 <AESstdInitEnc+0x66>
1006b520:	7902      	ldrb	r2, [r0, #4]
1006b522:	07d2      	lsls	r2, r2, #31
1006b524:	d100      	bne.n	1006b528 <AESstdInitEnc+0x9c>
1006b526:	6081      	str	r1, [r0, #8]
1006b528:	2000      	movs	r0, #0
1006b52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006b52c:	00000c1f 	.word	0x00000c1f

Disassembly of section .init:

1006b530 <_init>:
1006b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006b532:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

1006b534 <_fini>:
1006b534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006b536:	46c0      	nop			@ (mov r8, r8)
